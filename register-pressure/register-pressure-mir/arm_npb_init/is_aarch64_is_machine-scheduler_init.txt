Before MISched:
# Machine code for function randlc: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP]
  fi#1: size=8, align=8, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=8, align=8, at location [SP]
  fi#4: size=8, align=8, at location [SP]
  fi#5: size=8, align=8, at location [SP]
  fi#6: size=8, align=8, at location [SP]
  fi#7: size=8, align=8, at location [SP]
  fi#8: size=8, align=8, at location [SP]
  fi#9: size=8, align=8, at location [SP]
  fi#10: size=8, align=8, at location [SP]
  fi#11: size=4, align=4, at location [SP]
  fi#12: size=4, align=4, at location [SP]
Function Live Ins: $x0 in %0, $x1 in %1

bb.0.entry:
  successors: %bb.1(0x30000000), %bb.8(0x50000000); %bb.1(37.50%), %bb.8(62.50%)
  liveins: $x0, $x1
  %1:gpr64 = COPY $x1
  %0:gpr64 = COPY $x0
  STRXui %0:gpr64, %stack.0.X.addr, 0 :: (store 8 into %ir.X.addr)
  STRXui %1:gpr64, %stack.1.A.addr, 0 :: (store 8 into %ir.A.addr)
  %2:gpr64common = ADRP target-flags(aarch64-page) @randlc.KS, debug-location !111; is.c:264:9
  %3:gpr32 = LDRWui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.KS, debug-location !111 :: (dereferenceable load 4 from @randlc.KS); is.c:264:9
  %87:gpr64common = ADRP target-flags(aarch64-page) @randlc.R23, debug-location !115; is.c:265:13
  %88:gpr64common = ADRP target-flags(aarch64-page) @randlc.R46, debug-location !117; is.c:266:13
  %89:gpr64common = ADRP target-flags(aarch64-page) @randlc.T23, debug-location !118; is.c:267:13
  %90:gpr64common = ADRP target-flags(aarch64-page) @randlc.T46, debug-location !119; is.c:268:13
  CBNZW %3:gpr32, %bb.8, debug-location !114; is.c:264:9
  B %bb.1, debug-location !114; is.c:264:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %5:gpr64 = MOVi64imm 4607182418800017408
  STRXui %5:gpr64, %87:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !115 :: (store 8 into @randlc.R23); is.c:265:13
  STRXui %5:gpr64, %88:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !117 :: (store 8 into @randlc.R46); is.c:266:13
  STRXui %5:gpr64, %89:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !118 :: (store 8 into @randlc.T23); is.c:267:13
  STRXui %5:gpr64, %90:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !119 :: (store 8 into @randlc.T46); is.c:268:13
  %9:gpr32 = MOVi32imm 1
  STRWui %9:gpr32, %stack.11.i, 0, debug-location !120 :: (store 4 into %ir.i); is.c:270:16
  %80:fpr64 = FMOVDi 96

bb.2.for.cond:
; predecessors: %bb.1, %bb.3
  successors: %bb.3(0x7c000000), %bb.4(0x04000000); %bb.3(96.88%), %bb.4(3.12%)

  %10:gpr32common = LDRWui %stack.11.i, 0, debug-location !123 :: (dereferenceable load 4 from %ir.i); is.c:270:21
  dead $wzr = SUBSWri %10:gpr32common, 23, 0, implicit-def $nzcv, debug-location !126; is.c:270:9
  Bcc 12, %bb.4, implicit killed $nzcv, debug-location !126; is.c:270:9
  B %bb.3, debug-location !126; is.c:270:9

bb.3.for.body:
; predecessors: %bb.2
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %79:fpr64 = LDRDui %87:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !127 :: (dereferenceable load 8 from @randlc.R23); is.c:271:26
  %81:fpr64 = FMULDrr %79:fpr64, %80:fpr64, debug-location !129; is.c:271:24
  STRDui %81:fpr64, %87:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !130 :: (store 8 into @randlc.R23); is.c:271:17
  %83:fpr64 = LDRDui %89:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !131 :: (dereferenceable load 8 from @randlc.T23); is.c:272:25
  %84:fpr64 = FADDDrr %83:fpr64, %83:fpr64, debug-location !132; is.c:272:23
  STRDui %84:fpr64, %89:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !133 :: (store 8 into @randlc.T23); is.c:272:17
  %85:gpr32common = LDRWui %stack.11.i, 0, debug-location !134 :: (dereferenceable load 4 from %ir.i); is.c:270:31
  %86:gpr32common = nsw ADDWri %85:gpr32common, 1, 0, debug-location !134; is.c:270:31
  STRWui %86:gpr32common, %stack.11.i, 0, debug-location !134 :: (store 4 into %ir.i); is.c:270:31
  B %bb.2, debug-location !135; is.c:270:9

bb.4.for.end:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %12:gpr32 = MOVi32imm 1
  STRWui %12:gpr32, %stack.11.i, 0, debug-location !138 :: (store 4 into %ir.i); is.c:274:16

bb.5.for.cond3:
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %13:gpr32common = LDRWui %stack.11.i, 0, debug-location !141 :: (dereferenceable load 4 from %ir.i); is.c:274:21
  dead $wzr = SUBSWri %13:gpr32common, 46, 0, implicit-def $nzcv, debug-location !144; is.c:274:9
  Bcc 12, %bb.7, implicit killed $nzcv, debug-location !144; is.c:274:9
  B %bb.6, debug-location !144; is.c:274:9

bb.6.for.body5:
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %70:fpr64 = LDRDui %88:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !145 :: (dereferenceable load 8 from @randlc.R46); is.c:275:26
  %72:fpr64 = FMULDrr %70:fpr64, %80:fpr64, debug-location !147; is.c:275:24
  STRDui %72:fpr64, %88:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !148 :: (store 8 into @randlc.R46); is.c:275:17
  %74:fpr64 = LDRDui %90:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !149 :: (dereferenceable load 8 from @randlc.T46); is.c:276:25
  %75:fpr64 = FADDDrr %74:fpr64, %74:fpr64, debug-location !150; is.c:276:23
  STRDui %75:fpr64, %90:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !151 :: (store 8 into @randlc.T46); is.c:276:17
  %76:gpr32common = LDRWui %stack.11.i, 0, debug-location !152 :: (dereferenceable load 4 from %ir.i); is.c:274:31
  %77:gpr32common = nsw ADDWri %76:gpr32common, 1, 0, debug-location !152; is.c:274:31
  STRWui %77:gpr32common, %stack.11.i, 0, debug-location !152 :: (store 4 into %ir.i); is.c:274:31
  B %bb.5, debug-location !153; is.c:274:9

bb.7.for.end10:
; predecessors: %bb.5
  successors: %bb.8(0x80000000); %bb.8(100.00%)

  %16:gpr32 = MOVi32imm 1
  STRWui %16:gpr32, %2:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.KS, debug-location !156 :: (store 4 into @randlc.KS); is.c:278:12

bb.8.if.end:
; predecessors: %bb.0, %bb.7

  %18:fpr64 = LDRDui %87:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !158 :: (dereferenceable load 8 from @randlc.R23); is.c:283:10
  %19:gpr64common = LDRXui %stack.1.A.addr, 0, debug-location !159 :: (dereferenceable load 8 from %ir.A.addr); is.c:283:17
  %20:fpr64 = LDRDui %19:gpr64common, 0, debug-location !160 :: (load 8 from %ir.10); is.c:283:16
  %21:fpr64 = FMULDrr %18:fpr64, %20:fpr64, debug-location !161; is.c:283:14
  STRDui %21:fpr64, %stack.2.T1, 0, debug-location !162 :: (store 8 into %ir.T1); is.c:283:8
  %22:gpr32 = FCVTZSUWDr %21:fpr64, debug-location !163; is.c:284:9
  STRWui %22:gpr32, %stack.12.j, 0, debug-location !164 :: (store 4 into %ir.j); is.c:284:7
  %23:fpr64 = SCVTFUWDri %22:gpr32, debug-location !165; is.c:285:10
  STRDui %23:fpr64, %stack.6.A1, 0, debug-location !166 :: (store 8 into %ir.A1); is.c:285:8
  %24:fpr64 = LDRDui %19:gpr64common, 0, debug-location !168 :: (load 8 from %ir.14); is.c:286:10
  %26:fpr64 = LDRDui %89:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !169 :: (dereferenceable load 8 from @randlc.T23); is.c:286:15
  %27:fpr64 = FMULDrr %26:fpr64, %23:fpr64, debug-location !171; is.c:286:19
  %28:fpr64 = FSUBDrr %24:fpr64, %27:fpr64, debug-location !172; is.c:286:13
  STRDui %28:fpr64, %stack.7.A2, 0, debug-location !173 :: (store 8 into %ir.A2); is.c:286:8
  %29:gpr64common = LDRXui %stack.0.X.addr, 0, debug-location !175 :: (dereferenceable load 8 from %ir.X.addr); is.c:292:17
  %30:fpr64 = LDRDui %29:gpr64common, 0, debug-location !176 :: (load 8 from %ir.19); is.c:292:16
  %31:fpr64 = FMULDrr %18:fpr64, %30:fpr64, debug-location !177; is.c:292:14
  STRDui %31:fpr64, %stack.2.T1, 0, debug-location !178 :: (store 8 into %ir.T1); is.c:292:8
  %32:gpr32 = FCVTZSUWDr %31:fpr64, debug-location !179; is.c:293:9
  STRWui %32:gpr32, %stack.12.j, 0, debug-location !180 :: (store 4 into %ir.j); is.c:293:7
  %33:fpr64 = SCVTFUWDri %32:gpr32, debug-location !181; is.c:294:10
  STRDui %33:fpr64, %stack.8.X1, 0, debug-location !182 :: (store 8 into %ir.X1); is.c:294:8
  %34:gpr64common = LDRXui %stack.0.X.addr, 0, debug-location !183 :: (dereferenceable load 8 from %ir.X.addr); is.c:295:11
  %35:fpr64 = LDRDui %34:gpr64common, 0, debug-location !184 :: (load 8 from %ir.23); is.c:295:10
  %36:fpr64 = LDRDui %89:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !185 :: (dereferenceable load 8 from @randlc.T23); is.c:295:15
  %37:fpr64 = FMULDrr %36:fpr64, %33:fpr64, debug-location !187; is.c:295:19
  %38:fpr64 = FSUBDrr %35:fpr64, %37:fpr64, debug-location !188; is.c:295:13
  STRDui %38:fpr64, %stack.9.X2, 0, debug-location !189 :: (store 8 into %ir.X2); is.c:295:8
  %39:fpr64 = LDRDui %stack.6.A1, 0, debug-location !190 :: (dereferenceable load 8 from %ir.A1); is.c:296:10
  %40:fpr64 = FMULDrr %39:fpr64, %38:fpr64, debug-location !192; is.c:296:13
  %41:fpr64 = FMULDrr %28:fpr64, %33:fpr64, debug-location !195; is.c:296:23
  %42:fpr64 = FADDDrr %40:fpr64, %41:fpr64, debug-location !196; is.c:296:18
  STRDui %42:fpr64, %stack.2.T1, 0, debug-location !197 :: (store 8 into %ir.T1); is.c:296:8
  %43:fpr64 = LDRDui %87:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !198 :: (dereferenceable load 8 from @randlc.R23); is.c:298:9
  %44:fpr64 = FMULDrr %43:fpr64, %42:fpr64, debug-location !200; is.c:298:13
  %45:gpr32 = FCVTZSUWDr %44:fpr64, debug-location !198; is.c:298:9
  STRWui %45:gpr32, %stack.12.j, 0, debug-location !201 :: (store 4 into %ir.j); is.c:298:7
  %46:fpr64 = SCVTFUWDri %45:gpr32, debug-location !202; is.c:299:10
  STRDui %46:fpr64, %stack.3.T2, 0, debug-location !203 :: (store 8 into %ir.T2); is.c:299:8
  %47:fpr64 = LDRDui %89:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !205 :: (dereferenceable load 8 from @randlc.T23); is.c:300:14
  %48:fpr64 = FMULDrr %47:fpr64, %46:fpr64, debug-location !207; is.c:300:18
  %49:fpr64 = FSUBDrr %42:fpr64, %48:fpr64, debug-location !208; is.c:300:12
  STRDui %49:fpr64, %stack.10.Z, 0, debug-location !209 :: (store 8 into %ir.Z); is.c:300:7
  %50:fpr64 = LDRDui %89:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !210 :: (dereferenceable load 8 from @randlc.T23); is.c:301:10
  %51:fpr64 = FMULDrr %50:fpr64, %49:fpr64, debug-location !212; is.c:301:14
  %52:fpr64 = LDRDui %stack.7.A2, 0, debug-location !213 :: (dereferenceable load 8 from %ir.A2); is.c:301:20
  %53:fpr64 = FMULDrr %52:fpr64, %38:fpr64, debug-location !215; is.c:301:23
  %54:fpr64 = FADDDrr %51:fpr64, %53:fpr64, debug-location !216; is.c:301:18
  STRDui %54:fpr64, %stack.4.T3, 0, debug-location !217 :: (store 8 into %ir.T3); is.c:301:8
  %56:fpr64 = LDRDui %88:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !218 :: (dereferenceable load 8 from @randlc.R46); is.c:302:9
  %57:fpr64 = FMULDrr %56:fpr64, %54:fpr64, debug-location !220; is.c:302:13
  %58:gpr32 = FCVTZSUWDr %57:fpr64, debug-location !218; is.c:302:9
  STRWui %58:gpr32, %stack.12.j, 0, debug-location !221 :: (store 4 into %ir.j); is.c:302:7
  %59:fpr64 = SCVTFUWDri %58:gpr32, debug-location !222; is.c:303:10
  STRDui %59:fpr64, %stack.5.T4, 0, debug-location !223 :: (store 8 into %ir.T4); is.c:303:8
  %61:fpr64 = LDRDui %90:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !225 :: (dereferenceable load 8 from @randlc.T46); is.c:304:15
  %62:fpr64 = FMULDrr %61:fpr64, %59:fpr64, debug-location !227; is.c:304:19
  %63:fpr64 = FSUBDrr %54:fpr64, %62:fpr64, debug-location !228; is.c:304:13
  %64:gpr64common = LDRXui %stack.0.X.addr, 0, debug-location !229 :: (dereferenceable load 8 from %ir.X.addr); is.c:304:6
  STRDui %63:fpr64, %64:gpr64common, 0, debug-location !230 :: (store 8 into %ir.47); is.c:304:8
  %65:fpr64 = LDRDui %88:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !231 :: (dereferenceable load 8 from @randlc.R46); is.c:305:13
  %66:gpr64common = LDRXui %stack.0.X.addr, 0, debug-location !232 :: (dereferenceable load 8 from %ir.X.addr); is.c:305:20
  %67:fpr64 = LDRDui %66:gpr64common, 0, debug-location !233 :: (load 8 from %ir.49); is.c:305:19
  %68:fpr64 = FMULDrr %65:fpr64, %67:fpr64, debug-location !234; is.c:305:17
  $d0 = COPY %68:fpr64, debug-location !235; is.c:305:5
  RET_ReallyLR implicit killed $d0, debug-location !235; is.c:305:5

# End machine code for function randlc.

********** MI Scheduling **********
randlc:%bb.0 entry
  From: %1:gpr64 = COPY $x1
    To: CBNZW %3:gpr32, %bb.8, debug-location !114; is.c:264:9
 RegionInstrs: 10
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %1:gpr64 = COPY $x1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(3): Data Latency=0 Reg=%1
  Single Issue       : false;
SU(1):   %0:gpr64 = COPY $x0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(2): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(2):   STRXui %0:gpr64, %stack.0.X.addr, 0 :: (store 8 into %ir.X.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(3):   STRXui %1:gpr64, %stack.1.A.addr, 0 :: (store 8 into %ir.A.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%1
  Single Issue       : false;
SU(4):   %2:gpr64common = ADRP target-flags(aarch64-page) @randlc.KS, debug-location !111; is.c:264:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=1 Reg=%2
  Single Issue       : false;
SU(5):   %3:gpr32 = LDRWui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.KS, debug-location !111 :: (dereferenceable load 4 from @randlc.KS); is.c:264:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(4): Data Latency=1 Reg=%2
  Successors:
    ExitSU: Data Latency=4 Reg=%3
  Single Issue       : false;
SU(6):   %87:gpr64common = ADRP target-flags(aarch64-page) @randlc.R23, debug-location !115; is.c:265:13
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(7):   %88:gpr64common = ADRP target-flags(aarch64-page) @randlc.R46, debug-location !117; is.c:266:13
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(8):   %89:gpr64common = ADRP target-flags(aarch64-page) @randlc.T23, debug-location !118; is.c:267:13
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(9):   %90:gpr64common = ADRP target-flags(aarch64-page) @randlc.T46, debug-location !119; is.c:268:13
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
ExitSU:   CBNZW %3:gpr32, %bb.8, debug-location !114; is.c:264:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Data Latency=4 Reg=%3
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 9 8 7 6 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 6 7 8 9 
Picking from Bot:
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %1:gpr64 = COPY $x1
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 9 8 7 6 3 2 
Queue TopQ.P: 
Queue TopQ.A: 9 1 4 6 7 8 3 
Picking from Bot:
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(9) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(1) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(1) %0:gpr64 = COPY $x0
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 9 8 7 6 3 2 
Queue TopQ.P: 
Queue TopQ.A: 9 3 4 6 7 8 2 
Picking from Bot:
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(9) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %90:gpr64common = ADRP target-flags(aarch64-page) @randlc.T46, debug-location !119; is.c:268:13
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 2 8 7 6 3 
Queue TopQ.P: 
Queue TopQ.A: 2 3 4 6 7 8 
BotQ.A RemLatency SU(5) 1c
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %89:gpr64common = ADRP target-flags(aarch64-page) @randlc.T23, debug-location !118; is.c:267:13
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 2 3 7 6 
Queue TopQ.P: 
Queue TopQ.A: 2 3 4 6 7 
BotQ.A RemLatency SU(5) 1c
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %88:gpr64common = ADRP target-flags(aarch64-page) @randlc.R46, debug-location !117; is.c:266:13
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 2 3 6 
Queue TopQ.P: 
Queue TopQ.A: 2 3 4 6 
BotQ.A RemLatency SU(5) 1c
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %87:gpr64common = ADRP target-flags(aarch64-page) @randlc.R23, debug-location !115; is.c:265:13
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 5 
Queue TopQ.P: 
Queue TopQ.A: 2 3 4 
BotQ.A RemLatency SU(5) 1c
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %3:gpr32 = LDRWui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.KS, debug-location !111 :: (dereferenceable load 4 from @randlc.KS); is.c:264:9
  Ready @4c
  BotQ.A TopLatency SU(5) 1c
  BotQ.A BotLatency SU(5) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 4 
Queue TopQ.P: 
Queue TopQ.A: 2 3 4 
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %2:gpr64common = ADRP target-flags(aarch64-page) @randlc.KS, debug-location !111; is.c:264:9
  Ready @5c
  BotQ.A BotLatency SU(4) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
Queue TopQ.P: 
Queue TopQ.A: 2 3 
  BotQ.A RemainingLatency 0 + 6c > CritPath 5
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) STRXui %1:gpr64, %stack.1.A.addr, 0 :: (store 8 into %ir.A.addr)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRXui %0:gpr64, %stack.0.X.addr, 0 :: (store 8 into %ir.X.addr)
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %1:gpr64 = COPY $x1
SU(1):   %0:gpr64 = COPY $x0
SU(2):   STRXui %0:gpr64, %stack.0.X.addr, 0 :: (store 8 into %ir.X.addr)
SU(3):   STRXui %1:gpr64, %stack.1.A.addr, 0 :: (store 8 into %ir.A.addr)
SU(4):   %2:gpr64common = ADRP target-flags(aarch64-page) @randlc.KS, debug-location !111; is.c:264:9
SU(5):   %3:gpr32 = LDRWui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.KS, debug-location !111 :: (dereferenceable load 4 from @randlc.KS); is.c:264:9
SU(6):   %87:gpr64common = ADRP target-flags(aarch64-page) @randlc.R23, debug-location !115; is.c:265:13
SU(7):   %88:gpr64common = ADRP target-flags(aarch64-page) @randlc.R46, debug-location !117; is.c:266:13
SU(8):   %89:gpr64common = ADRP target-flags(aarch64-page) @randlc.T23, debug-location !118; is.c:267:13
SU(9):   %90:gpr64common = ADRP target-flags(aarch64-page) @randlc.T46, debug-location !119; is.c:268:13

********** MI Scheduling **********
randlc:%bb.1 if.then
  From: %5:gpr64 = MOVi64imm 4607182418800017408
    To: End RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %5:gpr64 = MOVi64imm 4607182418800017408
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(4): Data Latency=1 Reg=%5
    SU(3): Data Latency=1 Reg=%5
    SU(2): Data Latency=1 Reg=%5
    SU(1): Data Latency=1 Reg=%5
  Single Issue       : false;
SU(1):   STRXui %5:gpr64, %87:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !115 :: (store 8 into @randlc.R23); is.c:265:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%5
  Single Issue       : false;
SU(2):   STRXui %5:gpr64, %88:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !117 :: (store 8 into @randlc.R46); is.c:266:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%5
  Single Issue       : false;
SU(3):   STRXui %5:gpr64, %89:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !118 :: (store 8 into @randlc.T23); is.c:267:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%5
  Single Issue       : false;
SU(4):   STRXui %5:gpr64, %90:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !119 :: (store 8 into @randlc.T46); is.c:268:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%5
  Single Issue       : false;
SU(5):   %9:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(6): Data Latency=1 Reg=%9
  Single Issue       : false;
SU(6):   STRWui %9:gpr32, %stack.11.i, 0, debug-location !120 :: (store 4 into %ir.i); is.c:270:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%9
  Single Issue       : false;
SU(7):   %80:fpr64 = FMOVDi 96
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 6 4 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 5 7 
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %80:fpr64 = FMOVDi 96
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 6 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 5 
BotQ.A RemLatency SU(1) 1c
  BotQ.A RemainingLatency 1 + 1c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) STRWui %9:gpr32, %stack.11.i, 0, debug-location !120 :: (store 4 into %ir.i); is.c:270:16
  Ready @1c
  BotQ.A TopLatency SU(6) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 4 3 5 
Queue TopQ.P: 
Queue TopQ.A: 0 5 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) STRXui %5:gpr64, %90:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !119 :: (store 8 into @randlc.T46); is.c:268:13
  Ready @2c
  BotQ.A TopLatency SU(4) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 5 3 
Queue TopQ.P: 
Queue TopQ.A: 0 5 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) STRXui %5:gpr64, %89:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !118 :: (store 8 into @randlc.T23); is.c:267:13
  Ready @3c
  BotQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 5 
Queue TopQ.P: 
Queue TopQ.A: 0 5 
  BotQ.A RemainingLatency 0 + 4c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) STRXui %5:gpr64, %88:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !117 :: (store 8 into @randlc.R46); is.c:266:13
  Ready @4c
  BotQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 5 
Queue TopQ.P: 
Queue TopQ.A: 0 5 
  BotQ.A RemainingLatency 0 + 5c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) STRXui %5:gpr64, %87:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !115 :: (store 8 into @randlc.R23); is.c:265:13
  Ready @5c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 0 
Queue TopQ.P: 
Queue TopQ.A: 0 5 
  BotQ.A RemainingLatency 0 + 6c > CritPath 1
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %9:gpr32 = MOVi32imm 1
  Ready @6c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %5:gpr64 = MOVi64imm 4607182418800017408
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   %5:gpr64 = MOVi64imm 4607182418800017408
SU(5):   %9:gpr32 = MOVi32imm 1
SU(1):   STRXui %5:gpr64, %87:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !115 :: (store 8 into @randlc.R23); is.c:265:13
SU(2):   STRXui %5:gpr64, %88:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !117 :: (store 8 into @randlc.R46); is.c:266:13
SU(3):   STRXui %5:gpr64, %89:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !118 :: (store 8 into @randlc.T23); is.c:267:13
SU(4):   STRXui %5:gpr64, %90:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !119 :: (store 8 into @randlc.T46); is.c:268:13
SU(6):   STRWui %9:gpr32, %stack.11.i, 0, debug-location !120 :: (store 4 into %ir.i); is.c:270:16
SU(7):   %80:fpr64 = FMOVDi 96

********** MI Scheduling **********
randlc:%bb.2 for.cond
  From: %10:gpr32common = LDRWui %stack.11.i, 0, debug-location !123 :: (dereferenceable load 4 from %ir.i); is.c:270:21
    To: Bcc 12, %bb.4, implicit killed $nzcv, debug-location !126; is.c:270:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %10:gpr32common = LDRWui %stack.11.i, 0, debug-location !123 :: (dereferenceable load 4 from %ir.i); is.c:270:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%10
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %10:gpr32common, 23, 0, implicit-def $nzcv, debug-location !126; is.c:270:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%10
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.4, implicit killed $nzcv, debug-location !126; is.c:270:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %10:gpr32common, 23, 0, implicit-def $nzcv, debug-location !126; is.c:270:9
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %10:gpr32common = LDRWui %stack.11.i, 0, debug-location !123 :: (dereferenceable load 4 from %ir.i); is.c:270:21
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %10:gpr32common = LDRWui %stack.11.i, 0, debug-location !123 :: (dereferenceable load 4 from %ir.i); is.c:270:21
SU(1):   dead $wzr = SUBSWri %10:gpr32common, 23, 0, implicit-def $nzcv, debug-location !126; is.c:270:9

********** MI Scheduling **********
randlc:%bb.3 for.body
  From: %79:fpr64 = LDRDui %87:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !127 :: (dereferenceable load 8 from @randlc.R23); is.c:271:26
    To: B %bb.2, debug-location !135; is.c:270:9
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %79:fpr64 = LDRDui %87:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !127 :: (dereferenceable load 8 from @randlc.R23); is.c:271:26
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%79
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %81:fpr64 = FMULDrr %79:fpr64, %80:fpr64, debug-location !129; is.c:271:24
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%79
  Successors:
    SU(2): Data Latency=1 Reg=%81
  Single Issue       : false;
SU(2):   STRDui %81:fpr64, %87:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !130 :: (store 8 into @randlc.R23); is.c:271:17
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%81
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   %83:fpr64 = LDRDui %89:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !131 :: (dereferenceable load 8 from @randlc.T23); is.c:272:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=%83
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   %84:fpr64 = FADDDrr %83:fpr64, %83:fpr64, debug-location !132; is.c:272:23
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%83
  Successors:
    SU(5): Data Latency=1 Reg=%84
  Single Issue       : false;
SU(5):   STRDui %84:fpr64, %89:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !133 :: (store 8 into @randlc.T23); is.c:272:17
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%84
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(6):   %85:gpr32common = LDRWui %stack.11.i, 0, debug-location !134 :: (dereferenceable load 4 from %ir.i); is.c:270:31
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(7): Data Latency=4 Reg=%85
    SU(8): Ord  Latency=0 Memory
  Single Issue       : false;
SU(7):   %86:gpr32common = nsw ADDWri %85:gpr32common, 1, 0, debug-location !134; is.c:270:31
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(6): Data Latency=4 Reg=%85
  Successors:
    SU(8): Data Latency=1 Reg=%86
  Single Issue       : false;
SU(8):   STRWui %86:gpr32common, %stack.11.i, 0, debug-location !134 :: (store 4 into %ir.i); is.c:270:31
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=%86
    SU(6): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.2, debug-location !135; is.c:270:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 5 2 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) STRWui %86:gpr32common, %stack.11.i, 0, debug-location !134 :: (store 4 into %ir.i); is.c:270:31
  Ready @0c
  BotQ.A TopLatency SU(8) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 5 7 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 
BotQ.A RemLatency SU(2) 5c
  BotQ.A RemainingLatency 5 + 1c > CritPath 5
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) STRDui %84:fpr64, %89:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !133 :: (store 8 into @randlc.T23); is.c:272:17
  Ready @1c
  BotQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 7 4 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 
BotQ.A RemLatency SU(2) 5c
  BotQ.A RemainingLatency 5 + 2c > CritPath 5
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) STRDui %81:fpr64, %87:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !130 :: (store 8 into @randlc.R23); is.c:271:17
  Ready @2c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 7 1 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 
BotQ.A RemLatency SU(4) 4c
  BotQ.A RemainingLatency 4 + 3c > CritPath 5
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %86:gpr32common = nsw ADDWri %85:gpr32common, 1, 0, debug-location !134; is.c:270:31
  Ready @3c
  BotQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 4 1 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 
BotQ.A RemLatency SU(4) 4c
  BotQ.A RemainingLatency 4 + 4c > CritPath 5
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %84:fpr64 = FADDDrr %83:fpr64, %83:fpr64, debug-location !132; is.c:272:23
  Ready @4c
  BotQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 3 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %81:fpr64 = FMULDrr %79:fpr64, %80:fpr64, debug-location !129; is.c:271:24
  Ready @5c
  BotQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 0 3 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %85:gpr32common = LDRWui %stack.11.i, 0, debug-location !134 :: (dereferenceable load 4 from %ir.i); is.c:270:31
  Ready @7c
  BotQ.A BotLatency SU(6) 5c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %83:fpr64 = LDRDui %89:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !131 :: (dereferenceable load 8 from @randlc.T23); is.c:272:25
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 8
  Executed: 9c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %79:fpr64 = LDRDui %87:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !127 :: (dereferenceable load 8 from @randlc.R23); is.c:271:26
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 9
  Executed: 10c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %79:fpr64 = LDRDui %87:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !127 :: (dereferenceable load 8 from @randlc.R23); is.c:271:26
SU(3):   %83:fpr64 = LDRDui %89:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !131 :: (dereferenceable load 8 from @randlc.T23); is.c:272:25
SU(6):   %85:gpr32common = LDRWui %stack.11.i, 0, debug-location !134 :: (dereferenceable load 4 from %ir.i); is.c:270:31
SU(1):   %81:fpr64 = FMULDrr %79:fpr64, %80:fpr64, debug-location !129; is.c:271:24
SU(4):   %84:fpr64 = FADDDrr %83:fpr64, %83:fpr64, debug-location !132; is.c:272:23
SU(7):   %86:gpr32common = nsw ADDWri %85:gpr32common, 1, 0, debug-location !134; is.c:270:31
SU(2):   STRDui %81:fpr64, %87:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !130 :: (store 8 into @randlc.R23); is.c:271:17
SU(5):   STRDui %84:fpr64, %89:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !133 :: (store 8 into @randlc.T23); is.c:272:17
SU(8):   STRWui %86:gpr32common, %stack.11.i, 0, debug-location !134 :: (store 4 into %ir.i); is.c:270:31

********** MI Scheduling **********
randlc:%bb.4 for.end
  From: %12:gpr32 = MOVi32imm 1
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %12:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%12
  Single Issue       : false;
SU(1):   STRWui %12:gpr32, %stack.11.i, 0, debug-location !138 :: (store 4 into %ir.i); is.c:274:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%12
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %12:gpr32, %stack.11.i, 0, debug-location !138 :: (store 4 into %ir.i); is.c:274:16
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %12:gpr32 = MOVi32imm 1
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %12:gpr32 = MOVi32imm 1
SU(1):   STRWui %12:gpr32, %stack.11.i, 0, debug-location !138 :: (store 4 into %ir.i); is.c:274:16

********** MI Scheduling **********
randlc:%bb.5 for.cond3
  From: %13:gpr32common = LDRWui %stack.11.i, 0, debug-location !141 :: (dereferenceable load 4 from %ir.i); is.c:274:21
    To: Bcc 12, %bb.7, implicit killed $nzcv, debug-location !144; is.c:274:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %13:gpr32common = LDRWui %stack.11.i, 0, debug-location !141 :: (dereferenceable load 4 from %ir.i); is.c:274:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%13
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %13:gpr32common, 46, 0, implicit-def $nzcv, debug-location !144; is.c:274:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%13
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.7, implicit killed $nzcv, debug-location !144; is.c:274:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %13:gpr32common, 46, 0, implicit-def $nzcv, debug-location !144; is.c:274:9
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %13:gpr32common = LDRWui %stack.11.i, 0, debug-location !141 :: (dereferenceable load 4 from %ir.i); is.c:274:21
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %13:gpr32common = LDRWui %stack.11.i, 0, debug-location !141 :: (dereferenceable load 4 from %ir.i); is.c:274:21
SU(1):   dead $wzr = SUBSWri %13:gpr32common, 46, 0, implicit-def $nzcv, debug-location !144; is.c:274:9

********** MI Scheduling **********
randlc:%bb.6 for.body5
  From: %70:fpr64 = LDRDui %88:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !145 :: (dereferenceable load 8 from @randlc.R46); is.c:275:26
    To: B %bb.5, debug-location !153; is.c:274:9
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %70:fpr64 = LDRDui %88:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !145 :: (dereferenceable load 8 from @randlc.R46); is.c:275:26
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%70
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %72:fpr64 = FMULDrr %70:fpr64, %80:fpr64, debug-location !147; is.c:275:24
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%70
  Successors:
    SU(2): Data Latency=1 Reg=%72
  Single Issue       : false;
SU(2):   STRDui %72:fpr64, %88:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !148 :: (store 8 into @randlc.R46); is.c:275:17
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%72
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   %74:fpr64 = LDRDui %90:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !149 :: (dereferenceable load 8 from @randlc.T46); is.c:276:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=%74
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   %75:fpr64 = FADDDrr %74:fpr64, %74:fpr64, debug-location !150; is.c:276:23
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%74
  Successors:
    SU(5): Data Latency=1 Reg=%75
  Single Issue       : false;
SU(5):   STRDui %75:fpr64, %90:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !151 :: (store 8 into @randlc.T46); is.c:276:17
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%75
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(6):   %76:gpr32common = LDRWui %stack.11.i, 0, debug-location !152 :: (dereferenceable load 4 from %ir.i); is.c:274:31
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(7): Data Latency=4 Reg=%76
    SU(8): Ord  Latency=0 Memory
  Single Issue       : false;
SU(7):   %77:gpr32common = nsw ADDWri %76:gpr32common, 1, 0, debug-location !152; is.c:274:31
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(6): Data Latency=4 Reg=%76
  Successors:
    SU(8): Data Latency=1 Reg=%77
  Single Issue       : false;
SU(8):   STRWui %77:gpr32common, %stack.11.i, 0, debug-location !152 :: (store 4 into %ir.i); is.c:274:31
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=%77
    SU(6): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.5, debug-location !153; is.c:274:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 5 2 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) STRWui %77:gpr32common, %stack.11.i, 0, debug-location !152 :: (store 4 into %ir.i); is.c:274:31
  Ready @0c
  BotQ.A TopLatency SU(8) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 5 7 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 
BotQ.A RemLatency SU(2) 5c
  BotQ.A RemainingLatency 5 + 1c > CritPath 5
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) STRDui %75:fpr64, %90:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !151 :: (store 8 into @randlc.T46); is.c:276:17
  Ready @1c
  BotQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 7 4 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 
BotQ.A RemLatency SU(2) 5c
  BotQ.A RemainingLatency 5 + 2c > CritPath 5
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) STRDui %72:fpr64, %88:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !148 :: (store 8 into @randlc.R46); is.c:275:17
  Ready @2c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 7 1 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 
BotQ.A RemLatency SU(4) 4c
  BotQ.A RemainingLatency 4 + 3c > CritPath 5
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %77:gpr32common = nsw ADDWri %76:gpr32common, 1, 0, debug-location !152; is.c:274:31
  Ready @3c
  BotQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 4 1 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 
BotQ.A RemLatency SU(4) 4c
  BotQ.A RemainingLatency 4 + 4c > CritPath 5
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %75:fpr64 = FADDDrr %74:fpr64, %74:fpr64, debug-location !150; is.c:276:23
  Ready @4c
  BotQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 3 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %72:fpr64 = FMULDrr %70:fpr64, %80:fpr64, debug-location !147; is.c:275:24
  Ready @5c
  BotQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 0 3 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %76:gpr32common = LDRWui %stack.11.i, 0, debug-location !152 :: (dereferenceable load 4 from %ir.i); is.c:274:31
  Ready @7c
  BotQ.A BotLatency SU(6) 5c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %74:fpr64 = LDRDui %90:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !149 :: (dereferenceable load 8 from @randlc.T46); is.c:276:25
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 8
  Executed: 9c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %70:fpr64 = LDRDui %88:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !145 :: (dereferenceable load 8 from @randlc.R46); is.c:275:26
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 9
  Executed: 10c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %70:fpr64 = LDRDui %88:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !145 :: (dereferenceable load 8 from @randlc.R46); is.c:275:26
SU(3):   %74:fpr64 = LDRDui %90:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !149 :: (dereferenceable load 8 from @randlc.T46); is.c:276:25
SU(6):   %76:gpr32common = LDRWui %stack.11.i, 0, debug-location !152 :: (dereferenceable load 4 from %ir.i); is.c:274:31
SU(1):   %72:fpr64 = FMULDrr %70:fpr64, %80:fpr64, debug-location !147; is.c:275:24
SU(4):   %75:fpr64 = FADDDrr %74:fpr64, %74:fpr64, debug-location !150; is.c:276:23
SU(7):   %77:gpr32common = nsw ADDWri %76:gpr32common, 1, 0, debug-location !152; is.c:274:31
SU(2):   STRDui %72:fpr64, %88:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !148 :: (store 8 into @randlc.R46); is.c:275:17
SU(5):   STRDui %75:fpr64, %90:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !151 :: (store 8 into @randlc.T46); is.c:276:17
SU(8):   STRWui %77:gpr32common, %stack.11.i, 0, debug-location !152 :: (store 4 into %ir.i); is.c:274:31

********** MI Scheduling **********
randlc:%bb.7 for.end10
  From: %16:gpr32 = MOVi32imm 1
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %16:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%16
  Single Issue       : false;
SU(1):   STRWui %16:gpr32, %2:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.KS, debug-location !156 :: (store 4 into @randlc.KS); is.c:278:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%16
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %16:gpr32, %2:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.KS, debug-location !156 :: (store 4 into @randlc.KS); is.c:278:12
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %16:gpr32 = MOVi32imm 1
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %16:gpr32 = MOVi32imm 1
SU(1):   STRWui %16:gpr32, %2:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.KS, debug-location !156 :: (store 4 into @randlc.KS); is.c:278:12

********** MI Scheduling **********
randlc:%bb.8 if.end
  From: %18:fpr64 = LDRDui %87:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !158 :: (dereferenceable load 8 from @randlc.R23); is.c:283:10
    To: RET_ReallyLR implicit killed $d0, debug-location !235; is.c:305:5
 RegionInstrs: 65
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR128_lo=1
ZPR_3b=1
FPR128_lo+ZPR_3b=1
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=1
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=1
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=1
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=1
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=1
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=1
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8=4
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=1
GPR32=6
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR4_with_zsub3_in_ZPR_4b=1
ZPR4_with_zsub_in_FPR128_lo=1
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=1
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
Live In: %88 %90 %89 %87 
Live Out: 
Live Thru: 
Top Pressure:
GPR32=4
Bottom Pressure:
FPR128_lo=1
ZPR_3b=1
FPR128_lo+ZPR_3b=1
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=1
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=1
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=1
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=1
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=1
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=1
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8=1
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=1
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR4_with_zsub3_in_ZPR_4b=1
ZPR4_with_zsub_in_FPR128_lo=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
Excess PSets: 
Cluster ld/st SU(14) - SU(22)
  Copy Succ SU(15)
  Copy Succ SU(59)
SU(0):   %18:fpr64 = LDRDui %87:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !158 :: (dereferenceable load 8 from @randlc.R23); is.c:283:10
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 51
  Successors:
    SU(16): Data Latency=4 Reg=%18
    SU(3): Data Latency=4 Reg=%18
    SU(59): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(1):   %19:gpr64common = LDRXui %stack.1.A.addr, 0, debug-location !159 :: (dereferenceable load 8 from %ir.A.addr); is.c:283:17
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 55
  Successors:
    SU(9): Data Latency=4 Reg=%19
    SU(2): Data Latency=4 Reg=%19
    SU(59): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   %20:fpr64 = LDRDui %19:gpr64common, 0, debug-location !160 :: (load 8 from %ir.10); is.c:283:16
  # preds left       : 1
  # succs left       : 17
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 51
  Predecessors:
    SU(1): Data Latency=4 Reg=%19
  Successors:
    SU(3): Data Latency=4 Reg=%20
    SU(59): Ord  Latency=0 Memory
    SU(54): Ord  Latency=0 Memory
    SU(52): Ord  Latency=0 Memory
    SU(36): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(48): Ord  Latency=0 Memory
    SU(42): Ord  Latency=0 Memory
    SU(38): Ord  Latency=0 Memory
    SU(32): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(3):   %21:fpr64 = FMULDrr %18:fpr64, %20:fpr64, debug-location !161; is.c:283:14
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 47
  Predecessors:
    SU(2): Data Latency=4 Reg=%20
    SU(0): Data Latency=4 Reg=%18
  Successors:
    SU(5): Data Latency=1 Reg=%21
    SU(4): Data Latency=1 Reg=%21
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(4):   STRDui %21:fpr64, %stack.2.T1, 0, debug-location !162 :: (store 8 into %ir.T1); is.c:283:8
  # preds left       : 2
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 44
  Predecessors:
    SU(3): Data Latency=1 Reg=%21
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(32): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(62): Ord  Latency=1 Memory
    SU(23): Ord  Latency=1 Memory
    SU(15): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
    SU(59): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(5):   %22:gpr32 = FCVTZSUWDr %21:fpr64, debug-location !163; is.c:284:9
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 46
  Predecessors:
    SU(3): Data Latency=1 Reg=%21
  Successors:
    SU(7): Data Latency=1 Reg=%22
    SU(6): Data Latency=1 Reg=%22
  Pressure Diff      : FPR8 1    GPR32 -1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(6):   STRWui %22:gpr32, %stack.12.j, 0, debug-location !164 :: (store 4 into %ir.j); is.c:284:7
  # preds left       : 2
  # succs left       : 8
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 44
  Predecessors:
    SU(5): Data Latency=1 Reg=%22
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(52): Ord  Latency=0 Memory
    SU(36): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(62): Ord  Latency=1 Memory
    SU(23): Ord  Latency=1 Memory
    SU(15): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
    SU(59): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(7):   %23:fpr64 = SCVTFUWDri %22:gpr32, debug-location !165; is.c:285:10
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 45
  Predecessors:
    SU(5): Data Latency=1 Reg=%22
  Successors:
    SU(11): Data Latency=1 Reg=%23
    SU(8): Data Latency=1 Reg=%23
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(8):   STRDui %23:fpr64, %stack.6.A1, 0, debug-location !166 :: (store 8 into %ir.A1); is.c:285:8
  # preds left       : 2
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 44
  Predecessors:
    SU(7): Data Latency=1 Reg=%23
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(28): Ord  Latency=1 Memory
    SU(62): Ord  Latency=1 Memory
    SU(23): Ord  Latency=1 Memory
    SU(15): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
    SU(59): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(9):   %24:fpr64 = LDRDui %19:gpr64common, 0, debug-location !168 :: (load 8 from %ir.14); is.c:286:10
  # preds left       : 4
  # succs left       : 14
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 43
  Predecessors:
    SU(8): Ord  Latency=1 Memory
    SU(6): Ord  Latency=1 Memory
    SU(4): Ord  Latency=1 Memory
    SU(1): Data Latency=4 Reg=%19
  Successors:
    SU(12): Data Latency=4 Reg=%24
    SU(59): Ord  Latency=0 Memory
    SU(54): Ord  Latency=0 Memory
    SU(52): Ord  Latency=0 Memory
    SU(36): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(48): Ord  Latency=0 Memory
    SU(42): Ord  Latency=0 Memory
    SU(38): Ord  Latency=0 Memory
    SU(32): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(10):   %26:fpr64 = LDRDui %89:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !169 :: (dereferenceable load 8 from @randlc.T23); is.c:286:15
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 44
  Successors:
    SU(11): Data Latency=4 Reg=%26
    SU(59): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(11):   %27:fpr64 = FMULDrr %26:fpr64, %23:fpr64, debug-location !171; is.c:286:19
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 40
  Predecessors:
    SU(7): Data Latency=1 Reg=%23
    SU(10): Data Latency=4 Reg=%26
  Successors:
    SU(12): Data Latency=1 Reg=%27
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(12):   %28:fpr64 = FSUBDrr %24:fpr64, %27:fpr64, debug-location !172; is.c:286:13
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 39
  Predecessors:
    SU(9): Data Latency=4 Reg=%24
    SU(11): Data Latency=1 Reg=%27
  Successors:
    SU(30): Data Latency=1 Reg=%28
    SU(13): Data Latency=1 Reg=%28
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(13):   STRDui %28:fpr64, %stack.7.A2, 0, debug-location !173 :: (store 8 into %ir.A2); is.c:286:8
  # preds left       : 3
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 38
  Predecessors:
    SU(12): Data Latency=1 Reg=%28
    SU(9): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(45): Ord  Latency=1 Memory
    SU(62): Ord  Latency=1 Memory
    SU(23): Ord  Latency=1 Memory
    SU(15): Ord  Latency=1 Memory
    SU(59): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(14):   %29:gpr64common = LDRXui %stack.0.X.addr, 0, debug-location !175 :: (dereferenceable load 8 from %ir.X.addr); is.c:292:17
  # preds left       : 0
  # succs left       : 2
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 41
  Successors:
    SU(15): Data Latency=4 Reg=%29
    SU(59): Ord  Latency=0 Memory
    SU(22): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(15):   %30:fpr64 = LDRDui %29:gpr64common, 0, debug-location !176 :: (load 8 from %ir.19); is.c:292:16
  # preds left       : 6
  # succs left       : 13
  # rdefs left       : 0
  Latency            : 4
  Depth              : 18
  Height             : 37
  Predecessors:
    SU(14): Data Latency=4 Reg=%29
    SU(13): Ord  Latency=1 Memory
    SU(8): Ord  Latency=1 Memory
    SU(6): Ord  Latency=1 Memory
    SU(4): Ord  Latency=1 Memory
    SU(22): Ord  Latency=0 Artificial
  Successors:
    SU(16): Data Latency=4 Reg=%30
    SU(59): Ord  Latency=0 Memory
    SU(54): Ord  Latency=0 Memory
    SU(52): Ord  Latency=0 Memory
    SU(36): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(48): Ord  Latency=0 Memory
    SU(42): Ord  Latency=0 Memory
    SU(38): Ord  Latency=0 Memory
    SU(32): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(16):   %31:fpr64 = FMULDrr %18:fpr64, %30:fpr64, debug-location !177; is.c:292:14
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 33
  Predecessors:
    SU(15): Data Latency=4 Reg=%30
    SU(0): Data Latency=4 Reg=%18
  Successors:
    SU(18): Data Latency=1 Reg=%31
    SU(17): Data Latency=1 Reg=%31
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(17):   STRDui %31:fpr64, %stack.2.T1, 0, debug-location !178 :: (store 8 into %ir.T1); is.c:292:8
  # preds left       : 5
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 23
  Height             : 30
  Predecessors:
    SU(16): Data Latency=1 Reg=%31
    SU(15): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(32): Ord  Latency=0 Memory
    SU(62): Ord  Latency=1 Memory
    SU(23): Ord  Latency=1 Memory
    SU(59): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(18):   %32:gpr32 = FCVTZSUWDr %31:fpr64, debug-location !179; is.c:293:9
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 23
  Height             : 32
  Predecessors:
    SU(16): Data Latency=1 Reg=%31
  Successors:
    SU(20): Data Latency=1 Reg=%32
    SU(19): Data Latency=1 Reg=%32
  Pressure Diff      : FPR8 1    GPR32 -1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(19):   STRWui %32:gpr32, %stack.12.j, 0, debug-location !180 :: (store 4 into %ir.j); is.c:293:7
  # preds left       : 5
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 24
  Height             : 30
  Predecessors:
    SU(18): Data Latency=1 Reg=%32
    SU(15): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(52): Ord  Latency=0 Memory
    SU(36): Ord  Latency=0 Memory
    SU(62): Ord  Latency=1 Memory
    SU(23): Ord  Latency=1 Memory
    SU(59): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(20):   %33:fpr64 = SCVTFUWDri %32:gpr32, debug-location !181; is.c:294:10
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 24
  Height             : 31
  Predecessors:
    SU(18): Data Latency=1 Reg=%32
  Successors:
    SU(30): Data Latency=1 Reg=%33
    SU(25): Data Latency=1 Reg=%33
    SU(21): Data Latency=1 Reg=%33
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(21):   STRDui %33:fpr64, %stack.8.X1, 0, debug-location !182 :: (store 8 into %ir.X1); is.c:294:8
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 25
  Height             : 30
  Predecessors:
    SU(20): Data Latency=1 Reg=%33
    SU(15): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(62): Ord  Latency=1 Memory
    SU(23): Ord  Latency=1 Memory
    SU(59): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(22):   %34:gpr64common = LDRXui %stack.0.X.addr, 0, debug-location !183 :: (dereferenceable load 8 from %ir.X.addr); is.c:295:11
  # preds left       : 0
  # succs left       : 3
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 37
  Predecessors:
    SU(14): Ord  Latency=0 Cluster
  Successors:
    SU(23): Data Latency=4 Reg=%34
    SU(59): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(23):   %35:fpr64 = LDRDui %34:gpr64common, 0, debug-location !184 :: (load 8 from %ir.23); is.c:295:10
  # preds left       : 8
  # succs left       : 10
  # rdefs left       : 0
  Latency            : 4
  Depth              : 26
  Height             : 29
  Predecessors:
    SU(22): Data Latency=4 Reg=%34
    SU(21): Ord  Latency=1 Memory
    SU(19): Ord  Latency=1 Memory
    SU(17): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(8): Ord  Latency=1 Memory
    SU(6): Ord  Latency=1 Memory
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(26): Data Latency=4 Reg=%35
    SU(59): Ord  Latency=0 Memory
    SU(54): Ord  Latency=0 Memory
    SU(52): Ord  Latency=0 Memory
    SU(36): Ord  Latency=0 Memory
    SU(48): Ord  Latency=0 Memory
    SU(42): Ord  Latency=0 Memory
    SU(38): Ord  Latency=0 Memory
    SU(32): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(24):   %36:fpr64 = LDRDui %89:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !185 :: (dereferenceable load 8 from @randlc.T23); is.c:295:15
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 30
  Successors:
    SU(25): Data Latency=4 Reg=%36
    SU(59): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(25):   %37:fpr64 = FMULDrr %36:fpr64, %33:fpr64, debug-location !187; is.c:295:19
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 25
  Height             : 26
  Predecessors:
    SU(20): Data Latency=1 Reg=%33
    SU(24): Data Latency=4 Reg=%36
  Successors:
    SU(26): Data Latency=1 Reg=%37
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(26):   %38:fpr64 = FSUBDrr %35:fpr64, %37:fpr64, debug-location !188; is.c:295:13
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 30
  Height             : 25
  Predecessors:
    SU(23): Data Latency=4 Reg=%35
    SU(25): Data Latency=1 Reg=%37
  Successors:
    SU(46): Data Latency=1 Reg=%38
    SU(29): Data Latency=1 Reg=%38
    SU(27): Data Latency=1 Reg=%38
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(27):   STRDui %38:fpr64, %stack.9.X2, 0, debug-location !189 :: (store 8 into %ir.X2); is.c:295:8
  # preds left       : 5
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 31
  Height             : 10
  Predecessors:
    SU(26): Data Latency=1 Reg=%38
    SU(23): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(62): Ord  Latency=1 Memory
    SU(59): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(28):   %39:fpr64 = LDRDui %stack.6.A1, 0, debug-location !190 :: (dereferenceable load 8 from %ir.A1); is.c:296:10
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 28
  Predecessors:
    SU(8): Ord  Latency=1 Memory
  Successors:
    SU(29): Data Latency=4 Reg=%39
    SU(59): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(29):   %40:fpr64 = FMULDrr %39:fpr64, %38:fpr64, debug-location !192; is.c:296:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 31
  Height             : 24
  Predecessors:
    SU(26): Data Latency=1 Reg=%38
    SU(28): Data Latency=4 Reg=%39
  Successors:
    SU(31): Data Latency=1 Reg=%40
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(30):   %41:fpr64 = FMULDrr %28:fpr64, %33:fpr64, debug-location !195; is.c:296:23
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 25
  Height             : 24
  Predecessors:
    SU(20): Data Latency=1 Reg=%33
    SU(12): Data Latency=1 Reg=%28
  Successors:
    SU(31): Data Latency=1 Reg=%41
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(31):   %42:fpr64 = FADDDrr %40:fpr64, %41:fpr64, debug-location !196; is.c:296:18
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 32
  Height             : 23
  Predecessors:
    SU(29): Data Latency=1 Reg=%40
    SU(30): Data Latency=1 Reg=%41
  Successors:
    SU(41): Data Latency=1 Reg=%42
    SU(34): Data Latency=1 Reg=%42
    SU(32): Data Latency=1 Reg=%42
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(32):   STRDui %42:fpr64, %stack.2.T1, 0, debug-location !197 :: (store 8 into %ir.T1); is.c:296:8
  # preds left       : 7
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 33
  Height             : 10
  Predecessors:
    SU(31): Data Latency=1 Reg=%42
    SU(23): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(62): Ord  Latency=1 Memory
    SU(59): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(33):   %43:fpr64 = LDRDui %87:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !198 :: (dereferenceable load 8 from @randlc.R23); is.c:298:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 26
  Successors:
    SU(34): Data Latency=4 Reg=%43
    SU(59): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(34):   %44:fpr64 = FMULDrr %43:fpr64, %42:fpr64, debug-location !200; is.c:298:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 33
  Height             : 22
  Predecessors:
    SU(31): Data Latency=1 Reg=%42
    SU(33): Data Latency=4 Reg=%43
  Successors:
    SU(35): Data Latency=1 Reg=%44
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(35):   %45:gpr32 = FCVTZSUWDr %44:fpr64, debug-location !198; is.c:298:9
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 34
  Height             : 21
  Predecessors:
    SU(34): Data Latency=1 Reg=%44
  Successors:
    SU(37): Data Latency=1 Reg=%45
    SU(36): Data Latency=1 Reg=%45
  Pressure Diff      : FPR8 1    GPR32 -1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(36):   STRWui %45:gpr32, %stack.12.j, 0, debug-location !201 :: (store 4 into %ir.j); is.c:298:7
  # preds left       : 7
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 35
  Height             : 10
  Predecessors:
    SU(35): Data Latency=1 Reg=%45
    SU(23): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(52): Ord  Latency=0 Memory
    SU(62): Ord  Latency=1 Memory
    SU(59): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(37):   %46:fpr64 = SCVTFUWDri %45:gpr32, debug-location !202; is.c:299:10
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 35
  Height             : 20
  Predecessors:
    SU(35): Data Latency=1 Reg=%45
  Successors:
    SU(40): Data Latency=1 Reg=%46
    SU(38): Data Latency=1 Reg=%46
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(38):   STRDui %46:fpr64, %stack.3.T2, 0, debug-location !203 :: (store 8 into %ir.T2); is.c:299:8
  # preds left       : 5
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 36
  Height             : 10
  Predecessors:
    SU(37): Data Latency=1 Reg=%46
    SU(23): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(62): Ord  Latency=1 Memory
    SU(59): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(39):   %47:fpr64 = LDRDui %89:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !205 :: (dereferenceable load 8 from @randlc.T23); is.c:300:14
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 23
  Successors:
    SU(40): Data Latency=4 Reg=%47
    SU(59): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(40):   %48:fpr64 = FMULDrr %47:fpr64, %46:fpr64, debug-location !207; is.c:300:18
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 36
  Height             : 19
  Predecessors:
    SU(37): Data Latency=1 Reg=%46
    SU(39): Data Latency=4 Reg=%47
  Successors:
    SU(41): Data Latency=1 Reg=%48
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(41):   %49:fpr64 = FSUBDrr %42:fpr64, %48:fpr64, debug-location !208; is.c:300:12
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 37
  Height             : 18
  Predecessors:
    SU(40): Data Latency=1 Reg=%48
    SU(31): Data Latency=1 Reg=%42
  Successors:
    SU(44): Data Latency=1 Reg=%49
    SU(42): Data Latency=1 Reg=%49
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(42):   STRDui %49:fpr64, %stack.10.Z, 0, debug-location !209 :: (store 8 into %ir.Z); is.c:300:7
  # preds left       : 5
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 38
  Height             : 10
  Predecessors:
    SU(41): Data Latency=1 Reg=%49
    SU(23): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(62): Ord  Latency=1 Memory
    SU(59): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(43):   %50:fpr64 = LDRDui %89:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !210 :: (dereferenceable load 8 from @randlc.T23); is.c:301:10
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 21
  Successors:
    SU(44): Data Latency=4 Reg=%50
    SU(59): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(44):   %51:fpr64 = FMULDrr %50:fpr64, %49:fpr64, debug-location !212; is.c:301:14
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 38
  Height             : 17
  Predecessors:
    SU(41): Data Latency=1 Reg=%49
    SU(43): Data Latency=4 Reg=%50
  Successors:
    SU(47): Data Latency=1 Reg=%51
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(45):   %52:fpr64 = LDRDui %stack.7.A2, 0, debug-location !213 :: (dereferenceable load 8 from %ir.A2); is.c:301:20
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 18
  Height             : 21
  Predecessors:
    SU(13): Ord  Latency=1 Memory
  Successors:
    SU(46): Data Latency=4 Reg=%52
    SU(59): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(46):   %53:fpr64 = FMULDrr %52:fpr64, %38:fpr64, debug-location !215; is.c:301:23
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 31
  Height             : 17
  Predecessors:
    SU(26): Data Latency=1 Reg=%38
    SU(45): Data Latency=4 Reg=%52
  Successors:
    SU(47): Data Latency=1 Reg=%53
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(47):   %54:fpr64 = FADDDrr %51:fpr64, %53:fpr64, debug-location !216; is.c:301:18
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 39
  Height             : 16
  Predecessors:
    SU(44): Data Latency=1 Reg=%51
    SU(46): Data Latency=1 Reg=%53
  Successors:
    SU(57): Data Latency=1 Reg=%54
    SU(50): Data Latency=1 Reg=%54
    SU(48): Data Latency=1 Reg=%54
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(48):   STRDui %54:fpr64, %stack.4.T3, 0, debug-location !217 :: (store 8 into %ir.T3); is.c:301:8
  # preds left       : 5
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 40
  Height             : 10
  Predecessors:
    SU(47): Data Latency=1 Reg=%54
    SU(23): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(62): Ord  Latency=1 Memory
    SU(59): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(49):   %56:fpr64 = LDRDui %88:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !218 :: (dereferenceable load 8 from @randlc.R46); is.c:302:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 19
  Successors:
    SU(50): Data Latency=4 Reg=%56
    SU(59): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(50):   %57:fpr64 = FMULDrr %56:fpr64, %54:fpr64, debug-location !220; is.c:302:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 40
  Height             : 15
  Predecessors:
    SU(47): Data Latency=1 Reg=%54
    SU(49): Data Latency=4 Reg=%56
  Successors:
    SU(51): Data Latency=1 Reg=%57
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(51):   %58:gpr32 = FCVTZSUWDr %57:fpr64, debug-location !218; is.c:302:9
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 41
  Height             : 14
  Predecessors:
    SU(50): Data Latency=1 Reg=%57
  Successors:
    SU(53): Data Latency=1 Reg=%58
    SU(52): Data Latency=1 Reg=%58
  Pressure Diff      : FPR8 1    GPR32 -1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(52):   STRWui %58:gpr32, %stack.12.j, 0, debug-location !221 :: (store 4 into %ir.j); is.c:302:7
  # preds left       : 8
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 42
  Height             : 10
  Predecessors:
    SU(51): Data Latency=1 Reg=%58
    SU(36): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(62): Ord  Latency=1 Memory
    SU(59): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(53):   %59:fpr64 = SCVTFUWDri %58:gpr32, debug-location !222; is.c:303:10
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 42
  Height             : 13
  Predecessors:
    SU(51): Data Latency=1 Reg=%58
  Successors:
    SU(56): Data Latency=1 Reg=%59
    SU(54): Data Latency=1 Reg=%59
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(54):   STRDui %59:fpr64, %stack.5.T4, 0, debug-location !223 :: (store 8 into %ir.T4); is.c:303:8
  # preds left       : 5
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 43
  Height             : 10
  Predecessors:
    SU(53): Data Latency=1 Reg=%59
    SU(23): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(62): Ord  Latency=1 Memory
    SU(59): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(55):   %61:fpr64 = LDRDui %90:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !225 :: (dereferenceable load 8 from @randlc.T46); is.c:304:15
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(56): Data Latency=4 Reg=%61
    SU(59): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(56):   %62:fpr64 = FMULDrr %61:fpr64, %59:fpr64, debug-location !227; is.c:304:19
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 43
  Height             : 12
  Predecessors:
    SU(53): Data Latency=1 Reg=%59
    SU(55): Data Latency=4 Reg=%61
  Successors:
    SU(57): Data Latency=1 Reg=%62
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(57):   %63:fpr64 = FSUBDrr %54:fpr64, %62:fpr64, debug-location !228; is.c:304:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 44
  Height             : 11
  Predecessors:
    SU(56): Data Latency=1 Reg=%62
    SU(47): Data Latency=1 Reg=%54
  Successors:
    SU(59): Data Latency=1 Reg=%63
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(58):   %64:gpr64common = LDRXui %stack.0.X.addr, 0, debug-location !229 :: (dereferenceable load 8 from %ir.X.addr); is.c:304:6
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(59): Data Latency=4 Reg=%64
    SU(59): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(59):   STRDui %63:fpr64, %64:gpr64common, 0, debug-location !230 :: (store 8 into %ir.47); is.c:304:8
  # preds left       : 35
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 45
  Height             : 10
  Predecessors:
    SU(57): Data Latency=1 Reg=%63
    SU(58): Ord  Latency=0 Memory
    SU(58): Data Latency=4 Reg=%64
    SU(55): Ord  Latency=0 Memory
    SU(54): Ord  Latency=0 Memory
    SU(52): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(48): Ord  Latency=0 Memory
    SU(45): Ord  Latency=0 Memory
    SU(43): Ord  Latency=0 Memory
    SU(42): Ord  Latency=0 Memory
    SU(39): Ord  Latency=0 Memory
    SU(38): Ord  Latency=0 Memory
    SU(36): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(32): Ord  Latency=0 Memory
    SU(28): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(22): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(62): Ord  Latency=1 Memory
    SU(61): Ord  Latency=1 Memory
    SU(60): Ord  Latency=1 Memory
  Pressure Diff      : FPR8 1    GPR32 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(60):   %65:fpr64 = LDRDui %88:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !231 :: (dereferenceable load 8 from @randlc.R46); is.c:305:13
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 46
  Height             : 5
  Predecessors:
    SU(59): Ord  Latency=1 Memory
  Successors:
    SU(63): Data Latency=4 Reg=%65
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(61):   %66:gpr64common = LDRXui %stack.0.X.addr, 0, debug-location !232 :: (dereferenceable load 8 from %ir.X.addr); is.c:305:20
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 46
  Height             : 9
  Predecessors:
    SU(59): Ord  Latency=1 Memory
  Successors:
    SU(62): Data Latency=4 Reg=%66
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(62):   %67:fpr64 = LDRDui %66:gpr64common, 0, debug-location !233 :: (load 8 from %ir.49); is.c:305:19
  # preds left       : 17
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 50
  Height             : 5
  Predecessors:
    SU(61): Data Latency=4 Reg=%66
    SU(59): Ord  Latency=1 Memory
    SU(54): Ord  Latency=1 Memory
    SU(52): Ord  Latency=1 Memory
    SU(48): Ord  Latency=1 Memory
    SU(42): Ord  Latency=1 Memory
    SU(38): Ord  Latency=1 Memory
    SU(36): Ord  Latency=1 Memory
    SU(32): Ord  Latency=1 Memory
    SU(27): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(19): Ord  Latency=1 Memory
    SU(17): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(8): Ord  Latency=1 Memory
    SU(6): Ord  Latency=1 Memory
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(63): Data Latency=4 Reg=%67
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(63):   %68:fpr64 = FMULDrr %65:fpr64, %67:fpr64, debug-location !234; is.c:305:17
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 54
  Height             : 1
  Predecessors:
    SU(62): Data Latency=4 Reg=%67
    SU(60): Data Latency=4 Reg=%65
  Successors:
    SU(64): Data Latency=1 Reg=%68
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(64):   $d0 = COPY %68:fpr64, debug-location !235; is.c:305:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 55
  Height             : 0
  Predecessors:
    SU(63): Data Latency=1 Reg=%68
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : FPR128_lo -1    ZPR_3b -1    FPR128_lo+ZPR_3b -1    QQ_with_qsub1_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR4_with_zsub3_in_ZPR_4b -1    ZPR4_with_zsub_in_FPR128_lo -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1
  Single Issue       : false;
ExitSU:   RET_ReallyLR implicit killed $d0, debug-location !235; is.c:305:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 55
  Height             : 0
  Predecessors:
    SU(64): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 55
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 64 
Pick Bot ONLY1     
Scheduling SU(64) $d0 = COPY %68:fpr64, debug-location !235; is.c:305:5
Bottom Pressure:
FPR8=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %68
  UpdateRegP: SU(64) $d0 = COPY %68:fpr64, debug-location !235; is.c:305:5
              to FPR128_lo -1    ZPR_3b -1    FPR128_lo+ZPR_3b -1    QQ_with_qsub1_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8 -1    FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR4_with_zsub3_in_ZPR_4b -1    ZPR4_with_zsub_in_FPR128_lo -1    FPR8+ZPR_3b -1
  Ready @0c
  BotQ.A TopLatency SU(64) 55c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 63 
Pick Bot ONLY1     
Scheduling SU(63) %68:fpr64 = FMULDrr %65:fpr64, %67:fpr64, debug-location !234; is.c:305:17
Bottom Pressure:
FPR8=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %65
  UpdateRegP: SU(63) %68:fpr64 = FMULDrr %65:fpr64, %67:fpr64, debug-location !234; is.c:305:17
              to 
  LiveReg: %67
  UpdateRegP: SU(63) %68:fpr64 = FMULDrr %65:fpr64, %67:fpr64, debug-location !234; is.c:305:17
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @1c
  BotQ.A BotLatency SU(63) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 62 60 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 14 22 24 33 39 43 49 55 58 
BotQ.A RemLatency SU(62) 50c
Picking from Bot:
  Cand SU(62) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(62) %67:fpr64 = LDRDui %66:gpr64common, 0, debug-location !233 :: (load 8 from %ir.49); is.c:305:19
Bottom Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %66
  UpdateRegP: SU(62) %67:fpr64 = LDRDui %66:gpr64common, 0, debug-location !233 :: (load 8 from %ir.49); is.c:305:19
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @5c
  BotQ.A BotLatency SU(62) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 61 
Queue BotQ.A: 60 
Pick Bot ONLY1     
Scheduling SU(60) %65:fpr64 = LDRDui %88:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !231 :: (dereferenceable load 8 from @randlc.R46); is.c:305:13
Bottom Pressure:
GPR32=2
  LiveReg: %88
  UpdateRegP: SU(49) %56:fpr64 = LDRDui %88:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !218 :: (dereferenceable load 8 from @randlc.R46); is.c:302:9
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(60) %65:fpr64 = LDRDui %88:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !231 :: (dereferenceable load 8 from @randlc.R46); is.c:305:13
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 9 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 61 
Pick Bot ONLY1     
Scheduling SU(61) %66:gpr64common = LDRXui %stack.0.X.addr, 0, debug-location !232 :: (dereferenceable load 8 from %ir.X.addr); is.c:305:20
Bottom Pressure:
GPR32=1
  Ready @9c
  BotQ.A BotLatency SU(61) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 4
  Executed: 10c
  Critical: 4c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 59 
Pick Bot ONLY1     
Scheduling SU(59) STRDui %63:fpr64, %64:gpr64common, 0, debug-location !230 :: (store 8 into %ir.47); is.c:304:8
Bottom Pressure:
FPR8=1
GPR32=2
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %63
  UpdateRegP: SU(59) STRDui %63:fpr64, %64:gpr64common, 0, debug-location !230 :: (store 8 into %ir.47); is.c:304:8
              to GPR32 1
  LiveReg: %64
  UpdateRegP: SU(59) STRDui %63:fpr64, %64:gpr64common, 0, debug-location !230 :: (store 8 into %ir.47); is.c:304:8
              to 
  Ready @10c
  BotQ.A BotLatency SU(59) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 58 
Queue BotQ.A: 57 54 52 48 42 38 32 27 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 14 22 24 33 39 43 49 55 58 
BotQ.A RemLatency SU(57) 44c
Picking from Bot:
  Cand SU(57) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(57) %63:fpr64 = FSUBDrr %54:fpr64, %62:fpr64, debug-location !228; is.c:304:13
Bottom Pressure:
FPR8=2
GPR32=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %54
  UpdateRegP: SU(48) STRDui %54:fpr64, %stack.4.T3, 0, debug-location !217 :: (store 8 into %ir.T3); is.c:301:8
              to 
  UpdateRegP: SU(50) %57:fpr64 = FMULDrr %56:fpr64, %54:fpr64, debug-location !220; is.c:302:13
              to 
  UpdateRegP: SU(57) %63:fpr64 = FSUBDrr %54:fpr64, %62:fpr64, debug-location !228; is.c:304:13
              to 
  LiveReg: %62
  UpdateRegP: SU(57) %63:fpr64 = FSUBDrr %54:fpr64, %62:fpr64, debug-location !228; is.c:304:13
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @11c
  BotQ.A BotLatency SU(57) 11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 58 
Queue BotQ.A: 27 54 52 48 42 38 32 56 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 14 22 24 33 39 43 49 55 58 
BotQ.A RemLatency SU(54) 43c
Picking from Bot:
  Cand SU(27) ORDER                              
  Cand SU(54) ORDER                              
  Cand SU(56) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(56) %62:fpr64 = FMULDrr %61:fpr64, %59:fpr64, debug-location !227; is.c:304:19
Bottom Pressure:
FPR8=3
GPR32=2
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  LiveReg: %61
  UpdateRegP: SU(56) %62:fpr64 = FMULDrr %61:fpr64, %59:fpr64, debug-location !227; is.c:304:19
              to 
  LiveReg: %59
  UpdateRegP: SU(54) STRDui %59:fpr64, %stack.5.T4, 0, debug-location !223 :: (store 8 into %ir.T4); is.c:303:8
              to 
  UpdateRegP: SU(56) %62:fpr64 = FMULDrr %61:fpr64, %59:fpr64, debug-location !227; is.c:304:19
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @12c
  BotQ.A BotLatency SU(56) 12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 7
  Executed: 13c
  Critical: 7c, 7 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 58 55 
Queue BotQ.A: 27 54 52 48 42 38 32 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 14 22 24 33 39 43 49 55 58 
BotQ.A RemLatency SU(54) 43c
  BotQ.A RemainingLatency 43 + 13c > CritPath 55
Picking from Bot:
  Cand SU(27) ORDER                              
  Cand SU(54) BOT-PATH                  43 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(54) STRDui %59:fpr64, %stack.5.T4, 0, debug-location !223 :: (store 8 into %ir.T4); is.c:303:8
Bottom Pressure:
FPR8=3
GPR32=2
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  Ready @13c
  BotQ.A TopLatency SU(54) 43c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 8
  Executed: 14c
  Critical: 8c, 8 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 55 
Queue BotQ.A: 27 32 52 48 42 38 53 58 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 14 22 24 33 39 43 49 55 58 
BotQ.A RemLatency SU(52) 42c
  BotQ.A RemainingLatency 42 + 14c > CritPath 55
Picking from Bot:
  Cand SU(27) ORDER                              
  Cand SU(32) BOT-PATH                  33 cycles 
  Cand SU(52) BOT-PATH                  42 cycles 
  Cand SU(53) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(53) %59:fpr64 = SCVTFUWDri %58:gpr32, debug-location !222; is.c:303:10
Bottom Pressure:
FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %58
  UpdateRegP: SU(52) STRWui %58:gpr32, %stack.12.j, 0, debug-location !221 :: (store 4 into %ir.j); is.c:302:7
              to 
  UpdateRegP: SU(53) %59:fpr64 = SCVTFUWDri %58:gpr32, debug-location !222; is.c:303:10
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @14c
  BotQ.A BotLatency SU(53) 13c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 9
  Executed: 15c
  Critical: 9c, 9 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 55 
Queue BotQ.A: 27 32 52 48 42 38 58 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 14 22 24 33 39 43 49 55 58 
BotQ.A RemLatency SU(52) 42c
  BotQ.A RemainingLatency 42 + 15c > CritPath 55
Picking from Bot:
  Cand SU(27) ORDER                              
  Cand SU(32) BOT-PATH                  33 cycles 
  Cand SU(52) BOT-PATH                  42 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(52) STRWui %58:gpr32, %stack.12.j, 0, debug-location !221 :: (store 4 into %ir.j); is.c:302:7
Bottom Pressure:
FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @15c
  BotQ.A TopLatency SU(52) 42c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 10
  Executed: 16c
  Critical: 10c, 10 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 27 32 58 48 42 38 51 36 55 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 14 22 24 33 39 43 49 55 58 
BotQ.A RemLatency SU(51) 41c
  BotQ.A RemainingLatency 41 + 16c > CritPath 55
Picking from Bot:
  Cand SU(27) ORDER                              
  Cand SU(32) BOT-PATH                  33 cycles 
  Cand SU(48) BOT-PATH                  40 cycles 
  Cand SU(51) BOT-PATH                  41 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(51) %58:gpr32 = FCVTZSUWDr %57:fpr64, debug-location !218; is.c:302:9
Bottom Pressure:
FPR8=3
GPR32=2
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  LiveReg: %57
  UpdateRegP: SU(51) %58:gpr32 = FCVTZSUWDr %57:fpr64, debug-location !218; is.c:302:9
              to GPR32 -1
  Ready @16c
  BotQ.A BotLatency SU(51) 14c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 11
  Executed: 17c
  Critical: 11c, 11 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 27 32 58 48 42 38 55 36 50 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 14 22 24 33 39 43 49 55 58 
BotQ.A RemLatency SU(48) 40c
  BotQ.A RemainingLatency 40 + 17c > CritPath 55
Picking from Bot:
  Cand SU(27) ORDER                              
  Cand SU(32) BOT-PATH                  33 cycles 
  Cand SU(48) BOT-PATH                  40 cycles 
  Cand SU(50) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(50) %57:fpr64 = FMULDrr %56:fpr64, %54:fpr64, debug-location !220; is.c:302:13
Bottom Pressure:
FPR8=3
GPR32=2
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  LiveReg: %56
  UpdateRegP: SU(50) %57:fpr64 = FMULDrr %56:fpr64, %54:fpr64, debug-location !220; is.c:302:13
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @17c
  BotQ.A BotLatency SU(50) 15c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 12
  Executed: 18c
  Critical: 12c, 12 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 49 
Queue BotQ.A: 27 32 58 48 42 38 55 36 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 14 22 24 33 39 43 49 55 58 
BotQ.A RemLatency SU(48) 40c
  BotQ.A RemainingLatency 40 + 18c > CritPath 55
Picking from Bot:
  Cand SU(27) ORDER                              
  Cand SU(32) BOT-PATH                  33 cycles 
  Cand SU(48) BOT-PATH                  40 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(48) STRDui %54:fpr64, %stack.4.T3, 0, debug-location !217 :: (store 8 into %ir.T3); is.c:301:8
Bottom Pressure:
FPR8=3
GPR32=2
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  Ready @18c
  BotQ.A TopLatency SU(48) 40c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 13
  Executed: 19c
  Critical: 13c, 13 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 49 
Queue BotQ.A: 27 32 58 36 42 38 55 47 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 14 22 24 33 39 43 49 55 58 
BotQ.A RemLatency SU(47) 39c
  BotQ.A RemainingLatency 39 + 19c > CritPath 55
Picking from Bot:
  Cand SU(27) ORDER                              
  Cand SU(32) BOT-PATH                  33 cycles 
  Cand SU(36) BOT-PATH                  35 cycles 
  Cand SU(42) BOT-PATH                  38 cycles 
  Cand SU(47) BOT-PATH                  39 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(47) %54:fpr64 = FADDDrr %51:fpr64, %53:fpr64, debug-location !216; is.c:301:18
Bottom Pressure:
FPR8=4
GPR32=2
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  LiveReg: %51
  UpdateRegP: SU(47) %54:fpr64 = FADDDrr %51:fpr64, %53:fpr64, debug-location !216; is.c:301:18
              to 
  LiveReg: %53
  UpdateRegP: SU(47) %54:fpr64 = FADDDrr %51:fpr64, %53:fpr64, debug-location !216; is.c:301:18
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @19c
  BotQ.A BotLatency SU(47) 16c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 14
  Executed: 20c
  Critical: 14c, 14 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 49 
Queue BotQ.A: 27 32 58 36 42 38 55 44 46 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 14 22 24 33 39 43 49 55 58 
BotQ.A RemLatency SU(42) 38c
  BotQ.A RemainingLatency 38 + 20c > CritPath 55
Picking from Bot:
  Cand SU(27) ORDER                              
  Cand SU(32) BOT-PATH                  33 cycles 
  Cand SU(58) REG-MAX                            
  Cand SU(36) BOT-PATH                  35 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(36) STRWui %45:gpr32, %stack.12.j, 0, debug-location !201 :: (store 4 into %ir.j); is.c:298:7
Bottom Pressure:
FPR8=4
GPR32=3
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  LiveReg: %45
  UpdateRegP: SU(36) STRWui %45:gpr32, %stack.12.j, 0, debug-location !201 :: (store 4 into %ir.j); is.c:298:7
              to 
  UpdateRegP: SU(37) %46:fpr64 = SCVTFUWDri %45:gpr32, debug-location !202; is.c:299:10
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @20c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 15
  Executed: 21c
  Critical: 15c, 15 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 27 32 58 46 42 38 55 44 49 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 14 22 24 33 39 43 49 55 58 
BotQ.A RemLatency SU(42) 38c
  BotQ.A RemainingLatency 38 + 21c > CritPath 55
Picking from Bot:
  Cand SU(27) ORDER                              
  Cand SU(32) BOT-PATH                  33 cycles 
  Cand SU(58) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(58) %64:gpr64common = LDRXui %stack.0.X.addr, 0, debug-location !229 :: (dereferenceable load 8 from %ir.X.addr); is.c:304:6
Bottom Pressure:
FPR8=4
GPR32=2
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  Ready @21c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 16
  Executed: 22c
  Critical: 16c, 16 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 27 32 49 46 42 38 55 44 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 14 22 24 33 39 43 49 55 
BotQ.A RemLatency SU(42) 38c
  BotQ.A RemainingLatency 38 + 22c > CritPath 55
Picking from Bot:
  Cand SU(27) ORDER                              
  Cand SU(32) BOT-PATH                  33 cycles 
  Cand SU(49) REG-MAX                            
  Cand SU(55) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(55) %61:fpr64 = LDRDui %90:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !225 :: (dereferenceable load 8 from @randlc.T46); is.c:304:15
Bottom Pressure:
FPR8=3
GPR32=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  LiveReg: %90
  UpdateRegP: SU(55) %61:fpr64 = LDRDui %90:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !225 :: (dereferenceable load 8 from @randlc.T46); is.c:304:15
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @22c
  *** Max MOps 1 at cycle 22
Cycle: 23 BotQ.A
BotQ.A @23c
  Retired: 17
  Executed: 23c
  Critical: 17c, 17 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 27 32 49 46 42 38 44 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 14 22 24 33 39 43 49 
BotQ.A RemLatency SU(42) 38c
  BotQ.A RemainingLatency 38 + 23c > CritPath 55
Picking from Bot:
  Cand SU(27) ORDER                              
  Cand SU(32) BOT-PATH                  33 cycles 
  Cand SU(42) BOT-PATH                  38 cycles 
  Cand SU(44) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(44) %51:fpr64 = FMULDrr %50:fpr64, %49:fpr64, debug-location !212; is.c:301:14
Bottom Pressure:
FPR8=4
GPR32=3
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  LiveReg: %50
  UpdateRegP: SU(44) %51:fpr64 = FMULDrr %50:fpr64, %49:fpr64, debug-location !212; is.c:301:14
              to 
  LiveReg: %49
  UpdateRegP: SU(42) STRDui %49:fpr64, %stack.10.Z, 0, debug-location !209 :: (store 8 into %ir.Z); is.c:300:7
              to 
  UpdateRegP: SU(44) %51:fpr64 = FMULDrr %50:fpr64, %49:fpr64, debug-location !212; is.c:301:14
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @23c
  BotQ.A TopLatency SU(44) 38c
  BotQ.A BotLatency SU(44) 17c
  *** Max MOps 1 at cycle 23
Cycle: 24 BotQ.A
BotQ.A @24c
  Retired: 18
  Executed: 24c
  Critical: 18c, 18 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 43 
Queue BotQ.A: 27 32 49 46 42 38 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 14 22 24 33 39 43 49 
BotQ.A RemLatency SU(42) 38c
  BotQ.A RemainingLatency 38 + 24c > CritPath 55
Picking from Bot:
  Cand SU(27) ORDER                              
  Cand SU(32) BOT-PATH                  33 cycles 
  Cand SU(49) REG-MAX                            
  Cand SU(42) BOT-PATH                  38 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(42) STRDui %49:fpr64, %stack.10.Z, 0, debug-location !209 :: (store 8 into %ir.Z); is.c:300:7
Bottom Pressure:
FPR8=4
GPR32=3
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  Ready @24c
  BotQ.A TopLatency SU(42) 38c
  *** Max MOps 1 at cycle 24
Cycle: 25 BotQ.A
BotQ.A @25c
  Retired: 19
  Executed: 25c
  Critical: 19c, 19 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 43 
Queue BotQ.A: 27 32 49 46 38 41 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 14 22 24 33 39 43 49 
BotQ.A RemLatency SU(41) 37c
  BotQ.A RemainingLatency 37 + 25c > CritPath 55
Picking from Bot:
  Cand SU(27) ORDER                              
  Cand SU(32) BOT-PATH                  33 cycles 
  Cand SU(49) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(49) %56:fpr64 = LDRDui %88:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !218 :: (dereferenceable load 8 from @randlc.R46); is.c:302:9
Bottom Pressure:
FPR8=3
GPR32=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  Ready @25c
  BotQ.A BotLatency SU(49) 19c
  *** Max MOps 1 at cycle 25
Cycle: 26 BotQ.A
BotQ.A @26c
  Retired: 20
  Executed: 26c
  Critical: 20c, 20 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 43 
Queue BotQ.A: 27 32 41 46 38 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 14 22 24 33 39 43 
BotQ.A RemLatency SU(41) 37c
  BotQ.A RemainingLatency 37 + 26c > CritPath 55
Picking from Bot:
  Cand SU(27) ORDER                              
  Cand SU(32) BOT-PATH                  33 cycles 
  Cand SU(41) BOT-PATH                  37 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(41) %49:fpr64 = FSUBDrr %42:fpr64, %48:fpr64, debug-location !208; is.c:300:12
Bottom Pressure:
FPR8=4
GPR32=3
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  LiveReg: %42
  UpdateRegP: SU(32) STRDui %42:fpr64, %stack.2.T1, 0, debug-location !197 :: (store 8 into %ir.T1); is.c:296:8
              to 
  UpdateRegP: SU(34) %44:fpr64 = FMULDrr %43:fpr64, %42:fpr64, debug-location !200; is.c:298:13
              to 
  UpdateRegP: SU(41) %49:fpr64 = FSUBDrr %42:fpr64, %48:fpr64, debug-location !208; is.c:300:12
              to 
  LiveReg: %48
  UpdateRegP: SU(41) %49:fpr64 = FSUBDrr %42:fpr64, %48:fpr64, debug-location !208; is.c:300:12
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @26c
  BotQ.A TopLatency SU(41) 37c
  *** Max MOps 1 at cycle 26
Cycle: 27 BotQ.A
BotQ.A @27c
  Retired: 21
  Executed: 27c
  Critical: 21c, 21 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 27 32 38 46 40 43 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 14 22 24 33 39 43 
BotQ.A RemLatency SU(38) 36c
  BotQ.A RemainingLatency 36 + 27c > CritPath 55
Picking from Bot:
  Cand SU(27) ORDER                              
  Cand SU(32) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(32) STRDui %42:fpr64, %stack.2.T1, 0, debug-location !197 :: (store 8 into %ir.T1); is.c:296:8
Bottom Pressure:
FPR8=4
GPR32=3
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  Ready @27c
  *** Max MOps 1 at cycle 27
Cycle: 28 BotQ.A
BotQ.A @28c
  Retired: 22
  Executed: 28c
  Critical: 22c, 22 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 27 43 38 46 40 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 14 22 24 33 39 43 
BotQ.A RemLatency SU(38) 36c
  BotQ.A RemainingLatency 36 + 28c > CritPath 55
Picking from Bot:
  Cand SU(27) ORDER                              
  Cand SU(43) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(43) %50:fpr64 = LDRDui %89:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !210 :: (dereferenceable load 8 from @randlc.T23); is.c:301:10
Bottom Pressure:
FPR8=3
GPR32=4
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  LiveReg: %89
  UpdateRegP: SU(10) %26:fpr64 = LDRDui %89:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !169 :: (dereferenceable load 8 from @randlc.T23); is.c:286:15
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(24) %36:fpr64 = LDRDui %89:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !185 :: (dereferenceable load 8 from @randlc.T23); is.c:295:15
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(39) %47:fpr64 = LDRDui %89:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !205 :: (dereferenceable load 8 from @randlc.T23); is.c:300:14
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(43) %50:fpr64 = LDRDui %89:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !210 :: (dereferenceable load 8 from @randlc.T23); is.c:301:10
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @28c
  BotQ.A BotLatency SU(43) 21c
  *** Max MOps 1 at cycle 28
Cycle: 29 BotQ.A
BotQ.A @29c
  Retired: 23
  Executed: 29c
  Critical: 23c, 23 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 27 40 38 46 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 14 22 24 33 39 
BotQ.A RemLatency SU(40) 36c
  BotQ.A RemainingLatency 36 + 29c > CritPath 55
Picking from Bot:
  Cand SU(27) ORDER                              
  Cand SU(40) BOT-PATH                  36 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(40) %48:fpr64 = FMULDrr %47:fpr64, %46:fpr64, debug-location !207; is.c:300:18
Bottom Pressure:
FPR8=4
GPR32=4
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  LiveReg: %47
  UpdateRegP: SU(40) %48:fpr64 = FMULDrr %47:fpr64, %46:fpr64, debug-location !207; is.c:300:18
              to 
  LiveReg: %46
  UpdateRegP: SU(38) STRDui %46:fpr64, %stack.3.T2, 0, debug-location !203 :: (store 8 into %ir.T2); is.c:299:8
              to 
  UpdateRegP: SU(40) %48:fpr64 = FMULDrr %47:fpr64, %46:fpr64, debug-location !207; is.c:300:18
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @29c
  BotQ.A TopLatency SU(40) 36c
  *** Max MOps 1 at cycle 29
Cycle: 30 BotQ.A
BotQ.A @30c
  Retired: 24
  Executed: 30c
  Critical: 24c, 24 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 39 
Queue BotQ.A: 27 46 38 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 14 22 24 33 39 
BotQ.A RemLatency SU(38) 36c
  BotQ.A RemainingLatency 36 + 30c > CritPath 55
Picking from Bot:
  Cand SU(27) ORDER                              
  Cand SU(46) ORDER                              
  Cand SU(38) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(38) STRDui %46:fpr64, %stack.3.T2, 0, debug-location !203 :: (store 8 into %ir.T2); is.c:299:8
Bottom Pressure:
FPR8=4
GPR32=4
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  Ready @30c
  BotQ.A TopLatency SU(38) 36c
  *** Max MOps 1 at cycle 30
Cycle: 31 BotQ.A
BotQ.A @31c
  Retired: 25
  Executed: 31c
  Critical: 25c, 25 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 39 
Queue BotQ.A: 27 46 37 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 14 22 24 33 39 
BotQ.A RemLatency SU(37) 35c
  BotQ.A RemainingLatency 35 + 31c > CritPath 55
Picking from Bot:
  Cand SU(27) ORDER                              
  Cand SU(46) ORDER                              
  Cand SU(37) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(37) %46:fpr64 = SCVTFUWDri %45:gpr32, debug-location !202; is.c:299:10
Bottom Pressure:
FPR8=3
GPR32=4
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  Ready @31c
  *** Max MOps 1 at cycle 31
Cycle: 32 BotQ.A
BotQ.A @32c
  Retired: 26
  Executed: 32c
  Critical: 26c, 26 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 39 
Queue BotQ.A: 27 46 35 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 14 22 24 33 39 
BotQ.A RemLatency SU(35) 34c
  BotQ.A RemainingLatency 34 + 32c > CritPath 55
Picking from Bot:
  Cand SU(27) ORDER                              
  Cand SU(46) ORDER                              
  Cand SU(35) BOT-PATH                  34 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(35) %45:gpr32 = FCVTZSUWDr %44:fpr64, debug-location !198; is.c:298:9
Bottom Pressure:
FPR8=4
GPR32=3
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  LiveReg: %44
  UpdateRegP: SU(35) %45:gpr32 = FCVTZSUWDr %44:fpr64, debug-location !198; is.c:298:9
              to GPR32 -1
  Ready @32c
  *** Max MOps 1 at cycle 32
Cycle: 33 BotQ.A
BotQ.A @33c
  Retired: 27
  Executed: 33c
  Critical: 27c, 27 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 27 46 34 39 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 14 22 24 33 39 
BotQ.A RemLatency SU(34) 33c
  BotQ.A RemainingLatency 33 + 33c > CritPath 55
Picking from Bot:
  Cand SU(27) ORDER                              
  Cand SU(46) ORDER                              
  Cand SU(34) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(34) %44:fpr64 = FMULDrr %43:fpr64, %42:fpr64, debug-location !200; is.c:298:13
Bottom Pressure:
FPR8=4
GPR32=3
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  LiveReg: %43
  UpdateRegP: SU(34) %44:fpr64 = FMULDrr %43:fpr64, %42:fpr64, debug-location !200; is.c:298:13
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @33c
  BotQ.A BotLatency SU(34) 22c
  *** Max MOps 1 at cycle 33
Cycle: 34 BotQ.A
BotQ.A @34c
  Retired: 28
  Executed: 34c
  Critical: 28c, 28 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 33 
Queue BotQ.A: 27 46 39 31 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 14 22 24 33 39 
BotQ.A RemLatency SU(31) 32c
  BotQ.A RemainingLatency 32 + 34c > CritPath 55
Picking from Bot:
  Cand SU(27) ORDER                              
  Cand SU(46) ORDER                              
  Cand SU(39) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(39) %47:fpr64 = LDRDui %89:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !205 :: (dereferenceable load 8 from @randlc.T23); is.c:300:14
Bottom Pressure:
FPR8=3
GPR32=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  Ready @34c
  BotQ.A BotLatency SU(39) 23c
  *** Max MOps 1 at cycle 34
Cycle: 35 BotQ.A
BotQ.A @35c
  Retired: 29
  Executed: 35c
  Critical: 29c, 29 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 33 
Queue BotQ.A: 27 46 31 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 14 22 24 33 
BotQ.A RemLatency SU(31) 32c
  BotQ.A RemainingLatency 32 + 35c > CritPath 55
Picking from Bot:
  Cand SU(27) ORDER                              
  Cand SU(46) ORDER                              
  Cand SU(31) BOT-PATH                  32 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(31) %42:fpr64 = FADDDrr %40:fpr64, %41:fpr64, debug-location !196; is.c:296:18
Bottom Pressure:
FPR8=4
GPR32=3
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  LiveReg: %40
  UpdateRegP: SU(31) %42:fpr64 = FADDDrr %40:fpr64, %41:fpr64, debug-location !196; is.c:296:18
              to 
  LiveReg: %41
  UpdateRegP: SU(31) %42:fpr64 = FADDDrr %40:fpr64, %41:fpr64, debug-location !196; is.c:296:18
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @35c
  BotQ.A TopLatency SU(31) 32c
  *** Max MOps 1 at cycle 35
Cycle: 36 BotQ.A
BotQ.A @36c
  Retired: 30
  Executed: 36c
  Critical: 30c, 30 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 33 
Queue BotQ.A: 27 46 29 30 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 14 22 24 33 
BotQ.A RemLatency SU(27) 31c
  BotQ.A RemainingLatency 31 + 36c > CritPath 55
Picking from Bot:
  Cand SU(27) ORDER                              
  Cand SU(46) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(46) %53:fpr64 = FMULDrr %52:fpr64, %38:fpr64, debug-location !215; is.c:301:23
Bottom Pressure:
FPR8=5
GPR32=3
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
FPR8+ZPR_4b=5
FPR8+ZPR4_with_zsub2_in_ZPR_4b=5
FPR8+ZPR4_with_zsub3_in_ZPR_4b=5
FPR8+ZPR4_with_zsub_in_FPR128_lo=5
ZPR=5
  LiveReg: %52
  UpdateRegP: SU(46) %53:fpr64 = FMULDrr %52:fpr64, %38:fpr64, debug-location !215; is.c:301:23
              to 
  LiveReg: %38
  UpdateRegP: SU(27) STRDui %38:fpr64, %stack.9.X2, 0, debug-location !189 :: (store 8 into %ir.X2); is.c:295:8
              to 
  UpdateRegP: SU(29) %40:fpr64 = FMULDrr %39:fpr64, %38:fpr64, debug-location !192; is.c:296:13
              to 
  UpdateRegP: SU(46) %53:fpr64 = FMULDrr %52:fpr64, %38:fpr64, debug-location !215; is.c:301:23
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @36c
  *** Max MOps 1 at cycle 36
Cycle: 37 BotQ.A
BotQ.A @37c
  Retired: 31
  Executed: 37c
  Critical: 31c, 31 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 45 
Queue BotQ.A: 27 30 29 33 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 14 22 24 33 
BotQ.A RemLatency SU(27) 31c
BotQ.A RemLatency SU(45) 18c
  BotQ.A RemainingLatency 31 + 37c > CritPath 55
Picking from Bot:
  Cand SU(27) ORDER                              
  Cand SU(29) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(29) %40:fpr64 = FMULDrr %39:fpr64, %38:fpr64, debug-location !192; is.c:296:13
Bottom Pressure:
FPR8=5
GPR32=3
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
FPR8+ZPR_4b=5
FPR8+ZPR4_with_zsub2_in_ZPR_4b=5
FPR8+ZPR4_with_zsub3_in_ZPR_4b=5
FPR8+ZPR4_with_zsub_in_FPR128_lo=5
ZPR=5
  LiveReg: %39
  UpdateRegP: SU(29) %40:fpr64 = FMULDrr %39:fpr64, %38:fpr64, debug-location !192; is.c:296:13
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @37c
  BotQ.A TopLatency SU(29) 31c
  BotQ.A BotLatency SU(29) 24c
  *** Max MOps 1 at cycle 37
Cycle: 38 BotQ.A
BotQ.A @38c
  Retired: 32
  Executed: 38c
  Critical: 32c, 32 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 45 28 
Queue BotQ.A: 27 30 33 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 14 22 24 33 
BotQ.A RemLatency SU(27) 31c
BotQ.A RemLatency SU(45) 18c
  BotQ.A RemainingLatency 31 + 38c > CritPath 55
Picking from Bot:
  Cand SU(27) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(27) STRDui %38:fpr64, %stack.9.X2, 0, debug-location !189 :: (store 8 into %ir.X2); is.c:295:8
Bottom Pressure:
FPR8=5
GPR32=3
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
FPR8+ZPR_4b=5
FPR8+ZPR4_with_zsub2_in_ZPR_4b=5
FPR8+ZPR4_with_zsub3_in_ZPR_4b=5
FPR8+ZPR4_with_zsub_in_FPR128_lo=5
ZPR=5
  Ready @38c
  BotQ.A TopLatency SU(27) 31c
  *** Max MOps 1 at cycle 38
Cycle: 39 BotQ.A
BotQ.A @39c
  Retired: 33
  Executed: 39c
  Critical: 33c, 33 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 45 28 
Queue BotQ.A: 33 30 26 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 14 22 24 33 
BotQ.A RemLatency SU(26) 30c
BotQ.A RemLatency SU(45) 18c
  BotQ.A RemainingLatency 30 + 39c > CritPath 55
Picking from Bot:
  Cand SU(33) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(33) %43:fpr64 = LDRDui %87:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !198 :: (dereferenceable load 8 from @randlc.R23); is.c:298:9
Bottom Pressure:
FPR8=4
GPR32=4
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  LiveReg: %87
  UpdateRegP: SU(0) %18:fpr64 = LDRDui %87:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !158 :: (dereferenceable load 8 from @randlc.R23); is.c:283:10
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(33) %43:fpr64 = LDRDui %87:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !198 :: (dereferenceable load 8 from @randlc.R23); is.c:298:9
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @39c
  BotQ.A BotLatency SU(33) 26c
  *** Max MOps 1 at cycle 39
Cycle: 40 BotQ.A
BotQ.A @40c
  Retired: 34
  Executed: 40c
  Critical: 34c, 34 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 28 
Queue BotQ.A: 26 30 45 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 14 22 24 
BotQ.A RemLatency SU(26) 30c
BotQ.A RemLatency SU(28) 12c
  BotQ.A RemainingLatency 30 + 40c > CritPath 55
Picking from Bot:
  Cand SU(26) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(26) %38:fpr64 = FSUBDrr %35:fpr64, %37:fpr64, debug-location !188; is.c:295:13
Bottom Pressure:
FPR8=5
GPR32=4
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
FPR8+ZPR_4b=5
FPR8+ZPR4_with_zsub2_in_ZPR_4b=5
FPR8+ZPR4_with_zsub3_in_ZPR_4b=5
FPR8+ZPR4_with_zsub_in_FPR128_lo=5
ZPR=5
  LiveReg: %35
  UpdateRegP: SU(26) %38:fpr64 = FSUBDrr %35:fpr64, %37:fpr64, debug-location !188; is.c:295:13
              to 
  LiveReg: %37
  UpdateRegP: SU(26) %38:fpr64 = FSUBDrr %35:fpr64, %37:fpr64, debug-location !188; is.c:295:13
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @40c
  BotQ.A TopLatency SU(26) 30c
  *** Max MOps 1 at cycle 40
Cycle: 41 BotQ.A
BotQ.A @41c
  Retired: 35
  Executed: 41c
  Critical: 35c, 35 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 23 
Queue BotQ.A: 45 30 25 28 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 14 22 24 
BotQ.A RemLatency SU(30) 25c
BotQ.A RemLatency SU(23) 26c
  BotQ.A RemainingLatency 29 + 41c > CritPath 55
Picking from Bot:
  Cand SU(45) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(45) %52:fpr64 = LDRDui %stack.7.A2, 0, debug-location !213 :: (dereferenceable load 8 from %ir.A2); is.c:301:20
Bottom Pressure:
FPR8=4
GPR32=4
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  Ready @41c
  *** Max MOps 1 at cycle 41
Cycle: 42 BotQ.A
BotQ.A @42c
  Retired: 36
  Executed: 42c
  Critical: 36c, 36 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 23 
Queue BotQ.A: 28 30 25 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 14 22 24 
BotQ.A RemLatency SU(30) 25c
BotQ.A RemLatency SU(23) 26c
  BotQ.A RemainingLatency 28 + 42c > CritPath 55
Picking from Bot:
  Cand SU(28) ORDER                              
  Cand SU(30) BOT-PATH                  25 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(30) %41:fpr64 = FMULDrr %28:fpr64, %33:fpr64, debug-location !195; is.c:296:23
Bottom Pressure:
FPR8=5
GPR32=4
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
FPR8+ZPR_4b=5
FPR8+ZPR4_with_zsub2_in_ZPR_4b=5
FPR8+ZPR4_with_zsub3_in_ZPR_4b=5
FPR8+ZPR4_with_zsub_in_FPR128_lo=5
ZPR=5
  LiveReg: %28
  UpdateRegP: SU(13) STRDui %28:fpr64, %stack.7.A2, 0, debug-location !173 :: (store 8 into %ir.A2); is.c:286:8
              to 
  UpdateRegP: SU(30) %41:fpr64 = FMULDrr %28:fpr64, %33:fpr64, debug-location !195; is.c:296:23
              to 
  LiveReg: %33
  UpdateRegP: SU(21) STRDui %33:fpr64, %stack.8.X1, 0, debug-location !182 :: (store 8 into %ir.X1); is.c:294:8
              to 
  UpdateRegP: SU(25) %37:fpr64 = FMULDrr %36:fpr64, %33:fpr64, debug-location !187; is.c:295:19
              to 
  UpdateRegP: SU(30) %41:fpr64 = FMULDrr %28:fpr64, %33:fpr64, debug-location !195; is.c:296:23
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @42c
  *** Max MOps 1 at cycle 42
Cycle: 43 BotQ.A
BotQ.A @43c
  Retired: 37
  Executed: 43c
  Critical: 37c, 37 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 23 
Queue BotQ.A: 28 25 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 14 22 24 
BotQ.A RemLatency SU(25) 25c
BotQ.A RemLatency SU(23) 26c
  BotQ.A RemainingLatency 27 + 43c > CritPath 55
Picking from Bot:
  Cand SU(28) ORDER                              
  Cand SU(25) BOT-PATH                  25 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(25) %37:fpr64 = FMULDrr %36:fpr64, %33:fpr64, debug-location !187; is.c:295:19
Bottom Pressure:
FPR8=5
GPR32=4
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
FPR8+ZPR_4b=5
FPR8+ZPR4_with_zsub2_in_ZPR_4b=5
FPR8+ZPR4_with_zsub3_in_ZPR_4b=5
FPR8+ZPR4_with_zsub_in_FPR128_lo=5
ZPR=5
  LiveReg: %36
  UpdateRegP: SU(25) %37:fpr64 = FMULDrr %36:fpr64, %33:fpr64, debug-location !187; is.c:295:19
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @43c
  *** Max MOps 1 at cycle 43
Cycle: 44 BotQ.A
BotQ.A @44c
  Retired: 38
  Executed: 44c
  Critical: 38c, 38 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 24 
Queue BotQ.A: 28 23 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 14 22 24 
BotQ.A RemLatency SU(23) 26c
  BotQ.A RemainingLatency 26 + 44c > CritPath 55
Picking from Bot:
  Cand SU(28) ORDER                              
  Cand SU(23) BOT-PATH                  26 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(23) %35:fpr64 = LDRDui %34:gpr64common, 0, debug-location !184 :: (load 8 from %ir.23); is.c:295:10
Bottom Pressure:
FPR8=4
GPR32=5
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  LiveReg: %34
  UpdateRegP: SU(23) %35:fpr64 = LDRDui %34:gpr64common, 0, debug-location !184 :: (load 8 from %ir.23); is.c:295:10
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @44c
  BotQ.A BotLatency SU(23) 29c
  *** Max MOps 1 at cycle 44
Cycle: 45 BotQ.A
BotQ.A @45c
  Retired: 39
  Executed: 45c
  Critical: 39c, 39 MOps
  ExpectedLatency: 29c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 24 
Queue BotQ.A: 28 21 19 17 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 14 22 24 
BotQ.A RemLatency SU(21) 25c
  BotQ.A RemainingLatency 25 + 45c > CritPath 55
Picking from Bot:
  Cand SU(28) ORDER                              
  Cand SU(21) BOT-PATH                  25 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(21) STRDui %33:fpr64, %stack.8.X1, 0, debug-location !182 :: (store 8 into %ir.X1); is.c:294:8
Bottom Pressure:
FPR8=4
GPR32=5
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  Ready @45c
  BotQ.A BotLatency SU(21) 30c
  *** Max MOps 1 at cycle 45
Cycle: 46 BotQ.A
BotQ.A @46c
  Retired: 40
  Executed: 46c
  Critical: 40c, 40 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 24 
Queue BotQ.A: 28 17 19 20 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 14 22 24 
BotQ.A RemLatency SU(19) 24c
  BotQ.A RemainingLatency 24 + 46c > CritPath 55
Picking from Bot:
  Cand SU(28) ORDER                              
  Cand SU(17) BOT-PATH                  23 cycles 
  Cand SU(19) BOT-PATH                  24 cycles 
  Cand SU(20) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(20) %33:fpr64 = SCVTFUWDri %32:gpr32, debug-location !181; is.c:294:10
Bottom Pressure:
FPR8=3
GPR32=6
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  LiveReg: %32
  UpdateRegP: SU(19) STRWui %32:gpr32, %stack.12.j, 0, debug-location !180 :: (store 4 into %ir.j); is.c:293:7
              to 
  UpdateRegP: SU(20) %33:fpr64 = SCVTFUWDri %32:gpr32, debug-location !181; is.c:294:10
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @46c
  BotQ.A BotLatency SU(20) 31c
  *** Max MOps 1 at cycle 46
Cycle: 47 BotQ.A
BotQ.A @47c
  Retired: 41
  Executed: 47c
  Critical: 41c, 41 MOps
  ExpectedLatency: 31c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 28 17 19 24 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 14 22 24 
BotQ.A RemLatency SU(19) 24c
  BotQ.A RemainingLatency 24 + 47c > CritPath 55
Picking from Bot:
  Cand SU(28) ORDER                              
  Cand SU(17) BOT-PATH                  23 cycles 
  Cand SU(19) BOT-PATH                  24 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(19) STRWui %32:gpr32, %stack.12.j, 0, debug-location !180 :: (store 4 into %ir.j); is.c:293:7
Bottom Pressure:
FPR8=3
GPR32=6
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  Ready @47c
  BotQ.A TopLatency SU(19) 24c
  *** Max MOps 1 at cycle 47
Cycle: 48 BotQ.A
BotQ.A @48c
  Retired: 42
  Executed: 48c
  Critical: 42c, 42 MOps
  ExpectedLatency: 31c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 28 17 24 18 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 14 22 24 
BotQ.A RemLatency SU(17) 23c
  BotQ.A RemainingLatency 23 + 48c > CritPath 55
Picking from Bot:
  Cand SU(28) ORDER                              
  Cand SU(17) BOT-PATH                  23 cycles 
  Cand SU(18) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(18) %32:gpr32 = FCVTZSUWDr %31:fpr64, debug-location !179; is.c:293:9
Bottom Pressure:
FPR8=4
GPR32=5
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  LiveReg: %31
  UpdateRegP: SU(17) STRDui %31:fpr64, %stack.2.T1, 0, debug-location !178 :: (store 8 into %ir.T1); is.c:292:8
              to 
  UpdateRegP: SU(18) %32:gpr32 = FCVTZSUWDr %31:fpr64, debug-location !179; is.c:293:9
              to GPR32 -1
  Ready @48c
  BotQ.A BotLatency SU(18) 32c
  *** Max MOps 1 at cycle 48
Cycle: 49 BotQ.A
BotQ.A @49c
  Retired: 43
  Executed: 49c
  Critical: 43c, 43 MOps
  ExpectedLatency: 32c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 28 17 24 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 14 22 24 
BotQ.A RemLatency SU(17) 23c
  BotQ.A RemainingLatency 23 + 49c > CritPath 55
Picking from Bot:
  Cand SU(28) ORDER                              
  Cand SU(17) BOT-PATH                  23 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(17) STRDui %31:fpr64, %stack.2.T1, 0, debug-location !178 :: (store 8 into %ir.T1); is.c:292:8
Bottom Pressure:
FPR8=4
GPR32=5
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  Ready @49c
  BotQ.A TopLatency SU(17) 23c
  *** Max MOps 1 at cycle 49
Cycle: 50 BotQ.A
BotQ.A @50c
  Retired: 44
  Executed: 50c
  Critical: 44c, 44 MOps
  ExpectedLatency: 32c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 28 24 16 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 14 22 24 
BotQ.A RemLatency SU(16) 22c
  BotQ.A RemainingLatency 22 + 50c > CritPath 55
Picking from Bot:
  Cand SU(28) ORDER                              
  Cand SU(16) BOT-PATH                  22 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(16) %31:fpr64 = FMULDrr %18:fpr64, %30:fpr64, debug-location !177; is.c:292:14
Bottom Pressure:
FPR8=5
GPR32=5
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
FPR8+ZPR_4b=5
FPR8+ZPR4_with_zsub2_in_ZPR_4b=5
FPR8+ZPR4_with_zsub3_in_ZPR_4b=5
FPR8+ZPR4_with_zsub_in_FPR128_lo=5
ZPR=5
  LiveReg: %18
  UpdateRegP: SU(3) %21:fpr64 = FMULDrr %18:fpr64, %20:fpr64, debug-location !161; is.c:283:14
              to 
  UpdateRegP: SU(16) %31:fpr64 = FMULDrr %18:fpr64, %30:fpr64, debug-location !177; is.c:292:14
              to 
  LiveReg: %30
  UpdateRegP: SU(16) %31:fpr64 = FMULDrr %18:fpr64, %30:fpr64, debug-location !177; is.c:292:14
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @50c
  BotQ.A BotLatency SU(16) 33c
  *** Max MOps 1 at cycle 50
Cycle: 51 BotQ.A
BotQ.A @51c
  Retired: 45
  Executed: 51c
  Critical: 45c, 45 MOps
  ExpectedLatency: 33c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 15 
Queue BotQ.A: 28 24 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 14 22 24 
BotQ.A RemLatency SU(28) 12c
BotQ.A RemLatency SU(15) 18c
  BotQ.A RemainingLatency 21 + 51c > CritPath 55
Picking from Bot:
  Cand SU(28) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(28) %39:fpr64 = LDRDui %stack.6.A1, 0, debug-location !190 :: (dereferenceable load 8 from %ir.A1); is.c:296:10
Bottom Pressure:
FPR8=4
GPR32=5
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  Ready @51c
  *** Max MOps 1 at cycle 51
Cycle: 52 BotQ.A
BotQ.A @52c
  Retired: 46
  Executed: 52c
  Critical: 46c, 46 MOps
  ExpectedLatency: 33c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 15 
Queue BotQ.A: 24 
Pick Bot ONLY1     
Scheduling SU(24) %36:fpr64 = LDRDui %89:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !185 :: (dereferenceable load 8 from @randlc.T23); is.c:295:15
Bottom Pressure:
FPR8=3
GPR32=5
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  Ready @52c
  *** Max MOps 1 at cycle 52
Cycle: 53 BotQ.A
BotQ.A @53c
  Retired: 47
  Executed: 53c
  Critical: 47c, 47 MOps
  ExpectedLatency: 33c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 54 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 15 
Pick Bot ONLY1     
Scheduling SU(15) %30:fpr64 = LDRDui %29:gpr64common, 0, debug-location !176 :: (load 8 from %ir.19); is.c:292:16
Bottom Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %29
  UpdateRegP: SU(15) %30:fpr64 = LDRDui %29:gpr64common, 0, debug-location !176 :: (load 8 from %ir.19); is.c:292:16
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @54c
  BotQ.A BotLatency SU(15) 37c
  *** Max MOps 1 at cycle 54
Cycle: 55 BotQ.A
BotQ.A @55c
  Retired: 48
  Executed: 55c
  Critical: 48c, 48 MOps
  ExpectedLatency: 37c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 14 
Queue BotQ.A: 13 22 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 14 22 
BotQ.A RemLatency SU(13) 17c
  BotQ.A RemainingLatency 17 + 55c > CritPath 55
Picking from Bot:
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(13) STRDui %28:fpr64, %stack.7.A2, 0, debug-location !173 :: (store 8 into %ir.A2); is.c:286:8
Bottom Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @55c
  BotQ.A BotLatency SU(13) 38c
  *** Max MOps 1 at cycle 55
Cycle: 56 BotQ.A
BotQ.A @56c
  Retired: 49
  Executed: 56c
  Critical: 49c, 49 MOps
  ExpectedLatency: 38c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 14 
Queue BotQ.A: 22 12 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 14 22 
  BotQ.A RemainingLatency 0 + 56c > CritPath 55
Picking from Bot:
  Cand SU(22) ORDER                              
  Cand SU(12) BOT-PATH                  16 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(12) %28:fpr64 = FSUBDrr %24:fpr64, %27:fpr64, debug-location !172; is.c:286:13
Bottom Pressure:
FPR8=3
GPR32=6
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  LiveReg: %24
  UpdateRegP: SU(12) %28:fpr64 = FSUBDrr %24:fpr64, %27:fpr64, debug-location !172; is.c:286:13
              to 
  LiveReg: %27
  UpdateRegP: SU(12) %28:fpr64 = FSUBDrr %24:fpr64, %27:fpr64, debug-location !172; is.c:286:13
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @56c
  BotQ.A BotLatency SU(12) 39c
  *** Max MOps 1 at cycle 56
Cycle: 57 BotQ.A
BotQ.A @57c
  Retired: 50
  Executed: 57c
  Critical: 50c, 50 MOps
  ExpectedLatency: 39c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 14 9 
Queue BotQ.A: 22 11 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 14 22 
  BotQ.A RemainingLatency 0 + 57c > CritPath 55
Picking from Bot:
  Cand SU(22) ORDER                              
  Cand SU(11) BOT-PATH                  11 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(11) %27:fpr64 = FMULDrr %26:fpr64, %23:fpr64, debug-location !171; is.c:286:19
Bottom Pressure:
FPR8=4
GPR32=6
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  LiveReg: %26
  UpdateRegP: SU(11) %27:fpr64 = FMULDrr %26:fpr64, %23:fpr64, debug-location !171; is.c:286:19
              to 
  LiveReg: %23
  UpdateRegP: SU(8) STRDui %23:fpr64, %stack.6.A1, 0, debug-location !166 :: (store 8 into %ir.A1); is.c:285:8
              to 
  UpdateRegP: SU(11) %27:fpr64 = FMULDrr %26:fpr64, %23:fpr64, debug-location !171; is.c:286:19
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @57c
  BotQ.A BotLatency SU(11) 40c
  *** Max MOps 1 at cycle 57
Cycle: 58 BotQ.A
BotQ.A @58c
  Retired: 51
  Executed: 58c
  Critical: 51c, 51 MOps
  ExpectedLatency: 40c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 9 
Queue BotQ.A: 22 14 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 14 22 
  BotQ.A RemainingLatency 0 + 58c > CritPath 55
Picking from Bot:
  Cand SU(22) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(22) %34:gpr64common = LDRXui %stack.0.X.addr, 0, debug-location !183 :: (dereferenceable load 8 from %ir.X.addr); is.c:295:11
Bottom Pressure:
FPR8=4
GPR32=5
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  Ready @58c
  *** Max MOps 1 at cycle 58
Cycle: 59 BotQ.A
BotQ.A @59c
  Retired: 52
  Executed: 59c
  Critical: 52c, 52 MOps
  ExpectedLatency: 40c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 9 
Queue BotQ.A: 14 
Pick Bot ONLY1     
Scheduling SU(14) %29:gpr64common = LDRXui %stack.0.X.addr, 0, debug-location !175 :: (dereferenceable load 8 from %ir.X.addr); is.c:292:17
Bottom Pressure:
FPR8=4
GPR32=4
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  Ready @59c
  BotQ.A BotLatency SU(14) 41c
  *** Max MOps 1 at cycle 59
Cycle: 60 BotQ.A
BotQ.A @60c
  Retired: 53
  Executed: 60c
  Critical: 53c, 53 MOps
  ExpectedLatency: 41c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 
Queue BotQ.A: 9 
Pick Bot ONLY1     
Scheduling SU(9) %24:fpr64 = LDRDui %19:gpr64common, 0, debug-location !168 :: (load 8 from %ir.14); is.c:286:10
Bottom Pressure:
FPR8=3
GPR32=5
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  LiveReg: %19
  UpdateRegP: SU(2) %20:fpr64 = LDRDui %19:gpr64common, 0, debug-location !160 :: (load 8 from %ir.10); is.c:283:16
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(9) %24:fpr64 = LDRDui %19:gpr64common, 0, debug-location !168 :: (load 8 from %ir.14); is.c:286:10
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @60c
  BotQ.A BotLatency SU(9) 43c
  *** Max MOps 1 at cycle 60
Cycle: 61 BotQ.A
BotQ.A @61c
  Retired: 54
  Executed: 61c
  Critical: 54c, 54 MOps
  ExpectedLatency: 43c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 6 4 10 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 
  BotQ.A RemainingLatency 0 + 61c > CritPath 55
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(8) STRDui %23:fpr64, %stack.6.A1, 0, debug-location !166 :: (store 8 into %ir.A1); is.c:285:8
Bottom Pressure:
FPR8=3
GPR32=5
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  Ready @61c
  BotQ.A BotLatency SU(8) 44c
  *** Max MOps 1 at cycle 61
Cycle: 62 BotQ.A
BotQ.A @62c
  Retired: 55
  Executed: 62c
  Critical: 55c, 55 MOps
  ExpectedLatency: 44c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 6 4 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 
  BotQ.A RemainingLatency 0 + 62c > CritPath 55
Picking from Bot:
  Cand SU(10) ORDER                              
  Cand SU(6) BOT-PATH                  10 cycles 
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %23:fpr64 = SCVTFUWDri %22:gpr32, debug-location !165; is.c:285:10
Bottom Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %22
  UpdateRegP: SU(6) STRWui %22:gpr32, %stack.12.j, 0, debug-location !164 :: (store 4 into %ir.j); is.c:284:7
              to 
  UpdateRegP: SU(7) %23:fpr64 = SCVTFUWDri %22:gpr32, debug-location !165; is.c:285:10
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @62c
  BotQ.A BotLatency SU(7) 45c
  *** Max MOps 1 at cycle 62
Cycle: 63 BotQ.A
BotQ.A @63c
  Retired: 56
  Executed: 63c
  Critical: 56c, 56 MOps
  ExpectedLatency: 45c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 6 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 
  BotQ.A RemainingLatency 0 + 63c > CritPath 55
Picking from Bot:
  Cand SU(10) ORDER                              
  Cand SU(6) BOT-PATH                  10 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(6) STRWui %22:gpr32, %stack.12.j, 0, debug-location !164 :: (store 4 into %ir.j); is.c:284:7
Bottom Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @63c
  BotQ.A TopLatency SU(6) 10c
  *** Max MOps 1 at cycle 63
Cycle: 64 BotQ.A
BotQ.A @64c
  Retired: 57
  Executed: 64c
  Critical: 57c, 57 MOps
  ExpectedLatency: 45c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 4 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 
  BotQ.A RemainingLatency 0 + 64c > CritPath 55
Picking from Bot:
  Cand SU(10) ORDER                              
  Cand SU(4) BOT-PATH                  9 cycles 
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %22:gpr32 = FCVTZSUWDr %21:fpr64, debug-location !163; is.c:284:9
Bottom Pressure:
FPR8=3
GPR32=5
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  LiveReg: %21
  UpdateRegP: SU(4) STRDui %21:fpr64, %stack.2.T1, 0, debug-location !162 :: (store 8 into %ir.T1); is.c:283:8
              to 
  UpdateRegP: SU(5) %22:gpr32 = FCVTZSUWDr %21:fpr64, debug-location !163; is.c:284:9
              to GPR32 -1
  Ready @64c
  BotQ.A BotLatency SU(5) 46c
  *** Max MOps 1 at cycle 64
Cycle: 65 BotQ.A
BotQ.A @65c
  Retired: 58
  Executed: 65c
  Critical: 58c, 58 MOps
  ExpectedLatency: 46c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 
  BotQ.A RemainingLatency 0 + 65c > CritPath 55
Picking from Bot:
  Cand SU(10) ORDER                              
  Cand SU(4) BOT-PATH                  9 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) STRDui %21:fpr64, %stack.2.T1, 0, debug-location !162 :: (store 8 into %ir.T1); is.c:283:8
Bottom Pressure:
FPR8=3
GPR32=5
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  Ready @65c
  BotQ.A TopLatency SU(4) 9c
  *** Max MOps 1 at cycle 65
Cycle: 66 BotQ.A
BotQ.A @66c
  Retired: 59
  Executed: 66c
  Critical: 59c, 59 MOps
  ExpectedLatency: 46c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 
  BotQ.A RemainingLatency 0 + 66c > CritPath 55
Picking from Bot:
  Cand SU(10) ORDER                              
  Cand SU(3) BOT-PATH                  8 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(3) %21:fpr64 = FMULDrr %18:fpr64, %20:fpr64, debug-location !161; is.c:283:14
Bottom Pressure:
FPR8=3
GPR32=5
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  LiveReg: %20
  UpdateRegP: SU(3) %21:fpr64 = FMULDrr %18:fpr64, %20:fpr64, debug-location !161; is.c:283:14
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @66c
  BotQ.A BotLatency SU(3) 47c
  *** Max MOps 1 at cycle 66
Cycle: 67 BotQ.A
BotQ.A @67c
  Retired: 60
  Executed: 67c
  Critical: 60c, 60 MOps
  ExpectedLatency: 47c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 0 
Queue BotQ.A: 10 
Pick Bot ONLY1     
Scheduling SU(10) %26:fpr64 = LDRDui %89:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !169 :: (dereferenceable load 8 from @randlc.T23); is.c:286:15
Bottom Pressure:
FPR8=2
GPR32=5
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @67c
  *** Max MOps 1 at cycle 67
Cycle: 68 BotQ.A
BotQ.A @68c
  Retired: 61
  Executed: 68c
  Critical: 61c, 61 MOps
  ExpectedLatency: 47c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 70 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 70c > CritPath 55
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) %20:fpr64 = LDRDui %19:gpr64common, 0, debug-location !160 :: (load 8 from %ir.10); is.c:283:16
Bottom Pressure:
FPR8=1
GPR32=5
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  Ready @70c
  BotQ.A BotLatency SU(2) 51c
  *** Max MOps 1 at cycle 70
Cycle: 71 BotQ.A
BotQ.A @71c
  Retired: 62
  Executed: 71c
  Critical: 62c, 62 MOps
  ExpectedLatency: 51c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %18:fpr64 = LDRDui %87:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !158 :: (dereferenceable load 8 from @randlc.R23); is.c:283:10
Bottom Pressure:
GPR32=5
  Ready @71c
  *** Max MOps 1 at cycle 71
Cycle: 72 BotQ.A
BotQ.A @72c
  Retired: 63
  Executed: 72c
  Critical: 63c, 63 MOps
  ExpectedLatency: 51c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 74 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %19:gpr64common = LDRXui %stack.1.A.addr, 0, debug-location !159 :: (dereferenceable load 8 from %ir.A.addr); is.c:283:17
Bottom Pressure:
GPR32=4
  Ready @74c
  BotQ.A BotLatency SU(1) 55c
  *** Max MOps 1 at cycle 74
Cycle: 75 BotQ.A
BotQ.A @75c
  Retired: 64
  Executed: 75c
  Critical: 64c, 64 MOps
  ExpectedLatency: 55c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(1):   %19:gpr64common = LDRXui %stack.1.A.addr, 0, debug-location !159 :: (dereferenceable load 8 from %ir.A.addr); is.c:283:17
SU(0):   %18:fpr64 = LDRDui %87:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !158 :: (dereferenceable load 8 from @randlc.R23); is.c:283:10
SU(2):   %20:fpr64 = LDRDui %19:gpr64common, 0, debug-location !160 :: (load 8 from %ir.10); is.c:283:16
SU(10):   %26:fpr64 = LDRDui %89:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !169 :: (dereferenceable load 8 from @randlc.T23); is.c:286:15
SU(3):   %21:fpr64 = FMULDrr %18:fpr64, %20:fpr64, debug-location !161; is.c:283:14
SU(4):   STRDui %21:fpr64, %stack.2.T1, 0, debug-location !162 :: (store 8 into %ir.T1); is.c:283:8
SU(5):   %22:gpr32 = FCVTZSUWDr %21:fpr64, debug-location !163; is.c:284:9
SU(6):   STRWui %22:gpr32, %stack.12.j, 0, debug-location !164 :: (store 4 into %ir.j); is.c:284:7
SU(7):   %23:fpr64 = SCVTFUWDri %22:gpr32, debug-location !165; is.c:285:10
SU(8):   STRDui %23:fpr64, %stack.6.A1, 0, debug-location !166 :: (store 8 into %ir.A1); is.c:285:8
SU(9):   %24:fpr64 = LDRDui %19:gpr64common, 0, debug-location !168 :: (load 8 from %ir.14); is.c:286:10
SU(14):   %29:gpr64common = LDRXui %stack.0.X.addr, 0, debug-location !175 :: (dereferenceable load 8 from %ir.X.addr); is.c:292:17
SU(22):   %34:gpr64common = LDRXui %stack.0.X.addr, 0, debug-location !183 :: (dereferenceable load 8 from %ir.X.addr); is.c:295:11
SU(11):   %27:fpr64 = FMULDrr %26:fpr64, %23:fpr64, debug-location !171; is.c:286:19
SU(12):   %28:fpr64 = FSUBDrr %24:fpr64, %27:fpr64, debug-location !172; is.c:286:13
SU(13):   STRDui %28:fpr64, %stack.7.A2, 0, debug-location !173 :: (store 8 into %ir.A2); is.c:286:8
SU(15):   %30:fpr64 = LDRDui %29:gpr64common, 0, debug-location !176 :: (load 8 from %ir.19); is.c:292:16
SU(24):   %36:fpr64 = LDRDui %89:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !185 :: (dereferenceable load 8 from @randlc.T23); is.c:295:15
SU(28):   %39:fpr64 = LDRDui %stack.6.A1, 0, debug-location !190 :: (dereferenceable load 8 from %ir.A1); is.c:296:10
SU(16):   %31:fpr64 = FMULDrr %18:fpr64, %30:fpr64, debug-location !177; is.c:292:14
SU(17):   STRDui %31:fpr64, %stack.2.T1, 0, debug-location !178 :: (store 8 into %ir.T1); is.c:292:8
SU(18):   %32:gpr32 = FCVTZSUWDr %31:fpr64, debug-location !179; is.c:293:9
SU(19):   STRWui %32:gpr32, %stack.12.j, 0, debug-location !180 :: (store 4 into %ir.j); is.c:293:7
SU(20):   %33:fpr64 = SCVTFUWDri %32:gpr32, debug-location !181; is.c:294:10
SU(21):   STRDui %33:fpr64, %stack.8.X1, 0, debug-location !182 :: (store 8 into %ir.X1); is.c:294:8
SU(23):   %35:fpr64 = LDRDui %34:gpr64common, 0, debug-location !184 :: (load 8 from %ir.23); is.c:295:10
SU(25):   %37:fpr64 = FMULDrr %36:fpr64, %33:fpr64, debug-location !187; is.c:295:19
SU(30):   %41:fpr64 = FMULDrr %28:fpr64, %33:fpr64, debug-location !195; is.c:296:23
SU(45):   %52:fpr64 = LDRDui %stack.7.A2, 0, debug-location !213 :: (dereferenceable load 8 from %ir.A2); is.c:301:20
SU(26):   %38:fpr64 = FSUBDrr %35:fpr64, %37:fpr64, debug-location !188; is.c:295:13
SU(33):   %43:fpr64 = LDRDui %87:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !198 :: (dereferenceable load 8 from @randlc.R23); is.c:298:9
SU(27):   STRDui %38:fpr64, %stack.9.X2, 0, debug-location !189 :: (store 8 into %ir.X2); is.c:295:8
SU(29):   %40:fpr64 = FMULDrr %39:fpr64, %38:fpr64, debug-location !192; is.c:296:13
SU(46):   %53:fpr64 = FMULDrr %52:fpr64, %38:fpr64, debug-location !215; is.c:301:23
SU(31):   %42:fpr64 = FADDDrr %40:fpr64, %41:fpr64, debug-location !196; is.c:296:18
SU(39):   %47:fpr64 = LDRDui %89:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !205 :: (dereferenceable load 8 from @randlc.T23); is.c:300:14
SU(34):   %44:fpr64 = FMULDrr %43:fpr64, %42:fpr64, debug-location !200; is.c:298:13
SU(35):   %45:gpr32 = FCVTZSUWDr %44:fpr64, debug-location !198; is.c:298:9
SU(37):   %46:fpr64 = SCVTFUWDri %45:gpr32, debug-location !202; is.c:299:10
SU(38):   STRDui %46:fpr64, %stack.3.T2, 0, debug-location !203 :: (store 8 into %ir.T2); is.c:299:8
SU(40):   %48:fpr64 = FMULDrr %47:fpr64, %46:fpr64, debug-location !207; is.c:300:18
SU(43):   %50:fpr64 = LDRDui %89:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !210 :: (dereferenceable load 8 from @randlc.T23); is.c:301:10
SU(32):   STRDui %42:fpr64, %stack.2.T1, 0, debug-location !197 :: (store 8 into %ir.T1); is.c:296:8
SU(41):   %49:fpr64 = FSUBDrr %42:fpr64, %48:fpr64, debug-location !208; is.c:300:12
SU(49):   %56:fpr64 = LDRDui %88:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !218 :: (dereferenceable load 8 from @randlc.R46); is.c:302:9
SU(42):   STRDui %49:fpr64, %stack.10.Z, 0, debug-location !209 :: (store 8 into %ir.Z); is.c:300:7
SU(44):   %51:fpr64 = FMULDrr %50:fpr64, %49:fpr64, debug-location !212; is.c:301:14
SU(55):   %61:fpr64 = LDRDui %90:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !225 :: (dereferenceable load 8 from @randlc.T46); is.c:304:15
SU(58):   %64:gpr64common = LDRXui %stack.0.X.addr, 0, debug-location !229 :: (dereferenceable load 8 from %ir.X.addr); is.c:304:6
SU(36):   STRWui %45:gpr32, %stack.12.j, 0, debug-location !201 :: (store 4 into %ir.j); is.c:298:7
SU(47):   %54:fpr64 = FADDDrr %51:fpr64, %53:fpr64, debug-location !216; is.c:301:18
SU(48):   STRDui %54:fpr64, %stack.4.T3, 0, debug-location !217 :: (store 8 into %ir.T3); is.c:301:8
SU(50):   %57:fpr64 = FMULDrr %56:fpr64, %54:fpr64, debug-location !220; is.c:302:13
SU(51):   %58:gpr32 = FCVTZSUWDr %57:fpr64, debug-location !218; is.c:302:9
SU(52):   STRWui %58:gpr32, %stack.12.j, 0, debug-location !221 :: (store 4 into %ir.j); is.c:302:7
SU(53):   %59:fpr64 = SCVTFUWDri %58:gpr32, debug-location !222; is.c:303:10
SU(54):   STRDui %59:fpr64, %stack.5.T4, 0, debug-location !223 :: (store 8 into %ir.T4); is.c:303:8
SU(56):   %62:fpr64 = FMULDrr %61:fpr64, %59:fpr64, debug-location !227; is.c:304:19
SU(57):   %63:fpr64 = FSUBDrr %54:fpr64, %62:fpr64, debug-location !228; is.c:304:13
SU(59):   STRDui %63:fpr64, %64:gpr64common, 0, debug-location !230 :: (store 8 into %ir.47); is.c:304:8
SU(61):   %66:gpr64common = LDRXui %stack.0.X.addr, 0, debug-location !232 :: (dereferenceable load 8 from %ir.X.addr); is.c:305:20
SU(60):   %65:fpr64 = LDRDui %88:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !231 :: (dereferenceable load 8 from @randlc.R46); is.c:305:13
SU(62):   %67:fpr64 = LDRDui %66:gpr64common, 0, debug-location !233 :: (load 8 from %ir.49); is.c:305:19
SU(63):   %68:fpr64 = FMULDrr %65:fpr64, %67:fpr64, debug-location !234; is.c:305:17
SU(64):   $d0 = COPY %68:fpr64, debug-location !235; is.c:305:5

********** INTERVALS **********
W0 [0B,32r:0)  0@0B-phi
W1 [0B,16r:0)  0@0B-phi
%0 [32r,48r:0)  0@32r weight:0.000000e+00
%1 [16r,64r:0)  0@16r weight:0.000000e+00
%2 [80r,944r:0)  0@80r weight:0.000000e+00
%3 [96r,176r:0)  0@96r weight:0.000000e+00
%5 [224r,328r:0)  0@224r weight:0.000000e+00
%9 [304r,336r:0)  0@304r weight:0.000000e+00
%10 [368r,384r:0)  0@368r weight:0.000000e+00
%12 [624r,640r:0)  0@624r weight:0.000000e+00
%13 [672r,688r:0)  0@672r weight:0.000000e+00
%16 [928r,944r:0)  0@928r weight:0.000000e+00
%18 [1000r,1428r:0)  0@1000r weight:0.000000e+00
%19 [992r,1192r:0)  0@992r weight:0.000000e+00
%20 [1008r,1144r:0)  0@1008r weight:0.000000e+00
%21 [1144r,1160r:0)  0@1144r weight:0.000000e+00
%22 [1160r,1176r:0)  0@1160r weight:0.000000e+00
%23 [1176r,1332r:0)  0@1176r weight:0.000000e+00
%24 [1192r,1336r:0)  0@1192r weight:0.000000e+00
%26 [1136r,1332r:0)  0@1136r weight:0.000000e+00
%27 [1332r,1336r:0)  0@1332r weight:0.000000e+00
%28 [1336r,1496r:0)  0@1336r weight:0.000000e+00
%29 [1224r,1352r:0)  0@1224r weight:0.000000e+00
%30 [1352r,1428r:0)  0@1352r weight:0.000000e+00
%31 [1428r,1440r:0)  0@1428r weight:0.000000e+00
%32 [1440r,1456r:0)  0@1440r weight:0.000000e+00
%33 [1456r,1496r:0)  0@1456r weight:0.000000e+00
%34 [1328r,1472r:0)  0@1328r weight:0.000000e+00
%35 [1472r,1700r:0)  0@1472r weight:0.000000e+00
%36 [1368r,1480r:0)  0@1368r weight:0.000000e+00
%37 [1480r,1700r:0)  0@1480r weight:0.000000e+00
%38 [1700r,1728r:0)  0@1700r weight:0.000000e+00
%39 [1424r,1720r:0)  0@1424r weight:0.000000e+00
%40 [1720r,1736r:0)  0@1720r weight:0.000000e+00
%41 [1496r,1736r:0)  0@1496r weight:0.000000e+00
%42 [1736r,1808r:0)  0@1736r weight:0.000000e+00
%43 [1704r,1752r:0)  0@1704r weight:0.000000e+00
%44 [1752r,1760r:0)  0@1752r weight:0.000000e+00
%45 [1760r,1928r:0)  0@1760r weight:0.000000e+00
%46 [1768r,1784r:0)  0@1768r weight:0.000000e+00
%47 [1744r,1784r:0)  0@1744r weight:0.000000e+00
%48 [1784r,1808r:0)  0@1784r weight:0.000000e+00
%49 [1808r,1848r:0)  0@1808r weight:0.000000e+00
%50 [1792r,1848r:0)  0@1792r weight:0.000000e+00
%51 [1848r,1936r:0)  0@1848r weight:0.000000e+00
%52 [1696r,1728r:0)  0@1696r weight:0.000000e+00
%53 [1728r,1936r:0)  0@1728r weight:0.000000e+00
%54 [1936r,2000r:0)  0@1936r weight:0.000000e+00
%56 [1832r,1952r:0)  0@1832r weight:0.000000e+00
%57 [1952r,1960r:0)  0@1952r weight:0.000000e+00
%58 [1960r,1976r:0)  0@1960r weight:0.000000e+00
%59 [1976r,1992r:0)  0@1976r weight:0.000000e+00
%61 [1896r,1992r:0)  0@1896r weight:0.000000e+00
%62 [1992r,2000r:0)  0@1992r weight:0.000000e+00
%63 [2000r,2008r:0)  0@2000r weight:0.000000e+00
%64 [1920r,2008r:0)  0@1920r weight:0.000000e+00
%65 [2032r,2048r:0)  0@2032r weight:0.000000e+00
%66 [2024r,2040r:0)  0@2024r weight:0.000000e+00
%67 [2040r,2048r:0)  0@2040r weight:0.000000e+00
%68 [2048r,2056r:0)  0@2048r weight:0.000000e+00
%70 [752r,852r:0)  0@752r weight:0.000000e+00
%72 [852r,868r:0)  0@852r weight:0.000000e+00
%74 [800r,856r:0)  0@800r weight:0.000000e+00
%75 [856r,872r:0)  0@856r weight:0.000000e+00
%76 [848r,864r:0)  0@848r weight:0.000000e+00
%77 [864r,880r:0)  0@864r weight:0.000000e+00
%79 [448r,548r:0)  0@448r weight:0.000000e+00
%80 [344r,912B:0)  0@344r weight:0.000000e+00
%81 [548r,564r:0)  0@548r weight:0.000000e+00
%83 [496r,552r:0)  0@496r weight:0.000000e+00
%84 [552r,568r:0)  0@552r weight:0.000000e+00
%85 [544r,560r:0)  0@544r weight:0.000000e+00
%86 [560r,576r:0)  0@560r weight:0.000000e+00
%87 [112r,1704r:0)  0@112r weight:0.000000e+00
%88 [128r,2032r:0)  0@128r weight:0.000000e+00
%89 [144r,1792r:0)  0@144r weight:0.000000e+00
%90 [160r,1896r:0)  0@160r weight:0.000000e+00
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function randlc: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP]
  fi#1: size=8, align=8, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=8, align=8, at location [SP]
  fi#4: size=8, align=8, at location [SP]
  fi#5: size=8, align=8, at location [SP]
  fi#6: size=8, align=8, at location [SP]
  fi#7: size=8, align=8, at location [SP]
  fi#8: size=8, align=8, at location [SP]
  fi#9: size=8, align=8, at location [SP]
  fi#10: size=8, align=8, at location [SP]
  fi#11: size=4, align=4, at location [SP]
  fi#12: size=4, align=4, at location [SP]
Function Live Ins: $x0 in %0, $x1 in %1

0B	bb.0.entry:
	  successors: %bb.1(0x30000000), %bb.8(0x50000000); %bb.1(37.50%), %bb.8(62.50%)
	  liveins: $x0, $x1
16B	  %1:gpr64 = COPY $x1
32B	  %0:gpr64 = COPY $x0
48B	  STRXui %0:gpr64, %stack.0.X.addr, 0 :: (store 8 into %ir.X.addr)
64B	  STRXui %1:gpr64, %stack.1.A.addr, 0 :: (store 8 into %ir.A.addr)
80B	  %2:gpr64common = ADRP target-flags(aarch64-page) @randlc.KS, debug-location !111; is.c:264:9
96B	  %3:gpr32 = LDRWui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.KS, debug-location !111 :: (dereferenceable load 4 from @randlc.KS); is.c:264:9
112B	  %87:gpr64common = ADRP target-flags(aarch64-page) @randlc.R23, debug-location !115; is.c:265:13
128B	  %88:gpr64common = ADRP target-flags(aarch64-page) @randlc.R46, debug-location !117; is.c:266:13
144B	  %89:gpr64common = ADRP target-flags(aarch64-page) @randlc.T23, debug-location !118; is.c:267:13
160B	  %90:gpr64common = ADRP target-flags(aarch64-page) @randlc.T46, debug-location !119; is.c:268:13
176B	  CBNZW %3:gpr32, %bb.8, debug-location !114; is.c:264:9
192B	  B %bb.1, debug-location !114; is.c:264:9

208B	bb.1.if.then:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

224B	  %5:gpr64 = MOVi64imm 4607182418800017408
304B	  %9:gpr32 = MOVi32imm 1
308B	  STRXui %5:gpr64, %87:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !115 :: (store 8 into @randlc.R23); is.c:265:13
312B	  STRXui %5:gpr64, %88:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !117 :: (store 8 into @randlc.R46); is.c:266:13
320B	  STRXui %5:gpr64, %89:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !118 :: (store 8 into @randlc.T23); is.c:267:13
328B	  STRXui %5:gpr64, %90:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !119 :: (store 8 into @randlc.T46); is.c:268:13
336B	  STRWui %9:gpr32, %stack.11.i, 0, debug-location !120 :: (store 4 into %ir.i); is.c:270:16
344B	  %80:fpr64 = FMOVDi 96

352B	bb.2.for.cond:
	; predecessors: %bb.1, %bb.3
	  successors: %bb.3(0x7c000000), %bb.4(0x04000000); %bb.3(96.88%), %bb.4(3.12%)

368B	  %10:gpr32common = LDRWui %stack.11.i, 0, debug-location !123 :: (dereferenceable load 4 from %ir.i); is.c:270:21
384B	  dead $wzr = SUBSWri %10:gpr32common, 23, 0, implicit-def $nzcv, debug-location !126; is.c:270:9
400B	  Bcc 12, %bb.4, implicit killed $nzcv, debug-location !126; is.c:270:9
416B	  B %bb.3, debug-location !126; is.c:270:9

432B	bb.3.for.body:
	; predecessors: %bb.2
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

448B	  %79:fpr64 = LDRDui %87:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !127 :: (dereferenceable load 8 from @randlc.R23); is.c:271:26
496B	  %83:fpr64 = LDRDui %89:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !131 :: (dereferenceable load 8 from @randlc.T23); is.c:272:25
544B	  %85:gpr32common = LDRWui %stack.11.i, 0, debug-location !134 :: (dereferenceable load 4 from %ir.i); is.c:270:31
548B	  %81:fpr64 = FMULDrr %79:fpr64, %80:fpr64, debug-location !129; is.c:271:24
552B	  %84:fpr64 = FADDDrr %83:fpr64, %83:fpr64, debug-location !132; is.c:272:23
560B	  %86:gpr32common = nsw ADDWri %85:gpr32common, 1, 0, debug-location !134; is.c:270:31
564B	  STRDui %81:fpr64, %87:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !130 :: (store 8 into @randlc.R23); is.c:271:17
568B	  STRDui %84:fpr64, %89:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !133 :: (store 8 into @randlc.T23); is.c:272:17
576B	  STRWui %86:gpr32common, %stack.11.i, 0, debug-location !134 :: (store 4 into %ir.i); is.c:270:31
592B	  B %bb.2, debug-location !135; is.c:270:9

608B	bb.4.for.end:
	; predecessors: %bb.2
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

624B	  %12:gpr32 = MOVi32imm 1
640B	  STRWui %12:gpr32, %stack.11.i, 0, debug-location !138 :: (store 4 into %ir.i); is.c:274:16

656B	bb.5.for.cond3:
	; predecessors: %bb.4, %bb.6
	  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

672B	  %13:gpr32common = LDRWui %stack.11.i, 0, debug-location !141 :: (dereferenceable load 4 from %ir.i); is.c:274:21
688B	  dead $wzr = SUBSWri %13:gpr32common, 46, 0, implicit-def $nzcv, debug-location !144; is.c:274:9
704B	  Bcc 12, %bb.7, implicit killed $nzcv, debug-location !144; is.c:274:9
720B	  B %bb.6, debug-location !144; is.c:274:9

736B	bb.6.for.body5:
	; predecessors: %bb.5
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

752B	  %70:fpr64 = LDRDui %88:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !145 :: (dereferenceable load 8 from @randlc.R46); is.c:275:26
800B	  %74:fpr64 = LDRDui %90:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !149 :: (dereferenceable load 8 from @randlc.T46); is.c:276:25
848B	  %76:gpr32common = LDRWui %stack.11.i, 0, debug-location !152 :: (dereferenceable load 4 from %ir.i); is.c:274:31
852B	  %72:fpr64 = FMULDrr %70:fpr64, %80:fpr64, debug-location !147; is.c:275:24
856B	  %75:fpr64 = FADDDrr %74:fpr64, %74:fpr64, debug-location !150; is.c:276:23
864B	  %77:gpr32common = nsw ADDWri %76:gpr32common, 1, 0, debug-location !152; is.c:274:31
868B	  STRDui %72:fpr64, %88:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !148 :: (store 8 into @randlc.R46); is.c:275:17
872B	  STRDui %75:fpr64, %90:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !151 :: (store 8 into @randlc.T46); is.c:276:17
880B	  STRWui %77:gpr32common, %stack.11.i, 0, debug-location !152 :: (store 4 into %ir.i); is.c:274:31
896B	  B %bb.5, debug-location !153; is.c:274:9

912B	bb.7.for.end10:
	; predecessors: %bb.5
	  successors: %bb.8(0x80000000); %bb.8(100.00%)

928B	  %16:gpr32 = MOVi32imm 1
944B	  STRWui %16:gpr32, %2:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.KS, debug-location !156 :: (store 4 into @randlc.KS); is.c:278:12

960B	bb.8.if.end:
	; predecessors: %bb.0, %bb.7

992B	  %19:gpr64common = LDRXui %stack.1.A.addr, 0, debug-location !159 :: (dereferenceable load 8 from %ir.A.addr); is.c:283:17
1000B	  %18:fpr64 = LDRDui %87:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !158 :: (dereferenceable load 8 from @randlc.R23); is.c:283:10
1008B	  %20:fpr64 = LDRDui %19:gpr64common, 0, debug-location !160 :: (load 8 from %ir.10); is.c:283:16
1136B	  %26:fpr64 = LDRDui %89:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !169 :: (dereferenceable load 8 from @randlc.T23); is.c:286:15
1144B	  %21:fpr64 = FMULDrr %18:fpr64, %20:fpr64, debug-location !161; is.c:283:14
1152B	  STRDui %21:fpr64, %stack.2.T1, 0, debug-location !162 :: (store 8 into %ir.T1); is.c:283:8
1160B	  %22:gpr32 = FCVTZSUWDr %21:fpr64, debug-location !163; is.c:284:9
1168B	  STRWui %22:gpr32, %stack.12.j, 0, debug-location !164 :: (store 4 into %ir.j); is.c:284:7
1176B	  %23:fpr64 = SCVTFUWDri %22:gpr32, debug-location !165; is.c:285:10
1184B	  STRDui %23:fpr64, %stack.6.A1, 0, debug-location !166 :: (store 8 into %ir.A1); is.c:285:8
1192B	  %24:fpr64 = LDRDui %19:gpr64common, 0, debug-location !168 :: (load 8 from %ir.14); is.c:286:10
1224B	  %29:gpr64common = LDRXui %stack.0.X.addr, 0, debug-location !175 :: (dereferenceable load 8 from %ir.X.addr); is.c:292:17
1328B	  %34:gpr64common = LDRXui %stack.0.X.addr, 0, debug-location !183 :: (dereferenceable load 8 from %ir.X.addr); is.c:295:11
1332B	  %27:fpr64 = FMULDrr %26:fpr64, %23:fpr64, debug-location !171; is.c:286:19
1336B	  %28:fpr64 = FSUBDrr %24:fpr64, %27:fpr64, debug-location !172; is.c:286:13
1344B	  STRDui %28:fpr64, %stack.7.A2, 0, debug-location !173 :: (store 8 into %ir.A2); is.c:286:8
1352B	  %30:fpr64 = LDRDui %29:gpr64common, 0, debug-location !176 :: (load 8 from %ir.19); is.c:292:16
1368B	  %36:fpr64 = LDRDui %89:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !185 :: (dereferenceable load 8 from @randlc.T23); is.c:295:15
1424B	  %39:fpr64 = LDRDui %stack.6.A1, 0, debug-location !190 :: (dereferenceable load 8 from %ir.A1); is.c:296:10
1428B	  %31:fpr64 = FMULDrr %18:fpr64, %30:fpr64, debug-location !177; is.c:292:14
1432B	  STRDui %31:fpr64, %stack.2.T1, 0, debug-location !178 :: (store 8 into %ir.T1); is.c:292:8
1440B	  %32:gpr32 = FCVTZSUWDr %31:fpr64, debug-location !179; is.c:293:9
1448B	  STRWui %32:gpr32, %stack.12.j, 0, debug-location !180 :: (store 4 into %ir.j); is.c:293:7
1456B	  %33:fpr64 = SCVTFUWDri %32:gpr32, debug-location !181; is.c:294:10
1464B	  STRDui %33:fpr64, %stack.8.X1, 0, debug-location !182 :: (store 8 into %ir.X1); is.c:294:8
1472B	  %35:fpr64 = LDRDui %34:gpr64common, 0, debug-location !184 :: (load 8 from %ir.23); is.c:295:10
1480B	  %37:fpr64 = FMULDrr %36:fpr64, %33:fpr64, debug-location !187; is.c:295:19
1496B	  %41:fpr64 = FMULDrr %28:fpr64, %33:fpr64, debug-location !195; is.c:296:23
1696B	  %52:fpr64 = LDRDui %stack.7.A2, 0, debug-location !213 :: (dereferenceable load 8 from %ir.A2); is.c:301:20
1700B	  %38:fpr64 = FSUBDrr %35:fpr64, %37:fpr64, debug-location !188; is.c:295:13
1704B	  %43:fpr64 = LDRDui %87:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !198 :: (dereferenceable load 8 from @randlc.R23); is.c:298:9
1712B	  STRDui %38:fpr64, %stack.9.X2, 0, debug-location !189 :: (store 8 into %ir.X2); is.c:295:8
1720B	  %40:fpr64 = FMULDrr %39:fpr64, %38:fpr64, debug-location !192; is.c:296:13
1728B	  %53:fpr64 = FMULDrr %52:fpr64, %38:fpr64, debug-location !215; is.c:301:23
1736B	  %42:fpr64 = FADDDrr %40:fpr64, %41:fpr64, debug-location !196; is.c:296:18
1744B	  %47:fpr64 = LDRDui %89:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !205 :: (dereferenceable load 8 from @randlc.T23); is.c:300:14
1752B	  %44:fpr64 = FMULDrr %43:fpr64, %42:fpr64, debug-location !200; is.c:298:13
1760B	  %45:gpr32 = FCVTZSUWDr %44:fpr64, debug-location !198; is.c:298:9
1768B	  %46:fpr64 = SCVTFUWDri %45:gpr32, debug-location !202; is.c:299:10
1776B	  STRDui %46:fpr64, %stack.3.T2, 0, debug-location !203 :: (store 8 into %ir.T2); is.c:299:8
1784B	  %48:fpr64 = FMULDrr %47:fpr64, %46:fpr64, debug-location !207; is.c:300:18
1792B	  %50:fpr64 = LDRDui %89:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !210 :: (dereferenceable load 8 from @randlc.T23); is.c:301:10
1800B	  STRDui %42:fpr64, %stack.2.T1, 0, debug-location !197 :: (store 8 into %ir.T1); is.c:296:8
1808B	  %49:fpr64 = FSUBDrr %42:fpr64, %48:fpr64, debug-location !208; is.c:300:12
1832B	  %56:fpr64 = LDRDui %88:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !218 :: (dereferenceable load 8 from @randlc.R46); is.c:302:9
1840B	  STRDui %49:fpr64, %stack.10.Z, 0, debug-location !209 :: (store 8 into %ir.Z); is.c:300:7
1848B	  %51:fpr64 = FMULDrr %50:fpr64, %49:fpr64, debug-location !212; is.c:301:14
1896B	  %61:fpr64 = LDRDui %90:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !225 :: (dereferenceable load 8 from @randlc.T46); is.c:304:15
1920B	  %64:gpr64common = LDRXui %stack.0.X.addr, 0, debug-location !229 :: (dereferenceable load 8 from %ir.X.addr); is.c:304:6
1928B	  STRWui %45:gpr32, %stack.12.j, 0, debug-location !201 :: (store 4 into %ir.j); is.c:298:7
1936B	  %54:fpr64 = FADDDrr %51:fpr64, %53:fpr64, debug-location !216; is.c:301:18
1944B	  STRDui %54:fpr64, %stack.4.T3, 0, debug-location !217 :: (store 8 into %ir.T3); is.c:301:8
1952B	  %57:fpr64 = FMULDrr %56:fpr64, %54:fpr64, debug-location !220; is.c:302:13
1960B	  %58:gpr32 = FCVTZSUWDr %57:fpr64, debug-location !218; is.c:302:9
1968B	  STRWui %58:gpr32, %stack.12.j, 0, debug-location !221 :: (store 4 into %ir.j); is.c:302:7
1976B	  %59:fpr64 = SCVTFUWDri %58:gpr32, debug-location !222; is.c:303:10
1984B	  STRDui %59:fpr64, %stack.5.T4, 0, debug-location !223 :: (store 8 into %ir.T4); is.c:303:8
1992B	  %62:fpr64 = FMULDrr %61:fpr64, %59:fpr64, debug-location !227; is.c:304:19
2000B	  %63:fpr64 = FSUBDrr %54:fpr64, %62:fpr64, debug-location !228; is.c:304:13
2008B	  STRDui %63:fpr64, %64:gpr64common, 0, debug-location !230 :: (store 8 into %ir.47); is.c:304:8
2024B	  %66:gpr64common = LDRXui %stack.0.X.addr, 0, debug-location !232 :: (dereferenceable load 8 from %ir.X.addr); is.c:305:20
2032B	  %65:fpr64 = LDRDui %88:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !231 :: (dereferenceable load 8 from @randlc.R46); is.c:305:13
2040B	  %67:fpr64 = LDRDui %66:gpr64common, 0, debug-location !233 :: (load 8 from %ir.49); is.c:305:19
2048B	  %68:fpr64 = FMULDrr %65:fpr64, %67:fpr64, debug-location !234; is.c:305:17
2056B	  $d0 = COPY %68:fpr64, debug-location !235; is.c:305:5
2064B	  RET_ReallyLR implicit killed $d0, debug-location !235; is.c:305:5

# End machine code for function randlc.

Before post-MI-sched:
# Machine code for function randlc: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-24]
  fi#3: size=8, align=8, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-48]
  fi#6: size=8, align=8, at location [SP-56]
  fi#7: size=8, align=8, at location [SP-64]
  fi#8: size=8, align=8, at location [SP-72]
  fi#9: size=8, align=8, at location [SP-80]
  fi#10: size=8, align=8, at location [SP-88]
  fi#11: size=4, align=4, at location [SP-92]
  fi#12: size=4, align=4, at location [SP-96]
Function Live Ins: $x0, $x1

bb.0.entry:
  successors: %bb.1(0x30000000), %bb.8(0x50000000); %bb.1(37.50%), %bb.8(62.50%)
  liveins: $x0, $x1
  $sp = frame-setup SUBXri $sp, 96, 0
  frame-setup CFI_INSTRUCTION def_cfa_offset <mcsymbol >96
  STPXi renamable $x1, renamable $x0, $sp, 10 :: (store 8 into %ir.X.addr), (store 8 into %ir.A.addr)
  renamable $x12 = ADRP target-flags(aarch64-page) @randlc.KS, debug-location !111; is.c:264:9
  renamable $w13 = LDRWui renamable $x12, target-flags(aarch64-pageoff, aarch64-nc) @randlc.KS, debug-location !111 :: (dereferenceable load 4 from @randlc.KS); is.c:264:9
  renamable $x11 = ADRP target-flags(aarch64-page) @randlc.R23, debug-location !115; is.c:265:13
  renamable $x8 = ADRP target-flags(aarch64-page) @randlc.R46, debug-location !117; is.c:266:13
  renamable $x10 = ADRP target-flags(aarch64-page) @randlc.T23, debug-location !118; is.c:267:13
  renamable $x9 = ADRP target-flags(aarch64-page) @randlc.T46, debug-location !119; is.c:268:13
  CBNZW killed renamable $w13, %bb.8, debug-location !114; is.c:264:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $x8, $x9, $x10, $x11, $x12
  $x13 = MOVZXi 16368, 48
  $w14 = MOVZWi 1, 0
  STRXui renamable $x13, renamable $x11, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !115 :: (store 8 into @randlc.R23); is.c:265:13
  STRXui renamable $x13, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !117 :: (store 8 into @randlc.R46); is.c:266:13
  STRXui renamable $x13, renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !118 :: (store 8 into @randlc.T23); is.c:267:13
  STRXui killed renamable $x13, renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !119 :: (store 8 into @randlc.T46); is.c:268:13
  STRWui killed renamable $w14, $sp, 1, debug-location !120 :: (store 4 into %ir.i); is.c:270:16
  renamable $d0 = FMOVDi 96

bb.2.for.cond:
; predecessors: %bb.1, %bb.3
  successors: %bb.3(0x7c000000), %bb.4(0x04000000); %bb.3(96.88%), %bb.4(3.12%)
  liveins: $d0, $x8, $x9, $x10, $x11, $x12
  renamable $w13 = LDRWui $sp, 1, debug-location !123 :: (dereferenceable load 4 from %ir.i); is.c:270:21
  dead $wzr = SUBSWri killed renamable $w13, 23, 0, implicit-def $nzcv, debug-location !126; is.c:270:9
  Bcc 12, %bb.4, implicit $nzcv, debug-location !126; is.c:270:9

bb.3.for.body:
; predecessors: %bb.2
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $d0, $x8, $x9, $x10, $x11, $x12
  renamable $d1 = LDRDui renamable $x11, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !127 :: (dereferenceable load 8 from @randlc.R23); is.c:271:26
  renamable $d2 = LDRDui renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !131 :: (dereferenceable load 8 from @randlc.T23); is.c:272:25
  renamable $w13 = LDRWui $sp, 1, debug-location !134 :: (dereferenceable load 4 from %ir.i); is.c:270:31
  renamable $d1 = FMULDrr killed renamable $d1, renamable $d0, debug-location !129; is.c:271:24
  renamable $d2 = FADDDrr killed renamable $d2, renamable $d2, debug-location !132; is.c:272:23
  renamable $w13 = nsw ADDWri killed renamable $w13, 1, 0, debug-location !134; is.c:270:31
  STRDui killed renamable $d1, renamable $x11, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !130 :: (store 8 into @randlc.R23); is.c:271:17
  STRDui killed renamable $d2, renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !133 :: (store 8 into @randlc.T23); is.c:272:17
  STRWui killed renamable $w13, $sp, 1, debug-location !134 :: (store 4 into %ir.i); is.c:270:31
  B %bb.2

bb.4.for.end:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)
  liveins: $d0, $x8, $x9, $x10, $x11, $x12
  $w13 = MOVZWi 1, 0

bb.5.for.cond3:
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)
  liveins: $d0, $x8, $x9, $x10, $x11, $x12, $w13
  STRWui renamable $w13, $sp, 1, debug-location !DILocation(line: 0, scope: !139) :: (store 4 into %ir.i); is.c:0
  $w13 = ORRWrs $wzr, killed renamable $w13, 0, debug-location !141; is.c:274:21
  dead $wzr = SUBSWri killed renamable $w13, 46, 0, implicit-def $nzcv, debug-location !144; is.c:274:9
  Bcc 12, %bb.7, implicit $nzcv, debug-location !144; is.c:274:9

bb.6.for.body5:
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)
  liveins: $d0, $x8, $x9, $x10, $x11, $x12
  renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !145 :: (dereferenceable load 8 from @randlc.R46); is.c:275:26
  renamable $d2 = LDRDui renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !149 :: (dereferenceable load 8 from @randlc.T46); is.c:276:25
  renamable $w13 = LDRWui $sp, 1, debug-location !152 :: (dereferenceable load 4 from %ir.i); is.c:274:31
  renamable $d1 = FMULDrr killed renamable $d1, renamable $d0, debug-location !147; is.c:275:24
  renamable $d2 = FADDDrr killed renamable $d2, renamable $d2, debug-location !150; is.c:276:23
  renamable $w13 = nsw ADDWri killed renamable $w13, 1, 0, debug-location !152; is.c:274:31
  STRDui killed renamable $d1, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !148 :: (store 8 into @randlc.R46); is.c:275:17
  STRDui killed renamable $d2, renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !151 :: (store 8 into @randlc.T46); is.c:276:17
  B %bb.5

bb.7.for.end10:
; predecessors: %bb.5
  successors: %bb.8(0x80000000); %bb.8(100.00%)
  liveins: $x8, $x9, $x10, $x11, $x12
  $w13 = MOVZWi 1, 0
  STRWui killed renamable $w13, killed renamable $x12, target-flags(aarch64-pageoff, aarch64-nc) @randlc.KS, debug-location !156 :: (store 4 into @randlc.KS); is.c:278:12

bb.8.if.end:
; predecessors: %bb.0, %bb.7
  liveins: $x8, $x9, $x10, $x11
  renamable $x12 = LDRXui $sp, 10, debug-location !159 :: (dereferenceable load 8 from %ir.A.addr); is.c:283:17
  renamable $d0 = LDRDui renamable $x11, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !158 :: (dereferenceable load 8 from @randlc.R23); is.c:283:10
  renamable $d1 = LDRDui renamable $x12, 0, debug-location !160 :: (load 8 from %ir.10); is.c:283:16
  renamable $d2 = LDRDui renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !169 :: (dereferenceable load 8 from @randlc.T23); is.c:286:15
  renamable $d1 = FMULDrr renamable $d0, killed renamable $d1, debug-location !161; is.c:283:14
  STRDui renamable $d1, $sp, 9, debug-location !162 :: (store 8 into %ir.T1); is.c:283:8
  renamable $w13 = FCVTZSUWDr killed renamable $d1, debug-location !163; is.c:284:9
  STRWui renamable $w13, $sp, 0, debug-location !164 :: (store 4 into %ir.j); is.c:284:7
  renamable $d1 = SCVTFUWDri killed renamable $w13, debug-location !165; is.c:285:10
  STRDui renamable $d1, $sp, 5, debug-location !166 :: (store 8 into %ir.A1); is.c:285:8
  renamable $d3 = LDRDui killed renamable $x12, 0, debug-location !168 :: (load 8 from %ir.14); is.c:286:10
  renamable $x12 = LDRXui $sp, 11, debug-location !175 :: (dereferenceable load 8 from %ir.X.addr); is.c:292:17
  renamable $x13 = LDRXui $sp, 11, debug-location !183 :: (dereferenceable load 8 from %ir.X.addr); is.c:295:11
  renamable $d1 = FMULDrr killed renamable $d2, killed renamable $d1, debug-location !171; is.c:286:19
  renamable $d1 = FSUBDrr killed renamable $d3, killed renamable $d1, debug-location !172; is.c:286:13
  renamable $d2 = LDRDui killed renamable $x12, 0, debug-location !176 :: (load 8 from %ir.19); is.c:292:16
  renamable $d3 = LDRDui renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !185 :: (dereferenceable load 8 from @randlc.T23); is.c:295:15
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d2, debug-location !177; is.c:292:14
  STRDui renamable $d0, $sp, 9, debug-location !178 :: (store 8 into %ir.T1); is.c:292:8
  renamable $w12 = FCVTZSUWDr killed renamable $d0, debug-location !179; is.c:293:9
  STRWui renamable $w12, $sp, 0, debug-location !180 :: (store 4 into %ir.j); is.c:293:7
  renamable $d0 = SCVTFUWDri killed renamable $w12, debug-location !181; is.c:294:10
  STPDi renamable $d0, renamable $d1, $sp, 3, debug-location !173 :: (store 8 into %ir.A2), (store 8 into %ir.X1); is.c:286:8
  renamable $d2 = LDRDui killed renamable $x13, 0, debug-location !184 :: (load 8 from %ir.23); is.c:295:10
  renamable $d3 = FMULDrr killed renamable $d3, renamable $d0, debug-location !187; is.c:295:19
  renamable $d0 = FMULDrr killed renamable $d1, killed renamable $d0, debug-location !195; is.c:296:23
  renamable $d1, renamable $d4 = LDPDi $sp, 4, debug-location !190 :: (dereferenceable load 8 from %ir.A1), (dereferenceable load 8 from %ir.A2); is.c:296:10
  renamable $d2 = FSUBDrr killed renamable $d2, killed renamable $d3, debug-location !188; is.c:295:13
  renamable $d3 = LDRDui killed renamable $x11, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !198 :: (dereferenceable load 8 from @randlc.R23); is.c:298:9
  STRDui renamable $d2, $sp, 2, debug-location !189 :: (store 8 into %ir.X2); is.c:295:8
  renamable $d4 = FMULDrr killed renamable $d4, renamable $d2, debug-location !192; is.c:296:13
  renamable $d1 = FMULDrr killed renamable $d1, killed renamable $d2, debug-location !215; is.c:301:23
  renamable $d0 = FADDDrr killed renamable $d4, killed renamable $d0, debug-location !196; is.c:296:18
  renamable $d2 = LDRDui renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !205 :: (dereferenceable load 8 from @randlc.T23); is.c:300:14
  renamable $d3 = FMULDrr killed renamable $d3, renamable $d0, debug-location !200; is.c:298:13
  renamable $w11 = FCVTZSUWDr killed renamable $d3, debug-location !198; is.c:298:9
  renamable $d3 = SCVTFUWDri renamable $w11, debug-location !202; is.c:299:10
  STPDi renamable $d3, renamable $d0, $sp, 8, debug-location !203 :: (store 8 into %ir.T2), (store 8 into %ir.T1); is.c:299:8
  renamable $d2 = FMULDrr killed renamable $d2, killed renamable $d3, debug-location !207; is.c:300:18
  renamable $d3 = LDRDui killed renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !210 :: (dereferenceable load 8 from @randlc.T23); is.c:301:10
  renamable $d0 = FSUBDrr killed renamable $d0, killed renamable $d2, debug-location !208; is.c:300:12
  renamable $d2 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !218 :: (dereferenceable load 8 from @randlc.R46); is.c:302:9
  STRDui renamable $d0, $sp, 1, debug-location !209 :: (store 8 into %ir.Z); is.c:300:7
  renamable $d0 = FMULDrr killed renamable $d3, killed renamable $d0, debug-location !212; is.c:301:14
  renamable $d3 = LDRDui killed renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !225 :: (dereferenceable load 8 from @randlc.T46); is.c:304:15
  renamable $x9 = LDRXui $sp, 11, debug-location !229 :: (dereferenceable load 8 from %ir.X.addr); is.c:304:6
  STRWui killed renamable $w11, $sp, 0, debug-location !201 :: (store 4 into %ir.j); is.c:298:7
  renamable $d0 = FADDDrr killed renamable $d0, killed renamable $d1, debug-location !216; is.c:301:18
  renamable $d1 = FMULDrr killed renamable $d2, renamable $d0, debug-location !220; is.c:302:13
  renamable $w10 = FCVTZSUWDr killed renamable $d1, debug-location !218; is.c:302:9
  STRWui renamable $w10, $sp, 0, debug-location !221 :: (store 4 into %ir.j); is.c:302:7
  renamable $d1 = SCVTFUWDri killed renamable $w10, debug-location !222; is.c:303:10
  STPDi renamable $d1, renamable $d0, $sp, 6, debug-location !217 :: (store 8 into %ir.T3), (store 8 into %ir.T4); is.c:301:8
  renamable $d1 = FMULDrr killed renamable $d3, killed renamable $d1, debug-location !227; is.c:304:19
  renamable $d0 = FSUBDrr killed renamable $d0, killed renamable $d1, debug-location !228; is.c:304:13
  STRDui killed renamable $d0, killed renamable $x9, 0, debug-location !230 :: (store 8 into %ir.47); is.c:304:8
  renamable $x9 = LDRXui $sp, 11, debug-location !232 :: (dereferenceable load 8 from %ir.X.addr); is.c:305:20
  renamable $d0 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !231 :: (dereferenceable load 8 from @randlc.R46); is.c:305:13
  renamable $d1 = LDRDui killed renamable $x9, 0, debug-location !233 :: (load 8 from %ir.49); is.c:305:19
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1, debug-location !234; is.c:305:17
  $sp = frame-destroy ADDXri $sp, 96, 0, debug-location !235; is.c:305:5
  RET undef $lr, implicit $d0, debug-location !235; is.c:305:5

# End machine code for function randlc.

********** MI Scheduling **********
randlc:%bb.0 entry
  From: STPXi renamable $x1, renamable $x0, $sp, 10 :: (store 8 into %ir.X.addr), (store 8 into %ir.A.addr)
    To: CBNZW killed renamable $w13, %bb.8, debug-location !114; is.c:264:9
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   STPXi renamable $x1, renamable $x0, $sp, 10 :: (store 8 into %ir.X.addr), (store 8 into %ir.A.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   renamable $x12 = ADRP target-flags(aarch64-page) @randlc.KS, debug-location !111; is.c:264:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(2): Data Latency=1 Reg=$x12
SU(2):   renamable $w13 = LDRWui renamable $x12, target-flags(aarch64-pageoff, aarch64-nc) @randlc.KS, debug-location !111 :: (dereferenceable load 4 from @randlc.KS); is.c:264:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=$x12
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(3):   renamable $x11 = ADRP target-flags(aarch64-page) @randlc.R23, debug-location !115; is.c:265:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   renamable $x8 = ADRP target-flags(aarch64-page) @randlc.R46, debug-location !117; is.c:266:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   renamable $x10 = ADRP target-flags(aarch64-page) @randlc.T23, debug-location !118; is.c:267:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(6):   renamable $x9 = ADRP target-flags(aarch64-page) @randlc.T46, debug-location !119; is.c:268:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   CBNZW killed renamable $w13, %bb.8, debug-location !114; is.c:264:9
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=1 Artificial
    SU(5): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=4 Artificial
    SU(1): Ord  Latency=1 Artificial
Disabled scoreboard hazard recognizer
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 5 6 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x12 = ADRP target-flags(aarch64-page) @randlc.KS, debug-location !111; is.c:264:9
  Ready @0c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 6 3 4 5 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  1 cycles 
  Cand SU(3) ORDER                              
  Cand SU(2) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $w13 = LDRWui renamable $x12, target-flags(aarch64-pageoff, aarch64-nc) @randlc.KS, debug-location !111 :: (dereferenceable load 4 from @randlc.KS); is.c:264:9
  Ready @1c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 6 3 4 5 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  1 cycles 
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) renamable $x11 = ADRP target-flags(aarch64-page) @randlc.R23, debug-location !115; is.c:265:13
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 6 5 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  1 cycles 
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) renamable $x8 = ADRP target-flags(aarch64-page) @randlc.R46, debug-location !117; is.c:266:13
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 6 5 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  1 cycles 
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $x10 = ADRP target-flags(aarch64-page) @randlc.T23, debug-location !118; is.c:267:13
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 6 
  TopQ.A RemainingLatency 0 + 5c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) renamable $x9 = ADRP target-flags(aarch64-page) @randlc.T46, debug-location !119; is.c:268:13
  Ready @5c
  TopQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STPXi renamable $x1, renamable $x0, $sp, 10 :: (store 8 into %ir.X.addr), (store 8 into %ir.A.addr)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(1):   renamable $x12 = ADRP target-flags(aarch64-page) @randlc.KS, debug-location !111; is.c:264:9
SU(2):   renamable $w13 = LDRWui renamable $x12, target-flags(aarch64-pageoff, aarch64-nc) @randlc.KS, debug-location !111 :: (dereferenceable load 4 from @randlc.KS); is.c:264:9
SU(3):   renamable $x11 = ADRP target-flags(aarch64-page) @randlc.R23, debug-location !115; is.c:265:13
SU(4):   renamable $x8 = ADRP target-flags(aarch64-page) @randlc.R46, debug-location !117; is.c:266:13
SU(5):   renamable $x10 = ADRP target-flags(aarch64-page) @randlc.T23, debug-location !118; is.c:267:13
SU(6):   renamable $x9 = ADRP target-flags(aarch64-page) @randlc.T46, debug-location !119; is.c:268:13
SU(0):   STPXi renamable $x1, renamable $x0, $sp, 10 :: (store 8 into %ir.X.addr), (store 8 into %ir.A.addr)

Fixup kills for %bb.0
********** MI Scheduling **********
randlc:%bb.1 if.then
  From: $x13 = MOVZXi 16368, 48
    To: End RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   $x13 = MOVZXi 16368, 48
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=$x13
    SU(4): Data Latency=1 Reg=$x13
    SU(3): Data Latency=1 Reg=$x13
    SU(2): Data Latency=1 Reg=$x13
SU(1):   $w14 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(6): Data Latency=1 Reg=$w14
SU(2):   STRXui renamable $x13, renamable $x11, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !115 :: (store 8 into @randlc.R23); is.c:265:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$x13
SU(3):   STRXui renamable $x13, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !117 :: (store 8 into @randlc.R46); is.c:266:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$x13
SU(4):   STRXui renamable $x13, renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !118 :: (store 8 into @randlc.T23); is.c:267:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$x13
SU(5):   STRXui renamable $x13, renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !119 :: (store 8 into @randlc.T46); is.c:268:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$x13
SU(6):   STRWui renamable $w14, $sp, 1, debug-location !120 :: (store 4 into %ir.i); is.c:270:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w14
SU(7):   renamable $d0 = FMOVDi 96
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 7 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $x13 = MOVZXi 16368, 48
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 1 5 4 3 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 1
  Cand SU(7) ORDER                              
  Cand SU(1) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(1) $w14 = MOVZWi 1, 0
  Ready @1c
  TopQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 2 5 4 3 6 
  TopQ.A RemainingLatency 0 + 2c > CritPath 1
  Cand SU(7) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(7) renamable $d0 = FMOVDi 96
  Ready @2c
  TopQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 2 5 4 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 1
  Cand SU(6) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) STRXui renamable $x13, renamable $x11, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !115 :: (store 8 into @randlc.R23); is.c:265:13
  Ready @3c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 3 5 4 
  TopQ.A RemainingLatency 0 + 4c > CritPath 1
  Cand SU(6) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) STRXui renamable $x13, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !117 :: (store 8 into @randlc.R46); is.c:266:13
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 4 5 
  TopQ.A RemainingLatency 0 + 5c > CritPath 1
  Cand SU(6) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) STRXui renamable $x13, renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !118 :: (store 8 into @randlc.T23); is.c:267:13
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 5 
  TopQ.A RemainingLatency 0 + 6c > CritPath 1
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) STRXui renamable $x13, renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !119 :: (store 8 into @randlc.T46); is.c:268:13
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) STRWui renamable $w14, $sp, 1, debug-location !120 :: (store 4 into %ir.i); is.c:270:16
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   $x13 = MOVZXi 16368, 48
SU(1):   $w14 = MOVZWi 1, 0
SU(7):   renamable $d0 = FMOVDi 96
SU(2):   STRXui renamable $x13, renamable $x11, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !115 :: (store 8 into @randlc.R23); is.c:265:13
SU(3):   STRXui renamable $x13, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !117 :: (store 8 into @randlc.R46); is.c:266:13
SU(4):   STRXui renamable $x13, renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !118 :: (store 8 into @randlc.T23); is.c:267:13
SU(5):   STRXui renamable $x13, renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !119 :: (store 8 into @randlc.T46); is.c:268:13
SU(6):   STRWui renamable $w14, $sp, 1, debug-location !120 :: (store 4 into %ir.i); is.c:270:16

Fixup kills for %bb.1
********** MI Scheduling **********
randlc:%bb.2 for.cond
  From: renamable $w13 = LDRWui $sp, 1, debug-location !123 :: (dereferenceable load 4 from %ir.i); is.c:270:21
    To: Bcc 12, %bb.4, implicit $nzcv, debug-location !126; is.c:270:9
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w13 = LDRWui $sp, 1, debug-location !123 :: (dereferenceable load 4 from %ir.i); is.c:270:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w13
SU(1):   dead $wzr = SUBSWri renamable $w13, 23, 0, implicit-def $nzcv, debug-location !126; is.c:270:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w13
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.4, implicit $nzcv, debug-location !126; is.c:270:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w13 = LDRWui $sp, 1, debug-location !123 :: (dereferenceable load 4 from %ir.i); is.c:270:21
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w13, 23, 0, implicit-def $nzcv, debug-location !126; is.c:270:9
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   renamable $w13 = LDRWui $sp, 1, debug-location !123 :: (dereferenceable load 4 from %ir.i); is.c:270:21
SU(1):   dead $wzr = SUBSWri renamable $w13, 23, 0, implicit-def $nzcv, debug-location !126; is.c:270:9

Fixup kills for %bb.2
********** MI Scheduling **********
randlc:%bb.3 for.body
  From: renamable $d1 = LDRDui renamable $x11, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !127 :: (dereferenceable load 8 from @randlc.R23); is.c:271:26
    To: B %bb.2
 RegionInstrs: 9
ScheduleDAGMI::schedule starting
SU(0):   renamable $d1 = LDRDui renamable $x11, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !127 :: (dereferenceable load 8 from @randlc.R23); is.c:271:26
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d1
    SU(6): Ord  Latency=0 Memory
SU(1):   renamable $d2 = LDRDui renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !131 :: (dereferenceable load 8 from @randlc.T23); is.c:272:25
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d2
    SU(7): Ord  Latency=0 Memory
SU(2):   renamable $w13 = LDRWui $sp, 1, debug-location !134 :: (dereferenceable load 4 from %ir.i); is.c:270:31
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$w13
    SU(8): Ord  Latency=0 Memory
SU(3):   renamable $d1 = FMULDrr renamable $d1, renamable $d0, debug-location !129; is.c:271:24
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d1
  Successors:
    SU(6): Data Latency=1 Reg=$d1
SU(4):   renamable $d2 = FADDDrr renamable $d2, renamable $d2, debug-location !132; is.c:272:23
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$d2
  Successors:
    SU(7): Data Latency=1 Reg=$d2
SU(5):   renamable $w13 = nsw ADDWri renamable $w13, 1, 0, debug-location !134; is.c:270:31
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$w13
  Successors:
    SU(8): Data Latency=1 Reg=$w13
SU(6):   STRDui renamable $d1, renamable $x11, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !130 :: (store 8 into @randlc.R23); is.c:271:17
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=$d1
    SU(0): Ord  Latency=0 Memory
SU(7):   STRDui renamable $d2, renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !133 :: (store 8 into @randlc.T23); is.c:272:17
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=$d2
    SU(1): Ord  Latency=0 Memory
SU(8):   STRWui renamable $w13, $sp, 1, debug-location !134 :: (store 4 into %ir.i); is.c:270:31
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=$w13
    SU(2): Ord  Latency=0 Memory
ExitSU:   B %bb.2
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $d1 = LDRDui renamable $x11, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !127 :: (dereferenceable load 8 from @randlc.R23); is.c:271:26
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) renamable $d2 = LDRDui renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !131 :: (dereferenceable load 8 from @randlc.T23); is.c:272:25
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 4 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w13 = LDRWui $sp, 1, debug-location !134 :: (dereferenceable load 4 from %ir.i); is.c:270:31
  Ready @2c
  TopQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 5 4 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $d1 = FMULDrr renamable $d1, renamable $d0, debug-location !129; is.c:271:24
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 6 4 
  TopQ.A RemainingLatency 0 + 5c > CritPath 5
  Cand SU(6) ORDER                              
  Cand SU(4) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $d2 = FADDDrr renamable $d2, renamable $d2, debug-location !132; is.c:272:23
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 7 5 
  TopQ.A RemainingLatency 0 + 6c > CritPath 5
  Cand SU(6) ORDER                              
  Cand SU(5) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $w13 = nsw ADDWri renamable $w13, 1, 0, debug-location !134; is.c:270:31
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 7 8 
  TopQ.A RemainingLatency 0 + 7c > CritPath 5
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) STRDui renamable $d1, renamable $x11, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !130 :: (store 8 into @randlc.R23); is.c:271:17
  Ready @7c
  TopQ.A TopLatency SU(6) 5c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 7 
  TopQ.A RemainingLatency 0 + 8c > CritPath 5
  Cand SU(8) ORDER                              
  Cand SU(7) ORDER                              
Pick Top ORDER     
Scheduling SU(7) STRDui renamable $d2, renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !133 :: (store 8 into @randlc.T23); is.c:272:17
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 8
  Executed: 9c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) STRWui renamable $w13, $sp, 1, debug-location !134 :: (store 4 into %ir.i); is.c:270:31
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 9
  Executed: 10c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   renamable $d1 = LDRDui renamable $x11, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !127 :: (dereferenceable load 8 from @randlc.R23); is.c:271:26
SU(1):   renamable $d2 = LDRDui renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !131 :: (dereferenceable load 8 from @randlc.T23); is.c:272:25
SU(2):   renamable $w13 = LDRWui $sp, 1, debug-location !134 :: (dereferenceable load 4 from %ir.i); is.c:270:31
SU(3):   renamable $d1 = FMULDrr renamable $d1, renamable $d0, debug-location !129; is.c:271:24
SU(4):   renamable $d2 = FADDDrr renamable $d2, renamable $d2, debug-location !132; is.c:272:23
SU(5):   renamable $w13 = nsw ADDWri renamable $w13, 1, 0, debug-location !134; is.c:270:31
SU(6):   STRDui renamable $d1, renamable $x11, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !130 :: (store 8 into @randlc.R23); is.c:271:17
SU(7):   STRDui renamable $d2, renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !133 :: (store 8 into @randlc.T23); is.c:272:17
SU(8):   STRWui renamable $w13, $sp, 1, debug-location !134 :: (store 4 into %ir.i); is.c:270:31

Fixup kills for %bb.3
Fixup kills for %bb.4
********** MI Scheduling **********
randlc:%bb.5 for.cond3
  From: STRWui renamable $w13, $sp, 1, debug-location !DILocation(line: 0, scope: !139) :: (store 4 into %ir.i); is.c:0
    To: Bcc 12, %bb.7, implicit $nzcv, debug-location !144; is.c:274:9
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   STRWui renamable $w13, $sp, 1, debug-location !DILocation(line: 0, scope: !139) :: (store 4 into %ir.i); is.c:0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Anti Latency=0
SU(1):   $w13 = ORRWrs $wzr, renamable $w13, 0, debug-location !141; is.c:274:21
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Predecessors:
    SU(0): Anti Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=$w13
SU(2):   dead $wzr = SUBSWri renamable $w13, 46, 0, implicit-def $nzcv, debug-location !144; is.c:274:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=$w13
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.7, implicit $nzcv, debug-location !144; is.c:274:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STRWui renamable $w13, $sp, 1, debug-location !DILocation(line: 0, scope: !139) :: (store 4 into %ir.i); is.c:0
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w13 = ORRWrs $wzr, renamable $w13, 0, debug-location !141; is.c:274:21
  Ready @1c
  TopQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) dead $wzr = SUBSWri renamable $w13, 46, 0, implicit-def $nzcv, debug-location !144; is.c:274:9
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   STRWui renamable $w13, $sp, 1, debug-location !DILocation(line: 0, scope: !139) :: (store 4 into %ir.i); is.c:0
SU(1):   $w13 = ORRWrs $wzr, renamable $w13, 0, debug-location !141; is.c:274:21
SU(2):   dead $wzr = SUBSWri renamable $w13, 46, 0, implicit-def $nzcv, debug-location !144; is.c:274:9

Fixup kills for %bb.5
********** MI Scheduling **********
randlc:%bb.6 for.body5
  From: renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !145 :: (dereferenceable load 8 from @randlc.R46); is.c:275:26
    To: B %bb.5
 RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !145 :: (dereferenceable load 8 from @randlc.R46); is.c:275:26
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d1
    SU(6): Ord  Latency=0 Memory
SU(1):   renamable $d2 = LDRDui renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !149 :: (dereferenceable load 8 from @randlc.T46); is.c:276:25
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d2
    SU(7): Ord  Latency=0 Memory
SU(2):   renamable $w13 = LDRWui $sp, 1, debug-location !152 :: (dereferenceable load 4 from %ir.i); is.c:274:31
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$w13
SU(3):   renamable $d1 = FMULDrr renamable $d1, renamable $d0, debug-location !147; is.c:275:24
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d1
  Successors:
    SU(6): Data Latency=1 Reg=$d1
SU(4):   renamable $d2 = FADDDrr renamable $d2, renamable $d2, debug-location !150; is.c:276:23
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$d2
  Successors:
    SU(7): Data Latency=1 Reg=$d2
SU(5):   renamable $w13 = nsw ADDWri renamable $w13, 1, 0, debug-location !152; is.c:274:31
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$w13
SU(6):   STRDui renamable $d1, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !148 :: (store 8 into @randlc.R46); is.c:275:17
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=$d1
    SU(0): Ord  Latency=0 Memory
SU(7):   STRDui renamable $d2, renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !151 :: (store 8 into @randlc.T46); is.c:276:17
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=$d2
    SU(1): Ord  Latency=0 Memory
ExitSU:   B %bb.5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !145 :: (dereferenceable load 8 from @randlc.R46); is.c:275:26
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d2 = LDRDui renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !149 :: (dereferenceable load 8 from @randlc.T46); is.c:276:25
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 4 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w13 = LDRWui $sp, 1, debug-location !152 :: (dereferenceable load 4 from %ir.i); is.c:274:31
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 5 4 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $d1 = FMULDrr renamable $d1, renamable $d0, debug-location !147; is.c:275:24
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 6 4 
  TopQ.A RemainingLatency 0 + 5c > CritPath 5
  Cand SU(6) ORDER                              
  Cand SU(4) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $d2 = FADDDrr renamable $d2, renamable $d2, debug-location !150; is.c:276:23
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 7 5 
  TopQ.A RemainingLatency 0 + 6c > CritPath 5
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $w13 = nsw ADDWri renamable $w13, 1, 0, debug-location !152; is.c:274:31
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 7 
  TopQ.A RemainingLatency 0 + 7c > CritPath 5
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) STRDui renamable $d1, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !148 :: (store 8 into @randlc.R46); is.c:275:17
  Ready @7c
  TopQ.A TopLatency SU(6) 5c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) STRDui renamable $d2, renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !151 :: (store 8 into @randlc.T46); is.c:276:17
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 8
  Executed: 9c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !145 :: (dereferenceable load 8 from @randlc.R46); is.c:275:26
SU(1):   renamable $d2 = LDRDui renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !149 :: (dereferenceable load 8 from @randlc.T46); is.c:276:25
SU(2):   renamable $w13 = LDRWui $sp, 1, debug-location !152 :: (dereferenceable load 4 from %ir.i); is.c:274:31
SU(3):   renamable $d1 = FMULDrr renamable $d1, renamable $d0, debug-location !147; is.c:275:24
SU(4):   renamable $d2 = FADDDrr renamable $d2, renamable $d2, debug-location !150; is.c:276:23
SU(5):   renamable $w13 = nsw ADDWri renamable $w13, 1, 0, debug-location !152; is.c:274:31
SU(6):   STRDui renamable $d1, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !148 :: (store 8 into @randlc.R46); is.c:275:17
SU(7):   STRDui renamable $d2, renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !151 :: (store 8 into @randlc.T46); is.c:276:17

Fixup kills for %bb.6
********** MI Scheduling **********
randlc:%bb.7 for.end10
  From: $w13 = MOVZWi 1, 0
    To: End RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $w13 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=$w13
SU(1):   STRWui renamable $w13, renamable $x12, target-flags(aarch64-pageoff, aarch64-nc) @randlc.KS, debug-location !156 :: (store 4 into @randlc.KS); is.c:278:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$w13
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $w13 = MOVZWi 1, 0
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRWui renamable $w13, renamable $x12, target-flags(aarch64-pageoff, aarch64-nc) @randlc.KS, debug-location !156 :: (store 4 into @randlc.KS); is.c:278:12
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   $w13 = MOVZWi 1, 0
SU(1):   STRWui renamable $w13, renamable $x12, target-flags(aarch64-pageoff, aarch64-nc) @randlc.KS, debug-location !156 :: (store 4 into @randlc.KS); is.c:278:12

Fixup kills for %bb.7
********** MI Scheduling **********
randlc:%bb.8 if.end
  From: renamable $x12 = LDRXui $sp, 10, debug-location !159 :: (dereferenceable load 8 from %ir.A.addr); is.c:283:17
    To: $sp = frame-destroy ADDXri $sp, 96, 0, debug-location !235; is.c:305:5
 RegionInstrs: 60
ScheduleDAGMI::schedule starting
SU(0):   renamable $x12 = LDRXui $sp, 10, debug-location !159 :: (dereferenceable load 8 from %ir.A.addr); is.c:283:17
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 55
  Successors:
    SU(11): Out  Latency=1
    SU(10): Data Latency=4 Reg=$x12
    SU(2): Data Latency=4 Reg=$x12
    SU(55): Ord  Latency=0 Memory
SU(1):   renamable $d0 = LDRDui renamable $x11, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !158 :: (dereferenceable load 8 from @randlc.R23); is.c:283:10
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 51
  Successors:
    SU(17): Out  Latency=1
    SU(17): Data Latency=4 Reg=$d0
    SU(4): Data Latency=4 Reg=$d0
    SU(35): Anti Latency=0
    SU(55): Ord  Latency=0 Memory
SU(2):   renamable $d1 = LDRDui renamable $x12, 0, debug-location !160 :: (load 8 from %ir.10); is.c:283:16
  # preds left       : 1
  # succs left       : 16
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 51
  Predecessors:
    SU(0): Data Latency=4 Reg=$x12
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d1
    SU(11): Anti Latency=0
    SU(55): Ord  Latency=0 Memory
    SU(52): Ord  Latency=0 Memory
    SU(50): Ord  Latency=0 Memory
    SU(46): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(42): Ord  Latency=0 Memory
    SU(37): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
    SU(22): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
SU(3):   renamable $d2 = LDRDui renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !169 :: (dereferenceable load 8 from @randlc.T23); is.c:286:15
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 43
  Successors:
    SU(15): Out  Latency=1
    SU(13): Data Latency=4 Reg=$d2
    SU(49): Anti Latency=0
    SU(55): Ord  Latency=0 Memory
SU(4):   renamable $d1 = FMULDrr renamable $d0, renamable $d1, debug-location !161; is.c:283:14
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 47
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d1
    SU(1): Data Latency=4 Reg=$d0
  Successors:
    SU(8): Out  Latency=1
    SU(6): Data Latency=1 Reg=$d1
    SU(5): Data Latency=1 Reg=$d1
    SU(17): Anti Latency=0
SU(5):   STRDui renamable $d1, $sp, 9, debug-location !162 :: (store 8 into %ir.T1); is.c:283:8
  # preds left       : 2
  # succs left       : 8
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 45
  Predecessors:
    SU(4): Data Latency=1 Reg=$d1
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(8): Anti Latency=0
    SU(37): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(58): Ord  Latency=1 Memory
    SU(23): Ord  Latency=1 Memory
    SU(15): Ord  Latency=1 Memory
    SU(10): Ord  Latency=1 Memory
    SU(55): Ord  Latency=0 Memory
SU(6):   renamable $w13 = FCVTZSUWDr renamable $d1, debug-location !163; is.c:284:9
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 46
  Predecessors:
    SU(4): Data Latency=1 Reg=$d1
  Successors:
    SU(12): Out  Latency=1
    SU(8): Data Latency=1 Reg=$w13
    SU(7): Data Latency=1 Reg=$w13
    SU(8): Anti Latency=0
SU(7):   STRWui renamable $w13, $sp, 0, debug-location !164 :: (store 4 into %ir.j); is.c:284:7
  # preds left       : 2
  # succs left       : 9
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 44
  Predecessors:
    SU(6): Data Latency=1 Reg=$w13
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(12): Anti Latency=0
    SU(50): Ord  Latency=0 Memory
    SU(46): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(58): Ord  Latency=1 Memory
    SU(23): Ord  Latency=1 Memory
    SU(15): Ord  Latency=1 Memory
    SU(10): Ord  Latency=1 Memory
    SU(55): Ord  Latency=0 Memory
SU(8):   renamable $d1 = SCVTFUWDri renamable $w13, debug-location !165; is.c:285:10
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 45
  Predecessors:
    SU(6): Data Latency=1 Reg=$w13
    SU(6): Anti Latency=0
    SU(5): Anti Latency=0
    SU(4): Out  Latency=1
  Successors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$d1
    SU(9): Data Latency=1 Reg=$d1
    SU(12): Anti Latency=0
SU(9):   STRDui renamable $d1, $sp, 5, debug-location !166 :: (store 8 into %ir.A1); is.c:285:8
  # preds left       : 2
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 44
  Predecessors:
    SU(8): Data Latency=1 Reg=$d1
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(13): Anti Latency=0
    SU(26): Ord  Latency=1 Memory
    SU(58): Ord  Latency=1 Memory
    SU(23): Ord  Latency=1 Memory
    SU(15): Ord  Latency=1 Memory
    SU(10): Ord  Latency=1 Memory
    SU(55): Ord  Latency=0 Memory
SU(10):   renamable $d3 = LDRDui renamable $x12, 0, debug-location !168 :: (load 8 from %ir.14); is.c:286:10
  # preds left       : 4
  # succs left       : 13
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 43
  Predecessors:
    SU(9): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
    SU(0): Data Latency=4 Reg=$x12
  Successors:
    SU(16): Out  Latency=1
    SU(14): Data Latency=4 Reg=$d3
    SU(11): Anti Latency=0
    SU(55): Ord  Latency=0 Memory
    SU(52): Ord  Latency=0 Memory
    SU(50): Ord  Latency=0 Memory
    SU(46): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(42): Ord  Latency=0 Memory
    SU(37): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
    SU(22): Ord  Latency=0 Memory
SU(11):   renamable $x12 = LDRXui $sp, 11, debug-location !175 :: (dereferenceable load 8 from %ir.X.addr); is.c:292:17
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 43
  Predecessors:
    SU(10): Anti Latency=0
    SU(2): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    SU(19): Out  Latency=1
    SU(15): Data Latency=4 Reg=$x12
    SU(55): Ord  Latency=0 Memory
SU(12):   renamable $x13 = LDRXui $sp, 11, debug-location !183 :: (dereferenceable load 8 from %ir.X.addr); is.c:295:11
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 35
  Predecessors:
    SU(8): Anti Latency=0
    SU(7): Anti Latency=0
    SU(6): Out  Latency=1
  Successors:
    SU(23): Data Latency=4 Reg=$x13
    SU(55): Ord  Latency=0 Memory
SU(13):   renamable $d1 = FMULDrr renamable $d2, renamable $d1, debug-location !171; is.c:286:19
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 39
  Predecessors:
    SU(9): Anti Latency=0
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$d1
    SU(3): Data Latency=4 Reg=$d2
  Successors:
    SU(14): Out  Latency=1
    SU(14): Data Latency=1 Reg=$d1
    SU(15): Anti Latency=0
SU(14):   renamable $d1 = FSUBDrr renamable $d3, renamable $d1, debug-location !172; is.c:286:13
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 33
  Predecessors:
    SU(10): Data Latency=4 Reg=$d3
    SU(13): Data Latency=1 Reg=$d1
    SU(13): Out  Latency=1
  Successors:
    SU(26): Out  Latency=1
    SU(25): Data Latency=1 Reg=$d1
    SU(22): Data Latency=1 Reg=$d1
    SU(16): Anti Latency=0
SU(15):   renamable $d2 = LDRDui renamable $x12, 0, debug-location !176 :: (load 8 from %ir.19); is.c:292:16
  # preds left       : 6
  # succs left       : 13
  # rdefs left       : 0
  Latency            : 4
  Depth              : 16
  Height             : 39
  Predecessors:
    SU(13): Anti Latency=0
    SU(11): Data Latency=4 Reg=$x12
    SU(9): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
    SU(3): Out  Latency=1
  Successors:
    SU(23): Out  Latency=1
    SU(17): Data Latency=4 Reg=$d2
    SU(19): Anti Latency=0
    SU(55): Ord  Latency=0 Memory
    SU(52): Ord  Latency=0 Memory
    SU(50): Ord  Latency=0 Memory
    SU(46): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(42): Ord  Latency=0 Memory
    SU(37): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
    SU(22): Ord  Latency=0 Memory
SU(16):   renamable $d3 = LDRDui renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !185 :: (dereferenceable load 8 from @randlc.T23); is.c:295:15
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 16
  Height             : 33
  Predecessors:
    SU(14): Anti Latency=0
    SU(10): Out  Latency=1
  Successors:
    SU(24): Out  Latency=1
    SU(24): Data Latency=4 Reg=$d3
    SU(49): Anti Latency=0
    SU(55): Ord  Latency=0 Memory
SU(17):   renamable $d0 = FMULDrr renamable $d0, renamable $d2, debug-location !177; is.c:292:14
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 20
  Height             : 35
  Predecessors:
    SU(15): Data Latency=4 Reg=$d2
    SU(4): Anti Latency=0
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$d0
  Successors:
    SU(21): Out  Latency=1
    SU(19): Data Latency=1 Reg=$d0
    SU(18): Data Latency=1 Reg=$d0
    SU(23): Anti Latency=0
SU(18):   STRDui renamable $d0, $sp, 9, debug-location !178 :: (store 8 into %ir.T1); is.c:292:8
  # preds left       : 5
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 21
  Height             : 33
  Predecessors:
    SU(17): Data Latency=1 Reg=$d0
    SU(15): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(21): Anti Latency=0
    SU(37): Ord  Latency=0 Memory
    SU(58): Ord  Latency=1 Memory
    SU(23): Ord  Latency=1 Memory
    SU(55): Ord  Latency=0 Memory
SU(19):   renamable $w12 = FCVTZSUWDr renamable $d0, debug-location !179; is.c:293:9
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 21
  Height             : 34
  Predecessors:
    SU(17): Data Latency=1 Reg=$d0
    SU(15): Anti Latency=0
    SU(11): Out  Latency=1
  Successors:
    SU(21): Data Latency=1 Reg=$w12
    SU(20): Data Latency=1 Reg=$w12
    SU(21): Anti Latency=0
SU(20):   STRWui renamable $w12, $sp, 0, debug-location !180 :: (store 4 into %ir.j); is.c:293:7
  # preds left       : 5
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 32
  Predecessors:
    SU(19): Data Latency=1 Reg=$w12
    SU(15): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(50): Ord  Latency=0 Memory
    SU(46): Ord  Latency=0 Memory
    SU(58): Ord  Latency=1 Memory
    SU(23): Ord  Latency=1 Memory
    SU(55): Ord  Latency=0 Memory
SU(21):   renamable $d0 = SCVTFUWDri renamable $w12, debug-location !181; is.c:294:10
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 33
  Predecessors:
    SU(19): Data Latency=1 Reg=$w12
    SU(19): Anti Latency=0
    SU(18): Anti Latency=0
    SU(17): Out  Latency=1
  Successors:
    SU(25): Out  Latency=1
    SU(25): Data Latency=1 Reg=$d0
    SU(24): Data Latency=1 Reg=$d0
    SU(22): Data Latency=1 Reg=$d0
SU(22):   STPDi renamable $d0, renamable $d1, $sp, 3, debug-location !173 :: (store 8 into %ir.A2), (store 8 into %ir.X1); is.c:286:8
  # preds left       : 5
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 1
  Depth              : 23
  Height             : 32
  Predecessors:
    SU(21): Data Latency=1 Reg=$d0
    SU(15): Ord  Latency=0 Memory
    SU(14): Data Latency=1 Reg=$d1
    SU(10): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(25): Anti Latency=0
    SU(26): Anti Latency=0
    SU(26): Ord  Latency=1 Memory
    SU(58): Ord  Latency=1 Memory
    SU(23): Ord  Latency=1 Memory
    SU(55): Ord  Latency=0 Memory
SU(23):   renamable $d2 = LDRDui renamable $x13, 0, debug-location !184 :: (load 8 from %ir.23); is.c:295:10
  # preds left       : 9
  # succs left       : 9
  # rdefs left       : 0
  Latency            : 4
  Depth              : 24
  Height             : 31
  Predecessors:
    SU(22): Ord  Latency=1 Memory
    SU(20): Ord  Latency=1 Memory
    SU(18): Ord  Latency=1 Memory
    SU(17): Anti Latency=0
    SU(15): Out  Latency=1
    SU(12): Data Latency=4 Reg=$x13
    SU(9): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
  Successors:
    SU(27): Out  Latency=1
    SU(27): Data Latency=4 Reg=$d2
    SU(55): Ord  Latency=0 Memory
    SU(52): Ord  Latency=0 Memory
    SU(50): Ord  Latency=0 Memory
    SU(46): Ord  Latency=0 Memory
    SU(42): Ord  Latency=0 Memory
    SU(37): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
SU(24):   renamable $d3 = FMULDrr renamable $d3, renamable $d0, debug-location !187; is.c:295:19
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 23
  Height             : 29
  Predecessors:
    SU(21): Data Latency=1 Reg=$d0
    SU(16): Out  Latency=1
    SU(16): Data Latency=4 Reg=$d3
  Successors:
    SU(28): Out  Latency=1
    SU(27): Data Latency=1 Reg=$d3
    SU(25): Anti Latency=0
SU(25):   renamable $d0 = FMULDrr renamable $d1, renamable $d0, debug-location !195; is.c:296:23
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 23
  Height             : 29
  Predecessors:
    SU(24): Anti Latency=0
    SU(22): Anti Latency=0
    SU(21): Out  Latency=1
    SU(21): Data Latency=1 Reg=$d0
    SU(14): Data Latency=1 Reg=$d1
  Successors:
    SU(32): Out  Latency=1
    SU(32): Data Latency=1 Reg=$d0
    SU(26): Anti Latency=0
SU(26):   renamable $d1, renamable $d4 = LDPDi $sp, 4, debug-location !190 :: (dereferenceable load 8 from %ir.A1), (dereferenceable load 8 from %ir.A2); is.c:296:10
  # preds left       : 5
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 24
  Height             : 29
  Predecessors:
    SU(25): Anti Latency=0
    SU(22): Anti Latency=0
    SU(22): Ord  Latency=1 Memory
    SU(14): Out  Latency=1
    SU(9): Ord  Latency=1 Memory
  Successors:
    SU(31): Out  Latency=1
    SU(31): Data Latency=4 Reg=$d1
    SU(30): Out  Latency=1
    SU(30): Data Latency=4 Reg=$d4
    SU(55): Ord  Latency=0 Memory
SU(27):   renamable $d2 = FSUBDrr renamable $d2, renamable $d3, debug-location !188; is.c:295:13
  # preds left       : 3
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 28
  Height             : 27
  Predecessors:
    SU(23): Data Latency=4 Reg=$d2
    SU(23): Out  Latency=1
    SU(24): Data Latency=1 Reg=$d3
  Successors:
    SU(33): Out  Latency=1
    SU(31): Data Latency=1 Reg=$d2
    SU(30): Data Latency=1 Reg=$d2
    SU(29): Data Latency=1 Reg=$d2
    SU(28): Anti Latency=0
SU(28):   renamable $d3 = LDRDui renamable $x11, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !198 :: (dereferenceable load 8 from @randlc.R23); is.c:298:9
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 28
  Height             : 27
  Predecessors:
    SU(27): Anti Latency=0
    SU(24): Out  Latency=1
  Successors:
    SU(34): Out  Latency=1
    SU(34): Data Latency=4 Reg=$d3
    SU(35): Anti Latency=0
    SU(55): Ord  Latency=0 Memory
SU(29):   STRDui renamable $d2, $sp, 2, debug-location !189 :: (store 8 into %ir.X2); is.c:295:8
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 29
  Height             : 24
  Predecessors:
    SU(27): Data Latency=1 Reg=$d2
    SU(23): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(33): Anti Latency=0
    SU(58): Ord  Latency=1 Memory
    SU(55): Ord  Latency=0 Memory
SU(30):   renamable $d4 = FMULDrr renamable $d4, renamable $d2, debug-location !192; is.c:296:13
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 29
  Height             : 25
  Predecessors:
    SU(27): Data Latency=1 Reg=$d2
    SU(26): Out  Latency=1
    SU(26): Data Latency=4 Reg=$d4
  Successors:
    SU(32): Data Latency=1 Reg=$d4
    SU(33): Anti Latency=0
SU(31):   renamable $d1 = FMULDrr renamable $d1, renamable $d2, debug-location !215; is.c:301:23
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 29
  Height             : 24
  Predecessors:
    SU(27): Data Latency=1 Reg=$d2
    SU(26): Out  Latency=1
    SU(26): Data Latency=4 Reg=$d1
  Successors:
    SU(48): Out  Latency=1
    SU(47): Data Latency=1 Reg=$d1
    SU(33): Anti Latency=0
SU(32):   renamable $d0 = FADDDrr renamable $d4, renamable $d0, debug-location !196; is.c:296:18
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 30
  Height             : 24
  Predecessors:
    SU(30): Data Latency=1 Reg=$d4
    SU(25): Out  Latency=1
    SU(25): Data Latency=1 Reg=$d0
  Successors:
    SU(40): Out  Latency=1
    SU(40): Data Latency=1 Reg=$d0
    SU(37): Data Latency=1 Reg=$d0
    SU(34): Data Latency=1 Reg=$d0
SU(33):   renamable $d2 = LDRDui renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !205 :: (dereferenceable load 8 from @randlc.T23); is.c:300:14
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 29
  Height             : 24
  Predecessors:
    SU(31): Anti Latency=0
    SU(30): Anti Latency=0
    SU(29): Anti Latency=0
    SU(27): Out  Latency=1
  Successors:
    SU(38): Out  Latency=1
    SU(38): Data Latency=4 Reg=$d2
    SU(49): Anti Latency=0
    SU(55): Ord  Latency=0 Memory
SU(34):   renamable $d3 = FMULDrr renamable $d3, renamable $d0, debug-location !200; is.c:298:13
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 32
  Height             : 23
  Predecessors:
    SU(32): Data Latency=1 Reg=$d0
    SU(28): Out  Latency=1
    SU(28): Data Latency=4 Reg=$d3
  Successors:
    SU(36): Out  Latency=1
    SU(35): Data Latency=1 Reg=$d3
    SU(40): Anti Latency=0
SU(35):   renamable $w11 = FCVTZSUWDr renamable $d3, debug-location !198; is.c:298:9
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 33
  Height             : 22
  Predecessors:
    SU(34): Data Latency=1 Reg=$d3
    SU(28): Anti Latency=0
    SU(1): Anti Latency=0
  Successors:
    SU(46): Data Latency=1 Reg=$w11
    SU(36): Data Latency=1 Reg=$w11
    SU(36): Anti Latency=0
SU(36):   renamable $d3 = SCVTFUWDri renamable $w11, debug-location !202; is.c:299:10
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 34
  Height             : 21
  Predecessors:
    SU(35): Data Latency=1 Reg=$w11
    SU(35): Anti Latency=0
    SU(34): Out  Latency=1
  Successors:
    SU(39): Out  Latency=1
    SU(38): Data Latency=1 Reg=$d3
    SU(37): Data Latency=1 Reg=$d3
SU(37):   STPDi renamable $d3, renamable $d0, $sp, 8, debug-location !203 :: (store 8 into %ir.T2), (store 8 into %ir.T1); is.c:299:8
  # preds left       : 8
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 35
  Height             : 20
  Predecessors:
    SU(36): Data Latency=1 Reg=$d3
    SU(32): Data Latency=1 Reg=$d0
    SU(23): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(39): Anti Latency=0
    SU(40): Anti Latency=0
    SU(58): Ord  Latency=1 Memory
    SU(55): Ord  Latency=0 Memory
SU(38):   renamable $d2 = FMULDrr renamable $d2, renamable $d3, debug-location !207; is.c:300:18
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 35
  Height             : 20
  Predecessors:
    SU(36): Data Latency=1 Reg=$d3
    SU(33): Out  Latency=1
    SU(33): Data Latency=4 Reg=$d2
  Successors:
    SU(41): Out  Latency=1
    SU(40): Data Latency=1 Reg=$d2
    SU(39): Anti Latency=0
SU(39):   renamable $d3 = LDRDui renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !210 :: (dereferenceable load 8 from @randlc.T23); is.c:301:10
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 35
  Height             : 20
  Predecessors:
    SU(38): Anti Latency=0
    SU(37): Anti Latency=0
    SU(36): Out  Latency=1
  Successors:
    SU(44): Out  Latency=1
    SU(43): Data Latency=4 Reg=$d3
    SU(49): Anti Latency=0
    SU(55): Ord  Latency=0 Memory
SU(40):   renamable $d0 = FSUBDrr renamable $d0, renamable $d2, debug-location !208; is.c:300:12
  # preds left       : 5
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 36
  Height             : 18
  Predecessors:
    SU(38): Data Latency=1 Reg=$d2
    SU(37): Anti Latency=0
    SU(34): Anti Latency=0
    SU(32): Out  Latency=1
    SU(32): Data Latency=1 Reg=$d0
  Successors:
    SU(43): Out  Latency=1
    SU(43): Data Latency=1 Reg=$d0
    SU(42): Data Latency=1 Reg=$d0
    SU(41): Anti Latency=0
SU(41):   renamable $d2 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !218 :: (dereferenceable load 8 from @randlc.R46); is.c:302:9
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 36
  Height             : 18
  Predecessors:
    SU(40): Anti Latency=0
    SU(38): Out  Latency=1
  Successors:
    SU(48): Data Latency=4 Reg=$d2
    SU(55): Ord  Latency=0 Memory
SU(42):   STRDui renamable $d0, $sp, 1, debug-location !209 :: (store 8 into %ir.Z); is.c:300:7
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 37
  Height             : 16
  Predecessors:
    SU(40): Data Latency=1 Reg=$d0
    SU(23): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(43): Anti Latency=0
    SU(58): Ord  Latency=1 Memory
    SU(55): Ord  Latency=0 Memory
SU(43):   renamable $d0 = FMULDrr renamable $d3, renamable $d0, debug-location !212; is.c:301:14
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 39
  Height             : 16
  Predecessors:
    SU(42): Anti Latency=0
    SU(40): Out  Latency=1
    SU(40): Data Latency=1 Reg=$d0
    SU(39): Data Latency=4 Reg=$d3
  Successors:
    SU(47): Out  Latency=1
    SU(47): Data Latency=1 Reg=$d0
    SU(44): Anti Latency=0
SU(44):   renamable $d3 = LDRDui renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !225 :: (dereferenceable load 8 from @randlc.T46); is.c:304:15
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 39
  Height             : 15
  Predecessors:
    SU(43): Anti Latency=0
    SU(39): Out  Latency=1
  Successors:
    SU(53): Data Latency=4 Reg=$d3
    SU(45): Anti Latency=0
    SU(55): Ord  Latency=0 Memory
SU(45):   renamable $x9 = LDRXui $sp, 11, debug-location !229 :: (dereferenceable load 8 from %ir.X.addr); is.c:304:6
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 39
  Height             : 13
  Predecessors:
    SU(44): Anti Latency=0
  Successors:
    SU(56): Out  Latency=1
    SU(55): Data Latency=4 Reg=$x9
    SU(55): Ord  Latency=0 Memory
SU(46):   STRWui renamable $w11, $sp, 0, debug-location !201 :: (store 4 into %ir.j); is.c:298:7
  # preds left       : 7
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 34
  Height             : 9
  Predecessors:
    SU(35): Data Latency=1 Reg=$w11
    SU(23): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(50): Ord  Latency=0 Memory
    SU(58): Ord  Latency=1 Memory
    SU(55): Ord  Latency=0 Memory
SU(47):   renamable $d0 = FADDDrr renamable $d0, renamable $d1, debug-location !216; is.c:301:18
  # preds left       : 3
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 40
  Height             : 15
  Predecessors:
    SU(43): Out  Latency=1
    SU(43): Data Latency=1 Reg=$d0
    SU(31): Data Latency=1 Reg=$d1
  Successors:
    SU(54): Out  Latency=1
    SU(54): Data Latency=1 Reg=$d0
    SU(52): Data Latency=1 Reg=$d0
    SU(48): Data Latency=1 Reg=$d0
    SU(48): Anti Latency=0
SU(48):   renamable $d1 = FMULDrr renamable $d2, renamable $d0, debug-location !220; is.c:302:13
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 41
  Height             : 14
  Predecessors:
    SU(47): Data Latency=1 Reg=$d0
    SU(47): Anti Latency=0
    SU(41): Data Latency=4 Reg=$d2
    SU(31): Out  Latency=1
  Successors:
    SU(51): Out  Latency=1
    SU(49): Data Latency=1 Reg=$d1
    SU(54): Anti Latency=0
SU(49):   renamable $w10 = FCVTZSUWDr renamable $d1, debug-location !218; is.c:302:9
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 42
  Height             : 13
  Predecessors:
    SU(48): Data Latency=1 Reg=$d1
    SU(39): Anti Latency=0
    SU(33): Anti Latency=0
    SU(16): Anti Latency=0
    SU(3): Anti Latency=0
  Successors:
    SU(51): Data Latency=1 Reg=$w10
    SU(50): Data Latency=1 Reg=$w10
    SU(51): Anti Latency=0
SU(50):   STRWui renamable $w10, $sp, 0, debug-location !221 :: (store 4 into %ir.j); is.c:302:7
  # preds left       : 8
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 43
  Height             : 9
  Predecessors:
    SU(49): Data Latency=1 Reg=$w10
    SU(46): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(58): Ord  Latency=1 Memory
    SU(55): Ord  Latency=0 Memory
SU(51):   renamable $d1 = SCVTFUWDri renamable $w10, debug-location !222; is.c:303:10
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 43
  Height             : 12
  Predecessors:
    SU(49): Data Latency=1 Reg=$w10
    SU(49): Anti Latency=0
    SU(48): Out  Latency=1
  Successors:
    SU(53): Out  Latency=1
    SU(53): Data Latency=1 Reg=$d1
    SU(52): Data Latency=1 Reg=$d1
SU(52):   STPDi renamable $d1, renamable $d0, $sp, 6, debug-location !217 :: (store 8 into %ir.T3), (store 8 into %ir.T4); is.c:301:8
  # preds left       : 6
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 44
  Height             : 11
  Predecessors:
    SU(51): Data Latency=1 Reg=$d1
    SU(47): Data Latency=1 Reg=$d0
    SU(23): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(53): Anti Latency=0
    SU(54): Anti Latency=0
    SU(58): Ord  Latency=1 Memory
    SU(55): Ord  Latency=0 Memory
SU(53):   renamable $d1 = FMULDrr renamable $d3, renamable $d1, debug-location !227; is.c:304:19
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 44
  Height             : 11
  Predecessors:
    SU(52): Anti Latency=0
    SU(51): Out  Latency=1
    SU(51): Data Latency=1 Reg=$d1
    SU(44): Data Latency=4 Reg=$d3
  Successors:
    SU(58): Out  Latency=1
    SU(54): Data Latency=1 Reg=$d1
SU(54):   renamable $d0 = FSUBDrr renamable $d0, renamable $d1, debug-location !228; is.c:304:13
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 45
  Height             : 10
  Predecessors:
    SU(53): Data Latency=1 Reg=$d1
    SU(52): Anti Latency=0
    SU(48): Anti Latency=0
    SU(47): Out  Latency=1
    SU(47): Data Latency=1 Reg=$d0
  Successors:
    SU(57): Out  Latency=1
    SU(55): Data Latency=1 Reg=$d0
    SU(58): Anti Latency=0
SU(55):   STRDui renamable $d0, renamable $x9, 0, debug-location !230 :: (store 8 into %ir.47); is.c:304:8
  # preds left       : 31
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 46
  Height             : 9
  Predecessors:
    SU(54): Data Latency=1 Reg=$d0
    SU(52): Ord  Latency=0 Memory
    SU(50): Ord  Latency=0 Memory
    SU(46): Ord  Latency=0 Memory
    SU(45): Data Latency=4 Reg=$x9
    SU(45): Ord  Latency=0 Memory
    SU(44): Ord  Latency=0 Memory
    SU(42): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(39): Ord  Latency=0 Memory
    SU(37): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
    SU(28): Ord  Latency=0 Memory
    SU(26): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(22): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(16): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(57): Anti Latency=0
    SU(56): Anti Latency=0
    SU(58): Ord  Latency=1 Memory
    SU(57): Ord  Latency=1 Memory
    SU(56): Ord  Latency=1 Memory
SU(56):   renamable $x9 = LDRXui $sp, 11, debug-location !232 :: (dereferenceable load 8 from %ir.X.addr); is.c:305:20
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 47
  Height             : 8
  Predecessors:
    SU(55): Anti Latency=0
    SU(55): Ord  Latency=1 Memory
    SU(45): Out  Latency=1
  Successors:
    SU(58): Data Latency=4 Reg=$x9
SU(57):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !231 :: (dereferenceable load 8 from @randlc.R46); is.c:305:13
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 47
  Height             : 4
  Predecessors:
    SU(55): Anti Latency=0
    SU(55): Ord  Latency=1 Memory
    SU(54): Out  Latency=1
  Successors:
    SU(59): Out  Latency=1
    SU(59): Data Latency=4 Reg=$d0
SU(58):   renamable $d1 = LDRDui renamable $x9, 0, debug-location !233 :: (load 8 from %ir.49); is.c:305:19
  # preds left       : 16
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 51
  Height             : 4
  Predecessors:
    SU(56): Data Latency=4 Reg=$x9
    SU(55): Ord  Latency=1 Memory
    SU(54): Anti Latency=0
    SU(53): Out  Latency=1
    SU(52): Ord  Latency=1 Memory
    SU(50): Ord  Latency=1 Memory
    SU(46): Ord  Latency=1 Memory
    SU(42): Ord  Latency=1 Memory
    SU(37): Ord  Latency=1 Memory
    SU(29): Ord  Latency=1 Memory
    SU(22): Ord  Latency=1 Memory
    SU(20): Ord  Latency=1 Memory
    SU(18): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
  Successors:
    SU(59): Data Latency=4 Reg=$d1
SU(59):   renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !234; is.c:305:17
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 55
  Height             : 0
  Predecessors:
    SU(58): Data Latency=4 Reg=$d1
    SU(57): Out  Latency=1
    SU(57): Data Latency=4 Reg=$d0
ExitSU:   $sp = frame-destroy ADDXri $sp, 96, 0, debug-location !235; is.c:305:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 55
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 55
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x12 = LDRXui $sp, 10, debug-location !159 :: (dereferenceable load 8 from %ir.A.addr); is.c:283:17
  Ready @0c
  TopQ.A BotLatency SU(0) 55c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 3 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 55
  Cand SU(3) ORDER                              
  Cand SU(1) TOP-PATH                  51 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d0 = LDRDui renamable $x11, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !158 :: (dereferenceable load 8 from @randlc.R23); is.c:283:10
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $d2 = LDRDui renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !169 :: (dereferenceable load 8 from @randlc.T23); is.c:286:15
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $d1 = LDRDui renamable $x12, 0, debug-location !160 :: (load 8 from %ir.10); is.c:283:16
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 8 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $d1 = FMULDrr renamable $d0, renamable $d1, debug-location !161; is.c:283:14
  Ready @8c
  TopQ.A TopLatency SU(4) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 5
  Executed: 9c
  Critical: 5c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 5 
  TopQ.A RemainingLatency 0 + 9c > CritPath 55
  Cand SU(6) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(6) renamable $w13 = FCVTZSUWDr renamable $d1, debug-location !163; is.c:284:9
  Ready @9c
  TopQ.A TopLatency SU(6) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 6
  Executed: 10c
  Critical: 6c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 7 
  TopQ.A RemainingLatency 0 + 10c > CritPath 55
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) STRDui renamable $d1, $sp, 9, debug-location !162 :: (store 8 into %ir.T1); is.c:283:8
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 7
  Executed: 11c
  Critical: 7c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 8 
  TopQ.A RemainingLatency 0 + 11c > CritPath 55
  Cand SU(7) ORDER                              
  Cand SU(8) TOP-PATH                  45 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $d1 = SCVTFUWDri renamable $w13, debug-location !165; is.c:285:10
  Ready @11c
  TopQ.A TopLatency SU(8) 10c
  TopQ.A BotLatency SU(8) 45c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 8
  Executed: 12c
  Critical: 8c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 9 
  TopQ.A RemainingLatency 0 + 12c > CritPath 55
  Cand SU(7) ORDER                              
Pick Top ORDER     
Scheduling SU(7) STRWui renamable $w13, $sp, 0, debug-location !164 :: (store 4 into %ir.j); is.c:284:7
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 9
  Executed: 13c
  Critical: 9c, 9 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 12 
  TopQ.A RemainingLatency 0 + 13c > CritPath 55
  Cand SU(9) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(9) STRDui renamable $d1, $sp, 5, debug-location !166 :: (store 8 into %ir.A1); is.c:285:8
  Ready @13c
  TopQ.A TopLatency SU(9) 11c
  TopQ.A BotLatency SU(9) 44c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 10
  Executed: 14c
  Critical: 10c, 10 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 13 10 
  TopQ.A RemainingLatency 0 + 14c > CritPath 55
  Cand SU(12) ORDER                              
  Cand SU(13) TOP-PATH                  39 cycles 
  Cand SU(10) TOP-PATH                  43 cycles 
Pick Top TOP-PATH  
Scheduling SU(10) renamable $d3 = LDRDui renamable $x12, 0, debug-location !168 :: (load 8 from %ir.14); is.c:286:10
  Ready @14c
  TopQ.A TopLatency SU(10) 12c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 11
  Executed: 15c
  Critical: 11c, 11 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 13 11 
  TopQ.A RemainingLatency 0 + 15c > CritPath 55
  Cand SU(12) ORDER                              
  Cand SU(13) TOP-PATH                  39 cycles 
  Cand SU(11) TOP-PATH                  43 cycles 
Pick Top TOP-PATH  
Scheduling SU(11) renamable $x12 = LDRXui $sp, 11, debug-location !175 :: (dereferenceable load 8 from %ir.X.addr); is.c:292:17
  Ready @15c
  TopQ.A BotLatency SU(11) 43c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 12
  Executed: 16c
  Critical: 12c, 12 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 13 
  TopQ.A RemainingLatency 0 + 16c > CritPath 55
  Cand SU(12) ORDER                              
  Cand SU(13) TOP-PATH                  39 cycles 
Pick Top TOP-PATH  
Scheduling SU(13) renamable $d1 = FMULDrr renamable $d2, renamable $d1, debug-location !171; is.c:286:19
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 13
  Executed: 17c
  Critical: 13c, 13 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 14 15 
Queue TopQ.A: 12 
Pick Top ONLY1     
Scheduling SU(12) renamable $x13 = LDRXui $sp, 11, debug-location !183 :: (dereferenceable load 8 from %ir.X.addr); is.c:295:11
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 14
  Executed: 18c
  Critical: 14c, 14 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 15 
Queue TopQ.A: 14 
Pick Top ONLY1     
Scheduling SU(14) renamable $d1 = FSUBDrr renamable $d3, renamable $d1, debug-location !172; is.c:286:13
  Ready @18c
  TopQ.A TopLatency SU(14) 16c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 15
  Executed: 19c
  Critical: 15c, 15 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 16 15 
  TopQ.A RemainingLatency 0 + 19c > CritPath 55
  Cand SU(16) ORDER                              
  Cand SU(15) TOP-PATH                  39 cycles 
Pick Top TOP-PATH  
Scheduling SU(15) renamable $d2 = LDRDui renamable $x12, 0, debug-location !176 :: (load 8 from %ir.19); is.c:292:16
  Ready @19c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 16
  Executed: 20c
  Critical: 16c, 16 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 17 
Queue TopQ.A: 16 
Pick Top ONLY1     
Scheduling SU(16) renamable $d3 = LDRDui renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !185 :: (dereferenceable load 8 from @randlc.T23); is.c:295:15
  Ready @20c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 17
  Executed: 21c
  Critical: 17c, 17 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 23 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 17 
Pick Top ONLY1     
Scheduling SU(17) renamable $d0 = FMULDrr renamable $d0, renamable $d2, debug-location !177; is.c:292:14
  Ready @23c
  TopQ.A TopLatency SU(17) 20c
  *** Max MOps 1 at cycle 23
Cycle: 24 TopQ.A
TopQ.A @24c
  Retired: 18
  Executed: 24c
  Critical: 18c, 18 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 19 18 
  TopQ.A RemainingLatency 0 + 24c > CritPath 55
  Cand SU(19) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(19) renamable $w12 = FCVTZSUWDr renamable $d0, debug-location !179; is.c:293:9
  Ready @24c
  TopQ.A TopLatency SU(19) 21c
  *** Max MOps 1 at cycle 24
Cycle: 25 TopQ.A
TopQ.A @25c
  Retired: 19
  Executed: 25c
  Critical: 19c, 19 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 18 20 
  TopQ.A RemainingLatency 0 + 25c > CritPath 55
  Cand SU(18) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(18) STRDui renamable $d0, $sp, 9, debug-location !178 :: (store 8 into %ir.T1); is.c:292:8
  Ready @25c
  *** Max MOps 1 at cycle 25
Cycle: 26 TopQ.A
TopQ.A @26c
  Retired: 20
  Executed: 26c
  Critical: 20c, 20 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 20 21 
  TopQ.A RemainingLatency 0 + 26c > CritPath 55
  Cand SU(20) ORDER                              
  Cand SU(21) TOP-PATH                  33 cycles 
Pick Top TOP-PATH  
Scheduling SU(21) renamable $d0 = SCVTFUWDri renamable $w12, debug-location !181; is.c:294:10
  Ready @26c
  TopQ.A TopLatency SU(21) 22c
  TopQ.A BotLatency SU(21) 33c
  *** Max MOps 1 at cycle 26
Cycle: 27 TopQ.A
TopQ.A @27c
  Retired: 21
  Executed: 27c
  Critical: 21c, 21 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 20 24 22 
  TopQ.A RemainingLatency 0 + 27c > CritPath 55
  Cand SU(20) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(20) STRWui renamable $w12, $sp, 0, debug-location !180 :: (store 4 into %ir.j); is.c:293:7
  Ready @27c
  *** Max MOps 1 at cycle 27
Cycle: 28 TopQ.A
TopQ.A @28c
  Retired: 22
  Executed: 28c
  Critical: 22c, 22 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 22 24 
  TopQ.A RemainingLatency 0 + 28c > CritPath 55
  Cand SU(22) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(22) STPDi renamable $d0, renamable $d1, $sp, 3, debug-location !173 :: (store 8 into %ir.A2), (store 8 into %ir.X1); is.c:286:8
  Ready @28c
  TopQ.A TopLatency SU(22) 23c
  TopQ.A BotLatency SU(22) 32c
  *** Max MOps 1 at cycle 28
Cycle: 29 TopQ.A
TopQ.A @29c
  Retired: 23
  Executed: 29c
  Critical: 23c, 23 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 24 23 
  TopQ.A RemainingLatency 0 + 29c > CritPath 55
  Cand SU(24) ORDER                              
  Cand SU(23) TOP-PATH                  31 cycles 
Pick Top TOP-PATH  
Scheduling SU(23) renamable $d2 = LDRDui renamable $x13, 0, debug-location !184 :: (load 8 from %ir.23); is.c:295:10
  Ready @29c
  TopQ.A TopLatency SU(23) 24c
  *** Max MOps 1 at cycle 29
Cycle: 30 TopQ.A
TopQ.A @30c
  Retired: 24
  Executed: 30c
  Critical: 24c, 24 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 24 
Pick Top ONLY1     
Scheduling SU(24) renamable $d3 = FMULDrr renamable $d3, renamable $d0, debug-location !187; is.c:295:19
  Ready @30c
  *** Max MOps 1 at cycle 30
Cycle: 31 TopQ.A
TopQ.A @31c
  Retired: 25
  Executed: 31c
  Critical: 25c, 25 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 27 
Queue TopQ.A: 25 
Pick Top ONLY1     
Scheduling SU(25) renamable $d0 = FMULDrr renamable $d1, renamable $d0, debug-location !195; is.c:296:23
  Ready @31c
  *** Max MOps 1 at cycle 31
Cycle: 32 TopQ.A
TopQ.A @32c
  Retired: 26
  Executed: 32c
  Critical: 26c, 26 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 27 
Queue TopQ.A: 26 
Pick Top ONLY1     
Scheduling SU(26) renamable $d1, renamable $d4 = LDPDi $sp, 4, debug-location !190 :: (dereferenceable load 8 from %ir.A1), (dereferenceable load 8 from %ir.A2); is.c:296:10
  Ready @32c
  TopQ.A BotLatency SU(26) 29c
  *** Max MOps 1 at cycle 32
Cycle: 33 TopQ.A
TopQ.A @33c
  Retired: 27
  Executed: 33c
  Critical: 27c, 27 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 27 
Pick Top ONLY1     
Scheduling SU(27) renamable $d2 = FSUBDrr renamable $d2, renamable $d3, debug-location !188; is.c:295:13
  Ready @33c
  TopQ.A TopLatency SU(27) 28c
  *** Max MOps 1 at cycle 33
Cycle: 34 TopQ.A
TopQ.A @34c
  Retired: 28
  Executed: 34c
  Critical: 28c, 28 MOps
  ExpectedLatency: 28c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 31 30 
Queue TopQ.A: 29 28 
  TopQ.A RemainingLatency 0 + 34c > CritPath 55
  Cand SU(29) ORDER                              
  Cand SU(28) TOP-PATH                  27 cycles 
Pick Top TOP-PATH  
Scheduling SU(28) renamable $d3 = LDRDui renamable $x11, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !198 :: (dereferenceable load 8 from @randlc.R23); is.c:298:9
  Ready @34c
  *** Max MOps 1 at cycle 34
Cycle: 35 TopQ.A
TopQ.A @35c
  Retired: 29
  Executed: 35c
  Critical: 29c, 29 MOps
  ExpectedLatency: 28c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 31 30 
Queue TopQ.A: 29 
Pick Top ONLY1     
Scheduling SU(29) STRDui renamable $d2, $sp, 2, debug-location !189 :: (store 8 into %ir.X2); is.c:295:8
  Ready @35c
  TopQ.A TopLatency SU(29) 29c
  *** Max MOps 1 at cycle 35
Cycle: 36 TopQ.A
TopQ.A @36c
  Retired: 30
  Executed: 36c
  Critical: 30c, 30 MOps
  ExpectedLatency: 29c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 31 30 
  TopQ.A RemainingLatency 0 + 36c > CritPath 55
  Cand SU(31) ORDER                              
  Cand SU(30) TOP-PATH                  25 cycles 
Pick Top TOP-PATH  
Scheduling SU(30) renamable $d4 = FMULDrr renamable $d4, renamable $d2, debug-location !192; is.c:296:13
  Ready @36c
  *** Max MOps 1 at cycle 36
Cycle: 37 TopQ.A
TopQ.A @37c
  Retired: 31
  Executed: 37c
  Critical: 31c, 31 MOps
  ExpectedLatency: 29c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 31 32 
  TopQ.A RemainingLatency 0 + 37c > CritPath 55
  Cand SU(31) ORDER                              
Pick Top ORDER     
Scheduling SU(31) renamable $d1 = FMULDrr renamable $d1, renamable $d2, debug-location !215; is.c:301:23
  Ready @37c
  *** Max MOps 1 at cycle 37
Cycle: 38 TopQ.A
TopQ.A @38c
  Retired: 32
  Executed: 38c
  Critical: 32c, 32 MOps
  ExpectedLatency: 29c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 32 33 
  TopQ.A RemainingLatency 0 + 38c > CritPath 55
  Cand SU(32) ORDER                              
Pick Top ORDER     
Scheduling SU(32) renamable $d0 = FADDDrr renamable $d4, renamable $d0, debug-location !196; is.c:296:18
  Ready @38c
  TopQ.A TopLatency SU(32) 30c
  TopQ.A BotLatency SU(32) 24c
  *** Max MOps 1 at cycle 38
Cycle: 39 TopQ.A
TopQ.A @39c
  Retired: 33
  Executed: 39c
  Critical: 33c, 33 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 33 34 
  TopQ.A RemainingLatency 0 + 39c > CritPath 55
  Cand SU(33) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(33) renamable $d2 = LDRDui renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !205 :: (dereferenceable load 8 from @randlc.T23); is.c:300:14
  Ready @39c
  TopQ.A BotLatency SU(33) 24c
  *** Max MOps 1 at cycle 39
Cycle: 40 TopQ.A
TopQ.A @40c
  Retired: 34
  Executed: 40c
  Critical: 34c, 34 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 
Pick Top ONLY1     
Scheduling SU(34) renamable $d3 = FMULDrr renamable $d3, renamable $d0, debug-location !200; is.c:298:13
  Ready @40c
  TopQ.A TopLatency SU(34) 32c
  *** Max MOps 1 at cycle 40
Cycle: 41 TopQ.A
TopQ.A @41c
  Retired: 35
  Executed: 41c
  Critical: 35c, 35 MOps
  ExpectedLatency: 32c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 35 
Pick Top ONLY1     
Scheduling SU(35) renamable $w11 = FCVTZSUWDr renamable $d3, debug-location !198; is.c:298:9
  Ready @41c
  TopQ.A TopLatency SU(35) 33c
  *** Max MOps 1 at cycle 41
Cycle: 42 TopQ.A
TopQ.A @42c
  Retired: 36
  Executed: 42c
  Critical: 36c, 36 MOps
  ExpectedLatency: 33c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 46 36 
  TopQ.A RemainingLatency 0 + 42c > CritPath 55
  Cand SU(46) ORDER                              
  Cand SU(36) TOP-PATH                  21 cycles 
Pick Top TOP-PATH  
Scheduling SU(36) renamable $d3 = SCVTFUWDri renamable $w11, debug-location !202; is.c:299:10
  Ready @42c
  TopQ.A TopLatency SU(36) 34c
  *** Max MOps 1 at cycle 42
Cycle: 43 TopQ.A
TopQ.A @43c
  Retired: 37
  Executed: 43c
  Critical: 37c, 37 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 46 38 37 
  TopQ.A RemainingLatency 0 + 43c > CritPath 55
  Cand SU(46) ORDER                              
  Cand SU(38) TOP-PATH                  20 cycles 
  Cand SU(37) ORDER                              
Pick Top ORDER     
Scheduling SU(37) STPDi renamable $d3, renamable $d0, $sp, 8, debug-location !203 :: (store 8 into %ir.T2), (store 8 into %ir.T1); is.c:299:8
  Ready @43c
  TopQ.A TopLatency SU(37) 35c
  *** Max MOps 1 at cycle 43
Cycle: 44 TopQ.A
TopQ.A @44c
  Retired: 38
  Executed: 44c
  Critical: 38c, 38 MOps
  ExpectedLatency: 35c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 46 38 
  TopQ.A RemainingLatency 0 + 44c > CritPath 55
  Cand SU(46) ORDER                              
  Cand SU(38) TOP-PATH                  20 cycles 
Pick Top TOP-PATH  
Scheduling SU(38) renamable $d2 = FMULDrr renamable $d2, renamable $d3, debug-location !207; is.c:300:18
  Ready @44c
  TopQ.A BotLatency SU(38) 20c
  *** Max MOps 1 at cycle 44
Cycle: 45 TopQ.A
TopQ.A @45c
  Retired: 39
  Executed: 45c
  Critical: 39c, 39 MOps
  ExpectedLatency: 35c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 46 40 39 
  TopQ.A RemainingLatency 0 + 45c > CritPath 55
  Cand SU(46) ORDER                              
  Cand SU(40) TOP-PATH                  18 cycles 
  Cand SU(39) TOP-PATH                  20 cycles 
Pick Top TOP-PATH  
Scheduling SU(39) renamable $d3 = LDRDui renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !210 :: (dereferenceable load 8 from @randlc.T23); is.c:301:10
  Ready @45c
  TopQ.A BotLatency SU(39) 20c
  *** Max MOps 1 at cycle 45
Cycle: 46 TopQ.A
TopQ.A @46c
  Retired: 40
  Executed: 46c
  Critical: 40c, 40 MOps
  ExpectedLatency: 35c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 46 40 
  TopQ.A RemainingLatency 0 + 46c > CritPath 55
  Cand SU(46) ORDER                              
  Cand SU(40) TOP-PATH                  18 cycles 
Pick Top TOP-PATH  
Scheduling SU(40) renamable $d0 = FSUBDrr renamable $d0, renamable $d2, debug-location !208; is.c:300:12
  Ready @46c
  TopQ.A TopLatency SU(40) 36c
  *** Max MOps 1 at cycle 46
Cycle: 47 TopQ.A
TopQ.A @47c
  Retired: 41
  Executed: 47c
  Critical: 41c, 41 MOps
  ExpectedLatency: 36c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 46 42 41 
  TopQ.A RemainingLatency 0 + 47c > CritPath 55
  Cand SU(46) ORDER                              
  Cand SU(42) TOP-PATH                  16 cycles 
  Cand SU(41) TOP-PATH                  18 cycles 
Pick Top TOP-PATH  
Scheduling SU(41) renamable $d2 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !218 :: (dereferenceable load 8 from @randlc.R46); is.c:302:9
  Ready @47c
  *** Max MOps 1 at cycle 47
Cycle: 48 TopQ.A
TopQ.A @48c
  Retired: 42
  Executed: 48c
  Critical: 42c, 42 MOps
  ExpectedLatency: 36c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 46 42 
  TopQ.A RemainingLatency 0 + 48c > CritPath 55
  Cand SU(46) ORDER                              
  Cand SU(42) TOP-PATH                  16 cycles 
Pick Top TOP-PATH  
Scheduling SU(42) STRDui renamable $d0, $sp, 1, debug-location !209 :: (store 8 into %ir.Z); is.c:300:7
  Ready @48c
  TopQ.A TopLatency SU(42) 37c
  *** Max MOps 1 at cycle 48
Cycle: 49 TopQ.A
TopQ.A @49c
  Retired: 43
  Executed: 49c
  Critical: 43c, 43 MOps
  ExpectedLatency: 37c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 46 43 
  TopQ.A RemainingLatency 0 + 49c > CritPath 55
  Cand SU(46) ORDER                              
  Cand SU(43) TOP-PATH                  16 cycles 
Pick Top TOP-PATH  
Scheduling SU(43) renamable $d0 = FMULDrr renamable $d3, renamable $d0, debug-location !212; is.c:301:14
  Ready @49c
  TopQ.A TopLatency SU(43) 39c
  *** Max MOps 1 at cycle 49
Cycle: 50 TopQ.A
TopQ.A @50c
  Retired: 44
  Executed: 50c
  Critical: 44c, 44 MOps
  ExpectedLatency: 39c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 46 47 44 
  TopQ.A RemainingLatency 0 + 50c > CritPath 55
  Cand SU(46) ORDER                              
  Cand SU(47) TOP-PATH                  15 cycles 
  Cand SU(44) ORDER                              
Pick Top ORDER     
Scheduling SU(44) renamable $d3 = LDRDui renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !225 :: (dereferenceable load 8 from @randlc.T46); is.c:304:15
  Ready @50c
  *** Max MOps 1 at cycle 50
Cycle: 51 TopQ.A
TopQ.A @51c
  Retired: 45
  Executed: 51c
  Critical: 45c, 45 MOps
  ExpectedLatency: 39c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 46 47 45 
  TopQ.A RemainingLatency 0 + 51c > CritPath 55
  Cand SU(46) ORDER                              
  Cand SU(47) TOP-PATH                  15 cycles 
Pick Top TOP-PATH  
Scheduling SU(47) renamable $d0 = FADDDrr renamable $d0, renamable $d1, debug-location !216; is.c:301:18
  Ready @51c
  TopQ.A TopLatency SU(47) 40c
  TopQ.A BotLatency SU(47) 15c
  *** Max MOps 1 at cycle 51
Cycle: 52 TopQ.A
TopQ.A @52c
  Retired: 46
  Executed: 52c
  Critical: 46c, 46 MOps
  ExpectedLatency: 40c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 46 45 48 
  TopQ.A RemainingLatency 0 + 52c > CritPath 55
  Cand SU(46) ORDER                              
  Cand SU(45) TOP-PATH                  13 cycles 
  Cand SU(48) TOP-PATH                  14 cycles 
Pick Top TOP-PATH  
Scheduling SU(48) renamable $d1 = FMULDrr renamable $d2, renamable $d0, debug-location !220; is.c:302:13
  Ready @52c
  TopQ.A TopLatency SU(48) 41c
  *** Max MOps 1 at cycle 52
Cycle: 53 TopQ.A
TopQ.A @53c
  Retired: 47
  Executed: 53c
  Critical: 47c, 47 MOps
  ExpectedLatency: 41c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 46 45 49 
  TopQ.A RemainingLatency 0 + 53c > CritPath 55
  Cand SU(46) ORDER                              
  Cand SU(45) TOP-PATH                  13 cycles 
Pick Top TOP-PATH  
Scheduling SU(45) renamable $x9 = LDRXui $sp, 11, debug-location !229 :: (dereferenceable load 8 from %ir.X.addr); is.c:304:6
  Ready @53c
  *** Max MOps 1 at cycle 53
Cycle: 54 TopQ.A
TopQ.A @54c
  Retired: 48
  Executed: 54c
  Critical: 48c, 48 MOps
  ExpectedLatency: 41c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 46 49 
  TopQ.A RemainingLatency 0 + 54c > CritPath 55
  Cand SU(46) ORDER                              
  Cand SU(49) TOP-PATH                  13 cycles 
Pick Top TOP-PATH  
Scheduling SU(49) renamable $w10 = FCVTZSUWDr renamable $d1, debug-location !218; is.c:302:9
  Ready @54c
  TopQ.A TopLatency SU(49) 42c
  TopQ.A BotLatency SU(49) 13c
  *** Max MOps 1 at cycle 54
Cycle: 55 TopQ.A
TopQ.A @55c
  Retired: 49
  Executed: 55c
  Critical: 49c, 49 MOps
  ExpectedLatency: 42c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 46 51 
  TopQ.A RemainingLatency 0 + 55c > CritPath 55
  Cand SU(46) ORDER                              
  Cand SU(51) TOP-PATH                  12 cycles 
Pick Top TOP-PATH  
Scheduling SU(51) renamable $d1 = SCVTFUWDri renamable $w10, debug-location !222; is.c:303:10
  Ready @55c
  TopQ.A TopLatency SU(51) 43c
  *** Max MOps 1 at cycle 55
Cycle: 56 TopQ.A
TopQ.A @56c
  Retired: 50
  Executed: 56c
  Critical: 50c, 50 MOps
  ExpectedLatency: 43c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 46 52 
  TopQ.A RemainingLatency 0 + 56c > CritPath 55
  Cand SU(46) ORDER                              
  Cand SU(52) TOP-PATH                  11 cycles 
Pick Top TOP-PATH  
Scheduling SU(52) STPDi renamable $d1, renamable $d0, $sp, 6, debug-location !217 :: (store 8 into %ir.T3), (store 8 into %ir.T4); is.c:301:8
  Ready @56c
  TopQ.A TopLatency SU(52) 44c
  *** Max MOps 1 at cycle 56
Cycle: 57 TopQ.A
TopQ.A @57c
  Retired: 51
  Executed: 57c
  Critical: 51c, 51 MOps
  ExpectedLatency: 44c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 46 53 
  TopQ.A RemainingLatency 0 + 57c > CritPath 55
  Cand SU(46) ORDER                              
  Cand SU(53) TOP-PATH                  11 cycles 
Pick Top TOP-PATH  
Scheduling SU(53) renamable $d1 = FMULDrr renamable $d3, renamable $d1, debug-location !227; is.c:304:19
  Ready @57c
  TopQ.A BotLatency SU(53) 11c
  *** Max MOps 1 at cycle 57
Cycle: 58 TopQ.A
TopQ.A @58c
  Retired: 52
  Executed: 58c
  Critical: 52c, 52 MOps
  ExpectedLatency: 44c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 46 54 
  TopQ.A RemainingLatency 0 + 58c > CritPath 55
  Cand SU(46) ORDER                              
  Cand SU(54) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(54) renamable $d0 = FSUBDrr renamable $d0, renamable $d1, debug-location !228; is.c:304:13
  Ready @58c
  TopQ.A TopLatency SU(54) 45c
  *** Max MOps 1 at cycle 58
Cycle: 59 TopQ.A
TopQ.A @59c
  Retired: 53
  Executed: 59c
  Critical: 53c, 53 MOps
  ExpectedLatency: 45c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 46 
Pick Top ONLY1     
Scheduling SU(46) STRWui renamable $w11, $sp, 0, debug-location !201 :: (store 4 into %ir.j); is.c:298:7
  Ready @59c
  *** Max MOps 1 at cycle 59
Cycle: 60 TopQ.A
TopQ.A @60c
  Retired: 54
  Executed: 60c
  Critical: 54c, 54 MOps
  ExpectedLatency: 45c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 50 
Pick Top ONLY1     
Scheduling SU(50) STRWui renamable $w10, $sp, 0, debug-location !221 :: (store 4 into %ir.j); is.c:302:7
  Ready @60c
  TopQ.A BotLatency SU(50) 9c
  *** Max MOps 1 at cycle 60
Cycle: 61 TopQ.A
TopQ.A @61c
  Retired: 55
  Executed: 61c
  Critical: 55c, 55 MOps
  ExpectedLatency: 45c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 55 
Pick Top ONLY1     
Scheduling SU(55) STRDui renamable $d0, renamable $x9, 0, debug-location !230 :: (store 8 into %ir.47); is.c:304:8
  Ready @61c
  TopQ.A TopLatency SU(55) 46c
  TopQ.A BotLatency SU(55) 9c
  *** Max MOps 1 at cycle 61
Cycle: 62 TopQ.A
TopQ.A @62c
  Retired: 56
  Executed: 62c
  Critical: 56c, 56 MOps
  ExpectedLatency: 46c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 57 56 
  TopQ.A RemainingLatency 0 + 62c > CritPath 55
  Cand SU(57) ORDER                              
  Cand SU(56) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(56) renamable $x9 = LDRXui $sp, 11, debug-location !232 :: (dereferenceable load 8 from %ir.X.addr); is.c:305:20
  Ready @62c
  TopQ.A TopLatency SU(56) 47c
  *** Max MOps 1 at cycle 62
Cycle: 63 TopQ.A
TopQ.A @63c
  Retired: 57
  Executed: 63c
  Critical: 57c, 57 MOps
  ExpectedLatency: 47c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 58 
Queue TopQ.A: 57 
Pick Top ONLY1     
Scheduling SU(57) renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !231 :: (dereferenceable load 8 from @randlc.R46); is.c:305:13
  Ready @63c
  *** Max MOps 1 at cycle 63
Cycle: 64 TopQ.A
TopQ.A @64c
  Retired: 58
  Executed: 64c
  Critical: 58c, 58 MOps
  ExpectedLatency: 47c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 66 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 58 
Pick Top ONLY1     
Scheduling SU(58) renamable $d1 = LDRDui renamable $x9, 0, debug-location !233 :: (load 8 from %ir.49); is.c:305:19
  Ready @66c
  TopQ.A TopLatency SU(58) 51c
  *** Max MOps 1 at cycle 66
Cycle: 67 TopQ.A
TopQ.A @67c
  Retired: 59
  Executed: 67c
  Critical: 59c, 59 MOps
  ExpectedLatency: 51c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 70 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 59 
Pick Top ONLY1     
Scheduling SU(59) renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !234; is.c:305:17
  Ready @70c
  TopQ.A TopLatency SU(59) 55c
  *** Max MOps 1 at cycle 70
Cycle: 71 TopQ.A
TopQ.A @71c
  Retired: 60
  Executed: 71c
  Critical: 60c, 60 MOps
  ExpectedLatency: 55c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   renamable $x12 = LDRXui $sp, 10, debug-location !159 :: (dereferenceable load 8 from %ir.A.addr); is.c:283:17
SU(1):   renamable $d0 = LDRDui renamable $x11, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !158 :: (dereferenceable load 8 from @randlc.R23); is.c:283:10
SU(3):   renamable $d2 = LDRDui renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !169 :: (dereferenceable load 8 from @randlc.T23); is.c:286:15
SU(2):   renamable $d1 = LDRDui renamable $x12, 0, debug-location !160 :: (load 8 from %ir.10); is.c:283:16
SU(4):   renamable $d1 = FMULDrr renamable $d0, renamable $d1, debug-location !161; is.c:283:14
SU(6):   renamable $w13 = FCVTZSUWDr renamable $d1, debug-location !163; is.c:284:9
SU(5):   STRDui renamable $d1, $sp, 9, debug-location !162 :: (store 8 into %ir.T1); is.c:283:8
SU(8):   renamable $d1 = SCVTFUWDri renamable $w13, debug-location !165; is.c:285:10
SU(7):   STRWui renamable $w13, $sp, 0, debug-location !164 :: (store 4 into %ir.j); is.c:284:7
SU(9):   STRDui renamable $d1, $sp, 5, debug-location !166 :: (store 8 into %ir.A1); is.c:285:8
SU(10):   renamable $d3 = LDRDui renamable $x12, 0, debug-location !168 :: (load 8 from %ir.14); is.c:286:10
SU(11):   renamable $x12 = LDRXui $sp, 11, debug-location !175 :: (dereferenceable load 8 from %ir.X.addr); is.c:292:17
SU(13):   renamable $d1 = FMULDrr renamable $d2, renamable $d1, debug-location !171; is.c:286:19
SU(12):   renamable $x13 = LDRXui $sp, 11, debug-location !183 :: (dereferenceable load 8 from %ir.X.addr); is.c:295:11
SU(14):   renamable $d1 = FSUBDrr renamable $d3, renamable $d1, debug-location !172; is.c:286:13
SU(15):   renamable $d2 = LDRDui renamable $x12, 0, debug-location !176 :: (load 8 from %ir.19); is.c:292:16
SU(16):   renamable $d3 = LDRDui renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !185 :: (dereferenceable load 8 from @randlc.T23); is.c:295:15
SU(17):   renamable $d0 = FMULDrr renamable $d0, renamable $d2, debug-location !177; is.c:292:14
SU(19):   renamable $w12 = FCVTZSUWDr renamable $d0, debug-location !179; is.c:293:9
SU(18):   STRDui renamable $d0, $sp, 9, debug-location !178 :: (store 8 into %ir.T1); is.c:292:8
SU(21):   renamable $d0 = SCVTFUWDri renamable $w12, debug-location !181; is.c:294:10
SU(20):   STRWui renamable $w12, $sp, 0, debug-location !180 :: (store 4 into %ir.j); is.c:293:7
SU(22):   STPDi renamable $d0, renamable $d1, $sp, 3, debug-location !173 :: (store 8 into %ir.A2), (store 8 into %ir.X1); is.c:286:8
SU(23):   renamable $d2 = LDRDui renamable $x13, 0, debug-location !184 :: (load 8 from %ir.23); is.c:295:10
SU(24):   renamable $d3 = FMULDrr renamable $d3, renamable $d0, debug-location !187; is.c:295:19
SU(25):   renamable $d0 = FMULDrr renamable $d1, renamable $d0, debug-location !195; is.c:296:23
SU(26):   renamable $d1, renamable $d4 = LDPDi $sp, 4, debug-location !190 :: (dereferenceable load 8 from %ir.A1), (dereferenceable load 8 from %ir.A2); is.c:296:10
SU(27):   renamable $d2 = FSUBDrr renamable $d2, renamable $d3, debug-location !188; is.c:295:13
SU(28):   renamable $d3 = LDRDui renamable $x11, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R23, debug-location !198 :: (dereferenceable load 8 from @randlc.R23); is.c:298:9
SU(29):   STRDui renamable $d2, $sp, 2, debug-location !189 :: (store 8 into %ir.X2); is.c:295:8
SU(30):   renamable $d4 = FMULDrr renamable $d4, renamable $d2, debug-location !192; is.c:296:13
SU(31):   renamable $d1 = FMULDrr renamable $d1, renamable $d2, debug-location !215; is.c:301:23
SU(32):   renamable $d0 = FADDDrr renamable $d4, renamable $d0, debug-location !196; is.c:296:18
SU(33):   renamable $d2 = LDRDui renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !205 :: (dereferenceable load 8 from @randlc.T23); is.c:300:14
SU(34):   renamable $d3 = FMULDrr renamable $d3, renamable $d0, debug-location !200; is.c:298:13
SU(35):   renamable $w11 = FCVTZSUWDr renamable $d3, debug-location !198; is.c:298:9
SU(36):   renamable $d3 = SCVTFUWDri renamable $w11, debug-location !202; is.c:299:10
SU(37):   STPDi renamable $d3, renamable $d0, $sp, 8, debug-location !203 :: (store 8 into %ir.T2), (store 8 into %ir.T1); is.c:299:8
SU(38):   renamable $d2 = FMULDrr renamable $d2, renamable $d3, debug-location !207; is.c:300:18
SU(39):   renamable $d3 = LDRDui renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T23, debug-location !210 :: (dereferenceable load 8 from @randlc.T23); is.c:301:10
SU(40):   renamable $d0 = FSUBDrr renamable $d0, renamable $d2, debug-location !208; is.c:300:12
SU(41):   renamable $d2 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !218 :: (dereferenceable load 8 from @randlc.R46); is.c:302:9
SU(42):   STRDui renamable $d0, $sp, 1, debug-location !209 :: (store 8 into %ir.Z); is.c:300:7
SU(43):   renamable $d0 = FMULDrr renamable $d3, renamable $d0, debug-location !212; is.c:301:14
SU(44):   renamable $d3 = LDRDui renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @randlc.T46, debug-location !225 :: (dereferenceable load 8 from @randlc.T46); is.c:304:15
SU(47):   renamable $d0 = FADDDrr renamable $d0, renamable $d1, debug-location !216; is.c:301:18
SU(48):   renamable $d1 = FMULDrr renamable $d2, renamable $d0, debug-location !220; is.c:302:13
SU(45):   renamable $x9 = LDRXui $sp, 11, debug-location !229 :: (dereferenceable load 8 from %ir.X.addr); is.c:304:6
SU(49):   renamable $w10 = FCVTZSUWDr renamable $d1, debug-location !218; is.c:302:9
SU(51):   renamable $d1 = SCVTFUWDri renamable $w10, debug-location !222; is.c:303:10
SU(52):   STPDi renamable $d1, renamable $d0, $sp, 6, debug-location !217 :: (store 8 into %ir.T3), (store 8 into %ir.T4); is.c:301:8
SU(53):   renamable $d1 = FMULDrr renamable $d3, renamable $d1, debug-location !227; is.c:304:19
SU(54):   renamable $d0 = FSUBDrr renamable $d0, renamable $d1, debug-location !228; is.c:304:13
SU(46):   STRWui renamable $w11, $sp, 0, debug-location !201 :: (store 4 into %ir.j); is.c:298:7
SU(50):   STRWui renamable $w10, $sp, 0, debug-location !221 :: (store 4 into %ir.j); is.c:302:7
SU(55):   STRDui renamable $d0, renamable $x9, 0, debug-location !230 :: (store 8 into %ir.47); is.c:304:8
SU(56):   renamable $x9 = LDRXui $sp, 11, debug-location !232 :: (dereferenceable load 8 from %ir.X.addr); is.c:305:20
SU(57):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @randlc.R46, debug-location !231 :: (dereferenceable load 8 from @randlc.R46); is.c:305:13
SU(58):   renamable $d1 = LDRDui renamable $x9, 0, debug-location !233 :: (load 8 from %ir.49); is.c:305:19
SU(59):   renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !234; is.c:305:17

Fixup kills for %bb.8
Before MISched:
# Machine code for function create_seq: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP]
  fi#1: size=8, align=8, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
Function Live Ins: $d0 in %0, $d1 in %1

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $d0, $d1
  %1:fpr64 = COPY $d1
  %0:fpr64 = COPY $d0
  STRDui %0:fpr64, %stack.0.seed.addr, 0 :: (store 8 into %ir.seed.addr)
  STRDui %1:fpr64, %stack.1.a.addr, 0 :: (store 8 into %ir.a.addr)
  %2:gpr32 = MOVi32imm 524288
  STRWui %2:gpr32, %stack.4.k, 0, debug-location !249 :: (store 4 into %ir.k); is.c:317:7
  STRWui $wzr, %stack.3.i, 0, debug-location !250 :: (store 4 into %ir.i); is.c:319:12
  %5:gpr32 = MOVi32imm 33554431
  %28:gpr64common = MOVaddr target-flags(aarch64-page) @key_array, target-flags(aarch64-pageoff, aarch64-nc) @key_array

bb.1.for.cond:
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %4:gpr32 = LDRWui %stack.3.i, 0, debug-location !253 :: (dereferenceable load 4 from %ir.i); is.c:319:17
  dead $wzr = SUBSWrr %4:gpr32, %5:gpr32, implicit-def $nzcv, debug-location !256; is.c:319:5
  Bcc 12, %bb.3, implicit killed $nzcv, debug-location !256; is.c:319:5
  B %bb.2, debug-location !256; is.c:319:5

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !257; is.c:320:13
  $x0 = ADDXri %stack.0.seed.addr, 0, 0, debug-location !257; is.c:320:13
  $x1 = ADDXri %stack.1.a.addr, 0, 0, debug-location !257; is.c:320:13
  BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !257; is.c:320:13
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !257; is.c:320:13
  %9:fpr64 = COPY $d0, debug-location !257; is.c:320:13
  STRDui %9:fpr64, %stack.2.x, 0, debug-location !259 :: (store 8 into %ir.x); is.c:320:11
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !260; is.c:321:14
  $x0 = ADDXri %stack.0.seed.addr, 0, 0, debug-location !260; is.c:321:14
  $x1 = ADDXri %stack.1.a.addr, 0, 0, debug-location !260; is.c:321:14
  BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !260; is.c:321:14
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !260; is.c:321:14
  %10:fpr64 = COPY $d0, debug-location !260; is.c:321:14
  %11:fpr64 = LDRDui %stack.2.x, 0, debug-location !261 :: (dereferenceable load 8 from %ir.x); is.c:321:11
  %12:fpr64 = FADDDrr %11:fpr64, %10:fpr64, debug-location !261; is.c:321:11
  STRDui %12:fpr64, %stack.2.x, 0, debug-location !261 :: (store 8 into %ir.x); is.c:321:11
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !262; is.c:322:14
  $x0 = ADDXri %stack.0.seed.addr, 0, 0, debug-location !262; is.c:322:14
  $x1 = ADDXri %stack.1.a.addr, 0, 0, debug-location !262; is.c:322:14
  BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !262; is.c:322:14
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !262; is.c:322:14
  %13:fpr64 = COPY $d0, debug-location !262; is.c:322:14
  %14:fpr64 = LDRDui %stack.2.x, 0, debug-location !263 :: (dereferenceable load 8 from %ir.x); is.c:322:11
  %15:fpr64 = FADDDrr %14:fpr64, %13:fpr64, debug-location !263; is.c:322:11
  STRDui %15:fpr64, %stack.2.x, 0, debug-location !263 :: (store 8 into %ir.x); is.c:322:11
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !264; is.c:323:14
  $x0 = ADDXri %stack.0.seed.addr, 0, 0, debug-location !264; is.c:323:14
  $x1 = ADDXri %stack.1.a.addr, 0, 0, debug-location !264; is.c:323:14
  BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !264; is.c:323:14
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !264; is.c:323:14
  %16:fpr64 = COPY $d0, debug-location !264; is.c:323:14
  %17:fpr64 = LDRDui %stack.2.x, 0, debug-location !265 :: (dereferenceable load 8 from %ir.x); is.c:323:11
  %18:fpr64 = FADDDrr %17:fpr64, %16:fpr64, debug-location !265; is.c:323:11
  STRDui %18:fpr64, %stack.2.x, 0, debug-location !265 :: (store 8 into %ir.x); is.c:323:11
  undef %20.ssub:fpr64 = LDRSui %stack.4.k, 0, debug-location !266 :: (dereferenceable load 4 from %ir.k); is.c:325:24
  %22:fpr128 = SSHLLv2i32_shift %20:fpr64, 0, debug-location !266; is.c:325:24
  %24:fpr64 = SCVTFv1i64 %22.dsub:fpr128, debug-location !266; is.c:325:24
  %25:fpr64 = FMULDrr %24:fpr64, %18:fpr64, debug-location !268; is.c:325:26
  %26:gpr32 = FCVTZSUWDr %25:fpr64, debug-location !266; is.c:325:24
  %27:gpr64 = LDRSWui %stack.3.i, 0, debug-location !269 :: (dereferenceable load 4 from %ir.i); is.c:325:19
  STRWroX %26:gpr32, %28:gpr64common, %27:gpr64, 0, 1, debug-location !271 :: (store 4 into %ir.arrayidx); is.c:325:22
  %29:gpr32common = LDRWui %stack.3.i, 0, debug-location !272 :: (dereferenceable load 4 from %ir.i); is.c:319:32
  %30:gpr32common = nsw ADDWri %29:gpr32common, 1, 0, debug-location !272; is.c:319:32
  STRWui %30:gpr32common, %stack.3.i, 0, debug-location !272 :: (store 4 into %ir.i); is.c:319:32
  B %bb.1, debug-location !273; is.c:319:5

bb.3.for.end:
; predecessors: %bb.1

  RET_ReallyLR debug-location !276; is.c:327:1

# End machine code for function create_seq.

********** MI Scheduling **********
create_seq:%bb.0 entry
  From: %1:fpr64 = COPY $d1
    To: End RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %1:fpr64 = COPY $d1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(3): Data Latency=0 Reg=%1
  Single Issue       : false;
SU(1):   %0:fpr64 = COPY $d0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(2): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(2):   STRDui %0:fpr64, %stack.0.seed.addr, 0 :: (store 8 into %ir.seed.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(3):   STRDui %1:fpr64, %stack.1.a.addr, 0 :: (store 8 into %ir.a.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%1
  Single Issue       : false;
SU(4):   %2:gpr32 = MOVi32imm 524288
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%2
  Single Issue       : false;
SU(5):   STRWui %2:gpr32, %stack.4.k, 0, debug-location !249 :: (store 4 into %ir.k); is.c:317:7
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%2
  Single Issue       : false;
SU(6):   STRWui $wzr, %stack.3.i, 0, debug-location !250 :: (store 4 into %ir.i); is.c:319:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(7):   %5:gpr32 = MOVi32imm 33554431
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(8):   %28:gpr64common = MOVaddr target-flags(aarch64-page) @key_array, target-flags(aarch64-pageoff, aarch64-nc) @key_array
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 7 6 5 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 6 7 8 
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %1:fpr64 = COPY $d1
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 7 6 5 3 2 
Queue TopQ.P: 
Queue TopQ.A: 8 1 4 6 7 3 
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(8) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(1) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(1) %0:fpr64 = COPY $d0
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 7 6 5 3 2 
Queue TopQ.P: 
Queue TopQ.A: 8 3 4 6 7 2 
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(8) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %28:gpr64common = MOVaddr target-flags(aarch64-page) @key_array, target-flags(aarch64-pageoff, aarch64-nc) @key_array
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 7 6 5 3 
Queue TopQ.P: 
Queue TopQ.A: 2 3 4 6 7 
BotQ.A RemLatency SU(5) 1c
  BotQ.A RemainingLatency 1 + 1c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(5) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) STRWui %2:gpr32, %stack.4.k, 0, debug-location !249 :: (store 4 into %ir.k); is.c:317:7
  Ready @1c
  BotQ.A TopLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 7 6 3 4 
Queue TopQ.P: 
Queue TopQ.A: 2 3 4 6 7 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %5:gpr32 = MOVi32imm 33554431
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 6 3 
Queue TopQ.P: 
Queue TopQ.A: 2 3 4 6 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) STRWui $wzr, %stack.3.i, 0, debug-location !250 :: (store 4 into %ir.i); is.c:319:12
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 3 
Queue TopQ.P: 
Queue TopQ.A: 2 3 4 
  BotQ.A RemainingLatency 0 + 4c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %2:gpr32 = MOVi32imm 524288
  Ready @4c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
Queue TopQ.P: 
Queue TopQ.A: 2 3 
  BotQ.A RemainingLatency 0 + 5c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) STRDui %1:fpr64, %stack.1.a.addr, 0 :: (store 8 into %ir.a.addr)
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRDui %0:fpr64, %stack.0.seed.addr, 0 :: (store 8 into %ir.seed.addr)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %1:fpr64 = COPY $d1
SU(1):   %0:fpr64 = COPY $d0
SU(2):   STRDui %0:fpr64, %stack.0.seed.addr, 0 :: (store 8 into %ir.seed.addr)
SU(3):   STRDui %1:fpr64, %stack.1.a.addr, 0 :: (store 8 into %ir.a.addr)
SU(4):   %2:gpr32 = MOVi32imm 524288
SU(6):   STRWui $wzr, %stack.3.i, 0, debug-location !250 :: (store 4 into %ir.i); is.c:319:12
SU(7):   %5:gpr32 = MOVi32imm 33554431
SU(5):   STRWui %2:gpr32, %stack.4.k, 0, debug-location !249 :: (store 4 into %ir.k); is.c:317:7
SU(8):   %28:gpr64common = MOVaddr target-flags(aarch64-page) @key_array, target-flags(aarch64-pageoff, aarch64-nc) @key_array

********** MI Scheduling **********
create_seq:%bb.1 for.cond
  From: %4:gpr32 = LDRWui %stack.3.i, 0, debug-location !253 :: (dereferenceable load 4 from %ir.i); is.c:319:17
    To: Bcc 12, %bb.3, implicit killed $nzcv, debug-location !256; is.c:319:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %4:gpr32 = LDRWui %stack.3.i, 0, debug-location !253 :: (dereferenceable load 4 from %ir.i); is.c:319:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%4
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWrr %4:gpr32, %5:gpr32, implicit-def $nzcv, debug-location !256; is.c:319:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%4
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.3, implicit killed $nzcv, debug-location !256; is.c:319:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWrr %4:gpr32, %5:gpr32, implicit-def $nzcv, debug-location !256; is.c:319:5
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %4:gpr32 = LDRWui %stack.3.i, 0, debug-location !253 :: (dereferenceable load 4 from %ir.i); is.c:319:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   %4:gpr32 = LDRWui %stack.3.i, 0, debug-location !253 :: (dereferenceable load 4 from %ir.i); is.c:319:17
SU(1):   dead $wzr = SUBSWrr %4:gpr32, %5:gpr32, implicit-def $nzcv, debug-location !256; is.c:319:5

********** MI Scheduling **********
create_seq:%bb.2 for.body
  From: %16:fpr64 = COPY $d0, debug-location !264; is.c:323:14
    To: B %bb.1, debug-location !273; is.c:319:5
 RegionInstrs: 14
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Cluster ld/st SU(9) - SU(11)
  Copy Succ SU(10)
  Copy Succ SU(13)
SU(0):   %16:fpr64 = COPY $d0, debug-location !264; is.c:323:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 3
  Successors:
    SU(2): Data Latency=0 Reg=%16
  Single Issue       : false;
SU(1):   %17:fpr64 = LDRDui %stack.2.x, 0, debug-location !265 :: (dereferenceable load 8 from %ir.x); is.c:323:11
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(2): Data Latency=4 Reg=%17
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %18:fpr64 = FADDDrr %17:fpr64, %16:fpr64, debug-location !265; is.c:323:11
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=%17
    SU(0): Data Latency=0 Reg=%16
  Successors:
    SU(7): Data Latency=1 Reg=%18
    SU(3): Data Latency=1 Reg=%18
  Single Issue       : false;
SU(3):   STRDui %18:fpr64, %stack.2.x, 0, debug-location !265 :: (store 8 into %ir.x); is.c:323:11
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%18
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   undef %20.ssub:fpr64 = LDRSui %stack.4.k, 0, debug-location !266 :: (dereferenceable load 4 from %ir.k); is.c:325:24
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(5): Data Latency=4 Reg=%20
  Single Issue       : false;
SU(5):   %22:fpr128 = SSHLLv2i32_shift %20:fpr64, 0, debug-location !266; is.c:325:24
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(4): Data Latency=4 Reg=%20
  Successors:
    SU(6): Data Latency=1 Reg=%22
  Single Issue       : false;
SU(6):   %24:fpr64 = SCVTFv1i64 %22.dsub:fpr128, debug-location !266; is.c:325:24
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(5): Data Latency=1 Reg=%22
  Successors:
    SU(7): Data Latency=1 Reg=%24
  Single Issue       : false;
SU(7):   %25:fpr64 = FMULDrr %24:fpr64, %18:fpr64, debug-location !268; is.c:325:26
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 2
  Predecessors:
    SU(6): Data Latency=1 Reg=%24
    SU(2): Data Latency=1 Reg=%18
  Successors:
    SU(8): Data Latency=1 Reg=%25
  Single Issue       : false;
SU(8):   %26:gpr32 = FCVTZSUWDr %25:fpr64, debug-location !266; is.c:325:24
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 1
  Predecessors:
    SU(7): Data Latency=1 Reg=%25
  Successors:
    SU(10): Data Latency=1 Reg=%26
  Single Issue       : false;
SU(9):   %27:gpr64 = LDRSWui %stack.3.i, 0, debug-location !269 :: (dereferenceable load 4 from %ir.i); is.c:325:19
  # preds left       : 0
  # succs left       : 2
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(10): Data Latency=4 Reg=%27
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Cluster
  Single Issue       : false;
SU(10):   STRWroX %26:gpr32, %28:gpr64common, %27:gpr64, 0, 1, debug-location !271 :: (store 4 into %ir.arrayidx); is.c:325:22
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%26
    SU(9): Data Latency=4 Reg=%27
    SU(11): Ord  Latency=0 Artificial
  Single Issue       : false;
SU(11):   %29:gpr32common = LDRWui %stack.3.i, 0, debug-location !272 :: (dereferenceable load 4 from %ir.i); is.c:319:32
  # preds left       : 0
  # succs left       : 3
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Predecessors:
    SU(9): Ord  Latency=0 Cluster
  Successors:
    SU(12): Data Latency=4 Reg=%29
    SU(13): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Artificial
  Single Issue       : false;
SU(12):   %30:gpr32common = nsw ADDWri %29:gpr32common, 1, 0, debug-location !272; is.c:319:32
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(11): Data Latency=4 Reg=%29
  Successors:
    SU(13): Data Latency=1 Reg=%30
  Single Issue       : false;
SU(13):   STRWui %30:gpr32common, %stack.3.i, 0, debug-location !272 :: (store 4 into %ir.i); is.c:319:32
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%30
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.1, debug-location !273; is.c:319:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 10 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 9 11 
Picking from Bot:
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %16:fpr64 = COPY $d0, debug-location !264; is.c:323:14
  Ready @0c
  TopQ.A BotLatency SU(0) 3c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 10 3 
Queue TopQ.P: 
Queue TopQ.A: 11 1 4 9 
Picking from Bot:
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(11) ORDER                              
  Cand SU(1) WEAK                               
Pick Bot ORDER     
Scheduling SU(13) STRWui %30:gpr32common, %stack.3.i, 0, debug-location !272 :: (store 4 into %ir.i); is.c:319:32
  Ready @0c
  BotQ.A TopLatency SU(13) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 10 12 
Queue TopQ.P: 
Queue TopQ.A: 11 1 4 9 
BotQ.A RemLatency SU(10) 8c
  BotQ.A RemainingLatency 8 + 1c > CritPath 8
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(10) BOT-PATH                  8 cycles 
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(10) STRWroX %26:gpr32, %28:gpr64common, %27:gpr64, 0, 1, debug-location !271 :: (store 4 into %ir.arrayidx); is.c:325:22
  Ready @1c
  BotQ.A TopLatency SU(10) 8c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 9 
Queue BotQ.A: 3 12 8 
Queue TopQ.P: 
Queue TopQ.A: 11 1 4 9 
BotQ.A RemLatency SU(8) 7c
  BotQ.A RemainingLatency 7 + 2c > CritPath 8
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(8) BOT-PATH                  7 cycles 
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(8) %26:gpr32 = FCVTZSUWDr %25:fpr64, debug-location !266; is.c:325:24
  Ready @2c
  BotQ.A BotLatency SU(8) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 9 
Queue BotQ.A: 3 12 7 
Queue TopQ.P: 
Queue TopQ.A: 11 1 4 9 
BotQ.A RemLatency SU(7) 6c
  BotQ.A RemainingLatency 6 + 3c > CritPath 8
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(7) BOT-PATH                  6 cycles 
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(7) %25:fpr64 = FMULDrr %24:fpr64, %18:fpr64, debug-location !268; is.c:325:26
  Ready @3c
  BotQ.A BotLatency SU(7) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 9 
Queue BotQ.A: 3 12 6 
Queue TopQ.P: 
Queue TopQ.A: 11 1 4 9 
BotQ.A RemLatency SU(3) 5c
  BotQ.A RemainingLatency 5 + 4c > CritPath 8
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %24:fpr64 = SCVTFv1i64 %22.dsub:fpr128, debug-location !266; is.c:325:24
  Ready @4c
  BotQ.A BotLatency SU(6) 3c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 12 5 9 
Queue TopQ.P: 
Queue TopQ.A: 11 1 4 9 
BotQ.A RemLatency SU(3) 5c
  BotQ.A RemainingLatency 5 + 5c > CritPath 8
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot WEAK      
Scheduling SU(3) STRDui %18:fpr64, %stack.2.x, 0, debug-location !265 :: (store 8 into %ir.x); is.c:323:11
  Ready @5c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 12 5 2 
Queue TopQ.P: 
Queue TopQ.A: 11 1 4 9 
BotQ.A RemLatency SU(12) 4c
  BotQ.A RemainingLatency 4 + 6c > CritPath 8
Picking from Bot:
  Cand SU(9) ORDER                              
  Cand SU(12) WEAK                               
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot WEAK      
Scheduling SU(12) %30:gpr32common = nsw ADDWri %29:gpr32common, 1, 0, debug-location !272; is.c:319:32
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 11 
Queue BotQ.A: 9 2 5 
Queue TopQ.P: 
Queue TopQ.A: 11 1 4 9 
BotQ.A RemLatency SU(2) 4c
  BotQ.A RemainingLatency 4 + 7c > CritPath 8
Picking from Bot:
  Cand SU(9) ORDER                              
  Cand SU(2) WEAK                               
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %22:fpr128 = SSHLLv2i32_shift %20:fpr64, 0, debug-location !266; is.c:325:24
  Ready @7c
  BotQ.A TopLatency SU(5) 4c
  BotQ.A BotLatency SU(5) 4c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 11 4 
Queue BotQ.A: 9 2 
Queue TopQ.P: 
Queue TopQ.A: 11 1 4 9 
BotQ.A RemLatency SU(2) 4c
  BotQ.A RemainingLatency 4 + 8c > CritPath 8
Picking from Bot:
  Cand SU(9) ORDER                              
  Cand SU(2) WEAK                               
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot WEAK      
Scheduling SU(2) %18:fpr64 = FADDDrr %17:fpr64, %16:fpr64, debug-location !265; is.c:323:11
  Ready @8c
  BotQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 11 4 1 
Queue BotQ.A: 9 
Pick Bot ONLY1     
Scheduling SU(9) %27:gpr64 = LDRSWui %stack.3.i, 0, debug-location !269 :: (dereferenceable load 4 from %ir.i); is.c:325:19
  Ready @9c
  BotQ.A BotLatency SU(9) 5c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 4 
Queue BotQ.A: 11 
Pick Bot ONLY1     
Scheduling SU(11) %29:gpr32common = LDRWui %stack.3.i, 0, debug-location !272 :: (dereferenceable load 4 from %ir.i); is.c:319:32
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) undef %20.ssub:fpr64 = LDRSui %stack.4.k, 0, debug-location !266 :: (dereferenceable load 4 from %ir.k); is.c:325:24
  Ready @11c
  BotQ.A BotLatency SU(4) 8c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %17:fpr64 = LDRDui %stack.2.x, 0, debug-location !265 :: (dereferenceable load 8 from %ir.x); is.c:323:11
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %16:fpr64 = COPY $d0, debug-location !264; is.c:323:14
SU(1):   %17:fpr64 = LDRDui %stack.2.x, 0, debug-location !265 :: (dereferenceable load 8 from %ir.x); is.c:323:11
SU(4):   undef %20.ssub:fpr64 = LDRSui %stack.4.k, 0, debug-location !266 :: (dereferenceable load 4 from %ir.k); is.c:325:24
SU(11):   %29:gpr32common = LDRWui %stack.3.i, 0, debug-location !272 :: (dereferenceable load 4 from %ir.i); is.c:319:32
SU(9):   %27:gpr64 = LDRSWui %stack.3.i, 0, debug-location !269 :: (dereferenceable load 4 from %ir.i); is.c:325:19
SU(2):   %18:fpr64 = FADDDrr %17:fpr64, %16:fpr64, debug-location !265; is.c:323:11
SU(5):   %22:fpr128 = SSHLLv2i32_shift %20:fpr64, 0, debug-location !266; is.c:325:24
SU(12):   %30:gpr32common = nsw ADDWri %29:gpr32common, 1, 0, debug-location !272; is.c:319:32
SU(3):   STRDui %18:fpr64, %stack.2.x, 0, debug-location !265 :: (store 8 into %ir.x); is.c:323:11
SU(6):   %24:fpr64 = SCVTFv1i64 %22.dsub:fpr128, debug-location !266; is.c:325:24
SU(7):   %25:fpr64 = FMULDrr %24:fpr64, %18:fpr64, debug-location !268; is.c:325:26
SU(8):   %26:gpr32 = FCVTZSUWDr %25:fpr64, debug-location !266; is.c:325:24
SU(10):   STRWroX %26:gpr32, %28:gpr64common, %27:gpr64, 0, 1, debug-location !271 :: (store 4 into %ir.arrayidx); is.c:325:22
SU(13):   STRWui %30:gpr32common, %stack.3.i, 0, debug-location !272 :: (store 4 into %ir.i); is.c:319:32

********** MI Scheduling **********
create_seq:%bb.2 for.body
  From: $x0 = ADDXri %stack.0.seed.addr, 0, 0, debug-location !264; is.c:323:14
    To: BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !264; is.c:323:14
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = ADDXri %stack.0.seed.addr, 0, 0, debug-location !264; is.c:323:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = ADDXri %stack.1.a.addr, 0, 0, debug-location !264; is.c:323:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !264; is.c:323:14
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $x1 = ADDXri %stack.1.a.addr, 0, 0, debug-location !264; is.c:323:14
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = ADDXri %stack.0.seed.addr, 0, 0, debug-location !264; is.c:323:14
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   $x0 = ADDXri %stack.0.seed.addr, 0, 0, debug-location !264; is.c:323:14
SU(1):   $x1 = ADDXri %stack.1.a.addr, 0, 0, debug-location !264; is.c:323:14

********** MI Scheduling **********
create_seq:%bb.2 for.body
  From: %13:fpr64 = COPY $d0, debug-location !262; is.c:322:14
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !264; is.c:323:14
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %13:fpr64 = COPY $d0, debug-location !262; is.c:322:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=0 Reg=%13
  Single Issue       : false;
SU(1):   %14:fpr64 = LDRDui %stack.2.x, 0, debug-location !263 :: (dereferenceable load 8 from %ir.x); is.c:322:11
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%14
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %15:fpr64 = FADDDrr %14:fpr64, %13:fpr64, debug-location !263; is.c:322:11
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%14
    SU(0): Data Latency=0 Reg=%13
  Successors:
    SU(3): Data Latency=1 Reg=%15
  Single Issue       : false;
SU(3):   STRDui %15:fpr64, %stack.2.x, 0, debug-location !263 :: (store 8 into %ir.x); is.c:322:11
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%15
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !264; is.c:323:14
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) STRDui %15:fpr64, %stack.2.x, 0, debug-location !263 :: (store 8 into %ir.x); is.c:322:11
  Ready @0c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %15:fpr64 = FADDDrr %14:fpr64, %13:fpr64, debug-location !263; is.c:322:11
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %13:fpr64 = COPY $d0, debug-location !262; is.c:322:14
  Ready @2c
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %14:fpr64 = LDRDui %stack.2.x, 0, debug-location !263 :: (dereferenceable load 8 from %ir.x); is.c:322:11
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(1):   %14:fpr64 = LDRDui %stack.2.x, 0, debug-location !263 :: (dereferenceable load 8 from %ir.x); is.c:322:11
SU(0):   %13:fpr64 = COPY $d0, debug-location !262; is.c:322:14
SU(2):   %15:fpr64 = FADDDrr %14:fpr64, %13:fpr64, debug-location !263; is.c:322:11
SU(3):   STRDui %15:fpr64, %stack.2.x, 0, debug-location !263 :: (store 8 into %ir.x); is.c:322:11

********** MI Scheduling **********
create_seq:%bb.2 for.body
  From: $x0 = ADDXri %stack.0.seed.addr, 0, 0, debug-location !262; is.c:322:14
    To: BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !262; is.c:322:14
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = ADDXri %stack.0.seed.addr, 0, 0, debug-location !262; is.c:322:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = ADDXri %stack.1.a.addr, 0, 0, debug-location !262; is.c:322:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !262; is.c:322:14
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $x1 = ADDXri %stack.1.a.addr, 0, 0, debug-location !262; is.c:322:14
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = ADDXri %stack.0.seed.addr, 0, 0, debug-location !262; is.c:322:14
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   $x0 = ADDXri %stack.0.seed.addr, 0, 0, debug-location !262; is.c:322:14
SU(1):   $x1 = ADDXri %stack.1.a.addr, 0, 0, debug-location !262; is.c:322:14

********** MI Scheduling **********
create_seq:%bb.2 for.body
  From: %10:fpr64 = COPY $d0, debug-location !260; is.c:321:14
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !262; is.c:322:14
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %10:fpr64 = COPY $d0, debug-location !260; is.c:321:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=0 Reg=%10
  Single Issue       : false;
SU(1):   %11:fpr64 = LDRDui %stack.2.x, 0, debug-location !261 :: (dereferenceable load 8 from %ir.x); is.c:321:11
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%11
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %12:fpr64 = FADDDrr %11:fpr64, %10:fpr64, debug-location !261; is.c:321:11
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%11
    SU(0): Data Latency=0 Reg=%10
  Successors:
    SU(3): Data Latency=1 Reg=%12
  Single Issue       : false;
SU(3):   STRDui %12:fpr64, %stack.2.x, 0, debug-location !261 :: (store 8 into %ir.x); is.c:321:11
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%12
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !262; is.c:322:14
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) STRDui %12:fpr64, %stack.2.x, 0, debug-location !261 :: (store 8 into %ir.x); is.c:321:11
  Ready @0c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %12:fpr64 = FADDDrr %11:fpr64, %10:fpr64, debug-location !261; is.c:321:11
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %10:fpr64 = COPY $d0, debug-location !260; is.c:321:14
  Ready @2c
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %11:fpr64 = LDRDui %stack.2.x, 0, debug-location !261 :: (dereferenceable load 8 from %ir.x); is.c:321:11
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(1):   %11:fpr64 = LDRDui %stack.2.x, 0, debug-location !261 :: (dereferenceable load 8 from %ir.x); is.c:321:11
SU(0):   %10:fpr64 = COPY $d0, debug-location !260; is.c:321:14
SU(2):   %12:fpr64 = FADDDrr %11:fpr64, %10:fpr64, debug-location !261; is.c:321:11
SU(3):   STRDui %12:fpr64, %stack.2.x, 0, debug-location !261 :: (store 8 into %ir.x); is.c:321:11

********** MI Scheduling **********
create_seq:%bb.2 for.body
  From: $x0 = ADDXri %stack.0.seed.addr, 0, 0, debug-location !260; is.c:321:14
    To: BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !260; is.c:321:14
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = ADDXri %stack.0.seed.addr, 0, 0, debug-location !260; is.c:321:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = ADDXri %stack.1.a.addr, 0, 0, debug-location !260; is.c:321:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !260; is.c:321:14
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $x1 = ADDXri %stack.1.a.addr, 0, 0, debug-location !260; is.c:321:14
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = ADDXri %stack.0.seed.addr, 0, 0, debug-location !260; is.c:321:14
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   $x0 = ADDXri %stack.0.seed.addr, 0, 0, debug-location !260; is.c:321:14
SU(1):   $x1 = ADDXri %stack.1.a.addr, 0, 0, debug-location !260; is.c:321:14

********** MI Scheduling **********
create_seq:%bb.2 for.body
  From: %9:fpr64 = COPY $d0, debug-location !257; is.c:320:13
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !260; is.c:321:14
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %9:fpr64 = COPY $d0, debug-location !257; is.c:320:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%9
  Single Issue       : false;
SU(1):   STRDui %9:fpr64, %stack.2.x, 0, debug-location !259 :: (store 8 into %ir.x); is.c:320:11
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%9
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !260; is.c:321:14
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %9:fpr64, %stack.2.x, 0, debug-location !259 :: (store 8 into %ir.x); is.c:320:11
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %9:fpr64 = COPY $d0, debug-location !257; is.c:320:13
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %9:fpr64 = COPY $d0, debug-location !257; is.c:320:13
SU(1):   STRDui %9:fpr64, %stack.2.x, 0, debug-location !259 :: (store 8 into %ir.x); is.c:320:11

********** MI Scheduling **********
create_seq:%bb.2 for.body
  From: $x0 = ADDXri %stack.0.seed.addr, 0, 0, debug-location !257; is.c:320:13
    To: BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !257; is.c:320:13
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = ADDXri %stack.0.seed.addr, 0, 0, debug-location !257; is.c:320:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = ADDXri %stack.1.a.addr, 0, 0, debug-location !257; is.c:320:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !257; is.c:320:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $x1 = ADDXri %stack.1.a.addr, 0, 0, debug-location !257; is.c:320:13
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = ADDXri %stack.0.seed.addr, 0, 0, debug-location !257; is.c:320:13
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   $x0 = ADDXri %stack.0.seed.addr, 0, 0, debug-location !257; is.c:320:13
SU(1):   $x1 = ADDXri %stack.1.a.addr, 0, 0, debug-location !257; is.c:320:13

********** INTERVALS **********
B0 [0B,32r:0)[352r,384r:4)[464r,520r:3)[608r,664r:2)[752r,784r:1)  0@0B-phi 1@752r 2@608r 3@464r 4@352r
B1 [0B,16r:0)  0@0B-phi
%0 [32r,48r:0)  0@32r weight:0.000000e+00
%1 [16r,64r:0)  0@16r weight:0.000000e+00
%2 [80r,152r:0)  0@80r weight:0.000000e+00
%4 [224r,240r:0)  0@224r weight:0.000000e+00
%5 [144r,1088B:0)  0@144r weight:0.000000e+00
%9 [384r,400r:0)  0@384r weight:0.000000e+00
%10 [520r,528r:0)  0@520r weight:0.000000e+00
%11 [512r,528r:0)  0@512r weight:0.000000e+00
%12 [528r,544r:0)  0@528r weight:0.000000e+00
%13 [664r,672r:0)  0@664r weight:0.000000e+00
%14 [656r,672r:0)  0@656r weight:0.000000e+00
%15 [672r,688r:0)  0@672r weight:0.000000e+00
%16 [784r,1008r:0)  0@784r weight:0.000000e+00
%17 [800r,1008r:0)  0@800r weight:0.000000e+00
%18 [1008r,1048r:0)  0@1008r weight:0.000000e+00
%20 [848r,1016r:0)  0@848r weight:0.000000e+00
%22 [1016r,1040r:0)  0@1016r weight:0.000000e+00
%24 [1040r,1048r:0)  0@1040r weight:0.000000e+00
%25 [1048r,1056r:0)  0@1048r weight:0.000000e+00
%26 [1056r,1064r:0)  0@1056r weight:0.000000e+00
%27 [1000r,1064r:0)  0@1000r weight:0.000000e+00
%28 [192r,1088B:0)  0@192r weight:0.000000e+00
%29 [992r,1024r:0)  0@992r weight:0.000000e+00
%30 [1024r,1072r:0)  0@1024r weight:0.000000e+00
RegMasks: 352r 464r 608r 752r
********** MACHINEINSTRS **********
# Machine code for function create_seq: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP]
  fi#1: size=8, align=8, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
Function Live Ins: $d0 in %0, $d1 in %1

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $d0, $d1
16B	  %1:fpr64 = COPY $d1
32B	  %0:fpr64 = COPY $d0
48B	  STRDui %0:fpr64, %stack.0.seed.addr, 0 :: (store 8 into %ir.seed.addr)
64B	  STRDui %1:fpr64, %stack.1.a.addr, 0 :: (store 8 into %ir.a.addr)
80B	  %2:gpr32 = MOVi32imm 524288
128B	  STRWui $wzr, %stack.3.i, 0, debug-location !250 :: (store 4 into %ir.i); is.c:319:12
144B	  %5:gpr32 = MOVi32imm 33554431
152B	  STRWui %2:gpr32, %stack.4.k, 0, debug-location !249 :: (store 4 into %ir.k); is.c:317:7
192B	  %28:gpr64common = MOVaddr target-flags(aarch64-page) @key_array, target-flags(aarch64-pageoff, aarch64-nc) @key_array

208B	bb.1.for.cond:
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

224B	  %4:gpr32 = LDRWui %stack.3.i, 0, debug-location !253 :: (dereferenceable load 4 from %ir.i); is.c:319:17
240B	  dead $wzr = SUBSWrr %4:gpr32, %5:gpr32, implicit-def $nzcv, debug-location !256; is.c:319:5
256B	  Bcc 12, %bb.3, implicit killed $nzcv, debug-location !256; is.c:319:5
272B	  B %bb.2, debug-location !256; is.c:319:5

288B	bb.2.for.body:
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

304B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !257; is.c:320:13
320B	  $x0 = ADDXri %stack.0.seed.addr, 0, 0, debug-location !257; is.c:320:13
336B	  $x1 = ADDXri %stack.1.a.addr, 0, 0, debug-location !257; is.c:320:13
352B	  BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !257; is.c:320:13
368B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !257; is.c:320:13
384B	  %9:fpr64 = COPY $d0, debug-location !257; is.c:320:13
400B	  STRDui %9:fpr64, %stack.2.x, 0, debug-location !259 :: (store 8 into %ir.x); is.c:320:11
416B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !260; is.c:321:14
432B	  $x0 = ADDXri %stack.0.seed.addr, 0, 0, debug-location !260; is.c:321:14
448B	  $x1 = ADDXri %stack.1.a.addr, 0, 0, debug-location !260; is.c:321:14
464B	  BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !260; is.c:321:14
480B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !260; is.c:321:14
512B	  %11:fpr64 = LDRDui %stack.2.x, 0, debug-location !261 :: (dereferenceable load 8 from %ir.x); is.c:321:11
520B	  %10:fpr64 = COPY $d0, debug-location !260; is.c:321:14
528B	  %12:fpr64 = FADDDrr %11:fpr64, %10:fpr64, debug-location !261; is.c:321:11
544B	  STRDui %12:fpr64, %stack.2.x, 0, debug-location !261 :: (store 8 into %ir.x); is.c:321:11
560B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !262; is.c:322:14
576B	  $x0 = ADDXri %stack.0.seed.addr, 0, 0, debug-location !262; is.c:322:14
592B	  $x1 = ADDXri %stack.1.a.addr, 0, 0, debug-location !262; is.c:322:14
608B	  BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !262; is.c:322:14
624B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !262; is.c:322:14
656B	  %14:fpr64 = LDRDui %stack.2.x, 0, debug-location !263 :: (dereferenceable load 8 from %ir.x); is.c:322:11
664B	  %13:fpr64 = COPY $d0, debug-location !262; is.c:322:14
672B	  %15:fpr64 = FADDDrr %14:fpr64, %13:fpr64, debug-location !263; is.c:322:11
688B	  STRDui %15:fpr64, %stack.2.x, 0, debug-location !263 :: (store 8 into %ir.x); is.c:322:11
704B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !264; is.c:323:14
720B	  $x0 = ADDXri %stack.0.seed.addr, 0, 0, debug-location !264; is.c:323:14
736B	  $x1 = ADDXri %stack.1.a.addr, 0, 0, debug-location !264; is.c:323:14
752B	  BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !264; is.c:323:14
768B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !264; is.c:323:14
784B	  %16:fpr64 = COPY $d0, debug-location !264; is.c:323:14
800B	  %17:fpr64 = LDRDui %stack.2.x, 0, debug-location !265 :: (dereferenceable load 8 from %ir.x); is.c:323:11
848B	  undef %20.ssub:fpr64 = LDRSui %stack.4.k, 0, debug-location !266 :: (dereferenceable load 4 from %ir.k); is.c:325:24
992B	  %29:gpr32common = LDRWui %stack.3.i, 0, debug-location !272 :: (dereferenceable load 4 from %ir.i); is.c:319:32
1000B	  %27:gpr64 = LDRSWui %stack.3.i, 0, debug-location !269 :: (dereferenceable load 4 from %ir.i); is.c:325:19
1008B	  %18:fpr64 = FADDDrr %17:fpr64, %16:fpr64, debug-location !265; is.c:323:11
1016B	  %22:fpr128 = SSHLLv2i32_shift %20:fpr64, 0, debug-location !266; is.c:325:24
1024B	  %30:gpr32common = nsw ADDWri %29:gpr32common, 1, 0, debug-location !272; is.c:319:32
1032B	  STRDui %18:fpr64, %stack.2.x, 0, debug-location !265 :: (store 8 into %ir.x); is.c:323:11
1040B	  %24:fpr64 = SCVTFv1i64 %22.dsub:fpr128, debug-location !266; is.c:325:24
1048B	  %25:fpr64 = FMULDrr %24:fpr64, %18:fpr64, debug-location !268; is.c:325:26
1056B	  %26:gpr32 = FCVTZSUWDr %25:fpr64, debug-location !266; is.c:325:24
1064B	  STRWroX %26:gpr32, %28:gpr64common, %27:gpr64, 0, 1, debug-location !271 :: (store 4 into %ir.arrayidx); is.c:325:22
1072B	  STRWui %30:gpr32common, %stack.3.i, 0, debug-location !272 :: (store 4 into %ir.i); is.c:319:32
1080B	  B %bb.1, debug-location !273; is.c:319:5

1088B	bb.3.for.end:
	; predecessors: %bb.1

1096B	  RET_ReallyLR debug-location !276; is.c:327:1

# End machine code for function create_seq.

Before post-MI-sched:
# Machine code for function create_seq: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=8, align=8, at location [SP-40]
  fi#1: size=8, align=8, at location [SP-48]
  fi#2: size=8, align=8, at location [SP-56]
  fi#3: size=4, align=4, at location [SP-60]
  fi#4: size=4, align=4, at location [SP-64]
  fi#5: size=8, align=8, at location [SP-8]
  fi#6: size=8, align=8, at location [SP-16]
  fi#7: size=8, align=8, at location [SP-24]
  fi#8: size=8, align=8, at location [SP-32]
Function Live Ins: $d0, $d1

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $d0, $d1, $x19, $x20, $lr
  $sp = frame-setup SUBXri $sp, 64, 0
  frame-setup STPXi killed $x20, killed $x19, $sp, 4 :: (store 8 into %stack.8), (store 8 into %stack.7)
  frame-setup STPXi killed $fp, killed $lr, $sp, 6 :: (store 8 into %stack.6), (store 8 into %stack.5)
  $fp = frame-setup ADDXri $sp, 48, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  frame-setup CFI_INSTRUCTION offset $w19, -24
  frame-setup CFI_INSTRUCTION offset $w20, -32
  STPDi renamable $d1, renamable $d0, $sp, 2 :: (store 8 into %ir.seed.addr), (store 8 into %ir.a.addr)
  $w8 = MOVZWi 8, 16
  STPWi renamable $w8, $wzr, $sp, 0, debug-location !250 :: (store 4 into %ir.i), (store 4 into %ir.k); is.c:319:12
  $w19 = MOVNWi 65024, 16
  $x20 = ADRP target-flags(aarch64-page) @key_array
  renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @key_array, 0

bb.1.for.cond:
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $w19, $x20
  renamable $w8 = LDRWui $sp, 1, debug-location !253 :: (dereferenceable load 4 from %ir.i); is.c:319:17
  $wzr = SUBSWrs killed renamable $w8, renamable $w19, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !256; is.c:319:5
  Bcc 12, %bb.3, implicit $nzcv, debug-location !256; is.c:319:5

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $w19, $x20
  $x0 = ADDXri $sp, 24, 0, debug-location !257; is.c:320:13
  $x1 = ADDXri $sp, 16, 0, debug-location !257; is.c:320:13
  BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !257; is.c:320:13
  STRDui killed renamable $d0, $sp, 1, debug-location !259 :: (store 8 into %ir.x); is.c:320:11
  $x0 = ADDXri $sp, 24, 0, debug-location !260; is.c:321:14
  $x1 = ADDXri $sp, 16, 0, debug-location !260; is.c:321:14
  BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !260; is.c:321:14
  renamable $d1 = LDRDui $sp, 1, debug-location !261 :: (dereferenceable load 8 from %ir.x); is.c:321:11
  renamable $d0 = FADDDrr killed renamable $d1, killed renamable $d0, debug-location !261; is.c:321:11
  STRDui killed renamable $d0, $sp, 1, debug-location !261 :: (store 8 into %ir.x); is.c:321:11
  $x0 = ADDXri $sp, 24, 0, debug-location !262; is.c:322:14
  $x1 = ADDXri $sp, 16, 0, debug-location !262; is.c:322:14
  BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !262; is.c:322:14
  renamable $d1 = LDRDui $sp, 1, debug-location !263 :: (dereferenceable load 8 from %ir.x); is.c:322:11
  renamable $d0 = FADDDrr killed renamable $d1, killed renamable $d0, debug-location !263; is.c:322:11
  STRDui killed renamable $d0, $sp, 1, debug-location !263 :: (store 8 into %ir.x); is.c:322:11
  $x0 = ADDXri $sp, 24, 0, debug-location !264; is.c:323:14
  $x1 = ADDXri $sp, 16, 0, debug-location !264; is.c:323:14
  BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !264; is.c:323:14
  renamable $d1 = LDRDui $sp, 1, debug-location !265 :: (dereferenceable load 8 from %ir.x); is.c:323:11
  renamable $s2 = LDRSui $sp, 0, implicit-def $d2, debug-location !266 :: (dereferenceable load 4 from %ir.k); is.c:325:24
  renamable $w8 = LDRWui $sp, 1, debug-location !272 :: (dereferenceable load 4 from %ir.i); is.c:319:32
  renamable $x9 = LDRSWui $sp, 1, debug-location !269 :: (dereferenceable load 4 from %ir.i); is.c:325:19
  renamable $d0 = FADDDrr killed renamable $d1, killed renamable $d0, debug-location !265; is.c:323:11
  renamable $q1 = SSHLLv2i32_shift killed renamable $d2, 0, debug-location !266; is.c:325:24
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !272; is.c:319:32
  STRDui renamable $d0, $sp, 1, debug-location !265 :: (store 8 into %ir.x); is.c:323:11
  renamable $d1 = SCVTFv1i64 renamable $d1, implicit killed $q1, debug-location !266; is.c:325:24
  renamable $d0 = FMULDrr killed renamable $d1, killed renamable $d0, debug-location !268; is.c:325:26
  renamable $w10 = FCVTZSUWDr killed renamable $d0, debug-location !266; is.c:325:24
  STRWroX killed renamable $w10, renamable $x20, killed renamable $x9, 0, 1, debug-location !271 :: (store 4 into %ir.arrayidx); is.c:325:22
  STRWui killed renamable $w8, $sp, 1, debug-location !272 :: (store 4 into %ir.i); is.c:319:32
  B %bb.1

bb.3.for.end:
; predecessors: %bb.1

  $fp, $lr = frame-destroy LDPXi $sp, 6, debug-location !276 :: (load 8 from %stack.6), (load 8 from %stack.5); is.c:327:1
  $x20, $x19 = frame-destroy LDPXi $sp, 4, debug-location !276 :: (load 8 from %stack.8), (load 8 from %stack.7); is.c:327:1
  $sp = frame-destroy ADDXri $sp, 64, 0, debug-location !276; is.c:327:1
  RET undef $lr, debug-location !276; is.c:327:1

# End machine code for function create_seq.

********** MI Scheduling **********
create_seq:%bb.0 entry
  From: STPDi renamable $d1, renamable $d0, $sp, 2 :: (store 8 into %ir.seed.addr), (store 8 into %ir.a.addr)
    To: End RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   STPDi renamable $d1, renamable $d0, $sp, 2 :: (store 8 into %ir.seed.addr), (store 8 into %ir.a.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $w8 = MOVZWi 8, 16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STPWi renamable $w8, $wzr, $sp, 0, debug-location !250 :: (store 4 into %ir.i), (store 4 into %ir.k); is.c:319:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
SU(3):   $w19 = MOVNWi 65024, 16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $x20 = ADRP target-flags(aarch64-page) @key_array
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x20
SU(5):   renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @key_array, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x20
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Disabled scoreboard hazard recognizer
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(4) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) $x20 = ADRP target-flags(aarch64-page) @key_array
  Ready @0c
  TopQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $w8 = MOVZWi 8, 16
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 5 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(5) TOP-PATH                  1 cycles 
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) $w19 = MOVNWi 65024, 16
  Ready @2c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 5 2 
  TopQ.A RemainingLatency 0 + 3c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(5) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @key_array, 0
  Ready @3c
  TopQ.A TopLatency SU(5) 1c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 4c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STPDi renamable $d1, renamable $d0, $sp, 2 :: (store 8 into %ir.seed.addr), (store 8 into %ir.a.addr)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STPWi renamable $w8, $wzr, $sp, 0, debug-location !250 :: (store 4 into %ir.i), (store 4 into %ir.k); is.c:319:12
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(4):   $x20 = ADRP target-flags(aarch64-page) @key_array
SU(1):   $w8 = MOVZWi 8, 16
SU(3):   $w19 = MOVNWi 65024, 16
SU(5):   renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @key_array, 0
SU(0):   STPDi renamable $d1, renamable $d0, $sp, 2 :: (store 8 into %ir.seed.addr), (store 8 into %ir.a.addr)
SU(2):   STPWi renamable $w8, $wzr, $sp, 0, debug-location !250 :: (store 4 into %ir.i), (store 4 into %ir.k); is.c:319:12

********** MI Scheduling **********
create_seq:%bb.0 entry
  From: frame-setup STPXi killed $x20, killed $x19, $sp, 4 :: (store 8 into %stack.8), (store 8 into %stack.7)
    To: frame-setup CFI_INSTRUCTION def_cfa $w29, 16
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   frame-setup STPXi $x20, $x19, $sp, 4 :: (store 8 into %stack.8), (store 8 into %stack.7)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   frame-setup STPXi $fp, $lr, $sp, 6 :: (store 8 into %stack.6), (store 8 into %stack.5)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Successors:
    SU(2): Anti Latency=0
SU(2):   $fp = frame-setup ADDXri $sp, 48, 0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Anti Latency=0
ExitSU:   frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 0
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) frame-setup STPXi $x20, $x19, $sp, 4 :: (store 8 into %stack.8), (store 8 into %stack.7)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) frame-setup STPXi $fp, $lr, $sp, 6 :: (store 8 into %stack.6), (store 8 into %stack.5)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $fp = frame-setup ADDXri $sp, 48, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   frame-setup STPXi $x20, $x19, $sp, 4 :: (store 8 into %stack.8), (store 8 into %stack.7)
SU(1):   frame-setup STPXi $fp, $lr, $sp, 6 :: (store 8 into %stack.6), (store 8 into %stack.5)
SU(2):   $fp = frame-setup ADDXri $sp, 48, 0

Fixup kills for %bb.0
********** MI Scheduling **********
create_seq:%bb.1 for.cond
  From: renamable $w8 = LDRWui $sp, 1, debug-location !253 :: (dereferenceable load 4 from %ir.i); is.c:319:17
    To: Bcc 12, %bb.3, implicit $nzcv, debug-location !256; is.c:319:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 1, debug-location !253 :: (dereferenceable load 4 from %ir.i); is.c:319:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   $wzr = SUBSWrs renamable $w8, renamable $w19, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !256; is.c:319:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.3, implicit $nzcv, debug-location !256; is.c:319:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 1, debug-location !253 :: (dereferenceable load 4 from %ir.i); is.c:319:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $wzr = SUBSWrs renamable $w8, renamable $w19, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !256; is.c:319:5
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   renamable $w8 = LDRWui $sp, 1, debug-location !253 :: (dereferenceable load 4 from %ir.i); is.c:319:17
SU(1):   $wzr = SUBSWrs renamable $w8, renamable $w19, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !256; is.c:319:5

Fixup kills for %bb.1
********** MI Scheduling **********
create_seq:%bb.2 for.body
  From: renamable $d1 = LDRDui $sp, 1, debug-location !265 :: (dereferenceable load 8 from %ir.x); is.c:323:11
    To: B %bb.1
 RegionInstrs: 13
ScheduleDAGMI::schedule starting
SU(0):   renamable $d1 = LDRDui $sp, 1, debug-location !265 :: (dereferenceable load 8 from %ir.x); is.c:323:11
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(5): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d1
    SU(7): Ord  Latency=0 Memory
SU(1):   renamable $s2 = LDRSui $sp, 0, implicit-def $d2, debug-location !266 :: (dereferenceable load 4 from %ir.k); is.c:325:24
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(5): Data Latency=4 Reg=$d2
SU(2):   renamable $w8 = LDRWui $sp, 1, debug-location !272 :: (dereferenceable load 4 from %ir.i); is.c:319:32
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$w8
    SU(12): Ord  Latency=0 Memory
SU(3):   renamable $x9 = LDRSWui $sp, 1, debug-location !269 :: (dereferenceable load 4 from %ir.i); is.c:325:19
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(11): Data Latency=4 Reg=$x9
    SU(12): Ord  Latency=0 Memory
SU(4):   renamable $d0 = FADDDrr renamable $d1, renamable $d0, debug-location !265; is.c:323:11
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=$d1
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$d0
    SU(7): Data Latency=1 Reg=$d0
    SU(5): Anti Latency=0
SU(5):   renamable $q1 = SSHLLv2i32_shift renamable $d2, 0, debug-location !266; is.c:325:24
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(4): Anti Latency=0
    SU(1): Data Latency=4 Reg=$d2
    SU(0): Out  Latency=1
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$d1
    SU(8): Data Latency=0 Reg=$q1
SU(6):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !272; is.c:319:32
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$w8
  Successors:
    SU(12): Data Latency=1 Reg=$w8
SU(7):   STRDui renamable $d0, $sp, 1, debug-location !265 :: (store 8 into %ir.x); is.c:323:11
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(4): Data Latency=1 Reg=$d0
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(9): Anti Latency=0
SU(8):   renamable $d1 = SCVTFv1i64 renamable $d1, implicit $q1, debug-location !266; is.c:325:24
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$d1
    SU(5): Data Latency=0 Reg=$q1
  Successors:
    SU(9): Data Latency=1 Reg=$d1
SU(9):   renamable $d0 = FMULDrr renamable $d1, renamable $d0, debug-location !268; is.c:325:26
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 2
  Predecessors:
    SU(8): Data Latency=1 Reg=$d1
    SU(7): Anti Latency=0
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$d0
  Successors:
    SU(10): Data Latency=1 Reg=$d0
SU(10):   renamable $w10 = FCVTZSUWDr renamable $d0, debug-location !266; is.c:325:24
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 1
  Predecessors:
    SU(9): Data Latency=1 Reg=$d0
  Successors:
    SU(11): Data Latency=1 Reg=$w10
SU(11):   STRWroX renamable $w10, renamable $x20, renamable $x9, 0, 1, debug-location !271 :: (store 4 into %ir.arrayidx); is.c:325:22
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=$w10
    SU(3): Data Latency=4 Reg=$x9
SU(12):   STRWui renamable $w8, $sp, 1, debug-location !272 :: (store 4 into %ir.i); is.c:319:32
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=$w8
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
ExitSU:   B %bb.1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 8
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 8
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d1 = LDRDui $sp, 1, debug-location !265 :: (dereferenceable load 8 from %ir.x); is.c:323:11
  Ready @0c
  TopQ.A BotLatency SU(0) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 3 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 8
  Cand SU(3) ORDER                              
  Cand SU(1) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $s2 = LDRSui $sp, 0, implicit-def $d2, debug-location !266 :: (dereferenceable load 4 from %ir.k); is.c:325:24
  Ready @1c
  TopQ.A BotLatency SU(1) 8c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 8
  Cand SU(3) ORDER                              
  Cand SU(2) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $w8 = LDRWui $sp, 1, debug-location !272 :: (dereferenceable load 4 from %ir.i); is.c:319:32
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 6 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $x9 = LDRSWui $sp, 1, debug-location !269 :: (dereferenceable load 4 from %ir.i); is.c:325:19
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $d0 = FADDDrr renamable $d1, renamable $d0, debug-location !265; is.c:323:11
  Ready @4c
  TopQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 7 5 
  TopQ.A RemainingLatency 0 + 5c > CritPath 8
  Cand SU(7) ORDER                              
  Cand SU(5) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $q1 = SSHLLv2i32_shift renamable $d2, 0, debug-location !266; is.c:325:24
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 8 6 
  TopQ.A RemainingLatency 0 + 6c > CritPath 8
  Cand SU(7) ORDER                              
  Cand SU(8) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $d1 = SCVTFv1i64 renamable $d1, implicit $q1, debug-location !266; is.c:325:24
  Ready @6c
  TopQ.A TopLatency SU(8) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 6 
  TopQ.A RemainingLatency 0 + 7c > CritPath 8
  Cand SU(7) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(7) STRDui renamable $d0, $sp, 1, debug-location !265 :: (store 8 into %ir.x); is.c:323:11
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 9 
  TopQ.A RemainingLatency 0 + 8c > CritPath 8
  Cand SU(6) ORDER                              
  Cand SU(9) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(9) renamable $d0 = FMULDrr renamable $d1, renamable $d0, debug-location !268; is.c:325:26
  Ready @8c
  TopQ.A TopLatency SU(9) 6c
  TopQ.A BotLatency SU(9) 2c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 10 
  TopQ.A RemainingLatency 0 + 9c > CritPath 8
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !272; is.c:319:32
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 12 
  TopQ.A RemainingLatency 0 + 10c > CritPath 8
  Cand SU(10) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(10) renamable $w10 = FCVTZSUWDr renamable $d0, debug-location !266; is.c:325:24
  Ready @10c
  TopQ.A TopLatency SU(10) 7c
  TopQ.A BotLatency SU(10) 1c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 11 
  TopQ.A RemainingLatency 0 + 11c > CritPath 8
  Cand SU(12) ORDER                              
  Cand SU(11) ORDER                              
Pick Top ORDER     
Scheduling SU(11) STRWroX renamable $w10, renamable $x20, renamable $x9, 0, 1, debug-location !271 :: (store 4 into %ir.arrayidx); is.c:325:22
  Ready @11c
  TopQ.A TopLatency SU(11) 8c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 
Pick Top ONLY1     
Scheduling SU(12) STRWui renamable $w8, $sp, 1, debug-location !272 :: (store 4 into %ir.i); is.c:319:32
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   renamable $d1 = LDRDui $sp, 1, debug-location !265 :: (dereferenceable load 8 from %ir.x); is.c:323:11
SU(1):   renamable $s2 = LDRSui $sp, 0, implicit-def $d2, debug-location !266 :: (dereferenceable load 4 from %ir.k); is.c:325:24
SU(2):   renamable $w8 = LDRWui $sp, 1, debug-location !272 :: (dereferenceable load 4 from %ir.i); is.c:319:32
SU(3):   renamable $x9 = LDRSWui $sp, 1, debug-location !269 :: (dereferenceable load 4 from %ir.i); is.c:325:19
SU(4):   renamable $d0 = FADDDrr renamable $d1, renamable $d0, debug-location !265; is.c:323:11
SU(5):   renamable $q1 = SSHLLv2i32_shift renamable $d2, 0, debug-location !266; is.c:325:24
SU(8):   renamable $d1 = SCVTFv1i64 renamable $d1, implicit $q1, debug-location !266; is.c:325:24
SU(7):   STRDui renamable $d0, $sp, 1, debug-location !265 :: (store 8 into %ir.x); is.c:323:11
SU(9):   renamable $d0 = FMULDrr renamable $d1, renamable $d0, debug-location !268; is.c:325:26
SU(6):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !272; is.c:319:32
SU(10):   renamable $w10 = FCVTZSUWDr renamable $d0, debug-location !266; is.c:325:24
SU(11):   STRWroX renamable $w10, renamable $x20, renamable $x9, 0, 1, debug-location !271 :: (store 4 into %ir.arrayidx); is.c:325:22
SU(12):   STRWui renamable $w8, $sp, 1, debug-location !272 :: (store 4 into %ir.i); is.c:319:32

********** MI Scheduling **********
create_seq:%bb.2 for.body
  From: renamable $d1 = LDRDui $sp, 1, debug-location !263 :: (dereferenceable load 8 from %ir.x); is.c:322:11
    To: BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !264; is.c:323:14
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $d1 = LDRDui $sp, 1, debug-location !263 :: (dereferenceable load 8 from %ir.x); is.c:322:11
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$d1
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $d0 = FADDDrr renamable $d1, renamable $d0, debug-location !263; is.c:322:11
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$d1
  Successors:
    SU(2): Data Latency=1 Reg=$d0
SU(2):   STRDui renamable $d0, $sp, 1, debug-location !263 :: (store 8 into %ir.x); is.c:322:11
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$d0
    SU(0): Ord  Latency=0 Memory
SU(3):   $x0 = ADDXri $sp, 24, 0, debug-location !264; is.c:323:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $x1 = ADDXri $sp, 16, 0, debug-location !264; is.c:323:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !264; is.c:323:14
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d1 = LDRDui $sp, 1, debug-location !263 :: (dereferenceable load 8 from %ir.x); is.c:322:11
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 4 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) $x0 = ADDXri $sp, 24, 0, debug-location !264; is.c:323:14
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $x1 = ADDXri $sp, 16, 0, debug-location !264; is.c:323:14
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $d0 = FADDDrr renamable $d1, renamable $d0, debug-location !263; is.c:322:11
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRDui renamable $d0, $sp, 1, debug-location !263 :: (store 8 into %ir.x); is.c:322:11
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   renamable $d1 = LDRDui $sp, 1, debug-location !263 :: (dereferenceable load 8 from %ir.x); is.c:322:11
SU(3):   $x0 = ADDXri $sp, 24, 0, debug-location !264; is.c:323:14
SU(4):   $x1 = ADDXri $sp, 16, 0, debug-location !264; is.c:323:14
SU(1):   renamable $d0 = FADDDrr renamable $d1, renamable $d0, debug-location !263; is.c:322:11
SU(2):   STRDui renamable $d0, $sp, 1, debug-location !263 :: (store 8 into %ir.x); is.c:322:11

********** MI Scheduling **********
create_seq:%bb.2 for.body
  From: renamable $d1 = LDRDui $sp, 1, debug-location !261 :: (dereferenceable load 8 from %ir.x); is.c:321:11
    To: BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !262; is.c:322:14
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $d1 = LDRDui $sp, 1, debug-location !261 :: (dereferenceable load 8 from %ir.x); is.c:321:11
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$d1
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $d0 = FADDDrr renamable $d1, renamable $d0, debug-location !261; is.c:321:11
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$d1
  Successors:
    SU(2): Data Latency=1 Reg=$d0
SU(2):   STRDui renamable $d0, $sp, 1, debug-location !261 :: (store 8 into %ir.x); is.c:321:11
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$d0
    SU(0): Ord  Latency=0 Memory
SU(3):   $x0 = ADDXri $sp, 24, 0, debug-location !262; is.c:322:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $x1 = ADDXri $sp, 16, 0, debug-location !262; is.c:322:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !262; is.c:322:14
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d1 = LDRDui $sp, 1, debug-location !261 :: (dereferenceable load 8 from %ir.x); is.c:321:11
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 4 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) $x0 = ADDXri $sp, 24, 0, debug-location !262; is.c:322:14
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $x1 = ADDXri $sp, 16, 0, debug-location !262; is.c:322:14
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $d0 = FADDDrr renamable $d1, renamable $d0, debug-location !261; is.c:321:11
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRDui renamable $d0, $sp, 1, debug-location !261 :: (store 8 into %ir.x); is.c:321:11
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   renamable $d1 = LDRDui $sp, 1, debug-location !261 :: (dereferenceable load 8 from %ir.x); is.c:321:11
SU(3):   $x0 = ADDXri $sp, 24, 0, debug-location !262; is.c:322:14
SU(4):   $x1 = ADDXri $sp, 16, 0, debug-location !262; is.c:322:14
SU(1):   renamable $d0 = FADDDrr renamable $d1, renamable $d0, debug-location !261; is.c:321:11
SU(2):   STRDui renamable $d0, $sp, 1, debug-location !261 :: (store 8 into %ir.x); is.c:321:11

********** MI Scheduling **********
create_seq:%bb.2 for.body
  From: STRDui killed renamable $d0, $sp, 1, debug-location !259 :: (store 8 into %ir.x); is.c:320:11
    To: BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !260; is.c:321:14
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   STRDui renamable $d0, $sp, 1, debug-location !259 :: (store 8 into %ir.x); is.c:320:11
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $x0 = ADDXri $sp, 24, 0, debug-location !260; is.c:321:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $x1 = ADDXri $sp, 16, 0, debug-location !260; is.c:321:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !260; is.c:321:14
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $x0 = ADDXri $sp, 24, 0, debug-location !260; is.c:321:14
  Ready @0c
  TopQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x1 = ADDXri $sp, 16, 0, debug-location !260; is.c:321:14
  Ready @1c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STRDui renamable $d0, $sp, 1, debug-location !259 :: (store 8 into %ir.x); is.c:320:11
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.2 ***
SU(1):   $x0 = ADDXri $sp, 24, 0, debug-location !260; is.c:321:14
SU(2):   $x1 = ADDXri $sp, 16, 0, debug-location !260; is.c:321:14
SU(0):   STRDui renamable $d0, $sp, 1, debug-location !259 :: (store 8 into %ir.x); is.c:320:11

********** MI Scheduling **********
create_seq:%bb.2 for.body
  From: $x0 = ADDXri $sp, 24, 0, debug-location !257; is.c:320:13
    To: BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !257; is.c:320:13
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADDXri $sp, 24, 0, debug-location !257; is.c:320:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(1):   $x1 = ADDXri $sp, 16, 0, debug-location !257; is.c:320:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $d0, debug-location !257; is.c:320:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $x0 = ADDXri $sp, 24, 0, debug-location !257; is.c:320:13
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x1 = ADDXri $sp, 16, 0, debug-location !257; is.c:320:13
  Ready @1c
  TopQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   $x0 = ADDXri $sp, 24, 0, debug-location !257; is.c:320:13
SU(1):   $x1 = ADDXri $sp, 16, 0, debug-location !257; is.c:320:13

Fixup kills for %bb.2
********** MI Scheduling **********
create_seq:%bb.3 for.end
  From: $fp, $lr = frame-destroy LDPXi $sp, 6, debug-location !276 :: (load 8 from %stack.6), (load 8 from %stack.5); is.c:327:1
    To: $sp = frame-destroy ADDXri $sp, 64, 0, debug-location !276; is.c:327:1
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $fp, $lr = frame-destroy LDPXi $sp, 6, debug-location !276 :: (load 8 from %stack.6), (load 8 from %stack.5); is.c:327:1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(1):   $x20, $x19 = frame-destroy LDPXi $sp, 4, debug-location !276 :: (load 8 from %stack.8), (load 8 from %stack.7); is.c:327:1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
ExitSU:   $sp = frame-destroy ADDXri $sp, 64, 0, debug-location !276; is.c:327:1
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path: (PGS-RR) 3
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 3
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $fp, $lr = frame-destroy LDPXi $sp, 6, debug-location !276 :: (load 8 from %stack.6), (load 8 from %stack.5); is.c:327:1
  Ready @0c
  TopQ.A BotLatency SU(0) 3c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x20, $x19 = frame-destroy LDPXi $sp, 4, debug-location !276 :: (load 8 from %stack.8), (load 8 from %stack.7); is.c:327:1
  Ready @1c
  TopQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   $fp, $lr = frame-destroy LDPXi $sp, 6, debug-location !276 :: (load 8 from %stack.6), (load 8 from %stack.5); is.c:327:1
SU(1):   $x20, $x19 = frame-destroy LDPXi $sp, 4, debug-location !276 :: (load 8 from %stack.8), (load 8 from %stack.7); is.c:327:1

Fixup kills for %bb.3
Before MISched:
# Machine code for function full_verify: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  STRWui $wzr, %stack.0.i, 0, debug-location !284 :: (store 4 into %ir.i); is.c:351:12
  %2:gpr32 = MOVi32imm 33554431
  %27:gpr64common = MOVaddr target-flags(aarch64-page) @key_buff2, target-flags(aarch64-pageoff, aarch64-nc) @key_buff2
  %29:gpr64common = ADRP target-flags(aarch64-page) @key_buff_ptr_global
  %35:gpr64common = MOVaddr target-flags(aarch64-page) @key_array, target-flags(aarch64-pageoff, aarch64-nc) @key_array

bb.1.for.cond:
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %1:gpr32 = LDRWui %stack.0.i, 0, debug-location !287 :: (dereferenceable load 4 from %ir.i); is.c:351:17
  dead $wzr = SUBSWrr %1:gpr32, %2:gpr32, implicit-def $nzcv, debug-location !290; is.c:351:5
  Bcc 12, %bb.3, implicit killed $nzcv, debug-location !290; is.c:351:5
  B %bb.2, debug-location !290; is.c:351:5

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %26:gpr64 = LDRSWui %stack.0.i, 0, debug-location !291 :: (dereferenceable load 4 from %ir.i); is.c:352:68
  %28:gpr64 = LDRSWroX %27:gpr64common, %26:gpr64, 0, 1, debug-location !292 :: (load 4 from %ir.arrayidx2); is.c:352:58
  %30:gpr64common = LDRXui %29:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @key_buff_ptr_global, debug-location !293 :: (dereferenceable load 8 from @key_buff_ptr_global); is.c:352:21
  %31:gpr64 = UBFMXri %28:gpr64, 62, 61, debug-location !293; is.c:352:21
  %32:gpr64common = LDRSWroX %30:gpr64common, %31:gpr64, 0, 0, debug-location !296 :: (load 4 from %ir.arrayidx4); is.c:352:19
  %33:gpr64common = nsw SUBXri %32:gpr64common, 1, 0, debug-location !296; is.c:352:19
  STRWroX %33.sub_32:gpr64common, %30:gpr64common, %31:gpr64, 0, 0, debug-location !296 :: (store 4 into %ir.arrayidx4); is.c:352:19
  STRWroX %28.sub_32:gpr64, %35:gpr64common, %33:gpr64common, 0, 1, debug-location !298 :: (store 4 into %ir.arrayidx6); is.c:352:56
  %37:gpr32common = LDRWui %stack.0.i, 0, debug-location !299 :: (dereferenceable load 4 from %ir.i); is.c:351:32
  %38:gpr32common = nsw ADDWri %37:gpr32common, 1, 0, debug-location !299; is.c:351:32
  STRWui %38:gpr32common, %stack.0.i, 0, debug-location !299 :: (store 4 into %ir.i); is.c:351:32
  B %bb.1, debug-location !300; is.c:351:5

bb.3.for.end:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  STRWui $wzr, %stack.1.j, 0, debug-location !303 :: (store 4 into %ir.j); is.c:356:7
  %5:gpr32 = MOVi32imm 1
  STRWui %5:gpr32, %stack.0.i, 0, debug-location !304 :: (store 4 into %ir.i); is.c:357:12
  %7:gpr32 = MOVi32imm 33554431

bb.4.for.cond7:
; predecessors: %bb.3, %bb.7
  successors: %bb.5(0x7c000000), %bb.8(0x04000000); %bb.5(96.88%), %bb.8(3.12%)

  %6:gpr32 = LDRWui %stack.0.i, 0, debug-location !307 :: (dereferenceable load 4 from %ir.i); is.c:357:17
  dead $wzr = SUBSWrr %6:gpr32, %7:gpr32, implicit-def $nzcv, debug-location !310; is.c:357:5
  Bcc 12, %bb.8, implicit killed $nzcv, debug-location !310; is.c:357:5
  B %bb.5, debug-location !310; is.c:357:5

bb.5.for.body9:
; predecessors: %bb.4
  successors: %bb.6(0x40000000), %bb.7(0x40000000); %bb.6(50.00%), %bb.7(50.00%)

  %16:gpr64 = LDRSWui %stack.0.i, 0, debug-location !311 :: (dereferenceable load 4 from %ir.i); is.c:358:23
  %18:gpr64common = ADDXrs %35:gpr64common, %16:gpr64, 2, debug-location !316; is.c:358:32
  %19:gpr32 = LDURWi %18:gpr64common, -4, debug-location !314 :: (load 4 from %ir.arrayidx11); is.c:358:13
  %20:gpr32 = LDRWui %18:gpr64common, 0, debug-location !316 :: (load 4 from %ir.arrayidx13); is.c:358:32
  dead $wzr = SUBSWrr %19:gpr32, %20:gpr32, implicit-def $nzcv, debug-location !318; is.c:358:13
  Bcc 13, %bb.7, implicit killed $nzcv, debug-location !318; is.c:358:13
  B %bb.6, debug-location !318; is.c:358:13

bb.6.if.then:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %22:gpr32common = LDRWui %stack.1.j, 0, debug-location !319 :: (dereferenceable load 4 from %ir.j); is.c:359:14
  %23:gpr32common = nsw ADDWri %22:gpr32common, 1, 0, debug-location !319; is.c:359:14
  STRWui %23:gpr32common, %stack.1.j, 0, debug-location !319 :: (store 4 into %ir.j); is.c:359:14

bb.7.for.inc16:
; predecessors: %bb.5, %bb.6
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %24:gpr32common = LDRWui %stack.0.i, 0, debug-location !321 :: (dereferenceable load 4 from %ir.i); is.c:357:32
  %25:gpr32common = nsw ADDWri %24:gpr32common, 1, 0, debug-location !321; is.c:357:32
  STRWui %25:gpr32common, %stack.0.i, 0, debug-location !321 :: (store 4 into %ir.i); is.c:357:32
  B %bb.4, debug-location !322; is.c:357:5

bb.8.for.end18:
; predecessors: %bb.4
  successors: %bb.9(0x50000000), %bb.10(0x30000000); %bb.9(62.50%), %bb.10(37.50%)

  %9:gpr32 = LDRWui %stack.1.j, 0, debug-location !325 :: (dereferenceable load 4 from %ir.j); is.c:361:9
  CBZW %9:gpr32, %bb.10, debug-location !328; is.c:361:9
  B %bb.9, debug-location !328; is.c:361:9

bb.9.if.then20:
; predecessors: %bb.8
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  %13:gpr64 = LDRSWui %stack.1.j, 0, debug-location !329 :: (dereferenceable load 4 from %ir.j); is.c:362:72
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !332; is.c:362:9
  %14:gpr64 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str, debug-location !332; is.c:362:9
  $x0 = COPY %14:gpr64, debug-location !332; is.c:362:9
  $x1 = COPY %13:gpr64, debug-location !332; is.c:362:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def dead $w0, debug-location !332; is.c:362:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !332; is.c:362:9
  B %bb.11, debug-location !333; is.c:363:5

bb.10.if.else:
; predecessors: %bb.8
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  %10:gpr64common = ADRP target-flags(aarch64-page) @passed_verification, debug-location !334; is.c:365:28
  %11:gpr32common = LDRWui %10:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !334 :: (dereferenceable load 4 from @passed_verification); is.c:365:28
  %12:gpr32common = nsw ADDWri %11:gpr32common, 1, 0, debug-location !334; is.c:365:28
  STRWui %12:gpr32common, %10:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !334 :: (store 4 into @passed_verification); is.c:365:28

bb.11.if.end22:
; predecessors: %bb.10, %bb.9

  RET_ReallyLR debug-location !335; is.c:366:1

# End machine code for function full_verify.

********** MI Scheduling **********
full_verify:%bb.0 entry
  From: STRWui $wzr, %stack.0.i, 0, debug-location !284 :: (store 4 into %ir.i); is.c:351:12
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   STRWui $wzr, %stack.0.i, 0, debug-location !284 :: (store 4 into %ir.i); is.c:351:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %2:gpr32 = MOVi32imm 33554431
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   %27:gpr64common = MOVaddr target-flags(aarch64-page) @key_buff2, target-flags(aarch64-pageoff, aarch64-nc) @key_buff2
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %29:gpr64common = ADRP target-flags(aarch64-page) @key_buff_ptr_global
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   %35:gpr64common = MOVaddr target-flags(aarch64-page) @key_array, target-flags(aarch64-pageoff, aarch64-nc) @key_array
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %35:gpr64common = MOVaddr target-flags(aarch64-page) @key_array, target-flags(aarch64-pageoff, aarch64-nc) @key_array
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %29:gpr64common = ADRP target-flags(aarch64-page) @key_buff_ptr_global
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  BotQ.A RemainingLatency 0 + 2c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %27:gpr64common = MOVaddr target-flags(aarch64-page) @key_buff2, target-flags(aarch64-pageoff, aarch64-nc) @key_buff2
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 3c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %2:gpr32 = MOVi32imm 33554431
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.0.i, 0, debug-location !284 :: (store 4 into %ir.i); is.c:351:12
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   STRWui $wzr, %stack.0.i, 0, debug-location !284 :: (store 4 into %ir.i); is.c:351:12
SU(1):   %2:gpr32 = MOVi32imm 33554431
SU(2):   %27:gpr64common = MOVaddr target-flags(aarch64-page) @key_buff2, target-flags(aarch64-pageoff, aarch64-nc) @key_buff2
SU(3):   %29:gpr64common = ADRP target-flags(aarch64-page) @key_buff_ptr_global
SU(4):   %35:gpr64common = MOVaddr target-flags(aarch64-page) @key_array, target-flags(aarch64-pageoff, aarch64-nc) @key_array

********** MI Scheduling **********
full_verify:%bb.1 for.cond
  From: %1:gpr32 = LDRWui %stack.0.i, 0, debug-location !287 :: (dereferenceable load 4 from %ir.i); is.c:351:17
    To: Bcc 12, %bb.3, implicit killed $nzcv, debug-location !290; is.c:351:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %1:gpr32 = LDRWui %stack.0.i, 0, debug-location !287 :: (dereferenceable load 4 from %ir.i); is.c:351:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%1
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWrr %1:gpr32, %2:gpr32, implicit-def $nzcv, debug-location !290; is.c:351:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.3, implicit killed $nzcv, debug-location !290; is.c:351:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWrr %1:gpr32, %2:gpr32, implicit-def $nzcv, debug-location !290; is.c:351:5
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %1:gpr32 = LDRWui %stack.0.i, 0, debug-location !287 :: (dereferenceable load 4 from %ir.i); is.c:351:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   %1:gpr32 = LDRWui %stack.0.i, 0, debug-location !287 :: (dereferenceable load 4 from %ir.i); is.c:351:17
SU(1):   dead $wzr = SUBSWrr %1:gpr32, %2:gpr32, implicit-def $nzcv, debug-location !290; is.c:351:5

********** MI Scheduling **********
full_verify:%bb.2 for.body
  From: %26:gpr64 = LDRSWui %stack.0.i, 0, debug-location !291 :: (dereferenceable load 4 from %ir.i); is.c:352:68
    To: B %bb.1, debug-location !300; is.c:351:5
 RegionInstrs: 11
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %26:gpr64 = LDRSWui %stack.0.i, 0, debug-location !291 :: (dereferenceable load 4 from %ir.i); is.c:352:68
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
    SU(1): Data Latency=4 Reg=%26
    SU(10): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %28:gpr64 = LDRSWroX %27:gpr64common, %26:gpr64, 0, 1, debug-location !292 :: (load 4 from %ir.arrayidx2); is.c:352:58
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 16
  Predecessors:
    SU(0): Data Latency=4 Reg=%26
  Successors:
    SU(7): Data Latency=4 Reg=%28
    SU(3): Data Latency=4 Reg=%28
    SU(6): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %30:gpr64common = LDRXui %29:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @key_buff_ptr_global, debug-location !293 :: (dereferenceable load 8 from @key_buff_ptr_global); is.c:352:21
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(6): Data Latency=4 Reg=%30
    SU(4): Data Latency=4 Reg=%30
    SU(6): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   %31:gpr64 = UBFMXri %28:gpr64, 62, 61, debug-location !293; is.c:352:21
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 12
  Predecessors:
    SU(1): Data Latency=4 Reg=%28
  Successors:
    SU(6): Data Latency=1 Reg=%31
    SU(4): Data Latency=1 Reg=%31
  Single Issue       : false;
SU(4):   %32:gpr64common = LDRSWroX %30:gpr64common, %31:gpr64, 0, 0, debug-location !296 :: (load 4 from %ir.arrayidx4); is.c:352:19
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 11
  Predecessors:
    SU(3): Data Latency=1 Reg=%31
    SU(2): Data Latency=4 Reg=%30
  Successors:
    SU(5): Data Latency=4 Reg=%32
    SU(10): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Single Issue       : false;
SU(5):   %33:gpr64common = nsw SUBXri %32:gpr64common, 1, 0, debug-location !296; is.c:352:19
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 7
  Predecessors:
    SU(4): Data Latency=4 Reg=%32
  Successors:
    SU(7): Data Latency=1 Reg=%33
    SU(6): Data Latency=1 Reg=%33
  Single Issue       : false;
SU(6):   STRWroX %33.sub_32:gpr64common, %30:gpr64common, %31:gpr64, 0, 0, debug-location !296 :: (store 4 into %ir.arrayidx4); is.c:352:19
  # preds left       : 7
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 6
  Predecessors:
    SU(5): Data Latency=1 Reg=%33
    SU(4): Ord  Latency=0 Memory
    SU(3): Data Latency=1 Reg=%31
    SU(2): Data Latency=4 Reg=%30
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(10): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(8): Ord  Latency=1 Memory
  Single Issue       : false;
SU(7):   STRWroX %28.sub_32:gpr64, %35:gpr64common, %33:gpr64common, 0, 1, debug-location !298 :: (store 4 into %ir.arrayidx6); is.c:352:56
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=0 Memory
    SU(5): Data Latency=1 Reg=%33
    SU(4): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%28
  Single Issue       : false;
SU(8):   %37:gpr32common = LDRWui %stack.0.i, 0, debug-location !299 :: (dereferenceable load 4 from %ir.i); is.c:351:32
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 15
  Height             : 5
  Predecessors:
    SU(6): Ord  Latency=1 Memory
  Successors:
    SU(9): Data Latency=4 Reg=%37
    SU(10): Ord  Latency=0 Memory
  Single Issue       : false;
SU(9):   %38:gpr32common = nsw ADDWri %37:gpr32common, 1, 0, debug-location !299; is.c:351:32
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 19
  Height             : 1
  Predecessors:
    SU(8): Data Latency=4 Reg=%37
  Successors:
    SU(10): Data Latency=1 Reg=%38
  Single Issue       : false;
SU(10):   STRWui %38:gpr32common, %stack.0.i, 0, debug-location !299 :: (store 4 into %ir.i); is.c:351:32
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 20
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=%38
    SU(8): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.1, debug-location !300; is.c:351:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 20
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 7 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) STRWui %38:gpr32common, %stack.0.i, 0, debug-location !299 :: (store 4 into %ir.i); is.c:351:32
  Ready @0c
  BotQ.A TopLatency SU(10) 20c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 9 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
BotQ.A RemLatency SU(9) 19c
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(9) %38:gpr32common = nsw ADDWri %37:gpr32common, 1, 0, debug-location !299; is.c:351:32
  Ready @1c
  BotQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 8 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) STRWroX %28.sub_32:gpr64, %35:gpr64common, %33:gpr64common, 0, 1, debug-location !298 :: (store 4 into %ir.arrayidx6); is.c:352:56
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 8 
Pick Bot ONLY1     
Scheduling SU(8) %37:gpr32common = LDRWui %stack.0.i, 0, debug-location !299 :: (dereferenceable load 4 from %ir.i); is.c:351:32
  Ready @5c
  BotQ.A BotLatency SU(8) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) STRWroX %33.sub_32:gpr64common, %30:gpr64common, %31:gpr64, 0, 0, debug-location !296 :: (store 4 into %ir.arrayidx4); is.c:352:19
  Ready @6c
  BotQ.A BotLatency SU(6) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %33:gpr64common = nsw SUBXri %32:gpr64common, 1, 0, debug-location !296; is.c:352:19
  Ready @7c
  BotQ.A BotLatency SU(5) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %32:gpr64common = LDRSWroX %30:gpr64common, %31:gpr64, 0, 0, debug-location !296 :: (load 4 from %ir.arrayidx4); is.c:352:19
  Ready @11c
  BotQ.A BotLatency SU(4) 11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 7
  Executed: 12c
  Critical: 7c, 7 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %31:gpr64 = UBFMXri %28:gpr64, 62, 61, debug-location !293; is.c:352:21
  Ready @12c
  BotQ.A BotLatency SU(3) 12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 8
  Executed: 13c
  Critical: 8c, 8 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 15 BotQ.A
Queue BotQ.P: 1 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %30:gpr64common = LDRXui %29:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @key_buff_ptr_global, debug-location !293 :: (dereferenceable load 8 from @key_buff_ptr_global); is.c:352:21
  Ready @15c
  BotQ.A BotLatency SU(2) 15c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 9
  Executed: 16c
  Critical: 9c, 9 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %28:gpr64 = LDRSWroX %27:gpr64common, %26:gpr64, 0, 1, debug-location !292 :: (load 4 from %ir.arrayidx2); is.c:352:58
  Ready @16c
  BotQ.A BotLatency SU(1) 16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 10
  Executed: 17c
  Critical: 10c, 10 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 20 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %26:gpr64 = LDRSWui %stack.0.i, 0, debug-location !291 :: (dereferenceable load 4 from %ir.i); is.c:352:68
  Ready @20c
  BotQ.A BotLatency SU(0) 20c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 11
  Executed: 21c
  Critical: 11c, 11 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %26:gpr64 = LDRSWui %stack.0.i, 0, debug-location !291 :: (dereferenceable load 4 from %ir.i); is.c:352:68
SU(1):   %28:gpr64 = LDRSWroX %27:gpr64common, %26:gpr64, 0, 1, debug-location !292 :: (load 4 from %ir.arrayidx2); is.c:352:58
SU(2):   %30:gpr64common = LDRXui %29:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @key_buff_ptr_global, debug-location !293 :: (dereferenceable load 8 from @key_buff_ptr_global); is.c:352:21
SU(3):   %31:gpr64 = UBFMXri %28:gpr64, 62, 61, debug-location !293; is.c:352:21
SU(4):   %32:gpr64common = LDRSWroX %30:gpr64common, %31:gpr64, 0, 0, debug-location !296 :: (load 4 from %ir.arrayidx4); is.c:352:19
SU(5):   %33:gpr64common = nsw SUBXri %32:gpr64common, 1, 0, debug-location !296; is.c:352:19
SU(6):   STRWroX %33.sub_32:gpr64common, %30:gpr64common, %31:gpr64, 0, 0, debug-location !296 :: (store 4 into %ir.arrayidx4); is.c:352:19
SU(8):   %37:gpr32common = LDRWui %stack.0.i, 0, debug-location !299 :: (dereferenceable load 4 from %ir.i); is.c:351:32
SU(7):   STRWroX %28.sub_32:gpr64, %35:gpr64common, %33:gpr64common, 0, 1, debug-location !298 :: (store 4 into %ir.arrayidx6); is.c:352:56
SU(9):   %38:gpr32common = nsw ADDWri %37:gpr32common, 1, 0, debug-location !299; is.c:351:32
SU(10):   STRWui %38:gpr32common, %stack.0.i, 0, debug-location !299 :: (store 4 into %ir.i); is.c:351:32

********** MI Scheduling **********
full_verify:%bb.3 for.end
  From: STRWui $wzr, %stack.1.j, 0, debug-location !303 :: (store 4 into %ir.j); is.c:356:7
    To: End RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui $wzr, %stack.1.j, 0, debug-location !303 :: (store 4 into %ir.j); is.c:356:7
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %5:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%5
  Single Issue       : false;
SU(2):   STRWui %5:gpr32, %stack.0.i, 0, debug-location !304 :: (store 4 into %ir.i); is.c:357:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%5
  Single Issue       : false;
SU(3):   %7:gpr32 = MOVi32imm 33554431
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %7:gpr32 = MOVi32imm 33554431
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(2) 1c
  BotQ.A RemainingLatency 1 + 1c > CritPath 1
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) STRWui %5:gpr32, %stack.0.i, 0, debug-location !304 :: (store 4 into %ir.i); is.c:357:12
  Ready @1c
  BotQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %5:gpr32 = MOVi32imm 1
  Ready @2c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.1.j, 0, debug-location !303 :: (store 4 into %ir.j); is.c:356:7
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   STRWui $wzr, %stack.1.j, 0, debug-location !303 :: (store 4 into %ir.j); is.c:356:7
SU(1):   %5:gpr32 = MOVi32imm 1
SU(2):   STRWui %5:gpr32, %stack.0.i, 0, debug-location !304 :: (store 4 into %ir.i); is.c:357:12
SU(3):   %7:gpr32 = MOVi32imm 33554431

********** MI Scheduling **********
full_verify:%bb.4 for.cond7
  From: %6:gpr32 = LDRWui %stack.0.i, 0, debug-location !307 :: (dereferenceable load 4 from %ir.i); is.c:357:17
    To: Bcc 12, %bb.8, implicit killed $nzcv, debug-location !310; is.c:357:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %6:gpr32 = LDRWui %stack.0.i, 0, debug-location !307 :: (dereferenceable load 4 from %ir.i); is.c:357:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%6
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWrr %6:gpr32, %7:gpr32, implicit-def $nzcv, debug-location !310; is.c:357:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%6
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.8, implicit killed $nzcv, debug-location !310; is.c:357:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWrr %6:gpr32, %7:gpr32, implicit-def $nzcv, debug-location !310; is.c:357:5
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %6:gpr32 = LDRWui %stack.0.i, 0, debug-location !307 :: (dereferenceable load 4 from %ir.i); is.c:357:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %6:gpr32 = LDRWui %stack.0.i, 0, debug-location !307 :: (dereferenceable load 4 from %ir.i); is.c:357:17
SU(1):   dead $wzr = SUBSWrr %6:gpr32, %7:gpr32, implicit-def $nzcv, debug-location !310; is.c:357:5

********** MI Scheduling **********
full_verify:%bb.5 for.body9
  From: %16:gpr64 = LDRSWui %stack.0.i, 0, debug-location !311 :: (dereferenceable load 4 from %ir.i); is.c:358:23
    To: Bcc 13, %bb.7, implicit killed $nzcv, debug-location !318; is.c:358:13
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %16:gpr64 = LDRSWui %stack.0.i, 0, debug-location !311 :: (dereferenceable load 4 from %ir.i); is.c:358:23
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(1): Data Latency=4 Reg=%16
  Single Issue       : false;
SU(1):   %18:gpr64common = ADDXrs %35:gpr64common, %16:gpr64, 2, debug-location !316; is.c:358:32
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(0): Data Latency=4 Reg=%16
  Successors:
    SU(3): Data Latency=1 Reg=%18
    SU(2): Data Latency=1 Reg=%18
  Single Issue       : false;
SU(2):   %19:gpr32 = LDURWi %18:gpr64common, -4, debug-location !314 :: (load 4 from %ir.arrayidx11); is.c:358:13
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(1): Data Latency=1 Reg=%18
  Successors:
    SU(4): Data Latency=4 Reg=%19
  Single Issue       : false;
SU(3):   %20:gpr32 = LDRWui %18:gpr64common, 0, debug-location !316 :: (load 4 from %ir.arrayidx13); is.c:358:32
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(1): Data Latency=1 Reg=%18
  Successors:
    SU(4): Data Latency=4 Reg=%20
  Single Issue       : false;
SU(4):   dead $wzr = SUBSWrr %19:gpr32, %20:gpr32, implicit-def $nzcv, debug-location !318; is.c:358:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%20
    SU(2): Data Latency=4 Reg=%19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 13, %bb.7, implicit killed $nzcv, debug-location !318; is.c:358:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) dead $wzr = SUBSWrr %19:gpr32, %20:gpr32, implicit-def $nzcv, debug-location !318; is.c:358:13
  Ready @1c
  BotQ.A TopLatency SU(4) 9c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) %16:gpr64 = LDRSWui %stack.0.i, 0, debug-location !311 :: (dereferenceable load 4 from %ir.i); is.c:358:23
  Ready @0c
  TopQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) %18:gpr64common = ADDXrs %35:gpr64common, %16:gpr64, 2, debug-location !316; is.c:358:32
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 3 2 
BotQ.A RemLatency SU(3) 5c
TopQ.A RemLatency SU(3) 5c
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %20:gpr32 = LDRWui %18:gpr64common, 0, debug-location !316 :: (load 4 from %ir.arrayidx13); is.c:358:32
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %19:gpr32 = LDURWi %18:gpr64common, -4, debug-location !314 :: (load 4 from %ir.arrayidx11); is.c:358:13
  Ready @6c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %16:gpr64 = LDRSWui %stack.0.i, 0, debug-location !311 :: (dereferenceable load 4 from %ir.i); is.c:358:23
SU(1):   %18:gpr64common = ADDXrs %35:gpr64common, %16:gpr64, 2, debug-location !316; is.c:358:32
SU(2):   %19:gpr32 = LDURWi %18:gpr64common, -4, debug-location !314 :: (load 4 from %ir.arrayidx11); is.c:358:13
SU(3):   %20:gpr32 = LDRWui %18:gpr64common, 0, debug-location !316 :: (load 4 from %ir.arrayidx13); is.c:358:32
SU(4):   dead $wzr = SUBSWrr %19:gpr32, %20:gpr32, implicit-def $nzcv, debug-location !318; is.c:358:13

********** MI Scheduling **********
full_verify:%bb.6 if.then
  From: %22:gpr32common = LDRWui %stack.1.j, 0, debug-location !319 :: (dereferenceable load 4 from %ir.j); is.c:359:14
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %22:gpr32common = LDRWui %stack.1.j, 0, debug-location !319 :: (dereferenceable load 4 from %ir.j); is.c:359:14
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%22
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %23:gpr32common = nsw ADDWri %22:gpr32common, 1, 0, debug-location !319; is.c:359:14
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%22
  Successors:
    SU(2): Data Latency=1 Reg=%23
  Single Issue       : false;
SU(2):   STRWui %23:gpr32common, %stack.1.j, 0, debug-location !319 :: (store 4 into %ir.j); is.c:359:14
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%23
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %23:gpr32common, %stack.1.j, 0, debug-location !319 :: (store 4 into %ir.j); is.c:359:14
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %23:gpr32common = nsw ADDWri %22:gpr32common, 1, 0, debug-location !319; is.c:359:14
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %22:gpr32common = LDRWui %stack.1.j, 0, debug-location !319 :: (dereferenceable load 4 from %ir.j); is.c:359:14
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %22:gpr32common = LDRWui %stack.1.j, 0, debug-location !319 :: (dereferenceable load 4 from %ir.j); is.c:359:14
SU(1):   %23:gpr32common = nsw ADDWri %22:gpr32common, 1, 0, debug-location !319; is.c:359:14
SU(2):   STRWui %23:gpr32common, %stack.1.j, 0, debug-location !319 :: (store 4 into %ir.j); is.c:359:14

********** MI Scheduling **********
full_verify:%bb.7 for.inc16
  From: %24:gpr32common = LDRWui %stack.0.i, 0, debug-location !321 :: (dereferenceable load 4 from %ir.i); is.c:357:32
    To: B %bb.4, debug-location !322; is.c:357:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %24:gpr32common = LDRWui %stack.0.i, 0, debug-location !321 :: (dereferenceable load 4 from %ir.i); is.c:357:32
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%24
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %25:gpr32common = nsw ADDWri %24:gpr32common, 1, 0, debug-location !321; is.c:357:32
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%24
  Successors:
    SU(2): Data Latency=1 Reg=%25
  Single Issue       : false;
SU(2):   STRWui %25:gpr32common, %stack.0.i, 0, debug-location !321 :: (store 4 into %ir.i); is.c:357:32
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%25
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.4, debug-location !322; is.c:357:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %25:gpr32common, %stack.0.i, 0, debug-location !321 :: (store 4 into %ir.i); is.c:357:32
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %25:gpr32common = nsw ADDWri %24:gpr32common, 1, 0, debug-location !321; is.c:357:32
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %24:gpr32common = LDRWui %stack.0.i, 0, debug-location !321 :: (dereferenceable load 4 from %ir.i); is.c:357:32
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %24:gpr32common = LDRWui %stack.0.i, 0, debug-location !321 :: (dereferenceable load 4 from %ir.i); is.c:357:32
SU(1):   %25:gpr32common = nsw ADDWri %24:gpr32common, 1, 0, debug-location !321; is.c:357:32
SU(2):   STRWui %25:gpr32common, %stack.0.i, 0, debug-location !321 :: (store 4 into %ir.i); is.c:357:32

********** MI Scheduling **********
full_verify:%bb.9 if.then20
  From: %14:gpr64 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str, debug-location !332; is.c:362:9
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def dead $w0, debug-location !332; is.c:362:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %14:gpr64 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str, debug-location !332; is.c:362:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%14
  Single Issue       : false;
SU(1):   $x0 = COPY %14:gpr64, debug-location !332; is.c:362:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%14
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $x1 = COPY %13:gpr64, debug-location !332; is.c:362:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def dead $w0, debug-location !332; is.c:362:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $x1 = COPY %13:gpr64, debug-location !332; is.c:362:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %14:gpr64, debug-location !332; is.c:362:9
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %14:gpr64 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str, debug-location !332; is.c:362:9
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   %14:gpr64 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str, debug-location !332; is.c:362:9
SU(1):   $x0 = COPY %14:gpr64, debug-location !332; is.c:362:9
SU(2):   $x1 = COPY %13:gpr64, debug-location !332; is.c:362:9

********** MI Scheduling **********
full_verify:%bb.10 if.else
  From: %10:gpr64common = ADRP target-flags(aarch64-page) @passed_verification, debug-location !334; is.c:365:28
    To: End RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %10:gpr64common = ADRP target-flags(aarch64-page) @passed_verification, debug-location !334; is.c:365:28
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(3): Data Latency=1 Reg=%10
    SU(1): Data Latency=1 Reg=%10
  Single Issue       : false;
SU(1):   %11:gpr32common = LDRWui %10:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !334 :: (dereferenceable load 4 from @passed_verification); is.c:365:28
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(0): Data Latency=1 Reg=%10
  Successors:
    SU(2): Data Latency=4 Reg=%11
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %12:gpr32common = nsw ADDWri %11:gpr32common, 1, 0, debug-location !334; is.c:365:28
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%11
  Successors:
    SU(3): Data Latency=1 Reg=%12
  Single Issue       : false;
SU(3):   STRWui %12:gpr32common, %10:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !334 :: (store 4 into @passed_verification); is.c:365:28
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%12
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=1 Reg=%10
  Single Issue       : false;
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) STRWui %12:gpr32common, %10:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !334 :: (store 4 into @passed_verification); is.c:365:28
  Ready @0c
  BotQ.A TopLatency SU(3) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %12:gpr32common = nsw ADDWri %11:gpr32common, 1, 0, debug-location !334; is.c:365:28
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %11:gpr32common = LDRWui %10:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !334 :: (dereferenceable load 4 from @passed_verification); is.c:365:28
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %10:gpr64common = ADRP target-flags(aarch64-page) @passed_verification, debug-location !334; is.c:365:28
  Ready @6c
  BotQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   %10:gpr64common = ADRP target-flags(aarch64-page) @passed_verification, debug-location !334; is.c:365:28
SU(1):   %11:gpr32common = LDRWui %10:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !334 :: (dereferenceable load 4 from @passed_verification); is.c:365:28
SU(2):   %12:gpr32common = nsw ADDWri %11:gpr32common, 1, 0, debug-location !334; is.c:365:28
SU(3):   STRWui %12:gpr32common, %10:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !334 :: (store 4 into @passed_verification); is.c:365:28

********** INTERVALS **********
%1 [128r,144r:0)  0@128r weight:0.000000e+00
%2 [48r,432B:0)  0@48r weight:0.000000e+00
%5 [480r,496r:0)  0@480r weight:0.000000e+00
%6 [544r,560r:0)  0@544r weight:0.000000e+00
%7 [512r,880B:0)  0@512r weight:0.000000e+00
%9 [896r,912r:0)  0@896r weight:0.000000e+00
%10 [1104r,1152r:0)  0@1104r weight:0.000000e+00
%11 [1120r,1136r:0)  0@1120r weight:0.000000e+00
%12 [1136r,1152r:0)  0@1136r weight:0.000000e+00
%13 [960r,1024r:0)  0@960r weight:0.000000e+00
%14 [992r,1008r:0)  0@992r weight:0.000000e+00
%16 [624r,640r:0)  0@624r weight:0.000000e+00
%18 [640r,672r:0)  0@640r weight:0.000000e+00
%19 [656r,688r:0)  0@656r weight:0.000000e+00
%20 [672r,688r:0)  0@672r weight:0.000000e+00
%22 [752r,768r:0)  0@752r weight:0.000000e+00
%23 [768r,784r:0)  0@768r weight:0.000000e+00
%24 [816r,832r:0)  0@816r weight:0.000000e+00
%25 [832r,848r:0)  0@832r weight:0.000000e+00
%26 [208r,224r:0)  0@208r weight:0.000000e+00
%27 [64r,432B:0)  0@64r weight:0.000000e+00
%28 [224r,376r:0)  0@224r weight:0.000000e+00
%29 [80r,432B:0)  0@80r weight:0.000000e+00
%30 [240r,320r:0)  0@240r weight:0.000000e+00
%31 [256r,320r:0)  0@256r weight:0.000000e+00
%32 [272r,288r:0)  0@272r weight:0.000000e+00
%33 [288r,376r:0)  0@288r weight:0.000000e+00
%35 [96r,880B:0)  0@96r weight:0.000000e+00
%37 [368r,384r:0)  0@368r weight:0.000000e+00
%38 [384r,400r:0)  0@384r weight:0.000000e+00
RegMasks: 1040r
********** MACHINEINSTRS **********
# Machine code for function full_verify: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

32B	  STRWui $wzr, %stack.0.i, 0, debug-location !284 :: (store 4 into %ir.i); is.c:351:12
48B	  %2:gpr32 = MOVi32imm 33554431
64B	  %27:gpr64common = MOVaddr target-flags(aarch64-page) @key_buff2, target-flags(aarch64-pageoff, aarch64-nc) @key_buff2
80B	  %29:gpr64common = ADRP target-flags(aarch64-page) @key_buff_ptr_global
96B	  %35:gpr64common = MOVaddr target-flags(aarch64-page) @key_array, target-flags(aarch64-pageoff, aarch64-nc) @key_array

112B	bb.1.for.cond:
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

128B	  %1:gpr32 = LDRWui %stack.0.i, 0, debug-location !287 :: (dereferenceable load 4 from %ir.i); is.c:351:17
144B	  dead $wzr = SUBSWrr %1:gpr32, %2:gpr32, implicit-def $nzcv, debug-location !290; is.c:351:5
160B	  Bcc 12, %bb.3, implicit killed $nzcv, debug-location !290; is.c:351:5
176B	  B %bb.2, debug-location !290; is.c:351:5

192B	bb.2.for.body:
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

208B	  %26:gpr64 = LDRSWui %stack.0.i, 0, debug-location !291 :: (dereferenceable load 4 from %ir.i); is.c:352:68
224B	  %28:gpr64 = LDRSWroX %27:gpr64common, %26:gpr64, 0, 1, debug-location !292 :: (load 4 from %ir.arrayidx2); is.c:352:58
240B	  %30:gpr64common = LDRXui %29:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @key_buff_ptr_global, debug-location !293 :: (dereferenceable load 8 from @key_buff_ptr_global); is.c:352:21
256B	  %31:gpr64 = UBFMXri %28:gpr64, 62, 61, debug-location !293; is.c:352:21
272B	  %32:gpr64common = LDRSWroX %30:gpr64common, %31:gpr64, 0, 0, debug-location !296 :: (load 4 from %ir.arrayidx4); is.c:352:19
288B	  %33:gpr64common = nsw SUBXri %32:gpr64common, 1, 0, debug-location !296; is.c:352:19
320B	  STRWroX %33.sub_32:gpr64common, %30:gpr64common, %31:gpr64, 0, 0, debug-location !296 :: (store 4 into %ir.arrayidx4); is.c:352:19
368B	  %37:gpr32common = LDRWui %stack.0.i, 0, debug-location !299 :: (dereferenceable load 4 from %ir.i); is.c:351:32
376B	  STRWroX %28.sub_32:gpr64, %35:gpr64common, %33:gpr64common, 0, 1, debug-location !298 :: (store 4 into %ir.arrayidx6); is.c:352:56
384B	  %38:gpr32common = nsw ADDWri %37:gpr32common, 1, 0, debug-location !299; is.c:351:32
400B	  STRWui %38:gpr32common, %stack.0.i, 0, debug-location !299 :: (store 4 into %ir.i); is.c:351:32
416B	  B %bb.1, debug-location !300; is.c:351:5

432B	bb.3.for.end:
	; predecessors: %bb.1
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

464B	  STRWui $wzr, %stack.1.j, 0, debug-location !303 :: (store 4 into %ir.j); is.c:356:7
480B	  %5:gpr32 = MOVi32imm 1
496B	  STRWui %5:gpr32, %stack.0.i, 0, debug-location !304 :: (store 4 into %ir.i); is.c:357:12
512B	  %7:gpr32 = MOVi32imm 33554431

528B	bb.4.for.cond7:
	; predecessors: %bb.3, %bb.7
	  successors: %bb.5(0x7c000000), %bb.8(0x04000000); %bb.5(96.88%), %bb.8(3.12%)

544B	  %6:gpr32 = LDRWui %stack.0.i, 0, debug-location !307 :: (dereferenceable load 4 from %ir.i); is.c:357:17
560B	  dead $wzr = SUBSWrr %6:gpr32, %7:gpr32, implicit-def $nzcv, debug-location !310; is.c:357:5
576B	  Bcc 12, %bb.8, implicit killed $nzcv, debug-location !310; is.c:357:5
592B	  B %bb.5, debug-location !310; is.c:357:5

608B	bb.5.for.body9:
	; predecessors: %bb.4
	  successors: %bb.6(0x40000000), %bb.7(0x40000000); %bb.6(50.00%), %bb.7(50.00%)

624B	  %16:gpr64 = LDRSWui %stack.0.i, 0, debug-location !311 :: (dereferenceable load 4 from %ir.i); is.c:358:23
640B	  %18:gpr64common = ADDXrs %35:gpr64common, %16:gpr64, 2, debug-location !316; is.c:358:32
656B	  %19:gpr32 = LDURWi %18:gpr64common, -4, debug-location !314 :: (load 4 from %ir.arrayidx11); is.c:358:13
672B	  %20:gpr32 = LDRWui %18:gpr64common, 0, debug-location !316 :: (load 4 from %ir.arrayidx13); is.c:358:32
688B	  dead $wzr = SUBSWrr %19:gpr32, %20:gpr32, implicit-def $nzcv, debug-location !318; is.c:358:13
704B	  Bcc 13, %bb.7, implicit killed $nzcv, debug-location !318; is.c:358:13
720B	  B %bb.6, debug-location !318; is.c:358:13

736B	bb.6.if.then:
	; predecessors: %bb.5
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

752B	  %22:gpr32common = LDRWui %stack.1.j, 0, debug-location !319 :: (dereferenceable load 4 from %ir.j); is.c:359:14
768B	  %23:gpr32common = nsw ADDWri %22:gpr32common, 1, 0, debug-location !319; is.c:359:14
784B	  STRWui %23:gpr32common, %stack.1.j, 0, debug-location !319 :: (store 4 into %ir.j); is.c:359:14

800B	bb.7.for.inc16:
	; predecessors: %bb.5, %bb.6
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

816B	  %24:gpr32common = LDRWui %stack.0.i, 0, debug-location !321 :: (dereferenceable load 4 from %ir.i); is.c:357:32
832B	  %25:gpr32common = nsw ADDWri %24:gpr32common, 1, 0, debug-location !321; is.c:357:32
848B	  STRWui %25:gpr32common, %stack.0.i, 0, debug-location !321 :: (store 4 into %ir.i); is.c:357:32
864B	  B %bb.4, debug-location !322; is.c:357:5

880B	bb.8.for.end18:
	; predecessors: %bb.4
	  successors: %bb.9(0x50000000), %bb.10(0x30000000); %bb.9(62.50%), %bb.10(37.50%)

896B	  %9:gpr32 = LDRWui %stack.1.j, 0, debug-location !325 :: (dereferenceable load 4 from %ir.j); is.c:361:9
912B	  CBZW %9:gpr32, %bb.10, debug-location !328; is.c:361:9
928B	  B %bb.9, debug-location !328; is.c:361:9

944B	bb.9.if.then20:
	; predecessors: %bb.8
	  successors: %bb.11(0x80000000); %bb.11(100.00%)

960B	  %13:gpr64 = LDRSWui %stack.1.j, 0, debug-location !329 :: (dereferenceable load 4 from %ir.j); is.c:362:72
976B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !332; is.c:362:9
992B	  %14:gpr64 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str, debug-location !332; is.c:362:9
1008B	  $x0 = COPY %14:gpr64, debug-location !332; is.c:362:9
1024B	  $x1 = COPY %13:gpr64, debug-location !332; is.c:362:9
1040B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def dead $w0, debug-location !332; is.c:362:9
1056B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !332; is.c:362:9
1072B	  B %bb.11, debug-location !333; is.c:363:5

1088B	bb.10.if.else:
	; predecessors: %bb.8
	  successors: %bb.11(0x80000000); %bb.11(100.00%)

1104B	  %10:gpr64common = ADRP target-flags(aarch64-page) @passed_verification, debug-location !334; is.c:365:28
1120B	  %11:gpr32common = LDRWui %10:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !334 :: (dereferenceable load 4 from @passed_verification); is.c:365:28
1136B	  %12:gpr32common = nsw ADDWri %11:gpr32common, 1, 0, debug-location !334; is.c:365:28
1152B	  STRWui %12:gpr32common, %10:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !334 :: (store 4 into @passed_verification); is.c:365:28

1168B	bb.11.if.end22:
	; predecessors: %bb.10, %bb.9

1184B	  RET_ReallyLR debug-location !335; is.c:366:1

# End machine code for function full_verify.

Before post-MI-sched:
# Machine code for function full_verify: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-8]
  fi#3: size=8, align=8, at location [SP-16]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8, debug-location !284; is.c:351:12
  frame-setup CFI_INSTRUCTION offset $w29, -16, debug-location !284; is.c:351:12
  STURWi $wzr, $fp, -4, debug-location !284 :: (store 4 into %ir.i); is.c:351:12
  $w9 = MOVNWi 65024, 16
  $x10 = ADRP target-flags(aarch64-page) @key_buff2
  renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @key_buff2, 0
  renamable $x11 = ADRP target-flags(aarch64-page) @key_buff_ptr_global
  $x8 = ADRP target-flags(aarch64-page) @key_array
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @key_array, 0

bb.1.for.cond:
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $w9, $x8, $x10, $x11
  renamable $w12 = LDURWi $fp, -4, debug-location !287 :: (dereferenceable load 4 from %ir.i); is.c:351:17
  $wzr = SUBSWrs killed renamable $w12, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !290; is.c:351:5
  Bcc 12, %bb.3, implicit $nzcv, debug-location !290; is.c:351:5

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $w9, $x8, $x10, $x11
  renamable $x12 = LDURSWi $fp, -4, debug-location !291 :: (dereferenceable load 4 from %ir.i); is.c:352:68
  renamable $x12 = LDRSWroX renamable $x10, killed renamable $x12, 0, 1, debug-location !292 :: (load 4 from %ir.arrayidx2); is.c:352:58
  renamable $x13 = LDRXui renamable $x11, target-flags(aarch64-pageoff, aarch64-nc) @key_buff_ptr_global, debug-location !293 :: (dereferenceable load 8 from @key_buff_ptr_global); is.c:352:21
  renamable $x14 = UBFMXri renamable $x12, 62, 61, debug-location !293; is.c:352:21
  renamable $x15 = LDRSWroX renamable $x13, renamable $x14, 0, 0, debug-location !296 :: (load 4 from %ir.arrayidx4); is.c:352:19
  renamable $x15 = nsw SUBXri killed renamable $x15, 1, 0, debug-location !296; is.c:352:19
  STRWroX renamable $w15, killed renamable $x13, killed renamable $x14, 0, 0, debug-location !296 :: (store 4 into %ir.arrayidx4); is.c:352:19
  renamable $w13 = LDURWi $fp, -4, debug-location !299 :: (dereferenceable load 4 from %ir.i); is.c:351:32
  STRWroX renamable $w12, renamable $x8, killed renamable $x15, 0, 1, implicit killed $x12, debug-location !298 :: (store 4 into %ir.arrayidx6); is.c:352:56
  renamable $w12 = nsw ADDWri killed renamable $w13, 1, 0, debug-location !299; is.c:351:32
  STURWi killed renamable $w12, $fp, -4, debug-location !299 :: (store 4 into %ir.i); is.c:351:32
  B %bb.1

bb.3.for.end:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $x8
  STRWui $wzr, $sp, 2, debug-location !303 :: (store 4 into %ir.j); is.c:356:7
  $w9 = MOVZWi 1, 0
  STURWi killed renamable $w9, $fp, -4, debug-location !304 :: (store 4 into %ir.i); is.c:357:12
  $w9 = MOVNWi 65024, 16

bb.4.for.cond7:
; predecessors: %bb.3, %bb.7
  successors: %bb.5(0x7c000000), %bb.8(0x04000000); %bb.5(96.88%), %bb.8(3.12%)
  liveins: $w9, $x8
  renamable $w10 = LDURWi $fp, -4, debug-location !307 :: (dereferenceable load 4 from %ir.i); is.c:357:17
  $wzr = SUBSWrs killed renamable $w10, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !310; is.c:357:5
  Bcc 12, %bb.8, implicit $nzcv, debug-location !310; is.c:357:5

bb.5.for.body9:
; predecessors: %bb.4
  successors: %bb.6(0x40000000), %bb.7(0x40000000); %bb.6(50.00%), %bb.7(50.00%)
  liveins: $w9, $x8
  renamable $x10 = LDURSWi $fp, -4, debug-location !311 :: (dereferenceable load 4 from %ir.i); is.c:358:23
  renamable $x10 = ADDXrs renamable $x8, killed renamable $x10, 2, debug-location !316; is.c:358:32
  renamable $w11, renamable $w10 = LDPWi renamable $x10, -1, debug-location !314 :: (load 4 from %ir.arrayidx11), (load 4 from %ir.arrayidx13); is.c:358:13
  $wzr = SUBSWrs killed renamable $w11, killed renamable $w10, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !318; is.c:358:13
  Bcc 13, %bb.7, implicit $nzcv, debug-location !318; is.c:358:13

bb.6.if.then:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $w9, $x8
  renamable $w10 = LDRWui $sp, 2, debug-location !319 :: (dereferenceable load 4 from %ir.j); is.c:359:14
  renamable $w10 = nsw ADDWri killed renamable $w10, 1, 0, debug-location !319; is.c:359:14
  STRWui killed renamable $w10, $sp, 2, debug-location !319 :: (store 4 into %ir.j); is.c:359:14

bb.7.for.inc16:
; predecessors: %bb.5, %bb.6
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $w9, $x8
  renamable $w10 = LDURWi $fp, -4, debug-location !321 :: (dereferenceable load 4 from %ir.i); is.c:357:32
  renamable $w10 = nsw ADDWri killed renamable $w10, 1, 0, debug-location !321; is.c:357:32
  STURWi killed renamable $w10, $fp, -4, debug-location !321 :: (store 4 into %ir.i); is.c:357:32
  B %bb.4

bb.8.for.end18:
; predecessors: %bb.4
  successors: %bb.9(0x50000000), %bb.10(0x30000000); %bb.9(62.50%), %bb.10(37.50%)

  renamable $w8 = LDRWui $sp, 2, debug-location !325 :: (dereferenceable load 4 from %ir.j); is.c:361:9
  CBZW killed renamable $w8, %bb.10, debug-location !328; is.c:361:9

bb.9.if.then20:
; predecessors: %bb.8
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  renamable $x1 = LDRSWui $sp, 2, debug-location !329 :: (dereferenceable load 4 from %ir.j); is.c:362:72
  $x0 = ADRP target-flags(aarch64-page) @.str, debug-location !332; is.c:362:9
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str, 0, debug-location !332; is.c:362:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def dead $w0, debug-location !332; is.c:362:9
  B %bb.11

bb.10.if.else:
; predecessors: %bb.8
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  renamable $x8 = ADRP target-flags(aarch64-page) @passed_verification, debug-location !334; is.c:365:28
  renamable $w9 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !334 :: (dereferenceable load 4 from @passed_verification); is.c:365:28
  renamable $w9 = nsw ADDWri killed renamable $w9, 1, 0, debug-location !334; is.c:365:28
  STRWui killed renamable $w9, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !334 :: (store 4 into @passed_verification); is.c:365:28

bb.11.if.end22:
; predecessors: %bb.10, %bb.9

  $fp, $lr = frame-destroy LDPXi $sp, 2, debug-location !335 :: (load 8 from %stack.3), (load 8 from %stack.2); is.c:366:1
  $sp = frame-destroy ADDXri $sp, 32, 0, debug-location !335; is.c:366:1
  RET undef $lr, debug-location !335; is.c:366:1

# End machine code for function full_verify.

********** MI Scheduling **********
full_verify:%bb.0 entry
  From: STURWi $wzr, $fp, -4, debug-location !284 :: (store 4 into %ir.i); is.c:351:12
    To: End RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   STURWi $wzr, $fp, -4, debug-location !284 :: (store 4 into %ir.i); is.c:351:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $w9 = MOVNWi 65024, 16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $x10 = ADRP target-flags(aarch64-page) @key_buff2
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x10
SU(3):   renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @key_buff2, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x10
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   renamable $x11 = ADRP target-flags(aarch64-page) @key_buff_ptr_global
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   $x8 = ADRP target-flags(aarch64-page) @key_array
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x8
SU(6):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @key_array, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Disabled scoreboard hazard recognizer
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 4 5 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(2) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x10 = ADRP target-flags(aarch64-page) @key_buff2
  Ready @0c
  TopQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 4 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(5) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) $x8 = ADRP target-flags(aarch64-page) @key_array
  Ready @1c
  TopQ.A BotLatency SU(5) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 6 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $w9 = MOVNWi 65024, 16
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 6 3 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  1 cycles 
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @key_buff2, 0
  Ready @3c
  TopQ.A TopLatency SU(3) 1c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 6 4 
  TopQ.A RemainingLatency 0 + 4c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  1 cycles 
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) renamable $x11 = ADRP target-flags(aarch64-page) @key_buff_ptr_global
  Ready @4c
  TopQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 6 
  TopQ.A RemainingLatency 0 + 5c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @key_array, 0
  Ready @5c
  TopQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURWi $wzr, $fp, -4, debug-location !284 :: (store 4 into %ir.i); is.c:351:12
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(2):   $x10 = ADRP target-flags(aarch64-page) @key_buff2
SU(5):   $x8 = ADRP target-flags(aarch64-page) @key_array
SU(1):   $w9 = MOVNWi 65024, 16
SU(3):   renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @key_buff2, 0
SU(4):   renamable $x11 = ADRP target-flags(aarch64-page) @key_buff_ptr_global
SU(6):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @key_array, 0
SU(0):   STURWi $wzr, $fp, -4, debug-location !284 :: (store 4 into %ir.i); is.c:351:12

********** MI Scheduling **********
full_verify:%bb.0 entry
  From: frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)
    To: frame-setup CFI_INSTRUCTION def_cfa $w29, 16
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   frame-setup STPXi $fp, $lr, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Anti Latency=0
SU(1):   $fp = frame-setup ADDXri $sp, 16, 0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Anti Latency=0
ExitSU:   frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) frame-setup STPXi $fp, $lr, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $fp = frame-setup ADDXri $sp, 16, 0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   frame-setup STPXi $fp, $lr, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)
SU(1):   $fp = frame-setup ADDXri $sp, 16, 0

Fixup kills for %bb.0
********** MI Scheduling **********
full_verify:%bb.1 for.cond
  From: renamable $w12 = LDURWi $fp, -4, debug-location !287 :: (dereferenceable load 4 from %ir.i); is.c:351:17
    To: Bcc 12, %bb.3, implicit $nzcv, debug-location !290; is.c:351:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w12 = LDURWi $fp, -4, debug-location !287 :: (dereferenceable load 4 from %ir.i); is.c:351:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w12
SU(1):   $wzr = SUBSWrs renamable $w12, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !290; is.c:351:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w12
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.3, implicit $nzcv, debug-location !290; is.c:351:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w12 = LDURWi $fp, -4, debug-location !287 :: (dereferenceable load 4 from %ir.i); is.c:351:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $wzr = SUBSWrs renamable $w12, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !290; is.c:351:5
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   renamable $w12 = LDURWi $fp, -4, debug-location !287 :: (dereferenceable load 4 from %ir.i); is.c:351:17
SU(1):   $wzr = SUBSWrs renamable $w12, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !290; is.c:351:5

Fixup kills for %bb.1
********** MI Scheduling **********
full_verify:%bb.2 for.body
  From: renamable $x12 = LDURSWi $fp, -4, debug-location !291 :: (dereferenceable load 4 from %ir.i); is.c:352:68
    To: B %bb.1
 RegionInstrs: 11
ScheduleDAGMI::schedule starting
SU(0):   renamable $x12 = LDURSWi $fp, -4, debug-location !291 :: (dereferenceable load 4 from %ir.i); is.c:352:68
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x12
    SU(10): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
SU(1):   renamable $x12 = LDRSWroX renamable $x10, renamable $x12, 0, 1, debug-location !292 :: (load 4 from %ir.arrayidx2); is.c:352:58
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 16
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x12
  Successors:
    SU(9): Out  Latency=1
    SU(8): Data Latency=4 Reg=$w12
    SU(8): Data Latency=0 Reg=$x12
    SU(3): Data Latency=4 Reg=$x12
    SU(6): Ord  Latency=0 Memory
SU(2):   renamable $x13 = LDRXui renamable $x11, target-flags(aarch64-pageoff, aarch64-nc) @key_buff_ptr_global, debug-location !293 :: (dereferenceable load 8 from @key_buff_ptr_global); is.c:352:21
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(7): Out  Latency=1
    SU(6): Data Latency=4 Reg=$x13
    SU(4): Data Latency=4 Reg=$x13
    SU(6): Ord  Latency=0 Memory
SU(3):   renamable $x14 = UBFMXri renamable $x12, 62, 61, debug-location !293; is.c:352:21
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 12
  Predecessors:
    SU(1): Data Latency=4 Reg=$x12
  Successors:
    SU(6): Data Latency=1 Reg=$x14
    SU(4): Data Latency=1 Reg=$x14
    SU(9): Anti Latency=0
SU(4):   renamable $x15 = LDRSWroX renamable $x13, renamable $x14, 0, 0, debug-location !296 :: (load 4 from %ir.arrayidx4); is.c:352:19
  # preds left       : 2
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 11
  Predecessors:
    SU(3): Data Latency=1 Reg=$x14
    SU(2): Data Latency=4 Reg=$x13
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$x15
    SU(7): Anti Latency=0
    SU(10): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
SU(5):   renamable $x15 = nsw SUBXri renamable $x15, 1, 0, debug-location !296; is.c:352:19
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 7
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$x15
  Successors:
    SU(6): Data Latency=1 Reg=$w15
    SU(8): Data Latency=1 Reg=$x15
SU(6):   STRWroX renamable $w15, renamable $x13, renamable $x14, 0, 0, debug-location !296 :: (store 4 into %ir.arrayidx4); is.c:352:19
  # preds left       : 7
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 6
  Predecessors:
    SU(5): Data Latency=1 Reg=$w15
    SU(4): Ord  Latency=0 Memory
    SU(3): Data Latency=1 Reg=$x14
    SU(2): Data Latency=4 Reg=$x13
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(7): Anti Latency=0
    SU(10): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=1 Memory
SU(7):   renamable $w13 = LDURWi $fp, -4, debug-location !299 :: (dereferenceable load 4 from %ir.i); is.c:351:32
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 15
  Height             : 5
  Predecessors:
    SU(6): Anti Latency=0
    SU(6): Ord  Latency=1 Memory
    SU(4): Anti Latency=0
    SU(2): Out  Latency=1
  Successors:
    SU(9): Data Latency=4 Reg=$w13
    SU(10): Ord  Latency=0 Memory
SU(8):   STRWroX renamable $w12, renamable $x8, renamable $x15, 0, 1, implicit $x12, debug-location !298 :: (store 4 into %ir.arrayidx6); is.c:352:56
  # preds left       : 5
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 1
  Predecessors:
    SU(6): Ord  Latency=0 Memory
    SU(5): Data Latency=1 Reg=$x15
    SU(4): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=$w12
    SU(1): Data Latency=0 Reg=$x12
  Successors:
    SU(9): Anti Latency=0
SU(9):   renamable $w12 = nsw ADDWri renamable $w13, 1, 0, debug-location !299; is.c:351:32
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 19
  Height             : 1
  Predecessors:
    SU(8): Anti Latency=0
    SU(7): Data Latency=4 Reg=$w13
    SU(3): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    SU(10): Data Latency=1 Reg=$w12
SU(10):   STURWi renamable $w12, $fp, -4, debug-location !299 :: (store 4 into %ir.i); is.c:351:32
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 20
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=$w12
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 20
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 20
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x12 = LDURSWi $fp, -4, debug-location !291 :: (dereferenceable load 4 from %ir.i); is.c:352:68
  Ready @0c
  TopQ.A BotLatency SU(0) 20c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x13 = LDRXui renamable $x11, target-flags(aarch64-pageoff, aarch64-nc) @key_buff_ptr_global, debug-location !293 :: (dereferenceable load 8 from @key_buff_ptr_global); is.c:352:21
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x12 = LDRSWroX renamable $x10, renamable $x12, 0, 1, debug-location !292 :: (load 4 from %ir.arrayidx2); is.c:352:58
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 8 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $x14 = UBFMXri renamable $x12, 62, 61, debug-location !293; is.c:352:21
  Ready @8c
  TopQ.A TopLatency SU(3) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 4
  Executed: 9c
  Critical: 4c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $x15 = LDRSWroX renamable $x13, renamable $x14, 0, 0, debug-location !296 :: (load 4 from %ir.arrayidx4); is.c:352:19
  Ready @9c
  TopQ.A TopLatency SU(4) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 5
  Executed: 10c
  Critical: 5c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 13 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $x15 = nsw SUBXri renamable $x15, 1, 0, debug-location !296; is.c:352:19
  Ready @13c
  TopQ.A TopLatency SU(5) 13c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 6
  Executed: 14c
  Critical: 6c, 6 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) STRWroX renamable $w15, renamable $x13, renamable $x14, 0, 0, debug-location !296 :: (store 4 into %ir.arrayidx4); is.c:352:19
  Ready @14c
  TopQ.A TopLatency SU(6) 14c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 7
  Executed: 15c
  Critical: 7c, 7 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 7 
  TopQ.A RemainingLatency 0 + 15c > CritPath 20
  Cand SU(8) ORDER                              
  Cand SU(7) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) renamable $w13 = LDURWi $fp, -4, debug-location !299 :: (dereferenceable load 4 from %ir.i); is.c:351:32
  Ready @15c
  TopQ.A TopLatency SU(7) 15c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 8
  Executed: 16c
  Critical: 8c, 8 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) STRWroX renamable $w12, renamable $x8, renamable $x15, 0, 1, implicit $x12, debug-location !298 :: (store 4 into %ir.arrayidx6); is.c:352:56
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 9
  Executed: 17c
  Critical: 9c, 9 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 19 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) renamable $w12 = nsw ADDWri renamable $w13, 1, 0, debug-location !299; is.c:351:32
  Ready @19c
  TopQ.A TopLatency SU(9) 19c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 10
  Executed: 20c
  Critical: 10c, 10 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) STURWi renamable $w12, $fp, -4, debug-location !299 :: (store 4 into %ir.i); is.c:351:32
  Ready @20c
  TopQ.A TopLatency SU(10) 20c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 11
  Executed: 21c
  Critical: 11c, 11 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   renamable $x12 = LDURSWi $fp, -4, debug-location !291 :: (dereferenceable load 4 from %ir.i); is.c:352:68
SU(2):   renamable $x13 = LDRXui renamable $x11, target-flags(aarch64-pageoff, aarch64-nc) @key_buff_ptr_global, debug-location !293 :: (dereferenceable load 8 from @key_buff_ptr_global); is.c:352:21
SU(1):   renamable $x12 = LDRSWroX renamable $x10, renamable $x12, 0, 1, debug-location !292 :: (load 4 from %ir.arrayidx2); is.c:352:58
SU(3):   renamable $x14 = UBFMXri renamable $x12, 62, 61, debug-location !293; is.c:352:21
SU(4):   renamable $x15 = LDRSWroX renamable $x13, renamable $x14, 0, 0, debug-location !296 :: (load 4 from %ir.arrayidx4); is.c:352:19
SU(5):   renamable $x15 = nsw SUBXri renamable $x15, 1, 0, debug-location !296; is.c:352:19
SU(6):   STRWroX renamable $w15, renamable $x13, renamable $x14, 0, 0, debug-location !296 :: (store 4 into %ir.arrayidx4); is.c:352:19
SU(7):   renamable $w13 = LDURWi $fp, -4, debug-location !299 :: (dereferenceable load 4 from %ir.i); is.c:351:32
SU(8):   STRWroX renamable $w12, renamable $x8, renamable $x15, 0, 1, implicit $x12, debug-location !298 :: (store 4 into %ir.arrayidx6); is.c:352:56
SU(9):   renamable $w12 = nsw ADDWri renamable $w13, 1, 0, debug-location !299; is.c:351:32
SU(10):   STURWi renamable $w12, $fp, -4, debug-location !299 :: (store 4 into %ir.i); is.c:351:32

Fixup kills for %bb.2
********** MI Scheduling **********
full_verify:%bb.3 for.end
  From: STRWui $wzr, $sp, 2, debug-location !303 :: (store 4 into %ir.j); is.c:356:7
    To: End RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   STRWui $wzr, $sp, 2, debug-location !303 :: (store 4 into %ir.j); is.c:356:7
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $w9 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(2): Data Latency=1 Reg=$w9
SU(2):   STURWi renamable $w9, $fp, -4, debug-location !304 :: (store 4 into %ir.i); is.c:357:12
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=$w9
  Successors:
    SU(3): Anti Latency=0
SU(3):   $w9 = MOVNWi 65024, 16
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $w9 = MOVZWi 1, 0
  Ready @0c
  TopQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) STURWi renamable $w9, $fp, -4, debug-location !304 :: (store 4 into %ir.i); is.c:357:12
  Ready @1c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(3) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) $w9 = MOVNWi 65024, 16
  Ready @2c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STRWui $wzr, $sp, 2, debug-location !303 :: (store 4 into %ir.j); is.c:356:7
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.3 ***
SU(1):   $w9 = MOVZWi 1, 0
SU(2):   STURWi renamable $w9, $fp, -4, debug-location !304 :: (store 4 into %ir.i); is.c:357:12
SU(3):   $w9 = MOVNWi 65024, 16
SU(0):   STRWui $wzr, $sp, 2, debug-location !303 :: (store 4 into %ir.j); is.c:356:7

Fixup kills for %bb.3
********** MI Scheduling **********
full_verify:%bb.4 for.cond7
  From: renamable $w10 = LDURWi $fp, -4, debug-location !307 :: (dereferenceable load 4 from %ir.i); is.c:357:17
    To: Bcc 12, %bb.8, implicit $nzcv, debug-location !310; is.c:357:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w10 = LDURWi $fp, -4, debug-location !307 :: (dereferenceable load 4 from %ir.i); is.c:357:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w10
SU(1):   $wzr = SUBSWrs renamable $w10, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !310; is.c:357:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w10
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.8, implicit $nzcv, debug-location !310; is.c:357:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w10 = LDURWi $fp, -4, debug-location !307 :: (dereferenceable load 4 from %ir.i); is.c:357:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $wzr = SUBSWrs renamable $w10, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !310; is.c:357:5
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   renamable $w10 = LDURWi $fp, -4, debug-location !307 :: (dereferenceable load 4 from %ir.i); is.c:357:17
SU(1):   $wzr = SUBSWrs renamable $w10, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !310; is.c:357:5

Fixup kills for %bb.4
********** MI Scheduling **********
full_verify:%bb.5 for.body9
  From: renamable $x10 = LDURSWi $fp, -4, debug-location !311 :: (dereferenceable load 4 from %ir.i); is.c:358:23
    To: Bcc 13, %bb.7, implicit $nzcv, debug-location !318; is.c:358:13
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $x10 = LDURSWi $fp, -4, debug-location !311 :: (dereferenceable load 4 from %ir.i); is.c:358:23
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x10
SU(1):   renamable $x10 = ADDXrs renamable $x8, renamable $x10, 2, debug-location !316; is.c:358:32
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x10
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x10
SU(2):   renamable $w11, renamable $w10 = LDPWi renamable $x10, -1, debug-location !314 :: (load 4 from %ir.arrayidx11), (load 4 from %ir.arrayidx13); is.c:358:13
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x10
  Successors:
    SU(3): Data Latency=4 Reg=$w11
    SU(3): Data Latency=4 Reg=$w10
SU(3):   $wzr = SUBSWrs renamable $w11, renamable $w10, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !318; is.c:358:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=$w11
    SU(2): Data Latency=4 Reg=$w10
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 13, %bb.7, implicit $nzcv, debug-location !318; is.c:358:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 10
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x10 = LDURSWi $fp, -4, debug-location !311 :: (dereferenceable load 4 from %ir.i); is.c:358:23
  Ready @0c
  TopQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x10 = ADDXrs renamable $x8, renamable $x10, 2, debug-location !316; is.c:358:32
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w11, renamable $w10 = LDPWi renamable $x10, -1, debug-location !314 :: (load 4 from %ir.arrayidx11), (load 4 from %ir.arrayidx13); is.c:358:13
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 9 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $wzr = SUBSWrs renamable $w11, renamable $w10, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !318; is.c:358:13
  Ready @9c
  TopQ.A TopLatency SU(3) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 4
  Executed: 10c
  Critical: 4c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   renamable $x10 = LDURSWi $fp, -4, debug-location !311 :: (dereferenceable load 4 from %ir.i); is.c:358:23
SU(1):   renamable $x10 = ADDXrs renamable $x8, renamable $x10, 2, debug-location !316; is.c:358:32
SU(2):   renamable $w11, renamable $w10 = LDPWi renamable $x10, -1, debug-location !314 :: (load 4 from %ir.arrayidx11), (load 4 from %ir.arrayidx13); is.c:358:13
SU(3):   $wzr = SUBSWrs renamable $w11, renamable $w10, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !318; is.c:358:13

Fixup kills for %bb.5
********** MI Scheduling **********
full_verify:%bb.6 if.then
  From: renamable $w10 = LDRWui $sp, 2, debug-location !319 :: (dereferenceable load 4 from %ir.j); is.c:359:14
    To: End RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w10 = LDRWui $sp, 2, debug-location !319 :: (dereferenceable load 4 from %ir.j); is.c:359:14
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w10
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w10 = nsw ADDWri renamable $w10, 1, 0, debug-location !319; is.c:359:14
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w10
  Successors:
    SU(2): Data Latency=1 Reg=$w10
SU(2):   STRWui renamable $w10, $sp, 2, debug-location !319 :: (store 4 into %ir.j); is.c:359:14
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w10
    SU(0): Ord  Latency=0 Memory
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w10 = LDRWui $sp, 2, debug-location !319 :: (dereferenceable load 4 from %ir.j); is.c:359:14
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w10 = nsw ADDWri renamable $w10, 1, 0, debug-location !319; is.c:359:14
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w10, $sp, 2, debug-location !319 :: (store 4 into %ir.j); is.c:359:14
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   renamable $w10 = LDRWui $sp, 2, debug-location !319 :: (dereferenceable load 4 from %ir.j); is.c:359:14
SU(1):   renamable $w10 = nsw ADDWri renamable $w10, 1, 0, debug-location !319; is.c:359:14
SU(2):   STRWui renamable $w10, $sp, 2, debug-location !319 :: (store 4 into %ir.j); is.c:359:14

Fixup kills for %bb.6
********** MI Scheduling **********
full_verify:%bb.7 for.inc16
  From: renamable $w10 = LDURWi $fp, -4, debug-location !321 :: (dereferenceable load 4 from %ir.i); is.c:357:32
    To: B %bb.4
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w10 = LDURWi $fp, -4, debug-location !321 :: (dereferenceable load 4 from %ir.i); is.c:357:32
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w10
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w10 = nsw ADDWri renamable $w10, 1, 0, debug-location !321; is.c:357:32
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w10
  Successors:
    SU(2): Data Latency=1 Reg=$w10
SU(2):   STURWi renamable $w10, $fp, -4, debug-location !321 :: (store 4 into %ir.i); is.c:357:32
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w10
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.4
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w10 = LDURWi $fp, -4, debug-location !321 :: (dereferenceable load 4 from %ir.i); is.c:357:32
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w10 = nsw ADDWri renamable $w10, 1, 0, debug-location !321; is.c:357:32
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w10, $fp, -4, debug-location !321 :: (store 4 into %ir.i); is.c:357:32
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   renamable $w10 = LDURWi $fp, -4, debug-location !321 :: (dereferenceable load 4 from %ir.i); is.c:357:32
SU(1):   renamable $w10 = nsw ADDWri renamable $w10, 1, 0, debug-location !321; is.c:357:32
SU(2):   STURWi renamable $w10, $fp, -4, debug-location !321 :: (store 4 into %ir.i); is.c:357:32

Fixup kills for %bb.7
Fixup kills for %bb.8
********** MI Scheduling **********
full_verify:%bb.9 if.then20
  From: renamable $x1 = LDRSWui $sp, 2, debug-location !329 :: (dereferenceable load 4 from %ir.j); is.c:362:72
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def dead $w0, debug-location !332; is.c:362:9
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $x1 = LDRSWui $sp, 2, debug-location !329 :: (dereferenceable load 4 from %ir.j); is.c:362:72
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(1):   $x0 = ADRP target-flags(aarch64-page) @.str, debug-location !332; is.c:362:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
SU(2):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str, 0, debug-location !332; is.c:362:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def dead $w0, debug-location !332; is.c:362:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x1 = LDRSWui $sp, 2, debug-location !329 :: (dereferenceable load 4 from %ir.j); is.c:362:72
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ADRP target-flags(aarch64-page) @.str, debug-location !332; is.c:362:9
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str, 0, debug-location !332; is.c:362:9
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   renamable $x1 = LDRSWui $sp, 2, debug-location !329 :: (dereferenceable load 4 from %ir.j); is.c:362:72
SU(1):   $x0 = ADRP target-flags(aarch64-page) @.str, debug-location !332; is.c:362:9
SU(2):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str, 0, debug-location !332; is.c:362:9

Fixup kills for %bb.9
********** MI Scheduling **********
full_verify:%bb.10 if.else
  From: renamable $x8 = ADRP target-flags(aarch64-page) @passed_verification, debug-location !334; is.c:365:28
    To: End RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @passed_verification, debug-location !334; is.c:365:28
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(3): Data Latency=1 Reg=$x8
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w9 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !334 :: (dereferenceable load 4 from @passed_verification); is.c:365:28
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$w9
    SU(3): Ord  Latency=0 Memory
SU(2):   renamable $w9 = nsw ADDWri renamable $w9, 1, 0, debug-location !334; is.c:365:28
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w9
  Successors:
    SU(3): Data Latency=1 Reg=$w9
SU(3):   STRWui renamable $w9, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !334 :: (store 4 into @passed_verification); is.c:365:28
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=$w9
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=1 Reg=$x8
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @passed_verification, debug-location !334; is.c:365:28
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w9 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !334 :: (dereferenceable load 4 from @passed_verification); is.c:365:28
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w9 = nsw ADDWri renamable $w9, 1, 0, debug-location !334; is.c:365:28
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STRWui renamable $w9, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !334 :: (store 4 into @passed_verification); is.c:365:28
  Ready @6c
  TopQ.A TopLatency SU(3) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @passed_verification, debug-location !334; is.c:365:28
SU(1):   renamable $w9 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !334 :: (dereferenceable load 4 from @passed_verification); is.c:365:28
SU(2):   renamable $w9 = nsw ADDWri renamable $w9, 1, 0, debug-location !334; is.c:365:28
SU(3):   STRWui renamable $w9, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !334 :: (store 4 into @passed_verification); is.c:365:28

Fixup kills for %bb.10
Fixup kills for %bb.11
Before MISched:
# Machine code for function rank: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=8, align=8, at location [SP]
  fi#4: size=8, align=8, at location [SP]
  fi#5: size=4, align=4, at location [SP]
  fi#6: size=4, align=4, at location [SP]
  fi#7: size=4, align=4, at location [SP]
  fi#8: size=4, align=4, at location [SP]
Function Live Ins: $w0 in %3

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $w0
  undef %7.sub_32:gpr64 = COPY $w0
  STRWui %7.sub_32:gpr64, %stack.0.iteration.addr, 0 :: (store 4 into %ir.iteration.addr)
  %4:gpr32 = MOVi32imm 11
  STRWui %4:gpr32, %stack.5.shift, 0, debug-location !350 :: (store 4 into %ir.shift); is.c:380:9
  %5:gpr64common = MOVaddr target-flags(aarch64-page) @key_array, target-flags(aarch64-pageoff, aarch64-nc) @key_array, debug-location !355; is.c:384:5
  %6:gpr64sp = ADDXrx %5:gpr64common, %7.sub_32:gpr64, 50, debug-location !355; is.c:384:5
  %9:gpr64 = SBFMXri %7:gpr64, 0, 31, debug-location !353; is.c:384:28
  STRWui %9.sub_32:gpr64, %6:gpr64sp, 0, debug-location !356 :: (store 4 into %ir.arrayidx); is.c:384:26
  %11:gpr32 = MOVi32imm 2097152
  %12:gpr32 = nsw SUBWrr %11:gpr32, %7.sub_32:gpr64, debug-location !358; is.c:385:53
  STRWui %12:gpr32, %6:gpr64sp, 10, debug-location !362 :: (store 4 into %ir.arrayidx2); is.c:385:43
  STRWui $wzr, %stack.1.i, 0, debug-location !363 :: (store 4 into %ir.i); is.c:389:12
  %165:gpr64common = MOVaddr target-flags(aarch64-page) @test_index_array, target-flags(aarch64-pageoff, aarch64-nc) @test_index_array
  %169:gpr64common = MOVaddr target-flags(aarch64-page) @partial_verify_vals, target-flags(aarch64-pageoff, aarch64-nc) @partial_verify_vals

bb.1.for.cond:
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %14:gpr32common = LDRWui %stack.1.i, 0, debug-location !366 :: (dereferenceable load 4 from %ir.i); is.c:389:17
  dead $wzr = SUBSWri %14:gpr32common, 4, 0, implicit-def $nzcv, debug-location !369; is.c:389:5
  Bcc 12, %bb.3, implicit killed $nzcv, debug-location !369; is.c:389:5
  B %bb.2, debug-location !369; is.c:389:5

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %162:gpr64common = LDRSWui %stack.1.i, 0, debug-location !370 :: (dereferenceable load 4 from %ir.i); is.c:390:61
  %164:gpr64 = UBFMXri %162:gpr64common, 62, 61, debug-location !371; is.c:390:44
  %166:gpr64 = LDRSWroX %165:gpr64common, %164:gpr64, 0, 0, debug-location !371 :: (load 4 from %ir.arrayidx4); is.c:390:44
  %168:gpr32 = LDRWroX %5:gpr64common, %166:gpr64, 0, 1, debug-location !372 :: (load 4 from %ir.arrayidx6); is.c:390:34
  STRWroX %168:gpr32, %169:gpr64common, %164:gpr64, 0, 0, debug-location !375 :: (store 4 into %ir.arrayidx8); is.c:390:32
  %170:gpr32common = nsw ADDWri %162.sub_32:gpr64common, 1, 0, debug-location !376; is.c:389:39
  STRWui %170:gpr32common, %stack.1.i, 0, debug-location !376 :: (store 4 into %ir.i); is.c:389:39
  B %bb.1, debug-location !377; is.c:389:5

bb.3.for.end:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  STRWui $wzr, %stack.1.i, 0, debug-location !380 :: (store 4 into %ir.i); is.c:395:12
  %159:gpr64common = MOVaddr target-flags(aarch64-page) @bucket_size, target-flags(aarch64-pageoff, aarch64-nc) @bucket_size

bb.4.for.cond9:
; predecessors: %bb.3, %bb.5
  successors: %bb.5(0x7c000000), %bb.6(0x04000000); %bb.5(96.88%), %bb.6(3.12%)

  %17:gpr32common = LDRWui %stack.1.i, 0, debug-location !383 :: (dereferenceable load 4 from %ir.i); is.c:395:17
  dead $wzr = SUBSWri %17:gpr32common, 1023, 0, implicit-def $nzcv, debug-location !386; is.c:395:5
  Bcc 12, %bb.6, implicit killed $nzcv, debug-location !386; is.c:395:5
  B %bb.5, debug-location !386; is.c:395:5

bb.5.for.body11:
; predecessors: %bb.4
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %157:gpr64common = LDRSWui %stack.1.i, 0, debug-location !387 :: (dereferenceable load 4 from %ir.i); is.c:396:21
  STRWroX $wzr, %159:gpr64common, %157:gpr64common, 0, 1, debug-location !389 :: (store 4 into %ir.arrayidx13); is.c:396:24
  %161:gpr32common = nsw ADDWri %157.sub_32:gpr64common, 1, 0, debug-location !390; is.c:395:35
  STRWui %161:gpr32common, %stack.1.i, 0, debug-location !390 :: (store 4 into %ir.i); is.c:395:35
  B %bb.4, debug-location !391; is.c:395:5

bb.6.for.end16:
; predecessors: %bb.4
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  STRWui $wzr, %stack.1.i, 0, debug-location !394 :: (store 4 into %ir.i); is.c:399:12
  %21:gpr32 = MOVi32imm 33554431

bb.7.for.cond17:
; predecessors: %bb.6, %bb.8
  successors: %bb.8(0x7c000000), %bb.9(0x04000000); %bb.8(96.88%), %bb.9(3.12%)

  %20:gpr32 = LDRWui %stack.1.i, 0, debug-location !397 :: (dereferenceable load 4 from %ir.i); is.c:399:17
  dead $wzr = SUBSWrr %20:gpr32, %21:gpr32, implicit-def $nzcv, debug-location !400; is.c:399:5
  Bcc 12, %bb.9, implicit killed $nzcv, debug-location !400; is.c:399:5
  B %bb.8, debug-location !400; is.c:399:5

bb.8.for.body19:
; predecessors: %bb.7
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %142:gpr64common = LDRSWui %stack.1.i, 0, debug-location !401 :: (dereferenceable load 4 from %ir.i); is.c:400:31
  %145:gpr32 = LDRWroX %5:gpr64common, %142:gpr64common, 0, 1, debug-location !402 :: (load 4 from %ir.arrayidx21); is.c:400:21
  undef %147.sub_32:gpr64 = LDRWui %stack.5.shift, 0, debug-location !403 :: (dereferenceable load 4 from %ir.shift); is.c:400:37
  undef %150.sub_32:gpr64 = ASRVWr %145:gpr32, %147.sub_32:gpr64, debug-location !404; is.c:400:34
  %152:gpr64 = SBFMXri %150:gpr64, 62, 31, debug-location !405; is.c:400:9
  %154:gpr32common = LDRWroX %159:gpr64common, %152:gpr64, 0, 0, debug-location !406 :: (load 4 from %ir.arrayidx23); is.c:400:43
  %155:gpr32common = nsw ADDWri %154:gpr32common, 1, 0, debug-location !406; is.c:400:43
  STRWroX %155:gpr32common, %159:gpr64common, %152:gpr64, 0, 0, debug-location !406 :: (store 4 into %ir.arrayidx23); is.c:400:43
  %156:gpr32common = nsw ADDWri %142.sub_32:gpr64common, 1, 0, debug-location !407; is.c:399:32
  STRWui %156:gpr32common, %stack.1.i, 0, debug-location !407 :: (store 4 into %ir.i); is.c:399:32
  B %bb.7, debug-location !408; is.c:399:5

bb.9.for.end27:
; predecessors: %bb.7
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %23:gpr64common = ADRP target-flags(aarch64-page) @bucket_ptrs, debug-location !411; is.c:403:20
  STRWui $wzr, %23:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @bucket_ptrs, debug-location !411 :: (store 4 into `i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @bucket_ptrs, i64 0, i64 0)`, align 16); is.c:403:20
  %25:gpr32 = MOVi32imm 1
  STRWui %25:gpr32, %stack.1.i, 0, debug-location !412 :: (store 4 into %ir.i); is.c:404:12
  %136:gpr64common = MOVaddr target-flags(aarch64-page) @bucket_ptrs, target-flags(aarch64-pageoff, aarch64-nc) @bucket_ptrs

bb.10.for.cond28:
; predecessors: %bb.9, %bb.11
  successors: %bb.11(0x7c000000), %bb.12(0x04000000); %bb.11(96.88%), %bb.12(3.12%)

  %26:gpr32common = LDRWui %stack.1.i, 0, debug-location !415 :: (dereferenceable load 4 from %ir.i); is.c:404:17
  dead $wzr = SUBSWri %26:gpr32common, 1023, 0, implicit-def $nzcv, debug-location !418; is.c:404:5
  Bcc 12, %bb.12, implicit killed $nzcv, debug-location !418; is.c:404:5
  B %bb.11, debug-location !418; is.c:404:5

bb.11.for.body30:
; predecessors: %bb.10
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %132:gpr64common = LDRSWui %stack.1.i, 0, debug-location !419 :: (dereferenceable load 4 from %ir.i); is.c:405:38
  %134:gpr64common = UBFMXri %132:gpr64common, 62, 61, debug-location !420; is.c:405:40
  %135:gpr64common = SUBXri %134:gpr64common, 4, 0, debug-location !421; is.c:405:26
  %137:gpr32 = LDRWroX %136:gpr64common, %135:gpr64common, 0, 0, debug-location !421 :: (load 4 from %ir.arrayidx33); is.c:405:26
  %139:gpr32 = LDRWroX %159:gpr64common, %135:gpr64common, 0, 0, debug-location !424 :: (load 4 from %ir.arrayidx36); is.c:405:47
  %140:gpr32 = nsw ADDWrr %137:gpr32, %139:gpr32, debug-location !425; is.c:405:45
  STRWroX %140:gpr32, %136:gpr64common, %134:gpr64common, 0, 0, debug-location !428 :: (store 4 into %ir.arrayidx39); is.c:405:24
  %141:gpr32common = nsw ADDWri %132.sub_32:gpr64common, 1, 0, debug-location !429; is.c:404:35
  STRWui %141:gpr32common, %stack.1.i, 0, debug-location !429 :: (store 4 into %ir.i); is.c:404:35
  B %bb.10, debug-location !430; is.c:404:5

bb.12.for.end42:
; predecessors: %bb.10
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  STRWui $wzr, %stack.1.i, 0, debug-location !433 :: (store 4 into %ir.i); is.c:408:12
  %30:gpr32 = MOVi32imm 33554431
  %130:gpr64common = MOVaddr target-flags(aarch64-page) @key_buff2, target-flags(aarch64-pageoff, aarch64-nc) @key_buff2

bb.13.for.cond43:
; predecessors: %bb.12, %bb.14
  successors: %bb.14(0x7c000000), %bb.15(0x04000000); %bb.14(96.88%), %bb.15(3.12%)

  %29:gpr32 = LDRWui %stack.1.i, 0, debug-location !436 :: (dereferenceable load 4 from %ir.i); is.c:408:17
  dead $wzr = SUBSWrr %29:gpr32, %30:gpr32, implicit-def $nzcv, debug-location !439; is.c:408:5
  Bcc 12, %bb.15, implicit killed $nzcv, debug-location !439; is.c:408:5
  B %bb.14, debug-location !439; is.c:408:5

bb.14.for.body45:
; predecessors: %bb.13
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  %115:gpr64common = LDRSWui %stack.1.i, 0, debug-location !440 :: (dereferenceable load 4 from %ir.i); is.c:409:25
  %118:gpr32 = LDRWroX %5:gpr64common, %115:gpr64common, 0, 1, debug-location !442 :: (load 4 from %ir.arrayidx47); is.c:409:15
  STRWui %118:gpr32, %stack.6.key, 0, debug-location !443 :: (store 4 into %ir.key); is.c:409:13
  undef %120.sub_32:gpr64 = LDRWui %stack.5.shift, 0, debug-location !446 :: (dereferenceable load 4 from %ir.shift); is.c:410:38
  undef %123.sub_32:gpr64 = ASRVWr %118:gpr32, %120.sub_32:gpr64, debug-location !447; is.c:410:35
  %125:gpr64 = SBFMXri %123:gpr64, 62, 31, debug-location !448; is.c:410:19
  %127:gpr64common = LDRSWroX %136:gpr64common, %125:gpr64, 0, 0, debug-location !449 :: (load 4 from %ir.arrayidx50); is.c:410:44
  %129:gpr32common = nsw ADDWri %127.sub_32:gpr64common, 1, 0, debug-location !449; is.c:410:44
  STRWroX %129:gpr32common, %136:gpr64common, %125:gpr64, 0, 0, debug-location !449 :: (store 4 into %ir.arrayidx50); is.c:410:44
  STRWroX %118:gpr32, %130:gpr64common, %127:gpr64common, 0, 1, debug-location !451 :: (store 4 into %ir.arrayidx53); is.c:410:48
  %131:gpr32common = nsw ADDWri %115.sub_32:gpr64common, 1, 0, debug-location !452; is.c:408:32
  STRWui %131:gpr32common, %stack.1.i, 0, debug-location !452 :: (store 4 into %ir.i); is.c:408:32
  B %bb.13, debug-location !453; is.c:408:5

bb.15.for.end56:
; predecessors: %bb.13
  successors: %bb.16(0x80000000); %bb.16(100.00%)

  STRXui %130:gpr64common, %stack.4.key_buff_ptr2, 0, debug-location !456 :: (store 8 into %ir.key_buff_ptr2); is.c:413:19
  STRWui $wzr, %stack.1.i, 0, debug-location !457 :: (store 4 into %ir.i); is.c:422:12
  %112:gpr64common = MOVaddr target-flags(aarch64-page) @key_buff1, target-flags(aarch64-pageoff, aarch64-nc) @key_buff1

bb.16.for.cond57:
; predecessors: %bb.15, %bb.17
  successors: %bb.17(0x7c000000), %bb.18(0x04000000); %bb.17(96.88%), %bb.18(3.12%)

  %34:gpr32common = LDRWui %stack.1.i, 0, debug-location !460 :: (dereferenceable load 4 from %ir.i); is.c:422:17
  dead $wzr = SUBSWri %34:gpr32common, 512, 12, implicit-def $nzcv, debug-location !463; is.c:422:5
  Bcc 10, %bb.18, implicit killed $nzcv, debug-location !463; is.c:422:5
  B %bb.17, debug-location !463; is.c:422:5

bb.17.for.body59:
; predecessors: %bb.16
  successors: %bb.16(0x80000000); %bb.16(100.00%)

  %110:gpr64common = LDRSWui %stack.1.i, 0, debug-location !464 :: (dereferenceable load 4 from %ir.i); is.c:423:19
  STRWroX $wzr, %112:gpr64common, %110:gpr64common, 0, 1, debug-location !466 :: (store 4 into %ir.arrayidx61); is.c:423:22
  %114:gpr32common = nsw ADDWri %110.sub_32:gpr64common, 1, 0, debug-location !467; is.c:422:31
  STRWui %114:gpr32common, %stack.1.i, 0, debug-location !467 :: (store 4 into %ir.i); is.c:422:31
  B %bb.16, debug-location !468; is.c:422:5

bb.18.for.end64:
; predecessors: %bb.16
  successors: %bb.19(0x80000000); %bb.19(100.00%)

  STRXui %112:gpr64common, %stack.3.key_buff_ptr, 0, debug-location !471 :: (store 8 into %ir.key_buff_ptr); is.c:427:18
  STRWui $wzr, %stack.1.i, 0, debug-location !472 :: (store 4 into %ir.i); is.c:433:12
  %39:gpr32 = MOVi32imm 33554431

bb.19.for.cond65:
; predecessors: %bb.18, %bb.20
  successors: %bb.20(0x7c000000), %bb.21(0x04000000); %bb.20(96.88%), %bb.21(3.12%)

  %38:gpr32 = LDRWui %stack.1.i, 0, debug-location !475 :: (dereferenceable load 4 from %ir.i); is.c:433:17
  dead $wzr = SUBSWrr %38:gpr32, %39:gpr32, implicit-def $nzcv, debug-location !478; is.c:433:5
  Bcc 12, %bb.21, implicit killed $nzcv, debug-location !478; is.c:433:5
  B %bb.20, debug-location !478; is.c:433:5

bb.20.for.body67:
; predecessors: %bb.19
  successors: %bb.19(0x80000000); %bb.19(100.00%)

  %101:gpr64common = LDRXui %stack.3.key_buff_ptr, 0, debug-location !479 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:434:9
  %102:gpr64common = LDRXui %stack.4.key_buff_ptr2, 0, debug-location !480 :: (dereferenceable load 8 from %ir.key_buff_ptr2); is.c:434:22
  %103:gpr64 = LDRSWui %stack.1.i, 0, debug-location !481 :: (dereferenceable load 4 from %ir.i); is.c:434:36
  %104:gpr64 = LDRSWroX %102:gpr64common, %103:gpr64, 0, 1, debug-location !480 :: (load 4 from %ir.arrayidx69); is.c:434:22
  %105:gpr64 = UBFMXri %104:gpr64, 62, 61, debug-location !479; is.c:434:9
  %106:gpr32common = LDRWroX %101:gpr64common, %105:gpr64, 0, 0, debug-location !482 :: (load 4 from %ir.arrayidx71); is.c:434:39
  %107:gpr32common = nsw ADDWri %106:gpr32common, 1, 0, debug-location !482; is.c:434:39
  STRWroX %107:gpr32common, %101:gpr64common, %105:gpr64, 0, 0, debug-location !482 :: (store 4 into %ir.arrayidx71); is.c:434:39
  %108:gpr32common = LDRWui %stack.1.i, 0, debug-location !483 :: (dereferenceable load 4 from %ir.i); is.c:433:32
  %109:gpr32common = nsw ADDWri %108:gpr32common, 1, 0, debug-location !483; is.c:433:32
  STRWui %109:gpr32common, %stack.1.i, 0, debug-location !483 :: (store 4 into %ir.i); is.c:433:32
  B %bb.19, debug-location !484; is.c:433:5

bb.21.for.end75:
; predecessors: %bb.19
  successors: %bb.22(0x80000000); %bb.22(100.00%)

  STRWui $wzr, %stack.1.i, 0, debug-location !487 :: (store 4 into %ir.i); is.c:440:12
  %43:gpr32 = MOVi32imm 2097150

bb.22.for.cond76:
; predecessors: %bb.21, %bb.23
  successors: %bb.23(0x7c000000), %bb.24(0x04000000); %bb.23(96.88%), %bb.24(3.12%)

  %42:gpr32 = LDRWui %stack.1.i, 0, debug-location !490 :: (dereferenceable load 4 from %ir.i); is.c:440:17
  dead $wzr = SUBSWrr %42:gpr32, %43:gpr32, implicit-def $nzcv, debug-location !493; is.c:440:5
  Bcc 12, %bb.24, implicit killed $nzcv, debug-location !493; is.c:440:5
  B %bb.23, debug-location !493; is.c:440:5

bb.23.for.body78:
; predecessors: %bb.22
  successors: %bb.22(0x80000000); %bb.22(100.00%)

  %93:gpr64 = LDRXui %stack.3.key_buff_ptr, 0, debug-location !494 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:441:32
  %94:gpr64 = LDRSWui %stack.1.i, 0, debug-location !495 :: (dereferenceable load 4 from %ir.i); is.c:441:45
  %95:gpr64common = ADDXrs %93:gpr64, %94:gpr64, 2, debug-location !494; is.c:441:32
  %96:gpr32 = LDRWui %95:gpr64common, 0, debug-location !494 :: (load 4 from %ir.arrayidx80); is.c:441:32
  %97:gpr32 = LDRWui %95:gpr64common, 1, debug-location !499 :: (load 4 from %ir.arrayidx83); is.c:441:29
  %98:gpr32 = nsw ADDWrr %97:gpr32, %96:gpr32, debug-location !499; is.c:441:29
  STRWui %98:gpr32, %95:gpr64common, 1, debug-location !499 :: (store 4 into %ir.arrayidx83); is.c:441:29
  %99:gpr32common = LDRWui %stack.1.i, 0, debug-location !500 :: (dereferenceable load 4 from %ir.i); is.c:440:35
  %100:gpr32common = nsw ADDWri %99:gpr32common, 1, 0, debug-location !500; is.c:440:35
  STRWui %100:gpr32common, %stack.1.i, 0, debug-location !500 :: (store 4 into %ir.i); is.c:440:35
  B %bb.22, debug-location !501; is.c:440:5

bb.24.for.end87:
; predecessors: %bb.22
  successors: %bb.25(0x80000000); %bb.25(100.00%)

  STRWui $wzr, %stack.1.i, 0, debug-location !504 :: (store 4 into %ir.i); is.c:446:12
  %57:gpr32 = MOVi32imm 33554431
  %67:gpr64common = MOVaddr target-flags(aarch64-page) @test_rank_array, target-flags(aarch64-pageoff, aarch64-nc) @test_rank_array
  %84:gpr32 = MOVi32imm 1
  %81:gpr64common = ADRP target-flags(aarch64-page) @passed_verification
  %89:gpr64 = MOVaddr target-flags(aarch64-page) @.str.1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1

bb.25.for.cond88:
; predecessors: %bb.24, %bb.39
  successors: %bb.26(0x7c000000), %bb.40(0x04000000); %bb.26(96.88%), %bb.40(3.12%)

  %46:gpr32common = LDRWui %stack.1.i, 0, debug-location !507 :: (dereferenceable load 4 from %ir.i); is.c:446:17
  dead $wzr = SUBSWri %46:gpr32common, 4, 0, implicit-def $nzcv, debug-location !510; is.c:446:5
  Bcc 12, %bb.40, implicit killed $nzcv, debug-location !510; is.c:446:5
  B %bb.26, debug-location !510; is.c:446:5

bb.26.for.body90:
; predecessors: %bb.25
  successors: %bb.27(0x60000000), %bb.39(0x20000000); %bb.27(75.00%), %bb.39(25.00%)

  %53:gpr64 = LDRSWui %stack.1.i, 0, debug-location !511 :: (dereferenceable load 4 from %ir.i); is.c:447:33
  %55:gpr32common = LDRWroX %169:gpr64common, %53:gpr64, 0, 1, debug-location !513 :: (load 4 from %ir.arrayidx92); is.c:447:13
  STRWui %55:gpr32common, %stack.2.k, 0, debug-location !514 :: (store 4 into %ir.k); is.c:447:11
  dead $wzr = SUBSWri %55:gpr32common, 1, 0, implicit-def $nzcv, debug-location !520; is.c:448:19
  Bcc 11, %bb.39, implicit killed $nzcv, debug-location !520; is.c:448:19
  B %bb.27, debug-location !520; is.c:448:19

bb.27.for.body90:
; predecessors: %bb.26
  successors: %bb.28(0x55555555), %bb.39(0x2aaaaaab); %bb.28(66.67%), %bb.39(33.33%)

  dead $wzr = SUBSWrr %55:gpr32common, %57:gpr32, implicit-def $nzcv, debug-location !520; is.c:448:19
  Bcc 12, %bb.39, implicit killed $nzcv, debug-location !520; is.c:448:19
  B %bb.28, debug-location !520; is.c:448:19

bb.28.if.then:
; predecessors: %bb.27
  successors: %bb.31(0x10000000), %bb.29(0x70000000); %bb.31(12.50%), %bb.29(87.50%)

  %61:gpr64 = LDRXui %stack.3.key_buff_ptr, 0, debug-location !524 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:449:33
  %62:gpr64 = LDRSWui %stack.2.k, 0, debug-location !525 :: (dereferenceable load 4 from %ir.k); is.c:449:46
  %63:gpr64common = ADDXrs %61:gpr64, %62:gpr64, 2, debug-location !524; is.c:449:33
  %64:gpr32 = LDURWi %63:gpr64common, -4, debug-location !524 :: (load 4 from %ir.arrayidx97); is.c:449:33
  STRWui %64:gpr32, %stack.7.key_rank, 0, debug-location !523 :: (store 4 into %ir.key_rank); is.c:449:22
  STRWui $wzr, %stack.8.failed, 0, debug-location !528 :: (store 4 into %ir.failed); is.c:450:17
  %66:gpr64common = LDRSWui %stack.1.i, 0, debug-location !529 :: (dereferenceable load 4 from %ir.i); is.c:496:21
  %68:gpr32 = LDRWroX %67:gpr64common, %66:gpr64common, 0, 1, debug-location !537 :: (load 4 from %ir.arrayidx104); is.c:0
  %69:gpr32 = LDRWui %stack.0.iteration.addr, 0, debug-location !537 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:0
  dead $wzr = SUBSWri %66.sub_32:gpr64common, 1, 0, implicit-def $nzcv, debug-location !534; is.c:496:28
  Bcc 0, %bb.31, implicit killed $nzcv, debug-location !534; is.c:496:28
  B %bb.29, debug-location !534; is.c:496:28

bb.29.if.then:
; predecessors: %bb.28
  successors: %bb.31(0x12492492), %bb.30(0x6db6db6e); %bb.31(14.29%), %bb.30(85.71%)

  dead $wzr = SUBSWri %66.sub_32:gpr64common, 2, 0, implicit-def $nzcv, debug-location !534; is.c:496:28
  Bcc 0, %bb.31, implicit killed $nzcv, debug-location !534; is.c:496:28
  B %bb.30, debug-location !534; is.c:496:28

bb.30.if.then:
; predecessors: %bb.29
  successors: %bb.31(0x2aaaaaab), %bb.34(0x55555555); %bb.31(33.33%), %bb.34(66.67%)

  dead $wzr = SUBSWri %66.sub_32:gpr64common, 4, 0, implicit-def $nzcv, debug-location !534; is.c:496:28
  Bcc 1, %bb.34, implicit killed $nzcv, debug-location !534; is.c:496:28
  B %bb.31, debug-location !534; is.c:496:28

bb.31.if.then102:
; predecessors: %bb.28, %bb.29, %bb.30
  successors: %bb.32(0x40000000), %bb.33(0x40000000); %bb.32(50.00%), %bb.33(50.00%)

  %79:gpr32 = nsw ADDWrr %68:gpr32, %69:gpr32, debug-location !538; is.c:497:56
  dead $wzr = SUBSWrr %64:gpr32, %79:gpr32, implicit-def $nzcv, debug-location !542; is.c:497:25
  Bcc 0, %bb.33, implicit killed $nzcv, debug-location !542; is.c:497:25
  B %bb.32, debug-location !542; is.c:497:25

bb.32.if.then107:
; predecessors: %bb.31
  successors: %bb.37(0x80000000); %bb.37(100.00%)

  STRWui %84:gpr32, %stack.8.failed, 0, debug-location !543 :: (store 4 into %ir.failed); is.c:498:32
  B %bb.37, debug-location !544; is.c:498:25

bb.33.if.else:
; predecessors: %bb.31
  successors: %bb.37(0x80000000); %bb.37(100.00%)

  %82:gpr32common = LDRWui %81:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !545 :: (dereferenceable load 4 from @passed_verification); is.c:500:44
  %83:gpr32common = nsw ADDWri %82:gpr32common, 1, 0, debug-location !545; is.c:500:44
  STRWui %83:gpr32common, %81:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !545 :: (store 4 into @passed_verification); is.c:500:44
  B %bb.37

bb.34.if.else109:
; predecessors: %bb.30
  successors: %bb.35(0x40000000), %bb.36(0x40000000); %bb.35(50.00%), %bb.36(50.00%)

  %73:gpr32 = nsw SUBWrr %68:gpr32, %69:gpr32, debug-location !546; is.c:503:56
  dead $wzr = SUBSWrr %64:gpr32, %73:gpr32, implicit-def $nzcv, debug-location !550; is.c:503:25
  Bcc 0, %bb.36, implicit killed $nzcv, debug-location !550; is.c:503:25
  B %bb.35, debug-location !550; is.c:503:25

bb.35.if.then114:
; predecessors: %bb.34
  successors: %bb.37(0x80000000); %bb.37(100.00%)

  STRWui %84:gpr32, %stack.8.failed, 0, debug-location !551 :: (store 4 into %ir.failed); is.c:504:32
  B %bb.37, debug-location !552; is.c:504:25

bb.36.if.else115:
; predecessors: %bb.34
  successors: %bb.37(0x80000000); %bb.37(100.00%)

  %76:gpr32common = LDRWui %81:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !553 :: (dereferenceable load 4 from @passed_verification); is.c:506:44
  %77:gpr32common = nsw ADDWri %76:gpr32common, 1, 0, debug-location !553; is.c:506:44
  STRWui %77:gpr32common, %81:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !553 :: (store 4 into @passed_verification); is.c:506:44

bb.37.if.end118:
; predecessors: %bb.36, %bb.35, %bb.33, %bb.32
  successors: %bb.38(0x40000000), %bb.39(0x40000000); %bb.38(50.00%), %bb.39(50.00%)

  %85:gpr32common = LDRWui %stack.8.failed, 0, debug-location !554 :: (dereferenceable load 4 from %ir.failed); is.c:538:17
  dead $wzr = SUBSWri %85:gpr32common, 1, 0, implicit-def $nzcv, debug-location !557; is.c:538:17
  Bcc 1, %bb.39, implicit killed $nzcv, debug-location !557; is.c:538:17
  B %bb.38, debug-location !557; is.c:538:17

bb.38.if.then120:
; predecessors: %bb.37
  successors: %bb.39(0x80000000); %bb.39(100.00%)

  %87:gpr32 = LDRWui %stack.0.iteration.addr, 0, debug-location !558 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:541:24
  %88:gpr32 = LDRWui %stack.1.i, 0, debug-location !559 :: (dereferenceable load 4 from %ir.i); is.c:541:40
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !560; is.c:539:17
  $x0 = COPY %89:gpr64, debug-location !560; is.c:539:17
  $w1 = COPY %87:gpr32, debug-location !560; is.c:539:17
  $w2 = COPY %88:gpr32, debug-location !560; is.c:539:17
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $w1, implicit killed $w2, implicit-def $sp, implicit-def dead $w0, debug-location !560; is.c:539:17
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !560; is.c:539:17

bb.39.for.inc123:
; predecessors: %bb.26, %bb.27, %bb.37, %bb.38
  successors: %bb.25(0x80000000); %bb.25(100.00%)

  %91:gpr32common = LDRWui %stack.1.i, 0, debug-location !561 :: (dereferenceable load 4 from %ir.i); is.c:446:39
  %92:gpr32common = nsw ADDWri %91:gpr32common, 1, 0, debug-location !561; is.c:446:39
  STRWui %92:gpr32common, %stack.1.i, 0, debug-location !561 :: (store 4 into %ir.i); is.c:446:39
  B %bb.25, debug-location !562; is.c:446:5

bb.40.for.end125:
; predecessors: %bb.25
  successors: %bb.41(0x40000000), %bb.42(0x40000000); %bb.41(50.00%), %bb.42(50.00%)

  %48:gpr32common = LDRWui %stack.0.iteration.addr, 0, debug-location !565 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:549:9
  dead $wzr = SUBSWri %48:gpr32common, 10, 0, implicit-def $nzcv, debug-location !568; is.c:549:9
  Bcc 1, %bb.42, implicit killed $nzcv, debug-location !568; is.c:549:9
  B %bb.41, debug-location !568; is.c:549:9

bb.41.if.then127:
; predecessors: %bb.40
  successors: %bb.42(0x80000000); %bb.42(100.00%)

  %50:gpr64 = LDRXui %stack.3.key_buff_ptr, 0, debug-location !569 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:550:31
  %51:gpr64common = ADRP target-flags(aarch64-page) @key_buff_ptr_global, debug-location !570; is.c:550:29
  STRXui %50:gpr64, %51:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @key_buff_ptr_global, debug-location !570 :: (store 8 into @key_buff_ptr_global); is.c:550:29

bb.42.if.end128:
; predecessors: %bb.40, %bb.41

  RET_ReallyLR debug-location !572; is.c:551:1

# End machine code for function rank.

********** MI Scheduling **********
rank:%bb.0 entry
  From: undef %7.sub_32:gpr64 = COPY $w0
    To: End RegionInstrs: 14
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   undef %7.sub_32:gpr64 = COPY $w0
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(9): Data Latency=0 Reg=%7
    SU(6): Data Latency=0 Reg=%7
    SU(5): Data Latency=0 Reg=%7
    SU(1): Data Latency=0 Reg=%7
  Single Issue       : false;
SU(1):   STRWui %7.sub_32:gpr64, %stack.0.iteration.addr, 0 :: (store 4 into %ir.iteration.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%7
  Single Issue       : false;
SU(2):   %4:gpr32 = MOVi32imm 11
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%4
  Single Issue       : false;
SU(3):   STRWui %4:gpr32, %stack.5.shift, 0, debug-location !350 :: (store 4 into %ir.shift); is.c:380:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%4
  Single Issue       : false;
SU(4):   %5:gpr64common = MOVaddr target-flags(aarch64-page) @key_array, target-flags(aarch64-pageoff, aarch64-nc) @key_array, debug-location !355; is.c:384:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Data Latency=1 Reg=%5
  Single Issue       : false;
SU(5):   %6:gpr64sp = ADDXrx %5:gpr64common, %7.sub_32:gpr64, 50, debug-location !355; is.c:384:5
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%5
    SU(0): Data Latency=0 Reg=%7
  Successors:
    SU(10): Data Latency=1 Reg=%6
    SU(7): Data Latency=1 Reg=%6
  Single Issue       : false;
SU(6):   %9:gpr64 = SBFMXri %7:gpr64, 0, 31, debug-location !353; is.c:384:28
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Data Latency=0 Reg=%7
  Successors:
    SU(7): Data Latency=1 Reg=%9
  Single Issue       : false;
SU(7):   STRWui %9.sub_32:gpr64, %6:gpr64sp, 0, debug-location !356 :: (store 4 into %ir.arrayidx); is.c:384:26
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%6
    SU(6): Data Latency=1 Reg=%9
  Single Issue       : false;
SU(8):   %11:gpr32 = MOVi32imm 2097152
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(9): Data Latency=1 Reg=%11
  Single Issue       : false;
SU(9):   %12:gpr32 = nsw SUBWrr %11:gpr32, %7.sub_32:gpr64, debug-location !358; is.c:385:53
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(8): Data Latency=1 Reg=%11
    SU(0): Data Latency=0 Reg=%7
  Successors:
    SU(10): Data Latency=1 Reg=%12
  Single Issue       : false;
SU(10):   STRWui %12:gpr32, %6:gpr64sp, 10, debug-location !362 :: (store 4 into %ir.arrayidx2); is.c:385:43
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=%12
    SU(5): Data Latency=1 Reg=%6
  Single Issue       : false;
SU(11):   STRWui $wzr, %stack.1.i, 0, debug-location !363 :: (store 4 into %ir.i); is.c:389:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(12):   %165:gpr64common = MOVaddr target-flags(aarch64-page) @test_index_array, target-flags(aarch64-pageoff, aarch64-nc) @test_index_array
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(13):   %169:gpr64common = MOVaddr target-flags(aarch64-page) @partial_verify_vals, target-flags(aarch64-pageoff, aarch64-nc) @partial_verify_vals
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 2
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 12 11 10 7 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 8 11 12 13 
Picking from Bot:
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) undef %7.sub_32:gpr64 = COPY $w0
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 12 11 10 7 3 1 
Queue TopQ.P: 
Queue TopQ.A: 13 2 4 8 11 12 6 1 
Picking from Bot:
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(13) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) %169:gpr64common = MOVaddr target-flags(aarch64-page) @partial_verify_vals, target-flags(aarch64-pageoff, aarch64-nc) @partial_verify_vals
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 12 11 10 7 3 
Queue TopQ.P: 
Queue TopQ.A: 1 2 4 8 11 12 6 
BotQ.A RemLatency SU(10) 2c
  BotQ.A RemainingLatency 2 + 1c > CritPath 2
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(12) ORDER                              
  Cand SU(10) BOT-PATH                  2 cycles 
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(10) STRWui %12:gpr32, %6:gpr64sp, 10, debug-location !362 :: (store 4 into %ir.arrayidx2); is.c:385:43
  Ready @1c
  BotQ.A TopLatency SU(10) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 12 11 3 7 9 
Queue TopQ.P: 
Queue TopQ.A: 1 2 4 8 11 12 6 
BotQ.A RemLatency SU(7) 2c
  BotQ.A RemainingLatency 2 + 2c > CritPath 2
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(12) ORDER                              
  Cand SU(3) BOT-PATH                  1 cycles 
  Cand SU(7) BOT-PATH                  2 cycles 
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(7) STRWui %9.sub_32:gpr64, %6:gpr64sp, 0, debug-location !356 :: (store 4 into %ir.arrayidx); is.c:384:26
  Ready @2c
  BotQ.A TopLatency SU(7) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 12 11 3 9 5 6 
Queue TopQ.P: 
Queue TopQ.A: 1 2 4 8 11 12 6 
  BotQ.A RemainingLatency 0 + 3c > CritPath 2
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(12) ORDER                              
  Cand SU(3) BOT-PATH                  1 cycles 
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(9) %12:gpr32 = nsw SUBWrr %11:gpr32, %7.sub_32:gpr64, debug-location !358; is.c:385:53
  Ready @3c
  BotQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 12 11 3 6 5 8 
Queue TopQ.P: 
Queue TopQ.A: 1 2 4 8 11 12 6 
  BotQ.A RemainingLatency 0 + 4c > CritPath 2
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(12) ORDER                              
  Cand SU(3) BOT-PATH                  1 cycles 
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) %6:gpr64sp = ADDXrx %5:gpr64common, %7.sub_32:gpr64, 50, debug-location !355; is.c:384:5
  Ready @4c
  BotQ.A TopLatency SU(5) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 12 11 3 6 8 4 
Queue TopQ.P: 
Queue TopQ.A: 1 2 4 8 11 12 6 
  BotQ.A RemainingLatency 0 + 5c > CritPath 2
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(12) ORDER                              
  Cand SU(3) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(3) STRWui %4:gpr32, %stack.5.shift, 0, debug-location !350 :: (store 4 into %ir.shift); is.c:380:9
  Ready @5c
  BotQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 12 11 4 6 8 2 
Queue TopQ.P: 
Queue TopQ.A: 1 2 4 8 11 12 6 
  BotQ.A RemainingLatency 0 + 6c > CritPath 2
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(12) %165:gpr64common = MOVaddr target-flags(aarch64-page) @test_index_array, target-flags(aarch64-pageoff, aarch64-nc) @test_index_array
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 11 4 6 8 
Queue TopQ.P: 
Queue TopQ.A: 1 2 4 8 11 6 
  BotQ.A RemainingLatency 0 + 7c > CritPath 2
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(11) STRWui $wzr, %stack.1.i, 0, debug-location !363 :: (store 4 into %ir.i); is.c:389:12
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 8 4 6 
Queue TopQ.P: 
Queue TopQ.A: 1 2 4 8 6 
  BotQ.A RemainingLatency 0 + 8c > CritPath 2
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %11:gpr32 = MOVi32imm 2097152
  Ready @8c
  BotQ.A BotLatency SU(8) 2c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 6 4 
Queue TopQ.P: 
Queue TopQ.A: 1 2 4 6 
  BotQ.A RemainingLatency 0 + 9c > CritPath 2
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %9:gpr64 = SBFMXri %7:gpr64, 0, 31, debug-location !353; is.c:384:28
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 4 
Queue TopQ.P: 
Queue TopQ.A: 1 2 4 
  BotQ.A RemainingLatency 0 + 10c > CritPath 2
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %5:gpr64common = MOVaddr target-flags(aarch64-page) @key_array, target-flags(aarch64-pageoff, aarch64-nc) @key_array, debug-location !355; is.c:384:5
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 1 2 
  BotQ.A RemainingLatency 0 + 11c > CritPath 2
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %4:gpr32 = MOVi32imm 11
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %7.sub_32:gpr64, %stack.0.iteration.addr, 0 :: (store 4 into %ir.iteration.addr)
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   undef %7.sub_32:gpr64 = COPY $w0
SU(1):   STRWui %7.sub_32:gpr64, %stack.0.iteration.addr, 0 :: (store 4 into %ir.iteration.addr)
SU(2):   %4:gpr32 = MOVi32imm 11
SU(4):   %5:gpr64common = MOVaddr target-flags(aarch64-page) @key_array, target-flags(aarch64-pageoff, aarch64-nc) @key_array, debug-location !355; is.c:384:5
SU(6):   %9:gpr64 = SBFMXri %7:gpr64, 0, 31, debug-location !353; is.c:384:28
SU(8):   %11:gpr32 = MOVi32imm 2097152
SU(11):   STRWui $wzr, %stack.1.i, 0, debug-location !363 :: (store 4 into %ir.i); is.c:389:12
SU(12):   %165:gpr64common = MOVaddr target-flags(aarch64-page) @test_index_array, target-flags(aarch64-pageoff, aarch64-nc) @test_index_array
SU(3):   STRWui %4:gpr32, %stack.5.shift, 0, debug-location !350 :: (store 4 into %ir.shift); is.c:380:9
SU(5):   %6:gpr64sp = ADDXrx %5:gpr64common, %7.sub_32:gpr64, 50, debug-location !355; is.c:384:5
SU(9):   %12:gpr32 = nsw SUBWrr %11:gpr32, %7.sub_32:gpr64, debug-location !358; is.c:385:53
SU(7):   STRWui %9.sub_32:gpr64, %6:gpr64sp, 0, debug-location !356 :: (store 4 into %ir.arrayidx); is.c:384:26
SU(10):   STRWui %12:gpr32, %6:gpr64sp, 10, debug-location !362 :: (store 4 into %ir.arrayidx2); is.c:385:43
SU(13):   %169:gpr64common = MOVaddr target-flags(aarch64-page) @partial_verify_vals, target-flags(aarch64-pageoff, aarch64-nc) @partial_verify_vals

********** MI Scheduling **********
rank:%bb.1 for.cond
  From: %14:gpr32common = LDRWui %stack.1.i, 0, debug-location !366 :: (dereferenceable load 4 from %ir.i); is.c:389:17
    To: Bcc 12, %bb.3, implicit killed $nzcv, debug-location !369; is.c:389:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %14:gpr32common = LDRWui %stack.1.i, 0, debug-location !366 :: (dereferenceable load 4 from %ir.i); is.c:389:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%14
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %14:gpr32common, 4, 0, implicit-def $nzcv, debug-location !369; is.c:389:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%14
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.3, implicit killed $nzcv, debug-location !369; is.c:389:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %14:gpr32common, 4, 0, implicit-def $nzcv, debug-location !369; is.c:389:5
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %14:gpr32common = LDRWui %stack.1.i, 0, debug-location !366 :: (dereferenceable load 4 from %ir.i); is.c:389:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   %14:gpr32common = LDRWui %stack.1.i, 0, debug-location !366 :: (dereferenceable load 4 from %ir.i); is.c:389:17
SU(1):   dead $wzr = SUBSWri %14:gpr32common, 4, 0, implicit-def $nzcv, debug-location !369; is.c:389:5

********** MI Scheduling **********
rank:%bb.2 for.body
  From: %162:gpr64common = LDRSWui %stack.1.i, 0, debug-location !370 :: (dereferenceable load 4 from %ir.i); is.c:390:61
    To: B %bb.1, debug-location !377; is.c:389:5
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %162:gpr64common = LDRSWui %stack.1.i, 0, debug-location !370 :: (dereferenceable load 4 from %ir.i); is.c:390:61
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(5): Data Latency=4 Reg=%162
    SU(1): Data Latency=4 Reg=%162
    SU(6): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %164:gpr64 = UBFMXri %162:gpr64common, 62, 61, debug-location !371; is.c:390:44
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=%162
  Successors:
    SU(4): Data Latency=1 Reg=%164
    SU(2): Data Latency=1 Reg=%164
  Single Issue       : false;
SU(2):   %166:gpr64 = LDRSWroX %165:gpr64common, %164:gpr64, 0, 0, debug-location !371 :: (load 4 from %ir.arrayidx4); is.c:390:44
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(1): Data Latency=1 Reg=%164
  Successors:
    SU(3): Data Latency=4 Reg=%166
  Single Issue       : false;
SU(3):   %168:gpr32 = LDRWroX %5:gpr64common, %166:gpr64, 0, 1, debug-location !372 :: (load 4 from %ir.arrayidx6); is.c:390:34
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%166
  Successors:
    SU(4): Data Latency=4 Reg=%168
  Single Issue       : false;
SU(4):   STRWroX %168:gpr32, %169:gpr64common, %164:gpr64, 0, 0, debug-location !375 :: (store 4 into %ir.arrayidx8); is.c:390:32
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(3): Data Latency=4 Reg=%168
    SU(1): Data Latency=1 Reg=%164
  Single Issue       : false;
SU(5):   %170:gpr32common = nsw ADDWri %162.sub_32:gpr64common, 1, 0, debug-location !376; is.c:389:39
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%162
  Successors:
    SU(6): Data Latency=1 Reg=%170
  Single Issue       : false;
SU(6):   STRWui %170:gpr32common, %stack.1.i, 0, debug-location !376 :: (store 4 into %ir.i); is.c:389:39
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%170
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.1, debug-location !377; is.c:389:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 4 
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) %162:gpr64common = LDRSWui %stack.1.i, 0, debug-location !370 :: (dereferenceable load 4 from %ir.i); is.c:390:61
  Ready @0c
  TopQ.A BotLatency SU(0) 13c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 4 
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 5 1 
TopQ.A RemLatency SU(1) 9c
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(5) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) STRWui %170:gpr32common, %stack.1.i, 0, debug-location !376 :: (store 4 into %ir.i); is.c:389:39
  Ready @0c
  BotQ.A TopLatency SU(6) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 5 
Queue TopQ.P: 
Queue TopQ.A: 5 1 
BotQ.A RemLatency SU(4) 13c
  BotQ.A RemainingLatency 13 + 1c > CritPath 13
TopQ.A RemLatency SU(1) 9c
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) STRWroX %168:gpr32, %169:gpr64common, %164:gpr64, 0, 0, debug-location !375 :: (store 4 into %ir.arrayidx8); is.c:390:32
  Ready @1c
  BotQ.A TopLatency SU(4) 13c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %170:gpr32common = nsw ADDWri %162.sub_32:gpr64common, 1, 0, debug-location !376; is.c:389:39
  Ready @2c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %168:gpr32 = LDRWroX %5:gpr64common, %166:gpr64, 0, 1, debug-location !372 :: (load 4 from %ir.arrayidx6); is.c:390:34
  Ready @5c
  BotQ.A BotLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 9 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %166:gpr64 = LDRSWroX %165:gpr64common, %164:gpr64, 0, 0, debug-location !371 :: (load 4 from %ir.arrayidx4); is.c:390:44
  Ready @9c
  BotQ.A BotLatency SU(2) 8c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 5
  Executed: 10c
  Critical: 5c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %164:gpr64 = UBFMXri %162:gpr64common, 62, 61, debug-location !371; is.c:390:44
  Ready @10c
  BotQ.A BotLatency SU(1) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 6
  Executed: 11c
  Critical: 6c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %162:gpr64common = LDRSWui %stack.1.i, 0, debug-location !370 :: (dereferenceable load 4 from %ir.i); is.c:390:61
SU(1):   %164:gpr64 = UBFMXri %162:gpr64common, 62, 61, debug-location !371; is.c:390:44
SU(2):   %166:gpr64 = LDRSWroX %165:gpr64common, %164:gpr64, 0, 0, debug-location !371 :: (load 4 from %ir.arrayidx4); is.c:390:44
SU(3):   %168:gpr32 = LDRWroX %5:gpr64common, %166:gpr64, 0, 1, debug-location !372 :: (load 4 from %ir.arrayidx6); is.c:390:34
SU(5):   %170:gpr32common = nsw ADDWri %162.sub_32:gpr64common, 1, 0, debug-location !376; is.c:389:39
SU(4):   STRWroX %168:gpr32, %169:gpr64common, %164:gpr64, 0, 0, debug-location !375 :: (store 4 into %ir.arrayidx8); is.c:390:32
SU(6):   STRWui %170:gpr32common, %stack.1.i, 0, debug-location !376 :: (store 4 into %ir.i); is.c:389:39

********** MI Scheduling **********
rank:%bb.3 for.end
  From: STRWui $wzr, %stack.1.i, 0, debug-location !380 :: (store 4 into %ir.i); is.c:395:12
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui $wzr, %stack.1.i, 0, debug-location !380 :: (store 4 into %ir.i); is.c:395:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %159:gpr64common = MOVaddr target-flags(aarch64-page) @bucket_size, target-flags(aarch64-pageoff, aarch64-nc) @bucket_size
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %159:gpr64common = MOVaddr target-flags(aarch64-page) @bucket_size, target-flags(aarch64-pageoff, aarch64-nc) @bucket_size
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.1.i, 0, debug-location !380 :: (store 4 into %ir.i); is.c:395:12
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   STRWui $wzr, %stack.1.i, 0, debug-location !380 :: (store 4 into %ir.i); is.c:395:12
SU(1):   %159:gpr64common = MOVaddr target-flags(aarch64-page) @bucket_size, target-flags(aarch64-pageoff, aarch64-nc) @bucket_size

********** MI Scheduling **********
rank:%bb.4 for.cond9
  From: %17:gpr32common = LDRWui %stack.1.i, 0, debug-location !383 :: (dereferenceable load 4 from %ir.i); is.c:395:17
    To: Bcc 12, %bb.6, implicit killed $nzcv, debug-location !386; is.c:395:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %17:gpr32common = LDRWui %stack.1.i, 0, debug-location !383 :: (dereferenceable load 4 from %ir.i); is.c:395:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%17
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %17:gpr32common, 1023, 0, implicit-def $nzcv, debug-location !386; is.c:395:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%17
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.6, implicit killed $nzcv, debug-location !386; is.c:395:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %17:gpr32common, 1023, 0, implicit-def $nzcv, debug-location !386; is.c:395:5
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %17:gpr32common = LDRWui %stack.1.i, 0, debug-location !383 :: (dereferenceable load 4 from %ir.i); is.c:395:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %17:gpr32common = LDRWui %stack.1.i, 0, debug-location !383 :: (dereferenceable load 4 from %ir.i); is.c:395:17
SU(1):   dead $wzr = SUBSWri %17:gpr32common, 1023, 0, implicit-def $nzcv, debug-location !386; is.c:395:5

********** MI Scheduling **********
rank:%bb.5 for.body11
  From: %157:gpr64common = LDRSWui %stack.1.i, 0, debug-location !387 :: (dereferenceable load 4 from %ir.i); is.c:396:21
    To: B %bb.4, debug-location !391; is.c:395:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %157:gpr64common = LDRSWui %stack.1.i, 0, debug-location !387 :: (dereferenceable load 4 from %ir.i); is.c:396:21
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%157
    SU(1): Data Latency=4 Reg=%157
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   STRWroX $wzr, %159:gpr64common, %157:gpr64common, 0, 1, debug-location !389 :: (store 4 into %ir.arrayidx13); is.c:396:24
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%157
  Single Issue       : false;
SU(2):   %161:gpr32common = nsw ADDWri %157.sub_32:gpr64common, 1, 0, debug-location !390; is.c:395:35
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%157
  Successors:
    SU(3): Data Latency=1 Reg=%161
  Single Issue       : false;
SU(3):   STRWui %161:gpr32common, %stack.1.i, 0, debug-location !390 :: (store 4 into %ir.i); is.c:395:35
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%161
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.4, debug-location !391; is.c:395:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) %157:gpr64common = LDRSWui %stack.1.i, 0, debug-location !387 :: (dereferenceable load 4 from %ir.i); is.c:396:21
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 1 
TopQ.A RemLatency SU(2) 1c
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) STRWui %161:gpr32common, %stack.1.i, 0, debug-location !390 :: (store 4 into %ir.i); is.c:395:35
  Ready @0c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
BotQ.A RemLatency SU(1) 4c
TopQ.A RemLatency SU(2) 1c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %161:gpr32common = nsw ADDWri %157.sub_32:gpr64common, 1, 0, debug-location !390; is.c:395:35
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWroX $wzr, %159:gpr64common, %157:gpr64common, 0, 1, debug-location !389 :: (store 4 into %ir.arrayidx13); is.c:396:24
  Ready @2c
  BotQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %157:gpr64common = LDRSWui %stack.1.i, 0, debug-location !387 :: (dereferenceable load 4 from %ir.i); is.c:396:21
SU(1):   STRWroX $wzr, %159:gpr64common, %157:gpr64common, 0, 1, debug-location !389 :: (store 4 into %ir.arrayidx13); is.c:396:24
SU(2):   %161:gpr32common = nsw ADDWri %157.sub_32:gpr64common, 1, 0, debug-location !390; is.c:395:35
SU(3):   STRWui %161:gpr32common, %stack.1.i, 0, debug-location !390 :: (store 4 into %ir.i); is.c:395:35

********** MI Scheduling **********
rank:%bb.6 for.end16
  From: STRWui $wzr, %stack.1.i, 0, debug-location !394 :: (store 4 into %ir.i); is.c:399:12
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui $wzr, %stack.1.i, 0, debug-location !394 :: (store 4 into %ir.i); is.c:399:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %21:gpr32 = MOVi32imm 33554431
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %21:gpr32 = MOVi32imm 33554431
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.1.i, 0, debug-location !394 :: (store 4 into %ir.i); is.c:399:12
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   STRWui $wzr, %stack.1.i, 0, debug-location !394 :: (store 4 into %ir.i); is.c:399:12
SU(1):   %21:gpr32 = MOVi32imm 33554431

********** MI Scheduling **********
rank:%bb.7 for.cond17
  From: %20:gpr32 = LDRWui %stack.1.i, 0, debug-location !397 :: (dereferenceable load 4 from %ir.i); is.c:399:17
    To: Bcc 12, %bb.9, implicit killed $nzcv, debug-location !400; is.c:399:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %20:gpr32 = LDRWui %stack.1.i, 0, debug-location !397 :: (dereferenceable load 4 from %ir.i); is.c:399:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%20
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWrr %20:gpr32, %21:gpr32, implicit-def $nzcv, debug-location !400; is.c:399:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%20
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.9, implicit killed $nzcv, debug-location !400; is.c:399:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWrr %20:gpr32, %21:gpr32, implicit-def $nzcv, debug-location !400; is.c:399:5
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %20:gpr32 = LDRWui %stack.1.i, 0, debug-location !397 :: (dereferenceable load 4 from %ir.i); is.c:399:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %20:gpr32 = LDRWui %stack.1.i, 0, debug-location !397 :: (dereferenceable load 4 from %ir.i); is.c:399:17
SU(1):   dead $wzr = SUBSWrr %20:gpr32, %21:gpr32, implicit-def $nzcv, debug-location !400; is.c:399:5

********** MI Scheduling **********
rank:%bb.8 for.body19
  From: %142:gpr64common = LDRSWui %stack.1.i, 0, debug-location !401 :: (dereferenceable load 4 from %ir.i); is.c:400:31
    To: B %bb.7, debug-location !408; is.c:399:5
 RegionInstrs: 10
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %142:gpr64common = LDRSWui %stack.1.i, 0, debug-location !401 :: (dereferenceable load 4 from %ir.i); is.c:400:31
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(8): Data Latency=4 Reg=%142
    SU(1): Data Latency=4 Reg=%142
    SU(9): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %145:gpr32 = LDRWroX %5:gpr64common, %142:gpr64common, 0, 1, debug-location !402 :: (load 4 from %ir.arrayidx21); is.c:400:21
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(0): Data Latency=4 Reg=%142
  Successors:
    SU(3): Data Latency=4 Reg=%145
  Single Issue       : false;
SU(2):   undef %147.sub_32:gpr64 = LDRWui %stack.5.shift, 0, debug-location !403 :: (dereferenceable load 4 from %ir.shift); is.c:400:37
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(3): Data Latency=4 Reg=%147
  Single Issue       : false;
SU(3):   undef %150.sub_32:gpr64 = ASRVWr %145:gpr32, %147.sub_32:gpr64, debug-location !404; is.c:400:34
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 7
  Predecessors:
    SU(1): Data Latency=4 Reg=%145
    SU(2): Data Latency=4 Reg=%147
  Successors:
    SU(4): Data Latency=1 Reg=%150
  Single Issue       : false;
SU(4):   %152:gpr64 = SBFMXri %150:gpr64, 62, 31, debug-location !405; is.c:400:9
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 6
  Predecessors:
    SU(3): Data Latency=1 Reg=%150
  Successors:
    SU(7): Data Latency=1 Reg=%152
    SU(5): Data Latency=1 Reg=%152
  Single Issue       : false;
SU(5):   %154:gpr32common = LDRWroX %159:gpr64common, %152:gpr64, 0, 0, debug-location !406 :: (load 4 from %ir.arrayidx23); is.c:400:43
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 5
  Predecessors:
    SU(4): Data Latency=1 Reg=%152
  Successors:
    SU(6): Data Latency=4 Reg=%154
    SU(7): Ord  Latency=0 Memory
  Single Issue       : false;
SU(6):   %155:gpr32common = nsw ADDWri %154:gpr32common, 1, 0, debug-location !406; is.c:400:43
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 1
  Predecessors:
    SU(5): Data Latency=4 Reg=%154
  Successors:
    SU(7): Data Latency=1 Reg=%155
  Single Issue       : false;
SU(7):   STRWroX %155:gpr32common, %159:gpr64common, %152:gpr64, 0, 0, debug-location !406 :: (store 4 into %ir.arrayidx23); is.c:400:43
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%155
    SU(5): Ord  Latency=0 Memory
    SU(4): Data Latency=1 Reg=%152
  Single Issue       : false;
SU(8):   %156:gpr32common = nsw ADDWri %142.sub_32:gpr64common, 1, 0, debug-location !407; is.c:399:32
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%142
  Successors:
    SU(9): Data Latency=1 Reg=%156
  Single Issue       : false;
SU(9):   STRWui %156:gpr32common, %stack.1.i, 0, debug-location !407 :: (store 4 into %ir.i); is.c:399:32
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%156
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.7, debug-location !408; is.c:399:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 15
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 7 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) STRWui %156:gpr32common, %stack.1.i, 0, debug-location !407 :: (store 4 into %ir.i); is.c:399:32
  Ready @0c
  BotQ.A TopLatency SU(9) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 8 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
BotQ.A RemLatency SU(7) 15c
  BotQ.A RemainingLatency 15 + 1c > CritPath 15
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(7) STRWroX %155:gpr32common, %159:gpr64common, %152:gpr64, 0, 0, debug-location !406 :: (store 4 into %ir.arrayidx23); is.c:400:43
  Ready @1c
  BotQ.A TopLatency SU(7) 15c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
BotQ.A RemLatency SU(6) 14c
  BotQ.A RemainingLatency 14 + 2c > CritPath 15
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(6) BOT-PATH                  14 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(6) %155:gpr32common = nsw ADDWri %154:gpr32common, 1, 0, debug-location !406; is.c:400:43
  Ready @2c
  BotQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 8 
Pick Bot ONLY1     
Scheduling SU(8) %156:gpr32common = nsw ADDWri %142.sub_32:gpr64common, 1, 0, debug-location !407; is.c:399:32
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %154:gpr32common = LDRWroX %159:gpr64common, %152:gpr64, 0, 0, debug-location !406 :: (load 4 from %ir.arrayidx23); is.c:400:43
  Ready @6c
  BotQ.A BotLatency SU(5) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %152:gpr64 = SBFMXri %150:gpr64, 62, 31, debug-location !405; is.c:400:9
  Ready @7c
  BotQ.A BotLatency SU(4) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) undef %150.sub_32:gpr64 = ASRVWr %145:gpr32, %147.sub_32:gpr64, debug-location !404; is.c:400:34
  Ready @8c
  BotQ.A BotLatency SU(3) 7c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 12 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
BotQ.A RemLatency SU(1) 4c
  BotQ.A RemainingLatency 4 + 12c > CritPath 15
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) %145:gpr32 = LDRWroX %5:gpr64common, %142:gpr64common, 0, 1, debug-location !402 :: (load 4 from %ir.arrayidx21); is.c:400:21
  Ready @12c
  BotQ.A BotLatency SU(1) 11c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 8
  Executed: 13c
  Critical: 8c, 8 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) undef %147.sub_32:gpr64 = LDRWui %stack.5.shift, 0, debug-location !403 :: (dereferenceable load 4 from %ir.shift); is.c:400:37
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 9
  Executed: 14c
  Critical: 9c, 9 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 16 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %142:gpr64common = LDRSWui %stack.1.i, 0, debug-location !401 :: (dereferenceable load 4 from %ir.i); is.c:400:31
  Ready @16c
  BotQ.A BotLatency SU(0) 15c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 10
  Executed: 17c
  Critical: 10c, 10 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   %142:gpr64common = LDRSWui %stack.1.i, 0, debug-location !401 :: (dereferenceable load 4 from %ir.i); is.c:400:31
SU(2):   undef %147.sub_32:gpr64 = LDRWui %stack.5.shift, 0, debug-location !403 :: (dereferenceable load 4 from %ir.shift); is.c:400:37
SU(1):   %145:gpr32 = LDRWroX %5:gpr64common, %142:gpr64common, 0, 1, debug-location !402 :: (load 4 from %ir.arrayidx21); is.c:400:21
SU(3):   undef %150.sub_32:gpr64 = ASRVWr %145:gpr32, %147.sub_32:gpr64, debug-location !404; is.c:400:34
SU(4):   %152:gpr64 = SBFMXri %150:gpr64, 62, 31, debug-location !405; is.c:400:9
SU(5):   %154:gpr32common = LDRWroX %159:gpr64common, %152:gpr64, 0, 0, debug-location !406 :: (load 4 from %ir.arrayidx23); is.c:400:43
SU(8):   %156:gpr32common = nsw ADDWri %142.sub_32:gpr64common, 1, 0, debug-location !407; is.c:399:32
SU(6):   %155:gpr32common = nsw ADDWri %154:gpr32common, 1, 0, debug-location !406; is.c:400:43
SU(7):   STRWroX %155:gpr32common, %159:gpr64common, %152:gpr64, 0, 0, debug-location !406 :: (store 4 into %ir.arrayidx23); is.c:400:43
SU(9):   STRWui %156:gpr32common, %stack.1.i, 0, debug-location !407 :: (store 4 into %ir.i); is.c:399:32

********** MI Scheduling **********
rank:%bb.9 for.end27
  From: %23:gpr64common = ADRP target-flags(aarch64-page) @bucket_ptrs, debug-location !411; is.c:403:20
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %23:gpr64common = ADRP target-flags(aarch64-page) @bucket_ptrs, debug-location !411; is.c:403:20
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%23
  Single Issue       : false;
SU(1):   STRWui $wzr, %23:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @bucket_ptrs, debug-location !411 :: (store 4 into `i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @bucket_ptrs, i64 0, i64 0)`, align 16); is.c:403:20
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%23
  Single Issue       : false;
SU(2):   %25:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%25
  Single Issue       : false;
SU(3):   STRWui %25:gpr32, %stack.1.i, 0, debug-location !412 :: (store 4 into %ir.i); is.c:404:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%25
  Single Issue       : false;
SU(4):   %136:gpr64common = MOVaddr target-flags(aarch64-page) @bucket_ptrs, target-flags(aarch64-pageoff, aarch64-nc) @bucket_ptrs
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %136:gpr64common = MOVaddr target-flags(aarch64-page) @bucket_ptrs, target-flags(aarch64-pageoff, aarch64-nc) @bucket_ptrs
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
BotQ.A RemLatency SU(1) 1c
  BotQ.A RemainingLatency 1 + 1c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) STRWui %25:gpr32, %stack.1.i, 0, debug-location !412 :: (store 4 into %ir.i); is.c:404:12
  Ready @1c
  BotQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) STRWui $wzr, %23:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @bucket_ptrs, debug-location !411 :: (store 4 into `i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @bucket_ptrs, i64 0, i64 0)`, align 16); is.c:403:20
  Ready @2c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %25:gpr32 = MOVi32imm 1
  Ready @3c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %23:gpr64common = ADRP target-flags(aarch64-page) @bucket_ptrs, debug-location !411; is.c:403:20
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   %23:gpr64common = ADRP target-flags(aarch64-page) @bucket_ptrs, debug-location !411; is.c:403:20
SU(2):   %25:gpr32 = MOVi32imm 1
SU(1):   STRWui $wzr, %23:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @bucket_ptrs, debug-location !411 :: (store 4 into `i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @bucket_ptrs, i64 0, i64 0)`, align 16); is.c:403:20
SU(3):   STRWui %25:gpr32, %stack.1.i, 0, debug-location !412 :: (store 4 into %ir.i); is.c:404:12
SU(4):   %136:gpr64common = MOVaddr target-flags(aarch64-page) @bucket_ptrs, target-flags(aarch64-pageoff, aarch64-nc) @bucket_ptrs

********** MI Scheduling **********
rank:%bb.10 for.cond28
  From: %26:gpr32common = LDRWui %stack.1.i, 0, debug-location !415 :: (dereferenceable load 4 from %ir.i); is.c:404:17
    To: Bcc 12, %bb.12, implicit killed $nzcv, debug-location !418; is.c:404:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %26:gpr32common = LDRWui %stack.1.i, 0, debug-location !415 :: (dereferenceable load 4 from %ir.i); is.c:404:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%26
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %26:gpr32common, 1023, 0, implicit-def $nzcv, debug-location !418; is.c:404:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%26
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.12, implicit killed $nzcv, debug-location !418; is.c:404:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %26:gpr32common, 1023, 0, implicit-def $nzcv, debug-location !418; is.c:404:5
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %26:gpr32common = LDRWui %stack.1.i, 0, debug-location !415 :: (dereferenceable load 4 from %ir.i); is.c:404:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   %26:gpr32common = LDRWui %stack.1.i, 0, debug-location !415 :: (dereferenceable load 4 from %ir.i); is.c:404:17
SU(1):   dead $wzr = SUBSWri %26:gpr32common, 1023, 0, implicit-def $nzcv, debug-location !418; is.c:404:5

********** MI Scheduling **********
rank:%bb.11 for.body30
  From: %132:gpr64common = LDRSWui %stack.1.i, 0, debug-location !419 :: (dereferenceable load 4 from %ir.i); is.c:405:38
    To: B %bb.10, debug-location !430; is.c:404:5
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %132:gpr64common = LDRSWui %stack.1.i, 0, debug-location !419 :: (dereferenceable load 4 from %ir.i); is.c:405:38
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(7): Data Latency=4 Reg=%132
    SU(1): Data Latency=4 Reg=%132
    SU(8): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %134:gpr64common = UBFMXri %132:gpr64common, 62, 61, debug-location !420; is.c:405:40
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(0): Data Latency=4 Reg=%132
  Successors:
    SU(6): Data Latency=1 Reg=%134
    SU(2): Data Latency=1 Reg=%134
  Single Issue       : false;
SU(2):   %135:gpr64common = SUBXri %134:gpr64common, 4, 0, debug-location !421; is.c:405:26
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(1): Data Latency=1 Reg=%134
  Successors:
    SU(4): Data Latency=1 Reg=%135
    SU(3): Data Latency=1 Reg=%135
  Single Issue       : false;
SU(3):   %137:gpr32 = LDRWroX %136:gpr64common, %135:gpr64common, 0, 0, debug-location !421 :: (load 4 from %ir.arrayidx33); is.c:405:26
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 5
  Predecessors:
    SU(2): Data Latency=1 Reg=%135
  Successors:
    SU(5): Data Latency=4 Reg=%137
    SU(6): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   %139:gpr32 = LDRWroX %159:gpr64common, %135:gpr64common, 0, 0, debug-location !424 :: (load 4 from %ir.arrayidx36); is.c:405:47
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 5
  Predecessors:
    SU(2): Data Latency=1 Reg=%135
  Successors:
    SU(5): Data Latency=4 Reg=%139
  Single Issue       : false;
SU(5):   %140:gpr32 = nsw ADDWrr %137:gpr32, %139:gpr32, debug-location !425; is.c:405:45
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(4): Data Latency=4 Reg=%139
    SU(3): Data Latency=4 Reg=%137
  Successors:
    SU(6): Data Latency=1 Reg=%140
  Single Issue       : false;
SU(6):   STRWroX %140:gpr32, %136:gpr64common, %134:gpr64common, 0, 0, debug-location !428 :: (store 4 into %ir.arrayidx39); is.c:405:24
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%140
    SU(3): Ord  Latency=0 Memory
    SU(1): Data Latency=1 Reg=%134
  Single Issue       : false;
SU(7):   %141:gpr32common = nsw ADDWri %132.sub_32:gpr64common, 1, 0, debug-location !429; is.c:404:35
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%132
  Successors:
    SU(8): Data Latency=1 Reg=%141
  Single Issue       : false;
SU(8):   STRWui %141:gpr32common, %stack.1.i, 0, debug-location !429 :: (store 4 into %ir.i); is.c:404:35
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=%141
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.10, debug-location !430; is.c:404:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 11
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 6 
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) %132:gpr64common = LDRSWui %stack.1.i, 0, debug-location !419 :: (dereferenceable load 4 from %ir.i); is.c:405:38
  Ready @0c
  TopQ.A BotLatency SU(0) 11c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 6 
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 7 1 
TopQ.A RemLatency SU(1) 7c
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(7) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) STRWui %141:gpr32common, %stack.1.i, 0, debug-location !429 :: (store 4 into %ir.i); is.c:404:35
  Ready @0c
  BotQ.A TopLatency SU(8) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 
Queue TopQ.P: 
Queue TopQ.A: 7 1 
BotQ.A RemLatency SU(6) 11c
  BotQ.A RemainingLatency 11 + 1c > CritPath 11
TopQ.A RemLatency SU(1) 7c
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(6) STRWroX %140:gpr32, %136:gpr64common, %134:gpr64common, 0, 0, debug-location !428 :: (store 4 into %ir.arrayidx39); is.c:405:24
  Ready @1c
  BotQ.A TopLatency SU(6) 11c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 5 
Queue TopQ.P: 
Queue TopQ.A: 7 1 
BotQ.A RemLatency SU(5) 10c
  BotQ.A RemainingLatency 10 + 2c > CritPath 11
TopQ.A RemLatency SU(1) 7c
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(5) BOT-PATH                  10 cycles 
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) %140:gpr32 = nsw ADDWrr %137:gpr32, %139:gpr32, debug-location !425; is.c:405:45
  Ready @2c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 3 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) %141:gpr32common = nsw ADDWri %132.sub_32:gpr64common, 1, 0, debug-location !429; is.c:404:35
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 4 3 
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) %134:gpr64common = UBFMXri %132:gpr64common, 62, 61, debug-location !420; is.c:405:40
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) %135:gpr64common = SUBXri %134:gpr64common, 4, 0, debug-location !421; is.c:405:26
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 
Queue TopQ.P: 
Queue TopQ.A: 4 3 
BotQ.A RemLatency SU(4) 6c
  BotQ.A RemainingLatency 6 + 6c > CritPath 11
TopQ.A RemLatency SU(4) 5c
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %139:gpr32 = LDRWroX %159:gpr64common, %135:gpr64common, 0, 0, debug-location !424 :: (load 4 from %ir.arrayidx36); is.c:405:47
  Ready @6c
  BotQ.A BotLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %137:gpr32 = LDRWroX %136:gpr64common, %135:gpr64common, 0, 0, debug-location !421 :: (load 4 from %ir.arrayidx33); is.c:405:26
  Ready @7c
  BotQ.A TopLatency SU(3) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   %132:gpr64common = LDRSWui %stack.1.i, 0, debug-location !419 :: (dereferenceable load 4 from %ir.i); is.c:405:38
SU(1):   %134:gpr64common = UBFMXri %132:gpr64common, 62, 61, debug-location !420; is.c:405:40
SU(2):   %135:gpr64common = SUBXri %134:gpr64common, 4, 0, debug-location !421; is.c:405:26
SU(3):   %137:gpr32 = LDRWroX %136:gpr64common, %135:gpr64common, 0, 0, debug-location !421 :: (load 4 from %ir.arrayidx33); is.c:405:26
SU(4):   %139:gpr32 = LDRWroX %159:gpr64common, %135:gpr64common, 0, 0, debug-location !424 :: (load 4 from %ir.arrayidx36); is.c:405:47
SU(7):   %141:gpr32common = nsw ADDWri %132.sub_32:gpr64common, 1, 0, debug-location !429; is.c:404:35
SU(5):   %140:gpr32 = nsw ADDWrr %137:gpr32, %139:gpr32, debug-location !425; is.c:405:45
SU(6):   STRWroX %140:gpr32, %136:gpr64common, %134:gpr64common, 0, 0, debug-location !428 :: (store 4 into %ir.arrayidx39); is.c:405:24
SU(8):   STRWui %141:gpr32common, %stack.1.i, 0, debug-location !429 :: (store 4 into %ir.i); is.c:404:35

********** MI Scheduling **********
rank:%bb.12 for.end42
  From: STRWui $wzr, %stack.1.i, 0, debug-location !433 :: (store 4 into %ir.i); is.c:408:12
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui $wzr, %stack.1.i, 0, debug-location !433 :: (store 4 into %ir.i); is.c:408:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %30:gpr32 = MOVi32imm 33554431
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   %130:gpr64common = MOVaddr target-flags(aarch64-page) @key_buff2, target-flags(aarch64-pageoff, aarch64-nc) @key_buff2
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %130:gpr64common = MOVaddr target-flags(aarch64-page) @key_buff2, target-flags(aarch64-pageoff, aarch64-nc) @key_buff2
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %30:gpr32 = MOVi32imm 33554431
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.1.i, 0, debug-location !433 :: (store 4 into %ir.i); is.c:408:12
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   STRWui $wzr, %stack.1.i, 0, debug-location !433 :: (store 4 into %ir.i); is.c:408:12
SU(1):   %30:gpr32 = MOVi32imm 33554431
SU(2):   %130:gpr64common = MOVaddr target-flags(aarch64-page) @key_buff2, target-flags(aarch64-pageoff, aarch64-nc) @key_buff2

********** MI Scheduling **********
rank:%bb.13 for.cond43
  From: %29:gpr32 = LDRWui %stack.1.i, 0, debug-location !436 :: (dereferenceable load 4 from %ir.i); is.c:408:17
    To: Bcc 12, %bb.15, implicit killed $nzcv, debug-location !439; is.c:408:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %29:gpr32 = LDRWui %stack.1.i, 0, debug-location !436 :: (dereferenceable load 4 from %ir.i); is.c:408:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%29
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWrr %29:gpr32, %30:gpr32, implicit-def $nzcv, debug-location !439; is.c:408:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%29
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.15, implicit killed $nzcv, debug-location !439; is.c:408:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWrr %29:gpr32, %30:gpr32, implicit-def $nzcv, debug-location !439; is.c:408:5
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %29:gpr32 = LDRWui %stack.1.i, 0, debug-location !436 :: (dereferenceable load 4 from %ir.i); is.c:408:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   %29:gpr32 = LDRWui %stack.1.i, 0, debug-location !436 :: (dereferenceable load 4 from %ir.i); is.c:408:17
SU(1):   dead $wzr = SUBSWrr %29:gpr32, %30:gpr32, implicit-def $nzcv, debug-location !439; is.c:408:5

********** MI Scheduling **********
rank:%bb.14 for.body45
  From: %115:gpr64common = LDRSWui %stack.1.i, 0, debug-location !440 :: (dereferenceable load 4 from %ir.i); is.c:409:25
    To: B %bb.13, debug-location !453; is.c:408:5
 RegionInstrs: 12
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %115:gpr64common = LDRSWui %stack.1.i, 0, debug-location !440 :: (dereferenceable load 4 from %ir.i); is.c:409:25
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(10): Data Latency=4 Reg=%115
    SU(1): Data Latency=4 Reg=%115
    SU(11): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %118:gpr32 = LDRWroX %5:gpr64common, %115:gpr64common, 0, 1, debug-location !442 :: (load 4 from %ir.arrayidx47); is.c:409:15
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(0): Data Latency=4 Reg=%115
  Successors:
    SU(9): Data Latency=4 Reg=%118
    SU(4): Data Latency=4 Reg=%118
    SU(2): Data Latency=4 Reg=%118
  Single Issue       : false;
SU(2):   STRWui %118:gpr32, %stack.6.key, 0, debug-location !443 :: (store 4 into %ir.key); is.c:409:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%118
  Single Issue       : false;
SU(3):   undef %120.sub_32:gpr64 = LDRWui %stack.5.shift, 0, debug-location !446 :: (dereferenceable load 4 from %ir.shift); is.c:410:38
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(4): Data Latency=4 Reg=%120
  Single Issue       : false;
SU(4):   undef %123.sub_32:gpr64 = ASRVWr %118:gpr32, %120.sub_32:gpr64, debug-location !447; is.c:410:35
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 7
  Predecessors:
    SU(1): Data Latency=4 Reg=%118
    SU(3): Data Latency=4 Reg=%120
  Successors:
    SU(5): Data Latency=1 Reg=%123
  Single Issue       : false;
SU(5):   %125:gpr64 = SBFMXri %123:gpr64, 62, 31, debug-location !448; is.c:410:19
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 6
  Predecessors:
    SU(4): Data Latency=1 Reg=%123
  Successors:
    SU(8): Data Latency=1 Reg=%125
    SU(6): Data Latency=1 Reg=%125
  Single Issue       : false;
SU(6):   %127:gpr64common = LDRSWroX %136:gpr64common, %125:gpr64, 0, 0, debug-location !449 :: (load 4 from %ir.arrayidx50); is.c:410:44
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 5
  Predecessors:
    SU(5): Data Latency=1 Reg=%125
  Successors:
    SU(9): Data Latency=4 Reg=%127
    SU(7): Data Latency=4 Reg=%127
    SU(8): Ord  Latency=0 Memory
  Single Issue       : false;
SU(7):   %129:gpr32common = nsw ADDWri %127.sub_32:gpr64common, 1, 0, debug-location !449; is.c:410:44
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 1
  Predecessors:
    SU(6): Data Latency=4 Reg=%127
  Successors:
    SU(8): Data Latency=1 Reg=%129
  Single Issue       : false;
SU(8):   STRWroX %129:gpr32common, %136:gpr64common, %125:gpr64, 0, 0, debug-location !449 :: (store 4 into %ir.arrayidx50); is.c:410:44
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=%129
    SU(6): Ord  Latency=0 Memory
    SU(5): Data Latency=1 Reg=%125
  Single Issue       : false;
SU(9):   STRWroX %118:gpr32, %130:gpr64common, %127:gpr64common, 0, 1, debug-location !451 :: (store 4 into %ir.arrayidx53); is.c:410:48
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 0
  Predecessors:
    SU(6): Data Latency=4 Reg=%127
    SU(1): Data Latency=4 Reg=%118
  Single Issue       : false;
SU(10):   %131:gpr32common = nsw ADDWri %115.sub_32:gpr64common, 1, 0, debug-location !452; is.c:408:32
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%115
  Successors:
    SU(11): Data Latency=1 Reg=%131
  Single Issue       : false;
SU(11):   STRWui %131:gpr32common, %stack.1.i, 0, debug-location !452 :: (store 4 into %ir.i); is.c:408:32
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%131
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.13, debug-location !453; is.c:408:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 15
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 9 8 2 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
Picking from Bot:
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) STRWui %131:gpr32common, %stack.1.i, 0, debug-location !452 :: (store 4 into %ir.i); is.c:408:32
  Ready @0c
  BotQ.A TopLatency SU(11) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 9 8 10 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
BotQ.A RemLatency SU(8) 15c
  BotQ.A RemainingLatency 15 + 1c > CritPath 15
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(9) BOT-PATH                  14 cycles 
  Cand SU(8) BOT-PATH                  15 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(8) STRWroX %129:gpr32common, %136:gpr64common, %125:gpr64, 0, 0, debug-location !449 :: (store 4 into %ir.arrayidx50); is.c:410:44
  Ready @1c
  BotQ.A TopLatency SU(8) 15c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 9 10 7 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
BotQ.A RemLatency SU(9) 14c
  BotQ.A RemainingLatency 14 + 2c > CritPath 15
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(9) BOT-PATH                  14 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(9) STRWroX %118:gpr32, %130:gpr64common, %127:gpr64common, 0, 1, debug-location !451 :: (store 4 into %ir.arrayidx53); is.c:410:48
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 7 10 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
BotQ.A RemLatency SU(7) 14c
  BotQ.A RemainingLatency 14 + 3c > CritPath 15
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(7) BOT-PATH                  14 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(7) %129:gpr32common = nsw ADDWri %127.sub_32:gpr64common, 1, 0, debug-location !449; is.c:410:44
  Ready @3c
  BotQ.A TopLatency SU(7) 14c
  BotQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 2 10 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
BotQ.A RemLatency SU(2) 8c
BotQ.A RemLatency SU(6) 10c
  BotQ.A RemainingLatency 13 + 4c > CritPath 15
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) STRWui %118:gpr32, %stack.6.key, 0, debug-location !443 :: (store 4 into %ir.key); is.c:409:13
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 10 
Pick Bot ONLY1     
Scheduling SU(10) %131:gpr32common = nsw ADDWri %115.sub_32:gpr64common, 1, 0, debug-location !452; is.c:408:32
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %127:gpr64common = LDRSWroX %136:gpr64common, %125:gpr64, 0, 0, debug-location !449 :: (load 4 from %ir.arrayidx50); is.c:410:44
  Ready @7c
  BotQ.A BotLatency SU(6) 5c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %125:gpr64 = SBFMXri %123:gpr64, 62, 31, debug-location !448; is.c:410:19
  Ready @8c
  BotQ.A BotLatency SU(5) 6c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 8
  Executed: 9c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) undef %123.sub_32:gpr64 = ASRVWr %118:gpr32, %120.sub_32:gpr64, debug-location !447; is.c:410:35
  Ready @9c
  BotQ.A BotLatency SU(4) 7c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 9
  Executed: 10c
  Critical: 9c, 9 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 13 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 3 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
BotQ.A RemLatency SU(1) 4c
  BotQ.A RemainingLatency 4 + 13c > CritPath 15
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) %118:gpr32 = LDRWroX %5:gpr64common, %115:gpr64common, 0, 1, debug-location !442 :: (load 4 from %ir.arrayidx47); is.c:409:15
  Ready @13c
  BotQ.A BotLatency SU(1) 11c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 10
  Executed: 14c
  Critical: 10c, 10 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) undef %120.sub_32:gpr64 = LDRWui %stack.5.shift, 0, debug-location !446 :: (dereferenceable load 4 from %ir.shift); is.c:410:38
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 11
  Executed: 15c
  Critical: 11c, 11 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 17 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %115:gpr64common = LDRSWui %stack.1.i, 0, debug-location !440 :: (dereferenceable load 4 from %ir.i); is.c:409:25
  Ready @17c
  BotQ.A BotLatency SU(0) 15c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 12
  Executed: 18c
  Critical: 12c, 12 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   %115:gpr64common = LDRSWui %stack.1.i, 0, debug-location !440 :: (dereferenceable load 4 from %ir.i); is.c:409:25
SU(3):   undef %120.sub_32:gpr64 = LDRWui %stack.5.shift, 0, debug-location !446 :: (dereferenceable load 4 from %ir.shift); is.c:410:38
SU(1):   %118:gpr32 = LDRWroX %5:gpr64common, %115:gpr64common, 0, 1, debug-location !442 :: (load 4 from %ir.arrayidx47); is.c:409:15
SU(4):   undef %123.sub_32:gpr64 = ASRVWr %118:gpr32, %120.sub_32:gpr64, debug-location !447; is.c:410:35
SU(5):   %125:gpr64 = SBFMXri %123:gpr64, 62, 31, debug-location !448; is.c:410:19
SU(6):   %127:gpr64common = LDRSWroX %136:gpr64common, %125:gpr64, 0, 0, debug-location !449 :: (load 4 from %ir.arrayidx50); is.c:410:44
SU(10):   %131:gpr32common = nsw ADDWri %115.sub_32:gpr64common, 1, 0, debug-location !452; is.c:408:32
SU(2):   STRWui %118:gpr32, %stack.6.key, 0, debug-location !443 :: (store 4 into %ir.key); is.c:409:13
SU(7):   %129:gpr32common = nsw ADDWri %127.sub_32:gpr64common, 1, 0, debug-location !449; is.c:410:44
SU(9):   STRWroX %118:gpr32, %130:gpr64common, %127:gpr64common, 0, 1, debug-location !451 :: (store 4 into %ir.arrayidx53); is.c:410:48
SU(8):   STRWroX %129:gpr32common, %136:gpr64common, %125:gpr64, 0, 0, debug-location !449 :: (store 4 into %ir.arrayidx50); is.c:410:44
SU(11):   STRWui %131:gpr32common, %stack.1.i, 0, debug-location !452 :: (store 4 into %ir.i); is.c:408:32

********** MI Scheduling **********
rank:%bb.15 for.end56
  From: STRXui %130:gpr64common, %stack.4.key_buff_ptr2, 0, debug-location !456 :: (store 8 into %ir.key_buff_ptr2); is.c:413:19
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRXui %130:gpr64common, %stack.4.key_buff_ptr2, 0, debug-location !456 :: (store 8 into %ir.key_buff_ptr2); is.c:413:19
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   STRWui $wzr, %stack.1.i, 0, debug-location !457 :: (store 4 into %ir.i); is.c:422:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   %112:gpr64common = MOVaddr target-flags(aarch64-page) @key_buff1, target-flags(aarch64-pageoff, aarch64-nc) @key_buff1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %112:gpr64common = MOVaddr target-flags(aarch64-page) @key_buff1, target-flags(aarch64-pageoff, aarch64-nc) @key_buff1
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) STRWui $wzr, %stack.1.i, 0, debug-location !457 :: (store 4 into %ir.i); is.c:422:12
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRXui %130:gpr64common, %stack.4.key_buff_ptr2, 0, debug-location !456 :: (store 8 into %ir.key_buff_ptr2); is.c:413:19
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   STRXui %130:gpr64common, %stack.4.key_buff_ptr2, 0, debug-location !456 :: (store 8 into %ir.key_buff_ptr2); is.c:413:19
SU(1):   STRWui $wzr, %stack.1.i, 0, debug-location !457 :: (store 4 into %ir.i); is.c:422:12
SU(2):   %112:gpr64common = MOVaddr target-flags(aarch64-page) @key_buff1, target-flags(aarch64-pageoff, aarch64-nc) @key_buff1

********** MI Scheduling **********
rank:%bb.16 for.cond57
  From: %34:gpr32common = LDRWui %stack.1.i, 0, debug-location !460 :: (dereferenceable load 4 from %ir.i); is.c:422:17
    To: Bcc 10, %bb.18, implicit killed $nzcv, debug-location !463; is.c:422:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %34:gpr32common = LDRWui %stack.1.i, 0, debug-location !460 :: (dereferenceable load 4 from %ir.i); is.c:422:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%34
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %34:gpr32common, 512, 12, implicit-def $nzcv, debug-location !463; is.c:422:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%34
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.18, implicit killed $nzcv, debug-location !463; is.c:422:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %34:gpr32common, 512, 12, implicit-def $nzcv, debug-location !463; is.c:422:5
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %34:gpr32common = LDRWui %stack.1.i, 0, debug-location !460 :: (dereferenceable load 4 from %ir.i); is.c:422:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.16 ***
SU(0):   %34:gpr32common = LDRWui %stack.1.i, 0, debug-location !460 :: (dereferenceable load 4 from %ir.i); is.c:422:17
SU(1):   dead $wzr = SUBSWri %34:gpr32common, 512, 12, implicit-def $nzcv, debug-location !463; is.c:422:5

********** MI Scheduling **********
rank:%bb.17 for.body59
  From: %110:gpr64common = LDRSWui %stack.1.i, 0, debug-location !464 :: (dereferenceable load 4 from %ir.i); is.c:423:19
    To: B %bb.16, debug-location !468; is.c:422:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %110:gpr64common = LDRSWui %stack.1.i, 0, debug-location !464 :: (dereferenceable load 4 from %ir.i); is.c:423:19
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%110
    SU(1): Data Latency=4 Reg=%110
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   STRWroX $wzr, %112:gpr64common, %110:gpr64common, 0, 1, debug-location !466 :: (store 4 into %ir.arrayidx61); is.c:423:22
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%110
  Single Issue       : false;
SU(2):   %114:gpr32common = nsw ADDWri %110.sub_32:gpr64common, 1, 0, debug-location !467; is.c:422:31
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%110
  Successors:
    SU(3): Data Latency=1 Reg=%114
  Single Issue       : false;
SU(3):   STRWui %114:gpr32common, %stack.1.i, 0, debug-location !467 :: (store 4 into %ir.i); is.c:422:31
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%114
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.16, debug-location !468; is.c:422:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) %110:gpr64common = LDRSWui %stack.1.i, 0, debug-location !464 :: (dereferenceable load 4 from %ir.i); is.c:423:19
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 1 
TopQ.A RemLatency SU(2) 1c
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) STRWui %114:gpr32common, %stack.1.i, 0, debug-location !467 :: (store 4 into %ir.i); is.c:422:31
  Ready @0c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
BotQ.A RemLatency SU(1) 4c
TopQ.A RemLatency SU(2) 1c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %114:gpr32common = nsw ADDWri %110.sub_32:gpr64common, 1, 0, debug-location !467; is.c:422:31
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWroX $wzr, %112:gpr64common, %110:gpr64common, 0, 1, debug-location !466 :: (store 4 into %ir.arrayidx61); is.c:423:22
  Ready @2c
  BotQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   %110:gpr64common = LDRSWui %stack.1.i, 0, debug-location !464 :: (dereferenceable load 4 from %ir.i); is.c:423:19
SU(1):   STRWroX $wzr, %112:gpr64common, %110:gpr64common, 0, 1, debug-location !466 :: (store 4 into %ir.arrayidx61); is.c:423:22
SU(2):   %114:gpr32common = nsw ADDWri %110.sub_32:gpr64common, 1, 0, debug-location !467; is.c:422:31
SU(3):   STRWui %114:gpr32common, %stack.1.i, 0, debug-location !467 :: (store 4 into %ir.i); is.c:422:31

********** MI Scheduling **********
rank:%bb.18 for.end64
  From: STRXui %112:gpr64common, %stack.3.key_buff_ptr, 0, debug-location !471 :: (store 8 into %ir.key_buff_ptr); is.c:427:18
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRXui %112:gpr64common, %stack.3.key_buff_ptr, 0, debug-location !471 :: (store 8 into %ir.key_buff_ptr); is.c:427:18
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   STRWui $wzr, %stack.1.i, 0, debug-location !472 :: (store 4 into %ir.i); is.c:433:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   %39:gpr32 = MOVi32imm 33554431
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %39:gpr32 = MOVi32imm 33554431
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) STRWui $wzr, %stack.1.i, 0, debug-location !472 :: (store 4 into %ir.i); is.c:433:12
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRXui %112:gpr64common, %stack.3.key_buff_ptr, 0, debug-location !471 :: (store 8 into %ir.key_buff_ptr); is.c:427:18
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.18 ***
SU(0):   STRXui %112:gpr64common, %stack.3.key_buff_ptr, 0, debug-location !471 :: (store 8 into %ir.key_buff_ptr); is.c:427:18
SU(1):   STRWui $wzr, %stack.1.i, 0, debug-location !472 :: (store 4 into %ir.i); is.c:433:12
SU(2):   %39:gpr32 = MOVi32imm 33554431

********** MI Scheduling **********
rank:%bb.19 for.cond65
  From: %38:gpr32 = LDRWui %stack.1.i, 0, debug-location !475 :: (dereferenceable load 4 from %ir.i); is.c:433:17
    To: Bcc 12, %bb.21, implicit killed $nzcv, debug-location !478; is.c:433:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %38:gpr32 = LDRWui %stack.1.i, 0, debug-location !475 :: (dereferenceable load 4 from %ir.i); is.c:433:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%38
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWrr %38:gpr32, %39:gpr32, implicit-def $nzcv, debug-location !478; is.c:433:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%38
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.21, implicit killed $nzcv, debug-location !478; is.c:433:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWrr %38:gpr32, %39:gpr32, implicit-def $nzcv, debug-location !478; is.c:433:5
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %38:gpr32 = LDRWui %stack.1.i, 0, debug-location !475 :: (dereferenceable load 4 from %ir.i); is.c:433:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   %38:gpr32 = LDRWui %stack.1.i, 0, debug-location !475 :: (dereferenceable load 4 from %ir.i); is.c:433:17
SU(1):   dead $wzr = SUBSWrr %38:gpr32, %39:gpr32, implicit-def $nzcv, debug-location !478; is.c:433:5

********** MI Scheduling **********
rank:%bb.20 for.body67
  From: %101:gpr64common = LDRXui %stack.3.key_buff_ptr, 0, debug-location !479 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:434:9
    To: B %bb.19, debug-location !484; is.c:433:5
 RegionInstrs: 11
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %101:gpr64common = LDRXui %stack.3.key_buff_ptr, 0, debug-location !479 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:434:9
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(7): Data Latency=4 Reg=%101
    SU(5): Data Latency=4 Reg=%101
    SU(7): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %102:gpr64common = LDRXui %stack.4.key_buff_ptr2, 0, debug-location !480 :: (dereferenceable load 8 from %ir.key_buff_ptr2); is.c:434:22
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
    SU(3): Data Latency=4 Reg=%102
    SU(7): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %103:gpr64 = LDRSWui %stack.1.i, 0, debug-location !481 :: (dereferenceable load 4 from %ir.i); is.c:434:36
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
    SU(3): Data Latency=4 Reg=%103
    SU(10): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   %104:gpr64 = LDRSWroX %102:gpr64common, %103:gpr64, 0, 1, debug-location !480 :: (load 4 from %ir.arrayidx69); is.c:434:22
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 16
  Predecessors:
    SU(2): Data Latency=4 Reg=%103
    SU(1): Data Latency=4 Reg=%102
  Successors:
    SU(4): Data Latency=4 Reg=%104
    SU(10): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   %105:gpr64 = UBFMXri %104:gpr64, 62, 61, debug-location !479; is.c:434:9
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 12
  Predecessors:
    SU(3): Data Latency=4 Reg=%104
  Successors:
    SU(7): Data Latency=1 Reg=%105
    SU(5): Data Latency=1 Reg=%105
  Single Issue       : false;
SU(5):   %106:gpr32common = LDRWroX %101:gpr64common, %105:gpr64, 0, 0, debug-location !482 :: (load 4 from %ir.arrayidx71); is.c:434:39
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 11
  Predecessors:
    SU(4): Data Latency=1 Reg=%105
    SU(0): Data Latency=4 Reg=%101
  Successors:
    SU(6): Data Latency=4 Reg=%106
    SU(10): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Single Issue       : false;
SU(6):   %107:gpr32common = nsw ADDWri %106:gpr32common, 1, 0, debug-location !482; is.c:434:39
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 7
  Predecessors:
    SU(5): Data Latency=4 Reg=%106
  Successors:
    SU(7): Data Latency=1 Reg=%107
  Single Issue       : false;
SU(7):   STRWroX %107:gpr32common, %101:gpr64common, %105:gpr64, 0, 0, debug-location !482 :: (store 4 into %ir.arrayidx71); is.c:434:39
  # preds left       : 8
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 6
  Predecessors:
    SU(6): Data Latency=1 Reg=%107
    SU(5): Ord  Latency=0 Memory
    SU(4): Data Latency=1 Reg=%105
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%101
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(10): Ord  Latency=0 Memory
    SU(8): Ord  Latency=1 Memory
  Single Issue       : false;
SU(8):   %108:gpr32common = LDRWui %stack.1.i, 0, debug-location !483 :: (dereferenceable load 4 from %ir.i); is.c:433:32
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 15
  Height             : 5
  Predecessors:
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(9): Data Latency=4 Reg=%108
    SU(10): Ord  Latency=0 Memory
  Single Issue       : false;
SU(9):   %109:gpr32common = nsw ADDWri %108:gpr32common, 1, 0, debug-location !483; is.c:433:32
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 19
  Height             : 1
  Predecessors:
    SU(8): Data Latency=4 Reg=%108
  Successors:
    SU(10): Data Latency=1 Reg=%109
  Single Issue       : false;
SU(10):   STRWui %109:gpr32common, %stack.1.i, 0, debug-location !483 :: (store 4 into %ir.i); is.c:433:32
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 20
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=%109
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.19, debug-location !484; is.c:433:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 20
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 
Pick Bot ONLY1     
Scheduling SU(10) STRWui %109:gpr32common, %stack.1.i, 0, debug-location !483 :: (store 4 into %ir.i); is.c:433:32
  Ready @0c
  BotQ.A TopLatency SU(10) 20c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Pick Bot ONLY1     
Scheduling SU(9) %109:gpr32common = nsw ADDWri %108:gpr32common, 1, 0, debug-location !483; is.c:433:32
  Ready @1c
  BotQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 8 
Pick Bot ONLY1     
Scheduling SU(8) %108:gpr32common = LDRWui %stack.1.i, 0, debug-location !483 :: (dereferenceable load 4 from %ir.i); is.c:433:32
  Ready @5c
  BotQ.A BotLatency SU(8) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) STRWroX %107:gpr32common, %101:gpr64common, %105:gpr64, 0, 0, debug-location !482 :: (store 4 into %ir.arrayidx71); is.c:434:39
  Ready @6c
  BotQ.A BotLatency SU(7) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %107:gpr32common = nsw ADDWri %106:gpr32common, 1, 0, debug-location !482; is.c:434:39
  Ready @7c
  BotQ.A BotLatency SU(6) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %106:gpr32common = LDRWroX %101:gpr64common, %105:gpr64, 0, 0, debug-location !482 :: (load 4 from %ir.arrayidx71); is.c:434:39
  Ready @11c
  BotQ.A BotLatency SU(5) 11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %105:gpr64 = UBFMXri %104:gpr64, 62, 61, debug-location !479; is.c:434:9
  Ready @12c
  BotQ.A BotLatency SU(4) 12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 7
  Executed: 13c
  Critical: 7c, 7 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 15 BotQ.A
Queue BotQ.P: 3 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %101:gpr64common = LDRXui %stack.3.key_buff_ptr, 0, debug-location !479 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:434:9
  Ready @15c
  BotQ.A BotLatency SU(0) 15c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 8
  Executed: 16c
  Critical: 8c, 8 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %104:gpr64 = LDRSWroX %102:gpr64common, %103:gpr64, 0, 1, debug-location !480 :: (load 4 from %ir.arrayidx69); is.c:434:22
  Ready @16c
  BotQ.A BotLatency SU(3) 16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 9
  Executed: 17c
  Critical: 9c, 9 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 20 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %103:gpr64 = LDRSWui %stack.1.i, 0, debug-location !481 :: (dereferenceable load 4 from %ir.i); is.c:434:36
  Ready @20c
  BotQ.A BotLatency SU(2) 20c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 10
  Executed: 21c
  Critical: 10c, 10 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %102:gpr64common = LDRXui %stack.4.key_buff_ptr2, 0, debug-location !480 :: (dereferenceable load 8 from %ir.key_buff_ptr2); is.c:434:22
  Ready @21c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 11
  Executed: 22c
  Critical: 11c, 11 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.20 ***
SU(1):   %102:gpr64common = LDRXui %stack.4.key_buff_ptr2, 0, debug-location !480 :: (dereferenceable load 8 from %ir.key_buff_ptr2); is.c:434:22
SU(2):   %103:gpr64 = LDRSWui %stack.1.i, 0, debug-location !481 :: (dereferenceable load 4 from %ir.i); is.c:434:36
SU(3):   %104:gpr64 = LDRSWroX %102:gpr64common, %103:gpr64, 0, 1, debug-location !480 :: (load 4 from %ir.arrayidx69); is.c:434:22
SU(0):   %101:gpr64common = LDRXui %stack.3.key_buff_ptr, 0, debug-location !479 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:434:9
SU(4):   %105:gpr64 = UBFMXri %104:gpr64, 62, 61, debug-location !479; is.c:434:9
SU(5):   %106:gpr32common = LDRWroX %101:gpr64common, %105:gpr64, 0, 0, debug-location !482 :: (load 4 from %ir.arrayidx71); is.c:434:39
SU(6):   %107:gpr32common = nsw ADDWri %106:gpr32common, 1, 0, debug-location !482; is.c:434:39
SU(7):   STRWroX %107:gpr32common, %101:gpr64common, %105:gpr64, 0, 0, debug-location !482 :: (store 4 into %ir.arrayidx71); is.c:434:39
SU(8):   %108:gpr32common = LDRWui %stack.1.i, 0, debug-location !483 :: (dereferenceable load 4 from %ir.i); is.c:433:32
SU(9):   %109:gpr32common = nsw ADDWri %108:gpr32common, 1, 0, debug-location !483; is.c:433:32
SU(10):   STRWui %109:gpr32common, %stack.1.i, 0, debug-location !483 :: (store 4 into %ir.i); is.c:433:32

********** MI Scheduling **********
rank:%bb.21 for.end75
  From: STRWui $wzr, %stack.1.i, 0, debug-location !487 :: (store 4 into %ir.i); is.c:440:12
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui $wzr, %stack.1.i, 0, debug-location !487 :: (store 4 into %ir.i); is.c:440:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %43:gpr32 = MOVi32imm 2097150
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %43:gpr32 = MOVi32imm 2097150
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.1.i, 0, debug-location !487 :: (store 4 into %ir.i); is.c:440:12
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.21 ***
SU(0):   STRWui $wzr, %stack.1.i, 0, debug-location !487 :: (store 4 into %ir.i); is.c:440:12
SU(1):   %43:gpr32 = MOVi32imm 2097150

********** MI Scheduling **********
rank:%bb.22 for.cond76
  From: %42:gpr32 = LDRWui %stack.1.i, 0, debug-location !490 :: (dereferenceable load 4 from %ir.i); is.c:440:17
    To: Bcc 12, %bb.24, implicit killed $nzcv, debug-location !493; is.c:440:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %42:gpr32 = LDRWui %stack.1.i, 0, debug-location !490 :: (dereferenceable load 4 from %ir.i); is.c:440:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%42
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWrr %42:gpr32, %43:gpr32, implicit-def $nzcv, debug-location !493; is.c:440:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%42
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.24, implicit killed $nzcv, debug-location !493; is.c:440:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWrr %42:gpr32, %43:gpr32, implicit-def $nzcv, debug-location !493; is.c:440:5
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %42:gpr32 = LDRWui %stack.1.i, 0, debug-location !490 :: (dereferenceable load 4 from %ir.i); is.c:440:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.22 ***
SU(0):   %42:gpr32 = LDRWui %stack.1.i, 0, debug-location !490 :: (dereferenceable load 4 from %ir.i); is.c:440:17
SU(1):   dead $wzr = SUBSWrr %42:gpr32, %43:gpr32, implicit-def $nzcv, debug-location !493; is.c:440:5

********** MI Scheduling **********
rank:%bb.23 for.body78
  From: %93:gpr64 = LDRXui %stack.3.key_buff_ptr, 0, debug-location !494 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:441:32
    To: B %bb.22, debug-location !501; is.c:440:5
 RegionInstrs: 10
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Cluster ld/st SU(3) - SU(4)
  Copy Succ SU(5)
  Copy Succ SU(9)
SU(0):   %93:gpr64 = LDRXui %stack.3.key_buff_ptr, 0, debug-location !494 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:441:32
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(2): Data Latency=4 Reg=%93
    SU(6): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %94:gpr64 = LDRSWui %stack.1.i, 0, debug-location !495 :: (dereferenceable load 4 from %ir.i); is.c:441:45
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(2): Data Latency=4 Reg=%94
    SU(9): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %95:gpr64common = ADDXrs %93:gpr64, %94:gpr64, 2, debug-location !494; is.c:441:32
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(1): Data Latency=4 Reg=%94
    SU(0): Data Latency=4 Reg=%93
  Successors:
    SU(6): Data Latency=1 Reg=%95
    SU(4): Data Latency=1 Reg=%95
    SU(3): Data Latency=1 Reg=%95
  Single Issue       : false;
SU(3):   %96:gpr32 = LDRWui %95:gpr64common, 0, debug-location !494 :: (load 4 from %ir.arrayidx80); is.c:441:32
  # preds left       : 1
  # succs left       : 2
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 11
  Predecessors:
    SU(2): Data Latency=1 Reg=%95
  Successors:
    SU(5): Data Latency=4 Reg=%96
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Cluster
  Single Issue       : false;
SU(4):   %97:gpr32 = LDRWui %95:gpr64common, 1, debug-location !499 :: (load 4 from %ir.arrayidx83); is.c:441:29
  # preds left       : 1
  # succs left       : 3
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 11
  Predecessors:
    SU(2): Data Latency=1 Reg=%95
    SU(3): Ord  Latency=0 Cluster
  Successors:
    SU(5): Data Latency=4 Reg=%97
    SU(9): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Single Issue       : false;
SU(5):   %98:gpr32 = nsw ADDWrr %97:gpr32, %96:gpr32, debug-location !499; is.c:441:29
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 7
  Predecessors:
    SU(4): Data Latency=4 Reg=%97
    SU(3): Data Latency=4 Reg=%96
  Successors:
    SU(6): Data Latency=1 Reg=%98
  Single Issue       : false;
SU(6):   STRWui %98:gpr32, %95:gpr64common, 1, debug-location !499 :: (store 4 into %ir.arrayidx83); is.c:441:29
  # preds left       : 5
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 6
  Predecessors:
    SU(5): Data Latency=1 Reg=%98
    SU(4): Ord  Latency=0 Memory
    SU(2): Data Latency=1 Reg=%95
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=1 Memory
  Single Issue       : false;
SU(7):   %99:gpr32common = LDRWui %stack.1.i, 0, debug-location !500 :: (dereferenceable load 4 from %ir.i); is.c:440:35
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 5
  Predecessors:
    SU(6): Ord  Latency=1 Memory
  Successors:
    SU(8): Data Latency=4 Reg=%99
    SU(9): Ord  Latency=0 Memory
  Single Issue       : false;
SU(8):   %100:gpr32common = nsw ADDWri %99:gpr32common, 1, 0, debug-location !500; is.c:440:35
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 1
  Predecessors:
    SU(7): Data Latency=4 Reg=%99
  Successors:
    SU(9): Data Latency=1 Reg=%100
  Single Issue       : false;
SU(9):   STRWui %100:gpr32common, %stack.1.i, 0, debug-location !500 :: (store 4 into %ir.i); is.c:440:35
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%100
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.22, debug-location !501; is.c:440:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 16
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Pick Bot ONLY1     
Scheduling SU(9) STRWui %100:gpr32common, %stack.1.i, 0, debug-location !500 :: (store 4 into %ir.i); is.c:440:35
  Ready @0c
  BotQ.A TopLatency SU(9) 16c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Pick Bot ONLY1     
Scheduling SU(8) %100:gpr32common = nsw ADDWri %99:gpr32common, 1, 0, debug-location !500; is.c:440:35
  Ready @1c
  BotQ.A BotLatency SU(8) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) %99:gpr32common = LDRWui %stack.1.i, 0, debug-location !500 :: (dereferenceable load 4 from %ir.i); is.c:440:35
  Ready @5c
  BotQ.A BotLatency SU(7) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) STRWui %98:gpr32, %95:gpr64common, 1, debug-location !499 :: (store 4 into %ir.arrayidx83); is.c:441:29
  Ready @6c
  BotQ.A BotLatency SU(6) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %98:gpr32 = nsw ADDWrr %97:gpr32, %96:gpr32, debug-location !499; is.c:441:29
  Ready @7c
  BotQ.A BotLatency SU(5) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(4) 5c
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot WEAK      
Scheduling SU(4) %97:gpr32 = LDRWui %95:gpr64common, 1, debug-location !499 :: (load 4 from %ir.arrayidx83); is.c:441:29
  Ready @11c
  BotQ.A BotLatency SU(4) 11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %96:gpr32 = LDRWui %95:gpr64common, 0, debug-location !494 :: (load 4 from %ir.arrayidx80); is.c:441:32
  Ready @12c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 7
  Executed: 13c
  Critical: 7c, 7 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %95:gpr64common = ADDXrs %93:gpr64, %94:gpr64, 2, debug-location !494; is.c:441:32
  Ready @13c
  BotQ.A BotLatency SU(2) 12c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 8
  Executed: 14c
  Critical: 8c, 8 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 17 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 17c > CritPath 16
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %94:gpr64 = LDRSWui %stack.1.i, 0, debug-location !495 :: (dereferenceable load 4 from %ir.i); is.c:441:45
  Ready @17c
  BotQ.A BotLatency SU(1) 16c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 9
  Executed: 18c
  Critical: 9c, 9 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %93:gpr64 = LDRXui %stack.3.key_buff_ptr, 0, debug-location !494 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:441:32
  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 10
  Executed: 19c
  Critical: 10c, 10 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.23 ***
SU(0):   %93:gpr64 = LDRXui %stack.3.key_buff_ptr, 0, debug-location !494 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:441:32
SU(1):   %94:gpr64 = LDRSWui %stack.1.i, 0, debug-location !495 :: (dereferenceable load 4 from %ir.i); is.c:441:45
SU(2):   %95:gpr64common = ADDXrs %93:gpr64, %94:gpr64, 2, debug-location !494; is.c:441:32
SU(3):   %96:gpr32 = LDRWui %95:gpr64common, 0, debug-location !494 :: (load 4 from %ir.arrayidx80); is.c:441:32
SU(4):   %97:gpr32 = LDRWui %95:gpr64common, 1, debug-location !499 :: (load 4 from %ir.arrayidx83); is.c:441:29
SU(5):   %98:gpr32 = nsw ADDWrr %97:gpr32, %96:gpr32, debug-location !499; is.c:441:29
SU(6):   STRWui %98:gpr32, %95:gpr64common, 1, debug-location !499 :: (store 4 into %ir.arrayidx83); is.c:441:29
SU(7):   %99:gpr32common = LDRWui %stack.1.i, 0, debug-location !500 :: (dereferenceable load 4 from %ir.i); is.c:440:35
SU(8):   %100:gpr32common = nsw ADDWri %99:gpr32common, 1, 0, debug-location !500; is.c:440:35
SU(9):   STRWui %100:gpr32common, %stack.1.i, 0, debug-location !500 :: (store 4 into %ir.i); is.c:440:35

********** MI Scheduling **********
rank:%bb.24 for.end87
  From: STRWui $wzr, %stack.1.i, 0, debug-location !504 :: (store 4 into %ir.i); is.c:446:12
    To: End RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui $wzr, %stack.1.i, 0, debug-location !504 :: (store 4 into %ir.i); is.c:446:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %57:gpr32 = MOVi32imm 33554431
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   %67:gpr64common = MOVaddr target-flags(aarch64-page) @test_rank_array, target-flags(aarch64-pageoff, aarch64-nc) @test_rank_array
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %84:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   %81:gpr64common = ADRP target-flags(aarch64-page) @passed_verification
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   %89:gpr64 = MOVaddr target-flags(aarch64-page) @.str.1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %89:gpr64 = MOVaddr target-flags(aarch64-page) @.str.1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %81:gpr64common = ADRP target-flags(aarch64-page) @passed_verification
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  BotQ.A RemainingLatency 0 + 2c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %84:gpr32 = MOVi32imm 1
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  BotQ.A RemainingLatency 0 + 3c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %67:gpr64common = MOVaddr target-flags(aarch64-page) @test_rank_array, target-flags(aarch64-pageoff, aarch64-nc) @test_rank_array
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 4c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %57:gpr32 = MOVi32imm 33554431
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.1.i, 0, debug-location !504 :: (store 4 into %ir.i); is.c:446:12
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.24 ***
SU(0):   STRWui $wzr, %stack.1.i, 0, debug-location !504 :: (store 4 into %ir.i); is.c:446:12
SU(1):   %57:gpr32 = MOVi32imm 33554431
SU(2):   %67:gpr64common = MOVaddr target-flags(aarch64-page) @test_rank_array, target-flags(aarch64-pageoff, aarch64-nc) @test_rank_array
SU(3):   %84:gpr32 = MOVi32imm 1
SU(4):   %81:gpr64common = ADRP target-flags(aarch64-page) @passed_verification
SU(5):   %89:gpr64 = MOVaddr target-flags(aarch64-page) @.str.1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1

********** MI Scheduling **********
rank:%bb.25 for.cond88
  From: %46:gpr32common = LDRWui %stack.1.i, 0, debug-location !507 :: (dereferenceable load 4 from %ir.i); is.c:446:17
    To: Bcc 12, %bb.40, implicit killed $nzcv, debug-location !510; is.c:446:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %46:gpr32common = LDRWui %stack.1.i, 0, debug-location !507 :: (dereferenceable load 4 from %ir.i); is.c:446:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%46
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %46:gpr32common, 4, 0, implicit-def $nzcv, debug-location !510; is.c:446:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%46
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.40, implicit killed $nzcv, debug-location !510; is.c:446:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %46:gpr32common, 4, 0, implicit-def $nzcv, debug-location !510; is.c:446:5
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %46:gpr32common = LDRWui %stack.1.i, 0, debug-location !507 :: (dereferenceable load 4 from %ir.i); is.c:446:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   %46:gpr32common = LDRWui %stack.1.i, 0, debug-location !507 :: (dereferenceable load 4 from %ir.i); is.c:446:17
SU(1):   dead $wzr = SUBSWri %46:gpr32common, 4, 0, implicit-def $nzcv, debug-location !510; is.c:446:5

********** MI Scheduling **********
rank:%bb.26 for.body90
  From: %53:gpr64 = LDRSWui %stack.1.i, 0, debug-location !511 :: (dereferenceable load 4 from %ir.i); is.c:447:33
    To: Bcc 11, %bb.39, implicit killed $nzcv, debug-location !520; is.c:448:19
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %53:gpr64 = LDRSWui %stack.1.i, 0, debug-location !511 :: (dereferenceable load 4 from %ir.i); is.c:447:33
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%53
  Single Issue       : false;
SU(1):   %55:gpr32common = LDRWroX %169:gpr64common, %53:gpr64, 0, 1, debug-location !513 :: (load 4 from %ir.arrayidx92); is.c:447:13
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%53
  Successors:
    SU(3): Data Latency=4 Reg=%55
    SU(2): Data Latency=4 Reg=%55
  Single Issue       : false;
SU(2):   STRWui %55:gpr32common, %stack.2.k, 0, debug-location !514 :: (store 4 into %ir.k); is.c:447:11
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%55
  Single Issue       : false;
SU(3):   dead $wzr = SUBSWri %55:gpr32common, 1, 0, implicit-def $nzcv, debug-location !520; is.c:448:19
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%55
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 11, %bb.39, implicit killed $nzcv, debug-location !520; is.c:448:19
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %55:gpr32common, %stack.2.k, 0, debug-location !514 :: (store 4 into %ir.k); is.c:447:11
  Ready @0c
  BotQ.A TopLatency SU(2) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) dead $wzr = SUBSWri %55:gpr32common, 1, 0, implicit-def $nzcv, debug-location !520; is.c:448:19
  Ready @1c
  BotQ.A TopLatency SU(3) 8c
  BotQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %55:gpr32common = LDRWroX %169:gpr64common, %53:gpr64, 0, 1, debug-location !513 :: (load 4 from %ir.arrayidx92); is.c:447:13
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 9 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %53:gpr64 = LDRSWui %stack.1.i, 0, debug-location !511 :: (dereferenceable load 4 from %ir.i); is.c:447:33
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 4
  Executed: 10c
  Critical: 4c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.26 ***
SU(0):   %53:gpr64 = LDRSWui %stack.1.i, 0, debug-location !511 :: (dereferenceable load 4 from %ir.i); is.c:447:33
SU(1):   %55:gpr32common = LDRWroX %169:gpr64common, %53:gpr64, 0, 1, debug-location !513 :: (load 4 from %ir.arrayidx92); is.c:447:13
SU(3):   dead $wzr = SUBSWri %55:gpr32common, 1, 0, implicit-def $nzcv, debug-location !520; is.c:448:19
SU(2):   STRWui %55:gpr32common, %stack.2.k, 0, debug-location !514 :: (store 4 into %ir.k); is.c:447:11

********** MI Scheduling **********
rank:%bb.28 if.then
  From: %61:gpr64 = LDRXui %stack.3.key_buff_ptr, 0, debug-location !524 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:449:33
    To: Bcc 0, %bb.31, implicit killed $nzcv, debug-location !534; is.c:496:28
 RegionInstrs: 10
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %61:gpr64 = LDRXui %stack.3.key_buff_ptr, 0, debug-location !524 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:449:33
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Data Latency=4 Reg=%61
  Single Issue       : false;
SU(1):   %62:gpr64 = LDRSWui %stack.2.k, 0, debug-location !525 :: (dereferenceable load 4 from %ir.k); is.c:449:46
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Data Latency=4 Reg=%62
  Single Issue       : false;
SU(2):   %63:gpr64common = ADDXrs %61:gpr64, %62:gpr64, 2, debug-location !524; is.c:449:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%62
    SU(0): Data Latency=4 Reg=%61
  Successors:
    SU(3): Data Latency=1 Reg=%63
  Single Issue       : false;
SU(3):   %64:gpr32 = LDURWi %63:gpr64common, -4, debug-location !524 :: (load 4 from %ir.arrayidx97); is.c:449:33
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=%63
  Successors:
    SU(4): Data Latency=4 Reg=%64
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   STRWui %64:gpr32, %stack.7.key_rank, 0, debug-location !523 :: (store 4 into %ir.key_rank); is.c:449:22
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(3): Data Latency=4 Reg=%64
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(5):   STRWui $wzr, %stack.8.failed, 0, debug-location !528 :: (store 4 into %ir.failed); is.c:450:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(6):   %66:gpr64common = LDRSWui %stack.1.i, 0, debug-location !529 :: (dereferenceable load 4 from %ir.i); is.c:496:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(9): Data Latency=4 Reg=%66
    SU(7): Data Latency=4 Reg=%66
  Single Issue       : false;
SU(7):   %68:gpr32 = LDRWroX %67:gpr64common, %66:gpr64common, 0, 1, debug-location !537 :: (load 4 from %ir.arrayidx104); is.c:0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(6): Data Latency=4 Reg=%66
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(8):   %69:gpr32 = LDRWui %stack.0.iteration.addr, 0, debug-location !537 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(9):   dead $wzr = SUBSWri %66.sub_32:gpr64common, 1, 0, implicit-def $nzcv, debug-location !534; is.c:496:28
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(6): Data Latency=4 Reg=%66
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 0, %bb.31, implicit killed $nzcv, debug-location !534; is.c:496:28
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(9): Ord  Latency=1 Artificial
    SU(8): Ord  Latency=3 Artificial
    SU(7): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 9 8 7 
Queue BotQ.A: 5 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 8 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) STRWui $wzr, %stack.8.failed, 0, debug-location !528 :: (store 4 into %ir.failed); is.c:450:17
  Ready @0c
  BotQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 8 
Queue BotQ.A: 4 9 
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 8 
BotQ.A RemLatency SU(4) 9c
BotQ.A RemLatency SU(7) 4c
  BotQ.A RemainingLatency 9 + 1c > CritPath 9
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) STRWui %64:gpr32, %stack.7.key_rank, 0, debug-location !523 :: (store 4 into %ir.key_rank); is.c:449:22
  Ready @1c
  BotQ.A TopLatency SU(4) 9c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 8 3 
Queue BotQ.A: 9 
Pick Bot ONLY1     
Scheduling SU(9) dead $wzr = SUBSWri %66.sub_32:gpr64common, 1, 0, implicit-def $nzcv, debug-location !534; is.c:496:28
  Ready @2c
  BotQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 7 8 
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 8 
BotQ.A RemLatency SU(7) 4c
BotQ.A RemLatency SU(3) 5c
  BotQ.A RemainingLatency 7 + 3c > CritPath 9
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(7) %68:gpr32 = LDRWroX %67:gpr64common, %66:gpr64common, 0, 1, debug-location !537 :: (load 4 from %ir.arrayidx104); is.c:0
  Ready @3c
  BotQ.A BotLatency SU(7) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 6 
Queue BotQ.A: 8 
Pick Bot ONLY1     
Scheduling SU(8) %69:gpr32 = LDRWui %stack.0.iteration.addr, 0, debug-location !537 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:0
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %64:gpr32 = LDURWi %63:gpr64common, -4, debug-location !524 :: (load 4 from %ir.arrayidx97); is.c:449:33
  Ready @5c
  BotQ.A BotLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %63:gpr64common = ADDXrs %61:gpr64, %62:gpr64, 2, debug-location !524; is.c:449:33
  Ready @6c
  BotQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 1 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %66:gpr64common = LDRSWui %stack.1.i, 0, debug-location !529 :: (dereferenceable load 4 from %ir.i); is.c:496:21
  Ready @7c
  BotQ.A BotLatency SU(6) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 10c > CritPath 9
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %62:gpr64 = LDRSWui %stack.2.k, 0, debug-location !525 :: (dereferenceable load 4 from %ir.k); is.c:449:46
  Ready @10c
  BotQ.A BotLatency SU(1) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 9
  Executed: 11c
  Critical: 9c, 9 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %61:gpr64 = LDRXui %stack.3.key_buff_ptr, 0, debug-location !524 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:449:33
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 10
  Executed: 12c
  Critical: 10c, 10 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.28 ***
SU(0):   %61:gpr64 = LDRXui %stack.3.key_buff_ptr, 0, debug-location !524 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:449:33
SU(1):   %62:gpr64 = LDRSWui %stack.2.k, 0, debug-location !525 :: (dereferenceable load 4 from %ir.k); is.c:449:46
SU(6):   %66:gpr64common = LDRSWui %stack.1.i, 0, debug-location !529 :: (dereferenceable load 4 from %ir.i); is.c:496:21
SU(2):   %63:gpr64common = ADDXrs %61:gpr64, %62:gpr64, 2, debug-location !524; is.c:449:33
SU(3):   %64:gpr32 = LDURWi %63:gpr64common, -4, debug-location !524 :: (load 4 from %ir.arrayidx97); is.c:449:33
SU(8):   %69:gpr32 = LDRWui %stack.0.iteration.addr, 0, debug-location !537 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:0
SU(7):   %68:gpr32 = LDRWroX %67:gpr64common, %66:gpr64common, 0, 1, debug-location !537 :: (load 4 from %ir.arrayidx104); is.c:0
SU(9):   dead $wzr = SUBSWri %66.sub_32:gpr64common, 1, 0, implicit-def $nzcv, debug-location !534; is.c:496:28
SU(4):   STRWui %64:gpr32, %stack.7.key_rank, 0, debug-location !523 :: (store 4 into %ir.key_rank); is.c:449:22
SU(5):   STRWui $wzr, %stack.8.failed, 0, debug-location !528 :: (store 4 into %ir.failed); is.c:450:17

********** MI Scheduling **********
rank:%bb.31 if.then102
  From: %79:gpr32 = nsw ADDWrr %68:gpr32, %69:gpr32, debug-location !538; is.c:497:56
    To: Bcc 0, %bb.33, implicit killed $nzcv, debug-location !542; is.c:497:25
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %79:gpr32 = nsw ADDWrr %68:gpr32, %69:gpr32, debug-location !538; is.c:497:56
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Data Latency=1 Reg=%79
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWrr %64:gpr32, %79:gpr32, implicit-def $nzcv, debug-location !542; is.c:497:25
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Data Latency=1 Reg=%79
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 0, %bb.33, implicit killed $nzcv, debug-location !542; is.c:497:25
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 2
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWrr %64:gpr32, %79:gpr32, implicit-def $nzcv, debug-location !542; is.c:497:25
  Ready @1c
  BotQ.A TopLatency SU(1) 1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %79:gpr32 = nsw ADDWrr %68:gpr32, %69:gpr32, debug-location !538; is.c:497:56
  Ready @2c
  BotQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.31 ***
SU(0):   %79:gpr32 = nsw ADDWrr %68:gpr32, %69:gpr32, debug-location !538; is.c:497:56
SU(1):   dead $wzr = SUBSWrr %64:gpr32, %79:gpr32, implicit-def $nzcv, debug-location !542; is.c:497:25

********** MI Scheduling **********
rank:%bb.33 if.else
  From: %82:gpr32common = LDRWui %81:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !545 :: (dereferenceable load 4 from @passed_verification); is.c:500:44
    To: B %bb.37
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %82:gpr32common = LDRWui %81:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !545 :: (dereferenceable load 4 from @passed_verification); is.c:500:44
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%82
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %83:gpr32common = nsw ADDWri %82:gpr32common, 1, 0, debug-location !545; is.c:500:44
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%82
  Successors:
    SU(2): Data Latency=1 Reg=%83
  Single Issue       : false;
SU(2):   STRWui %83:gpr32common, %81:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !545 :: (store 4 into @passed_verification); is.c:500:44
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%83
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.37
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %83:gpr32common, %81:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !545 :: (store 4 into @passed_verification); is.c:500:44
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %83:gpr32common = nsw ADDWri %82:gpr32common, 1, 0, debug-location !545; is.c:500:44
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %82:gpr32common = LDRWui %81:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !545 :: (dereferenceable load 4 from @passed_verification); is.c:500:44
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.33 ***
SU(0):   %82:gpr32common = LDRWui %81:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !545 :: (dereferenceable load 4 from @passed_verification); is.c:500:44
SU(1):   %83:gpr32common = nsw ADDWri %82:gpr32common, 1, 0, debug-location !545; is.c:500:44
SU(2):   STRWui %83:gpr32common, %81:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !545 :: (store 4 into @passed_verification); is.c:500:44

********** MI Scheduling **********
rank:%bb.34 if.else109
  From: %73:gpr32 = nsw SUBWrr %68:gpr32, %69:gpr32, debug-location !546; is.c:503:56
    To: Bcc 0, %bb.36, implicit killed $nzcv, debug-location !550; is.c:503:25
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %73:gpr32 = nsw SUBWrr %68:gpr32, %69:gpr32, debug-location !546; is.c:503:56
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Data Latency=1 Reg=%73
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWrr %64:gpr32, %73:gpr32, implicit-def $nzcv, debug-location !550; is.c:503:25
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Data Latency=1 Reg=%73
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 0, %bb.36, implicit killed $nzcv, debug-location !550; is.c:503:25
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 2
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWrr %64:gpr32, %73:gpr32, implicit-def $nzcv, debug-location !550; is.c:503:25
  Ready @1c
  BotQ.A TopLatency SU(1) 1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %73:gpr32 = nsw SUBWrr %68:gpr32, %69:gpr32, debug-location !546; is.c:503:56
  Ready @2c
  BotQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.34 ***
SU(0):   %73:gpr32 = nsw SUBWrr %68:gpr32, %69:gpr32, debug-location !546; is.c:503:56
SU(1):   dead $wzr = SUBSWrr %64:gpr32, %73:gpr32, implicit-def $nzcv, debug-location !550; is.c:503:25

********** MI Scheduling **********
rank:%bb.36 if.else115
  From: %76:gpr32common = LDRWui %81:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !553 :: (dereferenceable load 4 from @passed_verification); is.c:506:44
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %76:gpr32common = LDRWui %81:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !553 :: (dereferenceable load 4 from @passed_verification); is.c:506:44
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%76
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %77:gpr32common = nsw ADDWri %76:gpr32common, 1, 0, debug-location !553; is.c:506:44
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%76
  Successors:
    SU(2): Data Latency=1 Reg=%77
  Single Issue       : false;
SU(2):   STRWui %77:gpr32common, %81:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !553 :: (store 4 into @passed_verification); is.c:506:44
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%77
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %77:gpr32common, %81:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !553 :: (store 4 into @passed_verification); is.c:506:44
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %77:gpr32common = nsw ADDWri %76:gpr32common, 1, 0, debug-location !553; is.c:506:44
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %76:gpr32common = LDRWui %81:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !553 :: (dereferenceable load 4 from @passed_verification); is.c:506:44
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.36 ***
SU(0):   %76:gpr32common = LDRWui %81:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !553 :: (dereferenceable load 4 from @passed_verification); is.c:506:44
SU(1):   %77:gpr32common = nsw ADDWri %76:gpr32common, 1, 0, debug-location !553; is.c:506:44
SU(2):   STRWui %77:gpr32common, %81:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !553 :: (store 4 into @passed_verification); is.c:506:44

********** MI Scheduling **********
rank:%bb.37 if.end118
  From: %85:gpr32common = LDRWui %stack.8.failed, 0, debug-location !554 :: (dereferenceable load 4 from %ir.failed); is.c:538:17
    To: Bcc 1, %bb.39, implicit killed $nzcv, debug-location !557; is.c:538:17
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %85:gpr32common = LDRWui %stack.8.failed, 0, debug-location !554 :: (dereferenceable load 4 from %ir.failed); is.c:538:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%85
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %85:gpr32common, 1, 0, implicit-def $nzcv, debug-location !557; is.c:538:17
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%85
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.39, implicit killed $nzcv, debug-location !557; is.c:538:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %85:gpr32common, 1, 0, implicit-def $nzcv, debug-location !557; is.c:538:17
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %85:gpr32common = LDRWui %stack.8.failed, 0, debug-location !554 :: (dereferenceable load 4 from %ir.failed); is.c:538:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.37 ***
SU(0):   %85:gpr32common = LDRWui %stack.8.failed, 0, debug-location !554 :: (dereferenceable load 4 from %ir.failed); is.c:538:17
SU(1):   dead $wzr = SUBSWri %85:gpr32common, 1, 0, implicit-def $nzcv, debug-location !557; is.c:538:17

********** MI Scheduling **********
rank:%bb.38 if.then120
  From: $x0 = COPY %89:gpr64, debug-location !560; is.c:539:17
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $w1, implicit killed $w2, implicit-def $sp, implicit-def dead $w0, debug-location !560; is.c:539:17
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %89:gpr64, debug-location !560; is.c:539:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $w1 = COPY %87:gpr32, debug-location !560; is.c:539:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $w2 = COPY %88:gpr32, debug-location !560; is.c:539:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $w1, implicit killed $w2, implicit-def $sp, implicit-def dead $w0, debug-location !560; is.c:539:17
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $w2 = COPY %88:gpr32, debug-location !560; is.c:539:17
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(1) $w1 = COPY %87:gpr32, debug-location !560; is.c:539:17
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %89:gpr64, debug-location !560; is.c:539:17
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   $x0 = COPY %89:gpr64, debug-location !560; is.c:539:17
SU(1):   $w1 = COPY %87:gpr32, debug-location !560; is.c:539:17
SU(2):   $w2 = COPY %88:gpr32, debug-location !560; is.c:539:17

********** MI Scheduling **********
rank:%bb.38 if.then120
  From: %87:gpr32 = LDRWui %stack.0.iteration.addr, 0, debug-location !558 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:541:24
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !560; is.c:539:17
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %87:gpr32 = LDRWui %stack.0.iteration.addr, 0, debug-location !558 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:541:24
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %88:gpr32 = LDRWui %stack.1.i, 0, debug-location !559 :: (dereferenceable load 4 from %ir.i); is.c:541:40
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !560; is.c:539:17
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %88:gpr32 = LDRWui %stack.1.i, 0, debug-location !559 :: (dereferenceable load 4 from %ir.i); is.c:541:40
  Ready @3c
  BotQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 1
  Executed: 4c
  Critical: 1c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %87:gpr32 = LDRWui %stack.0.iteration.addr, 0, debug-location !558 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:541:24
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   %87:gpr32 = LDRWui %stack.0.iteration.addr, 0, debug-location !558 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:541:24
SU(1):   %88:gpr32 = LDRWui %stack.1.i, 0, debug-location !559 :: (dereferenceable load 4 from %ir.i); is.c:541:40

********** MI Scheduling **********
rank:%bb.39 for.inc123
  From: %91:gpr32common = LDRWui %stack.1.i, 0, debug-location !561 :: (dereferenceable load 4 from %ir.i); is.c:446:39
    To: B %bb.25, debug-location !562; is.c:446:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %91:gpr32common = LDRWui %stack.1.i, 0, debug-location !561 :: (dereferenceable load 4 from %ir.i); is.c:446:39
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%91
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %92:gpr32common = nsw ADDWri %91:gpr32common, 1, 0, debug-location !561; is.c:446:39
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%91
  Successors:
    SU(2): Data Latency=1 Reg=%92
  Single Issue       : false;
SU(2):   STRWui %92:gpr32common, %stack.1.i, 0, debug-location !561 :: (store 4 into %ir.i); is.c:446:39
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%92
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.25, debug-location !562; is.c:446:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %92:gpr32common, %stack.1.i, 0, debug-location !561 :: (store 4 into %ir.i); is.c:446:39
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %92:gpr32common = nsw ADDWri %91:gpr32common, 1, 0, debug-location !561; is.c:446:39
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %91:gpr32common = LDRWui %stack.1.i, 0, debug-location !561 :: (dereferenceable load 4 from %ir.i); is.c:446:39
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.39 ***
SU(0):   %91:gpr32common = LDRWui %stack.1.i, 0, debug-location !561 :: (dereferenceable load 4 from %ir.i); is.c:446:39
SU(1):   %92:gpr32common = nsw ADDWri %91:gpr32common, 1, 0, debug-location !561; is.c:446:39
SU(2):   STRWui %92:gpr32common, %stack.1.i, 0, debug-location !561 :: (store 4 into %ir.i); is.c:446:39

********** MI Scheduling **********
rank:%bb.40 for.end125
  From: %48:gpr32common = LDRWui %stack.0.iteration.addr, 0, debug-location !565 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:549:9
    To: Bcc 1, %bb.42, implicit killed $nzcv, debug-location !568; is.c:549:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %48:gpr32common = LDRWui %stack.0.iteration.addr, 0, debug-location !565 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:549:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%48
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %48:gpr32common, 10, 0, implicit-def $nzcv, debug-location !568; is.c:549:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%48
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.42, implicit killed $nzcv, debug-location !568; is.c:549:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %48:gpr32common, 10, 0, implicit-def $nzcv, debug-location !568; is.c:549:9
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %48:gpr32common = LDRWui %stack.0.iteration.addr, 0, debug-location !565 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:549:9
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.40 ***
SU(0):   %48:gpr32common = LDRWui %stack.0.iteration.addr, 0, debug-location !565 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:549:9
SU(1):   dead $wzr = SUBSWri %48:gpr32common, 10, 0, implicit-def $nzcv, debug-location !568; is.c:549:9

********** MI Scheduling **********
rank:%bb.41 if.then127
  From: %50:gpr64 = LDRXui %stack.3.key_buff_ptr, 0, debug-location !569 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:550:31
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %50:gpr64 = LDRXui %stack.3.key_buff_ptr, 0, debug-location !569 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:550:31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(2): Data Latency=4 Reg=%50
  Single Issue       : false;
SU(1):   %51:gpr64common = ADRP target-flags(aarch64-page) @key_buff_ptr_global, debug-location !570; is.c:550:29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%51
  Single Issue       : false;
SU(2):   STRXui %50:gpr64, %51:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @key_buff_ptr_global, debug-location !570 :: (store 8 into @key_buff_ptr_global); is.c:550:29
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%51
    SU(0): Data Latency=4 Reg=%50
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRXui %50:gpr64, %51:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @key_buff_ptr_global, debug-location !570 :: (store 8 into @key_buff_ptr_global); is.c:550:29
  Ready @0c
  BotQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %51:gpr64common = ADRP target-flags(aarch64-page) @key_buff_ptr_global, debug-location !570; is.c:550:29
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %50:gpr64 = LDRXui %stack.3.key_buff_ptr, 0, debug-location !569 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:550:31
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.41 ***
SU(0):   %50:gpr64 = LDRXui %stack.3.key_buff_ptr, 0, debug-location !569 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:550:31
SU(1):   %51:gpr64common = ADRP target-flags(aarch64-page) @key_buff_ptr_global, debug-location !570; is.c:550:29
SU(2):   STRXui %50:gpr64, %51:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @key_buff_ptr_global, debug-location !570 :: (store 8 into @key_buff_ptr_global); is.c:550:29

********** INTERVALS **********
W0 [0B,16r:0)[4336r,4384r:2)[4384r,4384d:1)  0@0B-phi 1@4384r 2@4336r
%4 [48r,264r:0)  0@48r weight:0.000000e+00
%5 [80r,2048B:0)  0@80r weight:0.000000e+00
%6 [272r,296r:0)  0@272r weight:0.000000e+00
%7 [16r,280r:0)  0@16r weight:0.000000e+00
%9 [128r,288r:0)  0@128r weight:0.000000e+00
%11 [176r,280r:0)  0@176r weight:0.000000e+00
%12 [280r,296r:0)  0@280r weight:0.000000e+00
%14 [320r,328r:0)  0@320r weight:0.000000e+00
%17 [608r,624r:0)  0@608r weight:0.000000e+00
%20 [880r,896r:0)  0@880r weight:0.000000e+00
%21 [848r,1200B:0)  0@848r weight:0.000000e+00
%23 [1216r,1272r:0)  0@1216r weight:0.000000e+00
%25 [1264r,1280r:0)  0@1264r weight:0.000000e+00
%26 [1328r,1344r:0)  0@1328r weight:0.000000e+00
%29 [1680r,1696r:0)  0@1680r weight:0.000000e+00
%30 [1632r,2048B:0)  0@1632r weight:0.000000e+00
%34 [2144r,2160r:0)  0@2144r weight:0.000000e+00
%38 [2432r,2448r:0)  0@2432r weight:0.000000e+00
%39 [2400r,2704B:0)  0@2400r weight:0.000000e+00
%42 [2784r,2800r:0)  0@2784r weight:0.000000e+00
%43 [2752r,3040B:0)  0@2752r weight:0.000000e+00
%46 [3184r,3200r:0)  0@3184r weight:0.000000e+00
%48 [4512r,4528r:0)  0@4512r weight:0.000000e+00
%50 [4592r,4624r:0)  0@4592r weight:0.000000e+00
%51 [4608r,4624r:0)  0@4608r weight:0.000000e+00
%53 [3264r,3280r:0)  0@3264r weight:0.000000e+00
%55 [3280r,3376r:0)  0@3280r weight:0.000000e+00
%57 [3088r,4496B:0)  0@3088r weight:0.000000e+00
%61 [3440r,3556r:0)  0@3440r weight:0.000000e+00
%62 [3456r,3556r:0)  0@3456r weight:0.000000e+00
%63 [3556r,3560r:0)  0@3556r weight:0.000000e+00
%64 [3560r,3824r:0)[4000B,4032r:0)  0@3560r weight:0.000000e+00
%66 [3552r,3744r:0)  0@3552r weight:0.000000e+00
%67 [3104r,4496B:0)  0@3104r weight:0.000000e+00
%68 [3608r,3808r:0)[4000B,4016r:0)  0@3608r weight:0.000000e+00
%69 [3600r,3808r:0)[4000B,4016r:0)  0@3600r weight:0.000000e+00
%73 [4016r,4032r:0)  0@4016r weight:0.000000e+00
%76 [4144r,4160r:0)  0@4144r weight:0.000000e+00
%77 [4160r,4176r:0)  0@4160r weight:0.000000e+00
%79 [3808r,3824r:0)  0@3808r weight:0.000000e+00
%81 [3136r,4496B:0)  0@3136r weight:0.000000e+00
%82 [3936r,3952r:0)  0@3936r weight:0.000000e+00
%83 [3952r,3968r:0)  0@3952r weight:0.000000e+00
%84 [3120r,4496B:0)  0@3120r weight:0.000000e+00
%85 [4208r,4224r:0)  0@4208r weight:0.000000e+00
%87 [4288r,4352r:0)  0@4288r weight:0.000000e+00
%88 [4304r,4368r:0)  0@4304r weight:0.000000e+00
%89 [3152r,4496B:0)  0@3152r weight:0.000000e+00
%91 [4432r,4448r:0)  0@4432r weight:0.000000e+00
%92 [4448r,4464r:0)  0@4448r weight:0.000000e+00
%93 [2864r,2896r:0)  0@2864r weight:0.000000e+00
%94 [2880r,2896r:0)  0@2880r weight:0.000000e+00
%95 [2896r,2960r:0)  0@2896r weight:0.000000e+00
%96 [2912r,2944r:0)  0@2912r weight:0.000000e+00
%97 [2928r,2944r:0)  0@2928r weight:0.000000e+00
%98 [2944r,2960r:0)  0@2944r weight:0.000000e+00
%99 [2976r,2992r:0)  0@2976r weight:0.000000e+00
%100 [2992r,3008r:0)  0@2992r weight:0.000000e+00
%101 [2568r,2624r:0)  0@2568r weight:0.000000e+00
%102 [2528r,2560r:0)  0@2528r weight:0.000000e+00
%103 [2544r,2560r:0)  0@2544r weight:0.000000e+00
%104 [2560r,2576r:0)  0@2560r weight:0.000000e+00
%105 [2576r,2624r:0)  0@2576r weight:0.000000e+00
%106 [2592r,2608r:0)  0@2592r weight:0.000000e+00
%107 [2608r,2624r:0)  0@2608r weight:0.000000e+00
%108 [2640r,2656r:0)  0@2640r weight:0.000000e+00
%109 [2656r,2672r:0)  0@2656r weight:0.000000e+00
%110 [2224r,2288r:0)  0@2224r weight:0.000000e+00
%112 [2112r,2352r:0)  0@2112r weight:0.000000e+00
%114 [2288r,2304r:0)  0@2288r weight:0.000000e+00
%115 [1760r,2000r:0)  0@1760r weight:0.000000e+00
%118 [1832r,2016r:0)  0@1832r weight:0.000000e+00
%120 [1824r,1872r:0)  0@1824r weight:0.000000e+00
%123 [1872r,1904r:0)  0@1872r weight:0.000000e+00
%125 [1904r,2024r:0)  0@1904r weight:0.000000e+00
%127 [1920r,2016r:0)  0@1920r weight:0.000000e+00
%129 [2008r,2024r:0)  0@2008r weight:0.000000e+00
%130 [1648r,2064r:0)  0@1648r weight:0.000000e+00
%131 [2000r,2032r:0)  0@2000r weight:0.000000e+00
%132 [1408r,1536r:0)  0@1408r weight:0.000000e+00
%134 [1440r,1544r:0)  0@1440r weight:0.000000e+00
%135 [1456r,1488r:0)  0@1456r weight:0.000000e+00
%136 [1296r,2048B:0)  0@1296r weight:0.000000e+00
%137 [1472r,1540r:0)  0@1472r weight:0.000000e+00
%139 [1488r,1540r:0)  0@1488r weight:0.000000e+00
%140 [1540r,1544r:0)  0@1540r weight:0.000000e+00
%141 [1536r,1552r:0)  0@1536r weight:0.000000e+00
%142 [960r,1152r:0)  0@960r weight:0.000000e+00
%145 [1016r,1056r:0)  0@1016r weight:0.000000e+00
%147 [1008r,1056r:0)  0@1008r weight:0.000000e+00
%150 [1056r,1088r:0)  0@1056r weight:0.000000e+00
%152 [1088r,1160r:0)  0@1088r weight:0.000000e+00
%154 [1104r,1156r:0)  0@1104r weight:0.000000e+00
%155 [1156r,1160r:0)  0@1156r weight:0.000000e+00
%156 [1152r,1168r:0)  0@1152r weight:0.000000e+00
%157 [688r,752r:0)  0@688r weight:0.000000e+00
%159 [576r,1584B:0)  0@576r weight:0.000000e+00
%161 [752r,768r:0)  0@752r weight:0.000000e+00
%162 [384r,480r:0)  0@384r weight:0.000000e+00
%164 [416r,488r:0)  0@416r weight:0.000000e+00
%165 [256r,528B:0)  0@256r weight:0.000000e+00
%166 [432r,448r:0)  0@432r weight:0.000000e+00
%168 [448r,488r:0)  0@448r weight:0.000000e+00
%169 [304r,4496B:0)  0@304r weight:0.000000e+00
%170 [480r,496r:0)  0@480r weight:0.000000e+00
RegMasks: 4384r
********** MACHINEINSTRS **********
# Machine code for function rank: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=8, align=8, at location [SP]
  fi#4: size=8, align=8, at location [SP]
  fi#5: size=4, align=4, at location [SP]
  fi#6: size=4, align=4, at location [SP]
  fi#7: size=4, align=4, at location [SP]
  fi#8: size=4, align=4, at location [SP]
Function Live Ins: $w0 in %3

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $w0
16B	  undef %7.sub_32:gpr64 = COPY $w0
32B	  STRWui %7.sub_32:gpr64, %stack.0.iteration.addr, 0 :: (store 4 into %ir.iteration.addr)
48B	  %4:gpr32 = MOVi32imm 11
80B	  %5:gpr64common = MOVaddr target-flags(aarch64-page) @key_array, target-flags(aarch64-pageoff, aarch64-nc) @key_array, debug-location !355; is.c:384:5
128B	  %9:gpr64 = SBFMXri %7:gpr64, 0, 31, debug-location !353; is.c:384:28
176B	  %11:gpr32 = MOVi32imm 2097152
240B	  STRWui $wzr, %stack.1.i, 0, debug-location !363 :: (store 4 into %ir.i); is.c:389:12
256B	  %165:gpr64common = MOVaddr target-flags(aarch64-page) @test_index_array, target-flags(aarch64-pageoff, aarch64-nc) @test_index_array
264B	  STRWui %4:gpr32, %stack.5.shift, 0, debug-location !350 :: (store 4 into %ir.shift); is.c:380:9
272B	  %6:gpr64sp = ADDXrx %5:gpr64common, %7.sub_32:gpr64, 50, debug-location !355; is.c:384:5
280B	  %12:gpr32 = nsw SUBWrr %11:gpr32, %7.sub_32:gpr64, debug-location !358; is.c:385:53
288B	  STRWui %9.sub_32:gpr64, %6:gpr64sp, 0, debug-location !356 :: (store 4 into %ir.arrayidx); is.c:384:26
296B	  STRWui %12:gpr32, %6:gpr64sp, 10, debug-location !362 :: (store 4 into %ir.arrayidx2); is.c:385:43
304B	  %169:gpr64common = MOVaddr target-flags(aarch64-page) @partial_verify_vals, target-flags(aarch64-pageoff, aarch64-nc) @partial_verify_vals

312B	bb.1.for.cond:
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

320B	  %14:gpr32common = LDRWui %stack.1.i, 0, debug-location !366 :: (dereferenceable load 4 from %ir.i); is.c:389:17
328B	  dead $wzr = SUBSWri %14:gpr32common, 4, 0, implicit-def $nzcv, debug-location !369; is.c:389:5
336B	  Bcc 12, %bb.3, implicit killed $nzcv, debug-location !369; is.c:389:5
352B	  B %bb.2, debug-location !369; is.c:389:5

368B	bb.2.for.body:
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

384B	  %162:gpr64common = LDRSWui %stack.1.i, 0, debug-location !370 :: (dereferenceable load 4 from %ir.i); is.c:390:61
416B	  %164:gpr64 = UBFMXri %162:gpr64common, 62, 61, debug-location !371; is.c:390:44
432B	  %166:gpr64 = LDRSWroX %165:gpr64common, %164:gpr64, 0, 0, debug-location !371 :: (load 4 from %ir.arrayidx4); is.c:390:44
448B	  %168:gpr32 = LDRWroX %5:gpr64common, %166:gpr64, 0, 1, debug-location !372 :: (load 4 from %ir.arrayidx6); is.c:390:34
480B	  %170:gpr32common = nsw ADDWri %162.sub_32:gpr64common, 1, 0, debug-location !376; is.c:389:39
488B	  STRWroX %168:gpr32, %169:gpr64common, %164:gpr64, 0, 0, debug-location !375 :: (store 4 into %ir.arrayidx8); is.c:390:32
496B	  STRWui %170:gpr32common, %stack.1.i, 0, debug-location !376 :: (store 4 into %ir.i); is.c:389:39
512B	  B %bb.1, debug-location !377; is.c:389:5

528B	bb.3.for.end:
	; predecessors: %bb.1
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

560B	  STRWui $wzr, %stack.1.i, 0, debug-location !380 :: (store 4 into %ir.i); is.c:395:12
576B	  %159:gpr64common = MOVaddr target-flags(aarch64-page) @bucket_size, target-flags(aarch64-pageoff, aarch64-nc) @bucket_size

592B	bb.4.for.cond9:
	; predecessors: %bb.3, %bb.5
	  successors: %bb.5(0x7c000000), %bb.6(0x04000000); %bb.5(96.88%), %bb.6(3.12%)

608B	  %17:gpr32common = LDRWui %stack.1.i, 0, debug-location !383 :: (dereferenceable load 4 from %ir.i); is.c:395:17
624B	  dead $wzr = SUBSWri %17:gpr32common, 1023, 0, implicit-def $nzcv, debug-location !386; is.c:395:5
640B	  Bcc 12, %bb.6, implicit killed $nzcv, debug-location !386; is.c:395:5
656B	  B %bb.5, debug-location !386; is.c:395:5

672B	bb.5.for.body11:
	; predecessors: %bb.4
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

688B	  %157:gpr64common = LDRSWui %stack.1.i, 0, debug-location !387 :: (dereferenceable load 4 from %ir.i); is.c:396:21
736B	  STRWroX $wzr, %159:gpr64common, %157:gpr64common, 0, 1, debug-location !389 :: (store 4 into %ir.arrayidx13); is.c:396:24
752B	  %161:gpr32common = nsw ADDWri %157.sub_32:gpr64common, 1, 0, debug-location !390; is.c:395:35
768B	  STRWui %161:gpr32common, %stack.1.i, 0, debug-location !390 :: (store 4 into %ir.i); is.c:395:35
784B	  B %bb.4, debug-location !391; is.c:395:5

800B	bb.6.for.end16:
	; predecessors: %bb.4
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

832B	  STRWui $wzr, %stack.1.i, 0, debug-location !394 :: (store 4 into %ir.i); is.c:399:12
848B	  %21:gpr32 = MOVi32imm 33554431

864B	bb.7.for.cond17:
	; predecessors: %bb.6, %bb.8
	  successors: %bb.8(0x7c000000), %bb.9(0x04000000); %bb.8(96.88%), %bb.9(3.12%)

880B	  %20:gpr32 = LDRWui %stack.1.i, 0, debug-location !397 :: (dereferenceable load 4 from %ir.i); is.c:399:17
896B	  dead $wzr = SUBSWrr %20:gpr32, %21:gpr32, implicit-def $nzcv, debug-location !400; is.c:399:5
912B	  Bcc 12, %bb.9, implicit killed $nzcv, debug-location !400; is.c:399:5
928B	  B %bb.8, debug-location !400; is.c:399:5

944B	bb.8.for.body19:
	; predecessors: %bb.7
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

960B	  %142:gpr64common = LDRSWui %stack.1.i, 0, debug-location !401 :: (dereferenceable load 4 from %ir.i); is.c:400:31
1008B	  undef %147.sub_32:gpr64 = LDRWui %stack.5.shift, 0, debug-location !403 :: (dereferenceable load 4 from %ir.shift); is.c:400:37
1016B	  %145:gpr32 = LDRWroX %5:gpr64common, %142:gpr64common, 0, 1, debug-location !402 :: (load 4 from %ir.arrayidx21); is.c:400:21
1056B	  undef %150.sub_32:gpr64 = ASRVWr %145:gpr32, %147.sub_32:gpr64, debug-location !404; is.c:400:34
1088B	  %152:gpr64 = SBFMXri %150:gpr64, 62, 31, debug-location !405; is.c:400:9
1104B	  %154:gpr32common = LDRWroX %159:gpr64common, %152:gpr64, 0, 0, debug-location !406 :: (load 4 from %ir.arrayidx23); is.c:400:43
1152B	  %156:gpr32common = nsw ADDWri %142.sub_32:gpr64common, 1, 0, debug-location !407; is.c:399:32
1156B	  %155:gpr32common = nsw ADDWri %154:gpr32common, 1, 0, debug-location !406; is.c:400:43
1160B	  STRWroX %155:gpr32common, %159:gpr64common, %152:gpr64, 0, 0, debug-location !406 :: (store 4 into %ir.arrayidx23); is.c:400:43
1168B	  STRWui %156:gpr32common, %stack.1.i, 0, debug-location !407 :: (store 4 into %ir.i); is.c:399:32
1184B	  B %bb.7, debug-location !408; is.c:399:5

1200B	bb.9.for.end27:
	; predecessors: %bb.7
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

1216B	  %23:gpr64common = ADRP target-flags(aarch64-page) @bucket_ptrs, debug-location !411; is.c:403:20
1264B	  %25:gpr32 = MOVi32imm 1
1272B	  STRWui $wzr, %23:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @bucket_ptrs, debug-location !411 :: (store 4 into `i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @bucket_ptrs, i64 0, i64 0)`, align 16); is.c:403:20
1280B	  STRWui %25:gpr32, %stack.1.i, 0, debug-location !412 :: (store 4 into %ir.i); is.c:404:12
1296B	  %136:gpr64common = MOVaddr target-flags(aarch64-page) @bucket_ptrs, target-flags(aarch64-pageoff, aarch64-nc) @bucket_ptrs

1312B	bb.10.for.cond28:
	; predecessors: %bb.9, %bb.11
	  successors: %bb.11(0x7c000000), %bb.12(0x04000000); %bb.11(96.88%), %bb.12(3.12%)

1328B	  %26:gpr32common = LDRWui %stack.1.i, 0, debug-location !415 :: (dereferenceable load 4 from %ir.i); is.c:404:17
1344B	  dead $wzr = SUBSWri %26:gpr32common, 1023, 0, implicit-def $nzcv, debug-location !418; is.c:404:5
1360B	  Bcc 12, %bb.12, implicit killed $nzcv, debug-location !418; is.c:404:5
1376B	  B %bb.11, debug-location !418; is.c:404:5

1392B	bb.11.for.body30:
	; predecessors: %bb.10
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

1408B	  %132:gpr64common = LDRSWui %stack.1.i, 0, debug-location !419 :: (dereferenceable load 4 from %ir.i); is.c:405:38
1440B	  %134:gpr64common = UBFMXri %132:gpr64common, 62, 61, debug-location !420; is.c:405:40
1456B	  %135:gpr64common = SUBXri %134:gpr64common, 4, 0, debug-location !421; is.c:405:26
1472B	  %137:gpr32 = LDRWroX %136:gpr64common, %135:gpr64common, 0, 0, debug-location !421 :: (load 4 from %ir.arrayidx33); is.c:405:26
1488B	  %139:gpr32 = LDRWroX %159:gpr64common, %135:gpr64common, 0, 0, debug-location !424 :: (load 4 from %ir.arrayidx36); is.c:405:47
1536B	  %141:gpr32common = nsw ADDWri %132.sub_32:gpr64common, 1, 0, debug-location !429; is.c:404:35
1540B	  %140:gpr32 = nsw ADDWrr %137:gpr32, %139:gpr32, debug-location !425; is.c:405:45
1544B	  STRWroX %140:gpr32, %136:gpr64common, %134:gpr64common, 0, 0, debug-location !428 :: (store 4 into %ir.arrayidx39); is.c:405:24
1552B	  STRWui %141:gpr32common, %stack.1.i, 0, debug-location !429 :: (store 4 into %ir.i); is.c:404:35
1568B	  B %bb.10, debug-location !430; is.c:404:5

1584B	bb.12.for.end42:
	; predecessors: %bb.10
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

1616B	  STRWui $wzr, %stack.1.i, 0, debug-location !433 :: (store 4 into %ir.i); is.c:408:12
1632B	  %30:gpr32 = MOVi32imm 33554431
1648B	  %130:gpr64common = MOVaddr target-flags(aarch64-page) @key_buff2, target-flags(aarch64-pageoff, aarch64-nc) @key_buff2

1664B	bb.13.for.cond43:
	; predecessors: %bb.12, %bb.14
	  successors: %bb.14(0x7c000000), %bb.15(0x04000000); %bb.14(96.88%), %bb.15(3.12%)

1680B	  %29:gpr32 = LDRWui %stack.1.i, 0, debug-location !436 :: (dereferenceable load 4 from %ir.i); is.c:408:17
1696B	  dead $wzr = SUBSWrr %29:gpr32, %30:gpr32, implicit-def $nzcv, debug-location !439; is.c:408:5
1712B	  Bcc 12, %bb.15, implicit killed $nzcv, debug-location !439; is.c:408:5
1728B	  B %bb.14, debug-location !439; is.c:408:5

1744B	bb.14.for.body45:
	; predecessors: %bb.13
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

1760B	  %115:gpr64common = LDRSWui %stack.1.i, 0, debug-location !440 :: (dereferenceable load 4 from %ir.i); is.c:409:25
1824B	  undef %120.sub_32:gpr64 = LDRWui %stack.5.shift, 0, debug-location !446 :: (dereferenceable load 4 from %ir.shift); is.c:410:38
1832B	  %118:gpr32 = LDRWroX %5:gpr64common, %115:gpr64common, 0, 1, debug-location !442 :: (load 4 from %ir.arrayidx47); is.c:409:15
1872B	  undef %123.sub_32:gpr64 = ASRVWr %118:gpr32, %120.sub_32:gpr64, debug-location !447; is.c:410:35
1904B	  %125:gpr64 = SBFMXri %123:gpr64, 62, 31, debug-location !448; is.c:410:19
1920B	  %127:gpr64common = LDRSWroX %136:gpr64common, %125:gpr64, 0, 0, debug-location !449 :: (load 4 from %ir.arrayidx50); is.c:410:44
2000B	  %131:gpr32common = nsw ADDWri %115.sub_32:gpr64common, 1, 0, debug-location !452; is.c:408:32
2004B	  STRWui %118:gpr32, %stack.6.key, 0, debug-location !443 :: (store 4 into %ir.key); is.c:409:13
2008B	  %129:gpr32common = nsw ADDWri %127.sub_32:gpr64common, 1, 0, debug-location !449; is.c:410:44
2016B	  STRWroX %118:gpr32, %130:gpr64common, %127:gpr64common, 0, 1, debug-location !451 :: (store 4 into %ir.arrayidx53); is.c:410:48
2024B	  STRWroX %129:gpr32common, %136:gpr64common, %125:gpr64, 0, 0, debug-location !449 :: (store 4 into %ir.arrayidx50); is.c:410:44
2032B	  STRWui %131:gpr32common, %stack.1.i, 0, debug-location !452 :: (store 4 into %ir.i); is.c:408:32
2040B	  B %bb.13, debug-location !453; is.c:408:5

2048B	bb.15.for.end56:
	; predecessors: %bb.13
	  successors: %bb.16(0x80000000); %bb.16(100.00%)

2064B	  STRXui %130:gpr64common, %stack.4.key_buff_ptr2, 0, debug-location !456 :: (store 8 into %ir.key_buff_ptr2); is.c:413:19
2096B	  STRWui $wzr, %stack.1.i, 0, debug-location !457 :: (store 4 into %ir.i); is.c:422:12
2112B	  %112:gpr64common = MOVaddr target-flags(aarch64-page) @key_buff1, target-flags(aarch64-pageoff, aarch64-nc) @key_buff1

2128B	bb.16.for.cond57:
	; predecessors: %bb.15, %bb.17
	  successors: %bb.17(0x7c000000), %bb.18(0x04000000); %bb.17(96.88%), %bb.18(3.12%)

2144B	  %34:gpr32common = LDRWui %stack.1.i, 0, debug-location !460 :: (dereferenceable load 4 from %ir.i); is.c:422:17
2160B	  dead $wzr = SUBSWri %34:gpr32common, 512, 12, implicit-def $nzcv, debug-location !463; is.c:422:5
2176B	  Bcc 10, %bb.18, implicit killed $nzcv, debug-location !463; is.c:422:5
2192B	  B %bb.17, debug-location !463; is.c:422:5

2208B	bb.17.for.body59:
	; predecessors: %bb.16
	  successors: %bb.16(0x80000000); %bb.16(100.00%)

2224B	  %110:gpr64common = LDRSWui %stack.1.i, 0, debug-location !464 :: (dereferenceable load 4 from %ir.i); is.c:423:19
2272B	  STRWroX $wzr, %112:gpr64common, %110:gpr64common, 0, 1, debug-location !466 :: (store 4 into %ir.arrayidx61); is.c:423:22
2288B	  %114:gpr32common = nsw ADDWri %110.sub_32:gpr64common, 1, 0, debug-location !467; is.c:422:31
2304B	  STRWui %114:gpr32common, %stack.1.i, 0, debug-location !467 :: (store 4 into %ir.i); is.c:422:31
2320B	  B %bb.16, debug-location !468; is.c:422:5

2336B	bb.18.for.end64:
	; predecessors: %bb.16
	  successors: %bb.19(0x80000000); %bb.19(100.00%)

2352B	  STRXui %112:gpr64common, %stack.3.key_buff_ptr, 0, debug-location !471 :: (store 8 into %ir.key_buff_ptr); is.c:427:18
2384B	  STRWui $wzr, %stack.1.i, 0, debug-location !472 :: (store 4 into %ir.i); is.c:433:12
2400B	  %39:gpr32 = MOVi32imm 33554431

2416B	bb.19.for.cond65:
	; predecessors: %bb.18, %bb.20
	  successors: %bb.20(0x7c000000), %bb.21(0x04000000); %bb.20(96.88%), %bb.21(3.12%)

2432B	  %38:gpr32 = LDRWui %stack.1.i, 0, debug-location !475 :: (dereferenceable load 4 from %ir.i); is.c:433:17
2448B	  dead $wzr = SUBSWrr %38:gpr32, %39:gpr32, implicit-def $nzcv, debug-location !478; is.c:433:5
2464B	  Bcc 12, %bb.21, implicit killed $nzcv, debug-location !478; is.c:433:5
2480B	  B %bb.20, debug-location !478; is.c:433:5

2496B	bb.20.for.body67:
	; predecessors: %bb.19
	  successors: %bb.19(0x80000000); %bb.19(100.00%)

2528B	  %102:gpr64common = LDRXui %stack.4.key_buff_ptr2, 0, debug-location !480 :: (dereferenceable load 8 from %ir.key_buff_ptr2); is.c:434:22
2544B	  %103:gpr64 = LDRSWui %stack.1.i, 0, debug-location !481 :: (dereferenceable load 4 from %ir.i); is.c:434:36
2560B	  %104:gpr64 = LDRSWroX %102:gpr64common, %103:gpr64, 0, 1, debug-location !480 :: (load 4 from %ir.arrayidx69); is.c:434:22
2568B	  %101:gpr64common = LDRXui %stack.3.key_buff_ptr, 0, debug-location !479 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:434:9
2576B	  %105:gpr64 = UBFMXri %104:gpr64, 62, 61, debug-location !479; is.c:434:9
2592B	  %106:gpr32common = LDRWroX %101:gpr64common, %105:gpr64, 0, 0, debug-location !482 :: (load 4 from %ir.arrayidx71); is.c:434:39
2608B	  %107:gpr32common = nsw ADDWri %106:gpr32common, 1, 0, debug-location !482; is.c:434:39
2624B	  STRWroX %107:gpr32common, %101:gpr64common, %105:gpr64, 0, 0, debug-location !482 :: (store 4 into %ir.arrayidx71); is.c:434:39
2640B	  %108:gpr32common = LDRWui %stack.1.i, 0, debug-location !483 :: (dereferenceable load 4 from %ir.i); is.c:433:32
2656B	  %109:gpr32common = nsw ADDWri %108:gpr32common, 1, 0, debug-location !483; is.c:433:32
2672B	  STRWui %109:gpr32common, %stack.1.i, 0, debug-location !483 :: (store 4 into %ir.i); is.c:433:32
2688B	  B %bb.19, debug-location !484; is.c:433:5

2704B	bb.21.for.end75:
	; predecessors: %bb.19
	  successors: %bb.22(0x80000000); %bb.22(100.00%)

2736B	  STRWui $wzr, %stack.1.i, 0, debug-location !487 :: (store 4 into %ir.i); is.c:440:12
2752B	  %43:gpr32 = MOVi32imm 2097150

2768B	bb.22.for.cond76:
	; predecessors: %bb.21, %bb.23
	  successors: %bb.23(0x7c000000), %bb.24(0x04000000); %bb.23(96.88%), %bb.24(3.12%)

2784B	  %42:gpr32 = LDRWui %stack.1.i, 0, debug-location !490 :: (dereferenceable load 4 from %ir.i); is.c:440:17
2800B	  dead $wzr = SUBSWrr %42:gpr32, %43:gpr32, implicit-def $nzcv, debug-location !493; is.c:440:5
2816B	  Bcc 12, %bb.24, implicit killed $nzcv, debug-location !493; is.c:440:5
2832B	  B %bb.23, debug-location !493; is.c:440:5

2848B	bb.23.for.body78:
	; predecessors: %bb.22
	  successors: %bb.22(0x80000000); %bb.22(100.00%)

2864B	  %93:gpr64 = LDRXui %stack.3.key_buff_ptr, 0, debug-location !494 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:441:32
2880B	  %94:gpr64 = LDRSWui %stack.1.i, 0, debug-location !495 :: (dereferenceable load 4 from %ir.i); is.c:441:45
2896B	  %95:gpr64common = ADDXrs %93:gpr64, %94:gpr64, 2, debug-location !494; is.c:441:32
2912B	  %96:gpr32 = LDRWui %95:gpr64common, 0, debug-location !494 :: (load 4 from %ir.arrayidx80); is.c:441:32
2928B	  %97:gpr32 = LDRWui %95:gpr64common, 1, debug-location !499 :: (load 4 from %ir.arrayidx83); is.c:441:29
2944B	  %98:gpr32 = nsw ADDWrr %97:gpr32, %96:gpr32, debug-location !499; is.c:441:29
2960B	  STRWui %98:gpr32, %95:gpr64common, 1, debug-location !499 :: (store 4 into %ir.arrayidx83); is.c:441:29
2976B	  %99:gpr32common = LDRWui %stack.1.i, 0, debug-location !500 :: (dereferenceable load 4 from %ir.i); is.c:440:35
2992B	  %100:gpr32common = nsw ADDWri %99:gpr32common, 1, 0, debug-location !500; is.c:440:35
3008B	  STRWui %100:gpr32common, %stack.1.i, 0, debug-location !500 :: (store 4 into %ir.i); is.c:440:35
3024B	  B %bb.22, debug-location !501; is.c:440:5

3040B	bb.24.for.end87:
	; predecessors: %bb.22
	  successors: %bb.25(0x80000000); %bb.25(100.00%)

3072B	  STRWui $wzr, %stack.1.i, 0, debug-location !504 :: (store 4 into %ir.i); is.c:446:12
3088B	  %57:gpr32 = MOVi32imm 33554431
3104B	  %67:gpr64common = MOVaddr target-flags(aarch64-page) @test_rank_array, target-flags(aarch64-pageoff, aarch64-nc) @test_rank_array
3120B	  %84:gpr32 = MOVi32imm 1
3136B	  %81:gpr64common = ADRP target-flags(aarch64-page) @passed_verification
3152B	  %89:gpr64 = MOVaddr target-flags(aarch64-page) @.str.1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1

3168B	bb.25.for.cond88:
	; predecessors: %bb.24, %bb.39
	  successors: %bb.26(0x7c000000), %bb.40(0x04000000); %bb.26(96.88%), %bb.40(3.12%)

3184B	  %46:gpr32common = LDRWui %stack.1.i, 0, debug-location !507 :: (dereferenceable load 4 from %ir.i); is.c:446:17
3200B	  dead $wzr = SUBSWri %46:gpr32common, 4, 0, implicit-def $nzcv, debug-location !510; is.c:446:5
3216B	  Bcc 12, %bb.40, implicit killed $nzcv, debug-location !510; is.c:446:5
3232B	  B %bb.26, debug-location !510; is.c:446:5

3248B	bb.26.for.body90:
	; predecessors: %bb.25
	  successors: %bb.27(0x60000000), %bb.39(0x20000000); %bb.27(75.00%), %bb.39(25.00%)

3264B	  %53:gpr64 = LDRSWui %stack.1.i, 0, debug-location !511 :: (dereferenceable load 4 from %ir.i); is.c:447:33
3280B	  %55:gpr32common = LDRWroX %169:gpr64common, %53:gpr64, 0, 1, debug-location !513 :: (load 4 from %ir.arrayidx92); is.c:447:13
3312B	  dead $wzr = SUBSWri %55:gpr32common, 1, 0, implicit-def $nzcv, debug-location !520; is.c:448:19
3320B	  STRWui %55:gpr32common, %stack.2.k, 0, debug-location !514 :: (store 4 into %ir.k); is.c:447:11
3328B	  Bcc 11, %bb.39, implicit killed $nzcv, debug-location !520; is.c:448:19
3344B	  B %bb.27, debug-location !520; is.c:448:19

3360B	bb.27.for.body90:
	; predecessors: %bb.26
	  successors: %bb.28(0x55555555), %bb.39(0x2aaaaaab); %bb.28(66.67%), %bb.39(33.33%)

3376B	  dead $wzr = SUBSWrr %55:gpr32common, %57:gpr32, implicit-def $nzcv, debug-location !520; is.c:448:19
3392B	  Bcc 12, %bb.39, implicit killed $nzcv, debug-location !520; is.c:448:19
3408B	  B %bb.28, debug-location !520; is.c:448:19

3424B	bb.28.if.then:
	; predecessors: %bb.27
	  successors: %bb.31(0x10000000), %bb.29(0x70000000); %bb.31(12.50%), %bb.29(87.50%)

3440B	  %61:gpr64 = LDRXui %stack.3.key_buff_ptr, 0, debug-location !524 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:449:33
3456B	  %62:gpr64 = LDRSWui %stack.2.k, 0, debug-location !525 :: (dereferenceable load 4 from %ir.k); is.c:449:46
3552B	  %66:gpr64common = LDRSWui %stack.1.i, 0, debug-location !529 :: (dereferenceable load 4 from %ir.i); is.c:496:21
3556B	  %63:gpr64common = ADDXrs %61:gpr64, %62:gpr64, 2, debug-location !524; is.c:449:33
3560B	  %64:gpr32 = LDURWi %63:gpr64common, -4, debug-location !524 :: (load 4 from %ir.arrayidx97); is.c:449:33
3600B	  %69:gpr32 = LDRWui %stack.0.iteration.addr, 0, debug-location !537 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:0
3608B	  %68:gpr32 = LDRWroX %67:gpr64common, %66:gpr64common, 0, 1, debug-location !537 :: (load 4 from %ir.arrayidx104); is.c:0
3616B	  dead $wzr = SUBSWri %66.sub_32:gpr64common, 1, 0, implicit-def $nzcv, debug-location !534; is.c:496:28
3620B	  STRWui %64:gpr32, %stack.7.key_rank, 0, debug-location !523 :: (store 4 into %ir.key_rank); is.c:449:22
3624B	  STRWui $wzr, %stack.8.failed, 0, debug-location !528 :: (store 4 into %ir.failed); is.c:450:17
3632B	  Bcc 0, %bb.31, implicit killed $nzcv, debug-location !534; is.c:496:28
3648B	  B %bb.29, debug-location !534; is.c:496:28

3664B	bb.29.if.then:
	; predecessors: %bb.28
	  successors: %bb.31(0x12492492), %bb.30(0x6db6db6e); %bb.31(14.29%), %bb.30(85.71%)

3680B	  dead $wzr = SUBSWri %66.sub_32:gpr64common, 2, 0, implicit-def $nzcv, debug-location !534; is.c:496:28
3696B	  Bcc 0, %bb.31, implicit killed $nzcv, debug-location !534; is.c:496:28
3712B	  B %bb.30, debug-location !534; is.c:496:28

3728B	bb.30.if.then:
	; predecessors: %bb.29
	  successors: %bb.31(0x2aaaaaab), %bb.34(0x55555555); %bb.31(33.33%), %bb.34(66.67%)

3744B	  dead $wzr = SUBSWri %66.sub_32:gpr64common, 4, 0, implicit-def $nzcv, debug-location !534; is.c:496:28
3760B	  Bcc 1, %bb.34, implicit killed $nzcv, debug-location !534; is.c:496:28
3776B	  B %bb.31, debug-location !534; is.c:496:28

3792B	bb.31.if.then102:
	; predecessors: %bb.28, %bb.29, %bb.30
	  successors: %bb.32(0x40000000), %bb.33(0x40000000); %bb.32(50.00%), %bb.33(50.00%)

3808B	  %79:gpr32 = nsw ADDWrr %68:gpr32, %69:gpr32, debug-location !538; is.c:497:56
3824B	  dead $wzr = SUBSWrr %64:gpr32, %79:gpr32, implicit-def $nzcv, debug-location !542; is.c:497:25
3840B	  Bcc 0, %bb.33, implicit killed $nzcv, debug-location !542; is.c:497:25
3856B	  B %bb.32, debug-location !542; is.c:497:25

3872B	bb.32.if.then107:
	; predecessors: %bb.31
	  successors: %bb.37(0x80000000); %bb.37(100.00%)

3888B	  STRWui %84:gpr32, %stack.8.failed, 0, debug-location !543 :: (store 4 into %ir.failed); is.c:498:32
3904B	  B %bb.37, debug-location !544; is.c:498:25

3920B	bb.33.if.else:
	; predecessors: %bb.31
	  successors: %bb.37(0x80000000); %bb.37(100.00%)

3936B	  %82:gpr32common = LDRWui %81:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !545 :: (dereferenceable load 4 from @passed_verification); is.c:500:44
3952B	  %83:gpr32common = nsw ADDWri %82:gpr32common, 1, 0, debug-location !545; is.c:500:44
3968B	  STRWui %83:gpr32common, %81:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !545 :: (store 4 into @passed_verification); is.c:500:44
3984B	  B %bb.37

4000B	bb.34.if.else109:
	; predecessors: %bb.30
	  successors: %bb.35(0x40000000), %bb.36(0x40000000); %bb.35(50.00%), %bb.36(50.00%)

4016B	  %73:gpr32 = nsw SUBWrr %68:gpr32, %69:gpr32, debug-location !546; is.c:503:56
4032B	  dead $wzr = SUBSWrr %64:gpr32, %73:gpr32, implicit-def $nzcv, debug-location !550; is.c:503:25
4048B	  Bcc 0, %bb.36, implicit killed $nzcv, debug-location !550; is.c:503:25
4064B	  B %bb.35, debug-location !550; is.c:503:25

4080B	bb.35.if.then114:
	; predecessors: %bb.34
	  successors: %bb.37(0x80000000); %bb.37(100.00%)

4096B	  STRWui %84:gpr32, %stack.8.failed, 0, debug-location !551 :: (store 4 into %ir.failed); is.c:504:32
4112B	  B %bb.37, debug-location !552; is.c:504:25

4128B	bb.36.if.else115:
	; predecessors: %bb.34
	  successors: %bb.37(0x80000000); %bb.37(100.00%)

4144B	  %76:gpr32common = LDRWui %81:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !553 :: (dereferenceable load 4 from @passed_verification); is.c:506:44
4160B	  %77:gpr32common = nsw ADDWri %76:gpr32common, 1, 0, debug-location !553; is.c:506:44
4176B	  STRWui %77:gpr32common, %81:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !553 :: (store 4 into @passed_verification); is.c:506:44

4192B	bb.37.if.end118:
	; predecessors: %bb.36, %bb.35, %bb.33, %bb.32
	  successors: %bb.38(0x40000000), %bb.39(0x40000000); %bb.38(50.00%), %bb.39(50.00%)

4208B	  %85:gpr32common = LDRWui %stack.8.failed, 0, debug-location !554 :: (dereferenceable load 4 from %ir.failed); is.c:538:17
4224B	  dead $wzr = SUBSWri %85:gpr32common, 1, 0, implicit-def $nzcv, debug-location !557; is.c:538:17
4240B	  Bcc 1, %bb.39, implicit killed $nzcv, debug-location !557; is.c:538:17
4256B	  B %bb.38, debug-location !557; is.c:538:17

4272B	bb.38.if.then120:
	; predecessors: %bb.37
	  successors: %bb.39(0x80000000); %bb.39(100.00%)

4288B	  %87:gpr32 = LDRWui %stack.0.iteration.addr, 0, debug-location !558 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:541:24
4304B	  %88:gpr32 = LDRWui %stack.1.i, 0, debug-location !559 :: (dereferenceable load 4 from %ir.i); is.c:541:40
4320B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !560; is.c:539:17
4336B	  $x0 = COPY %89:gpr64, debug-location !560; is.c:539:17
4352B	  $w1 = COPY %87:gpr32, debug-location !560; is.c:539:17
4368B	  $w2 = COPY %88:gpr32, debug-location !560; is.c:539:17
4384B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $w1, implicit killed $w2, implicit-def $sp, implicit-def dead $w0, debug-location !560; is.c:539:17
4400B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !560; is.c:539:17

4416B	bb.39.for.inc123:
	; predecessors: %bb.26, %bb.27, %bb.37, %bb.38
	  successors: %bb.25(0x80000000); %bb.25(100.00%)

4432B	  %91:gpr32common = LDRWui %stack.1.i, 0, debug-location !561 :: (dereferenceable load 4 from %ir.i); is.c:446:39
4448B	  %92:gpr32common = nsw ADDWri %91:gpr32common, 1, 0, debug-location !561; is.c:446:39
4464B	  STRWui %92:gpr32common, %stack.1.i, 0, debug-location !561 :: (store 4 into %ir.i); is.c:446:39
4480B	  B %bb.25, debug-location !562; is.c:446:5

4496B	bb.40.for.end125:
	; predecessors: %bb.25
	  successors: %bb.41(0x40000000), %bb.42(0x40000000); %bb.41(50.00%), %bb.42(50.00%)

4512B	  %48:gpr32common = LDRWui %stack.0.iteration.addr, 0, debug-location !565 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:549:9
4528B	  dead $wzr = SUBSWri %48:gpr32common, 10, 0, implicit-def $nzcv, debug-location !568; is.c:549:9
4544B	  Bcc 1, %bb.42, implicit killed $nzcv, debug-location !568; is.c:549:9
4560B	  B %bb.41, debug-location !568; is.c:549:9

4576B	bb.41.if.then127:
	; predecessors: %bb.40
	  successors: %bb.42(0x80000000); %bb.42(100.00%)

4592B	  %50:gpr64 = LDRXui %stack.3.key_buff_ptr, 0, debug-location !569 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:550:31
4608B	  %51:gpr64common = ADRP target-flags(aarch64-page) @key_buff_ptr_global, debug-location !570; is.c:550:29
4624B	  STRXui %50:gpr64, %51:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @key_buff_ptr_global, debug-location !570 :: (store 8 into @key_buff_ptr_global); is.c:550:29

4640B	bb.42.if.end128:
	; predecessors: %bb.40, %bb.41

4656B	  RET_ReallyLR debug-location !572; is.c:551:1

# End machine code for function rank.

Before post-MI-sched:
# Machine code for function rank: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-68]
  fi#1: size=4, align=4, at location [SP-72]
  fi#2: size=4, align=4, at location [SP-76]
  fi#3: size=8, align=8, at location [SP-88]
  fi#4: size=8, align=8, at location [SP-96]
  fi#5: size=4, align=4, at location [SP-100]
  fi#6: size=4, align=4, at location [SP-104]
  fi#7: size=4, align=4, at location [SP-108]
  fi#8: size=4, align=4, at location [SP-112]
  fi#9: size=8, align=8, at location [SP-8]
  fi#10: size=8, align=8, at location [SP-16]
  fi#11: size=8, align=8, at location [SP-24]
  fi#12: size=8, align=8, at location [SP-32]
  fi#13: size=8, align=8, at location [SP-40]
  fi#14: size=8, align=8, at location [SP-48]
  fi#15: size=8, align=8, at location [SP-56]
  fi#16: size=8, align=8, at location [SP-64]
Function Live Ins: $w0

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $w0, $x23, $x24, $x21, $x22, $x19, $x20, $lr
  $sp = frame-setup SUBXri $sp, 112, 0
  frame-setup STPXi killed $x24, killed $x23, $sp, 6 :: (store 8 into %stack.16), (store 8 into %stack.15)
  frame-setup STPXi killed $x22, killed $x21, $sp, 8 :: (store 8 into %stack.14), (store 8 into %stack.13)
  frame-setup STPXi killed $x20, killed $x19, $sp, 10 :: (store 8 into %stack.12), (store 8 into %stack.11)
  frame-setup STPXi killed $fp, killed $lr, $sp, 12 :: (store 8 into %stack.10), (store 8 into %stack.9)
  $fp = frame-setup ADDXri $sp, 96, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  frame-setup CFI_INSTRUCTION offset $w19, -24
  frame-setup CFI_INSTRUCTION offset $w20, -32
  frame-setup CFI_INSTRUCTION offset $w21, -40
  frame-setup CFI_INSTRUCTION offset $w22, -48
  frame-setup CFI_INSTRUCTION offset $w23, -56
  frame-setup CFI_INSTRUCTION offset $w24, -64
  renamable $w0 = KILL $w0, implicit-def $x0
  STPWi $wzr, renamable $w0, $sp, 10 :: (store 4 into %ir.iteration.addr), (store 4 into %ir.i)
  $w10 = MOVZWi 11, 0
  $x8 = ADRP target-flags(aarch64-page) @key_array, debug-location !355; is.c:384:5
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @key_array, 0, debug-location !355; is.c:384:5
  renamable $x11 = SBFMXri renamable $x0, 0, 31, debug-location !353; is.c:384:28
  $w12 = MOVZWi 32, 16
  $x9 = ADRP target-flags(aarch64-page) @test_index_array
  renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @test_index_array, 0
  STRWui killed renamable $w10, $sp, 3, debug-location !350 :: (store 4 into %ir.shift); is.c:380:9
  renamable $x10 = ADDXrx renamable $x8, renamable $w0, 50, debug-location !355; is.c:384:5
  $w12 = SUBWrs killed renamable $w12, renamable $w0, 0, implicit killed $x0, debug-location !358; is.c:385:53
  STRWui renamable $w11, renamable $x10, 0, implicit killed $x11, debug-location !356 :: (store 4 into %ir.arrayidx); is.c:384:26
  STRWui killed renamable $w12, killed renamable $x10, 10, debug-location !362 :: (store 4 into %ir.arrayidx2); is.c:385:43
  $x20 = ADRP target-flags(aarch64-page) @partial_verify_vals
  renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @partial_verify_vals, 0

bb.1.for.cond:
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $x8, $x9, $x20
  renamable $w10 = LDRWui $sp, 10, debug-location !366 :: (dereferenceable load 4 from %ir.i); is.c:389:17
  dead $wzr = SUBSWri killed renamable $w10, 4, 0, implicit-def $nzcv, debug-location !369; is.c:389:5
  Bcc 12, %bb.3, implicit $nzcv, debug-location !369; is.c:389:5

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $x8, $x9, $x20
  renamable $x10 = LDRSWui $sp, 10, debug-location !370 :: (dereferenceable load 4 from %ir.i); is.c:390:61
  renamable $x11 = UBFMXri renamable $x10, 62, 61, debug-location !371; is.c:390:44
  renamable $x12 = LDRSWroX renamable $x9, renamable $x11, 0, 0, debug-location !371 :: (load 4 from %ir.arrayidx4); is.c:390:44
  renamable $w12 = LDRWroX renamable $x8, killed renamable $x12, 0, 1, debug-location !372 :: (load 4 from %ir.arrayidx6); is.c:390:34
  renamable $w10 = nsw ADDWri renamable $w10, 1, 0, implicit killed $x10, debug-location !376; is.c:389:39
  STRWroX killed renamable $w12, renamable $x20, killed renamable $x11, 0, 0, debug-location !375 :: (store 4 into %ir.arrayidx8); is.c:390:32
  STRWui killed renamable $w10, $sp, 10, debug-location !376 :: (store 4 into %ir.i); is.c:389:39
  B %bb.1

bb.3.for.end:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $x8, $x20
  STRWui $wzr, $sp, 10, debug-location !380 :: (store 4 into %ir.i); is.c:395:12
  $x9 = ADRP target-flags(aarch64-page) @bucket_size
  renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @bucket_size, 0

bb.4.for.cond9:
; predecessors: %bb.3, %bb.5
  successors: %bb.5(0x7c000000), %bb.6(0x04000000); %bb.5(96.88%), %bb.6(3.12%)
  liveins: $x8, $x9, $x20
  renamable $w10 = LDRWui $sp, 10, debug-location !383 :: (dereferenceable load 4 from %ir.i); is.c:395:17
  dead $wzr = SUBSWri killed renamable $w10, 1023, 0, implicit-def $nzcv, debug-location !386; is.c:395:5
  Bcc 12, %bb.6, implicit $nzcv, debug-location !386; is.c:395:5

bb.5.for.body11:
; predecessors: %bb.4
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $x8, $x9, $x20
  renamable $x10 = LDRSWui $sp, 10, debug-location !387 :: (dereferenceable load 4 from %ir.i); is.c:396:21
  STRWroX $wzr, renamable $x9, renamable $x10, 0, 1, debug-location !389 :: (store 4 into %ir.arrayidx13); is.c:396:24
  renamable $w10 = nsw ADDWri renamable $w10, 1, 0, implicit killed $x10, debug-location !390; is.c:395:35
  STRWui killed renamable $w10, $sp, 10, debug-location !390 :: (store 4 into %ir.i); is.c:395:35
  B %bb.4

bb.6.for.end16:
; predecessors: %bb.4
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $x8, $x9, $x20
  STRWui $wzr, $sp, 10, debug-location !394 :: (store 4 into %ir.i); is.c:399:12
  $w10 = MOVNWi 65024, 16

bb.7.for.cond17:
; predecessors: %bb.6, %bb.8
  successors: %bb.8(0x7c000000), %bb.9(0x04000000); %bb.8(96.88%), %bb.9(3.12%)
  liveins: $w10, $x8, $x9, $x20
  renamable $w11 = LDRWui $sp, 10, debug-location !397 :: (dereferenceable load 4 from %ir.i); is.c:399:17
  $wzr = SUBSWrs killed renamable $w11, renamable $w10, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !400; is.c:399:5
  Bcc 12, %bb.9, implicit $nzcv, debug-location !400; is.c:399:5

bb.8.for.body19:
; predecessors: %bb.7
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $w10, $x8, $x9, $x20
  renamable $x11 = LDRSWui $sp, 10, debug-location !401 :: (dereferenceable load 4 from %ir.i); is.c:400:31
  renamable $w12 = LDRWui $sp, 3, implicit-def $x12, debug-location !403 :: (dereferenceable load 4 from %ir.shift); is.c:400:37
  renamable $w13 = LDRWroX renamable $x8, renamable $x11, 0, 1, debug-location !402 :: (load 4 from %ir.arrayidx21); is.c:400:21
  renamable $w12 = ASRVWr killed renamable $w13, renamable $w12, implicit killed $x12, implicit-def $x12, debug-location !404; is.c:400:34
  renamable $x12 = SBFMXri killed renamable $x12, 62, 31, debug-location !405; is.c:400:9
  renamable $w13 = LDRWroX renamable $x9, renamable $x12, 0, 0, debug-location !406 :: (load 4 from %ir.arrayidx23); is.c:400:43
  renamable $w11 = nsw ADDWri renamable $w11, 1, 0, implicit killed $x11, debug-location !407; is.c:399:32
  renamable $w13 = nsw ADDWri killed renamable $w13, 1, 0, debug-location !406; is.c:400:43
  STRWroX killed renamable $w13, renamable $x9, killed renamable $x12, 0, 0, debug-location !406 :: (store 4 into %ir.arrayidx23); is.c:400:43
  STRWui killed renamable $w11, $sp, 10, debug-location !407 :: (store 4 into %ir.i); is.c:399:32
  B %bb.7

bb.9.for.end27:
; predecessors: %bb.7
  successors: %bb.10(0x80000000); %bb.10(100.00%)
  liveins: $x8, $x9, $x20
  renamable $x10 = ADRP target-flags(aarch64-page) @bucket_ptrs, debug-location !411; is.c:403:20
  $w11 = MOVZWi 1, 0
  STRWui $wzr, killed renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @bucket_ptrs, debug-location !411 :: (store 4 into `i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @bucket_ptrs, i64 0, i64 0)`, align 16); is.c:403:20
  STRWui killed renamable $w11, $sp, 10, debug-location !412 :: (store 4 into %ir.i); is.c:404:12
  $x10 = ADRP target-flags(aarch64-page) @bucket_ptrs
  renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @bucket_ptrs, 0

bb.10.for.cond28:
; predecessors: %bb.9, %bb.11
  successors: %bb.11(0x7c000000), %bb.12(0x04000000); %bb.11(96.88%), %bb.12(3.12%)
  liveins: $x8, $x9, $x10, $x20
  renamable $w11 = LDRWui $sp, 10, debug-location !415 :: (dereferenceable load 4 from %ir.i); is.c:404:17
  dead $wzr = SUBSWri killed renamable $w11, 1023, 0, implicit-def $nzcv, debug-location !418; is.c:404:5
  Bcc 12, %bb.12, implicit $nzcv, debug-location !418; is.c:404:5

bb.11.for.body30:
; predecessors: %bb.10
  successors: %bb.10(0x80000000); %bb.10(100.00%)
  liveins: $x8, $x9, $x10, $x20
  renamable $x11 = LDRSWui $sp, 10, debug-location !419 :: (dereferenceable load 4 from %ir.i); is.c:405:38
  renamable $x12 = UBFMXri renamable $x11, 62, 61, debug-location !420; is.c:405:40
  renamable $x13 = SUBXri renamable $x12, 4, 0, debug-location !421; is.c:405:26
  renamable $w14 = LDRWroX renamable $x10, renamable $x13, 0, 0, debug-location !421 :: (load 4 from %ir.arrayidx33); is.c:405:26
  renamable $w13 = LDRWroX renamable $x9, killed renamable $x13, 0, 0, debug-location !424 :: (load 4 from %ir.arrayidx36); is.c:405:47
  renamable $w11 = nsw ADDWri renamable $w11, 1, 0, implicit killed $x11, debug-location !429; is.c:404:35
  $w13 = ADDWrs killed renamable $w14, killed renamable $w13, 0, debug-location !425; is.c:405:45
  STRWroX killed renamable $w13, renamable $x10, killed renamable $x12, 0, 0, debug-location !428 :: (store 4 into %ir.arrayidx39); is.c:405:24
  STRWui killed renamable $w11, $sp, 10, debug-location !429 :: (store 4 into %ir.i); is.c:404:35
  B %bb.10

bb.12.for.end42:
; predecessors: %bb.10
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $x8, $x10, $x20
  STRWui $wzr, $sp, 10, debug-location !433 :: (store 4 into %ir.i); is.c:408:12
  $w11 = MOVNWi 65024, 16
  $x9 = ADRP target-flags(aarch64-page) @key_buff2
  renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @key_buff2, 0

bb.13.for.cond43:
; predecessors: %bb.12, %bb.14
  successors: %bb.14(0x7c000000), %bb.15(0x04000000); %bb.14(96.88%), %bb.15(3.12%)
  liveins: $w11, $x8, $x9, $x10, $x20
  renamable $w12 = LDRWui $sp, 10, debug-location !436 :: (dereferenceable load 4 from %ir.i); is.c:408:17
  $wzr = SUBSWrs killed renamable $w12, renamable $w11, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !439; is.c:408:5
  Bcc 12, %bb.15, implicit $nzcv, debug-location !439; is.c:408:5

bb.14.for.body45:
; predecessors: %bb.13
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $w11, $x8, $x9, $x10, $x20
  renamable $x12 = LDRSWui $sp, 10, debug-location !440 :: (dereferenceable load 4 from %ir.i); is.c:409:25
  renamable $w13 = LDRWui $sp, 3, implicit-def $x13, debug-location !446 :: (dereferenceable load 4 from %ir.shift); is.c:410:38
  renamable $w14 = LDRWroX renamable $x8, renamable $x12, 0, 1, debug-location !442 :: (load 4 from %ir.arrayidx47); is.c:409:15
  renamable $w13 = ASRVWr renamable $w14, renamable $w13, implicit killed $x13, implicit-def $x13, debug-location !447; is.c:410:35
  renamable $x13 = SBFMXri killed renamable $x13, 62, 31, debug-location !448; is.c:410:19
  renamable $x15 = LDRSWroX renamable $x10, renamable $x13, 0, 0, debug-location !449 :: (load 4 from %ir.arrayidx50); is.c:410:44
  renamable $w12 = nsw ADDWri renamable $w12, 1, 0, implicit killed $x12, debug-location !452; is.c:408:32
  STRWui renamable $w14, $sp, 2, debug-location !443 :: (store 4 into %ir.key); is.c:409:13
  renamable $w16 = nsw ADDWri renamable $w15, 1, 0, debug-location !449; is.c:410:44
  STRWroX killed renamable $w14, renamable $x9, killed renamable $x15, 0, 1, debug-location !451 :: (store 4 into %ir.arrayidx53); is.c:410:48
  STRWroX killed renamable $w16, renamable $x10, killed renamable $x13, 0, 0, debug-location !449 :: (store 4 into %ir.arrayidx50); is.c:410:44
  STRWui killed renamable $w12, $sp, 10, debug-location !452 :: (store 4 into %ir.i); is.c:408:32
  B %bb.13

bb.15.for.end56:
; predecessors: %bb.13
  successors: %bb.16(0x80000000); %bb.16(100.00%)
  liveins: $x9, $x20
  STRXui killed renamable $x9, $sp, 2, debug-location !456 :: (store 8 into %ir.key_buff_ptr2); is.c:413:19
  STRWui $wzr, $sp, 10, debug-location !457 :: (store 4 into %ir.i); is.c:422:12
  $x8 = ADRP target-flags(aarch64-page) @key_buff1
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @key_buff1, 0

bb.16.for.cond57:
; predecessors: %bb.15, %bb.17
  successors: %bb.17(0x7c000000), %bb.18(0x04000000); %bb.17(96.88%), %bb.18(3.12%)
  liveins: $x8, $x20
  renamable $w9 = LDRWui $sp, 10, debug-location !460 :: (dereferenceable load 4 from %ir.i); is.c:422:17
  dead $wzr = SUBSWri killed renamable $w9, 512, 12, implicit-def $nzcv, debug-location !463; is.c:422:5
  Bcc 10, %bb.18, implicit $nzcv, debug-location !463; is.c:422:5

bb.17.for.body59:
; predecessors: %bb.16
  successors: %bb.16(0x80000000); %bb.16(100.00%)
  liveins: $x8, $x20
  renamable $x9 = LDRSWui $sp, 10, debug-location !464 :: (dereferenceable load 4 from %ir.i); is.c:423:19
  STRWroX $wzr, renamable $x8, renamable $x9, 0, 1, debug-location !466 :: (store 4 into %ir.arrayidx61); is.c:423:22
  renamable $w9 = nsw ADDWri renamable $w9, 1, 0, implicit killed $x9, debug-location !467; is.c:422:31
  STRWui killed renamable $w9, $sp, 10, debug-location !467 :: (store 4 into %ir.i); is.c:422:31
  B %bb.16

bb.18.for.end64:
; predecessors: %bb.16
  successors: %bb.19(0x80000000); %bb.19(100.00%)
  liveins: $x8, $x20
  STRXui killed renamable $x8, $sp, 3, debug-location !471 :: (store 8 into %ir.key_buff_ptr); is.c:427:18
  STRWui $wzr, $sp, 10, debug-location !472 :: (store 4 into %ir.i); is.c:433:12
  $w8 = MOVNWi 65024, 16

bb.19.for.cond65:
; predecessors: %bb.18, %bb.20
  successors: %bb.20(0x7c000000), %bb.21(0x04000000); %bb.20(96.88%), %bb.21(3.12%)
  liveins: $w8, $x20
  renamable $w9 = LDRWui $sp, 10, debug-location !475 :: (dereferenceable load 4 from %ir.i); is.c:433:17
  $wzr = SUBSWrs killed renamable $w9, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !478; is.c:433:5
  Bcc 12, %bb.21, implicit $nzcv, debug-location !478; is.c:433:5

bb.20.for.body67:
; predecessors: %bb.19
  successors: %bb.19(0x80000000); %bb.19(100.00%)
  liveins: $w8, $x20
  renamable $x9 = LDRXui $sp, 2, debug-location !480 :: (dereferenceable load 8 from %ir.key_buff_ptr2); is.c:434:22
  renamable $x10 = LDRSWui $sp, 10, debug-location !481 :: (dereferenceable load 4 from %ir.i); is.c:434:36
  renamable $x9 = LDRSWroX killed renamable $x9, killed renamable $x10, 0, 1, debug-location !480 :: (load 4 from %ir.arrayidx69); is.c:434:22
  renamable $x10 = LDRXui $sp, 3, debug-location !479 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:434:9
  renamable $x9 = UBFMXri killed renamable $x9, 62, 61, debug-location !479; is.c:434:9
  renamable $w11 = LDRWroX renamable $x10, renamable $x9, 0, 0, debug-location !482 :: (load 4 from %ir.arrayidx71); is.c:434:39
  renamable $w11 = nsw ADDWri killed renamable $w11, 1, 0, debug-location !482; is.c:434:39
  STRWroX killed renamable $w11, killed renamable $x10, killed renamable $x9, 0, 0, debug-location !482 :: (store 4 into %ir.arrayidx71); is.c:434:39
  renamable $w9 = LDRWui $sp, 10, debug-location !483 :: (dereferenceable load 4 from %ir.i); is.c:433:32
  renamable $w9 = nsw ADDWri killed renamable $w9, 1, 0, debug-location !483; is.c:433:32
  STRWui killed renamable $w9, $sp, 10, debug-location !483 :: (store 4 into %ir.i); is.c:433:32
  B %bb.19

bb.21.for.end75:
; predecessors: %bb.19
  successors: %bb.22(0x80000000); %bb.22(100.00%)
  liveins: $x20
  STRWui $wzr, $sp, 10, debug-location !487 :: (store 4 into %ir.i); is.c:440:12
  renamable $w8 = ORRWri $wzr, 2003

bb.22.for.cond76:
; predecessors: %bb.21, %bb.23
  successors: %bb.23(0x7c000000), %bb.24(0x04000000); %bb.23(96.88%), %bb.24(3.12%)
  liveins: $w8, $x20
  renamable $w9 = LDRWui $sp, 10, debug-location !490 :: (dereferenceable load 4 from %ir.i); is.c:440:17
  $wzr = SUBSWrs killed renamable $w9, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !493; is.c:440:5
  Bcc 12, %bb.24, implicit $nzcv, debug-location !493; is.c:440:5

bb.23.for.body78:
; predecessors: %bb.22
  successors: %bb.22(0x80000000); %bb.22(100.00%)
  liveins: $w8, $x20
  renamable $x9 = LDRXui $sp, 3, debug-location !494 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:441:32
  renamable $x10 = LDRSWui $sp, 10, debug-location !495 :: (dereferenceable load 4 from %ir.i); is.c:441:45
  renamable $x9 = ADDXrs killed renamable $x9, killed renamable $x10, 2, debug-location !494; is.c:441:32
  renamable $w10, renamable $w11 = LDPWi renamable $x9, 0, debug-location !494 :: (load 4 from %ir.arrayidx80), (load 4 from %ir.arrayidx83); is.c:441:32
  $w10 = ADDWrs killed renamable $w11, killed renamable $w10, 0, debug-location !499; is.c:441:29
  STRWui killed renamable $w10, killed renamable $x9, 1, debug-location !499 :: (store 4 into %ir.arrayidx83); is.c:441:29
  renamable $w9 = LDRWui $sp, 10, debug-location !500 :: (dereferenceable load 4 from %ir.i); is.c:440:35
  renamable $w9 = nsw ADDWri killed renamable $w9, 1, 0, debug-location !500; is.c:440:35
  STRWui killed renamable $w9, $sp, 10, debug-location !500 :: (store 4 into %ir.i); is.c:440:35
  B %bb.22

bb.24.for.end87:
; predecessors: %bb.22
  successors: %bb.25(0x80000000); %bb.25(100.00%)
  liveins: $x20
  STRWui $wzr, $sp, 10, debug-location !504 :: (store 4 into %ir.i); is.c:446:12
  $w21 = MOVNWi 65024, 16
  $x22 = ADRP target-flags(aarch64-page) @test_rank_array
  renamable $x22 = ADDXri $x22, target-flags(aarch64-pageoff, aarch64-nc) @test_rank_array, 0
  $w23 = MOVZWi 1, 0
  renamable $x24 = ADRP target-flags(aarch64-page) @passed_verification
  $x19 = ADRP target-flags(aarch64-page) @.str.1
  renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str.1, 0

bb.25.for.cond88:
; predecessors: %bb.24, %bb.38
  successors: %bb.26(0x7c000000), %bb.39(0x04000000); %bb.26(96.88%), %bb.39(3.12%)
  liveins: $w21, $w23, $x19, $x20, $x22, $x24
  renamable $w8 = LDRWui $sp, 10, debug-location !507 :: (dereferenceable load 4 from %ir.i); is.c:446:17
  dead $wzr = SUBSWri killed renamable $w8, 4, 0, implicit-def $nzcv, debug-location !510; is.c:446:5
  Bcc 12, %bb.39, implicit $nzcv, debug-location !510; is.c:446:5

bb.26.for.body90:
; predecessors: %bb.25
  successors: %bb.27(0x60000000), %bb.38(0x20000000); %bb.27(75.00%), %bb.38(25.00%)
  liveins: $w21, $w23, $x19, $x20, $x22, $x24
  renamable $x8 = LDRSWui $sp, 10, debug-location !511 :: (dereferenceable load 4 from %ir.i); is.c:447:33
  renamable $w8 = LDRWroX renamable $x20, killed renamable $x8, 0, 1, debug-location !513 :: (load 4 from %ir.arrayidx92); is.c:447:13
  dead $wzr = SUBSWri renamable $w8, 1, 0, implicit-def $nzcv, debug-location !520; is.c:448:19
  STRWui renamable $w8, $sp, 9, debug-location !514 :: (store 4 into %ir.k); is.c:447:11
  Bcc 11, %bb.38, implicit $nzcv, debug-location !520; is.c:448:19

bb.27.for.body90:
; predecessors: %bb.26
  successors: %bb.28(0x55555555), %bb.38(0x2aaaaaab); %bb.28(66.67%), %bb.38(33.33%)
  liveins: $w8, $w21, $w23, $x19, $x20, $x22, $x24
  $wzr = SUBSWrs killed renamable $w8, renamable $w21, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !520; is.c:448:19
  Bcc 12, %bb.38, implicit $nzcv, debug-location !520; is.c:448:19

bb.28.if.then:
; predecessors: %bb.27
  successors: %bb.31(0x10000000), %bb.29(0x70000000); %bb.31(12.50%), %bb.29(87.50%)
  liveins: $w21, $w23, $x19, $x20, $x22, $x24
  renamable $x8 = LDRXui $sp, 3, debug-location !524 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:449:33
  renamable $x9, renamable $x11 = LDPSWi $sp, 9, debug-location !525 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.i); is.c:449:46
  renamable $x8 = ADDXrs killed renamable $x8, killed renamable $x9, 2, debug-location !524; is.c:449:33
  renamable $w8 = LDURWi killed renamable $x8, -4, debug-location !524 :: (load 4 from %ir.arrayidx97); is.c:449:33
  renamable $w9 = LDRWui $sp, 11, debug-location !537 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:0
  renamable $w10 = LDRWroX renamable $x22, renamable $x11, 0, 1, debug-location !537 :: (load 4 from %ir.arrayidx104); is.c:0
  dead $wzr = SUBSWri renamable $w11, 1, 0, implicit-def $nzcv, debug-location !534; is.c:496:28
  STPWi $wzr, renamable $w8, $sp, 0, debug-location !523 :: (store 4 into %ir.key_rank), (store 4 into %ir.failed); is.c:449:22
  Bcc 0, %bb.31, implicit $nzcv, debug-location !534; is.c:496:28

bb.29.if.then:
; predecessors: %bb.28
  successors: %bb.31(0x12492492), %bb.30(0x6db6db6e); %bb.31(14.29%), %bb.30(85.71%)
  liveins: $w8, $w9, $w10, $w21, $w23, $x11, $x19, $x20, $x22, $x24
  dead $wzr = SUBSWri renamable $w11, 2, 0, implicit-def $nzcv, debug-location !534; is.c:496:28
  Bcc 0, %bb.31, implicit $nzcv, debug-location !534; is.c:496:28

bb.30.if.then:
; predecessors: %bb.29
  successors: %bb.31(0x2aaaaaab), %bb.33(0x55555555); %bb.31(33.33%), %bb.33(66.67%)
  liveins: $w8, $w9, $w10, $w21, $w23, $x11, $x19, $x20, $x22, $x24
  dead $wzr = SUBSWri renamable $w11, 4, 0, implicit-def $nzcv, implicit killed $x11, debug-location !534; is.c:496:28
  Bcc 1, %bb.33, implicit $nzcv, debug-location !534; is.c:496:28

bb.31.if.then102:
; predecessors: %bb.28, %bb.29, %bb.30
  successors: %bb.32(0x40000000), %bb.35(0x40000000); %bb.32(50.00%), %bb.35(50.00%)
  liveins: $w8, $w9, $w10, $w21, $w23, $x19, $x20, $x22, $x24
  $w9 = ADDWrs killed renamable $w10, killed renamable $w9, 0, debug-location !538; is.c:497:56
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !542; is.c:497:25
  Bcc 0, %bb.35, implicit $nzcv, debug-location !542; is.c:497:25

bb.32.if.then107:
; predecessors: %bb.31
  successors: %bb.36(0x80000000); %bb.36(100.00%)
  liveins: $w21, $w23, $x19, $x20, $x22, $x24
  STRWui renamable $w23, $sp, 0, debug-location !543 :: (store 4 into %ir.failed); is.c:498:32
  B %bb.36

bb.33.if.else109:
; predecessors: %bb.30
  successors: %bb.34(0x40000000), %bb.35(0x40000000); %bb.34(50.00%), %bb.35(50.00%)
  liveins: $w8, $w9, $w10, $w21, $w23, $x19, $x20, $x22, $x24
  $w9 = SUBWrs killed renamable $w10, killed renamable $w9, 0, debug-location !546; is.c:503:56
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !550; is.c:503:25
  Bcc 0, %bb.35, implicit $nzcv, debug-location !550; is.c:503:25

bb.34.if.then114:
; predecessors: %bb.33
  successors: %bb.36(0x80000000); %bb.36(100.00%)
  liveins: $w21, $w23, $x19, $x20, $x22, $x24
  STRWui renamable $w23, $sp, 0, debug-location !551 :: (store 4 into %ir.failed); is.c:504:32
  B %bb.36

bb.35.if.else115:
; predecessors: %bb.33, %bb.31
  successors: %bb.36(0x80000000); %bb.36(100.00%)
  liveins: $w21, $w23, $x19, $x20, $x22, $x24
  renamable $w8 = LDRWui renamable $x24, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !537 :: (dereferenceable load 4 from @passed_verification); is.c:0
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !537; is.c:0
  STRWui killed renamable $w8, renamable $x24, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !537 :: (store 4 into @passed_verification); is.c:0

bb.36.if.end118:
; predecessors: %bb.35, %bb.34, %bb.32
  successors: %bb.37(0x40000000), %bb.38(0x40000000); %bb.37(50.00%), %bb.38(50.00%)
  liveins: $w21, $w23, $x19, $x20, $x22, $x24
  renamable $w8 = LDRWui $sp, 0, debug-location !554 :: (dereferenceable load 4 from %ir.failed); is.c:538:17
  dead $wzr = SUBSWri killed renamable $w8, 1, 0, implicit-def $nzcv, debug-location !557; is.c:538:17
  Bcc 1, %bb.38, implicit $nzcv, debug-location !557; is.c:538:17

bb.37.if.then120:
; predecessors: %bb.36
  successors: %bb.38(0x80000000); %bb.38(100.00%)
  liveins: $w21, $w23, $x19, $x20, $x22, $x24
  renamable $w2, renamable $w1 = LDPWi $sp, 10, debug-location !558 :: (dereferenceable load 4 from %ir.iteration.addr), (dereferenceable load 4 from %ir.i); is.c:541:24
  $x0 = ORRXrs $xzr, $x19, 0, debug-location !560; is.c:539:17
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit-def $sp, implicit-def dead $w0, debug-location !560; is.c:539:17

bb.38.for.inc123:
; predecessors: %bb.26, %bb.27, %bb.36, %bb.37
  successors: %bb.25(0x80000000); %bb.25(100.00%)
  liveins: $w21, $w23, $x19, $x20, $x22, $x24
  renamable $w8 = LDRWui $sp, 10, debug-location !561 :: (dereferenceable load 4 from %ir.i); is.c:446:39
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !561; is.c:446:39
  STRWui killed renamable $w8, $sp, 10, debug-location !561 :: (store 4 into %ir.i); is.c:446:39
  B %bb.25

bb.39.for.end125:
; predecessors: %bb.25
  successors: %bb.40(0x40000000), %bb.41(0x40000000); %bb.40(50.00%), %bb.41(50.00%)

  renamable $w8 = LDRWui $sp, 11, debug-location !565 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:549:9
  dead $wzr = SUBSWri killed renamable $w8, 10, 0, implicit-def $nzcv, debug-location !568; is.c:549:9
  Bcc 1, %bb.41, implicit $nzcv, debug-location !568; is.c:549:9

bb.40.if.then127:
; predecessors: %bb.39
  successors: %bb.41(0x80000000); %bb.41(100.00%)

  renamable $x8 = LDRXui $sp, 3, debug-location !569 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:550:31
  renamable $x9 = ADRP target-flags(aarch64-page) @key_buff_ptr_global, debug-location !570; is.c:550:29
  STRXui killed renamable $x8, killed renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @key_buff_ptr_global, debug-location !570 :: (store 8 into @key_buff_ptr_global); is.c:550:29

bb.41.if.end128:
; predecessors: %bb.39, %bb.40

  $fp, $lr = frame-destroy LDPXi $sp, 12, debug-location !572 :: (load 8 from %stack.10), (load 8 from %stack.9); is.c:551:1
  $x20, $x19 = frame-destroy LDPXi $sp, 10, debug-location !572 :: (load 8 from %stack.12), (load 8 from %stack.11); is.c:551:1
  $x22, $x21 = frame-destroy LDPXi $sp, 8, debug-location !572 :: (load 8 from %stack.14), (load 8 from %stack.13); is.c:551:1
  $x24, $x23 = frame-destroy LDPXi $sp, 6, debug-location !572 :: (load 8 from %stack.16), (load 8 from %stack.15); is.c:551:1
  $sp = frame-destroy ADDXri $sp, 112, 0, debug-location !572; is.c:551:1
  RET undef $lr, debug-location !572; is.c:551:1

# End machine code for function rank.

********** MI Scheduling **********
rank:%bb.0 entry
  From: renamable $w0 = KILL $w0, implicit-def $x0
    To: End RegionInstrs: 16
ScheduleDAGMI::schedule starting
SU(0):   renamable $w0 = KILL $w0, implicit-def $x0
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(11): Data Latency=0 Reg=$w0
    SU(10): Data Latency=0 Reg=$w0
    SU(1): Data Latency=0 Reg=$w0
    SU(11): Data Latency=0 Reg=$x0
    SU(5): Data Latency=0 Reg=$x0
SU(1):   STPWi $wzr, renamable $w0, $sp, 10 :: (store 4 into %ir.iteration.addr), (store 4 into %ir.i)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=$w0
SU(2):   $w10 = MOVZWi 11, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(10): Out  Latency=1
    SU(9): Data Latency=1 Reg=$w10
SU(3):   $x8 = ADRP target-flags(aarch64-page) @key_array, debug-location !355; is.c:384:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x8
SU(4):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @key_array, 0, debug-location !355; is.c:384:5
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(10): Data Latency=1 Reg=$x8
SU(5):   renamable $x11 = SBFMXri renamable $x0, 0, 31, debug-location !353; is.c:384:28
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Data Latency=0 Reg=$x0
  Successors:
    SU(12): Data Latency=1 Reg=$w11
    SU(12): Data Latency=0 Reg=$x11
SU(6):   $w12 = MOVZWi 32, 16
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$w12
SU(7):   $x9 = ADRP target-flags(aarch64-page) @test_index_array
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x9
SU(8):   renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @test_index_array, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x9
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(9):   STRWui renamable $w10, $sp, 3, debug-location !350 :: (store 4 into %ir.shift); is.c:380:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=$w10
  Successors:
    SU(10): Anti Latency=0
SU(10):   renamable $x10 = ADDXrx renamable $x8, renamable $w0, 50, debug-location !355; is.c:384:5
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(9): Anti Latency=0
    SU(4): Data Latency=1 Reg=$x8
    SU(2): Out  Latency=1
    SU(0): Data Latency=0 Reg=$w0
  Successors:
    SU(13): Data Latency=1 Reg=$x10
    SU(12): Data Latency=1 Reg=$x10
SU(11):   $w12 = SUBWrs renamable $w12, renamable $w0, 0, implicit $x0, debug-location !358; is.c:385:53
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$w12
    SU(0): Data Latency=0 Reg=$w0
    SU(0): Data Latency=0 Reg=$x0
  Successors:
    SU(13): Data Latency=1 Reg=$w12
SU(12):   STRWui renamable $w11, renamable $x10, 0, implicit $x11, debug-location !356 :: (store 4 into %ir.arrayidx); is.c:384:26
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=$x10
    SU(5): Data Latency=1 Reg=$w11
    SU(5): Data Latency=0 Reg=$x11
SU(13):   STRWui renamable $w12, renamable $x10, 10, debug-location !362 :: (store 4 into %ir.arrayidx2); is.c:385:43
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=$x10
    SU(11): Data Latency=1 Reg=$w12
SU(14):   $x20 = ADRP target-flags(aarch64-page) @partial_verify_vals
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(15): Out  Latency=1
    SU(15): Data Latency=1 Reg=$x20
SU(15):   renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @partial_verify_vals, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(14): Out  Latency=1
    SU(14): Data Latency=1 Reg=$x20
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Disabled scoreboard hazard recognizer
Critical Path: (PGS-RR) 3
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 6 7 14 
  TopQ.A RemainingLatency 0 + 0c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  2 cycles 
  Cand SU(3) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) $x8 = ADRP target-flags(aarch64-page) @key_array, debug-location !355; is.c:384:5
  Ready @0c
  TopQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 14 6 7 4 
  TopQ.A RemainingLatency 0 + 1c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $w10 = MOVZWi 11, 0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 4 14 6 7 9 
  TopQ.A RemainingLatency 0 + 2c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(4) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @key_array, 0, debug-location !355; is.c:384:5
  Ready @2c
  TopQ.A TopLatency SU(4) 1c
  TopQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 9 14 6 7 
  TopQ.A RemainingLatency 0 + 3c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(14) TOP-PATH                  2 cycles 
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) $w12 = MOVZWi 32, 16
  Ready @3c
  TopQ.A BotLatency SU(6) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 9 14 7 
  TopQ.A RemainingLatency 0 + 4c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(14) TOP-PATH                  2 cycles 
  Cand SU(7) ORDER                              
Pick Top ORDER     
Scheduling SU(7) $x9 = ADRP target-flags(aarch64-page) @test_index_array
  Ready @4c
  TopQ.A BotLatency SU(7) 2c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 9 14 8 
  TopQ.A RemainingLatency 0 + 5c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(14) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(14) $x20 = ADRP target-flags(aarch64-page) @partial_verify_vals
  Ready @5c
  TopQ.A BotLatency SU(14) 2c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 9 8 15 
  TopQ.A RemainingLatency 0 + 6c > CritPath 3
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $w0 = KILL $w0, implicit-def $x0
  Ready @6c
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 9 8 1 11 5 
  TopQ.A RemainingLatency 0 + 6c > CritPath 3
  Cand SU(15) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $x11 = SBFMXri renamable $x0, 0, 31, debug-location !353; is.c:384:28
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 9 8 1 11 
  TopQ.A RemainingLatency 0 + 7c > CritPath 3
  Cand SU(15) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(8) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(8) renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @test_index_array, 0
  Ready @7c
  TopQ.A BotLatency SU(8) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 9 11 1 
  TopQ.A RemainingLatency 0 + 8c > CritPath 3
  Cand SU(15) ORDER                              
  Cand SU(9) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(9) STRWui renamable $w10, $sp, 3, debug-location !350 :: (store 4 into %ir.shift); is.c:380:9
  Ready @8c
  TopQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 1 11 10 
  TopQ.A RemainingLatency 0 + 9c > CritPath 3
  Cand SU(15) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(10) ORDER                              
Pick Top ORDER     
Scheduling SU(10) renamable $x10 = ADDXrx renamable $x8, renamable $w0, 50, debug-location !355; is.c:384:5
  Ready @9c
  TopQ.A TopLatency SU(10) 2c
  TopQ.A BotLatency SU(10) 1c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 1 11 12 
  TopQ.A RemainingLatency 0 + 10c > CritPath 3
  Cand SU(15) ORDER                              
  Cand SU(11) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(11) $w12 = SUBWrs renamable $w12, renamable $w0, 0, implicit $x0, debug-location !358; is.c:385:53
  Ready @10c
  TopQ.A BotLatency SU(11) 1c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 1 12 13 
  TopQ.A RemainingLatency 0 + 11c > CritPath 3
  Cand SU(15) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(15) renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @partial_verify_vals, 0
  Ready @11c
  TopQ.A BotLatency SU(15) 1c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 1 12 
  TopQ.A RemainingLatency 0 + 12c > CritPath 3
  Cand SU(13) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) STPWi $wzr, renamable $w0, $sp, 10 :: (store 4 into %ir.iteration.addr), (store 4 into %ir.i)
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 12 
  TopQ.A RemainingLatency 0 + 13c > CritPath 3
  Cand SU(13) ORDER                              
  Cand SU(12) ORDER                              
Pick Top ORDER     
Scheduling SU(12) STRWui renamable $w11, renamable $x10, 0, implicit $x11, debug-location !356 :: (store 4 into %ir.arrayidx); is.c:384:26
  Ready @13c
  TopQ.A TopLatency SU(12) 3c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 
Pick Top ONLY1     
Scheduling SU(13) STRWui renamable $w12, renamable $x10, 10, debug-location !362 :: (store 4 into %ir.arrayidx2); is.c:385:43
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(3):   $x8 = ADRP target-flags(aarch64-page) @key_array, debug-location !355; is.c:384:5
SU(2):   $w10 = MOVZWi 11, 0
SU(4):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @key_array, 0, debug-location !355; is.c:384:5
SU(6):   $w12 = MOVZWi 32, 16
SU(7):   $x9 = ADRP target-flags(aarch64-page) @test_index_array
SU(14):   $x20 = ADRP target-flags(aarch64-page) @partial_verify_vals
SU(0):   renamable $w0 = KILL $w0, implicit-def $x0
SU(5):   renamable $x11 = SBFMXri renamable $x0, 0, 31, debug-location !353; is.c:384:28
SU(8):   renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @test_index_array, 0
SU(9):   STRWui renamable $w10, $sp, 3, debug-location !350 :: (store 4 into %ir.shift); is.c:380:9
SU(10):   renamable $x10 = ADDXrx renamable $x8, renamable $w0, 50, debug-location !355; is.c:384:5
SU(11):   $w12 = SUBWrs renamable $w12, renamable $w0, 0, implicit $x0, debug-location !358; is.c:385:53
SU(15):   renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @partial_verify_vals, 0
SU(1):   STPWi $wzr, renamable $w0, $sp, 10 :: (store 4 into %ir.iteration.addr), (store 4 into %ir.i)
SU(12):   STRWui renamable $w11, renamable $x10, 0, implicit $x11, debug-location !356 :: (store 4 into %ir.arrayidx); is.c:384:26
SU(13):   STRWui renamable $w12, renamable $x10, 10, debug-location !362 :: (store 4 into %ir.arrayidx2); is.c:385:43

********** MI Scheduling **********
rank:%bb.0 entry
  From: frame-setup STPXi killed $x24, killed $x23, $sp, 6 :: (store 8 into %stack.16), (store 8 into %stack.15)
    To: frame-setup CFI_INSTRUCTION def_cfa $w29, 16
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   frame-setup STPXi $x24, $x23, $sp, 6 :: (store 8 into %stack.16), (store 8 into %stack.15)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   frame-setup STPXi $x22, $x21, $sp, 8 :: (store 8 into %stack.14), (store 8 into %stack.13)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   frame-setup STPXi $x20, $x19, $sp, 10 :: (store 8 into %stack.12), (store 8 into %stack.11)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(3):   frame-setup STPXi $fp, $lr, $sp, 12 :: (store 8 into %stack.10), (store 8 into %stack.9)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Successors:
    SU(4): Anti Latency=0
SU(4):   $fp = frame-setup ADDXri $sp, 96, 0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Anti Latency=0
ExitSU:   frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 0
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) frame-setup STPXi $x24, $x23, $sp, 6 :: (store 8 into %stack.16), (store 8 into %stack.15)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 0
  Cand SU(3) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) frame-setup STPXi $x22, $x21, $sp, 8 :: (store 8 into %stack.14), (store 8 into %stack.13)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 0
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) frame-setup STPXi $x20, $x19, $sp, 10 :: (store 8 into %stack.12), (store 8 into %stack.11)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) frame-setup STPXi $fp, $lr, $sp, 12 :: (store 8 into %stack.10), (store 8 into %stack.9)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $fp = frame-setup ADDXri $sp, 96, 0
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   frame-setup STPXi $x24, $x23, $sp, 6 :: (store 8 into %stack.16), (store 8 into %stack.15)
SU(1):   frame-setup STPXi $x22, $x21, $sp, 8 :: (store 8 into %stack.14), (store 8 into %stack.13)
SU(2):   frame-setup STPXi $x20, $x19, $sp, 10 :: (store 8 into %stack.12), (store 8 into %stack.11)
SU(3):   frame-setup STPXi $fp, $lr, $sp, 12 :: (store 8 into %stack.10), (store 8 into %stack.9)
SU(4):   $fp = frame-setup ADDXri $sp, 96, 0

Fixup kills for %bb.0
********** MI Scheduling **********
rank:%bb.1 for.cond
  From: renamable $w10 = LDRWui $sp, 10, debug-location !366 :: (dereferenceable load 4 from %ir.i); is.c:389:17
    To: Bcc 12, %bb.3, implicit $nzcv, debug-location !369; is.c:389:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w10 = LDRWui $sp, 10, debug-location !366 :: (dereferenceable load 4 from %ir.i); is.c:389:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w10
SU(1):   dead $wzr = SUBSWri renamable $w10, 4, 0, implicit-def $nzcv, debug-location !369; is.c:389:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w10
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.3, implicit $nzcv, debug-location !369; is.c:389:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w10 = LDRWui $sp, 10, debug-location !366 :: (dereferenceable load 4 from %ir.i); is.c:389:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w10, 4, 0, implicit-def $nzcv, debug-location !369; is.c:389:5
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   renamable $w10 = LDRWui $sp, 10, debug-location !366 :: (dereferenceable load 4 from %ir.i); is.c:389:17
SU(1):   dead $wzr = SUBSWri renamable $w10, 4, 0, implicit-def $nzcv, debug-location !369; is.c:389:5

Fixup kills for %bb.1
********** MI Scheduling **********
rank:%bb.2 for.body
  From: renamable $x10 = LDRSWui $sp, 10, debug-location !370 :: (dereferenceable load 4 from %ir.i); is.c:390:61
    To: B %bb.1
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   renamable $x10 = LDRSWui $sp, 10, debug-location !370 :: (dereferenceable load 4 from %ir.i); is.c:390:61
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$w10
    SU(4): Data Latency=0 Reg=$x10
    SU(1): Data Latency=4 Reg=$x10
    SU(6): Ord  Latency=0 Memory
SU(1):   renamable $x11 = UBFMXri renamable $x10, 62, 61, debug-location !371; is.c:390:44
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=$x10
  Successors:
    SU(5): Data Latency=1 Reg=$x11
    SU(2): Data Latency=1 Reg=$x11
    SU(4): Anti Latency=0
SU(2):   renamable $x12 = LDRSWroX renamable $x9, renamable $x11, 0, 0, debug-location !371 :: (load 4 from %ir.arrayidx4); is.c:390:44
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(1): Data Latency=1 Reg=$x11
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x12
SU(3):   renamable $w12 = LDRWroX renamable $x8, renamable $x12, 0, 1, debug-location !372 :: (load 4 from %ir.arrayidx6); is.c:390:34
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x12
  Successors:
    SU(5): Data Latency=4 Reg=$w12
SU(4):   renamable $w10 = nsw ADDWri renamable $w10, 1, 0, implicit $x10, debug-location !376; is.c:389:39
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w10
    SU(0): Data Latency=0 Reg=$x10
  Successors:
    SU(6): Data Latency=1 Reg=$w10
SU(5):   STRWroX renamable $w12, renamable $x20, renamable $x11, 0, 0, debug-location !375 :: (store 4 into %ir.arrayidx8); is.c:390:32
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(3): Data Latency=4 Reg=$w12
    SU(1): Data Latency=1 Reg=$x11
SU(6):   STRWui renamable $w10, $sp, 10, debug-location !376 :: (store 4 into %ir.i); is.c:389:39
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=$w10
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 13
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x10 = LDRSWui $sp, 10, debug-location !370 :: (dereferenceable load 4 from %ir.i); is.c:390:61
  Ready @0c
  TopQ.A BotLatency SU(0) 13c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x11 = UBFMXri renamable $x10, 62, 61, debug-location !371; is.c:390:44
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 4 
  TopQ.A RemainingLatency 0 + 5c > CritPath 13
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x12 = LDRSWroX renamable $x9, renamable $x11, 0, 0, debug-location !371 :: (load 4 from %ir.arrayidx4); is.c:390:44
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w10 = nsw ADDWri renamable $w10, 1, 0, implicit $x10, debug-location !376; is.c:389:39
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) STRWui renamable $w10, $sp, 10, debug-location !376 :: (store 4 into %ir.i); is.c:389:39
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 9 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w12 = LDRWroX renamable $x8, renamable $x12, 0, 1, debug-location !372 :: (load 4 from %ir.arrayidx6); is.c:390:34
  Ready @9c
  TopQ.A TopLatency SU(3) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 6
  Executed: 10c
  Critical: 6c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 13 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) STRWroX renamable $w12, renamable $x20, renamable $x11, 0, 0, debug-location !375 :: (store 4 into %ir.arrayidx8); is.c:390:32
  Ready @13c
  TopQ.A TopLatency SU(5) 13c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 7
  Executed: 14c
  Critical: 7c, 7 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   renamable $x10 = LDRSWui $sp, 10, debug-location !370 :: (dereferenceable load 4 from %ir.i); is.c:390:61
SU(1):   renamable $x11 = UBFMXri renamable $x10, 62, 61, debug-location !371; is.c:390:44
SU(2):   renamable $x12 = LDRSWroX renamable $x9, renamable $x11, 0, 0, debug-location !371 :: (load 4 from %ir.arrayidx4); is.c:390:44
SU(4):   renamable $w10 = nsw ADDWri renamable $w10, 1, 0, implicit $x10, debug-location !376; is.c:389:39
SU(6):   STRWui renamable $w10, $sp, 10, debug-location !376 :: (store 4 into %ir.i); is.c:389:39
SU(3):   renamable $w12 = LDRWroX renamable $x8, renamable $x12, 0, 1, debug-location !372 :: (load 4 from %ir.arrayidx6); is.c:390:34
SU(5):   STRWroX renamable $w12, renamable $x20, renamable $x11, 0, 0, debug-location !375 :: (store 4 into %ir.arrayidx8); is.c:390:32

Fixup kills for %bb.2
********** MI Scheduling **********
rank:%bb.3 for.end
  From: STRWui $wzr, $sp, 10, debug-location !380 :: (store 4 into %ir.i); is.c:395:12
    To: End RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   STRWui $wzr, $sp, 10, debug-location !380 :: (store 4 into %ir.i); is.c:395:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $x9 = ADRP target-flags(aarch64-page) @bucket_size
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x9
SU(2):   renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @bucket_size, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x9
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $x9 = ADRP target-flags(aarch64-page) @bucket_size
  Ready @0c
  TopQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @bucket_size, 0
  Ready @1c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STRWui $wzr, $sp, 10, debug-location !380 :: (store 4 into %ir.i); is.c:395:12
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.3 ***
SU(1):   $x9 = ADRP target-flags(aarch64-page) @bucket_size
SU(2):   renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @bucket_size, 0
SU(0):   STRWui $wzr, $sp, 10, debug-location !380 :: (store 4 into %ir.i); is.c:395:12

Fixup kills for %bb.3
********** MI Scheduling **********
rank:%bb.4 for.cond9
  From: renamable $w10 = LDRWui $sp, 10, debug-location !383 :: (dereferenceable load 4 from %ir.i); is.c:395:17
    To: Bcc 12, %bb.6, implicit $nzcv, debug-location !386; is.c:395:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w10 = LDRWui $sp, 10, debug-location !383 :: (dereferenceable load 4 from %ir.i); is.c:395:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w10
SU(1):   dead $wzr = SUBSWri renamable $w10, 1023, 0, implicit-def $nzcv, debug-location !386; is.c:395:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w10
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.6, implicit $nzcv, debug-location !386; is.c:395:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w10 = LDRWui $sp, 10, debug-location !383 :: (dereferenceable load 4 from %ir.i); is.c:395:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w10, 1023, 0, implicit-def $nzcv, debug-location !386; is.c:395:5
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   renamable $w10 = LDRWui $sp, 10, debug-location !383 :: (dereferenceable load 4 from %ir.i); is.c:395:17
SU(1):   dead $wzr = SUBSWri renamable $w10, 1023, 0, implicit-def $nzcv, debug-location !386; is.c:395:5

Fixup kills for %bb.4
********** MI Scheduling **********
rank:%bb.5 for.body11
  From: renamable $x10 = LDRSWui $sp, 10, debug-location !387 :: (dereferenceable load 4 from %ir.i); is.c:396:21
    To: B %bb.4
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $x10 = LDRSWui $sp, 10, debug-location !387 :: (dereferenceable load 4 from %ir.i); is.c:396:21
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$w10
    SU(2): Data Latency=0 Reg=$x10
    SU(1): Data Latency=4 Reg=$x10
    SU(3): Ord  Latency=0 Memory
SU(1):   STRWroX $wzr, renamable $x9, renamable $x10, 0, 1, debug-location !389 :: (store 4 into %ir.arrayidx13); is.c:396:24
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$x10
  Successors:
    SU(2): Anti Latency=0
SU(2):   renamable $w10 = nsw ADDWri renamable $w10, 1, 0, implicit $x10, debug-location !390; is.c:395:35
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w10
    SU(0): Data Latency=0 Reg=$x10
  Successors:
    SU(3): Data Latency=1 Reg=$w10
SU(3):   STRWui renamable $w10, $sp, 10, debug-location !390 :: (store 4 into %ir.i); is.c:395:35
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=$w10
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.4
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x10 = LDRSWui $sp, 10, debug-location !387 :: (dereferenceable load 4 from %ir.i); is.c:396:21
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRWroX $wzr, renamable $x9, renamable $x10, 0, 1, debug-location !389 :: (store 4 into %ir.arrayidx13); is.c:396:24
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w10 = nsw ADDWri renamable $w10, 1, 0, implicit $x10, debug-location !390; is.c:395:35
  Ready @5c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STRWui renamable $w10, $sp, 10, debug-location !390 :: (store 4 into %ir.i); is.c:395:35
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   renamable $x10 = LDRSWui $sp, 10, debug-location !387 :: (dereferenceable load 4 from %ir.i); is.c:396:21
SU(1):   STRWroX $wzr, renamable $x9, renamable $x10, 0, 1, debug-location !389 :: (store 4 into %ir.arrayidx13); is.c:396:24
SU(2):   renamable $w10 = nsw ADDWri renamable $w10, 1, 0, implicit $x10, debug-location !390; is.c:395:35
SU(3):   STRWui renamable $w10, $sp, 10, debug-location !390 :: (store 4 into %ir.i); is.c:395:35

Fixup kills for %bb.5
********** MI Scheduling **********
rank:%bb.6 for.end16
  From: STRWui $wzr, $sp, 10, debug-location !394 :: (store 4 into %ir.i); is.c:399:12
    To: End RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   STRWui $wzr, $sp, 10, debug-location !394 :: (store 4 into %ir.i); is.c:399:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $w10 = MOVNWi 65024, 16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $w10 = MOVNWi 65024, 16
  Ready @0c
  TopQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STRWui $wzr, $sp, 10, debug-location !394 :: (store 4 into %ir.i); is.c:399:12
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.6 ***
SU(1):   $w10 = MOVNWi 65024, 16
SU(0):   STRWui $wzr, $sp, 10, debug-location !394 :: (store 4 into %ir.i); is.c:399:12

Fixup kills for %bb.6
********** MI Scheduling **********
rank:%bb.7 for.cond17
  From: renamable $w11 = LDRWui $sp, 10, debug-location !397 :: (dereferenceable load 4 from %ir.i); is.c:399:17
    To: Bcc 12, %bb.9, implicit $nzcv, debug-location !400; is.c:399:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w11 = LDRWui $sp, 10, debug-location !397 :: (dereferenceable load 4 from %ir.i); is.c:399:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w11
SU(1):   $wzr = SUBSWrs renamable $w11, renamable $w10, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !400; is.c:399:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w11
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.9, implicit $nzcv, debug-location !400; is.c:399:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w11 = LDRWui $sp, 10, debug-location !397 :: (dereferenceable load 4 from %ir.i); is.c:399:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $wzr = SUBSWrs renamable $w11, renamable $w10, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !400; is.c:399:5
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   renamable $w11 = LDRWui $sp, 10, debug-location !397 :: (dereferenceable load 4 from %ir.i); is.c:399:17
SU(1):   $wzr = SUBSWrs renamable $w11, renamable $w10, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !400; is.c:399:5

Fixup kills for %bb.7
********** MI Scheduling **********
rank:%bb.8 for.body19
  From: renamable $x11 = LDRSWui $sp, 10, debug-location !401 :: (dereferenceable load 4 from %ir.i); is.c:400:31
    To: B %bb.7
 RegionInstrs: 10
ScheduleDAGMI::schedule starting
SU(0):   renamable $x11 = LDRSWui $sp, 10, debug-location !401 :: (dereferenceable load 4 from %ir.i); is.c:400:31
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$w11
    SU(6): Data Latency=0 Reg=$x11
    SU(2): Data Latency=4 Reg=$x11
    SU(9): Ord  Latency=0 Memory
SU(1):   renamable $w12 = LDRWui $sp, 3, implicit-def $x12, debug-location !403 :: (dereferenceable load 4 from %ir.shift); is.c:400:37
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w12
    SU(3): Data Latency=0 Reg=$x12
SU(2):   renamable $w13 = LDRWroX renamable $x8, renamable $x11, 0, 1, debug-location !402 :: (load 4 from %ir.arrayidx21); is.c:400:21
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(0): Data Latency=4 Reg=$x11
  Successors:
    SU(5): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w13
    SU(6): Anti Latency=0
SU(3):   renamable $w12 = ASRVWr renamable $w13, renamable $w12, implicit $x12, implicit-def $x12, debug-location !404; is.c:400:34
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 7
  Predecessors:
    SU(2): Data Latency=4 Reg=$w13
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w12
    SU(1): Data Latency=0 Reg=$x12
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x12
    SU(5): Anti Latency=0
SU(4):   renamable $x12 = SBFMXri renamable $x12, 62, 31, debug-location !405; is.c:400:9
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 6
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x12
  Successors:
    SU(8): Data Latency=1 Reg=$x12
    SU(5): Data Latency=1 Reg=$x12
SU(5):   renamable $w13 = LDRWroX renamable $x9, renamable $x12, 0, 0, debug-location !406 :: (load 4 from %ir.arrayidx23); is.c:400:43
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 5
  Predecessors:
    SU(4): Data Latency=1 Reg=$x12
    SU(3): Anti Latency=0
    SU(2): Out  Latency=1
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$w13
    SU(8): Ord  Latency=0 Memory
SU(6):   renamable $w11 = nsw ADDWri renamable $w11, 1, 0, implicit $x11, debug-location !407; is.c:399:32
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w11
    SU(0): Data Latency=0 Reg=$x11
  Successors:
    SU(9): Data Latency=1 Reg=$w11
SU(7):   renamable $w13 = nsw ADDWri renamable $w13, 1, 0, debug-location !406; is.c:400:43
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 1
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$w13
  Successors:
    SU(8): Data Latency=1 Reg=$w13
SU(8):   STRWroX renamable $w13, renamable $x9, renamable $x12, 0, 0, debug-location !406 :: (store 4 into %ir.arrayidx23); is.c:400:43
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=$w13
    SU(5): Ord  Latency=0 Memory
    SU(4): Data Latency=1 Reg=$x12
SU(9):   STRWui renamable $w11, $sp, 10, debug-location !407 :: (store 4 into %ir.i); is.c:399:32
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=$w11
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.7
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 15
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 15
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x11 = LDRSWui $sp, 10, debug-location !401 :: (dereferenceable load 4 from %ir.i); is.c:400:31
  Ready @0c
  TopQ.A BotLatency SU(0) 15c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w12 = LDRWui $sp, 3, implicit-def $x12, debug-location !403 :: (dereferenceable load 4 from %ir.shift); is.c:400:37
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w13 = LDRWroX renamable $x8, renamable $x11, 0, 1, debug-location !402 :: (load 4 from %ir.arrayidx21); is.c:400:21
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $w11 = nsw ADDWri renamable $w11, 1, 0, implicit $x11, debug-location !407; is.c:399:32
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) STRWui renamable $w11, $sp, 10, debug-location !407 :: (store 4 into %ir.i); is.c:399:32
  Ready @6c
  TopQ.A TopLatency SU(9) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 8 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w12 = ASRVWr renamable $w13, renamable $w12, implicit $x12, implicit-def $x12, debug-location !404; is.c:400:34
  Ready @8c
  TopQ.A TopLatency SU(3) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $x12 = SBFMXri renamable $x12, 62, 31, debug-location !405; is.c:400:9
  Ready @9c
  TopQ.A TopLatency SU(4) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 7
  Executed: 10c
  Critical: 7c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $w13 = LDRWroX renamable $x9, renamable $x12, 0, 0, debug-location !406 :: (load 4 from %ir.arrayidx23); is.c:400:43
  Ready @10c
  TopQ.A TopLatency SU(5) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 8
  Executed: 11c
  Critical: 8c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 14 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $w13 = nsw ADDWri renamable $w13, 1, 0, debug-location !406; is.c:400:43
  Ready @14c
  TopQ.A TopLatency SU(7) 14c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 9
  Executed: 15c
  Critical: 9c, 9 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) STRWroX renamable $w13, renamable $x9, renamable $x12, 0, 0, debug-location !406 :: (store 4 into %ir.arrayidx23); is.c:400:43
  Ready @15c
  TopQ.A TopLatency SU(8) 15c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 10
  Executed: 16c
  Critical: 10c, 10 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   renamable $x11 = LDRSWui $sp, 10, debug-location !401 :: (dereferenceable load 4 from %ir.i); is.c:400:31
SU(1):   renamable $w12 = LDRWui $sp, 3, implicit-def $x12, debug-location !403 :: (dereferenceable load 4 from %ir.shift); is.c:400:37
SU(2):   renamable $w13 = LDRWroX renamable $x8, renamable $x11, 0, 1, debug-location !402 :: (load 4 from %ir.arrayidx21); is.c:400:21
SU(6):   renamable $w11 = nsw ADDWri renamable $w11, 1, 0, implicit $x11, debug-location !407; is.c:399:32
SU(9):   STRWui renamable $w11, $sp, 10, debug-location !407 :: (store 4 into %ir.i); is.c:399:32
SU(3):   renamable $w12 = ASRVWr renamable $w13, renamable $w12, implicit $x12, implicit-def $x12, debug-location !404; is.c:400:34
SU(4):   renamable $x12 = SBFMXri renamable $x12, 62, 31, debug-location !405; is.c:400:9
SU(5):   renamable $w13 = LDRWroX renamable $x9, renamable $x12, 0, 0, debug-location !406 :: (load 4 from %ir.arrayidx23); is.c:400:43
SU(7):   renamable $w13 = nsw ADDWri renamable $w13, 1, 0, debug-location !406; is.c:400:43
SU(8):   STRWroX renamable $w13, renamable $x9, renamable $x12, 0, 0, debug-location !406 :: (store 4 into %ir.arrayidx23); is.c:400:43

Fixup kills for %bb.8
********** MI Scheduling **********
rank:%bb.9 for.end27
  From: renamable $x10 = ADRP target-flags(aarch64-page) @bucket_ptrs, debug-location !411; is.c:403:20
    To: End RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $x10 = ADRP target-flags(aarch64-page) @bucket_ptrs, debug-location !411; is.c:403:20
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(4): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x10
SU(1):   $w11 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=$w11
SU(2):   STRWui $wzr, renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @bucket_ptrs, debug-location !411 :: (store 4 into `i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @bucket_ptrs, i64 0, i64 0)`, align 16); is.c:403:20
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(0): Data Latency=1 Reg=$x10
  Successors:
    SU(4): Anti Latency=0
SU(3):   STRWui renamable $w11, $sp, 10, debug-location !412 :: (store 4 into %ir.i); is.c:404:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w11
SU(4):   $x10 = ADRP target-flags(aarch64-page) @bucket_ptrs
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(2): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x10
SU(5):   renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @bucket_ptrs, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x10
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 3
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 3
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x10 = ADRP target-flags(aarch64-page) @bucket_ptrs, debug-location !411; is.c:403:20
  Ready @0c
  TopQ.A BotLatency SU(0) 3c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 3
  Cand SU(1) ORDER                              
  Cand SU(2) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) STRWui $wzr, renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @bucket_ptrs, debug-location !411 :: (store 4 into `i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @bucket_ptrs, i64 0, i64 0)`, align 16); is.c:403:20
  Ready @1c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 4 
  TopQ.A RemainingLatency 0 + 2c > CritPath 3
  Cand SU(1) ORDER                              
  Cand SU(4) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) $x10 = ADRP target-flags(aarch64-page) @bucket_ptrs
  Ready @2c
  TopQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 5 
  TopQ.A RemainingLatency 0 + 3c > CritPath 3
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) $w11 = MOVZWi 1, 0
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 3 
  TopQ.A RemainingLatency 0 + 4c > CritPath 3
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @bucket_ptrs, 0
  Ready @4c
  TopQ.A TopLatency SU(5) 2c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STRWui renamable $w11, $sp, 10, debug-location !412 :: (store 4 into %ir.i); is.c:404:12
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   renamable $x10 = ADRP target-flags(aarch64-page) @bucket_ptrs, debug-location !411; is.c:403:20
SU(2):   STRWui $wzr, renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @bucket_ptrs, debug-location !411 :: (store 4 into `i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @bucket_ptrs, i64 0, i64 0)`, align 16); is.c:403:20
SU(4):   $x10 = ADRP target-flags(aarch64-page) @bucket_ptrs
SU(1):   $w11 = MOVZWi 1, 0
SU(5):   renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @bucket_ptrs, 0
SU(3):   STRWui renamable $w11, $sp, 10, debug-location !412 :: (store 4 into %ir.i); is.c:404:12

Fixup kills for %bb.9
********** MI Scheduling **********
rank:%bb.10 for.cond28
  From: renamable $w11 = LDRWui $sp, 10, debug-location !415 :: (dereferenceable load 4 from %ir.i); is.c:404:17
    To: Bcc 12, %bb.12, implicit $nzcv, debug-location !418; is.c:404:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w11 = LDRWui $sp, 10, debug-location !415 :: (dereferenceable load 4 from %ir.i); is.c:404:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w11
SU(1):   dead $wzr = SUBSWri renamable $w11, 1023, 0, implicit-def $nzcv, debug-location !418; is.c:404:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w11
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.12, implicit $nzcv, debug-location !418; is.c:404:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w11 = LDRWui $sp, 10, debug-location !415 :: (dereferenceable load 4 from %ir.i); is.c:404:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w11, 1023, 0, implicit-def $nzcv, debug-location !418; is.c:404:5
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   renamable $w11 = LDRWui $sp, 10, debug-location !415 :: (dereferenceable load 4 from %ir.i); is.c:404:17
SU(1):   dead $wzr = SUBSWri renamable $w11, 1023, 0, implicit-def $nzcv, debug-location !418; is.c:404:5

Fixup kills for %bb.10
********** MI Scheduling **********
rank:%bb.11 for.body30
  From: renamable $x11 = LDRSWui $sp, 10, debug-location !419 :: (dereferenceable load 4 from %ir.i); is.c:405:38
    To: B %bb.10
 RegionInstrs: 9
ScheduleDAGMI::schedule starting
SU(0):   renamable $x11 = LDRSWui $sp, 10, debug-location !419 :: (dereferenceable load 4 from %ir.i); is.c:405:38
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$w11
    SU(5): Data Latency=0 Reg=$x11
    SU(1): Data Latency=4 Reg=$x11
    SU(8): Ord  Latency=0 Memory
SU(1):   renamable $x12 = UBFMXri renamable $x11, 62, 61, debug-location !420; is.c:405:40
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(0): Data Latency=4 Reg=$x11
  Successors:
    SU(7): Data Latency=1 Reg=$x12
    SU(2): Data Latency=1 Reg=$x12
    SU(5): Anti Latency=0
SU(2):   renamable $x13 = SUBXri renamable $x12, 4, 0, debug-location !421; is.c:405:26
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(1): Data Latency=1 Reg=$x12
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x13
    SU(3): Data Latency=1 Reg=$x13
SU(3):   renamable $w14 = LDRWroX renamable $x10, renamable $x13, 0, 0, debug-location !421 :: (load 4 from %ir.arrayidx33); is.c:405:26
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 5
  Predecessors:
    SU(2): Data Latency=1 Reg=$x13
  Successors:
    SU(6): Data Latency=4 Reg=$w14
    SU(4): Anti Latency=0
    SU(7): Ord  Latency=0 Memory
SU(4):   renamable $w13 = LDRWroX renamable $x9, renamable $x13, 0, 0, debug-location !424 :: (load 4 from %ir.arrayidx36); is.c:405:47
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 5
  Predecessors:
    SU(3): Anti Latency=0
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x13
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$w13
SU(5):   renamable $w11 = nsw ADDWri renamable $w11, 1, 0, implicit $x11, debug-location !429; is.c:404:35
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w11
    SU(0): Data Latency=0 Reg=$x11
  Successors:
    SU(8): Data Latency=1 Reg=$w11
SU(6):   $w13 = ADDWrs renamable $w14, renamable $w13, 0, debug-location !425; is.c:405:45
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$w13
    SU(3): Data Latency=4 Reg=$w14
  Successors:
    SU(7): Data Latency=1 Reg=$w13
SU(7):   STRWroX renamable $w13, renamable $x10, renamable $x12, 0, 0, debug-location !428 :: (store 4 into %ir.arrayidx39); is.c:405:24
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=$w13
    SU(3): Ord  Latency=0 Memory
    SU(1): Data Latency=1 Reg=$x12
SU(8):   STRWui renamable $w11, $sp, 10, debug-location !429 :: (store 4 into %ir.i); is.c:404:35
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=$w11
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.10
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 11
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x11 = LDRSWui $sp, 10, debug-location !419 :: (dereferenceable load 4 from %ir.i); is.c:405:38
  Ready @0c
  TopQ.A BotLatency SU(0) 11c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x12 = UBFMXri renamable $x11, 62, 61, debug-location !420; is.c:405:40
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 5 
  TopQ.A RemainingLatency 0 + 5c > CritPath 11
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x13 = SUBXri renamable $x12, 4, 0, debug-location !421; is.c:405:26
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 3 
  TopQ.A RemainingLatency 0 + 6c > CritPath 11
  Cand SU(5) ORDER                              
  Cand SU(3) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $w14 = LDRWroX renamable $x10, renamable $x13, 0, 0, debug-location !421 :: (load 4 from %ir.arrayidx33); is.c:405:26
  Ready @6c
  TopQ.A TopLatency SU(3) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 
  TopQ.A RemainingLatency 0 + 7c > CritPath 11
  Cand SU(5) ORDER                              
  Cand SU(4) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $w13 = LDRWroX renamable $x9, renamable $x13, 0, 0, debug-location !424 :: (load 4 from %ir.arrayidx36); is.c:405:47
  Ready @7c
  TopQ.A BotLatency SU(4) 5c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $w11 = nsw ADDWri renamable $w11, 1, 0, implicit $x11, debug-location !429; is.c:404:35
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) STRWui renamable $w11, $sp, 10, debug-location !429 :: (store 4 into %ir.i); is.c:404:35
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 7
  Executed: 10c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 11 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) $w13 = ADDWrs renamable $w14, renamable $w13, 0, debug-location !425; is.c:405:45
  Ready @11c
  TopQ.A TopLatency SU(6) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 8
  Executed: 12c
  Critical: 8c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) STRWroX renamable $w13, renamable $x10, renamable $x12, 0, 0, debug-location !428 :: (store 4 into %ir.arrayidx39); is.c:405:24
  Ready @12c
  TopQ.A TopLatency SU(7) 11c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 9
  Executed: 13c
  Critical: 9c, 9 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   renamable $x11 = LDRSWui $sp, 10, debug-location !419 :: (dereferenceable load 4 from %ir.i); is.c:405:38
SU(1):   renamable $x12 = UBFMXri renamable $x11, 62, 61, debug-location !420; is.c:405:40
SU(2):   renamable $x13 = SUBXri renamable $x12, 4, 0, debug-location !421; is.c:405:26
SU(3):   renamable $w14 = LDRWroX renamable $x10, renamable $x13, 0, 0, debug-location !421 :: (load 4 from %ir.arrayidx33); is.c:405:26
SU(4):   renamable $w13 = LDRWroX renamable $x9, renamable $x13, 0, 0, debug-location !424 :: (load 4 from %ir.arrayidx36); is.c:405:47
SU(5):   renamable $w11 = nsw ADDWri renamable $w11, 1, 0, implicit $x11, debug-location !429; is.c:404:35
SU(8):   STRWui renamable $w11, $sp, 10, debug-location !429 :: (store 4 into %ir.i); is.c:404:35
SU(6):   $w13 = ADDWrs renamable $w14, renamable $w13, 0, debug-location !425; is.c:405:45
SU(7):   STRWroX renamable $w13, renamable $x10, renamable $x12, 0, 0, debug-location !428 :: (store 4 into %ir.arrayidx39); is.c:405:24

Fixup kills for %bb.11
********** MI Scheduling **********
rank:%bb.12 for.end42
  From: STRWui $wzr, $sp, 10, debug-location !433 :: (store 4 into %ir.i); is.c:408:12
    To: End RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   STRWui $wzr, $sp, 10, debug-location !433 :: (store 4 into %ir.i); is.c:408:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $w11 = MOVNWi 65024, 16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $x9 = ADRP target-flags(aarch64-page) @key_buff2
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x9
SU(3):   renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @key_buff2, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x9
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(2) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x9 = ADRP target-flags(aarch64-page) @key_buff2
  Ready @0c
  TopQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $w11 = MOVNWi 65024, 16
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(3) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @key_buff2, 0
  Ready @2c
  TopQ.A TopLatency SU(3) 1c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STRWui $wzr, $sp, 10, debug-location !433 :: (store 4 into %ir.i); is.c:408:12
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.12 ***
SU(2):   $x9 = ADRP target-flags(aarch64-page) @key_buff2
SU(1):   $w11 = MOVNWi 65024, 16
SU(3):   renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @key_buff2, 0
SU(0):   STRWui $wzr, $sp, 10, debug-location !433 :: (store 4 into %ir.i); is.c:408:12

Fixup kills for %bb.12
********** MI Scheduling **********
rank:%bb.13 for.cond43
  From: renamable $w12 = LDRWui $sp, 10, debug-location !436 :: (dereferenceable load 4 from %ir.i); is.c:408:17
    To: Bcc 12, %bb.15, implicit $nzcv, debug-location !439; is.c:408:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w12 = LDRWui $sp, 10, debug-location !436 :: (dereferenceable load 4 from %ir.i); is.c:408:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w12
SU(1):   $wzr = SUBSWrs renamable $w12, renamable $w11, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !439; is.c:408:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w12
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.15, implicit $nzcv, debug-location !439; is.c:408:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w12 = LDRWui $sp, 10, debug-location !436 :: (dereferenceable load 4 from %ir.i); is.c:408:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $wzr = SUBSWrs renamable $w12, renamable $w11, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !439; is.c:408:5
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   renamable $w12 = LDRWui $sp, 10, debug-location !436 :: (dereferenceable load 4 from %ir.i); is.c:408:17
SU(1):   $wzr = SUBSWrs renamable $w12, renamable $w11, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !439; is.c:408:5

Fixup kills for %bb.13
********** MI Scheduling **********
rank:%bb.14 for.body45
  From: renamable $x12 = LDRSWui $sp, 10, debug-location !440 :: (dereferenceable load 4 from %ir.i); is.c:409:25
    To: B %bb.13
 RegionInstrs: 12
ScheduleDAGMI::schedule starting
SU(0):   renamable $x12 = LDRSWui $sp, 10, debug-location !440 :: (dereferenceable load 4 from %ir.i); is.c:409:25
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$w12
    SU(6): Data Latency=0 Reg=$x12
    SU(2): Data Latency=4 Reg=$x12
    SU(11): Ord  Latency=0 Memory
SU(1):   renamable $w13 = LDRWui $sp, 3, implicit-def $x13, debug-location !446 :: (dereferenceable load 4 from %ir.shift); is.c:410:38
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w13
    SU(3): Data Latency=0 Reg=$x13
SU(2):   renamable $w14 = LDRWroX renamable $x8, renamable $x12, 0, 1, debug-location !442 :: (load 4 from %ir.arrayidx47); is.c:409:15
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(0): Data Latency=4 Reg=$x12
  Successors:
    SU(9): Data Latency=4 Reg=$w14
    SU(7): Data Latency=4 Reg=$w14
    SU(3): Data Latency=4 Reg=$w14
    SU(6): Anti Latency=0
SU(3):   renamable $w13 = ASRVWr renamable $w14, renamable $w13, implicit $x13, implicit-def $x13, debug-location !447; is.c:410:35
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 7
  Predecessors:
    SU(2): Data Latency=4 Reg=$w14
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w13
    SU(1): Data Latency=0 Reg=$x13
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x13
SU(4):   renamable $x13 = SBFMXri renamable $x13, 62, 31, debug-location !448; is.c:410:19
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 6
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x13
  Successors:
    SU(10): Data Latency=1 Reg=$x13
    SU(5): Data Latency=1 Reg=$x13
SU(5):   renamable $x15 = LDRSWroX renamable $x10, renamable $x13, 0, 0, debug-location !449 :: (load 4 from %ir.arrayidx50); is.c:410:44
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 5
  Predecessors:
    SU(4): Data Latency=1 Reg=$x13
  Successors:
    SU(8): Data Latency=4 Reg=$w15
    SU(9): Data Latency=4 Reg=$x15
    SU(10): Ord  Latency=0 Memory
SU(6):   renamable $w12 = nsw ADDWri renamable $w12, 1, 0, implicit $x12, debug-location !452; is.c:408:32
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w12
    SU(0): Data Latency=0 Reg=$x12
  Successors:
    SU(11): Data Latency=1 Reg=$w12
SU(7):   STRWui renamable $w14, $sp, 2, debug-location !443 :: (store 4 into %ir.key); is.c:409:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=$w14
SU(8):   renamable $w16 = nsw ADDWri renamable $w15, 1, 0, debug-location !449; is.c:410:44
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 1
  Predecessors:
    SU(5): Data Latency=4 Reg=$w15
  Successors:
    SU(10): Data Latency=1 Reg=$w16
SU(9):   STRWroX renamable $w14, renamable $x9, renamable $x15, 0, 1, debug-location !451 :: (store 4 into %ir.arrayidx53); is.c:410:48
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 0
  Predecessors:
    SU(5): Data Latency=4 Reg=$x15
    SU(2): Data Latency=4 Reg=$w14
SU(10):   STRWroX renamable $w16, renamable $x10, renamable $x13, 0, 0, debug-location !449 :: (store 4 into %ir.arrayidx50); is.c:410:44
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=$w16
    SU(5): Ord  Latency=0 Memory
    SU(4): Data Latency=1 Reg=$x13
SU(11):   STRWui renamable $w12, $sp, 10, debug-location !452 :: (store 4 into %ir.i); is.c:408:32
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=$w12
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.13
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 15
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 15
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x12 = LDRSWui $sp, 10, debug-location !440 :: (dereferenceable load 4 from %ir.i); is.c:409:25
  Ready @0c
  TopQ.A BotLatency SU(0) 15c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w13 = LDRWui $sp, 3, implicit-def $x13, debug-location !446 :: (dereferenceable load 4 from %ir.shift); is.c:410:38
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w14 = LDRWroX renamable $x8, renamable $x12, 0, 1, debug-location !442 :: (load 4 from %ir.arrayidx47); is.c:409:15
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 3 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $w12 = nsw ADDWri renamable $w12, 1, 0, implicit $x12, debug-location !452; is.c:408:32
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 3 
Queue TopQ.A: 11 
Pick Top ONLY1     
Scheduling SU(11) STRWui renamable $w12, $sp, 10, debug-location !452 :: (store 4 into %ir.i); is.c:408:32
  Ready @6c
  TopQ.A TopLatency SU(11) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 8 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 7 3 
  TopQ.A RemainingLatency 0 + 8c > CritPath 15
  Cand SU(7) ORDER                              
  Cand SU(3) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $w13 = ASRVWr renamable $w14, renamable $w13, implicit $x13, implicit-def $x13, debug-location !447; is.c:410:35
  Ready @8c
  TopQ.A TopLatency SU(3) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 4 
  TopQ.A RemainingLatency 0 + 9c > CritPath 15
  Cand SU(7) ORDER                              
  Cand SU(4) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $x13 = SBFMXri renamable $x13, 62, 31, debug-location !448; is.c:410:19
  Ready @9c
  TopQ.A TopLatency SU(4) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 7
  Executed: 10c
  Critical: 7c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 5 
  TopQ.A RemainingLatency 0 + 10c > CritPath 15
  Cand SU(7) ORDER                              
  Cand SU(5) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $x15 = LDRSWroX renamable $x10, renamable $x13, 0, 0, debug-location !449 :: (load 4 from %ir.arrayidx50); is.c:410:44
  Ready @10c
  TopQ.A TopLatency SU(5) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 8
  Executed: 11c
  Critical: 8c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 8 9 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) STRWui renamable $w14, $sp, 2, debug-location !443 :: (store 4 into %ir.key); is.c:409:13
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 9
  Executed: 12c
  Critical: 9c, 9 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 14 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 8 9 
  TopQ.A RemainingLatency 0 + 14c > CritPath 15
  Cand SU(8) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(8) renamable $w16 = nsw ADDWri renamable $w15, 1, 0, debug-location !449; is.c:410:44
  Ready @14c
  TopQ.A TopLatency SU(8) 14c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 10
  Executed: 15c
  Critical: 10c, 10 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 10 
  TopQ.A RemainingLatency 0 + 15c > CritPath 15
  Cand SU(9) ORDER                              
Pick Top ORDER     
Scheduling SU(9) STRWroX renamable $w14, renamable $x9, renamable $x15, 0, 1, debug-location !451 :: (store 4 into %ir.arrayidx53); is.c:410:48
  Ready @15c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 11
  Executed: 16c
  Critical: 11c, 11 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) STRWroX renamable $w16, renamable $x10, renamable $x13, 0, 0, debug-location !449 :: (store 4 into %ir.arrayidx50); is.c:410:44
  Ready @16c
  TopQ.A TopLatency SU(10) 15c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 12
  Executed: 17c
  Critical: 12c, 12 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   renamable $x12 = LDRSWui $sp, 10, debug-location !440 :: (dereferenceable load 4 from %ir.i); is.c:409:25
SU(1):   renamable $w13 = LDRWui $sp, 3, implicit-def $x13, debug-location !446 :: (dereferenceable load 4 from %ir.shift); is.c:410:38
SU(2):   renamable $w14 = LDRWroX renamable $x8, renamable $x12, 0, 1, debug-location !442 :: (load 4 from %ir.arrayidx47); is.c:409:15
SU(6):   renamable $w12 = nsw ADDWri renamable $w12, 1, 0, implicit $x12, debug-location !452; is.c:408:32
SU(11):   STRWui renamable $w12, $sp, 10, debug-location !452 :: (store 4 into %ir.i); is.c:408:32
SU(3):   renamable $w13 = ASRVWr renamable $w14, renamable $w13, implicit $x13, implicit-def $x13, debug-location !447; is.c:410:35
SU(4):   renamable $x13 = SBFMXri renamable $x13, 62, 31, debug-location !448; is.c:410:19
SU(5):   renamable $x15 = LDRSWroX renamable $x10, renamable $x13, 0, 0, debug-location !449 :: (load 4 from %ir.arrayidx50); is.c:410:44
SU(7):   STRWui renamable $w14, $sp, 2, debug-location !443 :: (store 4 into %ir.key); is.c:409:13
SU(8):   renamable $w16 = nsw ADDWri renamable $w15, 1, 0, debug-location !449; is.c:410:44
SU(9):   STRWroX renamable $w14, renamable $x9, renamable $x15, 0, 1, debug-location !451 :: (store 4 into %ir.arrayidx53); is.c:410:48
SU(10):   STRWroX renamable $w16, renamable $x10, renamable $x13, 0, 0, debug-location !449 :: (store 4 into %ir.arrayidx50); is.c:410:44

Fixup kills for %bb.14
********** MI Scheduling **********
rank:%bb.15 for.end56
  From: STRXui killed renamable $x9, $sp, 2, debug-location !456 :: (store 8 into %ir.key_buff_ptr2); is.c:413:19
    To: End RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   STRXui renamable $x9, $sp, 2, debug-location !456 :: (store 8 into %ir.key_buff_ptr2); is.c:413:19
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   STRWui $wzr, $sp, 10, debug-location !457 :: (store 4 into %ir.i); is.c:422:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   $x8 = ADRP target-flags(aarch64-page) @key_buff1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x8
SU(3):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @key_buff1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x8 = ADRP target-flags(aarch64-page) @key_buff1
  Ready @0c
  TopQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(3) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @key_buff1, 0
  Ready @1c
  TopQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STRXui renamable $x9, $sp, 2, debug-location !456 :: (store 8 into %ir.key_buff_ptr2); is.c:413:19
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRWui $wzr, $sp, 10, debug-location !457 :: (store 4 into %ir.i); is.c:422:12
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.15 ***
SU(2):   $x8 = ADRP target-flags(aarch64-page) @key_buff1
SU(3):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @key_buff1, 0
SU(0):   STRXui renamable $x9, $sp, 2, debug-location !456 :: (store 8 into %ir.key_buff_ptr2); is.c:413:19
SU(1):   STRWui $wzr, $sp, 10, debug-location !457 :: (store 4 into %ir.i); is.c:422:12

Fixup kills for %bb.15
********** MI Scheduling **********
rank:%bb.16 for.cond57
  From: renamable $w9 = LDRWui $sp, 10, debug-location !460 :: (dereferenceable load 4 from %ir.i); is.c:422:17
    To: Bcc 10, %bb.18, implicit $nzcv, debug-location !463; is.c:422:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w9 = LDRWui $sp, 10, debug-location !460 :: (dereferenceable load 4 from %ir.i); is.c:422:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w9
SU(1):   dead $wzr = SUBSWri renamable $w9, 512, 12, implicit-def $nzcv, debug-location !463; is.c:422:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w9
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.18, implicit $nzcv, debug-location !463; is.c:422:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w9 = LDRWui $sp, 10, debug-location !460 :: (dereferenceable load 4 from %ir.i); is.c:422:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w9, 512, 12, implicit-def $nzcv, debug-location !463; is.c:422:5
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.16 ***
SU(0):   renamable $w9 = LDRWui $sp, 10, debug-location !460 :: (dereferenceable load 4 from %ir.i); is.c:422:17
SU(1):   dead $wzr = SUBSWri renamable $w9, 512, 12, implicit-def $nzcv, debug-location !463; is.c:422:5

Fixup kills for %bb.16
********** MI Scheduling **********
rank:%bb.17 for.body59
  From: renamable $x9 = LDRSWui $sp, 10, debug-location !464 :: (dereferenceable load 4 from %ir.i); is.c:423:19
    To: B %bb.16
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $x9 = LDRSWui $sp, 10, debug-location !464 :: (dereferenceable load 4 from %ir.i); is.c:423:19
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$w9
    SU(2): Data Latency=0 Reg=$x9
    SU(1): Data Latency=4 Reg=$x9
    SU(3): Ord  Latency=0 Memory
SU(1):   STRWroX $wzr, renamable $x8, renamable $x9, 0, 1, debug-location !466 :: (store 4 into %ir.arrayidx61); is.c:423:22
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$x9
  Successors:
    SU(2): Anti Latency=0
SU(2):   renamable $w9 = nsw ADDWri renamable $w9, 1, 0, implicit $x9, debug-location !467; is.c:422:31
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w9
    SU(0): Data Latency=0 Reg=$x9
  Successors:
    SU(3): Data Latency=1 Reg=$w9
SU(3):   STRWui renamable $w9, $sp, 10, debug-location !467 :: (store 4 into %ir.i); is.c:422:31
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=$w9
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x9 = LDRSWui $sp, 10, debug-location !464 :: (dereferenceable load 4 from %ir.i); is.c:423:19
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRWroX $wzr, renamable $x8, renamable $x9, 0, 1, debug-location !466 :: (store 4 into %ir.arrayidx61); is.c:423:22
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w9 = nsw ADDWri renamable $w9, 1, 0, implicit $x9, debug-location !467; is.c:422:31
  Ready @5c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STRWui renamable $w9, $sp, 10, debug-location !467 :: (store 4 into %ir.i); is.c:422:31
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   renamable $x9 = LDRSWui $sp, 10, debug-location !464 :: (dereferenceable load 4 from %ir.i); is.c:423:19
SU(1):   STRWroX $wzr, renamable $x8, renamable $x9, 0, 1, debug-location !466 :: (store 4 into %ir.arrayidx61); is.c:423:22
SU(2):   renamable $w9 = nsw ADDWri renamable $w9, 1, 0, implicit $x9, debug-location !467; is.c:422:31
SU(3):   STRWui renamable $w9, $sp, 10, debug-location !467 :: (store 4 into %ir.i); is.c:422:31

Fixup kills for %bb.17
********** MI Scheduling **********
rank:%bb.18 for.end64
  From: STRXui killed renamable $x8, $sp, 3, debug-location !471 :: (store 8 into %ir.key_buff_ptr); is.c:427:18
    To: End RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   STRXui renamable $x8, $sp, 3, debug-location !471 :: (store 8 into %ir.key_buff_ptr); is.c:427:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Anti Latency=0
SU(1):   STRWui $wzr, $sp, 10, debug-location !472 :: (store 4 into %ir.i); is.c:433:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   $w8 = MOVNWi 65024, 16
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Anti Latency=0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) STRXui renamable $x8, $sp, 3, debug-location !471 :: (store 8 into %ir.key_buff_ptr); is.c:427:18
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 1
  Cand SU(1) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $w8 = MOVNWi 65024, 16
  Ready @1c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRWui $wzr, $sp, 10, debug-location !472 :: (store 4 into %ir.i); is.c:433:12
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.18 ***
SU(0):   STRXui renamable $x8, $sp, 3, debug-location !471 :: (store 8 into %ir.key_buff_ptr); is.c:427:18
SU(2):   $w8 = MOVNWi 65024, 16
SU(1):   STRWui $wzr, $sp, 10, debug-location !472 :: (store 4 into %ir.i); is.c:433:12

Fixup kills for %bb.18
********** MI Scheduling **********
rank:%bb.19 for.cond65
  From: renamable $w9 = LDRWui $sp, 10, debug-location !475 :: (dereferenceable load 4 from %ir.i); is.c:433:17
    To: Bcc 12, %bb.21, implicit $nzcv, debug-location !478; is.c:433:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w9 = LDRWui $sp, 10, debug-location !475 :: (dereferenceable load 4 from %ir.i); is.c:433:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w9
SU(1):   $wzr = SUBSWrs renamable $w9, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !478; is.c:433:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w9
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.21, implicit $nzcv, debug-location !478; is.c:433:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w9 = LDRWui $sp, 10, debug-location !475 :: (dereferenceable load 4 from %ir.i); is.c:433:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $wzr = SUBSWrs renamable $w9, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !478; is.c:433:5
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   renamable $w9 = LDRWui $sp, 10, debug-location !475 :: (dereferenceable load 4 from %ir.i); is.c:433:17
SU(1):   $wzr = SUBSWrs renamable $w9, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !478; is.c:433:5

Fixup kills for %bb.19
********** MI Scheduling **********
rank:%bb.20 for.body67
  From: renamable $x9 = LDRXui $sp, 2, debug-location !480 :: (dereferenceable load 8 from %ir.key_buff_ptr2); is.c:434:22
    To: B %bb.19
 RegionInstrs: 11
ScheduleDAGMI::schedule starting
SU(0):   renamable $x9 = LDRXui $sp, 2, debug-location !480 :: (dereferenceable load 8 from %ir.key_buff_ptr2); is.c:434:22
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x9
    SU(7): Ord  Latency=0 Memory
SU(1):   renamable $x10 = LDRSWui $sp, 10, debug-location !481 :: (dereferenceable load 4 from %ir.i); is.c:434:36
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
    SU(3): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x10
    SU(10): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
SU(2):   renamable $x9 = LDRSWroX renamable $x9, renamable $x10, 0, 1, debug-location !480 :: (load 4 from %ir.arrayidx69); is.c:434:22
  # preds left       : 3
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 16
  Predecessors:
    SU(1): Data Latency=4 Reg=$x10
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x9
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$x9
    SU(3): Anti Latency=0
    SU(10): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
SU(3):   renamable $x10 = LDRXui $sp, 3, debug-location !479 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:434:9
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 15
  Predecessors:
    SU(2): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    SU(7): Data Latency=4 Reg=$x10
    SU(5): Data Latency=4 Reg=$x10
    SU(7): Ord  Latency=0 Memory
SU(4):   renamable $x9 = UBFMXri renamable $x9, 62, 61, debug-location !479; is.c:434:9
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 12
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x9
  Successors:
    SU(8): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x9
    SU(5): Data Latency=1 Reg=$x9
SU(5):   renamable $w11 = LDRWroX renamable $x10, renamable $x9, 0, 0, debug-location !482 :: (load 4 from %ir.arrayidx71); is.c:434:39
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 11
  Predecessors:
    SU(4): Data Latency=1 Reg=$x9
    SU(3): Data Latency=4 Reg=$x10
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$w11
    SU(8): Anti Latency=0
    SU(10): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
SU(6):   renamable $w11 = nsw ADDWri renamable $w11, 1, 0, debug-location !482; is.c:434:39
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 7
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$w11
  Successors:
    SU(7): Data Latency=1 Reg=$w11
SU(7):   STRWroX renamable $w11, renamable $x10, renamable $x9, 0, 0, debug-location !482 :: (store 4 into %ir.arrayidx71); is.c:434:39
  # preds left       : 8
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 6
  Predecessors:
    SU(6): Data Latency=1 Reg=$w11
    SU(5): Ord  Latency=0 Memory
    SU(4): Data Latency=1 Reg=$x9
    SU(3): Data Latency=4 Reg=$x10
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(8): Anti Latency=0
    SU(10): Ord  Latency=0 Memory
    SU(8): Ord  Latency=1 Memory
SU(8):   renamable $w9 = LDRWui $sp, 10, debug-location !483 :: (dereferenceable load 4 from %ir.i); is.c:433:32
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 15
  Height             : 5
  Predecessors:
    SU(7): Anti Latency=0
    SU(7): Ord  Latency=1 Memory
    SU(5): Anti Latency=0
    SU(4): Out  Latency=1
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=4 Reg=$w9
    SU(10): Ord  Latency=0 Memory
SU(9):   renamable $w9 = nsw ADDWri renamable $w9, 1, 0, debug-location !483; is.c:433:32
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 19
  Height             : 1
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=4 Reg=$w9
  Successors:
    SU(10): Data Latency=1 Reg=$w9
SU(10):   STRWui renamable $w9, $sp, 10, debug-location !483 :: (store 4 into %ir.i); is.c:433:32
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 20
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=$w9
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
ExitSU:   B %bb.19
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 20
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 20
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x9 = LDRXui $sp, 2, debug-location !480 :: (dereferenceable load 8 from %ir.key_buff_ptr2); is.c:434:22
  Ready @0c
  TopQ.A BotLatency SU(0) 20c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x10 = LDRSWui $sp, 10, debug-location !481 :: (dereferenceable load 4 from %ir.i); is.c:434:36
  Ready @1c
  TopQ.A BotLatency SU(1) 20c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x9 = LDRSWroX renamable $x9, renamable $x10, 0, 1, debug-location !480 :: (load 4 from %ir.arrayidx69); is.c:434:22
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $x10 = LDRXui $sp, 3, debug-location !479 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:434:9
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 9 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $x9 = UBFMXri renamable $x9, 62, 61, debug-location !479; is.c:434:9
  Ready @9c
  TopQ.A TopLatency SU(4) 8c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 5
  Executed: 10c
  Critical: 5c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $w11 = LDRWroX renamable $x10, renamable $x9, 0, 0, debug-location !482 :: (load 4 from %ir.arrayidx71); is.c:434:39
  Ready @10c
  TopQ.A TopLatency SU(5) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 6
  Executed: 11c
  Critical: 6c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 14 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $w11 = nsw ADDWri renamable $w11, 1, 0, debug-location !482; is.c:434:39
  Ready @14c
  TopQ.A TopLatency SU(6) 13c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 7
  Executed: 15c
  Critical: 7c, 7 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) STRWroX renamable $w11, renamable $x10, renamable $x9, 0, 0, debug-location !482 :: (store 4 into %ir.arrayidx71); is.c:434:39
  Ready @15c
  TopQ.A TopLatency SU(7) 14c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 8
  Executed: 16c
  Critical: 8c, 8 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) renamable $w9 = LDRWui $sp, 10, debug-location !483 :: (dereferenceable load 4 from %ir.i); is.c:433:32
  Ready @16c
  TopQ.A TopLatency SU(8) 15c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 9
  Executed: 17c
  Critical: 9c, 9 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 20 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) renamable $w9 = nsw ADDWri renamable $w9, 1, 0, debug-location !483; is.c:433:32
  Ready @20c
  TopQ.A TopLatency SU(9) 19c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 10
  Executed: 21c
  Critical: 10c, 10 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) STRWui renamable $w9, $sp, 10, debug-location !483 :: (store 4 into %ir.i); is.c:433:32
  Ready @21c
  TopQ.A TopLatency SU(10) 20c
  *** Max MOps 1 at cycle 21
Cycle: 22 TopQ.A
TopQ.A @22c
  Retired: 11
  Executed: 22c
  Critical: 11c, 11 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   renamable $x9 = LDRXui $sp, 2, debug-location !480 :: (dereferenceable load 8 from %ir.key_buff_ptr2); is.c:434:22
SU(1):   renamable $x10 = LDRSWui $sp, 10, debug-location !481 :: (dereferenceable load 4 from %ir.i); is.c:434:36
SU(2):   renamable $x9 = LDRSWroX renamable $x9, renamable $x10, 0, 1, debug-location !480 :: (load 4 from %ir.arrayidx69); is.c:434:22
SU(3):   renamable $x10 = LDRXui $sp, 3, debug-location !479 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:434:9
SU(4):   renamable $x9 = UBFMXri renamable $x9, 62, 61, debug-location !479; is.c:434:9
SU(5):   renamable $w11 = LDRWroX renamable $x10, renamable $x9, 0, 0, debug-location !482 :: (load 4 from %ir.arrayidx71); is.c:434:39
SU(6):   renamable $w11 = nsw ADDWri renamable $w11, 1, 0, debug-location !482; is.c:434:39
SU(7):   STRWroX renamable $w11, renamable $x10, renamable $x9, 0, 0, debug-location !482 :: (store 4 into %ir.arrayidx71); is.c:434:39
SU(8):   renamable $w9 = LDRWui $sp, 10, debug-location !483 :: (dereferenceable load 4 from %ir.i); is.c:433:32
SU(9):   renamable $w9 = nsw ADDWri renamable $w9, 1, 0, debug-location !483; is.c:433:32
SU(10):   STRWui renamable $w9, $sp, 10, debug-location !483 :: (store 4 into %ir.i); is.c:433:32

Fixup kills for %bb.20
********** MI Scheduling **********
rank:%bb.21 for.end75
  From: STRWui $wzr, $sp, 10, debug-location !487 :: (store 4 into %ir.i); is.c:440:12
    To: End RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   STRWui $wzr, $sp, 10, debug-location !487 :: (store 4 into %ir.i); is.c:440:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   renamable $w8 = ORRWri $wzr, 2003
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w8 = ORRWri $wzr, 2003
  Ready @0c
  TopQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STRWui $wzr, $sp, 10, debug-location !487 :: (store 4 into %ir.i); is.c:440:12
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.21 ***
SU(1):   renamable $w8 = ORRWri $wzr, 2003
SU(0):   STRWui $wzr, $sp, 10, debug-location !487 :: (store 4 into %ir.i); is.c:440:12

Fixup kills for %bb.21
********** MI Scheduling **********
rank:%bb.22 for.cond76
  From: renamable $w9 = LDRWui $sp, 10, debug-location !490 :: (dereferenceable load 4 from %ir.i); is.c:440:17
    To: Bcc 12, %bb.24, implicit $nzcv, debug-location !493; is.c:440:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w9 = LDRWui $sp, 10, debug-location !490 :: (dereferenceable load 4 from %ir.i); is.c:440:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w9
SU(1):   $wzr = SUBSWrs renamable $w9, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !493; is.c:440:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w9
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.24, implicit $nzcv, debug-location !493; is.c:440:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w9 = LDRWui $sp, 10, debug-location !490 :: (dereferenceable load 4 from %ir.i); is.c:440:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $wzr = SUBSWrs renamable $w9, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !493; is.c:440:5
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.22 ***
SU(0):   renamable $w9 = LDRWui $sp, 10, debug-location !490 :: (dereferenceable load 4 from %ir.i); is.c:440:17
SU(1):   $wzr = SUBSWrs renamable $w9, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !493; is.c:440:5

Fixup kills for %bb.22
********** MI Scheduling **********
rank:%bb.23 for.body78
  From: renamable $x9 = LDRXui $sp, 3, debug-location !494 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:441:32
    To: B %bb.22
 RegionInstrs: 9
ScheduleDAGMI::schedule starting
SU(0):   renamable $x9 = LDRXui $sp, 3, debug-location !494 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:441:32
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x9
    SU(5): Ord  Latency=0 Memory
SU(1):   renamable $x10 = LDRSWui $sp, 10, debug-location !495 :: (dereferenceable load 4 from %ir.i); is.c:441:45
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(3): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x10
    SU(8): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
SU(2):   renamable $x9 = ADDXrs renamable $x9, renamable $x10, 2, debug-location !494; is.c:441:32
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(1): Data Latency=4 Reg=$x10
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x9
  Successors:
    SU(6): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x9
    SU(3): Data Latency=1 Reg=$x9
    SU(3): Anti Latency=0
SU(3):   renamable $w10, renamable $w11 = LDPWi renamable $x9, 0, debug-location !494 :: (load 4 from %ir.arrayidx80), (load 4 from %ir.arrayidx83); is.c:441:32
  # preds left       : 3
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 11
  Predecessors:
    SU(2): Data Latency=1 Reg=$x9
    SU(2): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$w10
    SU(4): Data Latency=4 Reg=$w11
    SU(6): Anti Latency=0
    SU(8): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
SU(4):   $w10 = ADDWrs renamable $w11, renamable $w10, 0, debug-location !499; is.c:441:29
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 7
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w10
    SU(3): Data Latency=4 Reg=$w11
  Successors:
    SU(5): Data Latency=1 Reg=$w10
SU(5):   STRWui renamable $w10, renamable $x9, 1, debug-location !499 :: (store 4 into %ir.arrayidx83); is.c:441:29
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 6
  Predecessors:
    SU(4): Data Latency=1 Reg=$w10
    SU(3): Ord  Latency=0 Memory
    SU(2): Data Latency=1 Reg=$x9
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(6): Anti Latency=0
    SU(8): Ord  Latency=0 Memory
    SU(6): Ord  Latency=1 Memory
SU(6):   renamable $w9 = LDRWui $sp, 10, debug-location !500 :: (dereferenceable load 4 from %ir.i); is.c:440:35
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 5
  Predecessors:
    SU(5): Anti Latency=0
    SU(5): Ord  Latency=1 Memory
    SU(3): Anti Latency=0
    SU(2): Out  Latency=1
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$w9
    SU(8): Ord  Latency=0 Memory
SU(7):   renamable $w9 = nsw ADDWri renamable $w9, 1, 0, debug-location !500; is.c:440:35
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 1
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$w9
  Successors:
    SU(8): Data Latency=1 Reg=$w9
SU(8):   STRWui renamable $w9, $sp, 10, debug-location !500 :: (store 4 into %ir.i); is.c:440:35
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=$w9
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
ExitSU:   B %bb.22
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 16
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 16
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x9 = LDRXui $sp, 3, debug-location !494 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:441:32
  Ready @0c
  TopQ.A BotLatency SU(0) 16c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x10 = LDRSWui $sp, 10, debug-location !495 :: (dereferenceable load 4 from %ir.i); is.c:441:45
  Ready @1c
  TopQ.A BotLatency SU(1) 16c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x9 = ADDXrs renamable $x9, renamable $x10, 2, debug-location !494; is.c:441:32
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w10, renamable $w11 = LDPWi renamable $x9, 0, debug-location !494 :: (load 4 from %ir.arrayidx80), (load 4 from %ir.arrayidx83); is.c:441:32
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 10 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $w10 = ADDWrs renamable $w11, renamable $w10, 0, debug-location !499; is.c:441:29
  Ready @10c
  TopQ.A TopLatency SU(4) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) STRWui renamable $w10, renamable $x9, 1, debug-location !499 :: (store 4 into %ir.arrayidx83); is.c:441:29
  Ready @11c
  TopQ.A TopLatency SU(5) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $w9 = LDRWui $sp, 10, debug-location !500 :: (dereferenceable load 4 from %ir.i); is.c:440:35
  Ready @12c
  TopQ.A TopLatency SU(6) 11c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 7
  Executed: 13c
  Critical: 7c, 7 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 16 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $w9 = nsw ADDWri renamable $w9, 1, 0, debug-location !500; is.c:440:35
  Ready @16c
  TopQ.A TopLatency SU(7) 15c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 8
  Executed: 17c
  Critical: 8c, 8 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) STRWui renamable $w9, $sp, 10, debug-location !500 :: (store 4 into %ir.i); is.c:440:35
  Ready @17c
  TopQ.A TopLatency SU(8) 16c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 9
  Executed: 18c
  Critical: 9c, 9 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.23 ***
SU(0):   renamable $x9 = LDRXui $sp, 3, debug-location !494 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:441:32
SU(1):   renamable $x10 = LDRSWui $sp, 10, debug-location !495 :: (dereferenceable load 4 from %ir.i); is.c:441:45
SU(2):   renamable $x9 = ADDXrs renamable $x9, renamable $x10, 2, debug-location !494; is.c:441:32
SU(3):   renamable $w10, renamable $w11 = LDPWi renamable $x9, 0, debug-location !494 :: (load 4 from %ir.arrayidx80), (load 4 from %ir.arrayidx83); is.c:441:32
SU(4):   $w10 = ADDWrs renamable $w11, renamable $w10, 0, debug-location !499; is.c:441:29
SU(5):   STRWui renamable $w10, renamable $x9, 1, debug-location !499 :: (store 4 into %ir.arrayidx83); is.c:441:29
SU(6):   renamable $w9 = LDRWui $sp, 10, debug-location !500 :: (dereferenceable load 4 from %ir.i); is.c:440:35
SU(7):   renamable $w9 = nsw ADDWri renamable $w9, 1, 0, debug-location !500; is.c:440:35
SU(8):   STRWui renamable $w9, $sp, 10, debug-location !500 :: (store 4 into %ir.i); is.c:440:35

Fixup kills for %bb.23
********** MI Scheduling **********
rank:%bb.24 for.end87
  From: STRWui $wzr, $sp, 10, debug-location !504 :: (store 4 into %ir.i); is.c:446:12
    To: End RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   STRWui $wzr, $sp, 10, debug-location !504 :: (store 4 into %ir.i); is.c:446:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $w21 = MOVNWi 65024, 16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $x22 = ADRP target-flags(aarch64-page) @test_rank_array
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x22
SU(3):   renamable $x22 = ADDXri $x22, target-flags(aarch64-pageoff, aarch64-nc) @test_rank_array, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x22
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $w23 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   renamable $x24 = ADRP target-flags(aarch64-page) @passed_verification
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(6):   $x19 = ADRP target-flags(aarch64-page) @.str.1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x19
SU(7):   renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str.1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 4 5 6 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(2) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x22 = ADRP target-flags(aarch64-page) @test_rank_array
  Ready @0c
  TopQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 4 5 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(6) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) $x19 = ADRP target-flags(aarch64-page) @.str.1
  Ready @1c
  TopQ.A BotLatency SU(6) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 5 7 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $w21 = MOVNWi 65024, 16
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 7 3 4 5 
  TopQ.A RemainingLatency 0 + 3c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(7) TOP-PATH                  1 cycles 
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) renamable $x22 = ADDXri $x22, target-flags(aarch64-pageoff, aarch64-nc) @test_rank_array, 0
  Ready @3c
  TopQ.A TopLatency SU(3) 1c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 7 5 4 
  TopQ.A RemainingLatency 0 + 4c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(7) TOP-PATH                  1 cycles 
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) $w23 = MOVZWi 1, 0
  Ready @4c
  TopQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 7 5 
  TopQ.A RemainingLatency 0 + 5c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(7) TOP-PATH                  1 cycles 
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $x24 = ADRP target-flags(aarch64-page) @passed_verification
  Ready @5c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 7 
  TopQ.A RemainingLatency 0 + 6c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(7) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str.1, 0
  Ready @6c
  TopQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STRWui $wzr, $sp, 10, debug-location !504 :: (store 4 into %ir.i); is.c:446:12
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.24 ***
SU(2):   $x22 = ADRP target-flags(aarch64-page) @test_rank_array
SU(6):   $x19 = ADRP target-flags(aarch64-page) @.str.1
SU(1):   $w21 = MOVNWi 65024, 16
SU(3):   renamable $x22 = ADDXri $x22, target-flags(aarch64-pageoff, aarch64-nc) @test_rank_array, 0
SU(4):   $w23 = MOVZWi 1, 0
SU(5):   renamable $x24 = ADRP target-flags(aarch64-page) @passed_verification
SU(7):   renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str.1, 0
SU(0):   STRWui $wzr, $sp, 10, debug-location !504 :: (store 4 into %ir.i); is.c:446:12

Fixup kills for %bb.24
********** MI Scheduling **********
rank:%bb.25 for.cond88
  From: renamable $w8 = LDRWui $sp, 10, debug-location !507 :: (dereferenceable load 4 from %ir.i); is.c:446:17
    To: Bcc 12, %bb.39, implicit $nzcv, debug-location !510; is.c:446:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 10, debug-location !507 :: (dereferenceable load 4 from %ir.i); is.c:446:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv, debug-location !510; is.c:446:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.39, implicit $nzcv, debug-location !510; is.c:446:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 10, debug-location !507 :: (dereferenceable load 4 from %ir.i); is.c:446:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv, debug-location !510; is.c:446:5
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   renamable $w8 = LDRWui $sp, 10, debug-location !507 :: (dereferenceable load 4 from %ir.i); is.c:446:17
SU(1):   dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv, debug-location !510; is.c:446:5

Fixup kills for %bb.25
********** MI Scheduling **********
rank:%bb.26 for.body90
  From: renamable $x8 = LDRSWui $sp, 10, debug-location !511 :: (dereferenceable load 4 from %ir.i); is.c:447:33
    To: Bcc 11, %bb.38, implicit $nzcv, debug-location !520; is.c:448:19
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRSWui $sp, 10, debug-location !511 :: (dereferenceable load 4 from %ir.i); is.c:447:33
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x8
SU(1):   renamable $w8 = LDRWroX renamable $x20, renamable $x8, 0, 1, debug-location !513 :: (load 4 from %ir.arrayidx92); is.c:447:13
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(3): Data Latency=4 Reg=$w8
    SU(2): Data Latency=4 Reg=$w8
SU(2):   dead $wzr = SUBSWri renamable $w8, 1, 0, implicit-def $nzcv, debug-location !520; is.c:448:19
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   STRWui renamable $w8, $sp, 9, debug-location !514 :: (store 4 into %ir.k); is.c:447:11
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=$w8
ExitSU:   Bcc 11, %bb.38, implicit $nzcv, debug-location !520; is.c:448:19
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 9
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = LDRSWui $sp, 10, debug-location !511 :: (dereferenceable load 4 from %ir.i); is.c:447:33
  Ready @0c
  TopQ.A BotLatency SU(0) 9c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = LDRWroX renamable $x20, renamable $x8, 0, 1, debug-location !513 :: (load 4 from %ir.arrayidx92); is.c:447:13
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 8 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 2 
  TopQ.A RemainingLatency 0 + 8c > CritPath 9
  Cand SU(3) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) dead $wzr = SUBSWri renamable $w8, 1, 0, implicit-def $nzcv, debug-location !520; is.c:448:19
  Ready @8c
  TopQ.A TopLatency SU(2) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 3
  Executed: 9c
  Critical: 3c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STRWui renamable $w8, $sp, 9, debug-location !514 :: (store 4 into %ir.k); is.c:447:11
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 4
  Executed: 10c
  Critical: 4c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.26 ***
SU(0):   renamable $x8 = LDRSWui $sp, 10, debug-location !511 :: (dereferenceable load 4 from %ir.i); is.c:447:33
SU(1):   renamable $w8 = LDRWroX renamable $x20, renamable $x8, 0, 1, debug-location !513 :: (load 4 from %ir.arrayidx92); is.c:447:13
SU(2):   dead $wzr = SUBSWri renamable $w8, 1, 0, implicit-def $nzcv, debug-location !520; is.c:448:19
SU(3):   STRWui renamable $w8, $sp, 9, debug-location !514 :: (store 4 into %ir.k); is.c:447:11

Fixup kills for %bb.26
Fixup kills for %bb.27
********** MI Scheduling **********
rank:%bb.28 if.then
  From: renamable $x8 = LDRXui $sp, 3, debug-location !524 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:449:33
    To: Bcc 0, %bb.31, implicit $nzcv, debug-location !534; is.c:496:28
 RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRXui $sp, 3, debug-location !524 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:449:33
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x8
SU(1):   renamable $x9, renamable $x11 = LDPSWi $sp, 9, debug-location !525 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.i); is.c:449:46
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(4): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x9
    SU(6): Data Latency=4 Reg=$w11
    ExitSU: Ord  Latency=4 Artificial
    SU(5): Data Latency=4 Reg=$x11
SU(2):   renamable $x8 = ADDXrs renamable $x8, renamable $x9, 2, debug-location !524; is.c:449:33
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=$x9
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x8
    SU(4): Anti Latency=0
SU(3):   renamable $w8 = LDURWi renamable $x8, -4, debug-location !524 :: (load 4 from %ir.arrayidx97); is.c:449:33
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(7): Data Latency=4 Reg=$w8
    SU(7): Ord  Latency=0 Memory
SU(4):   renamable $w9 = LDRWui $sp, 11, debug-location !537 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(2): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(5):   renamable $w10 = LDRWroX renamable $x22, renamable $x11, 0, 1, debug-location !537 :: (load 4 from %ir.arrayidx104); is.c:0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=$x11
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(6):   dead $wzr = SUBSWri renamable $w11, 1, 0, implicit-def $nzcv, debug-location !534; is.c:496:28
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=$w11
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(7):   STPWi $wzr, renamable $w8, $sp, 0, debug-location !523 :: (store 4 into %ir.key_rank), (store 4 into %ir.failed); is.c:449:22
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(3): Data Latency=4 Reg=$w8
    SU(3): Ord  Latency=0 Memory
ExitSU:   Bcc 0, %bb.31, implicit $nzcv, debug-location !534; is.c:496:28
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=1 Artificial
    SU(5): Ord  Latency=4 Artificial
    SU(4): Ord  Latency=4 Artificial
    SU(3): Ord  Latency=4 Artificial
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 9
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 9
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x8 = LDRXui $sp, 3, debug-location !524 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:449:33
  Ready @0c
  TopQ.A BotLatency SU(0) 9c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x9, renamable $x11 = LDPSWi $sp, 9, debug-location !525 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.i); is.c:449:46
  Ready @1c
  TopQ.A BotLatency SU(1) 9c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 5 6 
  TopQ.A RemainingLatency 0 + 5c > CritPath 9
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x8 = ADDXrs renamable $x8, renamable $x9, 2, debug-location !524; is.c:449:33
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 5 3 4 
  TopQ.A RemainingLatency 0 + 6c > CritPath 9
  Cand SU(6) ORDER                              
  Cand SU(5) TOP-PATH                  4 cycles 
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) renamable $w8 = LDURWi renamable $x8, -4, debug-location !524 :: (load 4 from %ir.arrayidx97); is.c:449:33
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 6 5 4 
  TopQ.A RemainingLatency 0 + 7c > CritPath 9
  Cand SU(6) ORDER                              
  Cand SU(5) TOP-PATH                  4 cycles 
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) renamable $w9 = LDRWui $sp, 11, debug-location !537 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:0
  Ready @7c
  TopQ.A BotLatency SU(4) 4c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 6 5 
  TopQ.A RemainingLatency 0 + 8c > CritPath 9
  Cand SU(6) ORDER                              
  Cand SU(5) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $w10 = LDRWroX renamable $x22, renamable $x11, 0, 1, debug-location !537 :: (load 4 from %ir.arrayidx104); is.c:0
  Ready @8c
  TopQ.A BotLatency SU(5) 4c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) dead $wzr = SUBSWri renamable $w11, 1, 0, implicit-def $nzcv, debug-location !534; is.c:496:28
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 7
  Executed: 10c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) STPWi $wzr, renamable $w8, $sp, 0, debug-location !523 :: (store 4 into %ir.key_rank), (store 4 into %ir.failed); is.c:449:22
  Ready @10c
  TopQ.A TopLatency SU(7) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 8
  Executed: 11c
  Critical: 8c, 8 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.28 ***
SU(0):   renamable $x8 = LDRXui $sp, 3, debug-location !524 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:449:33
SU(1):   renamable $x9, renamable $x11 = LDPSWi $sp, 9, debug-location !525 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.i); is.c:449:46
SU(2):   renamable $x8 = ADDXrs renamable $x8, renamable $x9, 2, debug-location !524; is.c:449:33
SU(3):   renamable $w8 = LDURWi renamable $x8, -4, debug-location !524 :: (load 4 from %ir.arrayidx97); is.c:449:33
SU(4):   renamable $w9 = LDRWui $sp, 11, debug-location !537 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:0
SU(5):   renamable $w10 = LDRWroX renamable $x22, renamable $x11, 0, 1, debug-location !537 :: (load 4 from %ir.arrayidx104); is.c:0
SU(6):   dead $wzr = SUBSWri renamable $w11, 1, 0, implicit-def $nzcv, debug-location !534; is.c:496:28
SU(7):   STPWi $wzr, renamable $w8, $sp, 0, debug-location !523 :: (store 4 into %ir.key_rank), (store 4 into %ir.failed); is.c:449:22

Fixup kills for %bb.28
Fixup kills for %bb.29
Fixup kills for %bb.30
********** MI Scheduling **********
rank:%bb.31 if.then102
  From: $w9 = ADDWrs killed renamable $w10, killed renamable $w9, 0, debug-location !538; is.c:497:56
    To: Bcc 0, %bb.35, implicit $nzcv, debug-location !542; is.c:497:25
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $w9 = ADDWrs renamable $w10, renamable $w9, 0, debug-location !538; is.c:497:56
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Data Latency=1 Reg=$w9
SU(1):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !542; is.c:497:25
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Data Latency=1 Reg=$w9
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 0, %bb.35, implicit $nzcv, debug-location !542; is.c:497:25
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $w9 = ADDWrs renamable $w10, renamable $w9, 0, debug-location !538; is.c:497:56
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !542; is.c:497:25
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.31 ***
SU(0):   $w9 = ADDWrs renamable $w10, renamable $w9, 0, debug-location !538; is.c:497:56
SU(1):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !542; is.c:497:25

Fixup kills for %bb.31
Fixup kills for %bb.32
********** MI Scheduling **********
rank:%bb.33 if.else109
  From: $w9 = SUBWrs killed renamable $w10, killed renamable $w9, 0, debug-location !546; is.c:503:56
    To: Bcc 0, %bb.35, implicit $nzcv, debug-location !550; is.c:503:25
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $w9 = SUBWrs renamable $w10, renamable $w9, 0, debug-location !546; is.c:503:56
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Data Latency=1 Reg=$w9
SU(1):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !550; is.c:503:25
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Data Latency=1 Reg=$w9
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 0, %bb.35, implicit $nzcv, debug-location !550; is.c:503:25
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $w9 = SUBWrs renamable $w10, renamable $w9, 0, debug-location !546; is.c:503:56
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !550; is.c:503:25
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.33 ***
SU(0):   $w9 = SUBWrs renamable $w10, renamable $w9, 0, debug-location !546; is.c:503:56
SU(1):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !550; is.c:503:25

Fixup kills for %bb.33
Fixup kills for %bb.34
********** MI Scheduling **********
rank:%bb.35 if.else115
  From: renamable $w8 = LDRWui renamable $x24, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !537 :: (dereferenceable load 4 from @passed_verification); is.c:0
    To: End RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui renamable $x24, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !537 :: (dereferenceable load 4 from @passed_verification); is.c:0
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !537; is.c:0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STRWui renamable $w8, renamable $x24, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !537 :: (store 4 into @passed_verification); is.c:0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui renamable $x24, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !537 :: (dereferenceable load 4 from @passed_verification); is.c:0
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !537; is.c:0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w8, renamable $x24, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !537 :: (store 4 into @passed_verification); is.c:0
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.35 ***
SU(0):   renamable $w8 = LDRWui renamable $x24, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !537 :: (dereferenceable load 4 from @passed_verification); is.c:0
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !537; is.c:0
SU(2):   STRWui renamable $w8, renamable $x24, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !537 :: (store 4 into @passed_verification); is.c:0

Fixup kills for %bb.35
********** MI Scheduling **********
rank:%bb.36 if.end118
  From: renamable $w8 = LDRWui $sp, 0, debug-location !554 :: (dereferenceable load 4 from %ir.failed); is.c:538:17
    To: Bcc 1, %bb.38, implicit $nzcv, debug-location !557; is.c:538:17
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 0, debug-location !554 :: (dereferenceable load 4 from %ir.failed); is.c:538:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 1, 0, implicit-def $nzcv, debug-location !557; is.c:538:17
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 1, %bb.38, implicit $nzcv, debug-location !557; is.c:538:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 0, debug-location !554 :: (dereferenceable load 4 from %ir.failed); is.c:538:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 1, 0, implicit-def $nzcv, debug-location !557; is.c:538:17
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.36 ***
SU(0):   renamable $w8 = LDRWui $sp, 0, debug-location !554 :: (dereferenceable load 4 from %ir.failed); is.c:538:17
SU(1):   dead $wzr = SUBSWri renamable $w8, 1, 0, implicit-def $nzcv, debug-location !557; is.c:538:17

Fixup kills for %bb.36
********** MI Scheduling **********
rank:%bb.37 if.then120
  From: renamable $w2, renamable $w1 = LDPWi $sp, 10, debug-location !558 :: (dereferenceable load 4 from %ir.iteration.addr), (dereferenceable load 4 from %ir.i); is.c:541:24
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit-def $sp, implicit-def dead $w0, debug-location !560; is.c:539:17
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w2, renamable $w1 = LDPWi $sp, 10, debug-location !558 :: (dereferenceable load 4 from %ir.iteration.addr), (dereferenceable load 4 from %ir.i); is.c:541:24
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(1):   $x0 = ORRXrs $xzr, $x19, 0, debug-location !560; is.c:539:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit-def $sp, implicit-def dead $w0, debug-location !560; is.c:539:17
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w2, renamable $w1 = LDPWi $sp, 10, debug-location !558 :: (dereferenceable load 4 from %ir.iteration.addr), (dereferenceable load 4 from %ir.i); is.c:541:24
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ORRXrs $xzr, $x19, 0, debug-location !560; is.c:539:17
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.37 ***
SU(0):   renamable $w2, renamable $w1 = LDPWi $sp, 10, debug-location !558 :: (dereferenceable load 4 from %ir.iteration.addr), (dereferenceable load 4 from %ir.i); is.c:541:24
SU(1):   $x0 = ORRXrs $xzr, $x19, 0, debug-location !560; is.c:539:17

Fixup kills for %bb.37
********** MI Scheduling **********
rank:%bb.38 for.inc123
  From: renamable $w8 = LDRWui $sp, 10, debug-location !561 :: (dereferenceable load 4 from %ir.i); is.c:446:39
    To: B %bb.25
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 10, debug-location !561 :: (dereferenceable load 4 from %ir.i); is.c:446:39
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !561; is.c:446:39
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STRWui renamable $w8, $sp, 10, debug-location !561 :: (store 4 into %ir.i); is.c:446:39
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.25
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 10, debug-location !561 :: (dereferenceable load 4 from %ir.i); is.c:446:39
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !561; is.c:446:39
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w8, $sp, 10, debug-location !561 :: (store 4 into %ir.i); is.c:446:39
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   renamable $w8 = LDRWui $sp, 10, debug-location !561 :: (dereferenceable load 4 from %ir.i); is.c:446:39
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !561; is.c:446:39
SU(2):   STRWui renamable $w8, $sp, 10, debug-location !561 :: (store 4 into %ir.i); is.c:446:39

Fixup kills for %bb.38
********** MI Scheduling **********
rank:%bb.39 for.end125
  From: renamable $w8 = LDRWui $sp, 11, debug-location !565 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:549:9
    To: Bcc 1, %bb.41, implicit $nzcv, debug-location !568; is.c:549:9
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 11, debug-location !565 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:549:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 10, 0, implicit-def $nzcv, debug-location !568; is.c:549:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 1, %bb.41, implicit $nzcv, debug-location !568; is.c:549:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 11, debug-location !565 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:549:9
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 10, 0, implicit-def $nzcv, debug-location !568; is.c:549:9
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.39 ***
SU(0):   renamable $w8 = LDRWui $sp, 11, debug-location !565 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:549:9
SU(1):   dead $wzr = SUBSWri renamable $w8, 10, 0, implicit-def $nzcv, debug-location !568; is.c:549:9

Fixup kills for %bb.39
********** MI Scheduling **********
rank:%bb.40 if.then127
  From: renamable $x8 = LDRXui $sp, 3, debug-location !569 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:550:31
    To: End RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRXui $sp, 3, debug-location !569 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:550:31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(2): Data Latency=4 Reg=$x8
SU(1):   renamable $x9 = ADRP target-flags(aarch64-page) @key_buff_ptr_global, debug-location !570; is.c:550:29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=$x9
SU(2):   STRXui renamable $x8, renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @key_buff_ptr_global, debug-location !570 :: (store 8 into @key_buff_ptr_global); is.c:550:29
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$x9
    SU(0): Data Latency=4 Reg=$x8
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDRXui $sp, 3, debug-location !569 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:550:31
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x9 = ADRP target-flags(aarch64-page) @key_buff_ptr_global, debug-location !570; is.c:550:29
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRXui renamable $x8, renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @key_buff_ptr_global, debug-location !570 :: (store 8 into @key_buff_ptr_global); is.c:550:29
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.40 ***
SU(0):   renamable $x8 = LDRXui $sp, 3, debug-location !569 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:550:31
SU(1):   renamable $x9 = ADRP target-flags(aarch64-page) @key_buff_ptr_global, debug-location !570; is.c:550:29
SU(2):   STRXui renamable $x8, renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @key_buff_ptr_global, debug-location !570 :: (store 8 into @key_buff_ptr_global); is.c:550:29

Fixup kills for %bb.40
********** MI Scheduling **********
rank:%bb.41 if.end128
  From: $fp, $lr = frame-destroy LDPXi $sp, 12, debug-location !572 :: (load 8 from %stack.10), (load 8 from %stack.9); is.c:551:1
    To: $sp = frame-destroy ADDXri $sp, 112, 0, debug-location !572; is.c:551:1
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   $fp, $lr = frame-destroy LDPXi $sp, 12, debug-location !572 :: (load 8 from %stack.10), (load 8 from %stack.9); is.c:551:1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(1):   $x20, $x19 = frame-destroy LDPXi $sp, 10, debug-location !572 :: (load 8 from %stack.12), (load 8 from %stack.11); is.c:551:1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(2):   $x22, $x21 = frame-destroy LDPXi $sp, 8, debug-location !572 :: (load 8 from %stack.14), (load 8 from %stack.13); is.c:551:1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(3):   $x24, $x23 = frame-destroy LDPXi $sp, 6, debug-location !572 :: (load 8 from %stack.16), (load 8 from %stack.15); is.c:551:1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
ExitSU:   $sp = frame-destroy ADDXri $sp, 112, 0, debug-location !572; is.c:551:1
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path: (PGS-RR) 3
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 3
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $fp, $lr = frame-destroy LDPXi $sp, 12, debug-location !572 :: (load 8 from %stack.10), (load 8 from %stack.9); is.c:551:1
  Ready @0c
  TopQ.A BotLatency SU(0) 3c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 3
  Cand SU(3) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) $x20, $x19 = frame-destroy LDPXi $sp, 10, debug-location !572 :: (load 8 from %stack.12), (load 8 from %stack.11); is.c:551:1
  Ready @1c
  TopQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 3
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) $x22, $x21 = frame-destroy LDPXi $sp, 8, debug-location !572 :: (load 8 from %stack.14), (load 8 from %stack.13); is.c:551:1
  Ready @2c
  TopQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $x24, $x23 = frame-destroy LDPXi $sp, 6, debug-location !572 :: (load 8 from %stack.16), (load 8 from %stack.15); is.c:551:1
  Ready @3c
  TopQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.41 ***
SU(0):   $fp, $lr = frame-destroy LDPXi $sp, 12, debug-location !572 :: (load 8 from %stack.10), (load 8 from %stack.9); is.c:551:1
SU(1):   $x20, $x19 = frame-destroy LDPXi $sp, 10, debug-location !572 :: (load 8 from %stack.12), (load 8 from %stack.11); is.c:551:1
SU(2):   $x22, $x21 = frame-destroy LDPXi $sp, 8, debug-location !572 :: (load 8 from %stack.14), (load 8 from %stack.13); is.c:551:1
SU(3):   $x24, $x23 = frame-destroy LDPXi $sp, 6, debug-location !572 :: (load 8 from %stack.16), (load 8 from %stack.15); is.c:551:1

Fixup kills for %bb.41
Before MISched:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
  fi#6: size=8, align=8, at location [SP]
  fi#7: size=8, align=8, at location [SP]
  fi#8: size=8, align=8, at location [SP]
  fi#9: size=8, align=8, at location [SP]
Constant Pool:
  cp#0: 0x41B2B9B0A1000000, align=8
  cp#1: 0x41D2309CE5400000, align=8
Function Live Ins: $w0 in %0, $x1 in %1

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $w0, $x1
  %1:gpr64 = COPY $x1
  %0:gpr32 = COPY $w0
  STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
  STRWui %0:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
  STRXui %1:gpr64, %stack.2.argv.addr, 0 :: (store 8 into %ir.argv.addr)
  STRWui $wzr, %stack.5.timer_on, 0, debug-location !597 :: (store 4 into %ir.timer_on); is.c:572:14
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !598; is.c:573:15
  %3:gpr64 = MOVaddr target-flags(aarch64-page) @.str.2, target-flags(aarch64-pageoff, aarch64-nc) @.str.2, debug-location !598; is.c:573:15
  %4:gpr64 = MOVaddr target-flags(aarch64-page) @.str.3, target-flags(aarch64-pageoff, aarch64-nc) @.str.3, debug-location !598; is.c:573:15
  $x0 = COPY %3:gpr64, debug-location !598; is.c:573:15
  $x1 = COPY %4:gpr64, debug-location !598; is.c:573:15
  BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0, debug-location !598; is.c:573:15
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !598; is.c:573:15
  %5:gpr64 = COPY $x0, debug-location !598; is.c:573:15
  STRXui %5:gpr64, %stack.7.fp, 0, debug-location !600 :: (store 8 into %ir.fp); is.c:573:13
  CBZX %5:gpr64, %bb.2, debug-location !602; is.c:573:9
  B %bb.1, debug-location !602; is.c:573:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %6:gpr64 = LDRXui %stack.7.fp, 0, debug-location !603 :: (dereferenceable load 8 from %ir.fp); is.c:574:16
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !605; is.c:574:9
  $x0 = COPY %6:gpr64, debug-location !605; is.c:574:9
  BL @fclose, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !605; is.c:574:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !605; is.c:574:9
  %8:gpr32 = MOVi32imm 1
  STRWui %8:gpr32, %stack.5.timer_on, 0, debug-location !606 :: (store 4 into %ir.timer_on); is.c:575:18

bb.2.if.end:
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x50000000), %bb.4(0x30000000); %bb.3(62.50%), %bb.4(37.50%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !608; is.c:577:5
  $w0 = COPY $wzr, debug-location !608; is.c:577:5
  BL @timer_clear, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !608; is.c:577:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !608; is.c:577:5
  %10:gpr32 = LDRWui %stack.5.timer_on, 0, debug-location !609 :: (dereferenceable load 4 from %ir.timer_on); is.c:578:9
  CBZW %10:gpr32, %bb.4, debug-location !611; is.c:578:9
  B %bb.3, debug-location !611; is.c:578:9

bb.3.if.then2:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !612; is.c:579:9
  $w0 = MOVi32imm 1, debug-location !612; is.c:579:9
  BL @timer_clear, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !612; is.c:579:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !612; is.c:579:9
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !614; is.c:580:9
  $w0 = MOVi32imm 2, debug-location !614; is.c:580:9
  BL @timer_clear, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !614; is.c:580:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !614; is.c:580:9
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !615; is.c:581:9
  $w0 = MOVi32imm 3, debug-location !615; is.c:581:9
  BL @timer_clear, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !615; is.c:581:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !615; is.c:581:9

bb.4.if.end3:
; predecessors: %bb.2, %bb.3
  successors: %bb.5(0x50000000), %bb.6(0x30000000); %bb.5(62.50%), %bb.6(37.50%)

  %14:gpr32 = LDRWui %stack.5.timer_on, 0, debug-location !617 :: (dereferenceable load 4 from %ir.timer_on); is.c:584:9
  CBZW %14:gpr32, %bb.6, debug-location !619; is.c:584:9
  B %bb.5, debug-location !619; is.c:584:9

bb.5.if.then5:
; predecessors: %bb.4
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !620; is.c:585:9
  $w0 = MOVi32imm 3, debug-location !620; is.c:585:9
  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !620; is.c:585:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !620; is.c:585:9

bb.6.if.end6:
; predecessors: %bb.4, %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  STRWui $wzr, %stack.3.i, 0, debug-location !621 :: (store 4 into %ir.i); is.c:588:12
  %124:gpr64common = MOVaddr target-flags(aarch64-page) @B_test_index_array, target-flags(aarch64-pageoff, aarch64-nc) @B_test_index_array
  %127:gpr64common = MOVaddr target-flags(aarch64-page) @test_index_array, target-flags(aarch64-pageoff, aarch64-nc) @test_index_array
  %128:gpr64common = MOVaddr target-flags(aarch64-page) @B_test_rank_array, target-flags(aarch64-pageoff, aarch64-nc) @B_test_rank_array
  %130:gpr64common = MOVaddr target-flags(aarch64-page) @test_rank_array, target-flags(aarch64-pageoff, aarch64-nc) @test_rank_array

bb.7.for.cond:
; predecessors: %bb.6, %bb.8
  successors: %bb.8(0x7c000000), %bb.9(0x04000000); %bb.8(96.88%), %bb.9(3.12%)

  %17:gpr32common = LDRWui %stack.3.i, 0, debug-location !624 :: (dereferenceable load 4 from %ir.i); is.c:588:17
  dead $wzr = SUBSWri %17:gpr32common, 4, 0, implicit-def $nzcv, debug-location !627; is.c:588:5
  Bcc 12, %bb.9, implicit killed $nzcv, debug-location !627; is.c:588:5
  B %bb.8, debug-location !627; is.c:588:5

bb.8.for.body:
; predecessors: %bb.7
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %122:gpr64common = LDRSWui %stack.3.i, 0, debug-location !628 :: (dereferenceable load 4 from %ir.i); is.c:603:54
  %125:gpr64 = UBFMXri %122:gpr64common, 62, 61, debug-location !634; is.c:604:34
  %126:gpr32 = LDRWroX %124:gpr64common, %125:gpr64, 0, 0, debug-location !629 :: (load 4 from %ir.arrayidx); is.c:603:35
  STRWroX %126:gpr32, %127:gpr64common, %125:gpr64, 0, 0, debug-location !632 :: (store 4 into %ir.arrayidx9); is.c:603:33
  %129:gpr32 = LDRWroX %128:gpr64common, %125:gpr64, 0, 0, debug-location !634 :: (load 4 from %ir.arrayidx11); is.c:604:34
  STRWroX %129:gpr32, %130:gpr64common, %125:gpr64, 0, 0, debug-location !637 :: (store 4 into %ir.arrayidx13); is.c:604:32
  %131:gpr32common = nsw ADDWri %122.sub_32:gpr64common, 1, 0, debug-location !638; is.c:588:39
  STRWui %131:gpr32common, %stack.3.i, 0, debug-location !638 :: (store 4 into %ir.i); is.c:588:39
  B %bb.7, debug-location !639; is.c:588:5

bb.9.for.end:
; predecessors: %bb.7
  successors: %bb.10(0x50000000), %bb.11(0x30000000); %bb.10(62.50%), %bb.11(37.50%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !642; is.c:617:5
  %19:gpr64 = MOVaddr target-flags(aarch64-page) @.str.4, target-flags(aarch64-pageoff, aarch64-nc) @.str.4, debug-location !642; is.c:617:5
  $x0 = COPY %19:gpr64, debug-location !642; is.c:617:5
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !642; is.c:617:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !642; is.c:617:5
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !643; is.c:618:5
  %21:gpr64 = MOVaddr target-flags(aarch64-page) @.str.5, target-flags(aarch64-pageoff, aarch64-nc) @.str.5, debug-location !643; is.c:618:5
  $x0 = COPY %21:gpr64, debug-location !643; is.c:618:5
  dead $w1 = MOVi32imm 33554432, implicit-def $x1, debug-location !643; is.c:618:5
  $w2 = MOVi32imm 66, debug-location !643; is.c:618:5
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $w2, implicit-def $sp, implicit-def dead $w0, debug-location !643; is.c:618:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !643; is.c:618:5
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !644; is.c:619:5
  %26:gpr64 = MOVaddr target-flags(aarch64-page) @.str.6, target-flags(aarch64-pageoff, aarch64-nc) @.str.6, debug-location !644; is.c:619:5
  $x0 = COPY %26:gpr64, debug-location !644; is.c:619:5
  $w1 = MOVi32imm 10, debug-location !644; is.c:619:5
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !644; is.c:619:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !644; is.c:619:5
  %29:gpr32 = LDRWui %stack.5.timer_on, 0, debug-location !645 :: (dereferenceable load 4 from %ir.timer_on); is.c:621:9
  CBZW %29:gpr32, %bb.11, debug-location !647; is.c:621:9
  B %bb.10, debug-location !647; is.c:621:9

bb.10.if.then18:
; predecessors: %bb.9
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !648; is.c:622:9
  $w0 = MOVi32imm 1, debug-location !648; is.c:622:9
  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !648; is.c:622:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !648; is.c:622:9

bb.11.if.end19:
; predecessors: %bb.9, %bb.10
  successors: %bb.12(0x50000000), %bb.13(0x30000000); %bb.12(62.50%), %bb.13(37.50%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !649; is.c:625:5
  %31:gpr64common = ADRP target-flags(aarch64-page) %const.0
  %32:fpr64 = LDRDui %31:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  %33:gpr64common = ADRP target-flags(aarch64-page) %const.1
  %34:fpr64 = LDRDui %33:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  $d0 = COPY %32:fpr64, debug-location !649; is.c:625:5
  $d1 = COPY %34:fpr64, debug-location !649; is.c:625:5
  BL @create_seq, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $d0, implicit killed $d1, implicit-def $sp, debug-location !649; is.c:625:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !649; is.c:625:5
  %35:gpr32 = LDRWui %stack.5.timer_on, 0, debug-location !650 :: (dereferenceable load 4 from %ir.timer_on); is.c:627:9
  CBZW %35:gpr32, %bb.13, debug-location !652; is.c:627:9
  B %bb.12, debug-location !652; is.c:627:9

bb.12.if.then21:
; predecessors: %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !653; is.c:628:9
  $w0 = MOVi32imm 1, debug-location !653; is.c:628:9
  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !653; is.c:628:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !653; is.c:628:9

bb.13.if.end22:
; predecessors: %bb.11, %bb.12
  successors: %bb.14(0x80000000); %bb.14(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !654; is.c:632:5
  %37:gpr32 = MOVi32imm 1
  $w0 = MOVi32imm 1, debug-location !654; is.c:632:5
  BL @rank, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !654; is.c:632:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !654; is.c:632:5
  %38:gpr64common = ADRP target-flags(aarch64-page) @passed_verification, debug-location !655; is.c:635:25
  STRWui $wzr, %38:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !655 :: (store 4 into @passed_verification); is.c:635:25
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !656; is.c:638:9
  %40:gpr64 = MOVaddr target-flags(aarch64-page) @.str.7, target-flags(aarch64-pageoff, aarch64-nc) @.str.7, debug-location !656; is.c:638:9
  $x0 = COPY %40:gpr64, debug-location !656; is.c:638:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !656; is.c:638:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !656; is.c:638:9
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !658; is.c:641:5
  $w0 = COPY $wzr, debug-location !658; is.c:641:5
  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !658; is.c:641:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !658; is.c:641:5
  STRWui %37:gpr32, %stack.4.iteration, 0, debug-location !659 :: (store 4 into %ir.iteration); is.c:646:20
  %117:gpr64 = MOVaddr target-flags(aarch64-page) @.str.8, target-flags(aarch64-pageoff, aarch64-nc) @.str.8

bb.14.for.cond28:
; predecessors: %bb.13, %bb.15
  successors: %bb.15(0x7c000000), %bb.16(0x04000000); %bb.15(96.88%), %bb.16(3.12%)

  %42:gpr32common = LDRWui %stack.4.iteration, 0, debug-location !662 :: (dereferenceable load 4 from %ir.iteration); is.c:646:25
  dead $wzr = SUBSWri %42:gpr32common, 10, 0, implicit-def $nzcv, debug-location !665; is.c:646:5
  Bcc 12, %bb.16, implicit killed $nzcv, debug-location !665; is.c:646:5
  B %bb.15, debug-location !665; is.c:646:5

bb.15.for.body30:
; predecessors: %bb.14
  successors: %bb.14(0x80000000); %bb.14(100.00%)

  %116:gpr32 = LDRWui %stack.4.iteration, 0, debug-location !666 :: (dereferenceable load 4 from %ir.iteration); is.c:648:36
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !669; is.c:648:13
  $x0 = COPY %117:gpr64, debug-location !669; is.c:648:13
  $w1 = COPY %116:gpr32, debug-location !669; is.c:648:13
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !669; is.c:648:13
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !669; is.c:648:13
  %119:gpr32 = LDRWui %stack.4.iteration, 0, debug-location !670 :: (dereferenceable load 4 from %ir.iteration); is.c:650:14
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !671; is.c:650:9
  $w0 = COPY %119:gpr32, debug-location !671; is.c:650:9
  BL @rank, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !671; is.c:650:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !671; is.c:650:9
  %120:gpr32common = LDRWui %stack.4.iteration, 0, debug-location !672 :: (dereferenceable load 4 from %ir.iteration); is.c:646:63
  %121:gpr32common = nsw ADDWri %120:gpr32common, 1, 0, debug-location !672; is.c:646:63
  STRWui %121:gpr32common, %stack.4.iteration, 0, debug-location !672 :: (store 4 into %ir.iteration); is.c:646:63
  B %bb.14, debug-location !673; is.c:646:5

bb.16.do.end38:
; predecessors: %bb.14
  successors: %bb.17(0x50000000), %bb.18(0x30000000); %bb.17(62.50%), %bb.18(37.50%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !676; is.c:657:5
  $w0 = COPY $wzr, debug-location !676; is.c:657:5
  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !676; is.c:657:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !676; is.c:657:5
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !677; is.c:658:19
  $w0 = COPY $wzr, debug-location !677; is.c:658:19
  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !677; is.c:658:19
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !677; is.c:658:19
  %45:fpr64 = COPY killed $d0, debug-location !677; is.c:658:19
  STRDui %45:fpr64, %stack.6.timecounter, 0, debug-location !678 :: (store 8 into %ir.timecounter); is.c:658:17
  %46:gpr32 = LDRWui %stack.5.timer_on, 0, debug-location !679 :: (dereferenceable load 4 from %ir.timer_on); is.c:662:9
  CBZW %46:gpr32, %bb.18, debug-location !681; is.c:662:9
  B %bb.17, debug-location !681; is.c:662:9

bb.17.if.then41:
; predecessors: %bb.16
  successors: %bb.18(0x80000000); %bb.18(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !682; is.c:663:9
  $w0 = MOVi32imm 2, debug-location !682; is.c:663:9
  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !682; is.c:663:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !682; is.c:663:9

bb.18.if.end42:
; predecessors: %bb.16, %bb.17
  successors: %bb.19(0x50000000), %bb.20(0x30000000); %bb.19(62.50%), %bb.20(37.50%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !683; is.c:664:5
  BL @full_verify, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp, debug-location !683; is.c:664:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !683; is.c:664:5
  %48:gpr32 = LDRWui %stack.5.timer_on, 0, debug-location !684 :: (dereferenceable load 4 from %ir.timer_on); is.c:665:9
  CBZW %48:gpr32, %bb.20, debug-location !686; is.c:665:9
  B %bb.19, debug-location !686; is.c:665:9

bb.19.if.then44:
; predecessors: %bb.18
  successors: %bb.20(0x80000000); %bb.20(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !687; is.c:666:9
  $w0 = MOVi32imm 2, debug-location !687; is.c:666:9
  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !687; is.c:666:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !687; is.c:666:9

bb.20.if.end45:
; predecessors: %bb.18, %bb.19
  successors: %bb.21(0x50000000), %bb.22(0x30000000); %bb.21(62.50%), %bb.22(37.50%)

  %50:gpr32 = LDRWui %stack.5.timer_on, 0, debug-location !688 :: (dereferenceable load 4 from %ir.timer_on); is.c:668:9
  CBZW %50:gpr32, %bb.22, debug-location !690; is.c:668:9
  B %bb.21, debug-location !690; is.c:668:9

bb.21.if.then47:
; predecessors: %bb.20
  successors: %bb.22(0x80000000); %bb.22(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !691; is.c:669:9
  $w0 = MOVi32imm 3, debug-location !691; is.c:669:9
  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !691; is.c:669:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !691; is.c:669:9

bb.22.if.end48:
; predecessors: %bb.20, %bb.21
  successors: %bb.23(0x40000000), %bb.24(0x40000000); %bb.23(50.00%), %bb.24(50.00%)

  %53:gpr32common = LDRWui %38:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !692 :: (dereferenceable load 4 from @passed_verification); is.c:672:9
  dead $wzr = SUBSWri %53:gpr32common, 51, 0, implicit-def $nzcv, debug-location !695; is.c:672:9
  Bcc 0, %bb.24, implicit killed $nzcv, debug-location !695; is.c:672:9
  B %bb.23, debug-location !695; is.c:672:9

bb.23.if.then50:
; predecessors: %bb.22
  successors: %bb.24(0x80000000); %bb.24(100.00%)

  STRWui $wzr, %38:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !696 :: (store 4 into @passed_verification); is.c:673:29

bb.24.if.end51:
; predecessors: %bb.22, %bb.23
  successors: %bb.25(0x50000000), %bb.28(0x30000000); %bb.25(62.50%), %bb.28(37.50%)

  %57:fpr64 = LDRDui %stack.6.timecounter, 0, debug-location !698 :: (dereferenceable load 8 from %ir.timecounter); is.c:675:69
  %58:gpr64 = MOVi64imm 4734409108273233920
  %59:fpr64 = COPY %58:gpr64
  %60:fpr64 = FDIVDrr %59:fpr64, %57:fpr64, debug-location !700; is.c:676:49
  %61:gpr64 = MOVi64imm 4696837146684686336
  %62:fpr64 = COPY %61:gpr64
  %63:fpr64 = FDIVDrr %60:fpr64, %62:fpr64, debug-location !701; is.c:676:63
  %65:gpr32 = LDRWui %38:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !702 :: (dereferenceable load 4 from @passed_verification); is.c:677:24
  ADJCALLSTACKDOWN 64, 0, implicit-def dead $sp, implicit $sp, debug-location !703; is.c:674:5
  %66:gpr64 = MOVaddr target-flags(aarch64-page) @.str.18, target-flags(aarch64-pageoff, aarch64-nc) @.str.18, debug-location !703; is.c:674:5
  STRXui %66:gpr64, $sp, 7, debug-location !703 :: (store 8 into stack + 56); is.c:674:5
  %68:gpr64 = MOVaddr target-flags(aarch64-page) @.str.17, target-flags(aarch64-pageoff, aarch64-nc) @.str.17, debug-location !703; is.c:674:5
  STRXui %68:gpr64, $sp, 6, debug-location !703 :: (store 8 into stack + 48); is.c:674:5
  %69:gpr64 = MOVaddr target-flags(aarch64-page) @.str.16, target-flags(aarch64-pageoff, aarch64-nc) @.str.16, debug-location !703; is.c:674:5
  STRXui %69:gpr64, $sp, 5, debug-location !703 :: (store 8 into stack + 40); is.c:674:5
  %70:gpr64 = MOVaddr target-flags(aarch64-page) @.str.15, target-flags(aarch64-pageoff, aarch64-nc) @.str.15, debug-location !703; is.c:674:5
  STRXui %70:gpr64, $sp, 4, debug-location !703 :: (store 8 into stack + 32); is.c:674:5
  %71:gpr64 = MOVaddr target-flags(aarch64-page) @.str.14, target-flags(aarch64-pageoff, aarch64-nc) @.str.14, debug-location !703; is.c:674:5
  STRXui %71:gpr64, $sp, 3, debug-location !703 :: (store 8 into stack + 24); is.c:674:5
  %72:gpr64 = MOVaddr target-flags(aarch64-page) @.str.13, target-flags(aarch64-pageoff, aarch64-nc) @.str.13, debug-location !703; is.c:674:5
  STRXui %72:gpr64, $sp, 2, debug-location !703 :: (store 8 into stack + 16); is.c:674:5
  %73:gpr64 = MOVaddr target-flags(aarch64-page) @.str.12, target-flags(aarch64-pageoff, aarch64-nc) @.str.12, debug-location !703; is.c:674:5
  STRXui %73:gpr64, $sp, 1, debug-location !703 :: (store 8 into stack + 8); is.c:674:5
  %74:gpr64 = MOVaddr target-flags(aarch64-page) @.str.11, target-flags(aarch64-pageoff, aarch64-nc) @.str.11, debug-location !703; is.c:674:5
  STRXui %74:gpr64, $sp, 0, debug-location !703 :: (store 8 into stack); is.c:674:5
  %75:gpr64 = MOVaddr target-flags(aarch64-page) @.str.9, target-flags(aarch64-pageoff, aarch64-nc) @.str.9, debug-location !703; is.c:674:5
  %76:gpr64 = MOVaddr target-flags(aarch64-page) @.str.10, target-flags(aarch64-pageoff, aarch64-nc) @.str.10, debug-location !703; is.c:674:5
  $x0 = COPY %75:gpr64, debug-location !703; is.c:674:5
  $w1 = MOVi32imm 66, debug-location !703; is.c:674:5
  $w2 = MOVi32imm 524288, debug-location !703; is.c:674:5
  $w3 = MOVi32imm 64, debug-location !703; is.c:674:5
  $w4 = COPY $wzr, debug-location !703; is.c:674:5
  $w5 = MOVi32imm 10, debug-location !703; is.c:674:5
  $d0 = COPY %57:fpr64, debug-location !703; is.c:674:5
  $d1 = COPY %63:fpr64, debug-location !703; is.c:674:5
  $x6 = COPY %76:gpr64, debug-location !703; is.c:674:5
  $w7 = COPY %65:gpr32, debug-location !703; is.c:674:5
  BL @c_print_results, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit killed $w4, implicit killed $w5, implicit killed $d0, implicit killed $d1, implicit killed $x6, implicit killed $w7, implicit-def $sp, debug-location !703; is.c:674:5
  ADJCALLSTACKUP 64, 0, implicit-def dead $sp, implicit $sp, debug-location !703; is.c:674:5
  %82:gpr32 = LDRWui %stack.5.timer_on, 0, debug-location !704 :: (dereferenceable load 4 from %ir.timer_on); is.c:681:9
  CBZW %82:gpr32, %bb.28, debug-location !706; is.c:681:9
  B %bb.25, debug-location !706; is.c:681:9

bb.25.if.then54:
; predecessors: %bb.24
  successors: %bb.26(0x50000000), %bb.27(0x30000000); %bb.26(62.50%), %bb.27(37.50%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !712; is.c:684:19
  $w0 = MOVi32imm 3, debug-location !712; is.c:684:19
  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !712; is.c:684:19
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !712; is.c:684:19
  %84:fpr64 = COPY killed $d0, debug-location !712; is.c:684:19
  STRDui %84:fpr64, %stack.8.t_total, 0, debug-location !713 :: (store 8 into %ir.t_total); is.c:684:17
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !714; is.c:685:9
  %85:gpr64 = MOVaddr target-flags(aarch64-page) @.str.19, target-flags(aarch64-pageoff, aarch64-nc) @.str.19, debug-location !714; is.c:685:9
  $x0 = COPY %85:gpr64, debug-location !714; is.c:685:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !714; is.c:685:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !714; is.c:685:9
  %87:fpr64 = LDRDui %stack.8.t_total, 0, debug-location !715 :: (dereferenceable load 8 from %ir.t_total); is.c:686:45
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !716; is.c:686:9
  %88:gpr64 = MOVaddr target-flags(aarch64-page) @.str.20, target-flags(aarch64-pageoff, aarch64-nc) @.str.20, debug-location !716; is.c:686:9
  $x0 = COPY %88:gpr64, debug-location !716; is.c:686:9
  $d0 = COPY %87:fpr64, debug-location !716; is.c:686:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $d0, implicit-def $sp, implicit-def dead $w0, debug-location !716; is.c:686:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !716; is.c:686:9
  %90:fpr64 = LDRDui %stack.8.t_total, 0, debug-location !717 :: (dereferenceable load 8 from %ir.t_total); is.c:687:13
  FCMPDri %90:fpr64, implicit-def $nzcv, debug-location !720; is.c:687:13
  Bcc 1, %bb.27, implicit killed $nzcv, debug-location !720; is.c:687:13
  B %bb.26, debug-location !720; is.c:687:13

bb.26.if.then59:
; predecessors: %bb.25
  successors: %bb.27(0x80000000); %bb.27(100.00%)

  %91:gpr64 = MOVi64imm 4607182418800017408
  STRXui %91:gpr64, %stack.8.t_total, 0, debug-location !721 :: (store 8 into %ir.t_total); is.c:688:21

bb.27.if.end60:
; predecessors: %bb.25, %bb.26
  successors: %bb.28(0x80000000); %bb.28(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !723; is.c:689:23
  $w0 = MOVi32imm 1, debug-location !723; is.c:689:23
  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !723; is.c:689:23
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !723; is.c:689:23
  %93:fpr64 = COPY killed $d0, debug-location !723; is.c:689:23
  STRDui %93:fpr64, %stack.6.timecounter, 0, debug-location !724 :: (store 8 into %ir.timecounter); is.c:689:21
  %94:fpr64 = LDRDui %stack.8.t_total, 0, debug-location !726 :: (dereferenceable load 8 from %ir.t_total); is.c:690:35
  %95:fpr64 = FDIVDrr %93:fpr64, %94:fpr64, debug-location !727; is.c:690:33
  %96:gpr64 = MOVi64imm 4636737291354636288
  %97:fpr64 = COPY %96:gpr64
  %98:fpr64 = FMULDrr %95:fpr64, %97:fpr64, debug-location !728; is.c:690:43
  STRDui %98:fpr64, %stack.9.t_percent, 0, debug-location !729 :: (store 8 into %ir.t_percent); is.c:690:19
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !732; is.c:691:9
  %99:gpr64 = MOVaddr target-flags(aarch64-page) @.str.21, target-flags(aarch64-pageoff, aarch64-nc) @.str.21, debug-location !732; is.c:691:9
  $x0 = COPY %99:gpr64, debug-location !732; is.c:691:9
  $d0 = COPY %93:fpr64, debug-location !732; is.c:691:9
  $d1 = COPY %98:fpr64, debug-location !732; is.c:691:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0, debug-location !732; is.c:691:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !732; is.c:691:9
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !733; is.c:692:23
  $w0 = COPY $wzr, debug-location !733; is.c:692:23
  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !733; is.c:692:23
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !733; is.c:692:23
  %102:fpr64 = COPY killed $d0, debug-location !733; is.c:692:23
  STRDui %102:fpr64, %stack.6.timecounter, 0, debug-location !734 :: (store 8 into %ir.timecounter); is.c:692:21
  %103:fpr64 = LDRDui %stack.8.t_total, 0, debug-location !736 :: (dereferenceable load 8 from %ir.t_total); is.c:693:35
  %104:fpr64 = FDIVDrr %102:fpr64, %103:fpr64, debug-location !737; is.c:693:33
  %105:fpr64 = FMULDrr %104:fpr64, %97:fpr64, debug-location !738; is.c:693:43
  STRDui %105:fpr64, %stack.9.t_percent, 0, debug-location !739 :: (store 8 into %ir.t_percent); is.c:693:19
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !742; is.c:694:9
  %106:gpr64 = MOVaddr target-flags(aarch64-page) @.str.22, target-flags(aarch64-pageoff, aarch64-nc) @.str.22, debug-location !742; is.c:694:9
  $x0 = COPY %106:gpr64, debug-location !742; is.c:694:9
  $d0 = COPY %102:fpr64, debug-location !742; is.c:694:9
  $d1 = COPY %105:fpr64, debug-location !742; is.c:694:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0, debug-location !742; is.c:694:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !742; is.c:694:9
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !743; is.c:695:23
  $w0 = MOVi32imm 2, debug-location !743; is.c:695:23
  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !743; is.c:695:23
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !743; is.c:695:23
  %109:fpr64 = COPY killed $d0, debug-location !743; is.c:695:23
  STRDui %109:fpr64, %stack.6.timecounter, 0, debug-location !744 :: (store 8 into %ir.timecounter); is.c:695:21
  %110:fpr64 = LDRDui %stack.8.t_total, 0, debug-location !746 :: (dereferenceable load 8 from %ir.t_total); is.c:696:35
  %111:fpr64 = FDIVDrr %109:fpr64, %110:fpr64, debug-location !747; is.c:696:33
  %112:fpr64 = FMULDrr %111:fpr64, %97:fpr64, debug-location !748; is.c:696:43
  STRDui %112:fpr64, %stack.9.t_percent, 0, debug-location !749 :: (store 8 into %ir.t_percent); is.c:696:19
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !752; is.c:697:9
  %113:gpr64 = MOVaddr target-flags(aarch64-page) @.str.23, target-flags(aarch64-pageoff, aarch64-nc) @.str.23, debug-location !752; is.c:697:9
  $x0 = COPY %113:gpr64, debug-location !752; is.c:697:9
  $d0 = COPY %109:fpr64, debug-location !752; is.c:697:9
  $d1 = COPY %112:fpr64, debug-location !752; is.c:697:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0, debug-location !752; is.c:697:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !752; is.c:697:9

bb.28.do.end76:
; predecessors: %bb.24, %bb.27

  $w0 = COPY $wzr, debug-location !754; is.c:703:5
  RET_ReallyLR implicit $w0, debug-location !754; is.c:703:5

# End machine code for function main.

********** MI Scheduling **********
main:%bb.0 entry
  From: %5:gpr64 = COPY $x0, debug-location !598; is.c:573:15
    To: CBZX %5:gpr64, %bb.2, debug-location !602; is.c:573:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %5:gpr64 = COPY $x0, debug-location !598; is.c:573:15
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Data Latency=0 Reg=%5
    SU(1): Data Latency=0 Reg=%5
  Single Issue       : false;
SU(1):   STRXui %5:gpr64, %stack.7.fp, 0, debug-location !600 :: (store 8 into %ir.fp); is.c:573:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%5
  Single Issue       : false;
ExitSU:   CBZX %5:gpr64, %bb.2, debug-location !602; is.c:573:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%5
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRXui %5:gpr64, %stack.7.fp, 0, debug-location !600 :: (store 8 into %ir.fp); is.c:573:13
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %5:gpr64 = COPY $x0, debug-location !598; is.c:573:15
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %5:gpr64 = COPY $x0, debug-location !598; is.c:573:15
SU(1):   STRXui %5:gpr64, %stack.7.fp, 0, debug-location !600 :: (store 8 into %ir.fp); is.c:573:13

********** MI Scheduling **********
main:%bb.0 entry
  From: %3:gpr64 = MOVaddr target-flags(aarch64-page) @.str.2, target-flags(aarch64-pageoff, aarch64-nc) @.str.2, debug-location !598; is.c:573:15
    To: BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0, debug-location !598; is.c:573:15
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %3:gpr64 = MOVaddr target-flags(aarch64-page) @.str.2, target-flags(aarch64-pageoff, aarch64-nc) @.str.2, debug-location !598; is.c:573:15
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%3
  Single Issue       : false;
SU(1):   %4:gpr64 = MOVaddr target-flags(aarch64-page) @.str.3, target-flags(aarch64-pageoff, aarch64-nc) @.str.3, debug-location !598; is.c:573:15
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%4
  Single Issue       : false;
SU(2):   $x0 = COPY %3:gpr64, debug-location !598; is.c:573:15
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%3
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $x1 = COPY %4:gpr64, debug-location !598; is.c:573:15
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%4
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0, debug-location !598; is.c:573:15
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $x1 = COPY %4:gpr64, debug-location !598; is.c:573:15
  Ready @0c
  BotQ.A TopLatency SU(3) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $x0 = COPY %3:gpr64, debug-location !598; is.c:573:15
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %4:gpr64 = MOVaddr target-flags(aarch64-page) @.str.3, target-flags(aarch64-pageoff, aarch64-nc) @.str.3, debug-location !598; is.c:573:15
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %3:gpr64 = MOVaddr target-flags(aarch64-page) @.str.2, target-flags(aarch64-pageoff, aarch64-nc) @.str.2, debug-location !598; is.c:573:15
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %3:gpr64 = MOVaddr target-flags(aarch64-page) @.str.2, target-flags(aarch64-pageoff, aarch64-nc) @.str.2, debug-location !598; is.c:573:15
SU(1):   %4:gpr64 = MOVaddr target-flags(aarch64-page) @.str.3, target-flags(aarch64-pageoff, aarch64-nc) @.str.3, debug-location !598; is.c:573:15
SU(2):   $x0 = COPY %3:gpr64, debug-location !598; is.c:573:15
SU(3):   $x1 = COPY %4:gpr64, debug-location !598; is.c:573:15

********** MI Scheduling **********
main:%bb.0 entry
  From: %1:gpr64 = COPY $x1
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !598; is.c:573:15
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %1:gpr64 = COPY $x1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(4): Data Latency=0 Reg=%1
  Single Issue       : false;
SU(1):   %0:gpr32 = COPY $w0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(3): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(2):   STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   STRWui %0:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(4):   STRXui %1:gpr64, %stack.2.argv.addr, 0 :: (store 8 into %ir.argv.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%1
  Single Issue       : false;
SU(5):   STRWui $wzr, %stack.5.timer_on, 0, debug-location !597 :: (store 4 into %ir.timer_on); is.c:572:14
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !598; is.c:573:15
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 5 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %1:gpr64 = COPY $x1
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 5 1 2 4 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(5) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(1) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(1) %0:gpr32 = COPY $w0
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 5 4 2 3 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) STRWui $wzr, %stack.5.timer_on, 0, debug-location !597 :: (store 4 into %ir.timer_on); is.c:572:14
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 3 
Queue TopQ.P: 
Queue TopQ.A: 3 4 2 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) STRXui %1:gpr64, %stack.2.argv.addr, 0 :: (store 8 into %ir.argv.addr)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
Queue TopQ.P: 
Queue TopQ.A: 3 2 
  BotQ.A RemainingLatency 0 + 2c > CritPath 0
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) STRWui %0:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %1:gpr64 = COPY $x1
SU(1):   %0:gpr32 = COPY $w0
SU(2):   STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
SU(3):   STRWui %0:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
SU(4):   STRXui %1:gpr64, %stack.2.argv.addr, 0 :: (store 8 into %ir.argv.addr)
SU(5):   STRWui $wzr, %stack.5.timer_on, 0, debug-location !597 :: (store 4 into %ir.timer_on); is.c:572:14

********** MI Scheduling **********
main:%bb.1 if.then
  From: %8:gpr32 = MOVi32imm 1
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %8:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%8
  Single Issue       : false;
SU(1):   STRWui %8:gpr32, %stack.5.timer_on, 0, debug-location !606 :: (store 4 into %ir.timer_on); is.c:575:18
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%8
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %8:gpr32, %stack.5.timer_on, 0, debug-location !606 :: (store 4 into %ir.timer_on); is.c:575:18
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %8:gpr32 = MOVi32imm 1
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   %8:gpr32 = MOVi32imm 1
SU(1):   STRWui %8:gpr32, %stack.5.timer_on, 0, debug-location !606 :: (store 4 into %ir.timer_on); is.c:575:18

********** MI Scheduling **********
main:%bb.6 if.end6
  From: STRWui $wzr, %stack.3.i, 0, debug-location !621 :: (store 4 into %ir.i); is.c:588:12
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui $wzr, %stack.3.i, 0, debug-location !621 :: (store 4 into %ir.i); is.c:588:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %124:gpr64common = MOVaddr target-flags(aarch64-page) @B_test_index_array, target-flags(aarch64-pageoff, aarch64-nc) @B_test_index_array
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   %127:gpr64common = MOVaddr target-flags(aarch64-page) @test_index_array, target-flags(aarch64-pageoff, aarch64-nc) @test_index_array
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %128:gpr64common = MOVaddr target-flags(aarch64-page) @B_test_rank_array, target-flags(aarch64-pageoff, aarch64-nc) @B_test_rank_array
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   %130:gpr64common = MOVaddr target-flags(aarch64-page) @test_rank_array, target-flags(aarch64-pageoff, aarch64-nc) @test_rank_array
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %130:gpr64common = MOVaddr target-flags(aarch64-page) @test_rank_array, target-flags(aarch64-pageoff, aarch64-nc) @test_rank_array
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %128:gpr64common = MOVaddr target-flags(aarch64-page) @B_test_rank_array, target-flags(aarch64-pageoff, aarch64-nc) @B_test_rank_array
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  BotQ.A RemainingLatency 0 + 2c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %127:gpr64common = MOVaddr target-flags(aarch64-page) @test_index_array, target-flags(aarch64-pageoff, aarch64-nc) @test_index_array
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 3c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %124:gpr64common = MOVaddr target-flags(aarch64-page) @B_test_index_array, target-flags(aarch64-pageoff, aarch64-nc) @B_test_index_array
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.3.i, 0, debug-location !621 :: (store 4 into %ir.i); is.c:588:12
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   STRWui $wzr, %stack.3.i, 0, debug-location !621 :: (store 4 into %ir.i); is.c:588:12
SU(1):   %124:gpr64common = MOVaddr target-flags(aarch64-page) @B_test_index_array, target-flags(aarch64-pageoff, aarch64-nc) @B_test_index_array
SU(2):   %127:gpr64common = MOVaddr target-flags(aarch64-page) @test_index_array, target-flags(aarch64-pageoff, aarch64-nc) @test_index_array
SU(3):   %128:gpr64common = MOVaddr target-flags(aarch64-page) @B_test_rank_array, target-flags(aarch64-pageoff, aarch64-nc) @B_test_rank_array
SU(4):   %130:gpr64common = MOVaddr target-flags(aarch64-page) @test_rank_array, target-flags(aarch64-pageoff, aarch64-nc) @test_rank_array

********** MI Scheduling **********
main:%bb.7 for.cond
  From: %17:gpr32common = LDRWui %stack.3.i, 0, debug-location !624 :: (dereferenceable load 4 from %ir.i); is.c:588:17
    To: Bcc 12, %bb.9, implicit killed $nzcv, debug-location !627; is.c:588:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %17:gpr32common = LDRWui %stack.3.i, 0, debug-location !624 :: (dereferenceable load 4 from %ir.i); is.c:588:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%17
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %17:gpr32common, 4, 0, implicit-def $nzcv, debug-location !627; is.c:588:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%17
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.9, implicit killed $nzcv, debug-location !627; is.c:588:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %17:gpr32common, 4, 0, implicit-def $nzcv, debug-location !627; is.c:588:5
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %17:gpr32common = LDRWui %stack.3.i, 0, debug-location !624 :: (dereferenceable load 4 from %ir.i); is.c:588:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %17:gpr32common = LDRWui %stack.3.i, 0, debug-location !624 :: (dereferenceable load 4 from %ir.i); is.c:588:17
SU(1):   dead $wzr = SUBSWri %17:gpr32common, 4, 0, implicit-def $nzcv, debug-location !627; is.c:588:5

********** MI Scheduling **********
main:%bb.8 for.body
  From: %122:gpr64common = LDRSWui %stack.3.i, 0, debug-location !628 :: (dereferenceable load 4 from %ir.i); is.c:603:54
    To: B %bb.7, debug-location !639; is.c:588:5
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %122:gpr64common = LDRSWui %stack.3.i, 0, debug-location !628 :: (dereferenceable load 4 from %ir.i); is.c:603:54
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(6): Data Latency=4 Reg=%122
    SU(1): Data Latency=4 Reg=%122
    SU(7): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %125:gpr64 = UBFMXri %122:gpr64common, 62, 61, debug-location !634; is.c:604:34
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%122
  Successors:
    SU(5): Data Latency=1 Reg=%125
    SU(4): Data Latency=1 Reg=%125
    SU(3): Data Latency=1 Reg=%125
    SU(2): Data Latency=1 Reg=%125
  Single Issue       : false;
SU(2):   %126:gpr32 = LDRWroX %124:gpr64common, %125:gpr64, 0, 0, debug-location !629 :: (load 4 from %ir.arrayidx); is.c:603:35
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%125
  Successors:
    SU(3): Data Latency=4 Reg=%126
  Single Issue       : false;
SU(3):   STRWroX %126:gpr32, %127:gpr64common, %125:gpr64, 0, 0, debug-location !632 :: (store 4 into %ir.arrayidx9); is.c:603:33
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%126
    SU(1): Data Latency=1 Reg=%125
  Single Issue       : false;
SU(4):   %129:gpr32 = LDRWroX %128:gpr64common, %125:gpr64, 0, 0, debug-location !634 :: (load 4 from %ir.arrayidx11); is.c:604:34
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%125
  Successors:
    SU(5): Data Latency=4 Reg=%129
  Single Issue       : false;
SU(5):   STRWroX %129:gpr32, %130:gpr64common, %125:gpr64, 0, 0, debug-location !637 :: (store 4 into %ir.arrayidx13); is.c:604:32
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(4): Data Latency=4 Reg=%129
    SU(1): Data Latency=1 Reg=%125
  Single Issue       : false;
SU(6):   %131:gpr32common = nsw ADDWri %122.sub_32:gpr64common, 1, 0, debug-location !638; is.c:588:39
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%122
  Successors:
    SU(7): Data Latency=1 Reg=%131
  Single Issue       : false;
SU(7):   STRWui %131:gpr32common, %stack.3.i, 0, debug-location !638 :: (store 4 into %ir.i); is.c:588:39
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%131
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.7, debug-location !639; is.c:588:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 5 3 
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) %122:gpr64common = LDRSWui %stack.3.i, 0, debug-location !628 :: (dereferenceable load 4 from %ir.i); is.c:603:54
  Ready @0c
  TopQ.A BotLatency SU(0) 9c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 5 3 
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 6 1 
TopQ.A RemLatency SU(1) 5c
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(6) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) STRWui %131:gpr32common, %stack.3.i, 0, debug-location !638 :: (store 4 into %ir.i); is.c:588:39
  Ready @0c
  BotQ.A TopLatency SU(7) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 6 
Queue TopQ.P: 
Queue TopQ.A: 6 1 
BotQ.A RemLatency SU(3) 9c
  BotQ.A RemainingLatency 9 + 1c > CritPath 9
TopQ.A RemLatency SU(1) 5c
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) STRWroX %129:gpr32, %130:gpr64common, %125:gpr64, 0, 0, debug-location !637 :: (store 4 into %ir.arrayidx13); is.c:604:32
  Ready @1c
  BotQ.A TopLatency SU(5) 9c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 3 6 
Queue TopQ.P: 
Queue TopQ.A: 6 1 
BotQ.A RemLatency SU(3) 9c
BotQ.A RemLatency SU(4) 5c
  BotQ.A RemainingLatency 9 + 2c > CritPath 9
TopQ.A RemLatency SU(1) 5c
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(3) STRWroX %126:gpr32, %127:gpr64common, %125:gpr64, 0, 0, debug-location !632 :: (store 4 into %ir.arrayidx9); is.c:603:33
  Ready @2c
  BotQ.A TopLatency SU(3) 9c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 2 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %131:gpr32common = nsw ADDWri %122.sub_32:gpr64common, 1, 0, debug-location !638; is.c:588:39
  Ready @3c
  BotQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 2 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %129:gpr32 = LDRWroX %128:gpr64common, %125:gpr64, 0, 0, debug-location !634 :: (load 4 from %ir.arrayidx11); is.c:604:34
  Ready @5c
  BotQ.A BotLatency SU(4) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %126:gpr32 = LDRWroX %124:gpr64common, %125:gpr64, 0, 0, debug-location !629 :: (load 4 from %ir.arrayidx); is.c:603:35
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %125:gpr64 = UBFMXri %122:gpr64common, 62, 61, debug-location !634; is.c:604:34
  Ready @7c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   %122:gpr64common = LDRSWui %stack.3.i, 0, debug-location !628 :: (dereferenceable load 4 from %ir.i); is.c:603:54
SU(1):   %125:gpr64 = UBFMXri %122:gpr64common, 62, 61, debug-location !634; is.c:604:34
SU(2):   %126:gpr32 = LDRWroX %124:gpr64common, %125:gpr64, 0, 0, debug-location !629 :: (load 4 from %ir.arrayidx); is.c:603:35
SU(4):   %129:gpr32 = LDRWroX %128:gpr64common, %125:gpr64, 0, 0, debug-location !634 :: (load 4 from %ir.arrayidx11); is.c:604:34
SU(6):   %131:gpr32common = nsw ADDWri %122.sub_32:gpr64common, 1, 0, debug-location !638; is.c:588:39
SU(3):   STRWroX %126:gpr32, %127:gpr64common, %125:gpr64, 0, 0, debug-location !632 :: (store 4 into %ir.arrayidx9); is.c:603:33
SU(5):   STRWroX %129:gpr32, %130:gpr64common, %125:gpr64, 0, 0, debug-location !637 :: (store 4 into %ir.arrayidx13); is.c:604:32
SU(7):   STRWui %131:gpr32common, %stack.3.i, 0, debug-location !638 :: (store 4 into %ir.i); is.c:588:39

********** MI Scheduling **********
main:%bb.9 for.end
  From: %26:gpr64 = MOVaddr target-flags(aarch64-page) @.str.6, target-flags(aarch64-pageoff, aarch64-nc) @.str.6, debug-location !644; is.c:619:5
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !644; is.c:619:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %26:gpr64 = MOVaddr target-flags(aarch64-page) @.str.6, target-flags(aarch64-pageoff, aarch64-nc) @.str.6, debug-location !644; is.c:619:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%26
  Single Issue       : false;
SU(1):   $x0 = COPY %26:gpr64, debug-location !644; is.c:619:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%26
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $w1 = MOVi32imm 10, debug-location !644; is.c:619:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !644; is.c:619:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %26:gpr64, debug-location !644; is.c:619:5
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $w1 = MOVi32imm 10, debug-location !644; is.c:619:5
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %26:gpr64 = MOVaddr target-flags(aarch64-page) @.str.6, target-flags(aarch64-pageoff, aarch64-nc) @.str.6, debug-location !644; is.c:619:5
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   %26:gpr64 = MOVaddr target-flags(aarch64-page) @.str.6, target-flags(aarch64-pageoff, aarch64-nc) @.str.6, debug-location !644; is.c:619:5
SU(2):   $w1 = MOVi32imm 10, debug-location !644; is.c:619:5
SU(1):   $x0 = COPY %26:gpr64, debug-location !644; is.c:619:5

********** MI Scheduling **********
main:%bb.9 for.end
  From: %21:gpr64 = MOVaddr target-flags(aarch64-page) @.str.5, target-flags(aarch64-pageoff, aarch64-nc) @.str.5, debug-location !643; is.c:618:5
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $w2, implicit-def $sp, implicit-def dead $w0, debug-location !643; is.c:618:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %21:gpr64 = MOVaddr target-flags(aarch64-page) @.str.5, target-flags(aarch64-pageoff, aarch64-nc) @.str.5, debug-location !643; is.c:618:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%21
  Single Issue       : false;
SU(1):   $x0 = COPY %21:gpr64, debug-location !643; is.c:618:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%21
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   dead $w1 = MOVi32imm 33554432, implicit-def $x1, debug-location !643; is.c:618:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(3):   $w2 = MOVi32imm 66, debug-location !643; is.c:618:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $w2, implicit-def $sp, implicit-def dead $w0, debug-location !643; is.c:618:5
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %21:gpr64, debug-location !643; is.c:618:5
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 0 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $w2 = MOVi32imm 66, debug-location !643; is.c:618:5
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(2) dead $w1 = MOVi32imm 33554432, implicit-def $x1, debug-location !643; is.c:618:5
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %21:gpr64 = MOVaddr target-flags(aarch64-page) @.str.5, target-flags(aarch64-pageoff, aarch64-nc) @.str.5, debug-location !643; is.c:618:5
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   %21:gpr64 = MOVaddr target-flags(aarch64-page) @.str.5, target-flags(aarch64-pageoff, aarch64-nc) @.str.5, debug-location !643; is.c:618:5
SU(2):   dead $w1 = MOVi32imm 33554432, implicit-def $x1, debug-location !643; is.c:618:5
SU(3):   $w2 = MOVi32imm 66, debug-location !643; is.c:618:5
SU(1):   $x0 = COPY %21:gpr64, debug-location !643; is.c:618:5

********** MI Scheduling **********
main:%bb.9 for.end
  From: %19:gpr64 = MOVaddr target-flags(aarch64-page) @.str.4, target-flags(aarch64-pageoff, aarch64-nc) @.str.4, debug-location !642; is.c:617:5
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !642; is.c:617:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %19:gpr64 = MOVaddr target-flags(aarch64-page) @.str.4, target-flags(aarch64-pageoff, aarch64-nc) @.str.4, debug-location !642; is.c:617:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%19
  Single Issue       : false;
SU(1):   $x0 = COPY %19:gpr64, debug-location !642; is.c:617:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%19
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !642; is.c:617:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %19:gpr64, debug-location !642; is.c:617:5
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %19:gpr64 = MOVaddr target-flags(aarch64-page) @.str.4, target-flags(aarch64-pageoff, aarch64-nc) @.str.4, debug-location !642; is.c:617:5
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   %19:gpr64 = MOVaddr target-flags(aarch64-page) @.str.4, target-flags(aarch64-pageoff, aarch64-nc) @.str.4, debug-location !642; is.c:617:5
SU(1):   $x0 = COPY %19:gpr64, debug-location !642; is.c:617:5

********** MI Scheduling **********
main:%bb.11 if.end19
  From: %31:gpr64common = ADRP target-flags(aarch64-page) %const.0
    To: BL @create_seq, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $d0, implicit killed $d1, implicit-def $sp, debug-location !649; is.c:625:5
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %31:gpr64common = ADRP target-flags(aarch64-page) %const.0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=1 Reg=%31
  Single Issue       : false;
SU(1):   %32:fpr64 = LDRDui %31:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Data Latency=1 Reg=%31
  Successors:
    SU(4): Data Latency=4 Reg=%32
  Single Issue       : false;
SU(2):   %33:gpr64common = ADRP target-flags(aarch64-page) %const.1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=1 Reg=%33
  Single Issue       : false;
SU(3):   %34:fpr64 = LDRDui %33:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=%33
  Successors:
    SU(5): Data Latency=4 Reg=%34
  Single Issue       : false;
SU(4):   $d0 = COPY %32:fpr64, debug-location !649; is.c:625:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%32
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(5):   $d1 = COPY %34:fpr64, debug-location !649; is.c:625:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Data Latency=4 Reg=%34
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @create_seq, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $d0, implicit killed $d1, implicit-def $sp, debug-location !649; is.c:625:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=0 Artificial
    SU(4): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(5) $d1 = COPY %34:fpr64, debug-location !649; is.c:625:5
  Ready @0c
  BotQ.A TopLatency SU(5) 5c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) $d0 = COPY %32:fpr64, debug-location !649; is.c:625:5
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
BotQ.A RemLatency SU(3) 1c
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %34:fpr64 = LDRDui %33:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  Ready @4c
  BotQ.A BotLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 1
  Executed: 5c
  Critical: 1c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
BotQ.A RemLatency SU(1) 1c
  BotQ.A RemainingLatency 1 + 5c > CritPath 5
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) %32:fpr64 = LDRDui %31:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  Ready @5c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  BotQ.A RemainingLatency 0 + 6c > CritPath 5
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %33:gpr64common = ADRP target-flags(aarch64-page) %const.1
  Ready @6c
  BotQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %31:gpr64common = ADRP target-flags(aarch64-page) %const.0
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 4
  Executed: 8c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   %31:gpr64common = ADRP target-flags(aarch64-page) %const.0
SU(2):   %33:gpr64common = ADRP target-flags(aarch64-page) %const.1
SU(1):   %32:fpr64 = LDRDui %31:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
SU(3):   %34:fpr64 = LDRDui %33:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
SU(4):   $d0 = COPY %32:fpr64, debug-location !649; is.c:625:5
SU(5):   $d1 = COPY %34:fpr64, debug-location !649; is.c:625:5

********** MI Scheduling **********
main:%bb.13 if.end22
  From: STRWui %37:gpr32, %stack.4.iteration, 0, debug-location !659 :: (store 4 into %ir.iteration); is.c:646:20
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui %37:gpr32, %stack.4.iteration, 0, debug-location !659 :: (store 4 into %ir.iteration); is.c:646:20
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %117:gpr64 = MOVaddr target-flags(aarch64-page) @.str.8, target-flags(aarch64-pageoff, aarch64-nc) @.str.8
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %117:gpr64 = MOVaddr target-flags(aarch64-page) @.str.8, target-flags(aarch64-pageoff, aarch64-nc) @.str.8
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui %37:gpr32, %stack.4.iteration, 0, debug-location !659 :: (store 4 into %ir.iteration); is.c:646:20
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   STRWui %37:gpr32, %stack.4.iteration, 0, debug-location !659 :: (store 4 into %ir.iteration); is.c:646:20
SU(1):   %117:gpr64 = MOVaddr target-flags(aarch64-page) @.str.8, target-flags(aarch64-pageoff, aarch64-nc) @.str.8

********** MI Scheduling **********
main:%bb.13 if.end22
  From: %40:gpr64 = MOVaddr target-flags(aarch64-page) @.str.7, target-flags(aarch64-pageoff, aarch64-nc) @.str.7, debug-location !656; is.c:638:9
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !656; is.c:638:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %40:gpr64 = MOVaddr target-flags(aarch64-page) @.str.7, target-flags(aarch64-pageoff, aarch64-nc) @.str.7, debug-location !656; is.c:638:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%40
  Single Issue       : false;
SU(1):   $x0 = COPY %40:gpr64, debug-location !656; is.c:638:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%40
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !656; is.c:638:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %40:gpr64, debug-location !656; is.c:638:9
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %40:gpr64 = MOVaddr target-flags(aarch64-page) @.str.7, target-flags(aarch64-pageoff, aarch64-nc) @.str.7, debug-location !656; is.c:638:9
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   %40:gpr64 = MOVaddr target-flags(aarch64-page) @.str.7, target-flags(aarch64-pageoff, aarch64-nc) @.str.7, debug-location !656; is.c:638:9
SU(1):   $x0 = COPY %40:gpr64, debug-location !656; is.c:638:9

********** MI Scheduling **********
main:%bb.13 if.end22
  From: %38:gpr64common = ADRP target-flags(aarch64-page) @passed_verification, debug-location !655; is.c:635:25
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !656; is.c:638:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %38:gpr64common = ADRP target-flags(aarch64-page) @passed_verification, debug-location !655; is.c:635:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%38
  Single Issue       : false;
SU(1):   STRWui $wzr, %38:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !655 :: (store 4 into @passed_verification); is.c:635:25
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%38
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !656; is.c:638:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui $wzr, %38:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !655 :: (store 4 into @passed_verification); is.c:635:25
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %38:gpr64common = ADRP target-flags(aarch64-page) @passed_verification, debug-location !655; is.c:635:25
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   %38:gpr64common = ADRP target-flags(aarch64-page) @passed_verification, debug-location !655; is.c:635:25
SU(1):   STRWui $wzr, %38:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !655 :: (store 4 into @passed_verification); is.c:635:25

********** MI Scheduling **********
main:%bb.13 if.end22
  From: %37:gpr32 = MOVi32imm 1
    To: BL @rank, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !654; is.c:632:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %37:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   $w0 = MOVi32imm 1, debug-location !654; is.c:632:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @rank, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !654; is.c:632:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %37:gpr32 = MOVi32imm 1
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $w0 = MOVi32imm 1, debug-location !654; is.c:632:5
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(1):   $w0 = MOVi32imm 1, debug-location !654; is.c:632:5
SU(0):   %37:gpr32 = MOVi32imm 1

********** MI Scheduling **********
main:%bb.14 for.cond28
  From: %42:gpr32common = LDRWui %stack.4.iteration, 0, debug-location !662 :: (dereferenceable load 4 from %ir.iteration); is.c:646:25
    To: Bcc 12, %bb.16, implicit killed $nzcv, debug-location !665; is.c:646:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %42:gpr32common = LDRWui %stack.4.iteration, 0, debug-location !662 :: (dereferenceable load 4 from %ir.iteration); is.c:646:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%42
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %42:gpr32common, 10, 0, implicit-def $nzcv, debug-location !665; is.c:646:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%42
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.16, implicit killed $nzcv, debug-location !665; is.c:646:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %42:gpr32common, 10, 0, implicit-def $nzcv, debug-location !665; is.c:646:5
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %42:gpr32common = LDRWui %stack.4.iteration, 0, debug-location !662 :: (dereferenceable load 4 from %ir.iteration); is.c:646:25
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   %42:gpr32common = LDRWui %stack.4.iteration, 0, debug-location !662 :: (dereferenceable load 4 from %ir.iteration); is.c:646:25
SU(1):   dead $wzr = SUBSWri %42:gpr32common, 10, 0, implicit-def $nzcv, debug-location !665; is.c:646:5

********** MI Scheduling **********
main:%bb.15 for.body30
  From: %120:gpr32common = LDRWui %stack.4.iteration, 0, debug-location !672 :: (dereferenceable load 4 from %ir.iteration); is.c:646:63
    To: B %bb.14, debug-location !673; is.c:646:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %120:gpr32common = LDRWui %stack.4.iteration, 0, debug-location !672 :: (dereferenceable load 4 from %ir.iteration); is.c:646:63
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%120
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %121:gpr32common = nsw ADDWri %120:gpr32common, 1, 0, debug-location !672; is.c:646:63
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%120
  Successors:
    SU(2): Data Latency=1 Reg=%121
  Single Issue       : false;
SU(2):   STRWui %121:gpr32common, %stack.4.iteration, 0, debug-location !672 :: (store 4 into %ir.iteration); is.c:646:63
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%121
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.14, debug-location !673; is.c:646:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %121:gpr32common, %stack.4.iteration, 0, debug-location !672 :: (store 4 into %ir.iteration); is.c:646:63
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %121:gpr32common = nsw ADDWri %120:gpr32common, 1, 0, debug-location !672; is.c:646:63
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %120:gpr32common = LDRWui %stack.4.iteration, 0, debug-location !672 :: (dereferenceable load 4 from %ir.iteration); is.c:646:63
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   %120:gpr32common = LDRWui %stack.4.iteration, 0, debug-location !672 :: (dereferenceable load 4 from %ir.iteration); is.c:646:63
SU(1):   %121:gpr32common = nsw ADDWri %120:gpr32common, 1, 0, debug-location !672; is.c:646:63
SU(2):   STRWui %121:gpr32common, %stack.4.iteration, 0, debug-location !672 :: (store 4 into %ir.iteration); is.c:646:63

********** MI Scheduling **********
main:%bb.15 for.body30
  From: $x0 = COPY %117:gpr64, debug-location !669; is.c:648:13
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !669; is.c:648:13
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %117:gpr64, debug-location !669; is.c:648:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $w1 = COPY %116:gpr32, debug-location !669; is.c:648:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !669; is.c:648:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) $w1 = COPY %116:gpr32, debug-location !669; is.c:648:13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %117:gpr64, debug-location !669; is.c:648:13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   $x0 = COPY %117:gpr64, debug-location !669; is.c:648:13
SU(1):   $w1 = COPY %116:gpr32, debug-location !669; is.c:648:13

********** MI Scheduling **********
main:%bb.16 do.end38
  From: %45:fpr64 = COPY killed $d0, debug-location !677; is.c:658:19
    To: CBZW %46:gpr32, %bb.18, debug-location !681; is.c:662:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %45:fpr64 = COPY killed $d0, debug-location !677; is.c:658:19
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%45
  Single Issue       : false;
SU(1):   STRDui %45:fpr64, %stack.6.timecounter, 0, debug-location !678 :: (store 8 into %ir.timecounter); is.c:658:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%45
  Single Issue       : false;
SU(2):   %46:gpr32 = LDRWui %stack.5.timer_on, 0, debug-location !679 :: (dereferenceable load 4 from %ir.timer_on); is.c:662:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Data Latency=4 Reg=%46
  Single Issue       : false;
ExitSU:   CBZW %46:gpr32, %bb.18, debug-location !681; is.c:662:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%46
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %45:fpr64, %stack.6.timecounter, 0, debug-location !678 :: (store 8 into %ir.timecounter); is.c:658:17
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %45:fpr64 = COPY killed $d0, debug-location !677; is.c:658:19
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 2 BotQ.A
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %46:gpr32 = LDRWui %stack.5.timer_on, 0, debug-location !679 :: (dereferenceable load 4 from %ir.timer_on); is.c:662:9
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.16 ***
SU(2):   %46:gpr32 = LDRWui %stack.5.timer_on, 0, debug-location !679 :: (dereferenceable load 4 from %ir.timer_on); is.c:662:9
SU(0):   %45:fpr64 = COPY $d0, debug-location !677; is.c:658:19
SU(1):   STRDui %45:fpr64, %stack.6.timecounter, 0, debug-location !678 :: (store 8 into %ir.timecounter); is.c:658:17

********** MI Scheduling **********
main:%bb.22 if.end48
  From: %53:gpr32common = LDRWui %38:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !692 :: (dereferenceable load 4 from @passed_verification); is.c:672:9
    To: Bcc 0, %bb.24, implicit killed $nzcv, debug-location !695; is.c:672:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %53:gpr32common = LDRWui %38:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !692 :: (dereferenceable load 4 from @passed_verification); is.c:672:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%53
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %53:gpr32common, 51, 0, implicit-def $nzcv, debug-location !695; is.c:672:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%53
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 0, %bb.24, implicit killed $nzcv, debug-location !695; is.c:672:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %53:gpr32common, 51, 0, implicit-def $nzcv, debug-location !695; is.c:672:9
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %53:gpr32common = LDRWui %38:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !692 :: (dereferenceable load 4 from @passed_verification); is.c:672:9
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.22 ***
SU(0):   %53:gpr32common = LDRWui %38:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !692 :: (dereferenceable load 4 from @passed_verification); is.c:672:9
SU(1):   dead $wzr = SUBSWri %53:gpr32common, 51, 0, implicit-def $nzcv, debug-location !695; is.c:672:9

********** MI Scheduling **********
main:%bb.24 if.end51
  From: %66:gpr64 = MOVaddr target-flags(aarch64-page) @.str.18, target-flags(aarch64-pageoff, aarch64-nc) @.str.18, debug-location !703; is.c:674:5
    To: BL @c_print_results, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit killed $w4, implicit killed $w5, implicit $d0, implicit killed $d1, implicit killed $x6, implicit killed $w7, implicit-def $sp, debug-location !703; is.c:674:5
 RegionInstrs: 28
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR32arg=8
tcGPR64=8
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=8
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
Live In: %65 %63 %57 
Live Out: 
Live Thru: 
Top Pressure:
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
Bottom Pressure:
GPR32arg=8
tcGPR64=8
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=8
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
Excess PSets: 
Cluster ld/st SU(15) - SU(13)
Cluster ld/st SU(11) - SU(9)
Cluster ld/st SU(7) - SU(5)
Cluster ld/st SU(3) - SU(1)
SU(0):   %66:gpr64 = MOVaddr target-flags(aarch64-page) @.str.18, target-flags(aarch64-pageoff, aarch64-nc) @.str.18, debug-location !703; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%66
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   STRXui %66:gpr64, $sp, 7, debug-location !703 :: (store 8 into stack + 56); is.c:674:5
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%66
    SU(3): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(2):   %68:gpr64 = MOVaddr target-flags(aarch64-page) @.str.17, target-flags(aarch64-pageoff, aarch64-nc) @.str.17, debug-location !703; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%68
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(3):   STRXui %68:gpr64, $sp, 6, debug-location !703 :: (store 8 into stack + 48); is.c:674:5
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%68
  Successors:
    SU(1): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(4):   %69:gpr64 = MOVaddr target-flags(aarch64-page) @.str.16, target-flags(aarch64-pageoff, aarch64-nc) @.str.16, debug-location !703; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%69
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(5):   STRXui %69:gpr64, $sp, 5, debug-location !703 :: (store 8 into stack + 40); is.c:674:5
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%69
    SU(7): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(6):   %70:gpr64 = MOVaddr target-flags(aarch64-page) @.str.15, target-flags(aarch64-pageoff, aarch64-nc) @.str.15, debug-location !703; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%70
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   STRXui %70:gpr64, $sp, 4, debug-location !703 :: (store 8 into stack + 32); is.c:674:5
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%70
  Successors:
    SU(5): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(8):   %71:gpr64 = MOVaddr target-flags(aarch64-page) @.str.14, target-flags(aarch64-pageoff, aarch64-nc) @.str.14, debug-location !703; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(9): Data Latency=1 Reg=%71
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(9):   STRXui %71:gpr64, $sp, 3, debug-location !703 :: (store 8 into stack + 24); is.c:674:5
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%71
    SU(11): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(10):   %72:gpr64 = MOVaddr target-flags(aarch64-page) @.str.13, target-flags(aarch64-pageoff, aarch64-nc) @.str.13, debug-location !703; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(11): Data Latency=1 Reg=%72
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(11):   STRXui %72:gpr64, $sp, 2, debug-location !703 :: (store 8 into stack + 16); is.c:674:5
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%72
  Successors:
    SU(9): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(12):   %73:gpr64 = MOVaddr target-flags(aarch64-page) @.str.12, target-flags(aarch64-pageoff, aarch64-nc) @.str.12, debug-location !703; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(13): Data Latency=1 Reg=%73
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(13):   STRXui %73:gpr64, $sp, 1, debug-location !703 :: (store 8 into stack + 8); is.c:674:5
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%73
    SU(15): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(14):   %74:gpr64 = MOVaddr target-flags(aarch64-page) @.str.11, target-flags(aarch64-pageoff, aarch64-nc) @.str.11, debug-location !703; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(15): Data Latency=1 Reg=%74
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(15):   STRXui %74:gpr64, $sp, 0, debug-location !703 :: (store 8 into stack); is.c:674:5
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(14): Data Latency=1 Reg=%74
  Successors:
    SU(13): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(16):   %75:gpr64 = MOVaddr target-flags(aarch64-page) @.str.9, target-flags(aarch64-pageoff, aarch64-nc) @.str.9, debug-location !703; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(18): Data Latency=1 Reg=%75
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(17):   %76:gpr64 = MOVaddr target-flags(aarch64-page) @.str.10, target-flags(aarch64-pageoff, aarch64-nc) @.str.10, debug-location !703; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(26): Data Latency=1 Reg=%76
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(18):   $x0 = COPY %75:gpr64, debug-location !703; is.c:674:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(16): Data Latency=1 Reg=%75
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1
  Single Issue       : false;
SU(19):   $w1 = MOVi32imm 66, debug-location !703; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1    GPR32 -1
  Single Issue       : false;
SU(20):   $w2 = MOVi32imm 524288, debug-location !703; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1    GPR32 -1
  Single Issue       : false;
SU(21):   $w3 = MOVi32imm 64, debug-location !703; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1    GPR32 -1
  Single Issue       : false;
SU(22):   $w4 = COPY $wzr, debug-location !703; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1    GPR32 -1
  Single Issue       : false;
SU(23):   $w5 = MOVi32imm 10, debug-location !703; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1    GPR32 -1
  Single Issue       : false;
SU(24):   $d0 = COPY %57:fpr64, debug-location !703; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : FPR128_lo -1    ZPR_3b -1    FPR128_lo+ZPR_3b -1    QQ_with_qsub1_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR4_with_zsub3_in_ZPR_4b -1    ZPR4_with_zsub_in_FPR128_lo -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1
  Single Issue       : false;
SU(25):   $d1 = COPY %63:fpr64, debug-location !703; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : FPR128_lo -1    ZPR_3b -1    FPR128_lo+ZPR_3b -1    QQ_with_qsub1_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR4_with_zsub3_in_ZPR_4b -1    ZPR4_with_zsub_in_FPR128_lo -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1
  Single Issue       : false;
SU(26):   $x6 = COPY %76:gpr64, debug-location !703; is.c:674:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(17): Data Latency=1 Reg=%76
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1
  Single Issue       : false;
SU(27):   $w7 = COPY %65:gpr32, debug-location !703; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1
  Single Issue       : false;
ExitSU:   BL @c_print_results, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit killed $w4, implicit killed $w5, implicit $d0, implicit killed $d1, implicit killed $x6, implicit killed $w7, implicit-def $sp, debug-location !703; is.c:674:5
  # preds left       : 10
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(27): Ord  Latency=0 Artificial
    SU(26): Ord  Latency=0 Artificial
    SU(25): Ord  Latency=0 Artificial
    SU(24): Ord  Latency=0 Artificial
    SU(23): Ord  Latency=1 Artificial
    SU(22): Ord  Latency=0 Artificial
    SU(21): Ord  Latency=1 Artificial
    SU(20): Ord  Latency=1 Artificial
    SU(19): Ord  Latency=1 Artificial
    SU(18): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 23 21 20 19 
Queue BotQ.A: 15 13 11 9 7 5 3 1 27 26 25 24 22 18 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 17 19 20 21 22 23 24 25 27 
Picking from Bot:
  Cand SU(15) ORDER                              
  Cand SU(13) WEAK                               
  Cand SU(27) PHYS-REG                           
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(22) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(27) $w7 = COPY %65:gpr32, debug-location !703; is.c:674:5
Bottom Pressure:
GPR32arg=7
tcGPR64=7
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=8
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  LiveReg: %65
  UpdateRegP: SU(27) $w7 = COPY %65:gpr32, debug-location !703; is.c:674:5
              to GPR32arg -1    tcGPR64 -1    GPR32 -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 23 21 20 19 
Queue BotQ.A: 15 13 11 9 7 5 3 1 18 26 25 24 22 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 17 19 20 21 22 23 24 25 
Picking from Bot:
  Cand SU(15) ORDER                              
  Cand SU(13) WEAK                               
  Cand SU(18) PHYS-REG                           
  Cand SU(26) ORDER                              
Picking from Top:
  Cand SU(22) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(26) $x6 = COPY %76:gpr64, debug-location !703; is.c:674:5
Bottom Pressure:
GPR32arg=6
tcGPR64=6
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=8
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  LiveReg: %76
  UpdateRegP: SU(26) $x6 = COPY %76:gpr64, debug-location !703; is.c:674:5
              to GPR32arg -1    tcGPR64 -1    GPR32 -1
  Ready @0c
  BotQ.A TopLatency SU(26) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 23 21 20 19 17 
Queue BotQ.A: 15 13 11 9 7 5 3 1 18 22 25 24 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 17 19 20 21 22 23 24 25 
Picking from Bot:
  Cand SU(15) ORDER                              
  Cand SU(13) WEAK                               
  Cand SU(18) PHYS-REG                           
  Cand SU(22) ORDER                              
Picking from Top:
  Cand SU(22) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(22) $w4 = COPY $wzr, debug-location !703; is.c:674:5
Bottom Pressure:
GPR32arg=5
tcGPR64=5
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=7
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 23 21 20 19 17 
Queue BotQ.A: 15 13 11 9 7 5 3 1 18 24 25 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 17 19 20 21 25 23 24 
Picking from Bot:
  Cand SU(15) ORDER                              
  Cand SU(13) WEAK                               
  Cand SU(18) PHYS-REG                           
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(18) $x0 = COPY %75:gpr64, debug-location !703; is.c:674:5
Bottom Pressure:
GPR32arg=4
tcGPR64=4
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=7
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  LiveReg: %75
  UpdateRegP: SU(18) $x0 = COPY %75:gpr64, debug-location !703; is.c:674:5
              to GPR32arg -1    tcGPR64 -1    GPR32 -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 23 21 20 19 17 16 
Queue BotQ.A: 15 13 11 9 7 5 3 1 25 24 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 17 19 20 21 25 23 24 
Picking from Bot:
  Cand SU(15) ORDER                              
  Cand SU(13) WEAK                               
  Cand SU(25) PHYS-REG                           
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(25) $d1 = COPY %63:fpr64, debug-location !703; is.c:674:5
Bottom Pressure:
GPR32arg=4
tcGPR64=4
FPR128_lo=1
ZPR_3b=1
FPR128_lo+ZPR_3b=1
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=1
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=1
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=1
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=1
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=1
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=1
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=1
GPR32=7
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR4_with_zsub3_in_ZPR_4b=1
ZPR4_with_zsub_in_FPR128_lo=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=1
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %63
  UpdateRegP: SU(25) $d1 = COPY %63:fpr64, debug-location !703; is.c:674:5
              to FPR128_lo -1    ZPR_3b -1    FPR128_lo+ZPR_3b -1    QQ_with_qsub1_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8 -1    FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR4_with_zsub3_in_ZPR_4b -1    ZPR4_with_zsub_in_FPR128_lo -1    FPR8+ZPR_3b -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 23 21 20 19 17 16 
Queue BotQ.A: 15 13 11 9 7 5 3 1 24 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 17 19 20 21 24 23 
Picking from Bot:
  Cand SU(15) ORDER                              
  Cand SU(13) WEAK                               
  Cand SU(24) PHYS-REG                           
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(24) $d0 = COPY %57:fpr64, debug-location !703; is.c:674:5
Bottom Pressure:
GPR32arg=4
tcGPR64=4
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %57
  UpdateRegP: SU(24) $d0 = COPY %57:fpr64, debug-location !703; is.c:674:5
              to FPR128_lo -1    ZPR_3b -1    FPR128_lo+ZPR_3b -1    QQ_with_qsub1_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8 -1    FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR4_with_zsub3_in_ZPR_4b -1    ZPR4_with_zsub_in_FPR128_lo -1    FPR8+ZPR_3b -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 23 21 20 19 17 16 
Queue BotQ.A: 15 13 11 9 7 5 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 17 19 20 21 23 
Picking from Bot:
  Cand SU(15) ORDER                              
  Cand SU(13) WEAK                               
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(13) STRXui %73:gpr64, $sp, 1, debug-location !703 :: (store 8 into stack + 8); is.c:674:5
Bottom Pressure:
GPR32arg=4
tcGPR64=4
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %73
  UpdateRegP: SU(13) STRXui %73:gpr64, $sp, 1, debug-location !703 :: (store 8 into stack + 8); is.c:674:5
              to 
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 1 11 9 7 5 3 12 23 16 17 19 20 21 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 17 19 20 21 23 
BotQ.A RemLatency SU(15) 1c
  BotQ.A RemainingLatency 1 + 1c > CritPath 1
Picking from Bot:
  Cand SU(15) ORDER                              
  Cand SU(23) PHYS-REG                           
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(23) $w5 = MOVi32imm 10, debug-location !703; is.c:674:5
Bottom Pressure:
GPR32arg=3
tcGPR64=3
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  Ready @1c
  BotQ.A BotLatency SU(23) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 1 11 9 7 5 3 12 21 16 17 19 20 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 17 19 20 21 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(15) ORDER                              
  Cand SU(21) PHYS-REG                           
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(21) $w3 = MOVi32imm 64, debug-location !703; is.c:674:5
Bottom Pressure:
GPR32arg=2
tcGPR64=2
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 1 11 9 7 5 3 12 20 16 17 19 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 17 19 20 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Cand SU(15) ORDER                              
  Cand SU(20) PHYS-REG                           
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(20) $w2 = MOVi32imm 524288, debug-location !703; is.c:674:5
Bottom Pressure:
GPR32arg=1
tcGPR64=1
FPR8=2
GPR32=5
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 1 11 9 7 5 3 12 19 16 17 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 17 19 
  BotQ.A RemainingLatency 0 + 4c > CritPath 1
Picking from Bot:
  Cand SU(15) ORDER                              
  Cand SU(19) PHYS-REG                           
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(19) $w1 = MOVi32imm 66, debug-location !703; is.c:674:5
Bottom Pressure:
FPR8=2
GPR32=4
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 1 11 9 7 5 3 12 17 16 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 17 
  BotQ.A RemainingLatency 0 + 5c > CritPath 1
Picking from Bot:
  Cand SU(15) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(15) STRXui %74:gpr64, $sp, 0, debug-location !703 :: (store 8 into stack); is.c:674:5
Bottom Pressure:
FPR8=2
GPR32=5
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %74
  UpdateRegP: SU(15) STRXui %74:gpr64, $sp, 0, debug-location !703 :: (store 8 into stack); is.c:674:5
              to 
  Ready @5c
  BotQ.A TopLatency SU(15) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 16 1 11 9 7 5 3 12 17 14 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 17 
  BotQ.A RemainingLatency 0 + 6c > CritPath 1
Picking from Bot:
  Cand SU(16) ORDER                              
  Cand SU(1) BOT-PATH                  1 cycles 
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(9) STRXui %71:gpr64, $sp, 3, debug-location !703 :: (store 8 into stack + 24); is.c:674:5
Bottom Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %71
  UpdateRegP: SU(9) STRXui %71:gpr64, $sp, 3, debug-location !703 :: (store 8 into stack + 24); is.c:674:5
              to 
  Ready @6c
  BotQ.A TopLatency SU(9) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 16 1 11 14 7 5 3 12 17 8 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 17 
  BotQ.A RemainingLatency 0 + 7c > CritPath 1
Picking from Bot:
  Cand SU(16) ORDER                              
  Cand SU(1) BOT-PATH                  1 cycles 
  Cand SU(11) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(11) STRXui %72:gpr64, $sp, 2, debug-location !703 :: (store 8 into stack + 16); is.c:674:5
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %72
  UpdateRegP: SU(11) STRXui %72:gpr64, $sp, 2, debug-location !703 :: (store 8 into stack + 16); is.c:674:5
              to 
  Ready @7c
  BotQ.A TopLatency SU(11) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 16 1 8 14 7 5 3 12 17 10 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 17 
  BotQ.A RemainingLatency 0 + 8c > CritPath 1
Picking from Bot:
  Cand SU(16) ORDER                              
  Cand SU(1) BOT-PATH                  1 cycles 
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(5) STRXui %69:gpr64, $sp, 5, debug-location !703 :: (store 8 into stack + 40); is.c:674:5
Bottom Pressure:
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %69
  UpdateRegP: SU(5) STRXui %69:gpr64, $sp, 5, debug-location !703 :: (store 8 into stack + 40); is.c:674:5
              to 
  Ready @8c
  BotQ.A TopLatency SU(5) 1c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 16 1 8 14 7 10 3 12 17 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 17 
  BotQ.A RemainingLatency 0 + 9c > CritPath 1
Picking from Bot:
  Cand SU(16) ORDER                              
  Cand SU(7) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(7) STRXui %70:gpr64, $sp, 4, debug-location !703 :: (store 8 into stack + 32); is.c:674:5
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %70
  UpdateRegP: SU(7) STRXui %70:gpr64, $sp, 4, debug-location !703 :: (store 8 into stack + 32); is.c:674:5
              to 
  Ready @9c
  BotQ.A TopLatency SU(7) 1c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 16 1 8 14 4 10 3 12 17 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 17 
  BotQ.A RemainingLatency 0 + 10c > CritPath 1
Picking from Bot:
  Cand SU(16) ORDER                              
  Cand SU(17) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(17) %76:gpr64 = MOVaddr target-flags(aarch64-page) @.str.10, target-flags(aarch64-pageoff, aarch64-nc) @.str.10, debug-location !703; is.c:674:5
Bottom Pressure:
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 16 1 8 14 4 10 3 12 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 
  BotQ.A RemainingLatency 0 + 11c > CritPath 1
Picking from Bot:
  Cand SU(16) ORDER                              
  Cand SU(1) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(1) STRXui %66:gpr64, $sp, 7, debug-location !703 :: (store 8 into stack + 56); is.c:674:5
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %66
  UpdateRegP: SU(1) STRXui %66:gpr64, $sp, 7, debug-location !703 :: (store 8 into stack + 56); is.c:674:5
              to 
  Ready @11c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 16 6 8 14 4 10 3 12 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 
  BotQ.A RemainingLatency 0 + 12c > CritPath 1
Picking from Bot:
  Cand SU(16) ORDER                              
  Cand SU(3) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(3) STRXui %68:gpr64, $sp, 6, debug-location !703 :: (store 8 into stack + 48); is.c:674:5
Bottom Pressure:
FPR8=2
GPR32=10
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %68
  UpdateRegP: SU(3) STRXui %68:gpr64, $sp, 6, debug-location !703 :: (store 8 into stack + 48); is.c:674:5
              to 
  Ready @12c
  BotQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 16 6 8 14 4 10 0 12 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 
  BotQ.A RemainingLatency 0 + 13c > CritPath 1
Picking from Bot:
  Cand SU(16) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(16) %75:gpr64 = MOVaddr target-flags(aarch64-page) @.str.9, target-flags(aarch64-pageoff, aarch64-nc) @.str.9, debug-location !703; is.c:674:5
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 6 8 14 4 10 0 12 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 
  BotQ.A RemainingLatency 0 + 14c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(14) %74:gpr64 = MOVaddr target-flags(aarch64-page) @.str.11, target-flags(aarch64-pageoff, aarch64-nc) @.str.11, debug-location !703; is.c:674:5
Bottom Pressure:
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 6 8 12 4 10 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 
  BotQ.A RemainingLatency 0 + 15c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(12) %73:gpr64 = MOVaddr target-flags(aarch64-page) @.str.12, target-flags(aarch64-pageoff, aarch64-nc) @.str.12, debug-location !703; is.c:674:5
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @15c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 6 8 0 4 10 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 
  BotQ.A RemainingLatency 0 + 16c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(10) %72:gpr64 = MOVaddr target-flags(aarch64-page) @.str.13, target-flags(aarch64-pageoff, aarch64-nc) @.str.13, debug-location !703; is.c:674:5
Bottom Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 6 8 0 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 
  BotQ.A RemainingLatency 0 + 17c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %71:gpr64 = MOVaddr target-flags(aarch64-page) @.str.14, target-flags(aarch64-pageoff, aarch64-nc) @.str.14, debug-location !703; is.c:674:5
Bottom Pressure:
FPR8=2
GPR32=5
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 6 4 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 
  BotQ.A RemainingLatency 0 + 18c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %70:gpr64 = MOVaddr target-flags(aarch64-page) @.str.15, target-flags(aarch64-pageoff, aarch64-nc) @.str.15, debug-location !703; is.c:674:5
Bottom Pressure:
FPR8=2
GPR32=4
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 
  BotQ.A RemainingLatency 0 + 19c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %69:gpr64 = MOVaddr target-flags(aarch64-page) @.str.16, target-flags(aarch64-pageoff, aarch64-nc) @.str.16, debug-location !703; is.c:674:5
Bottom Pressure:
FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @19c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  BotQ.A RemainingLatency 0 + 20c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %68:gpr64 = MOVaddr target-flags(aarch64-page) @.str.17, target-flags(aarch64-pageoff, aarch64-nc) @.str.17, debug-location !703; is.c:674:5
Bottom Pressure:
FPR8=2
GPR32=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @20c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %66:gpr64 = MOVaddr target-flags(aarch64-page) @.str.18, target-flags(aarch64-pageoff, aarch64-nc) @.str.18, debug-location !703; is.c:674:5
Bottom Pressure:
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @21c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.24 ***
SU(0):   %66:gpr64 = MOVaddr target-flags(aarch64-page) @.str.18, target-flags(aarch64-pageoff, aarch64-nc) @.str.18, debug-location !703; is.c:674:5
SU(2):   %68:gpr64 = MOVaddr target-flags(aarch64-page) @.str.17, target-flags(aarch64-pageoff, aarch64-nc) @.str.17, debug-location !703; is.c:674:5
SU(4):   %69:gpr64 = MOVaddr target-flags(aarch64-page) @.str.16, target-flags(aarch64-pageoff, aarch64-nc) @.str.16, debug-location !703; is.c:674:5
SU(6):   %70:gpr64 = MOVaddr target-flags(aarch64-page) @.str.15, target-flags(aarch64-pageoff, aarch64-nc) @.str.15, debug-location !703; is.c:674:5
SU(8):   %71:gpr64 = MOVaddr target-flags(aarch64-page) @.str.14, target-flags(aarch64-pageoff, aarch64-nc) @.str.14, debug-location !703; is.c:674:5
SU(10):   %72:gpr64 = MOVaddr target-flags(aarch64-page) @.str.13, target-flags(aarch64-pageoff, aarch64-nc) @.str.13, debug-location !703; is.c:674:5
SU(12):   %73:gpr64 = MOVaddr target-flags(aarch64-page) @.str.12, target-flags(aarch64-pageoff, aarch64-nc) @.str.12, debug-location !703; is.c:674:5
SU(14):   %74:gpr64 = MOVaddr target-flags(aarch64-page) @.str.11, target-flags(aarch64-pageoff, aarch64-nc) @.str.11, debug-location !703; is.c:674:5
SU(16):   %75:gpr64 = MOVaddr target-flags(aarch64-page) @.str.9, target-flags(aarch64-pageoff, aarch64-nc) @.str.9, debug-location !703; is.c:674:5
SU(3):   STRXui %68:gpr64, $sp, 6, debug-location !703 :: (store 8 into stack + 48); is.c:674:5
SU(1):   STRXui %66:gpr64, $sp, 7, debug-location !703 :: (store 8 into stack + 56); is.c:674:5
SU(17):   %76:gpr64 = MOVaddr target-flags(aarch64-page) @.str.10, target-flags(aarch64-pageoff, aarch64-nc) @.str.10, debug-location !703; is.c:674:5
SU(7):   STRXui %70:gpr64, $sp, 4, debug-location !703 :: (store 8 into stack + 32); is.c:674:5
SU(5):   STRXui %69:gpr64, $sp, 5, debug-location !703 :: (store 8 into stack + 40); is.c:674:5
SU(11):   STRXui %72:gpr64, $sp, 2, debug-location !703 :: (store 8 into stack + 16); is.c:674:5
SU(9):   STRXui %71:gpr64, $sp, 3, debug-location !703 :: (store 8 into stack + 24); is.c:674:5
SU(15):   STRXui %74:gpr64, $sp, 0, debug-location !703 :: (store 8 into stack); is.c:674:5
SU(19):   $w1 = MOVi32imm 66, debug-location !703; is.c:674:5
SU(20):   $w2 = MOVi32imm 524288, debug-location !703; is.c:674:5
SU(21):   $w3 = MOVi32imm 64, debug-location !703; is.c:674:5
SU(23):   $w5 = MOVi32imm 10, debug-location !703; is.c:674:5
SU(13):   STRXui %73:gpr64, $sp, 1, debug-location !703 :: (store 8 into stack + 8); is.c:674:5
SU(24):   $d0 = COPY %57:fpr64, debug-location !703; is.c:674:5
SU(25):   $d1 = COPY %63:fpr64, debug-location !703; is.c:674:5
SU(18):   $x0 = COPY %75:gpr64, debug-location !703; is.c:674:5
SU(22):   $w4 = COPY $wzr, debug-location !703; is.c:674:5
SU(26):   $x6 = COPY %76:gpr64, debug-location !703; is.c:674:5
SU(27):   $w7 = COPY %65:gpr32, debug-location !703; is.c:674:5

********** MI Scheduling **********
main:%bb.24 if.end51
  From: %57:fpr64 = LDRDui %stack.6.timecounter, 0, debug-location !698 :: (dereferenceable load 8 from %ir.timecounter); is.c:675:69
    To: ADJCALLSTACKDOWN 64, 0, implicit-def dead $sp, implicit $sp, debug-location !703; is.c:674:5
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Constraining copy SU(2)
Constraining copy SU(5)
SU(0):   %57:fpr64 = LDRDui %stack.6.timecounter, 0, debug-location !698 :: (dereferenceable load 8 from %ir.timecounter); is.c:675:69
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=%57
  Single Issue       : false;
SU(1):   %58:gpr64 = MOVi64imm 4734409108273233920
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Data Latency=1 Reg=%58
  Single Issue       : false;
SU(2):   %59:fpr64 = COPY %58:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=%58
  Successors:
    SU(3): Data Latency=0 Reg=%59
  Single Issue       : false;
SU(3):   %60:fpr64 = FDIVDrr %59:fpr64, %57:fpr64, debug-location !700; is.c:676:49
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Data Latency=0 Reg=%59
    SU(0): Data Latency=4 Reg=%57
  Successors:
    SU(6): Data Latency=1 Reg=%60
  Single Issue       : false;
SU(4):   %61:gpr64 = MOVi64imm 4696837146684686336
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%61
  Single Issue       : false;
SU(5):   %62:fpr64 = COPY %61:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%61
  Successors:
    SU(6): Data Latency=0 Reg=%62
  Single Issue       : false;
SU(6):   %63:fpr64 = FDIVDrr %60:fpr64, %62:fpr64, debug-location !701; is.c:676:63
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%60
    SU(5): Data Latency=0 Reg=%62
  Single Issue       : false;
SU(7):   %65:gpr32 = LDRWui %38:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !702 :: (dereferenceable load 4 from @passed_verification); is.c:677:24
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 64, 0, implicit-def dead $sp, implicit $sp, debug-location !703; is.c:674:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %63:fpr64 = FDIVDrr %60:fpr64, %62:fpr64, debug-location !701; is.c:676:63
  Ready @0c
  BotQ.A TopLatency SU(6) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 
Queue BotQ.A: 3 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 7 
BotQ.A RemLatency SU(3) 4c
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %62:fpr64 = COPY %61:gpr64
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 4 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %60:fpr64 = FDIVDrr %59:fpr64, %57:fpr64, debug-location !700; is.c:676:49
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 0 
Queue BotQ.A: 2 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 7 
BotQ.A RemLatency SU(2) 1c
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %61:gpr64 = MOVi64imm 4696837146684686336
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 2 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 7 
BotQ.A RemLatency SU(2) 1c
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %65:gpr32 = LDRWui %38:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !702 :: (dereferenceable load 4 from @passed_verification); is.c:677:24
  Ready @3c
  BotQ.A BotLatency SU(7) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %59:fpr64 = COPY %58:gpr64
  Ready @4c
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %58:gpr64 = MOVi64imm 4734409108273233920
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %57:fpr64 = LDRDui %stack.6.timecounter, 0, debug-location !698 :: (dereferenceable load 8 from %ir.timecounter); is.c:675:69
  Ready @6c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.24 ***
SU(0):   %57:fpr64 = LDRDui %stack.6.timecounter, 0, debug-location !698 :: (dereferenceable load 8 from %ir.timecounter); is.c:675:69
SU(1):   %58:gpr64 = MOVi64imm 4734409108273233920
SU(2):   %59:fpr64 = COPY %58:gpr64
SU(7):   %65:gpr32 = LDRWui %38:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !702 :: (dereferenceable load 4 from @passed_verification); is.c:677:24
SU(4):   %61:gpr64 = MOVi64imm 4696837146684686336
SU(3):   %60:fpr64 = FDIVDrr %59:fpr64, %57:fpr64, debug-location !700; is.c:676:49
SU(5):   %62:fpr64 = COPY %61:gpr64
SU(6):   %63:fpr64 = FDIVDrr %60:fpr64, %62:fpr64, debug-location !701; is.c:676:63

********** MI Scheduling **********
main:%bb.25 if.then54
  From: %90:fpr64 = LDRDui %stack.8.t_total, 0, debug-location !717 :: (dereferenceable load 8 from %ir.t_total); is.c:687:13
    To: Bcc 1, %bb.27, implicit killed $nzcv, debug-location !720; is.c:687:13
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %90:fpr64 = LDRDui %stack.8.t_total, 0, debug-location !717 :: (dereferenceable load 8 from %ir.t_total); is.c:687:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%90
  Single Issue       : false;
SU(1):   FCMPDri %90:fpr64, implicit-def $nzcv, debug-location !720; is.c:687:13
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%90
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.27, implicit killed $nzcv, debug-location !720; is.c:687:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) FCMPDri %90:fpr64, implicit-def $nzcv, debug-location !720; is.c:687:13
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %90:fpr64 = LDRDui %stack.8.t_total, 0, debug-location !717 :: (dereferenceable load 8 from %ir.t_total); is.c:687:13
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   %90:fpr64 = LDRDui %stack.8.t_total, 0, debug-location !717 :: (dereferenceable load 8 from %ir.t_total); is.c:687:13
SU(1):   FCMPDri %90:fpr64, implicit-def $nzcv, debug-location !720; is.c:687:13

********** MI Scheduling **********
main:%bb.25 if.then54
  From: %88:gpr64 = MOVaddr target-flags(aarch64-page) @.str.20, target-flags(aarch64-pageoff, aarch64-nc) @.str.20, debug-location !716; is.c:686:9
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !716; is.c:686:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %88:gpr64 = MOVaddr target-flags(aarch64-page) @.str.20, target-flags(aarch64-pageoff, aarch64-nc) @.str.20, debug-location !716; is.c:686:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%88
  Single Issue       : false;
SU(1):   $x0 = COPY %88:gpr64, debug-location !716; is.c:686:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%88
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %87:fpr64, debug-location !716; is.c:686:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !716; is.c:686:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $d0 = COPY %87:fpr64, debug-location !716; is.c:686:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %88:gpr64, debug-location !716; is.c:686:9
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %88:gpr64 = MOVaddr target-flags(aarch64-page) @.str.20, target-flags(aarch64-pageoff, aarch64-nc) @.str.20, debug-location !716; is.c:686:9
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   %88:gpr64 = MOVaddr target-flags(aarch64-page) @.str.20, target-flags(aarch64-pageoff, aarch64-nc) @.str.20, debug-location !716; is.c:686:9
SU(1):   $x0 = COPY %88:gpr64, debug-location !716; is.c:686:9
SU(2):   $d0 = COPY %87:fpr64, debug-location !716; is.c:686:9

********** MI Scheduling **********
main:%bb.25 if.then54
  From: %85:gpr64 = MOVaddr target-flags(aarch64-page) @.str.19, target-flags(aarch64-pageoff, aarch64-nc) @.str.19, debug-location !714; is.c:685:9
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !714; is.c:685:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %85:gpr64 = MOVaddr target-flags(aarch64-page) @.str.19, target-flags(aarch64-pageoff, aarch64-nc) @.str.19, debug-location !714; is.c:685:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%85
  Single Issue       : false;
SU(1):   $x0 = COPY %85:gpr64, debug-location !714; is.c:685:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%85
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !714; is.c:685:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %85:gpr64, debug-location !714; is.c:685:9
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %85:gpr64 = MOVaddr target-flags(aarch64-page) @.str.19, target-flags(aarch64-pageoff, aarch64-nc) @.str.19, debug-location !714; is.c:685:9
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   %85:gpr64 = MOVaddr target-flags(aarch64-page) @.str.19, target-flags(aarch64-pageoff, aarch64-nc) @.str.19, debug-location !714; is.c:685:9
SU(1):   $x0 = COPY %85:gpr64, debug-location !714; is.c:685:9

********** MI Scheduling **********
main:%bb.25 if.then54
  From: %84:fpr64 = COPY $d0, debug-location !712; is.c:684:19
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !714; is.c:685:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %84:fpr64 = COPY $d0, debug-location !712; is.c:684:19
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%84
  Single Issue       : false;
SU(1):   STRDui %84:fpr64, %stack.8.t_total, 0, debug-location !713 :: (store 8 into %ir.t_total); is.c:684:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%84
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !714; is.c:685:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %84:fpr64, %stack.8.t_total, 0, debug-location !713 :: (store 8 into %ir.t_total); is.c:684:17
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %84:fpr64 = COPY $d0, debug-location !712; is.c:684:19
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   %84:fpr64 = COPY $d0, debug-location !712; is.c:684:19
SU(1):   STRDui %84:fpr64, %stack.8.t_total, 0, debug-location !713 :: (store 8 into %ir.t_total); is.c:684:17

********** MI Scheduling **********
main:%bb.26 if.then59
  From: %91:gpr64 = MOVi64imm 4607182418800017408
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %91:gpr64 = MOVi64imm 4607182418800017408
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%91
  Single Issue       : false;
SU(1):   STRXui %91:gpr64, %stack.8.t_total, 0, debug-location !721 :: (store 8 into %ir.t_total); is.c:688:21
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%91
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRXui %91:gpr64, %stack.8.t_total, 0, debug-location !721 :: (store 8 into %ir.t_total); is.c:688:21
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %91:gpr64 = MOVi64imm 4607182418800017408
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.26 ***
SU(0):   %91:gpr64 = MOVi64imm 4607182418800017408
SU(1):   STRXui %91:gpr64, %stack.8.t_total, 0, debug-location !721 :: (store 8 into %ir.t_total); is.c:688:21

********** MI Scheduling **********
main:%bb.27 if.end60
  From: %113:gpr64 = MOVaddr target-flags(aarch64-page) @.str.23, target-flags(aarch64-pageoff, aarch64-nc) @.str.23, debug-location !752; is.c:697:9
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0, debug-location !752; is.c:697:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %113:gpr64 = MOVaddr target-flags(aarch64-page) @.str.23, target-flags(aarch64-pageoff, aarch64-nc) @.str.23, debug-location !752; is.c:697:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%113
  Single Issue       : false;
SU(1):   $x0 = COPY %113:gpr64, debug-location !752; is.c:697:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%113
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %109:fpr64, debug-location !752; is.c:697:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $d1 = COPY %112:fpr64, debug-location !752; is.c:697:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0, debug-location !752; is.c:697:9
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $d1 = COPY %112:fpr64, debug-location !752; is.c:697:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(2) $d0 = COPY %109:fpr64, debug-location !752; is.c:697:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %113:gpr64, debug-location !752; is.c:697:9
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %113:gpr64 = MOVaddr target-flags(aarch64-page) @.str.23, target-flags(aarch64-pageoff, aarch64-nc) @.str.23, debug-location !752; is.c:697:9
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   %113:gpr64 = MOVaddr target-flags(aarch64-page) @.str.23, target-flags(aarch64-pageoff, aarch64-nc) @.str.23, debug-location !752; is.c:697:9
SU(1):   $x0 = COPY %113:gpr64, debug-location !752; is.c:697:9
SU(2):   $d0 = COPY %109:fpr64, debug-location !752; is.c:697:9
SU(3):   $d1 = COPY %112:fpr64, debug-location !752; is.c:697:9

********** MI Scheduling **********
main:%bb.27 if.end60
  From: %109:fpr64 = COPY $d0, debug-location !743; is.c:695:23
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !752; is.c:697:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %109:fpr64 = COPY $d0, debug-location !743; is.c:695:23
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Data Latency=0 Reg=%109
    SU(1): Data Latency=0 Reg=%109
  Single Issue       : false;
SU(1):   STRDui %109:fpr64, %stack.6.timecounter, 0, debug-location !744 :: (store 8 into %ir.timecounter); is.c:695:21
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%109
  Single Issue       : false;
SU(2):   %110:fpr64 = LDRDui %stack.8.t_total, 0, debug-location !746 :: (dereferenceable load 8 from %ir.t_total); is.c:696:35
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(3): Data Latency=4 Reg=%110
  Single Issue       : false;
SU(3):   %111:fpr64 = FDIVDrr %109:fpr64, %110:fpr64, debug-location !747; is.c:696:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(2): Data Latency=4 Reg=%110
    SU(0): Data Latency=0 Reg=%109
  Successors:
    SU(4): Data Latency=1 Reg=%111
  Single Issue       : false;
SU(4):   %112:fpr64 = FMULDrr %111:fpr64, %97:fpr64, debug-location !748; is.c:696:43
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(3): Data Latency=1 Reg=%111
  Successors:
    SU(5): Data Latency=1 Reg=%112
  Single Issue       : false;
SU(5):   STRDui %112:fpr64, %stack.9.t_percent, 0, debug-location !749 :: (store 8 into %ir.t_percent); is.c:696:19
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%112
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !752; is.c:697:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %109:fpr64 = COPY $d0, debug-location !743; is.c:695:23
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) STRDui %112:fpr64, %stack.9.t_percent, 0, debug-location !749 :: (store 8 into %ir.t_percent); is.c:696:19
  Ready @0c
  BotQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
BotQ.A RemLatency SU(4) 5c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %112:fpr64 = FMULDrr %111:fpr64, %97:fpr64, debug-location !748; is.c:696:43
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
BotQ.A RemLatency SU(3) 4c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %111:fpr64 = FDIVDrr %109:fpr64, %110:fpr64, debug-location !747; is.c:696:33
  Ready @2c
  BotQ.A BotLatency SU(3) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %109:fpr64, %stack.6.timecounter, 0, debug-location !744 :: (store 8 into %ir.timecounter); is.c:695:21
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %110:fpr64 = LDRDui %stack.8.t_total, 0, debug-location !746 :: (dereferenceable load 8 from %ir.t_total); is.c:696:35
  Ready @6c
  BotQ.A BotLatency SU(2) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   %109:fpr64 = COPY $d0, debug-location !743; is.c:695:23
SU(2):   %110:fpr64 = LDRDui %stack.8.t_total, 0, debug-location !746 :: (dereferenceable load 8 from %ir.t_total); is.c:696:35
SU(1):   STRDui %109:fpr64, %stack.6.timecounter, 0, debug-location !744 :: (store 8 into %ir.timecounter); is.c:695:21
SU(3):   %111:fpr64 = FDIVDrr %109:fpr64, %110:fpr64, debug-location !747; is.c:696:33
SU(4):   %112:fpr64 = FMULDrr %111:fpr64, %97:fpr64, debug-location !748; is.c:696:43
SU(5):   STRDui %112:fpr64, %stack.9.t_percent, 0, debug-location !749 :: (store 8 into %ir.t_percent); is.c:696:19

********** MI Scheduling **********
main:%bb.27 if.end60
  From: %106:gpr64 = MOVaddr target-flags(aarch64-page) @.str.22, target-flags(aarch64-pageoff, aarch64-nc) @.str.22, debug-location !742; is.c:694:9
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0, debug-location !742; is.c:694:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %106:gpr64 = MOVaddr target-flags(aarch64-page) @.str.22, target-flags(aarch64-pageoff, aarch64-nc) @.str.22, debug-location !742; is.c:694:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%106
  Single Issue       : false;
SU(1):   $x0 = COPY %106:gpr64, debug-location !742; is.c:694:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%106
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %102:fpr64, debug-location !742; is.c:694:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $d1 = COPY %105:fpr64, debug-location !742; is.c:694:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0, debug-location !742; is.c:694:9
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $d1 = COPY %105:fpr64, debug-location !742; is.c:694:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(2) $d0 = COPY %102:fpr64, debug-location !742; is.c:694:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %106:gpr64, debug-location !742; is.c:694:9
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %106:gpr64 = MOVaddr target-flags(aarch64-page) @.str.22, target-flags(aarch64-pageoff, aarch64-nc) @.str.22, debug-location !742; is.c:694:9
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   %106:gpr64 = MOVaddr target-flags(aarch64-page) @.str.22, target-flags(aarch64-pageoff, aarch64-nc) @.str.22, debug-location !742; is.c:694:9
SU(1):   $x0 = COPY %106:gpr64, debug-location !742; is.c:694:9
SU(2):   $d0 = COPY %102:fpr64, debug-location !742; is.c:694:9
SU(3):   $d1 = COPY %105:fpr64, debug-location !742; is.c:694:9

********** MI Scheduling **********
main:%bb.27 if.end60
  From: %102:fpr64 = COPY $d0, debug-location !733; is.c:692:23
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !742; is.c:694:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %102:fpr64 = COPY $d0, debug-location !733; is.c:692:23
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Data Latency=0 Reg=%102
    SU(1): Data Latency=0 Reg=%102
  Single Issue       : false;
SU(1):   STRDui %102:fpr64, %stack.6.timecounter, 0, debug-location !734 :: (store 8 into %ir.timecounter); is.c:692:21
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%102
  Single Issue       : false;
SU(2):   %103:fpr64 = LDRDui %stack.8.t_total, 0, debug-location !736 :: (dereferenceable load 8 from %ir.t_total); is.c:693:35
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(3): Data Latency=4 Reg=%103
  Single Issue       : false;
SU(3):   %104:fpr64 = FDIVDrr %102:fpr64, %103:fpr64, debug-location !737; is.c:693:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(2): Data Latency=4 Reg=%103
    SU(0): Data Latency=0 Reg=%102
  Successors:
    SU(4): Data Latency=1 Reg=%104
  Single Issue       : false;
SU(4):   %105:fpr64 = FMULDrr %104:fpr64, %97:fpr64, debug-location !738; is.c:693:43
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(3): Data Latency=1 Reg=%104
  Successors:
    SU(5): Data Latency=1 Reg=%105
  Single Issue       : false;
SU(5):   STRDui %105:fpr64, %stack.9.t_percent, 0, debug-location !739 :: (store 8 into %ir.t_percent); is.c:693:19
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%105
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !742; is.c:694:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %102:fpr64 = COPY $d0, debug-location !733; is.c:692:23
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) STRDui %105:fpr64, %stack.9.t_percent, 0, debug-location !739 :: (store 8 into %ir.t_percent); is.c:693:19
  Ready @0c
  BotQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
BotQ.A RemLatency SU(4) 5c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %105:fpr64 = FMULDrr %104:fpr64, %97:fpr64, debug-location !738; is.c:693:43
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
BotQ.A RemLatency SU(3) 4c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %104:fpr64 = FDIVDrr %102:fpr64, %103:fpr64, debug-location !737; is.c:693:33
  Ready @2c
  BotQ.A BotLatency SU(3) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %102:fpr64, %stack.6.timecounter, 0, debug-location !734 :: (store 8 into %ir.timecounter); is.c:692:21
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %103:fpr64 = LDRDui %stack.8.t_total, 0, debug-location !736 :: (dereferenceable load 8 from %ir.t_total); is.c:693:35
  Ready @6c
  BotQ.A BotLatency SU(2) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   %102:fpr64 = COPY $d0, debug-location !733; is.c:692:23
SU(2):   %103:fpr64 = LDRDui %stack.8.t_total, 0, debug-location !736 :: (dereferenceable load 8 from %ir.t_total); is.c:693:35
SU(1):   STRDui %102:fpr64, %stack.6.timecounter, 0, debug-location !734 :: (store 8 into %ir.timecounter); is.c:692:21
SU(3):   %104:fpr64 = FDIVDrr %102:fpr64, %103:fpr64, debug-location !737; is.c:693:33
SU(4):   %105:fpr64 = FMULDrr %104:fpr64, %97:fpr64, debug-location !738; is.c:693:43
SU(5):   STRDui %105:fpr64, %stack.9.t_percent, 0, debug-location !739 :: (store 8 into %ir.t_percent); is.c:693:19

********** MI Scheduling **********
main:%bb.27 if.end60
  From: %99:gpr64 = MOVaddr target-flags(aarch64-page) @.str.21, target-flags(aarch64-pageoff, aarch64-nc) @.str.21, debug-location !732; is.c:691:9
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0, debug-location !732; is.c:691:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %99:gpr64 = MOVaddr target-flags(aarch64-page) @.str.21, target-flags(aarch64-pageoff, aarch64-nc) @.str.21, debug-location !732; is.c:691:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%99
  Single Issue       : false;
SU(1):   $x0 = COPY %99:gpr64, debug-location !732; is.c:691:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%99
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %93:fpr64, debug-location !732; is.c:691:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $d1 = COPY %98:fpr64, debug-location !732; is.c:691:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0, debug-location !732; is.c:691:9
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $d1 = COPY %98:fpr64, debug-location !732; is.c:691:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(2) $d0 = COPY %93:fpr64, debug-location !732; is.c:691:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %99:gpr64, debug-location !732; is.c:691:9
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %99:gpr64 = MOVaddr target-flags(aarch64-page) @.str.21, target-flags(aarch64-pageoff, aarch64-nc) @.str.21, debug-location !732; is.c:691:9
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   %99:gpr64 = MOVaddr target-flags(aarch64-page) @.str.21, target-flags(aarch64-pageoff, aarch64-nc) @.str.21, debug-location !732; is.c:691:9
SU(1):   $x0 = COPY %99:gpr64, debug-location !732; is.c:691:9
SU(2):   $d0 = COPY %93:fpr64, debug-location !732; is.c:691:9
SU(3):   $d1 = COPY %98:fpr64, debug-location !732; is.c:691:9

********** MI Scheduling **********
main:%bb.27 if.end60
  From: %93:fpr64 = COPY $d0, debug-location !723; is.c:689:23
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !732; is.c:691:9
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Constraining copy SU(5)
SU(0):   %93:fpr64 = COPY $d0, debug-location !723; is.c:689:23
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Data Latency=0 Reg=%93
    SU(1): Data Latency=0 Reg=%93
  Single Issue       : false;
SU(1):   STRDui %93:fpr64, %stack.6.timecounter, 0, debug-location !724 :: (store 8 into %ir.timecounter); is.c:689:21
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%93
  Single Issue       : false;
SU(2):   %94:fpr64 = LDRDui %stack.8.t_total, 0, debug-location !726 :: (dereferenceable load 8 from %ir.t_total); is.c:690:35
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(3): Data Latency=4 Reg=%94
  Single Issue       : false;
SU(3):   %95:fpr64 = FDIVDrr %93:fpr64, %94:fpr64, debug-location !727; is.c:690:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(2): Data Latency=4 Reg=%94
    SU(0): Data Latency=0 Reg=%93
  Successors:
    SU(6): Data Latency=1 Reg=%95
  Single Issue       : false;
SU(4):   %96:gpr64 = MOVi64imm 4636737291354636288
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Data Latency=1 Reg=%96
  Single Issue       : false;
SU(5):   %97:fpr64 = COPY %96:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%96
  Successors:
    SU(6): Data Latency=0 Reg=%97
  Single Issue       : false;
SU(6):   %98:fpr64 = FMULDrr %95:fpr64, %97:fpr64, debug-location !728; is.c:690:43
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(3): Data Latency=1 Reg=%95
    SU(5): Data Latency=0 Reg=%97
  Successors:
    SU(7): Data Latency=1 Reg=%98
  Single Issue       : false;
SU(7):   STRDui %98:fpr64, %stack.9.t_percent, 0, debug-location !729 :: (store 8 into %ir.t_percent); is.c:690:19
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%98
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !732; is.c:691:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %93:fpr64 = COPY $d0, debug-location !723; is.c:689:23
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 1 
Queue TopQ.P: 
Queue TopQ.A: 4 2 1 
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(4) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) STRDui %98:fpr64, %stack.9.t_percent, 0, debug-location !729 :: (store 8 into %ir.t_percent); is.c:690:19
  Ready @0c
  BotQ.A TopLatency SU(7) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 6 
Queue TopQ.P: 
Queue TopQ.A: 4 2 1 
BotQ.A RemLatency SU(6) 5c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %98:fpr64 = FMULDrr %95:fpr64, %97:fpr64, debug-location !728; is.c:690:43
  Ready @1c
  BotQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 
Queue TopQ.P: 
Queue TopQ.A: 4 2 1 
BotQ.A RemLatency SU(3) 4c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %97:fpr64 = COPY %96:gpr64
  Ready @2c
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 1 3 
Queue TopQ.P: 
Queue TopQ.A: 4 2 1 
BotQ.A RemLatency SU(3) 4c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %95:fpr64 = FDIVDrr %93:fpr64, %94:fpr64, debug-location !727; is.c:690:33
  Ready @2c
  BotQ.A BotLatency SU(3) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 4 
Queue TopQ.P: 
Queue TopQ.A: 4 2 1 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %96:gpr64 = MOVi64imm 4636737291354636288
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %93:fpr64, %stack.6.timecounter, 0, debug-location !724 :: (store 8 into %ir.timecounter); is.c:689:21
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %94:fpr64 = LDRDui %stack.8.t_total, 0, debug-location !726 :: (dereferenceable load 8 from %ir.t_total); is.c:690:35
  Ready @6c
  BotQ.A BotLatency SU(2) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   %93:fpr64 = COPY $d0, debug-location !723; is.c:689:23
SU(2):   %94:fpr64 = LDRDui %stack.8.t_total, 0, debug-location !726 :: (dereferenceable load 8 from %ir.t_total); is.c:690:35
SU(1):   STRDui %93:fpr64, %stack.6.timecounter, 0, debug-location !724 :: (store 8 into %ir.timecounter); is.c:689:21
SU(4):   %96:gpr64 = MOVi64imm 4636737291354636288
SU(3):   %95:fpr64 = FDIVDrr %93:fpr64, %94:fpr64, debug-location !727; is.c:690:33
SU(5):   %97:fpr64 = COPY %96:gpr64
SU(6):   %98:fpr64 = FMULDrr %95:fpr64, %97:fpr64, debug-location !728; is.c:690:43
SU(7):   STRDui %98:fpr64, %stack.9.t_percent, 0, debug-location !729 :: (store 8 into %ir.t_percent); is.c:690:19

********** INTERVALS **********
WSP [128r,128d:101)[208r,208d:100)[224r,224d:99)[336r,336d:98)[368r,368d:97)[384r,384d:96)[448r,448d:95)[496r,496d:94)[512r,512d:93)[592r,592d:92)[640r,640d:91)[656r,656d:90)[672r,672d:89)[720r,720d:88)[736r,736d:87)[752r,752d:86)[800r,800d:85)[816r,816d:84)[912r,912d:83)[960r,960d:82)[976r,976d:81)[1376r,1376d:80)[1424r,1424d:79)[1440r,1440d:78)[1456r,1456d:77)[1584r,1584d:76)[1600r,1600d:75)[1616r,1616d:74)[1696r,1696d:73)[1712r,1712d:72)[1792r,1792d:71)[1840r,1840d:70)[1856r,1856d:69)[1888r,1888d:68)[2000r,2000d:67)[2016r,2016d:66)[2096r,2096d:65)[2144r,2144d:64)[2160r,2160d:63)[2192r,2192d:62)[2240r,2240d:61)[2256r,2256d:60)[2320r,2320d:59)[2368r,2368d:58)[2384r,2384d:57)[2400r,2400d:56)[2432r,2432d:55)[2448r,2448d:54)[2608r,2608d:5)[2656r,2656d:4)[2672r,2672d:3)[2704r,2704d:2)[2736r,2736d:1)[2752r,2752d:0)[2848r,2848d:53)[2896r,2896d:52)[2912r,2912d:51)[2928r,2928d:50)[2960r,2960d:49)[2976r,2976d:48)[3088r,3088d:47)[3136r,3136d:46)[3152r,3152d:45)[3184r,3184d:44)[3200r,3200d:43)[3216r,3216d:42)[3296r,3296d:41)[3344r,3344d:40)[3360r,3360d:39)[3456r,3456d:38)[3504r,3504d:37)[3520r,3520d:36)[3824r,3824d:35)[4368r,4368d:34)[4384r,4384d:33)[4464r,4464d:32)[4512r,4512d:31)[4528r,4528d:30)[4576r,4576d:29)[4624r,4624d:28)[4640r,4640d:27)[4672r,4672d:26)[4736r,4736d:25)[4752r,4752d:24)[4896r,4896d:23)[4944r,4944d:22)[4960r,4960d:21)[5104r,5104d:20)[5184r,5184d:19)[5200r,5200d:18)[5216r,5216d:17)[5264r,5264d:16)[5280r,5280d:15)[5392r,5392d:14)[5472r,5472d:13)[5488r,5488d:12)[5504r,5504d:11)[5552r,5552d:10)[5568r,5568d:9)[5680r,5680d:8)[5760r,5760d:7)[5776r,5776d:6)  0@2752r 1@2736r 2@2704r 3@2672r 4@2656r 5@2608r 6@5776r 7@5760r 8@5680r 9@5568r 10@5552r 11@5504r 12@5488r 13@5472r 14@5392r 15@5280r 16@5264r 17@5216r 18@5200r 19@5184r 20@5104r 21@4960r 22@4944r 23@4896r 24@4752r 25@4736r 26@4672r 27@4640r 28@4624r 29@4576r 30@4528r 31@4512r 32@4464r 33@4384r 34@4368r 35@3824r 36@3520r 37@3504r 38@3456r 39@3360r 40@3344r 41@3296r 42@3216r 43@3200r 44@3184r 45@3152r 46@3136r 47@3088r 48@2976r 49@2960r 50@2928r 51@2912r 52@2896r 53@2848r 54@2448r 55@2432r 56@2400r 57@2384r 58@2368r 59@2320r 60@2256r 61@2240r 62@2192r 63@2160r 64@2144r 65@2096r 66@2016r 67@2000r 68@1888r 69@1856r 70@1840r 71@1792r 72@1712r 73@1696r 74@1616r 75@1600r 76@1584r 77@1456r 78@1440r 79@1424r 80@1376r 81@976r 82@960r 83@912r 84@816r 85@800r 86@752r 87@736r 88@720r 89@672r 90@656r 91@640r 92@592r 93@512r 94@496r 95@448r 96@384r 97@368r 98@336r 99@224r 100@208r 101@128r
B0 [1968r,2000r:10)[2960r,3028r:9)[4304r,4368r:8)[4512r,4544r:7)[4720r,4736r:6)[4944r,4976r:5)[5152r,5184r:4)[5264r,5296r:3)[5440r,5472r:2)[5552r,5584r:1)[5728r,5760r:0)  0@5728r 1@5552r 2@5440r 3@5264r 4@5152r 5@4944r 6@4720r 7@4512r 8@4304r 9@2960r 10@1968r
W0 [0B,32r:0)[176r,208r:45)[208r,240r:44)[352r,368r:43)[368r,368d:31)[480r,496r:30)[624r,640r:29)[704r,720r:28)[784r,800r:27)[944r,960r:26)[1408r,1424r:42)[1424r,1424d:25)[1576r,1584r:41)[1584r,1584d:24)[1688r,1696r:40)[1696r,1696d:23)[1824r,1840r:22)[2128r,2144r:21)[2224r,2240r:20)[2352r,2368r:39)[2368r,2368d:19)[2416r,2432r:18)[2624r,2656r:32)[2656r,2656d:2)[2720r,2736r:1)[2880r,2896r:17)[2944r,2960r:16)[3120r,3136r:15)[3328r,3344r:14)[3488r,3504r:13)[4324r,4368r:38)[4496r,4512r:12)[4608r,4624r:37)[4624r,4624d:11)[4704r,4736r:36)[4736r,4736d:10)[4928r,4944r:9)[5136r,5184r:35)[5184r,5184d:8)[5248r,5264r:7)[5424r,5472r:34)[5472r,5472d:6)[5536r,5552r:5)[5712r,5760r:33)[5760r,5760d:4)[5824r,5840r:3)  0@0B-phi 1@2720r 2@2656r 3@5824r 4@5760r 5@5536r 6@5472r 7@5248r 8@5184r 9@4928r 10@4736r 11@4624r 12@4496r 13@3488r 14@3328r 15@3120r 16@2944r 17@2880r 18@2416r 19@2368r 20@2224r 21@2128r 22@1824r 23@1696r 24@1584r 25@1424r 26@944r 27@784r 28@704r 29@624r 30@480r 31@368r 32@2624r 33@5712r 34@5424r 35@5136r 36@4704r 37@4608r 38@4324r 39@2352r 40@1688r 41@1576r 42@1408r 43@352r 44@208r 45@176r
W1 [0B,16r:0)[192r,208r:5)[1552r,1584r:4)[1680r,1696r:3)[2640r,2656r:1)[4224r,4368r:2)  0@0B-phi 1@2640r 2@4224r 3@1680r 4@1552r 5@192r
W4 [4328r,4368r:0)  0@4328r
%0 [32r,80r:0)  0@32r weight:0.000000e+00
%1 [16r,96r:0)  0@16r weight:0.000000e+00
%3 [144r,176r:0)  0@144r weight:0.000000e+00
%4 [160r,192r:0)  0@160r weight:0.000000e+00
%5 [240r,272r:0)  0@240r weight:0.000000e+00
%6 [320r,352r:0)  0@320r weight:0.000000e+00
%8 [400r,416r:0)  0@400r weight:0.000000e+00
%10 [528r,544r:0)  0@528r weight:0.000000e+00
%14 [848r,864r:0)  0@848r weight:0.000000e+00
%17 [1120r,1136r:0)  0@1120r weight:0.000000e+00
%19 [1392r,1408r:0)  0@1392r weight:0.000000e+00
%21 [1472r,1576r:0)  0@1472r weight:0.000000e+00
%26 [1632r,1688r:0)  0@1632r weight:0.000000e+00
%29 [1728r,1744r:0)  0@1728r weight:0.000000e+00
%31 [1904r,1944r:0)  0@1904r weight:0.000000e+00
%32 [1944r,1968r:0)  0@1944r weight:0.000000e+00
%33 [1936r,1952r:0)  0@1936r weight:0.000000e+00
%34 [1952r,1984r:0)  0@1952r weight:0.000000e+00
%35 [2032r,2048r:0)  0@2032r weight:0.000000e+00
%37 [2232r,2464r:0)  0@2232r weight:0.000000e+00
%38 [2272r,3792r:0)  0@2272r weight:0.000000e+00
%40 [2336r,2352r:0)  0@2336r weight:0.000000e+00
%42 [2512r,2528r:0)  0@2512r weight:0.000000e+00
%45 [3028r,3032r:0)  0@3028r weight:0.000000e+00
%46 [3024r,3040r:0)  0@3024r weight:0.000000e+00
%48 [3232r,3248r:0)  0@3232r weight:0.000000e+00
%50 [3392r,3408r:0)  0@3392r weight:0.000000e+00
%53 [3552r,3568r:0)  0@3552r weight:0.000000e+00
%57 [3680r,4304r:0)  0@3680r weight:0.000000e+00
%58 [3696r,3712r:0)  0@3696r weight:0.000000e+00
%59 [3712r,3800r:0)  0@3712r weight:0.000000e+00
%60 [3800r,3816r:0)  0@3800r weight:0.000000e+00
%61 [3796r,3808r:0)  0@3796r weight:0.000000e+00
%62 [3808r,3816r:0)  0@3808r weight:0.000000e+00
%63 [3816r,4320r:0)  0@3816r weight:0.000000e+00
%65 [3792r,4352r:0)  0@3792r weight:0.000000e+00
%66 [3832r,4104r:0)  0@3832r weight:0.000000e+00
%68 [3872r,4100r:0)  0@3872r weight:0.000000e+00
%69 [3904r,4128r:0)  0@3904r weight:0.000000e+00
%70 [3936r,4120r:0)  0@3936r weight:0.000000e+00
%71 [3968r,4144r:0)  0@3968r weight:0.000000e+00
%72 [4000r,4136r:0)  0@4000r weight:0.000000e+00
%73 [4032r,4296r:0)  0@4032r weight:0.000000e+00
%74 [4064r,4152r:0)  0@4064r weight:0.000000e+00
%75 [4096r,4324r:0)  0@4096r weight:0.000000e+00
%76 [4112r,4336r:0)  0@4112r weight:0.000000e+00
%82 [4400r,4416r:0)  0@4400r weight:0.000000e+00
%84 [4544r,4560r:0)  0@4544r weight:0.000000e+00
%85 [4592r,4608r:0)  0@4592r weight:0.000000e+00
%87 [4656r,4720r:0)  0@4656r weight:0.000000e+00
%88 [4688r,4704r:0)  0@4688r weight:0.000000e+00
%90 [4768r,4784r:0)  0@4768r weight:0.000000e+00
%91 [4848r,4864r:0)  0@4848r weight:0.000000e+00
%93 [4976r,5152r:0)  0@4976r weight:0.000000e+00
%94 [5008r,5048r:0)  0@5008r weight:0.000000e+00
%95 [5048r,5072r:0)  0@5048r weight:0.000000e+00
%96 [5040r,5056r:0)  0@5040r weight:0.000000e+00
%97 [5056r,5648r:0)  0@5056r weight:0.000000e+00
%98 [5072r,5168r:0)  0@5072r weight:0.000000e+00
%99 [5120r,5136r:0)  0@5120r weight:0.000000e+00
%102 [5296r,5440r:0)  0@5296r weight:0.000000e+00
%103 [5328r,5344r:0)  0@5328r weight:0.000000e+00
%104 [5344r,5360r:0)  0@5344r weight:0.000000e+00
%105 [5360r,5456r:0)  0@5360r weight:0.000000e+00
%106 [5408r,5424r:0)  0@5408r weight:0.000000e+00
%109 [5584r,5728r:0)  0@5584r weight:0.000000e+00
%110 [5616r,5632r:0)  0@5616r weight:0.000000e+00
%111 [5632r,5648r:0)  0@5632r weight:0.000000e+00
%112 [5648r,5744r:0)  0@5648r weight:0.000000e+00
%113 [5696r,5712r:0)  0@5696r weight:0.000000e+00
%116 [2592r,2640r:0)  0@2592r weight:0.000000e+00
%117 [2480r,2832B:0)  0@2480r weight:0.000000e+00
%119 [2688r,2720r:0)  0@2688r weight:0.000000e+00
%120 [2768r,2784r:0)  0@2768r weight:0.000000e+00
%121 [2784r,2800r:0)  0@2784r weight:0.000000e+00
%122 [1200r,1312r:0)  0@1200r weight:0.000000e+00
%124 [1040r,1360B:0)  0@1040r weight:0.000000e+00
%125 [1232r,1320r:0)  0@1232r weight:0.000000e+00
%126 [1248r,1316r:0)  0@1248r weight:0.000000e+00
%127 [1056r,1360B:0)  0@1056r weight:0.000000e+00
%128 [1072r,1360B:0)  0@1072r weight:0.000000e+00
%129 [1280r,1320r:0)  0@1280r weight:0.000000e+00
%130 [1088r,1360B:0)  0@1088r weight:0.000000e+00
%131 [1312r,1328r:0)  0@1312r weight:0.000000e+00
RegMasks: 208r 368r 496r 640r 720r 800r 960r 1424r 1584r 1696r 1840r 2000r 2144r 2240r 2368r 2432r 2656r 2736r 2896r 2960r 3136r 3200r 3344r 3504r 4368r 4512r 4624r 4736r 4944r 5184r 5264r 5472r 5552r 5760r
********** MACHINEINSTRS **********
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
  fi#6: size=8, align=8, at location [SP]
  fi#7: size=8, align=8, at location [SP]
  fi#8: size=8, align=8, at location [SP]
  fi#9: size=8, align=8, at location [SP]
Constant Pool:
  cp#0: 0x41B2B9B0A1000000, align=8
  cp#1: 0x41D2309CE5400000, align=8
Function Live Ins: $w0 in %0, $x1 in %1

0B	bb.0.entry:
	  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
	  liveins: $w0, $x1
16B	  %1:gpr64 = COPY $x1
32B	  %0:gpr32 = COPY $w0
64B	  STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
80B	  STRWui %0:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
96B	  STRXui %1:gpr64, %stack.2.argv.addr, 0 :: (store 8 into %ir.argv.addr)
112B	  STRWui $wzr, %stack.5.timer_on, 0, debug-location !597 :: (store 4 into %ir.timer_on); is.c:572:14
128B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !598; is.c:573:15
144B	  %3:gpr64 = MOVaddr target-flags(aarch64-page) @.str.2, target-flags(aarch64-pageoff, aarch64-nc) @.str.2, debug-location !598; is.c:573:15
160B	  %4:gpr64 = MOVaddr target-flags(aarch64-page) @.str.3, target-flags(aarch64-pageoff, aarch64-nc) @.str.3, debug-location !598; is.c:573:15
176B	  $x0 = COPY %3:gpr64, debug-location !598; is.c:573:15
192B	  $x1 = COPY %4:gpr64, debug-location !598; is.c:573:15
208B	  BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0, debug-location !598; is.c:573:15
224B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !598; is.c:573:15
240B	  %5:gpr64 = COPY $x0, debug-location !598; is.c:573:15
256B	  STRXui %5:gpr64, %stack.7.fp, 0, debug-location !600 :: (store 8 into %ir.fp); is.c:573:13
272B	  CBZX %5:gpr64, %bb.2, debug-location !602; is.c:573:9
288B	  B %bb.1, debug-location !602; is.c:573:9

304B	bb.1.if.then:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

320B	  %6:gpr64 = LDRXui %stack.7.fp, 0, debug-location !603 :: (dereferenceable load 8 from %ir.fp); is.c:574:16
336B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !605; is.c:574:9
352B	  $x0 = COPY %6:gpr64, debug-location !605; is.c:574:9
368B	  BL @fclose, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !605; is.c:574:9
384B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !605; is.c:574:9
400B	  %8:gpr32 = MOVi32imm 1
416B	  STRWui %8:gpr32, %stack.5.timer_on, 0, debug-location !606 :: (store 4 into %ir.timer_on); is.c:575:18

432B	bb.2.if.end:
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3(0x50000000), %bb.4(0x30000000); %bb.3(62.50%), %bb.4(37.50%)

448B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !608; is.c:577:5
480B	  $w0 = COPY $wzr, debug-location !608; is.c:577:5
496B	  BL @timer_clear, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !608; is.c:577:5
512B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !608; is.c:577:5
528B	  %10:gpr32 = LDRWui %stack.5.timer_on, 0, debug-location !609 :: (dereferenceable load 4 from %ir.timer_on); is.c:578:9
544B	  CBZW %10:gpr32, %bb.4, debug-location !611; is.c:578:9
560B	  B %bb.3, debug-location !611; is.c:578:9

576B	bb.3.if.then2:
	; predecessors: %bb.2
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

592B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !612; is.c:579:9
624B	  $w0 = MOVi32imm 1, debug-location !612; is.c:579:9
640B	  BL @timer_clear, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !612; is.c:579:9
656B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !612; is.c:579:9
672B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !614; is.c:580:9
704B	  $w0 = MOVi32imm 2, debug-location !614; is.c:580:9
720B	  BL @timer_clear, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !614; is.c:580:9
736B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !614; is.c:580:9
752B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !615; is.c:581:9
784B	  $w0 = MOVi32imm 3, debug-location !615; is.c:581:9
800B	  BL @timer_clear, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !615; is.c:581:9
816B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !615; is.c:581:9

832B	bb.4.if.end3:
	; predecessors: %bb.2, %bb.3
	  successors: %bb.5(0x50000000), %bb.6(0x30000000); %bb.5(62.50%), %bb.6(37.50%)

848B	  %14:gpr32 = LDRWui %stack.5.timer_on, 0, debug-location !617 :: (dereferenceable load 4 from %ir.timer_on); is.c:584:9
864B	  CBZW %14:gpr32, %bb.6, debug-location !619; is.c:584:9
880B	  B %bb.5, debug-location !619; is.c:584:9

896B	bb.5.if.then5:
	; predecessors: %bb.4
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

912B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !620; is.c:585:9
944B	  $w0 = MOVi32imm 3, debug-location !620; is.c:585:9
960B	  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !620; is.c:585:9
976B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !620; is.c:585:9

992B	bb.6.if.end6:
	; predecessors: %bb.4, %bb.5
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

1024B	  STRWui $wzr, %stack.3.i, 0, debug-location !621 :: (store 4 into %ir.i); is.c:588:12
1040B	  %124:gpr64common = MOVaddr target-flags(aarch64-page) @B_test_index_array, target-flags(aarch64-pageoff, aarch64-nc) @B_test_index_array
1056B	  %127:gpr64common = MOVaddr target-flags(aarch64-page) @test_index_array, target-flags(aarch64-pageoff, aarch64-nc) @test_index_array
1072B	  %128:gpr64common = MOVaddr target-flags(aarch64-page) @B_test_rank_array, target-flags(aarch64-pageoff, aarch64-nc) @B_test_rank_array
1088B	  %130:gpr64common = MOVaddr target-flags(aarch64-page) @test_rank_array, target-flags(aarch64-pageoff, aarch64-nc) @test_rank_array

1104B	bb.7.for.cond:
	; predecessors: %bb.6, %bb.8
	  successors: %bb.8(0x7c000000), %bb.9(0x04000000); %bb.8(96.88%), %bb.9(3.12%)

1120B	  %17:gpr32common = LDRWui %stack.3.i, 0, debug-location !624 :: (dereferenceable load 4 from %ir.i); is.c:588:17
1136B	  dead $wzr = SUBSWri %17:gpr32common, 4, 0, implicit-def $nzcv, debug-location !627; is.c:588:5
1152B	  Bcc 12, %bb.9, implicit killed $nzcv, debug-location !627; is.c:588:5
1168B	  B %bb.8, debug-location !627; is.c:588:5

1184B	bb.8.for.body:
	; predecessors: %bb.7
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

1200B	  %122:gpr64common = LDRSWui %stack.3.i, 0, debug-location !628 :: (dereferenceable load 4 from %ir.i); is.c:603:54
1232B	  %125:gpr64 = UBFMXri %122:gpr64common, 62, 61, debug-location !634; is.c:604:34
1248B	  %126:gpr32 = LDRWroX %124:gpr64common, %125:gpr64, 0, 0, debug-location !629 :: (load 4 from %ir.arrayidx); is.c:603:35
1280B	  %129:gpr32 = LDRWroX %128:gpr64common, %125:gpr64, 0, 0, debug-location !634 :: (load 4 from %ir.arrayidx11); is.c:604:34
1312B	  %131:gpr32common = nsw ADDWri %122.sub_32:gpr64common, 1, 0, debug-location !638; is.c:588:39
1316B	  STRWroX %126:gpr32, %127:gpr64common, %125:gpr64, 0, 0, debug-location !632 :: (store 4 into %ir.arrayidx9); is.c:603:33
1320B	  STRWroX %129:gpr32, %130:gpr64common, %125:gpr64, 0, 0, debug-location !637 :: (store 4 into %ir.arrayidx13); is.c:604:32
1328B	  STRWui %131:gpr32common, %stack.3.i, 0, debug-location !638 :: (store 4 into %ir.i); is.c:588:39
1344B	  B %bb.7, debug-location !639; is.c:588:5

1360B	bb.9.for.end:
	; predecessors: %bb.7
	  successors: %bb.10(0x50000000), %bb.11(0x30000000); %bb.10(62.50%), %bb.11(37.50%)

1376B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !642; is.c:617:5
1392B	  %19:gpr64 = MOVaddr target-flags(aarch64-page) @.str.4, target-flags(aarch64-pageoff, aarch64-nc) @.str.4, debug-location !642; is.c:617:5
1408B	  $x0 = COPY %19:gpr64, debug-location !642; is.c:617:5
1424B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !642; is.c:617:5
1440B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !642; is.c:617:5
1456B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !643; is.c:618:5
1472B	  %21:gpr64 = MOVaddr target-flags(aarch64-page) @.str.5, target-flags(aarch64-pageoff, aarch64-nc) @.str.5, debug-location !643; is.c:618:5
1552B	  dead $w1 = MOVi32imm 33554432, implicit-def $x1, debug-location !643; is.c:618:5
1568B	  $w2 = MOVi32imm 66, debug-location !643; is.c:618:5
1576B	  $x0 = COPY %21:gpr64, debug-location !643; is.c:618:5
1584B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $w2, implicit-def $sp, implicit-def dead $w0, debug-location !643; is.c:618:5
1600B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !643; is.c:618:5
1616B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !644; is.c:619:5
1632B	  %26:gpr64 = MOVaddr target-flags(aarch64-page) @.str.6, target-flags(aarch64-pageoff, aarch64-nc) @.str.6, debug-location !644; is.c:619:5
1680B	  $w1 = MOVi32imm 10, debug-location !644; is.c:619:5
1688B	  $x0 = COPY %26:gpr64, debug-location !644; is.c:619:5
1696B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !644; is.c:619:5
1712B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !644; is.c:619:5
1728B	  %29:gpr32 = LDRWui %stack.5.timer_on, 0, debug-location !645 :: (dereferenceable load 4 from %ir.timer_on); is.c:621:9
1744B	  CBZW %29:gpr32, %bb.11, debug-location !647; is.c:621:9
1760B	  B %bb.10, debug-location !647; is.c:621:9

1776B	bb.10.if.then18:
	; predecessors: %bb.9
	  successors: %bb.11(0x80000000); %bb.11(100.00%)

1792B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !648; is.c:622:9
1824B	  $w0 = MOVi32imm 1, debug-location !648; is.c:622:9
1840B	  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !648; is.c:622:9
1856B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !648; is.c:622:9

1872B	bb.11.if.end19:
	; predecessors: %bb.9, %bb.10
	  successors: %bb.12(0x50000000), %bb.13(0x30000000); %bb.12(62.50%), %bb.13(37.50%)

1888B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !649; is.c:625:5
1904B	  %31:gpr64common = ADRP target-flags(aarch64-page) %const.0
1936B	  %33:gpr64common = ADRP target-flags(aarch64-page) %const.1
1944B	  %32:fpr64 = LDRDui %31:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
1952B	  %34:fpr64 = LDRDui %33:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
1968B	  $d0 = COPY %32:fpr64, debug-location !649; is.c:625:5
1984B	  $d1 = COPY %34:fpr64, debug-location !649; is.c:625:5
2000B	  BL @create_seq, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit killed $d1, implicit-def $sp, debug-location !649; is.c:625:5
2016B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !649; is.c:625:5
2032B	  %35:gpr32 = LDRWui %stack.5.timer_on, 0, debug-location !650 :: (dereferenceable load 4 from %ir.timer_on); is.c:627:9
2048B	  CBZW %35:gpr32, %bb.13, debug-location !652; is.c:627:9
2064B	  B %bb.12, debug-location !652; is.c:627:9

2080B	bb.12.if.then21:
	; predecessors: %bb.11
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

2096B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !653; is.c:628:9
2128B	  $w0 = MOVi32imm 1, debug-location !653; is.c:628:9
2144B	  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !653; is.c:628:9
2160B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !653; is.c:628:9

2176B	bb.13.if.end22:
	; predecessors: %bb.11, %bb.12
	  successors: %bb.14(0x80000000); %bb.14(100.00%)

2192B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !654; is.c:632:5
2224B	  $w0 = MOVi32imm 1, debug-location !654; is.c:632:5
2232B	  %37:gpr32 = MOVi32imm 1
2240B	  BL @rank, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !654; is.c:632:5
2256B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !654; is.c:632:5
2272B	  %38:gpr64common = ADRP target-flags(aarch64-page) @passed_verification, debug-location !655; is.c:635:25
2304B	  STRWui $wzr, %38:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !655 :: (store 4 into @passed_verification); is.c:635:25
2320B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !656; is.c:638:9
2336B	  %40:gpr64 = MOVaddr target-flags(aarch64-page) @.str.7, target-flags(aarch64-pageoff, aarch64-nc) @.str.7, debug-location !656; is.c:638:9
2352B	  $x0 = COPY %40:gpr64, debug-location !656; is.c:638:9
2368B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !656; is.c:638:9
2384B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !656; is.c:638:9
2400B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !658; is.c:641:5
2416B	  $w0 = COPY $wzr, debug-location !658; is.c:641:5
2432B	  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !658; is.c:641:5
2448B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !658; is.c:641:5
2464B	  STRWui %37:gpr32, %stack.4.iteration, 0, debug-location !659 :: (store 4 into %ir.iteration); is.c:646:20
2480B	  %117:gpr64 = MOVaddr target-flags(aarch64-page) @.str.8, target-flags(aarch64-pageoff, aarch64-nc) @.str.8

2496B	bb.14.for.cond28:
	; predecessors: %bb.13, %bb.15
	  successors: %bb.15(0x7c000000), %bb.16(0x04000000); %bb.15(96.88%), %bb.16(3.12%)

2512B	  %42:gpr32common = LDRWui %stack.4.iteration, 0, debug-location !662 :: (dereferenceable load 4 from %ir.iteration); is.c:646:25
2528B	  dead $wzr = SUBSWri %42:gpr32common, 10, 0, implicit-def $nzcv, debug-location !665; is.c:646:5
2544B	  Bcc 12, %bb.16, implicit killed $nzcv, debug-location !665; is.c:646:5
2560B	  B %bb.15, debug-location !665; is.c:646:5

2576B	bb.15.for.body30:
	; predecessors: %bb.14
	  successors: %bb.14(0x80000000); %bb.14(100.00%)

2592B	  %116:gpr32 = LDRWui %stack.4.iteration, 0, debug-location !666 :: (dereferenceable load 4 from %ir.iteration); is.c:648:36
2608B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !669; is.c:648:13
2624B	  $x0 = COPY %117:gpr64, debug-location !669; is.c:648:13
2640B	  $w1 = COPY %116:gpr32, debug-location !669; is.c:648:13
2656B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !669; is.c:648:13
2672B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !669; is.c:648:13
2688B	  %119:gpr32 = LDRWui %stack.4.iteration, 0, debug-location !670 :: (dereferenceable load 4 from %ir.iteration); is.c:650:14
2704B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !671; is.c:650:9
2720B	  $w0 = COPY %119:gpr32, debug-location !671; is.c:650:9
2736B	  BL @rank, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !671; is.c:650:9
2752B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !671; is.c:650:9
2768B	  %120:gpr32common = LDRWui %stack.4.iteration, 0, debug-location !672 :: (dereferenceable load 4 from %ir.iteration); is.c:646:63
2784B	  %121:gpr32common = nsw ADDWri %120:gpr32common, 1, 0, debug-location !672; is.c:646:63
2800B	  STRWui %121:gpr32common, %stack.4.iteration, 0, debug-location !672 :: (store 4 into %ir.iteration); is.c:646:63
2816B	  B %bb.14, debug-location !673; is.c:646:5

2832B	bb.16.do.end38:
	; predecessors: %bb.14
	  successors: %bb.17(0x50000000), %bb.18(0x30000000); %bb.17(62.50%), %bb.18(37.50%)

2848B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !676; is.c:657:5
2880B	  $w0 = COPY $wzr, debug-location !676; is.c:657:5
2896B	  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !676; is.c:657:5
2912B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !676; is.c:657:5
2928B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !677; is.c:658:19
2944B	  $w0 = COPY $wzr, debug-location !677; is.c:658:19
2960B	  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !677; is.c:658:19
2976B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !677; is.c:658:19
3024B	  %46:gpr32 = LDRWui %stack.5.timer_on, 0, debug-location !679 :: (dereferenceable load 4 from %ir.timer_on); is.c:662:9
3028B	  %45:fpr64 = COPY $d0, debug-location !677; is.c:658:19
3032B	  STRDui %45:fpr64, %stack.6.timecounter, 0, debug-location !678 :: (store 8 into %ir.timecounter); is.c:658:17
3040B	  CBZW %46:gpr32, %bb.18, debug-location !681; is.c:662:9
3056B	  B %bb.17, debug-location !681; is.c:662:9

3072B	bb.17.if.then41:
	; predecessors: %bb.16
	  successors: %bb.18(0x80000000); %bb.18(100.00%)

3088B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !682; is.c:663:9
3120B	  $w0 = MOVi32imm 2, debug-location !682; is.c:663:9
3136B	  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !682; is.c:663:9
3152B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !682; is.c:663:9

3168B	bb.18.if.end42:
	; predecessors: %bb.16, %bb.17
	  successors: %bb.19(0x50000000), %bb.20(0x30000000); %bb.19(62.50%), %bb.20(37.50%)

3184B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !683; is.c:664:5
3200B	  BL @full_verify, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp, debug-location !683; is.c:664:5
3216B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !683; is.c:664:5
3232B	  %48:gpr32 = LDRWui %stack.5.timer_on, 0, debug-location !684 :: (dereferenceable load 4 from %ir.timer_on); is.c:665:9
3248B	  CBZW %48:gpr32, %bb.20, debug-location !686; is.c:665:9
3264B	  B %bb.19, debug-location !686; is.c:665:9

3280B	bb.19.if.then44:
	; predecessors: %bb.18
	  successors: %bb.20(0x80000000); %bb.20(100.00%)

3296B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !687; is.c:666:9
3328B	  $w0 = MOVi32imm 2, debug-location !687; is.c:666:9
3344B	  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !687; is.c:666:9
3360B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !687; is.c:666:9

3376B	bb.20.if.end45:
	; predecessors: %bb.18, %bb.19
	  successors: %bb.21(0x50000000), %bb.22(0x30000000); %bb.21(62.50%), %bb.22(37.50%)

3392B	  %50:gpr32 = LDRWui %stack.5.timer_on, 0, debug-location !688 :: (dereferenceable load 4 from %ir.timer_on); is.c:668:9
3408B	  CBZW %50:gpr32, %bb.22, debug-location !690; is.c:668:9
3424B	  B %bb.21, debug-location !690; is.c:668:9

3440B	bb.21.if.then47:
	; predecessors: %bb.20
	  successors: %bb.22(0x80000000); %bb.22(100.00%)

3456B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !691; is.c:669:9
3488B	  $w0 = MOVi32imm 3, debug-location !691; is.c:669:9
3504B	  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !691; is.c:669:9
3520B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !691; is.c:669:9

3536B	bb.22.if.end48:
	; predecessors: %bb.20, %bb.21
	  successors: %bb.23(0x40000000), %bb.24(0x40000000); %bb.23(50.00%), %bb.24(50.00%)

3552B	  %53:gpr32common = LDRWui %38:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !692 :: (dereferenceable load 4 from @passed_verification); is.c:672:9
3568B	  dead $wzr = SUBSWri %53:gpr32common, 51, 0, implicit-def $nzcv, debug-location !695; is.c:672:9
3584B	  Bcc 0, %bb.24, implicit killed $nzcv, debug-location !695; is.c:672:9
3600B	  B %bb.23, debug-location !695; is.c:672:9

3616B	bb.23.if.then50:
	; predecessors: %bb.22
	  successors: %bb.24(0x80000000); %bb.24(100.00%)

3648B	  STRWui $wzr, %38:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !696 :: (store 4 into @passed_verification); is.c:673:29

3664B	bb.24.if.end51:
	; predecessors: %bb.22, %bb.23
	  successors: %bb.25(0x50000000), %bb.28(0x30000000); %bb.25(62.50%), %bb.28(37.50%)

3680B	  %57:fpr64 = LDRDui %stack.6.timecounter, 0, debug-location !698 :: (dereferenceable load 8 from %ir.timecounter); is.c:675:69
3696B	  %58:gpr64 = MOVi64imm 4734409108273233920
3712B	  %59:fpr64 = COPY %58:gpr64
3792B	  %65:gpr32 = LDRWui %38:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !702 :: (dereferenceable load 4 from @passed_verification); is.c:677:24
3796B	  %61:gpr64 = MOVi64imm 4696837146684686336
3800B	  %60:fpr64 = FDIVDrr %59:fpr64, %57:fpr64, debug-location !700; is.c:676:49
3808B	  %62:fpr64 = COPY %61:gpr64
3816B	  %63:fpr64 = FDIVDrr %60:fpr64, %62:fpr64, debug-location !701; is.c:676:63
3824B	  ADJCALLSTACKDOWN 64, 0, implicit-def dead $sp, implicit $sp, debug-location !703; is.c:674:5
3832B	  %66:gpr64 = MOVaddr target-flags(aarch64-page) @.str.18, target-flags(aarch64-pageoff, aarch64-nc) @.str.18, debug-location !703; is.c:674:5
3872B	  %68:gpr64 = MOVaddr target-flags(aarch64-page) @.str.17, target-flags(aarch64-pageoff, aarch64-nc) @.str.17, debug-location !703; is.c:674:5
3904B	  %69:gpr64 = MOVaddr target-flags(aarch64-page) @.str.16, target-flags(aarch64-pageoff, aarch64-nc) @.str.16, debug-location !703; is.c:674:5
3936B	  %70:gpr64 = MOVaddr target-flags(aarch64-page) @.str.15, target-flags(aarch64-pageoff, aarch64-nc) @.str.15, debug-location !703; is.c:674:5
3968B	  %71:gpr64 = MOVaddr target-flags(aarch64-page) @.str.14, target-flags(aarch64-pageoff, aarch64-nc) @.str.14, debug-location !703; is.c:674:5
4000B	  %72:gpr64 = MOVaddr target-flags(aarch64-page) @.str.13, target-flags(aarch64-pageoff, aarch64-nc) @.str.13, debug-location !703; is.c:674:5
4032B	  %73:gpr64 = MOVaddr target-flags(aarch64-page) @.str.12, target-flags(aarch64-pageoff, aarch64-nc) @.str.12, debug-location !703; is.c:674:5
4064B	  %74:gpr64 = MOVaddr target-flags(aarch64-page) @.str.11, target-flags(aarch64-pageoff, aarch64-nc) @.str.11, debug-location !703; is.c:674:5
4096B	  %75:gpr64 = MOVaddr target-flags(aarch64-page) @.str.9, target-flags(aarch64-pageoff, aarch64-nc) @.str.9, debug-location !703; is.c:674:5
4100B	  STRXui %68:gpr64, $sp, 6, debug-location !703 :: (store 8 into stack + 48); is.c:674:5
4104B	  STRXui %66:gpr64, $sp, 7, debug-location !703 :: (store 8 into stack + 56); is.c:674:5
4112B	  %76:gpr64 = MOVaddr target-flags(aarch64-page) @.str.10, target-flags(aarch64-pageoff, aarch64-nc) @.str.10, debug-location !703; is.c:674:5
4120B	  STRXui %70:gpr64, $sp, 4, debug-location !703 :: (store 8 into stack + 32); is.c:674:5
4128B	  STRXui %69:gpr64, $sp, 5, debug-location !703 :: (store 8 into stack + 40); is.c:674:5
4136B	  STRXui %72:gpr64, $sp, 2, debug-location !703 :: (store 8 into stack + 16); is.c:674:5
4144B	  STRXui %71:gpr64, $sp, 3, debug-location !703 :: (store 8 into stack + 24); is.c:674:5
4152B	  STRXui %74:gpr64, $sp, 0, debug-location !703 :: (store 8 into stack); is.c:674:5
4224B	  $w1 = MOVi32imm 66, debug-location !703; is.c:674:5
4240B	  $w2 = MOVi32imm 524288, debug-location !703; is.c:674:5
4256B	  $w3 = MOVi32imm 64, debug-location !703; is.c:674:5
4288B	  $w5 = MOVi32imm 10, debug-location !703; is.c:674:5
4296B	  STRXui %73:gpr64, $sp, 1, debug-location !703 :: (store 8 into stack + 8); is.c:674:5
4304B	  $d0 = COPY %57:fpr64, debug-location !703; is.c:674:5
4320B	  $d1 = COPY %63:fpr64, debug-location !703; is.c:674:5
4324B	  $x0 = COPY %75:gpr64, debug-location !703; is.c:674:5
4328B	  $w4 = COPY $wzr, debug-location !703; is.c:674:5
4336B	  $x6 = COPY %76:gpr64, debug-location !703; is.c:674:5
4352B	  $w7 = COPY %65:gpr32, debug-location !703; is.c:674:5
4368B	  BL @c_print_results, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit $w4, implicit killed $w5, implicit $d0, implicit killed $d1, implicit killed $x6, implicit killed $w7, implicit-def $sp, debug-location !703; is.c:674:5
4384B	  ADJCALLSTACKUP 64, 0, implicit-def dead $sp, implicit $sp, debug-location !703; is.c:674:5
4400B	  %82:gpr32 = LDRWui %stack.5.timer_on, 0, debug-location !704 :: (dereferenceable load 4 from %ir.timer_on); is.c:681:9
4416B	  CBZW %82:gpr32, %bb.28, debug-location !706; is.c:681:9
4432B	  B %bb.25, debug-location !706; is.c:681:9

4448B	bb.25.if.then54:
	; predecessors: %bb.24
	  successors: %bb.26(0x50000000), %bb.27(0x30000000); %bb.26(62.50%), %bb.27(37.50%)

4464B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !712; is.c:684:19
4496B	  $w0 = MOVi32imm 3, debug-location !712; is.c:684:19
4512B	  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !712; is.c:684:19
4528B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !712; is.c:684:19
4544B	  %84:fpr64 = COPY $d0, debug-location !712; is.c:684:19
4560B	  STRDui %84:fpr64, %stack.8.t_total, 0, debug-location !713 :: (store 8 into %ir.t_total); is.c:684:17
4576B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !714; is.c:685:9
4592B	  %85:gpr64 = MOVaddr target-flags(aarch64-page) @.str.19, target-flags(aarch64-pageoff, aarch64-nc) @.str.19, debug-location !714; is.c:685:9
4608B	  $x0 = COPY %85:gpr64, debug-location !714; is.c:685:9
4624B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !714; is.c:685:9
4640B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !714; is.c:685:9
4656B	  %87:fpr64 = LDRDui %stack.8.t_total, 0, debug-location !715 :: (dereferenceable load 8 from %ir.t_total); is.c:686:45
4672B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !716; is.c:686:9
4688B	  %88:gpr64 = MOVaddr target-flags(aarch64-page) @.str.20, target-flags(aarch64-pageoff, aarch64-nc) @.str.20, debug-location !716; is.c:686:9
4704B	  $x0 = COPY %88:gpr64, debug-location !716; is.c:686:9
4720B	  $d0 = COPY %87:fpr64, debug-location !716; is.c:686:9
4736B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !716; is.c:686:9
4752B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !716; is.c:686:9
4768B	  %90:fpr64 = LDRDui %stack.8.t_total, 0, debug-location !717 :: (dereferenceable load 8 from %ir.t_total); is.c:687:13
4784B	  FCMPDri %90:fpr64, implicit-def $nzcv, debug-location !720; is.c:687:13
4800B	  Bcc 1, %bb.27, implicit killed $nzcv, debug-location !720; is.c:687:13
4816B	  B %bb.26, debug-location !720; is.c:687:13

4832B	bb.26.if.then59:
	; predecessors: %bb.25
	  successors: %bb.27(0x80000000); %bb.27(100.00%)

4848B	  %91:gpr64 = MOVi64imm 4607182418800017408
4864B	  STRXui %91:gpr64, %stack.8.t_total, 0, debug-location !721 :: (store 8 into %ir.t_total); is.c:688:21

4880B	bb.27.if.end60:
	; predecessors: %bb.25, %bb.26
	  successors: %bb.28(0x80000000); %bb.28(100.00%)

4896B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !723; is.c:689:23
4928B	  $w0 = MOVi32imm 1, debug-location !723; is.c:689:23
4944B	  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !723; is.c:689:23
4960B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !723; is.c:689:23
4976B	  %93:fpr64 = COPY $d0, debug-location !723; is.c:689:23
5008B	  %94:fpr64 = LDRDui %stack.8.t_total, 0, debug-location !726 :: (dereferenceable load 8 from %ir.t_total); is.c:690:35
5016B	  STRDui %93:fpr64, %stack.6.timecounter, 0, debug-location !724 :: (store 8 into %ir.timecounter); is.c:689:21
5040B	  %96:gpr64 = MOVi64imm 4636737291354636288
5048B	  %95:fpr64 = FDIVDrr %93:fpr64, %94:fpr64, debug-location !727; is.c:690:33
5056B	  %97:fpr64 = COPY %96:gpr64
5072B	  %98:fpr64 = FMULDrr %95:fpr64, %97:fpr64, debug-location !728; is.c:690:43
5088B	  STRDui %98:fpr64, %stack.9.t_percent, 0, debug-location !729 :: (store 8 into %ir.t_percent); is.c:690:19
5104B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !732; is.c:691:9
5120B	  %99:gpr64 = MOVaddr target-flags(aarch64-page) @.str.21, target-flags(aarch64-pageoff, aarch64-nc) @.str.21, debug-location !732; is.c:691:9
5136B	  $x0 = COPY %99:gpr64, debug-location !732; is.c:691:9
5152B	  $d0 = COPY %93:fpr64, debug-location !732; is.c:691:9
5168B	  $d1 = COPY %98:fpr64, debug-location !732; is.c:691:9
5184B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0, debug-location !732; is.c:691:9
5200B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !732; is.c:691:9
5216B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !733; is.c:692:23
5248B	  $w0 = COPY $wzr, debug-location !733; is.c:692:23
5264B	  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !733; is.c:692:23
5280B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !733; is.c:692:23
5296B	  %102:fpr64 = COPY $d0, debug-location !733; is.c:692:23
5328B	  %103:fpr64 = LDRDui %stack.8.t_total, 0, debug-location !736 :: (dereferenceable load 8 from %ir.t_total); is.c:693:35
5336B	  STRDui %102:fpr64, %stack.6.timecounter, 0, debug-location !734 :: (store 8 into %ir.timecounter); is.c:692:21
5344B	  %104:fpr64 = FDIVDrr %102:fpr64, %103:fpr64, debug-location !737; is.c:693:33
5360B	  %105:fpr64 = FMULDrr %104:fpr64, %97:fpr64, debug-location !738; is.c:693:43
5376B	  STRDui %105:fpr64, %stack.9.t_percent, 0, debug-location !739 :: (store 8 into %ir.t_percent); is.c:693:19
5392B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !742; is.c:694:9
5408B	  %106:gpr64 = MOVaddr target-flags(aarch64-page) @.str.22, target-flags(aarch64-pageoff, aarch64-nc) @.str.22, debug-location !742; is.c:694:9
5424B	  $x0 = COPY %106:gpr64, debug-location !742; is.c:694:9
5440B	  $d0 = COPY %102:fpr64, debug-location !742; is.c:694:9
5456B	  $d1 = COPY %105:fpr64, debug-location !742; is.c:694:9
5472B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0, debug-location !742; is.c:694:9
5488B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !742; is.c:694:9
5504B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !743; is.c:695:23
5536B	  $w0 = MOVi32imm 2, debug-location !743; is.c:695:23
5552B	  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !743; is.c:695:23
5568B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !743; is.c:695:23
5584B	  %109:fpr64 = COPY $d0, debug-location !743; is.c:695:23
5616B	  %110:fpr64 = LDRDui %stack.8.t_total, 0, debug-location !746 :: (dereferenceable load 8 from %ir.t_total); is.c:696:35
5624B	  STRDui %109:fpr64, %stack.6.timecounter, 0, debug-location !744 :: (store 8 into %ir.timecounter); is.c:695:21
5632B	  %111:fpr64 = FDIVDrr %109:fpr64, %110:fpr64, debug-location !747; is.c:696:33
5648B	  %112:fpr64 = FMULDrr %111:fpr64, %97:fpr64, debug-location !748; is.c:696:43
5664B	  STRDui %112:fpr64, %stack.9.t_percent, 0, debug-location !749 :: (store 8 into %ir.t_percent); is.c:696:19
5680B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !752; is.c:697:9
5696B	  %113:gpr64 = MOVaddr target-flags(aarch64-page) @.str.23, target-flags(aarch64-pageoff, aarch64-nc) @.str.23, debug-location !752; is.c:697:9
5712B	  $x0 = COPY %113:gpr64, debug-location !752; is.c:697:9
5728B	  $d0 = COPY %109:fpr64, debug-location !752; is.c:697:9
5744B	  $d1 = COPY %112:fpr64, debug-location !752; is.c:697:9
5760B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0, debug-location !752; is.c:697:9
5776B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !752; is.c:697:9

5792B	bb.28.do.end76:
	; predecessors: %bb.24, %bb.27

5824B	  $w0 = COPY $wzr, debug-location !754; is.c:703:5
5840B	  RET_ReallyLR implicit $w0, debug-location !754; is.c:703:5

# End machine code for function main.

Before post-MI-sched:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-36]
  fi#1: size=4, align=4, at location [SP-40]
  fi#2: size=8, align=8, at location [SP-56]
  fi#3: size=4, align=4, at location [SP-60]
  fi#4: size=4, align=4, at location [SP-64]
  fi#5: size=4, align=4, at location [SP-68]
  fi#6: size=8, align=8, at location [SP-80]
  fi#7: size=8, align=8, at location [SP-88]
  fi#8: size=8, align=8, at location [SP-96]
  fi#9: size=8, align=8, at location [SP-104]
  fi#10: size=8, align=8, at location [SP-8]
  fi#11: size=8, align=8, at location [SP-16]
  fi#12: size=8, align=8, at location [SP-24]
  fi#13: size=8, align=8, at location [SP-32]
  fi#14: size=8, align=16, at location [SP-48]
Constant Pool:
  cp#0: 0x41B2B9B0A1000000, align=8
  cp#1: 0x41D2309CE5400000, align=8
Function Live Ins: $w0, $x1

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $w0, $x1, $d8, $x19, $x20, $lr
  $sp = frame-setup SUBXri $sp, 176, 0
  frame-setup STRDui killed $d8, $sp, 16 :: (store 8 into %stack.14)
  frame-setup STPXi killed $x20, killed $x19, $sp, 18 :: (store 8 into %stack.13), (store 8 into %stack.12)
  frame-setup STPXi killed $fp, killed $lr, $sp, 20 :: (store 8 into %stack.11), (store 8 into %stack.10)
  $fp = frame-setup ADDXri $sp, 160, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  frame-setup CFI_INSTRUCTION offset $w19, -24
  frame-setup CFI_INSTRUCTION offset $w20, -32
  frame-setup CFI_INSTRUCTION offset $b8, -48
  STPWi renamable $w0, $wzr, $fp, -6 :: (store 4 into %ir.retval), (store 4 into %ir.argc.addr)
  STURXi killed renamable $x1, $fp, -40 :: (store 8 into %ir.argv.addr)
  STURWi $wzr, $fp, -52, debug-location !597 :: (store 4 into %ir.timer_on); is.c:572:14
  $x0 = ADRP target-flags(aarch64-page) @.str.2, debug-location !598; is.c:573:15
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.2, 0, debug-location !598; is.c:573:15
  $x1 = ADRP target-flags(aarch64-page) @.str.3, debug-location !598; is.c:573:15
  renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.3, 0, debug-location !598; is.c:573:15
  BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0, debug-location !598; is.c:573:15
  STURXi renamable $x0, $fp, -72, debug-location !600 :: (store 8 into %ir.fp); is.c:573:13
  CBZX killed renamable $x0, %bb.2, debug-location !602; is.c:573:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  renamable $x0 = LDURXi $fp, -72, debug-location !603 :: (dereferenceable load 8 from %ir.fp); is.c:574:16
  BL @fclose, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !605; is.c:574:9
  $w8 = MOVZWi 1, 0
  STURWi killed renamable $w8, $fp, -52, debug-location !606 :: (store 4 into %ir.timer_on); is.c:575:18

bb.2.if.end:
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x50000000), %bb.4(0x30000000); %bb.3(62.50%), %bb.4(37.50%)

  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !608; is.c:577:5
  BL @timer_clear, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !608; is.c:577:5
  renamable $w8 = LDURWi $fp, -52, debug-location !609 :: (dereferenceable load 4 from %ir.timer_on); is.c:578:9
  CBZW killed renamable $w8, %bb.4, debug-location !611; is.c:578:9

bb.3.if.then2:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  $w0 = MOVZWi 1, 0, debug-location !612; is.c:579:9
  BL @timer_clear, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !612; is.c:579:9
  $w0 = MOVZWi 2, 0, debug-location !614; is.c:580:9
  BL @timer_clear, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !614; is.c:580:9
  $w0 = MOVZWi 3, 0, debug-location !615; is.c:581:9
  BL @timer_clear, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !615; is.c:581:9

bb.4.if.end3:
; predecessors: %bb.2, %bb.3
  successors: %bb.5(0x50000000), %bb.6(0x30000000); %bb.5(62.50%), %bb.6(37.50%)

  renamable $w8 = LDURWi $fp, -52, debug-location !617 :: (dereferenceable load 4 from %ir.timer_on); is.c:584:9
  CBZW killed renamable $w8, %bb.6, debug-location !619; is.c:584:9

bb.5.if.then5:
; predecessors: %bb.4
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  $w0 = MOVZWi 3, 0, debug-location !620; is.c:585:9
  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !620; is.c:585:9

bb.6.if.end6:
; predecessors: %bb.4, %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  STURWi $wzr, $fp, -44, debug-location !621 :: (store 4 into %ir.i); is.c:588:12
  $x8 = ADRP target-flags(aarch64-page) @B_test_index_array
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @B_test_index_array, 0
  $x9 = ADRP target-flags(aarch64-page) @test_index_array
  renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @test_index_array, 0
  $x10 = ADRP target-flags(aarch64-page) @B_test_rank_array
  renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @B_test_rank_array, 0
  $x11 = ADRP target-flags(aarch64-page) @test_rank_array
  renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @test_rank_array, 0

bb.7.for.cond:
; predecessors: %bb.6, %bb.8
  successors: %bb.8(0x7c000000), %bb.9(0x04000000); %bb.8(96.88%), %bb.9(3.12%)
  liveins: $x8, $x9, $x10, $x11
  renamable $w12 = LDURWi $fp, -44, debug-location !624 :: (dereferenceable load 4 from %ir.i); is.c:588:17
  dead $wzr = SUBSWri killed renamable $w12, 4, 0, implicit-def $nzcv, debug-location !627; is.c:588:5
  Bcc 12, %bb.9, implicit $nzcv, debug-location !627; is.c:588:5

bb.8.for.body:
; predecessors: %bb.7
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x12 = LDURSWi $fp, -44, debug-location !628 :: (dereferenceable load 4 from %ir.i); is.c:603:54
  renamable $x13 = UBFMXri renamable $x12, 62, 61, debug-location !634; is.c:604:34
  renamable $w14 = LDRWroX renamable $x8, renamable $x13, 0, 0, debug-location !629 :: (load 4 from %ir.arrayidx); is.c:603:35
  renamable $w15 = LDRWroX renamable $x10, renamable $x13, 0, 0, debug-location !634 :: (load 4 from %ir.arrayidx11); is.c:604:34
  renamable $w12 = nsw ADDWri renamable $w12, 1, 0, implicit killed $x12, debug-location !638; is.c:588:39
  STRWroX killed renamable $w14, renamable $x9, renamable $x13, 0, 0, debug-location !632 :: (store 4 into %ir.arrayidx9); is.c:603:33
  STRWroX killed renamable $w15, renamable $x11, killed renamable $x13, 0, 0, debug-location !637 :: (store 4 into %ir.arrayidx13); is.c:604:32
  STURWi killed renamable $w12, $fp, -44, debug-location !638 :: (store 4 into %ir.i); is.c:588:39
  B %bb.7

bb.9.for.end:
; predecessors: %bb.7
  successors: %bb.10(0x50000000), %bb.11(0x30000000); %bb.10(62.50%), %bb.11(37.50%)

  $x0 = ADRP target-flags(aarch64-page) @.str.4, debug-location !642; is.c:617:5
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.4, 0, debug-location !642; is.c:617:5
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !642; is.c:617:5
  $x0 = ADRP target-flags(aarch64-page) @.str.5, debug-location !643; is.c:618:5
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.5, 0, debug-location !643; is.c:618:5
  dead $w1 = MOVZWi 512, 16, implicit-def $x1, debug-location !643; is.c:618:5
  $w2 = MOVZWi 66, 0, debug-location !643; is.c:618:5
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $w2, implicit-def $sp, implicit-def dead $w0, debug-location !643; is.c:618:5
  $x0 = ADRP target-flags(aarch64-page) @.str.6, debug-location !644; is.c:619:5
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.6, 0, debug-location !644; is.c:619:5
  $w1 = MOVZWi 10, 0, debug-location !644; is.c:619:5
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !644; is.c:619:5
  renamable $w8 = LDURWi $fp, -52, debug-location !645 :: (dereferenceable load 4 from %ir.timer_on); is.c:621:9
  CBZW killed renamable $w8, %bb.11, debug-location !647; is.c:621:9

bb.10.if.then18:
; predecessors: %bb.9
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  $w0 = MOVZWi 1, 0, debug-location !648; is.c:622:9
  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !648; is.c:622:9

bb.11.if.end19:
; predecessors: %bb.9, %bb.10
  successors: %bb.12(0x50000000), %bb.13(0x30000000); %bb.12(62.50%), %bb.13(37.50%)

  renamable $x8 = ADRP target-flags(aarch64-page) %const.0
  renamable $x9 = ADRP target-flags(aarch64-page) %const.1
  renamable $d0 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  renamable $d1 = LDRDui killed renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  BL @create_seq, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $d1, implicit-def $sp, debug-location !649; is.c:625:5
  renamable $w8 = LDURWi $fp, -52, debug-location !650 :: (dereferenceable load 4 from %ir.timer_on); is.c:627:9
  CBZW killed renamable $w8, %bb.13, debug-location !652; is.c:627:9

bb.12.if.then21:
; predecessors: %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  $w0 = MOVZWi 1, 0, debug-location !653; is.c:628:9
  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !653; is.c:628:9

bb.13.if.end22:
; predecessors: %bb.11, %bb.12
  successors: %bb.14(0x80000000); %bb.14(100.00%)

  $w0 = MOVZWi 1, 0, debug-location !654; is.c:632:5
  $w19 = MOVZWi 1, 0
  BL @rank, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !654; is.c:632:5
  renamable $x20 = ADRP target-flags(aarch64-page) @passed_verification, debug-location !655; is.c:635:25
  STRWui $wzr, renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !655 :: (store 4 into @passed_verification); is.c:635:25
  $x0 = ADRP target-flags(aarch64-page) @.str.7, debug-location !656; is.c:638:9
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.7, 0, debug-location !656; is.c:638:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !656; is.c:638:9
  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !658; is.c:641:5
  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !658; is.c:641:5
  STURWi killed renamable $w19, $fp, -48, debug-location !659 :: (store 4 into %ir.iteration); is.c:646:20
  $x19 = ADRP target-flags(aarch64-page) @.str.8
  renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str.8, 0

bb.14.for.cond28:
; predecessors: %bb.13, %bb.15
  successors: %bb.15(0x7c000000), %bb.16(0x04000000); %bb.15(96.88%), %bb.16(3.12%)
  liveins: $x19, $x20
  renamable $w8 = LDURWi $fp, -48, debug-location !662 :: (dereferenceable load 4 from %ir.iteration); is.c:646:25
  dead $wzr = SUBSWri killed renamable $w8, 10, 0, implicit-def $nzcv, debug-location !665; is.c:646:5
  Bcc 12, %bb.16, implicit $nzcv, debug-location !665; is.c:646:5

bb.15.for.body30:
; predecessors: %bb.14
  successors: %bb.14(0x80000000); %bb.14(100.00%)
  liveins: $x19, $x20
  renamable $w1 = LDURWi $fp, -48, debug-location !666 :: (dereferenceable load 4 from %ir.iteration); is.c:648:36
  $x0 = ORRXrs $xzr, $x19, 0, debug-location !669; is.c:648:13
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !669; is.c:648:13
  renamable $w0 = LDURWi $fp, -48, debug-location !670 :: (dereferenceable load 4 from %ir.iteration); is.c:650:14
  BL @rank, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !671; is.c:650:9
  renamable $w8 = LDURWi $fp, -48, debug-location !672 :: (dereferenceable load 4 from %ir.iteration); is.c:646:63
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !672; is.c:646:63
  STURWi killed renamable $w8, $fp, -48, debug-location !672 :: (store 4 into %ir.iteration); is.c:646:63
  B %bb.14

bb.16.do.end38:
; predecessors: %bb.14
  successors: %bb.17(0x50000000), %bb.18(0x30000000); %bb.17(62.50%), %bb.18(37.50%)
  liveins: $x20
  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !676; is.c:657:5
  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !676; is.c:657:5
  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !677; is.c:658:19
  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !677; is.c:658:19
  renamable $w8 = LDURWi $fp, -52, debug-location !679 :: (dereferenceable load 4 from %ir.timer_on); is.c:662:9
  STURDi killed renamable $d0, $fp, -64, debug-location !678 :: (store 8 into %ir.timecounter); is.c:658:17
  CBZW killed renamable $w8, %bb.18, debug-location !681; is.c:662:9

bb.17.if.then41:
; predecessors: %bb.16
  successors: %bb.18(0x80000000); %bb.18(100.00%)
  liveins: $x20
  $w0 = MOVZWi 2, 0, debug-location !682; is.c:663:9
  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !682; is.c:663:9

bb.18.if.end42:
; predecessors: %bb.16, %bb.17
  successors: %bb.19(0x50000000), %bb.20(0x30000000); %bb.19(62.50%), %bb.20(37.50%)
  liveins: $x20
  BL @full_verify, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp, debug-location !683; is.c:664:5
  renamable $w8 = LDURWi $fp, -52, debug-location !684 :: (dereferenceable load 4 from %ir.timer_on); is.c:665:9
  CBZW killed renamable $w8, %bb.20, debug-location !686; is.c:665:9

bb.19.if.then44:
; predecessors: %bb.18
  successors: %bb.20(0x80000000); %bb.20(100.00%)
  liveins: $x20
  $w0 = MOVZWi 2, 0, debug-location !687; is.c:666:9
  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !687; is.c:666:9

bb.20.if.end45:
; predecessors: %bb.18, %bb.19
  successors: %bb.21(0x50000000), %bb.22(0x30000000); %bb.21(62.50%), %bb.22(37.50%)
  liveins: $x20
  renamable $w8 = LDURWi $fp, -52, debug-location !688 :: (dereferenceable load 4 from %ir.timer_on); is.c:668:9
  CBZW killed renamable $w8, %bb.22, debug-location !690; is.c:668:9

bb.21.if.then47:
; predecessors: %bb.20
  successors: %bb.22(0x80000000); %bb.22(100.00%)
  liveins: $x20
  $w0 = MOVZWi 3, 0, debug-location !691; is.c:669:9
  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !691; is.c:669:9

bb.22.if.end48:
; predecessors: %bb.20, %bb.21
  successors: %bb.23(0x40000000), %bb.24(0x40000000); %bb.23(50.00%), %bb.24(50.00%)
  liveins: $x20
  renamable $w8 = LDRWui renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !692 :: (dereferenceable load 4 from @passed_verification); is.c:672:9
  dead $wzr = SUBSWri killed renamable $w8, 51, 0, implicit-def $nzcv, debug-location !695; is.c:672:9
  Bcc 0, %bb.24, implicit $nzcv, debug-location !695; is.c:672:9

bb.23.if.then50:
; predecessors: %bb.22
  successors: %bb.24(0x80000000); %bb.24(100.00%)
  liveins: $x20
  STRWui $wzr, renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !696 :: (store 4 into @passed_verification); is.c:673:29

bb.24.if.end51:
; predecessors: %bb.22, %bb.23
  successors: %bb.25(0x50000000), %bb.28(0x30000000); %bb.25(62.50%), %bb.28(37.50%)
  liveins: $x20
  renamable $d0 = LDURDi $fp, -64, debug-location !698 :: (dereferenceable load 8 from %ir.timecounter); is.c:675:69
  $x8 = MOVZXi 16820, 48
  $d1 = FMOVXDr killed $x8
  renamable $w7 = LDRWui killed renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !702 :: (dereferenceable load 4 from @passed_verification); is.c:677:24
  $x8 = MOVZXi 33920, 32
  $x8 = MOVKXi $x8(tied-def 0), 16686, 48
  renamable $d1 = FDIVDrr killed renamable $d1, renamable $d0, debug-location !700; is.c:676:49
  $d2 = FMOVXDr killed $x8
  renamable $d1 = FDIVDrr killed renamable $d1, killed renamable $d2, debug-location !701; is.c:676:63
  $x8 = ADRP target-flags(aarch64-page) @.str.18, debug-location !703; is.c:674:5
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.18, 0, debug-location !703; is.c:674:5
  $x9 = ADRP target-flags(aarch64-page) @.str.17, debug-location !703; is.c:674:5
  renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.17, 0, debug-location !703; is.c:674:5
  $x10 = ADRP target-flags(aarch64-page) @.str.16, debug-location !703; is.c:674:5
  renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.16, 0, debug-location !703; is.c:674:5
  $x11 = ADRP target-flags(aarch64-page) @.str.15, debug-location !703; is.c:674:5
  renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @.str.15, 0, debug-location !703; is.c:674:5
  $x12 = ADRP target-flags(aarch64-page) @.str.14, debug-location !703; is.c:674:5
  renamable $x12 = ADDXri $x12, target-flags(aarch64-pageoff, aarch64-nc) @.str.14, 0, debug-location !703; is.c:674:5
  $x13 = ADRP target-flags(aarch64-page) @.str.13, debug-location !703; is.c:674:5
  renamable $x13 = ADDXri $x13, target-flags(aarch64-pageoff, aarch64-nc) @.str.13, 0, debug-location !703; is.c:674:5
  $x14 = ADRP target-flags(aarch64-page) @.str.12, debug-location !703; is.c:674:5
  renamable $x14 = ADDXri $x14, target-flags(aarch64-pageoff, aarch64-nc) @.str.12, 0, debug-location !703; is.c:674:5
  $x15 = ADRP target-flags(aarch64-page) @.str.11, debug-location !703; is.c:674:5
  renamable $x15 = ADDXri $x15, target-flags(aarch64-pageoff, aarch64-nc) @.str.11, 0, debug-location !703; is.c:674:5
  $x0 = ADRP target-flags(aarch64-page) @.str.9, debug-location !703; is.c:674:5
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.9, 0, debug-location !703; is.c:674:5
  STPXi renamable $x9, renamable $x8, $sp, 6, debug-location !703 :: (store 8 into stack + 48), (store 8 into stack + 56); is.c:674:5
  $x6 = ADRP target-flags(aarch64-page) @.str.10, debug-location !703; is.c:674:5
  renamable $x6 = ADDXri $x6, target-flags(aarch64-pageoff, aarch64-nc) @.str.10, 0, debug-location !703; is.c:674:5
  STPXi renamable $x11, renamable $x10, $sp, 4, debug-location !703 :: (store 8 into stack + 32), (store 8 into stack + 40); is.c:674:5
  STPXi renamable $x13, renamable $x12, $sp, 2, debug-location !703 :: (store 8 into stack + 16), (store 8 into stack + 24); is.c:674:5
  STPXi renamable $x15, renamable $x14, $sp, 0, debug-location !703 :: (store 8 into stack), (store 8 into stack + 8); is.c:674:5
  $w1 = MOVZWi 66, 0, debug-location !703; is.c:674:5
  $w2 = MOVZWi 8, 16, debug-location !703; is.c:674:5
  $w3 = MOVZWi 64, 0, debug-location !703; is.c:674:5
  $w5 = MOVZWi 10, 0, debug-location !703; is.c:674:5
  $w4 = ORRWrs $wzr, $wzr, 0, debug-location !703; is.c:674:5
  BL @c_print_results, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit $w4, implicit killed $w5, implicit $d0, implicit $d1, implicit $x6, implicit $w7, implicit-def $sp, debug-location !703; is.c:674:5
  renamable $w8 = LDURWi $fp, -52, debug-location !704 :: (dereferenceable load 4 from %ir.timer_on); is.c:681:9
  CBZW killed renamable $w8, %bb.28, debug-location !706; is.c:681:9

bb.25.if.then54:
; predecessors: %bb.24
  successors: %bb.26(0x50000000), %bb.27(0x30000000); %bb.26(62.50%), %bb.27(37.50%)

  $w0 = MOVZWi 3, 0, debug-location !712; is.c:684:19
  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !712; is.c:684:19
  STRDui killed renamable $d0, $sp, 10, debug-location !713 :: (store 8 into %ir.t_total); is.c:684:17
  $x0 = ADRP target-flags(aarch64-page) @.str.19, debug-location !714; is.c:685:9
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.19, 0, debug-location !714; is.c:685:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !714; is.c:685:9
  renamable $d0 = LDRDui $sp, 10, debug-location !715 :: (dereferenceable load 8 from %ir.t_total); is.c:686:45
  $x0 = ADRP target-flags(aarch64-page) @.str.20, debug-location !716; is.c:686:9
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.20, 0, debug-location !716; is.c:686:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !716; is.c:686:9
  renamable $d0 = LDRDui $sp, 10, debug-location !717 :: (dereferenceable load 8 from %ir.t_total); is.c:687:13
  FCMPDri killed renamable $d0, implicit-def $nzcv, debug-location !720; is.c:687:13
  Bcc 1, %bb.27, implicit $nzcv, debug-location !720; is.c:687:13

bb.26.if.then59:
; predecessors: %bb.25
  successors: %bb.27(0x80000000); %bb.27(100.00%)

  $x8 = MOVZXi 16368, 48
  STRXui killed renamable $x8, $sp, 10, debug-location !721 :: (store 8 into %ir.t_total); is.c:688:21

bb.27.if.end60:
; predecessors: %bb.25, %bb.26
  successors: %bb.28(0x80000000); %bb.28(100.00%)

  $w0 = MOVZWi 1, 0, debug-location !723; is.c:689:23
  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !723; is.c:689:23
  renamable $d1 = LDRDui $sp, 10, debug-location !726 :: (dereferenceable load 8 from %ir.t_total); is.c:690:35
  STURDi renamable $d0, $fp, -64, debug-location !724 :: (store 8 into %ir.timecounter); is.c:689:21
  $x8 = MOVZXi 16473, 48
  renamable $d1 = FDIVDrr renamable $d0, killed renamable $d1, debug-location !727; is.c:690:33
  $d8 = FMOVXDr killed $x8
  renamable $d1 = FMULDrr killed renamable $d1, renamable $d8, debug-location !728; is.c:690:43
  STRDui renamable $d1, $sp, 9, debug-location !729 :: (store 8 into %ir.t_percent); is.c:690:19
  $x0 = ADRP target-flags(aarch64-page) @.str.21, debug-location !732; is.c:691:9
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.21, 0, debug-location !732; is.c:691:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w0, debug-location !732; is.c:691:9
  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !733; is.c:692:23
  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !733; is.c:692:23
  renamable $d1 = LDRDui $sp, 10, debug-location !736 :: (dereferenceable load 8 from %ir.t_total); is.c:693:35
  STURDi renamable $d0, $fp, -64, debug-location !734 :: (store 8 into %ir.timecounter); is.c:692:21
  renamable $d1 = FDIVDrr renamable $d0, killed renamable $d1, debug-location !737; is.c:693:33
  renamable $d1 = FMULDrr killed renamable $d1, renamable $d8, debug-location !738; is.c:693:43
  STRDui renamable $d1, $sp, 9, debug-location !739 :: (store 8 into %ir.t_percent); is.c:693:19
  $x0 = ADRP target-flags(aarch64-page) @.str.22, debug-location !742; is.c:694:9
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.22, 0, debug-location !742; is.c:694:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w0, debug-location !742; is.c:694:9
  $w0 = MOVZWi 2, 0, debug-location !743; is.c:695:23
  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !743; is.c:695:23
  renamable $d1 = LDRDui $sp, 10, debug-location !746 :: (dereferenceable load 8 from %ir.t_total); is.c:696:35
  STURDi renamable $d0, $fp, -64, debug-location !744 :: (store 8 into %ir.timecounter); is.c:695:21
  renamable $d1 = FDIVDrr renamable $d0, killed renamable $d1, debug-location !747; is.c:696:33
  renamable $d1 = FMULDrr killed renamable $d1, killed renamable $d8, debug-location !748; is.c:696:43
  STRDui renamable $d1, $sp, 9, debug-location !749 :: (store 8 into %ir.t_percent); is.c:696:19
  $x0 = ADRP target-flags(aarch64-page) @.str.23, debug-location !752; is.c:697:9
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.23, 0, debug-location !752; is.c:697:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w0, debug-location !752; is.c:697:9

bb.28.do.end76:
; predecessors: %bb.24, %bb.27

  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !754; is.c:703:5
  $fp, $lr = frame-destroy LDPXi $sp, 20, debug-location !754 :: (load 8 from %stack.11), (load 8 from %stack.10); is.c:703:5
  $x20, $x19 = frame-destroy LDPXi $sp, 18, debug-location !754 :: (load 8 from %stack.13), (load 8 from %stack.12); is.c:703:5
  $d8 = frame-destroy LDRDui $sp, 16, debug-location !754 :: (load 8 from %stack.14); is.c:703:5
  $sp = frame-destroy ADDXri $sp, 176, 0, debug-location !754; is.c:703:5
  RET undef $lr, implicit $w0, debug-location !754; is.c:703:5

# End machine code for function main.

********** MI Scheduling **********
main:%bb.0 entry
  From: STPWi renamable $w0, $wzr, $fp, -6 :: (store 4 into %ir.retval), (store 4 into %ir.argc.addr)
    To: BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0, debug-location !598; is.c:573:15
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   STPWi renamable $w0, $wzr, $fp, -6 :: (store 4 into %ir.retval), (store 4 into %ir.argc.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Anti Latency=0
SU(1):   STURXi renamable $x1, $fp, -40 :: (store 8 into %ir.argv.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Anti Latency=0
SU(2):   STURWi $wzr, $fp, -52, debug-location !597 :: (store 4 into %ir.timer_on); is.c:572:14
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(3):   $x0 = ADRP target-flags(aarch64-page) @.str.2, debug-location !598; is.c:573:15
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Predecessors:
    SU(0): Anti Latency=0
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x0
SU(4):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.2, 0, debug-location !598; is.c:573:15
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   $x1 = ADRP target-flags(aarch64-page) @.str.3, debug-location !598; is.c:573:15
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Predecessors:
    SU(1): Anti Latency=0
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x1
SU(6):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.3, 0, debug-location !598; is.c:573:15
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0, debug-location !598; is.c:573:15
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
Disabled scoreboard hazard recognizer
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) STPWi renamable $w0, $wzr, $fp, -6 :: (store 4 into %ir.retval), (store 4 into %ir.argc.addr)
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) STURXi renamable $x1, $fp, -40 :: (store 8 into %ir.argv.addr)
  Ready @1c
  TopQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 3 5 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(2) ORDER                              
  Cand SU(3) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) $x0 = ADRP target-flags(aarch64-page) @.str.2, debug-location !598; is.c:573:15
  Ready @2c
  TopQ.A BotLatency SU(3) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 5 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 2
  Cand SU(2) ORDER                              
  Cand SU(5) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) $x1 = ADRP target-flags(aarch64-page) @.str.3, debug-location !598; is.c:573:15
  Ready @3c
  TopQ.A BotLatency SU(5) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 4 6 
  TopQ.A RemainingLatency 0 + 4c > CritPath 2
  Cand SU(2) ORDER                              
  Cand SU(4) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.2, 0, debug-location !598; is.c:573:15
  Ready @4c
  TopQ.A TopLatency SU(4) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 6 
  TopQ.A RemainingLatency 0 + 5c > CritPath 2
  Cand SU(2) ORDER                              
  Cand SU(6) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.3, 0, debug-location !598; is.c:573:15
  Ready @5c
  TopQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi $wzr, $fp, -52, debug-location !597 :: (store 4 into %ir.timer_on); is.c:572:14
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   STPWi renamable $w0, $wzr, $fp, -6 :: (store 4 into %ir.retval), (store 4 into %ir.argc.addr)
SU(1):   STURXi renamable $x1, $fp, -40 :: (store 8 into %ir.argv.addr)
SU(3):   $x0 = ADRP target-flags(aarch64-page) @.str.2, debug-location !598; is.c:573:15
SU(5):   $x1 = ADRP target-flags(aarch64-page) @.str.3, debug-location !598; is.c:573:15
SU(4):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.2, 0, debug-location !598; is.c:573:15
SU(6):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.3, 0, debug-location !598; is.c:573:15
SU(2):   STURWi $wzr, $fp, -52, debug-location !597 :: (store 4 into %ir.timer_on); is.c:572:14

********** MI Scheduling **********
main:%bb.0 entry
  From: frame-setup STRDui killed $d8, $sp, 16 :: (store 8 into %stack.14)
    To: frame-setup CFI_INSTRUCTION def_cfa $w29, 16
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   frame-setup STRDui $d8, $sp, 16 :: (store 8 into %stack.14)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   frame-setup STPXi $x20, $x19, $sp, 18 :: (store 8 into %stack.13), (store 8 into %stack.12)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   frame-setup STPXi $fp, $lr, $sp, 20 :: (store 8 into %stack.11), (store 8 into %stack.10)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Successors:
    SU(3): Anti Latency=0
SU(3):   $fp = frame-setup ADDXri $sp, 160, 0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Anti Latency=0
ExitSU:   frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 0
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) frame-setup STRDui $d8, $sp, 16 :: (store 8 into %stack.14)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 0
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) frame-setup STPXi $x20, $x19, $sp, 18 :: (store 8 into %stack.13), (store 8 into %stack.12)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) frame-setup STPXi $fp, $lr, $sp, 20 :: (store 8 into %stack.11), (store 8 into %stack.10)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $fp = frame-setup ADDXri $sp, 160, 0
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   frame-setup STRDui $d8, $sp, 16 :: (store 8 into %stack.14)
SU(1):   frame-setup STPXi $x20, $x19, $sp, 18 :: (store 8 into %stack.13), (store 8 into %stack.12)
SU(2):   frame-setup STPXi $fp, $lr, $sp, 20 :: (store 8 into %stack.11), (store 8 into %stack.10)
SU(3):   $fp = frame-setup ADDXri $sp, 160, 0

Fixup kills for %bb.0
********** MI Scheduling **********
main:%bb.1 if.then
  From: $w8 = MOVZWi 1, 0
    To: End RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $w8 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=$w8
SU(1):   STURWi renamable $w8, $fp, -52, debug-location !606 :: (store 4 into %ir.timer_on); is.c:575:18
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$w8
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $w8 = MOVZWi 1, 0
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STURWi renamable $w8, $fp, -52, debug-location !606 :: (store 4 into %ir.timer_on); is.c:575:18
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   $w8 = MOVZWi 1, 0
SU(1):   STURWi renamable $w8, $fp, -52, debug-location !606 :: (store 4 into %ir.timer_on); is.c:575:18

Fixup kills for %bb.1
Fixup kills for %bb.2
Fixup kills for %bb.3
Fixup kills for %bb.4
Fixup kills for %bb.5
********** MI Scheduling **********
main:%bb.6 if.end6
  From: STURWi $wzr, $fp, -44, debug-location !621 :: (store 4 into %ir.i); is.c:588:12
    To: End RegionInstrs: 9
ScheduleDAGMI::schedule starting
SU(0):   STURWi $wzr, $fp, -44, debug-location !621 :: (store 4 into %ir.i); is.c:588:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $x8 = ADRP target-flags(aarch64-page) @B_test_index_array
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x8
SU(2):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @B_test_index_array, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $x9 = ADRP target-flags(aarch64-page) @test_index_array
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x9
SU(4):   renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @test_index_array, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x9
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   $x10 = ADRP target-flags(aarch64-page) @B_test_rank_array
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x10
SU(6):   renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @B_test_rank_array, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x10
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(7):   $x11 = ADRP target-flags(aarch64-page) @test_rank_array
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x11
SU(8):   renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @test_rank_array, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x11
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $x8 = ADRP target-flags(aarch64-page) @B_test_index_array
  Ready @0c
  TopQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 7 3 5 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(7) TOP-PATH                  2 cycles 
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) $x9 = ADRP target-flags(aarch64-page) @test_index_array
  Ready @1c
  TopQ.A BotLatency SU(3) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 7 2 5 4 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(7) TOP-PATH                  2 cycles 
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) $x10 = ADRP target-flags(aarch64-page) @B_test_rank_array
  Ready @2c
  TopQ.A BotLatency SU(5) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 7 2 4 6 
  TopQ.A RemainingLatency 0 + 3c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(7) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) $x11 = ADRP target-flags(aarch64-page) @test_rank_array
  Ready @3c
  TopQ.A BotLatency SU(7) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 6 2 4 8 
  TopQ.A RemainingLatency 0 + 4c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  1 cycles 
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @B_test_index_array, 0
  Ready @4c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 6 8 4 
  TopQ.A RemainingLatency 0 + 5c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  1 cycles 
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @test_index_array, 0
  Ready @5c
  TopQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 6 8 
  TopQ.A RemainingLatency 0 + 6c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @B_test_rank_array, 0
  Ready @6c
  TopQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 8 
  TopQ.A RemainingLatency 0 + 7c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(8) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @test_rank_array, 0
  Ready @7c
  TopQ.A BotLatency SU(8) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURWi $wzr, $fp, -44, debug-location !621 :: (store 4 into %ir.i); is.c:588:12
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.6 ***
SU(1):   $x8 = ADRP target-flags(aarch64-page) @B_test_index_array
SU(3):   $x9 = ADRP target-flags(aarch64-page) @test_index_array
SU(5):   $x10 = ADRP target-flags(aarch64-page) @B_test_rank_array
SU(7):   $x11 = ADRP target-flags(aarch64-page) @test_rank_array
SU(2):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @B_test_index_array, 0
SU(4):   renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @test_index_array, 0
SU(6):   renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @B_test_rank_array, 0
SU(8):   renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @test_rank_array, 0
SU(0):   STURWi $wzr, $fp, -44, debug-location !621 :: (store 4 into %ir.i); is.c:588:12

Fixup kills for %bb.6
********** MI Scheduling **********
main:%bb.7 for.cond
  From: renamable $w12 = LDURWi $fp, -44, debug-location !624 :: (dereferenceable load 4 from %ir.i); is.c:588:17
    To: Bcc 12, %bb.9, implicit $nzcv, debug-location !627; is.c:588:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w12 = LDURWi $fp, -44, debug-location !624 :: (dereferenceable load 4 from %ir.i); is.c:588:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w12
SU(1):   dead $wzr = SUBSWri renamable $w12, 4, 0, implicit-def $nzcv, debug-location !627; is.c:588:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w12
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.9, implicit $nzcv, debug-location !627; is.c:588:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w12 = LDURWi $fp, -44, debug-location !624 :: (dereferenceable load 4 from %ir.i); is.c:588:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w12, 4, 0, implicit-def $nzcv, debug-location !627; is.c:588:5
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   renamable $w12 = LDURWi $fp, -44, debug-location !624 :: (dereferenceable load 4 from %ir.i); is.c:588:17
SU(1):   dead $wzr = SUBSWri renamable $w12, 4, 0, implicit-def $nzcv, debug-location !627; is.c:588:5

Fixup kills for %bb.7
********** MI Scheduling **********
main:%bb.8 for.body
  From: renamable $x12 = LDURSWi $fp, -44, debug-location !628 :: (dereferenceable load 4 from %ir.i); is.c:603:54
    To: B %bb.7
 RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   renamable $x12 = LDURSWi $fp, -44, debug-location !628 :: (dereferenceable load 4 from %ir.i); is.c:603:54
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$w12
    SU(4): Data Latency=0 Reg=$x12
    SU(1): Data Latency=4 Reg=$x12
    SU(7): Ord  Latency=0 Memory
SU(1):   renamable $x13 = UBFMXri renamable $x12, 62, 61, debug-location !634; is.c:604:34
  # preds left       : 1
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=$x12
  Successors:
    SU(6): Data Latency=1 Reg=$x13
    SU(5): Data Latency=1 Reg=$x13
    SU(3): Data Latency=1 Reg=$x13
    SU(2): Data Latency=1 Reg=$x13
    SU(4): Anti Latency=0
SU(2):   renamable $w14 = LDRWroX renamable $x8, renamable $x13, 0, 0, debug-location !629 :: (load 4 from %ir.arrayidx); is.c:603:35
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=$x13
  Successors:
    SU(5): Data Latency=4 Reg=$w14
SU(3):   renamable $w15 = LDRWroX renamable $x10, renamable $x13, 0, 0, debug-location !634 :: (load 4 from %ir.arrayidx11); is.c:604:34
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=$x13
  Successors:
    SU(6): Data Latency=4 Reg=$w15
SU(4):   renamable $w12 = nsw ADDWri renamable $w12, 1, 0, implicit $x12, debug-location !638; is.c:588:39
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w12
    SU(0): Data Latency=0 Reg=$x12
  Successors:
    SU(7): Data Latency=1 Reg=$w12
SU(5):   STRWroX renamable $w14, renamable $x9, renamable $x13, 0, 0, debug-location !632 :: (store 4 into %ir.arrayidx9); is.c:603:33
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=$w14
    SU(1): Data Latency=1 Reg=$x13
SU(6):   STRWroX renamable $w15, renamable $x11, renamable $x13, 0, 0, debug-location !637 :: (store 4 into %ir.arrayidx13); is.c:604:32
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(3): Data Latency=4 Reg=$w15
    SU(1): Data Latency=1 Reg=$x13
SU(7):   STURWi renamable $w12, $fp, -44, debug-location !638 :: (store 4 into %ir.i); is.c:588:39
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=$w12
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.7
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 9
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x12 = LDURSWi $fp, -44, debug-location !628 :: (dereferenceable load 4 from %ir.i); is.c:603:54
  Ready @0c
  TopQ.A BotLatency SU(0) 9c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x13 = UBFMXri renamable $x12, 62, 61, debug-location !634; is.c:604:34
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 2 4 
  TopQ.A RemainingLatency 0 + 5c > CritPath 9
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) renamable $w14 = LDRWroX renamable $x8, renamable $x13, 0, 0, debug-location !629 :: (load 4 from %ir.arrayidx); is.c:603:35
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 3 4 
  TopQ.A RemainingLatency 0 + 6c > CritPath 9
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) renamable $w15 = LDRWroX renamable $x10, renamable $x13, 0, 0, debug-location !634 :: (load 4 from %ir.arrayidx11); is.c:604:34
  Ready @6c
  TopQ.A BotLatency SU(3) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 6 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w12 = nsw ADDWri renamable $w12, 1, 0, implicit $x12, debug-location !638; is.c:588:39
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 6 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) STURWi renamable $w12, $fp, -44, debug-location !638 :: (store 4 into %ir.i); is.c:588:39
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) STRWroX renamable $w14, renamable $x9, renamable $x13, 0, 0, debug-location !632 :: (store 4 into %ir.arrayidx9); is.c:603:33
  Ready @9c
  TopQ.A TopLatency SU(5) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 7
  Executed: 10c
  Critical: 7c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) STRWroX renamable $w15, renamable $x11, renamable $x13, 0, 0, debug-location !637 :: (store 4 into %ir.arrayidx13); is.c:604:32
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 8
  Executed: 11c
  Critical: 8c, 8 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   renamable $x12 = LDURSWi $fp, -44, debug-location !628 :: (dereferenceable load 4 from %ir.i); is.c:603:54
SU(1):   renamable $x13 = UBFMXri renamable $x12, 62, 61, debug-location !634; is.c:604:34
SU(2):   renamable $w14 = LDRWroX renamable $x8, renamable $x13, 0, 0, debug-location !629 :: (load 4 from %ir.arrayidx); is.c:603:35
SU(3):   renamable $w15 = LDRWroX renamable $x10, renamable $x13, 0, 0, debug-location !634 :: (load 4 from %ir.arrayidx11); is.c:604:34
SU(4):   renamable $w12 = nsw ADDWri renamable $w12, 1, 0, implicit $x12, debug-location !638; is.c:588:39
SU(7):   STURWi renamable $w12, $fp, -44, debug-location !638 :: (store 4 into %ir.i); is.c:588:39
SU(5):   STRWroX renamable $w14, renamable $x9, renamable $x13, 0, 0, debug-location !632 :: (store 4 into %ir.arrayidx9); is.c:603:33
SU(6):   STRWroX renamable $w15, renamable $x11, renamable $x13, 0, 0, debug-location !637 :: (store 4 into %ir.arrayidx13); is.c:604:32

Fixup kills for %bb.8
********** MI Scheduling **********
main:%bb.9 for.end
  From: $x0 = ADRP target-flags(aarch64-page) @.str.6, debug-location !644; is.c:619:5
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !644; is.c:619:5
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.6, debug-location !644; is.c:619:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.6, 0, debug-location !644; is.c:619:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $w1 = MOVZWi 10, 0, debug-location !644; is.c:619:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !644; is.c:619:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @.str.6, debug-location !644; is.c:619:5
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.6, 0, debug-location !644; is.c:619:5
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $w1 = MOVZWi 10, 0, debug-location !644; is.c:619:5
  Ready @2c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.6, debug-location !644; is.c:619:5
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.6, 0, debug-location !644; is.c:619:5
SU(2):   $w1 = MOVZWi 10, 0, debug-location !644; is.c:619:5

********** MI Scheduling **********
main:%bb.9 for.end
  From: $x0 = ADRP target-flags(aarch64-page) @.str.5, debug-location !643; is.c:618:5
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $w2, implicit-def $sp, implicit-def dead $w0, debug-location !643; is.c:618:5
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.5, debug-location !643; is.c:618:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.5, 0, debug-location !643; is.c:618:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   dead $w1 = MOVZWi 512, 16, implicit-def $x1, debug-location !643; is.c:618:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $w2 = MOVZWi 66, 0, debug-location !643; is.c:618:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $w2, implicit-def $sp, implicit-def dead $w0, debug-location !643; is.c:618:5
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @.str.5, debug-location !643; is.c:618:5
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.5, 0, debug-location !643; is.c:618:5
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) dead $w1 = MOVZWi 512, 16, implicit-def $x1, debug-location !643; is.c:618:5
  Ready @2c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $w2 = MOVZWi 66, 0, debug-location !643; is.c:618:5
  Ready @3c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.5, debug-location !643; is.c:618:5
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.5, 0, debug-location !643; is.c:618:5
SU(2):   dead $w1 = MOVZWi 512, 16, implicit-def $x1, debug-location !643; is.c:618:5
SU(3):   $w2 = MOVZWi 66, 0, debug-location !643; is.c:618:5

********** MI Scheduling **********
main:%bb.9 for.end
  From: $x0 = ADRP target-flags(aarch64-page) @.str.4, debug-location !642; is.c:617:5
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !642; is.c:617:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.4, debug-location !642; is.c:617:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.4, 0, debug-location !642; is.c:617:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !642; is.c:617:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @.str.4, debug-location !642; is.c:617:5
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.4, 0, debug-location !642; is.c:617:5
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.4, debug-location !642; is.c:617:5
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.4, 0, debug-location !642; is.c:617:5

Fixup kills for %bb.9
Fixup kills for %bb.10
********** MI Scheduling **********
main:%bb.11 if.end19
  From: renamable $x8 = ADRP target-flags(aarch64-page) %const.0
    To: BL @create_seq, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $d1, implicit-def $sp, debug-location !649; is.c:625:5
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) %const.0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=1 Reg=$x8
SU(1):   renamable $x9 = ADRP target-flags(aarch64-page) %const.1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=1 Reg=$x9
SU(2):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(3):   renamable $d1 = LDRDui renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=$x9
  Successors:
    ExitSU: Ord  Latency=4 Artificial
ExitSU:   BL @create_seq, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $d1, implicit-def $sp, debug-location !649; is.c:625:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
    SU(2): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) %const.0
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(1) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x9 = ADRP target-flags(aarch64-page) %const.1
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $d1 = LDRDui renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  Ready @3c
  TopQ.A BotLatency SU(3) 4c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) %const.0
SU(1):   renamable $x9 = ADRP target-flags(aarch64-page) %const.1
SU(2):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
SU(3):   renamable $d1 = LDRDui renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)

Fixup kills for %bb.11
Fixup kills for %bb.12
********** MI Scheduling **********
main:%bb.13 if.end22
  From: STURWi killed renamable $w19, $fp, -48, debug-location !659 :: (store 4 into %ir.iteration); is.c:646:20
    To: End RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   STURWi renamable $w19, $fp, -48, debug-location !659 :: (store 4 into %ir.iteration); is.c:646:20
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Anti Latency=0
SU(1):   $x19 = ADRP target-flags(aarch64-page) @.str.8
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Predecessors:
    SU(0): Anti Latency=0
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x19
SU(2):   renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str.8, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURWi renamable $w19, $fp, -48, debug-location !659 :: (store 4 into %ir.iteration); is.c:646:20
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x19 = ADRP target-flags(aarch64-page) @.str.8
  Ready @1c
  TopQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str.8, 0
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   STURWi renamable $w19, $fp, -48, debug-location !659 :: (store 4 into %ir.iteration); is.c:646:20
SU(1):   $x19 = ADRP target-flags(aarch64-page) @.str.8
SU(2):   renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str.8, 0

********** MI Scheduling **********
main:%bb.13 if.end22
  From: renamable $x20 = ADRP target-flags(aarch64-page) @passed_verification, debug-location !655; is.c:635:25
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !656; is.c:638:9
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $x20 = ADRP target-flags(aarch64-page) @passed_verification, debug-location !655; is.c:635:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=$x20
SU(1):   STRWui $wzr, renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !655 :: (store 4 into @passed_verification); is.c:635:25
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$x20
SU(2):   $x0 = ADRP target-flags(aarch64-page) @.str.7, debug-location !656; is.c:638:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x0
SU(3):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.7, 0, debug-location !656; is.c:638:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !656; is.c:638:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x0 = ADRP target-flags(aarch64-page) @.str.7, debug-location !656; is.c:638:9
  Ready @0c
  TopQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x20 = ADRP target-flags(aarch64-page) @passed_verification, debug-location !655; is.c:635:25
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 1 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.7, 0, debug-location !656; is.c:638:9
  Ready @2c
  TopQ.A TopLatency SU(3) 1c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRWui $wzr, renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !655 :: (store 4 into @passed_verification); is.c:635:25
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.13 ***
SU(2):   $x0 = ADRP target-flags(aarch64-page) @.str.7, debug-location !656; is.c:638:9
SU(0):   renamable $x20 = ADRP target-flags(aarch64-page) @passed_verification, debug-location !655; is.c:635:25
SU(3):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.7, 0, debug-location !656; is.c:638:9
SU(1):   STRWui $wzr, renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !655 :: (store 4 into @passed_verification); is.c:635:25

********** MI Scheduling **********
main:%bb.13 if.end22
  From: $w0 = MOVZWi 1, 0, debug-location !654; is.c:632:5
    To: BL @rank, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !654; is.c:632:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $w0 = MOVZWi 1, 0, debug-location !654; is.c:632:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(1):   $w19 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
ExitSU:   BL @rank, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !654; is.c:632:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $w0 = MOVZWi 1, 0, debug-location !654; is.c:632:5
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w19 = MOVZWi 1, 0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   $w0 = MOVZWi 1, 0, debug-location !654; is.c:632:5
SU(1):   $w19 = MOVZWi 1, 0

Fixup kills for %bb.13
********** MI Scheduling **********
main:%bb.14 for.cond28
  From: renamable $w8 = LDURWi $fp, -48, debug-location !662 :: (dereferenceable load 4 from %ir.iteration); is.c:646:25
    To: Bcc 12, %bb.16, implicit $nzcv, debug-location !665; is.c:646:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -48, debug-location !662 :: (dereferenceable load 4 from %ir.iteration); is.c:646:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 10, 0, implicit-def $nzcv, debug-location !665; is.c:646:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.16, implicit $nzcv, debug-location !665; is.c:646:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -48, debug-location !662 :: (dereferenceable load 4 from %ir.iteration); is.c:646:25
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 10, 0, implicit-def $nzcv, debug-location !665; is.c:646:5
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   renamable $w8 = LDURWi $fp, -48, debug-location !662 :: (dereferenceable load 4 from %ir.iteration); is.c:646:25
SU(1):   dead $wzr = SUBSWri renamable $w8, 10, 0, implicit-def $nzcv, debug-location !665; is.c:646:5

Fixup kills for %bb.14
********** MI Scheduling **********
main:%bb.15 for.body30
  From: renamable $w8 = LDURWi $fp, -48, debug-location !672 :: (dereferenceable load 4 from %ir.iteration); is.c:646:63
    To: B %bb.14
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -48, debug-location !672 :: (dereferenceable load 4 from %ir.iteration); is.c:646:63
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !672; is.c:646:63
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STURWi renamable $w8, $fp, -48, debug-location !672 :: (store 4 into %ir.iteration); is.c:646:63
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.14
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -48, debug-location !672 :: (dereferenceable load 4 from %ir.iteration); is.c:646:63
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !672; is.c:646:63
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w8, $fp, -48, debug-location !672 :: (store 4 into %ir.iteration); is.c:646:63
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   renamable $w8 = LDURWi $fp, -48, debug-location !672 :: (dereferenceable load 4 from %ir.iteration); is.c:646:63
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !672; is.c:646:63
SU(2):   STURWi renamable $w8, $fp, -48, debug-location !672 :: (store 4 into %ir.iteration); is.c:646:63

********** MI Scheduling **********
main:%bb.15 for.body30
  From: renamable $w1 = LDURWi $fp, -48, debug-location !666 :: (dereferenceable load 4 from %ir.iteration); is.c:648:36
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !669; is.c:648:13
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w1 = LDURWi $fp, -48, debug-location !666 :: (dereferenceable load 4 from %ir.iteration); is.c:648:36
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(1):   $x0 = ORRXrs $xzr, $x19, 0, debug-location !669; is.c:648:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !669; is.c:648:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w1 = LDURWi $fp, -48, debug-location !666 :: (dereferenceable load 4 from %ir.iteration); is.c:648:36
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ORRXrs $xzr, $x19, 0, debug-location !669; is.c:648:13
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   renamable $w1 = LDURWi $fp, -48, debug-location !666 :: (dereferenceable load 4 from %ir.iteration); is.c:648:36
SU(1):   $x0 = ORRXrs $xzr, $x19, 0, debug-location !669; is.c:648:13

Fixup kills for %bb.15
********** MI Scheduling **********
main:%bb.16 do.end38
  From: renamable $w8 = LDURWi $fp, -52, debug-location !679 :: (dereferenceable load 4 from %ir.timer_on); is.c:662:9
    To: CBZW killed renamable $w8, %bb.18, debug-location !681; is.c:662:9
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -52, debug-location !679 :: (dereferenceable load 4 from %ir.timer_on); is.c:662:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(1):   STURDi renamable $d0, $fp, -64, debug-location !678 :: (store 8 into %ir.timecounter); is.c:658:17
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
ExitSU:   CBZW killed renamable $w8, %bb.18, debug-location !681; is.c:662:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w8 = LDURWi $fp, -52, debug-location !679 :: (dereferenceable load 4 from %ir.timer_on); is.c:662:9
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STURDi renamable $d0, $fp, -64, debug-location !678 :: (store 8 into %ir.timecounter); is.c:658:17
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.16 ***
SU(0):   renamable $w8 = LDURWi $fp, -52, debug-location !679 :: (dereferenceable load 4 from %ir.timer_on); is.c:662:9
SU(1):   STURDi renamable $d0, $fp, -64, debug-location !678 :: (store 8 into %ir.timecounter); is.c:658:17

Fixup kills for %bb.16
Fixup kills for %bb.17
Fixup kills for %bb.18
Fixup kills for %bb.19
Fixup kills for %bb.20
Fixup kills for %bb.21
********** MI Scheduling **********
main:%bb.22 if.end48
  From: renamable $w8 = LDRWui renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !692 :: (dereferenceable load 4 from @passed_verification); is.c:672:9
    To: Bcc 0, %bb.24, implicit $nzcv, debug-location !695; is.c:672:9
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !692 :: (dereferenceable load 4 from @passed_verification); is.c:672:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 51, 0, implicit-def $nzcv, debug-location !695; is.c:672:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 0, %bb.24, implicit $nzcv, debug-location !695; is.c:672:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !692 :: (dereferenceable load 4 from @passed_verification); is.c:672:9
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 51, 0, implicit-def $nzcv, debug-location !695; is.c:672:9
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.22 ***
SU(0):   renamable $w8 = LDRWui renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !692 :: (dereferenceable load 4 from @passed_verification); is.c:672:9
SU(1):   dead $wzr = SUBSWri renamable $w8, 51, 0, implicit-def $nzcv, debug-location !695; is.c:672:9

Fixup kills for %bb.22
Fixup kills for %bb.23
********** MI Scheduling **********
main:%bb.24 if.end51
  From: renamable $d0 = LDURDi $fp, -64, debug-location !698 :: (dereferenceable load 8 from %ir.timecounter); is.c:675:69
    To: BL @c_print_results, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit $w4, implicit killed $w5, implicit $d0, implicit $d1, implicit $x6, implicit $w7, implicit-def $sp, debug-location !703; is.c:674:5
 RegionInstrs: 38
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDURDi $fp, -64, debug-location !698 :: (dereferenceable load 8 from %ir.timecounter); is.c:675:69
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(6): Data Latency=4 Reg=$d0
SU(1):   $x8 = MOVZXi 16820, 48
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x8
SU(2):   $d1 = FMOVXDr $x8
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$d1
    SU(4): Anti Latency=0
SU(3):   renamable $w7 = LDRWui renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !702 :: (dereferenceable load 4 from @passed_verification); is.c:677:24
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(4):   $x8 = MOVZXi 33920, 32
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(2): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x8
SU(5):   $x8 = MOVKXi $x8(tied-def 0), 16686, 48
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 3
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x8
  Successors:
    SU(9): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x8
SU(6):   renamable $d1 = FDIVDrr renamable $d1, renamable $d0, debug-location !700; is.c:676:49
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$d1
    SU(0): Data Latency=4 Reg=$d0
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$d1
SU(7):   $d2 = FMOVXDr $x8
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 2
  Predecessors:
    SU(5): Data Latency=1 Reg=$x8
  Successors:
    SU(8): Data Latency=1 Reg=$d2
    SU(9): Anti Latency=0
SU(8):   renamable $d1 = FDIVDrr renamable $d1, renamable $d2, debug-location !701; is.c:676:63
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(6): Data Latency=1 Reg=$d1
    SU(6): Out  Latency=1
    SU(7): Data Latency=1 Reg=$d2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(9):   $x8 = ADRP target-flags(aarch64-page) @.str.18, debug-location !703; is.c:674:5
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 2
  Predecessors:
    SU(7): Anti Latency=0
    SU(5): Out  Latency=1
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x8
SU(10):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.18, 0, debug-location !703; is.c:674:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x8
  Successors:
    SU(27): Data Latency=1 Reg=$x8
SU(11):   $x9 = ADRP target-flags(aarch64-page) @.str.17, debug-location !703; is.c:674:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x9
SU(12):   renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.17, 0, debug-location !703; is.c:674:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x9
  Successors:
    SU(27): Data Latency=1 Reg=$x9
SU(13):   $x10 = ADRP target-flags(aarch64-page) @.str.16, debug-location !703; is.c:674:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(14): Out  Latency=1
    SU(14): Data Latency=1 Reg=$x10
SU(14):   renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.16, 0, debug-location !703; is.c:674:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x10
  Successors:
    SU(30): Data Latency=1 Reg=$x10
SU(15):   $x11 = ADRP target-flags(aarch64-page) @.str.15, debug-location !703; is.c:674:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(16): Out  Latency=1
    SU(16): Data Latency=1 Reg=$x11
SU(16):   renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @.str.15, 0, debug-location !703; is.c:674:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(15): Out  Latency=1
    SU(15): Data Latency=1 Reg=$x11
  Successors:
    SU(30): Data Latency=1 Reg=$x11
SU(17):   $x12 = ADRP target-flags(aarch64-page) @.str.14, debug-location !703; is.c:674:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(18): Out  Latency=1
    SU(18): Data Latency=1 Reg=$x12
SU(18):   renamable $x12 = ADDXri $x12, target-flags(aarch64-pageoff, aarch64-nc) @.str.14, 0, debug-location !703; is.c:674:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(17): Out  Latency=1
    SU(17): Data Latency=1 Reg=$x12
  Successors:
    SU(31): Data Latency=1 Reg=$x12
SU(19):   $x13 = ADRP target-flags(aarch64-page) @.str.13, debug-location !703; is.c:674:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(20): Out  Latency=1
    SU(20): Data Latency=1 Reg=$x13
SU(20):   renamable $x13 = ADDXri $x13, target-flags(aarch64-pageoff, aarch64-nc) @.str.13, 0, debug-location !703; is.c:674:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(19): Out  Latency=1
    SU(19): Data Latency=1 Reg=$x13
  Successors:
    SU(31): Data Latency=1 Reg=$x13
SU(21):   $x14 = ADRP target-flags(aarch64-page) @.str.12, debug-location !703; is.c:674:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(22): Out  Latency=1
    SU(22): Data Latency=1 Reg=$x14
SU(22):   renamable $x14 = ADDXri $x14, target-flags(aarch64-pageoff, aarch64-nc) @.str.12, 0, debug-location !703; is.c:674:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(21): Out  Latency=1
    SU(21): Data Latency=1 Reg=$x14
  Successors:
    SU(32): Data Latency=1 Reg=$x14
SU(23):   $x15 = ADRP target-flags(aarch64-page) @.str.11, debug-location !703; is.c:674:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(24): Out  Latency=1
    SU(24): Data Latency=1 Reg=$x15
SU(24):   renamable $x15 = ADDXri $x15, target-flags(aarch64-pageoff, aarch64-nc) @.str.11, 0, debug-location !703; is.c:674:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(23): Out  Latency=1
    SU(23): Data Latency=1 Reg=$x15
  Successors:
    SU(32): Data Latency=1 Reg=$x15
SU(25):   $x0 = ADRP target-flags(aarch64-page) @.str.9, debug-location !703; is.c:674:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(26): Out  Latency=1
    SU(26): Data Latency=1 Reg=$x0
SU(26):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.9, 0, debug-location !703; is.c:674:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(25): Out  Latency=1
    SU(25): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(27):   STPXi renamable $x9, renamable $x8, $sp, 6, debug-location !703 :: (store 8 into stack + 48), (store 8 into stack + 56); is.c:674:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=$x8
    SU(12): Data Latency=1 Reg=$x9
SU(28):   $x6 = ADRP target-flags(aarch64-page) @.str.10, debug-location !703; is.c:674:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(29): Out  Latency=1
    SU(29): Data Latency=1 Reg=$x6
SU(29):   renamable $x6 = ADDXri $x6, target-flags(aarch64-pageoff, aarch64-nc) @.str.10, 0, debug-location !703; is.c:674:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(28): Out  Latency=1
    SU(28): Data Latency=1 Reg=$x6
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(30):   STPXi renamable $x11, renamable $x10, $sp, 4, debug-location !703 :: (store 8 into stack + 32), (store 8 into stack + 40); is.c:674:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(16): Data Latency=1 Reg=$x11
    SU(14): Data Latency=1 Reg=$x10
SU(31):   STPXi renamable $x13, renamable $x12, $sp, 2, debug-location !703 :: (store 8 into stack + 16), (store 8 into stack + 24); is.c:674:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(20): Data Latency=1 Reg=$x13
    SU(18): Data Latency=1 Reg=$x12
SU(32):   STPXi renamable $x15, renamable $x14, $sp, 0, debug-location !703 :: (store 8 into stack), (store 8 into stack + 8); is.c:674:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(24): Data Latency=1 Reg=$x15
    SU(22): Data Latency=1 Reg=$x14
SU(33):   $w1 = MOVZWi 66, 0, debug-location !703; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(34):   $w2 = MOVZWi 8, 16, debug-location !703; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(35):   $w3 = MOVZWi 64, 0, debug-location !703; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(36):   $w5 = MOVZWi 10, 0, debug-location !703; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(37):   $w4 = ORRWrs $wzr, $wzr, 0, debug-location !703; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @c_print_results, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit $w4, implicit killed $w5, implicit $d0, implicit $d1, implicit $x6, implicit $w7, implicit-def $sp, debug-location !703; is.c:674:5
  # preds left       : 10
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(37): Ord  Latency=1 Artificial
    SU(36): Ord  Latency=1 Artificial
    SU(35): Ord  Latency=1 Artificial
    SU(34): Ord  Latency=1 Artificial
    SU(33): Ord  Latency=1 Artificial
    SU(29): Ord  Latency=1 Artificial
    SU(26): Ord  Latency=1 Artificial
    SU(8): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=4 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 11 13 15 17 19 21 23 25 28 33 34 35 36 37 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0 = LDURDi $fp, -64, debug-location !698 :: (dereferenceable load 8 from %ir.timecounter); is.c:675:69
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 1 3 11 13 15 17 19 21 23 25 28 33 34 35 36 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(37) ORDER                              
  Cand SU(1) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $x8 = MOVZXi 16820, 48
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 36 3 11 13 15 17 19 21 23 25 28 33 34 35 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 6
  Cand SU(37) ORDER                              
  Cand SU(36) ORDER                              
  Cand SU(3) TOP-PATH                  4 cycles 
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) $d1 = FMOVXDr $x8
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 37 36 3 11 13 15 17 19 21 23 25 28 33 34 35 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 6
  Cand SU(37) ORDER                              
  Cand SU(36) ORDER                              
  Cand SU(3) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $w7 = LDRWui renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !702 :: (dereferenceable load 4 from @passed_verification); is.c:677:24
  Ready @3c
  TopQ.A BotLatency SU(3) 4c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 36 4 11 13 15 17 19 21 23 25 28 33 34 35 6 
  TopQ.A RemainingLatency 0 + 4c > CritPath 6
  Cand SU(37) ORDER                              
  Cand SU(36) ORDER                              
  Cand SU(4) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) $x8 = MOVZXi 33920, 32
  Ready @4c
  TopQ.A BotLatency SU(4) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 36 6 11 13 15 17 19 21 23 25 28 33 34 35 5 
  TopQ.A RemainingLatency 0 + 5c > CritPath 6
  Cand SU(37) ORDER                              
  Cand SU(36) ORDER                              
  Cand SU(6) TOP-PATH                  2 cycles 
  Cand SU(5) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) $x8 = MOVKXi $x8(tied-def 0), 16686, 48
  Ready @5c
  TopQ.A TopLatency SU(5) 2c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 36 6 11 13 15 17 19 21 23 25 28 33 34 35 7 
  TopQ.A RemainingLatency 0 + 6c > CritPath 6
  Cand SU(37) ORDER                              
  Cand SU(36) ORDER                              
  Cand SU(6) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) renamable $d1 = FDIVDrr renamable $d1, renamable $d0, debug-location !700; is.c:676:49
  Ready @6c
  TopQ.A TopLatency SU(6) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 36 7 11 13 15 17 19 21 23 25 28 33 34 35 
  TopQ.A RemainingLatency 0 + 7c > CritPath 6
  Cand SU(37) ORDER                              
  Cand SU(36) ORDER                              
  Cand SU(7) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) $d2 = FMOVXDr $x8
  Ready @7c
  TopQ.A BotLatency SU(7) 2c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 36 35 11 13 15 17 19 21 23 25 28 33 34 8 9 
  TopQ.A RemainingLatency 0 + 8c > CritPath 6
  Cand SU(37) ORDER                              
  Cand SU(36) ORDER                              
  Cand SU(35) ORDER                              
  Cand SU(11) TOP-PATH                  2 cycles 
  Cand SU(9) ORDER                              
Pick Top ORDER     
Scheduling SU(9) $x8 = ADRP target-flags(aarch64-page) @.str.18, debug-location !703; is.c:674:5
  Ready @8c
  TopQ.A BotLatency SU(9) 2c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 36 35 11 13 15 17 19 21 23 25 28 33 34 8 10 
  TopQ.A RemainingLatency 0 + 9c > CritPath 6
  Cand SU(37) ORDER                              
  Cand SU(36) ORDER                              
  Cand SU(35) ORDER                              
  Cand SU(11) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(11) $x9 = ADRP target-flags(aarch64-page) @.str.17, debug-location !703; is.c:674:5
  Ready @9c
  TopQ.A BotLatency SU(11) 2c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 36 35 10 13 15 17 19 21 23 25 28 33 34 8 12 
  TopQ.A RemainingLatency 0 + 10c > CritPath 6
  Cand SU(37) ORDER                              
  Cand SU(36) ORDER                              
  Cand SU(35) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(13) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(13) $x10 = ADRP target-flags(aarch64-page) @.str.16, debug-location !703; is.c:674:5
  Ready @10c
  TopQ.A BotLatency SU(13) 2c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 36 35 10 12 15 17 19 21 23 25 28 33 34 8 14 
  TopQ.A RemainingLatency 0 + 11c > CritPath 6
  Cand SU(37) ORDER                              
  Cand SU(36) ORDER                              
  Cand SU(35) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(15) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(15) $x11 = ADRP target-flags(aarch64-page) @.str.15, debug-location !703; is.c:674:5
  Ready @11c
  TopQ.A BotLatency SU(15) 2c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 36 35 10 12 14 17 19 21 23 25 28 33 34 8 16 
  TopQ.A RemainingLatency 0 + 12c > CritPath 6
  Cand SU(37) ORDER                              
  Cand SU(36) ORDER                              
  Cand SU(35) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(17) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(17) $x12 = ADRP target-flags(aarch64-page) @.str.14, debug-location !703; is.c:674:5
  Ready @12c
  TopQ.A BotLatency SU(17) 2c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 36 35 10 12 14 16 19 21 23 25 28 33 34 8 18 
  TopQ.A RemainingLatency 0 + 13c > CritPath 6
  Cand SU(37) ORDER                              
  Cand SU(36) ORDER                              
  Cand SU(35) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(19) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(19) $x13 = ADRP target-flags(aarch64-page) @.str.13, debug-location !703; is.c:674:5
  Ready @13c
  TopQ.A BotLatency SU(19) 2c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 36 35 10 12 14 16 18 21 23 25 28 33 34 8 20 
  TopQ.A RemainingLatency 0 + 14c > CritPath 6
  Cand SU(37) ORDER                              
  Cand SU(36) ORDER                              
  Cand SU(35) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(21) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(21) $x14 = ADRP target-flags(aarch64-page) @.str.12, debug-location !703; is.c:674:5
  Ready @14c
  TopQ.A BotLatency SU(21) 2c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 36 35 10 12 14 16 18 20 23 25 28 33 34 8 22 
  TopQ.A RemainingLatency 0 + 15c > CritPath 6
  Cand SU(37) ORDER                              
  Cand SU(36) ORDER                              
  Cand SU(35) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(23) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(23) $x15 = ADRP target-flags(aarch64-page) @.str.11, debug-location !703; is.c:674:5
  Ready @15c
  TopQ.A BotLatency SU(23) 2c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 36 35 10 12 14 16 18 20 22 25 28 33 34 8 24 
  TopQ.A RemainingLatency 0 + 16c > CritPath 6
  Cand SU(37) ORDER                              
  Cand SU(36) ORDER                              
  Cand SU(35) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(25) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(25) $x0 = ADRP target-flags(aarch64-page) @.str.9, debug-location !703; is.c:674:5
  Ready @16c
  TopQ.A BotLatency SU(25) 2c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 36 35 10 12 14 16 18 20 22 24 28 33 34 8 26 
  TopQ.A RemainingLatency 0 + 17c > CritPath 6
  Cand SU(37) ORDER                              
  Cand SU(36) ORDER                              
  Cand SU(35) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(28) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(28) $x6 = ADRP target-flags(aarch64-page) @.str.10, debug-location !703; is.c:674:5
  Ready @17c
  TopQ.A BotLatency SU(28) 2c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 36 35 10 12 14 16 18 20 22 24 26 33 34 8 29 
  TopQ.A RemainingLatency 0 + 18c > CritPath 6
  Cand SU(37) ORDER                              
  Cand SU(36) ORDER                              
  Cand SU(35) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(8) ORDER                              
Pick Top ORDER     
Scheduling SU(8) renamable $d1 = FDIVDrr renamable $d1, renamable $d2, debug-location !701; is.c:676:63
  Ready @18c
  TopQ.A TopLatency SU(8) 5c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 36 35 10 12 14 16 18 20 22 24 26 33 34 29 
  TopQ.A RemainingLatency 0 + 19c > CritPath 6
  Cand SU(37) ORDER                              
  Cand SU(36) ORDER                              
  Cand SU(35) ORDER                              
  Cand SU(10) ORDER                              
Pick Top ORDER     
Scheduling SU(10) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.18, 0, debug-location !703; is.c:674:5
  Ready @19c
  TopQ.A BotLatency SU(10) 1c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 36 35 29 12 14 16 18 20 22 24 26 33 34 
  TopQ.A RemainingLatency 0 + 20c > CritPath 6
  Cand SU(37) ORDER                              
  Cand SU(36) ORDER                              
  Cand SU(35) ORDER                              
  Cand SU(29) ORDER                              
  Cand SU(12) ORDER                              
Pick Top ORDER     
Scheduling SU(12) renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.17, 0, debug-location !703; is.c:674:5
  Ready @20c
  TopQ.A BotLatency SU(12) 1c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 36 35 29 34 14 16 18 20 22 24 26 33 27 
  TopQ.A RemainingLatency 0 + 21c > CritPath 6
  Cand SU(37) ORDER                              
  Cand SU(36) ORDER                              
  Cand SU(35) ORDER                              
  Cand SU(29) ORDER                              
  Cand SU(14) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(14) renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.16, 0, debug-location !703; is.c:674:5
  Ready @21c
  TopQ.A BotLatency SU(14) 1c
  *** Max MOps 1 at cycle 21
Cycle: 22 TopQ.A
TopQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 36 35 29 34 27 16 18 20 22 24 26 33 
  TopQ.A RemainingLatency 0 + 22c > CritPath 6
  Cand SU(37) ORDER                              
  Cand SU(36) ORDER                              
  Cand SU(35) ORDER                              
  Cand SU(29) ORDER                              
  Cand SU(16) ORDER                              
Pick Top ORDER     
Scheduling SU(16) renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @.str.15, 0, debug-location !703; is.c:674:5
  Ready @22c
  TopQ.A BotLatency SU(16) 1c
  *** Max MOps 1 at cycle 22
Cycle: 23 TopQ.A
TopQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 36 35 29 34 27 33 18 20 22 24 26 30 
  TopQ.A RemainingLatency 0 + 23c > CritPath 6
  Cand SU(37) ORDER                              
  Cand SU(36) ORDER                              
  Cand SU(35) ORDER                              
  Cand SU(29) ORDER                              
  Cand SU(18) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(18) renamable $x12 = ADDXri $x12, target-flags(aarch64-pageoff, aarch64-nc) @.str.14, 0, debug-location !703; is.c:674:5
  Ready @23c
  TopQ.A BotLatency SU(18) 1c
  *** Max MOps 1 at cycle 23
Cycle: 24 TopQ.A
TopQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 36 35 29 34 27 33 30 20 22 24 26 
  TopQ.A RemainingLatency 0 + 24c > CritPath 6
  Cand SU(37) ORDER                              
  Cand SU(36) ORDER                              
  Cand SU(35) ORDER                              
  Cand SU(29) ORDER                              
  Cand SU(20) ORDER                              
Pick Top ORDER     
Scheduling SU(20) renamable $x13 = ADDXri $x13, target-flags(aarch64-pageoff, aarch64-nc) @.str.13, 0, debug-location !703; is.c:674:5
  Ready @24c
  TopQ.A BotLatency SU(20) 1c
  *** Max MOps 1 at cycle 24
Cycle: 25 TopQ.A
TopQ.A @25c
  Retired: 25
  Executed: 25c
  Critical: 25c, 25 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 36 35 29 34 27 33 30 26 22 24 31 
  TopQ.A RemainingLatency 0 + 25c > CritPath 6
  Cand SU(37) ORDER                              
  Cand SU(36) ORDER                              
  Cand SU(35) ORDER                              
  Cand SU(29) ORDER                              
  Cand SU(26) ORDER                              
  Cand SU(22) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(22) renamable $x14 = ADDXri $x14, target-flags(aarch64-pageoff, aarch64-nc) @.str.12, 0, debug-location !703; is.c:674:5
  Ready @25c
  TopQ.A BotLatency SU(22) 1c
  *** Max MOps 1 at cycle 25
Cycle: 26 TopQ.A
TopQ.A @26c
  Retired: 26
  Executed: 26c
  Critical: 26c, 26 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 36 35 29 34 27 33 30 26 31 24 
  TopQ.A RemainingLatency 0 + 26c > CritPath 6
  Cand SU(37) ORDER                              
  Cand SU(36) ORDER                              
  Cand SU(35) ORDER                              
  Cand SU(29) ORDER                              
  Cand SU(26) ORDER                              
  Cand SU(24) ORDER                              
Pick Top ORDER     
Scheduling SU(24) renamable $x15 = ADDXri $x15, target-flags(aarch64-pageoff, aarch64-nc) @.str.11, 0, debug-location !703; is.c:674:5
  Ready @26c
  TopQ.A BotLatency SU(24) 1c
  *** Max MOps 1 at cycle 26
Cycle: 27 TopQ.A
TopQ.A @27c
  Retired: 27
  Executed: 27c
  Critical: 27c, 27 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 36 35 29 34 27 33 30 26 31 32 
  TopQ.A RemainingLatency 0 + 27c > CritPath 6
  Cand SU(37) ORDER                              
  Cand SU(36) ORDER                              
  Cand SU(35) ORDER                              
  Cand SU(29) ORDER                              
  Cand SU(26) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(26) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.9, 0, debug-location !703; is.c:674:5
  Ready @27c
  TopQ.A BotLatency SU(26) 1c
  *** Max MOps 1 at cycle 27
Cycle: 28 TopQ.A
TopQ.A @28c
  Retired: 28
  Executed: 28c
  Critical: 28c, 28 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 36 35 29 34 27 33 30 32 31 
  TopQ.A RemainingLatency 0 + 28c > CritPath 6
  Cand SU(37) ORDER                              
  Cand SU(36) ORDER                              
  Cand SU(35) ORDER                              
  Cand SU(29) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(29) renamable $x6 = ADDXri $x6, target-flags(aarch64-pageoff, aarch64-nc) @.str.10, 0, debug-location !703; is.c:674:5
  Ready @28c
  TopQ.A BotLatency SU(29) 1c
  *** Max MOps 1 at cycle 28
Cycle: 29 TopQ.A
TopQ.A @29c
  Retired: 29
  Executed: 29c
  Critical: 29c, 29 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 36 35 31 34 27 33 30 32 
  TopQ.A RemainingLatency 0 + 29c > CritPath 6
  Cand SU(37) ORDER                              
  Cand SU(36) ORDER                              
  Cand SU(35) ORDER                              
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(33) $w1 = MOVZWi 66, 0, debug-location !703; is.c:674:5
  Ready @29c
  TopQ.A BotLatency SU(33) 1c
  *** Max MOps 1 at cycle 29
Cycle: 30 TopQ.A
TopQ.A @30c
  Retired: 30
  Executed: 30c
  Critical: 30c, 30 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 36 35 31 34 27 32 30 
  TopQ.A RemainingLatency 0 + 30c > CritPath 6
  Cand SU(37) ORDER                              
  Cand SU(36) ORDER                              
  Cand SU(35) ORDER                              
  Cand SU(34) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(34) $w2 = MOVZWi 8, 16, debug-location !703; is.c:674:5
  Ready @30c
  TopQ.A BotLatency SU(34) 1c
  *** Max MOps 1 at cycle 30
Cycle: 31 TopQ.A
TopQ.A @31c
  Retired: 31
  Executed: 31c
  Critical: 31c, 31 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 36 35 31 30 27 32 
  TopQ.A RemainingLatency 0 + 31c > CritPath 6
  Cand SU(37) ORDER                              
  Cand SU(36) ORDER                              
  Cand SU(35) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(35) $w3 = MOVZWi 64, 0, debug-location !703; is.c:674:5
  Ready @31c
  TopQ.A BotLatency SU(35) 1c
  *** Max MOps 1 at cycle 31
Cycle: 32 TopQ.A
TopQ.A @32c
  Retired: 32
  Executed: 32c
  Critical: 32c, 32 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 36 32 31 30 27 
  TopQ.A RemainingLatency 0 + 32c > CritPath 6
  Cand SU(37) ORDER                              
  Cand SU(36) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(36) $w5 = MOVZWi 10, 0, debug-location !703; is.c:674:5
  Ready @32c
  TopQ.A BotLatency SU(36) 1c
  *** Max MOps 1 at cycle 32
Cycle: 33 TopQ.A
TopQ.A @33c
  Retired: 33
  Executed: 33c
  Critical: 33c, 33 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 27 32 31 30 
  TopQ.A RemainingLatency 0 + 33c > CritPath 6
  Cand SU(37) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(37) $w4 = ORRWrs $wzr, $wzr, 0, debug-location !703; is.c:674:5
  Ready @33c
  TopQ.A BotLatency SU(37) 1c
  *** Max MOps 1 at cycle 33
Cycle: 34 TopQ.A
TopQ.A @34c
  Retired: 34
  Executed: 34c
  Critical: 34c, 34 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 30 27 32 31 
  TopQ.A RemainingLatency 0 + 34c > CritPath 6
  Cand SU(30) ORDER                              
  Cand SU(27) ORDER                              
Pick Top ORDER     
Scheduling SU(27) STPXi renamable $x9, renamable $x8, $sp, 6, debug-location !703 :: (store 8 into stack + 48), (store 8 into stack + 56); is.c:674:5
  Ready @34c
  *** Max MOps 1 at cycle 34
Cycle: 35 TopQ.A
TopQ.A @35c
  Retired: 35
  Executed: 35c
  Critical: 35c, 35 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 30 31 32 
  TopQ.A RemainingLatency 0 + 35c > CritPath 6
  Cand SU(30) ORDER                              
Pick Top ORDER     
Scheduling SU(30) STPXi renamable $x11, renamable $x10, $sp, 4, debug-location !703 :: (store 8 into stack + 32), (store 8 into stack + 40); is.c:674:5
  Ready @35c
  *** Max MOps 1 at cycle 35
Cycle: 36 TopQ.A
TopQ.A @36c
  Retired: 36
  Executed: 36c
  Critical: 36c, 36 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 32 31 
  TopQ.A RemainingLatency 0 + 36c > CritPath 6
  Cand SU(32) ORDER                              
  Cand SU(31) ORDER                              
Pick Top ORDER     
Scheduling SU(31) STPXi renamable $x13, renamable $x12, $sp, 2, debug-location !703 :: (store 8 into stack + 16), (store 8 into stack + 24); is.c:674:5
  Ready @36c
  *** Max MOps 1 at cycle 36
Cycle: 37 TopQ.A
TopQ.A @37c
  Retired: 37
  Executed: 37c
  Critical: 37c, 37 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 32 
Pick Top ONLY1     
Scheduling SU(32) STPXi renamable $x15, renamable $x14, $sp, 0, debug-location !703 :: (store 8 into stack), (store 8 into stack + 8); is.c:674:5
  Ready @37c
  *** Max MOps 1 at cycle 37
Cycle: 38 TopQ.A
TopQ.A @38c
  Retired: 38
  Executed: 38c
  Critical: 38c, 38 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.24 ***
SU(0):   renamable $d0 = LDURDi $fp, -64, debug-location !698 :: (dereferenceable load 8 from %ir.timecounter); is.c:675:69
SU(1):   $x8 = MOVZXi 16820, 48
SU(2):   $d1 = FMOVXDr $x8
SU(3):   renamable $w7 = LDRWui renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @passed_verification, debug-location !702 :: (dereferenceable load 4 from @passed_verification); is.c:677:24
SU(4):   $x8 = MOVZXi 33920, 32
SU(5):   $x8 = MOVKXi $x8(tied-def 0), 16686, 48
SU(6):   renamable $d1 = FDIVDrr renamable $d1, renamable $d0, debug-location !700; is.c:676:49
SU(7):   $d2 = FMOVXDr $x8
SU(9):   $x8 = ADRP target-flags(aarch64-page) @.str.18, debug-location !703; is.c:674:5
SU(11):   $x9 = ADRP target-flags(aarch64-page) @.str.17, debug-location !703; is.c:674:5
SU(13):   $x10 = ADRP target-flags(aarch64-page) @.str.16, debug-location !703; is.c:674:5
SU(15):   $x11 = ADRP target-flags(aarch64-page) @.str.15, debug-location !703; is.c:674:5
SU(17):   $x12 = ADRP target-flags(aarch64-page) @.str.14, debug-location !703; is.c:674:5
SU(19):   $x13 = ADRP target-flags(aarch64-page) @.str.13, debug-location !703; is.c:674:5
SU(21):   $x14 = ADRP target-flags(aarch64-page) @.str.12, debug-location !703; is.c:674:5
SU(23):   $x15 = ADRP target-flags(aarch64-page) @.str.11, debug-location !703; is.c:674:5
SU(25):   $x0 = ADRP target-flags(aarch64-page) @.str.9, debug-location !703; is.c:674:5
SU(28):   $x6 = ADRP target-flags(aarch64-page) @.str.10, debug-location !703; is.c:674:5
SU(8):   renamable $d1 = FDIVDrr renamable $d1, renamable $d2, debug-location !701; is.c:676:63
SU(10):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.18, 0, debug-location !703; is.c:674:5
SU(12):   renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.17, 0, debug-location !703; is.c:674:5
SU(14):   renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.16, 0, debug-location !703; is.c:674:5
SU(16):   renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @.str.15, 0, debug-location !703; is.c:674:5
SU(18):   renamable $x12 = ADDXri $x12, target-flags(aarch64-pageoff, aarch64-nc) @.str.14, 0, debug-location !703; is.c:674:5
SU(20):   renamable $x13 = ADDXri $x13, target-flags(aarch64-pageoff, aarch64-nc) @.str.13, 0, debug-location !703; is.c:674:5
SU(22):   renamable $x14 = ADDXri $x14, target-flags(aarch64-pageoff, aarch64-nc) @.str.12, 0, debug-location !703; is.c:674:5
SU(24):   renamable $x15 = ADDXri $x15, target-flags(aarch64-pageoff, aarch64-nc) @.str.11, 0, debug-location !703; is.c:674:5
SU(26):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.9, 0, debug-location !703; is.c:674:5
SU(29):   renamable $x6 = ADDXri $x6, target-flags(aarch64-pageoff, aarch64-nc) @.str.10, 0, debug-location !703; is.c:674:5
SU(33):   $w1 = MOVZWi 66, 0, debug-location !703; is.c:674:5
SU(34):   $w2 = MOVZWi 8, 16, debug-location !703; is.c:674:5
SU(35):   $w3 = MOVZWi 64, 0, debug-location !703; is.c:674:5
SU(36):   $w5 = MOVZWi 10, 0, debug-location !703; is.c:674:5
SU(37):   $w4 = ORRWrs $wzr, $wzr, 0, debug-location !703; is.c:674:5
SU(27):   STPXi renamable $x9, renamable $x8, $sp, 6, debug-location !703 :: (store 8 into stack + 48), (store 8 into stack + 56); is.c:674:5
SU(30):   STPXi renamable $x11, renamable $x10, $sp, 4, debug-location !703 :: (store 8 into stack + 32), (store 8 into stack + 40); is.c:674:5
SU(31):   STPXi renamable $x13, renamable $x12, $sp, 2, debug-location !703 :: (store 8 into stack + 16), (store 8 into stack + 24); is.c:674:5
SU(32):   STPXi renamable $x15, renamable $x14, $sp, 0, debug-location !703 :: (store 8 into stack), (store 8 into stack + 8); is.c:674:5

Fixup kills for %bb.24
********** MI Scheduling **********
main:%bb.25 if.then54
  From: renamable $d0 = LDRDui $sp, 10, debug-location !717 :: (dereferenceable load 8 from %ir.t_total); is.c:687:13
    To: Bcc 1, %bb.27, implicit $nzcv, debug-location !720; is.c:687:13
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDRDui $sp, 10, debug-location !717 :: (dereferenceable load 8 from %ir.t_total); is.c:687:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$d0
SU(1):   FCMPDri renamable $d0, implicit-def $nzcv, debug-location !720; is.c:687:13
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$d0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 1, %bb.27, implicit $nzcv, debug-location !720; is.c:687:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $d0 = LDRDui $sp, 10, debug-location !717 :: (dereferenceable load 8 from %ir.t_total); is.c:687:13
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) FCMPDri renamable $d0, implicit-def $nzcv, debug-location !720; is.c:687:13
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   renamable $d0 = LDRDui $sp, 10, debug-location !717 :: (dereferenceable load 8 from %ir.t_total); is.c:687:13
SU(1):   FCMPDri renamable $d0, implicit-def $nzcv, debug-location !720; is.c:687:13

********** MI Scheduling **********
main:%bb.25 if.then54
  From: renamable $d0 = LDRDui $sp, 10, debug-location !715 :: (dereferenceable load 8 from %ir.t_total); is.c:686:45
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !716; is.c:686:9
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDRDui $sp, 10, debug-location !715 :: (dereferenceable load 8 from %ir.t_total); is.c:686:45
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(1):   $x0 = ADRP target-flags(aarch64-page) @.str.20, debug-location !716; is.c:686:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
SU(2):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.20, 0, debug-location !716; is.c:686:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !716; is.c:686:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0 = LDRDui $sp, 10, debug-location !715 :: (dereferenceable load 8 from %ir.t_total); is.c:686:45
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ADRP target-flags(aarch64-page) @.str.20, debug-location !716; is.c:686:9
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.20, 0, debug-location !716; is.c:686:9
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   renamable $d0 = LDRDui $sp, 10, debug-location !715 :: (dereferenceable load 8 from %ir.t_total); is.c:686:45
SU(1):   $x0 = ADRP target-flags(aarch64-page) @.str.20, debug-location !716; is.c:686:9
SU(2):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.20, 0, debug-location !716; is.c:686:9

********** MI Scheduling **********
main:%bb.25 if.then54
  From: STRDui killed renamable $d0, $sp, 10, debug-location !713 :: (store 8 into %ir.t_total); is.c:684:17
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !714; is.c:685:9
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   STRDui renamable $d0, $sp, 10, debug-location !713 :: (store 8 into %ir.t_total); is.c:684:17
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $x0 = ADRP target-flags(aarch64-page) @.str.19, debug-location !714; is.c:685:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
SU(2):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.19, 0, debug-location !714; is.c:685:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !714; is.c:685:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $x0 = ADRP target-flags(aarch64-page) @.str.19, debug-location !714; is.c:685:9
  Ready @0c
  TopQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.19, 0, debug-location !714; is.c:685:9
  Ready @1c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STRDui renamable $d0, $sp, 10, debug-location !713 :: (store 8 into %ir.t_total); is.c:684:17
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.25 ***
SU(1):   $x0 = ADRP target-flags(aarch64-page) @.str.19, debug-location !714; is.c:685:9
SU(2):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.19, 0, debug-location !714; is.c:685:9
SU(0):   STRDui renamable $d0, $sp, 10, debug-location !713 :: (store 8 into %ir.t_total); is.c:684:17

Fixup kills for %bb.25
********** MI Scheduling **********
main:%bb.26 if.then59
  From: $x8 = MOVZXi 16368, 48
    To: End RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x8 = MOVZXi 16368, 48
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=$x8
SU(1):   STRXui renamable $x8, $sp, 10, debug-location !721 :: (store 8 into %ir.t_total); is.c:688:21
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x8 = MOVZXi 16368, 48
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRXui renamable $x8, $sp, 10, debug-location !721 :: (store 8 into %ir.t_total); is.c:688:21
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.26 ***
SU(0):   $x8 = MOVZXi 16368, 48
SU(1):   STRXui renamable $x8, $sp, 10, debug-location !721 :: (store 8 into %ir.t_total); is.c:688:21

Fixup kills for %bb.26
********** MI Scheduling **********
main:%bb.27 if.end60
  From: renamable $d1 = LDRDui $sp, 10, debug-location !746 :: (dereferenceable load 8 from %ir.t_total); is.c:696:35
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w0, debug-location !752; is.c:697:9
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   renamable $d1 = LDRDui $sp, 10, debug-location !746 :: (dereferenceable load 8 from %ir.t_total); is.c:696:35
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d1
SU(1):   STURDi renamable $d0, $fp, -64, debug-location !744 :: (store 8 into %ir.timecounter); is.c:695:21
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   renamable $d1 = FDIVDrr renamable $d0, renamable $d1, debug-location !747; is.c:696:33
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d1
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$d1
SU(3):   renamable $d1 = FMULDrr renamable $d1, renamable $d8, debug-location !748; is.c:696:43
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$d1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(4): Data Latency=1 Reg=$d1
SU(4):   STRDui renamable $d1, $sp, 9, debug-location !749 :: (store 8 into %ir.t_percent); is.c:696:19
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=$d1
SU(5):   $x0 = ADRP target-flags(aarch64-page) @.str.23, debug-location !752; is.c:697:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x0
SU(6):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.23, 0, debug-location !752; is.c:697:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w0, debug-location !752; is.c:697:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d1 = LDRDui $sp, 10, debug-location !746 :: (dereferenceable load 8 from %ir.t_total); is.c:696:35
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 5 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) $x0 = ADRP target-flags(aarch64-page) @.str.23, debug-location !752; is.c:697:9
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 1 6 
  TopQ.A RemainingLatency 0 + 2c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(6) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.23, 0, debug-location !752; is.c:697:9
  Ready @2c
  TopQ.A TopLatency SU(6) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STURDi renamable $d0, $fp, -64, debug-location !744 :: (store 8 into %ir.timecounter); is.c:695:21
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $d1 = FDIVDrr renamable $d0, renamable $d1, debug-location !747; is.c:696:33
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $d1 = FMULDrr renamable $d1, renamable $d8, debug-location !748; is.c:696:43
  Ready @5c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) STRDui renamable $d1, $sp, 9, debug-location !749 :: (store 8 into %ir.t_percent); is.c:696:19
  Ready @6c
  TopQ.A TopLatency SU(4) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   renamable $d1 = LDRDui $sp, 10, debug-location !746 :: (dereferenceable load 8 from %ir.t_total); is.c:696:35
SU(5):   $x0 = ADRP target-flags(aarch64-page) @.str.23, debug-location !752; is.c:697:9
SU(6):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.23, 0, debug-location !752; is.c:697:9
SU(1):   STURDi renamable $d0, $fp, -64, debug-location !744 :: (store 8 into %ir.timecounter); is.c:695:21
SU(2):   renamable $d1 = FDIVDrr renamable $d0, renamable $d1, debug-location !747; is.c:696:33
SU(3):   renamable $d1 = FMULDrr renamable $d1, renamable $d8, debug-location !748; is.c:696:43
SU(4):   STRDui renamable $d1, $sp, 9, debug-location !749 :: (store 8 into %ir.t_percent); is.c:696:19

********** MI Scheduling **********
main:%bb.27 if.end60
  From: renamable $d1 = LDRDui $sp, 10, debug-location !736 :: (dereferenceable load 8 from %ir.t_total); is.c:693:35
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w0, debug-location !742; is.c:694:9
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   renamable $d1 = LDRDui $sp, 10, debug-location !736 :: (dereferenceable load 8 from %ir.t_total); is.c:693:35
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d1
SU(1):   STURDi renamable $d0, $fp, -64, debug-location !734 :: (store 8 into %ir.timecounter); is.c:692:21
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   renamable $d1 = FDIVDrr renamable $d0, renamable $d1, debug-location !737; is.c:693:33
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d1
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$d1
SU(3):   renamable $d1 = FMULDrr renamable $d1, renamable $d8, debug-location !738; is.c:693:43
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$d1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(4): Data Latency=1 Reg=$d1
SU(4):   STRDui renamable $d1, $sp, 9, debug-location !739 :: (store 8 into %ir.t_percent); is.c:693:19
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=$d1
SU(5):   $x0 = ADRP target-flags(aarch64-page) @.str.22, debug-location !742; is.c:694:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x0
SU(6):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.22, 0, debug-location !742; is.c:694:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w0, debug-location !742; is.c:694:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d1 = LDRDui $sp, 10, debug-location !736 :: (dereferenceable load 8 from %ir.t_total); is.c:693:35
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 5 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) $x0 = ADRP target-flags(aarch64-page) @.str.22, debug-location !742; is.c:694:9
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 1 6 
  TopQ.A RemainingLatency 0 + 2c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(6) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.22, 0, debug-location !742; is.c:694:9
  Ready @2c
  TopQ.A TopLatency SU(6) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STURDi renamable $d0, $fp, -64, debug-location !734 :: (store 8 into %ir.timecounter); is.c:692:21
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $d1 = FDIVDrr renamable $d0, renamable $d1, debug-location !737; is.c:693:33
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $d1 = FMULDrr renamable $d1, renamable $d8, debug-location !738; is.c:693:43
  Ready @5c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) STRDui renamable $d1, $sp, 9, debug-location !739 :: (store 8 into %ir.t_percent); is.c:693:19
  Ready @6c
  TopQ.A TopLatency SU(4) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   renamable $d1 = LDRDui $sp, 10, debug-location !736 :: (dereferenceable load 8 from %ir.t_total); is.c:693:35
SU(5):   $x0 = ADRP target-flags(aarch64-page) @.str.22, debug-location !742; is.c:694:9
SU(6):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.22, 0, debug-location !742; is.c:694:9
SU(1):   STURDi renamable $d0, $fp, -64, debug-location !734 :: (store 8 into %ir.timecounter); is.c:692:21
SU(2):   renamable $d1 = FDIVDrr renamable $d0, renamable $d1, debug-location !737; is.c:693:33
SU(3):   renamable $d1 = FMULDrr renamable $d1, renamable $d8, debug-location !738; is.c:693:43
SU(4):   STRDui renamable $d1, $sp, 9, debug-location !739 :: (store 8 into %ir.t_percent); is.c:693:19

********** MI Scheduling **********
main:%bb.27 if.end60
  From: renamable $d1 = LDRDui $sp, 10, debug-location !726 :: (dereferenceable load 8 from %ir.t_total); is.c:690:35
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w0, debug-location !732; is.c:691:9
 RegionInstrs: 9
ScheduleDAGMI::schedule starting
SU(0):   renamable $d1 = LDRDui $sp, 10, debug-location !726 :: (dereferenceable load 8 from %ir.t_total); is.c:690:35
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d1
SU(1):   STURDi renamable $d0, $fp, -64, debug-location !724 :: (store 8 into %ir.timecounter); is.c:689:21
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   $x8 = MOVZXi 16473, 48
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(4): Data Latency=1 Reg=$x8
SU(3):   renamable $d1 = FDIVDrr renamable $d0, renamable $d1, debug-location !727; is.c:690:33
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d1
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$d1
SU(4):   $d8 = FMOVXDr $x8
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(2): Data Latency=1 Reg=$x8
  Successors:
    SU(5): Data Latency=1 Reg=$d8
SU(5):   renamable $d1 = FMULDrr renamable $d1, renamable $d8, debug-location !728; is.c:690:43
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(3): Data Latency=1 Reg=$d1
    SU(3): Out  Latency=1
    SU(4): Data Latency=1 Reg=$d8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(6): Data Latency=1 Reg=$d1
SU(6):   STRDui renamable $d1, $sp, 9, debug-location !729 :: (store 8 into %ir.t_percent); is.c:690:19
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=$d1
SU(7):   $x0 = ADRP target-flags(aarch64-page) @.str.21, debug-location !732; is.c:691:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x0
SU(8):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.21, 0, debug-location !732; is.c:691:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w0, debug-location !732; is.c:691:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=1 Artificial
    SU(5): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 7 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d1 = LDRDui $sp, 10, debug-location !726 :: (dereferenceable load 8 from %ir.t_total); is.c:690:35
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 7 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(7) ORDER                              
  Cand SU(2) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x8 = MOVZXi 16473, 48
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 7 1 4 
  TopQ.A RemainingLatency 0 + 2c > CritPath 6
  Cand SU(7) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) $d8 = FMOVXDr $x8
  Ready @2c
  TopQ.A TopLatency SU(4) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 7 1 
  TopQ.A RemainingLatency 0 + 3c > CritPath 6
  Cand SU(7) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(7) $x0 = ADRP target-flags(aarch64-page) @.str.21, debug-location !732; is.c:691:9
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 8 3 
  TopQ.A RemainingLatency 0 + 4c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(8) TOP-PATH                  1 cycles 
  Cand SU(3) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d1 = FDIVDrr renamable $d0, renamable $d1, debug-location !727; is.c:690:33
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 8 5 
  TopQ.A RemainingLatency 0 + 5c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(8) TOP-PATH                  1 cycles 
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $d1 = FMULDrr renamable $d1, renamable $d8, debug-location !728; is.c:690:43
  Ready @5c
  TopQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 8 6 
  TopQ.A RemainingLatency 0 + 6c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(8) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.21, 0, debug-location !732; is.c:691:9
  Ready @6c
  TopQ.A BotLatency SU(8) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 6 
  TopQ.A RemainingLatency 0 + 7c > CritPath 6
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) STURDi renamable $d0, $fp, -64, debug-location !724 :: (store 8 into %ir.timecounter); is.c:689:21
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) STRDui renamable $d1, $sp, 9, debug-location !729 :: (store 8 into %ir.t_percent); is.c:690:19
  Ready @8c
  TopQ.A TopLatency SU(6) 6c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   renamable $d1 = LDRDui $sp, 10, debug-location !726 :: (dereferenceable load 8 from %ir.t_total); is.c:690:35
SU(2):   $x8 = MOVZXi 16473, 48
SU(4):   $d8 = FMOVXDr $x8
SU(7):   $x0 = ADRP target-flags(aarch64-page) @.str.21, debug-location !732; is.c:691:9
SU(3):   renamable $d1 = FDIVDrr renamable $d0, renamable $d1, debug-location !727; is.c:690:33
SU(5):   renamable $d1 = FMULDrr renamable $d1, renamable $d8, debug-location !728; is.c:690:43
SU(8):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.21, 0, debug-location !732; is.c:691:9
SU(1):   STURDi renamable $d0, $fp, -64, debug-location !724 :: (store 8 into %ir.timecounter); is.c:689:21
SU(6):   STRDui renamable $d1, $sp, 9, debug-location !729 :: (store 8 into %ir.t_percent); is.c:690:19

Fixup kills for %bb.27
********** MI Scheduling **********
main:%bb.28 do.end76
  From: $w0 = ORRWrs $wzr, $wzr, 0, debug-location !754; is.c:703:5
    To: $sp = frame-destroy ADDXri $sp, 176, 0, debug-location !754; is.c:703:5
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   $w0 = ORRWrs $wzr, $wzr, 0, debug-location !754; is.c:703:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $fp, $lr = frame-destroy LDPXi $sp, 20, debug-location !754 :: (load 8 from %stack.11), (load 8 from %stack.10); is.c:703:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(2):   $x20, $x19 = frame-destroy LDPXi $sp, 18, debug-location !754 :: (load 8 from %stack.13), (load 8 from %stack.12); is.c:703:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(3):   $d8 = frame-destroy LDRDui $sp, 16, debug-location !754 :: (load 8 from %stack.14); is.c:703:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
ExitSU:   $sp = frame-destroy ADDXri $sp, 176, 0, debug-location !754; is.c:703:5
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
Critical Path: (PGS-RR) 3
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $fp, $lr = frame-destroy LDPXi $sp, 20, debug-location !754 :: (load 8 from %stack.11), (load 8 from %stack.10); is.c:703:5
  Ready @0c
  TopQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(3) TOP-PATH                  3 cycles 
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) $x20, $x19 = frame-destroy LDPXi $sp, 18, debug-location !754 :: (load 8 from %stack.13), (load 8 from %stack.12); is.c:703:5
  Ready @1c
  TopQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(3) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) $d8 = frame-destroy LDRDui $sp, 16, debug-location !754 :: (load 8 from %stack.14); is.c:703:5
  Ready @2c
  TopQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $w0 = ORRWrs $wzr, $wzr, 0, debug-location !754; is.c:703:5
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.28 ***
SU(1):   $fp, $lr = frame-destroy LDPXi $sp, 20, debug-location !754 :: (load 8 from %stack.11), (load 8 from %stack.10); is.c:703:5
SU(2):   $x20, $x19 = frame-destroy LDPXi $sp, 18, debug-location !754 :: (load 8 from %stack.13), (load 8 from %stack.12); is.c:703:5
SU(3):   $d8 = frame-destroy LDRDui $sp, 16, debug-location !754 :: (load 8 from %stack.14); is.c:703:5
SU(0):   $w0 = ORRWrs $wzr, $wzr, 0, debug-location !754; is.c:703:5

Fixup kills for %bb.28
