Before MISched:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
  fi#6: size=4, align=4, at location [SP]
  fi#7: size=8, align=8, at location [SP]
  fi#8: size=8, align=8, at location [SP]
  fi#9: size=8, align=8, at location [SP]
  fi#10: size=8, align=8, at location [SP]
  fi#11: size=8, align=8, at location [SP]
  fi#12: size=8, align=8, at location [SP]
  fi#13: size=8, align=8, at location [SP]
  fi#14: size=1, align=4, at location [SP]
  fi#15: size=4, align=4, at location [SP]
  fi#16: size=8, align=8, at location [SP]
  fi#17: size=8, align=8, at location [SP]
  fi#18: size=8, align=8, at location [SP]
  fi#19: size=24, align=16, at location [SP]
  fi#20: size=8, align=8, at location [SP]
Constant Pool:
  cp#0: 0x41D2309CE5400000, align=8
  cp#1: 0x422979CA8D600000, align=8
Function Live Ins: $w0 in %11, $x1 in %12

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $w0, $x1
  %12:gpr64 = COPY $x1
  %11:gpr32 = COPY $w0
  STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
  STRWui %11:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
  STRXui %12:gpr64, %stack.2.argv.addr, 0 :: (store 8 into %ir.argv.addr)
  STRWui $wzr, %stack.3.i, 0, debug-location !132 :: (store 4 into %ir.i); cg.c:117:12

bb.1.for.cond:
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %14:gpr32common = LDRWui %stack.3.i, 0, debug-location !135 :: (dereferenceable load 4 from %ir.i); cg.c:117:17
  dead $wzr = SUBSWri %14:gpr32common, 2, 0, implicit-def $nzcv, debug-location !138; cg.c:117:5
  Bcc 12, %bb.3, implicit killed $nzcv, debug-location !138; cg.c:117:5
  B %bb.2, debug-location !138; cg.c:117:5

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %383:gpr32 = LDRWui %stack.3.i, 0, debug-location !139 :: (dereferenceable load 4 from %ir.i); cg.c:118:21
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !141; cg.c:118:9
  $w0 = COPY %383:gpr32, debug-location !141; cg.c:118:9
  BL @timer_clear, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !141; cg.c:118:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !141; cg.c:118:9
  %384:gpr32common = LDRWui %stack.3.i, 0, debug-location !142 :: (dereferenceable load 4 from %ir.i); cg.c:117:30
  %385:gpr32common = nsw ADDWri %384:gpr32common, 1, 0, debug-location !142; cg.c:117:30
  STRWui %385:gpr32common, %stack.3.i, 0, debug-location !142 :: (store 4 into %ir.i); cg.c:117:30
  B %bb.1, debug-location !143; cg.c:117:5

bb.3.for.end:
; predecessors: %bb.1
  successors: %bb.4(0x50000000), %bb.5(0x30000000); %bb.4(62.50%), %bb.5(37.50%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !152; cg.c:122:15
  %16:gpr64 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str, debug-location !152; cg.c:122:15
  %17:gpr64 = MOVaddr target-flags(aarch64-page) @.str.1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1, debug-location !152; cg.c:122:15
  $x0 = COPY %16:gpr64, debug-location !152; cg.c:122:15
  $x1 = COPY %17:gpr64, debug-location !152; cg.c:122:15
  BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0, debug-location !152; cg.c:122:15
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !152; cg.c:122:15
  %18:gpr64 = COPY $x0, debug-location !152; cg.c:122:15
  STRXui %18:gpr64, %stack.20.fp, 0, debug-location !154 :: (store 8 into %ir.fp); cg.c:122:13
  %386:gpr64common = ADRP target-flags(aarch64-page) @timeron
  CBZX %18:gpr64, %bb.5, debug-location !156; cg.c:122:9
  B %bb.4, debug-location !156; cg.c:122:9

bb.4.if.then:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %22:gpr32 = MOVi32imm 1
  STRWui %22:gpr32, %386:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !157 :: (store 4 into @timeron); cg.c:123:17
  %23:gpr64 = MOVaddr target-flags(aarch64-page) @.str.2, target-flags(aarch64-pageoff, aarch64-nc) @.str.2, debug-location !160; cg.c:124:25
  STRXui %23:gpr64, %stack.19.t_names, 0, debug-location !160 :: (store 8 into %ir.arrayidx5, align 16); cg.c:124:25
  %24:gpr64 = MOVaddr target-flags(aarch64-page) @.str.3, target-flags(aarch64-pageoff, aarch64-nc) @.str.3, debug-location !162; cg.c:125:26
  STRXui %24:gpr64, %stack.19.t_names, 1, debug-location !162 :: (store 8 into %ir.arrayidx2); cg.c:125:26
  %25:gpr64 = MOVaddr target-flags(aarch64-page) @.str.4, target-flags(aarch64-pageoff, aarch64-nc) @.str.4, debug-location !164; cg.c:126:30
  STRXui %25:gpr64, %stack.19.t_names, 2, debug-location !164 :: (store 8 into %ir.arrayidx3, align 16); cg.c:126:30
  %26:gpr64 = LDRXui %stack.20.fp, 0, debug-location !165 :: (dereferenceable load 8 from %ir.fp); cg.c:127:16
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !166; cg.c:127:9
  $x0 = COPY %26:gpr64, debug-location !166; cg.c:127:9
  BL @fclose, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !166; cg.c:127:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !166; cg.c:127:9
  B %bb.6, debug-location !167; cg.c:128:5

bb.5.if.else:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  STRWui $wzr, %386:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !168 :: (store 4 into @timeron); cg.c:130:17

bb.6.if.end:
; predecessors: %bb.5, %bb.4
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %0:gpr32common = MOVi32imm 75000
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !171; cg.c:133:5
  $w0 = COPY $wzr, debug-location !171; cg.c:133:5
  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !171; cg.c:133:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !171; cg.c:133:5
  %30:gpr64common = ADRP target-flags(aarch64-page) @firstrow, debug-location !172; cg.c:135:14
  STRWui $wzr, %30:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !172 :: (store 4 into @firstrow); cg.c:135:14
  %31:gpr32common = SUBWri %0:gpr32common, 1, 0, debug-location !173; cg.c:136:13
  %32:gpr64common = ADRP target-flags(aarch64-page) @lastrow, debug-location !173; cg.c:136:13
  STRWui %31:gpr32common, %32:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !173 :: (store 4 into @lastrow); cg.c:136:13
  %33:gpr64common = ADRP target-flags(aarch64-page) @firstcol, debug-location !174; cg.c:137:14
  STRWui $wzr, %33:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !174 :: (store 4 into @firstcol); cg.c:137:14
  %34:gpr64common = ADRP target-flags(aarch64-page) @lastcol, debug-location !175; cg.c:138:13
  STRWui %31:gpr32common, %34:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !175 :: (store 4 into @lastcol); cg.c:138:13
  %35:gpr32 = MOVi32imm 66
  STRBBui %35:gpr32, %stack.14.Class, 0, debug-location !176 :: (store 1 into %ir.Class, align 4); cg.c:153:15
  %36:gpr64 = MOVi64imm 4627086287187887514
  STRXui %36:gpr64, %stack.16.zeta_verify_value, 0, debug-location !182 :: (store 8 into %ir.zeta_verify_value); cg.c:154:27
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !183; cg.c:172:5
  %37:gpr64 = MOVaddr target-flags(aarch64-page) @.str.5, target-flags(aarch64-pageoff, aarch64-nc) @.str.5, debug-location !183; cg.c:172:5
  $x0 = COPY %37:gpr64, debug-location !183; cg.c:172:5
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !183; cg.c:172:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !183; cg.c:172:5
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !184; cg.c:173:5
  %39:gpr64 = MOVaddr target-flags(aarch64-page) @.str.6, target-flags(aarch64-pageoff, aarch64-nc) @.str.6, debug-location !184; cg.c:173:5
  $x0 = COPY %39:gpr64, debug-location !184; cg.c:173:5
  $w1 = MOVi32imm 75000, debug-location !184; cg.c:173:5
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !184; cg.c:173:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !184; cg.c:173:5
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !185; cg.c:174:5
  %41:gpr64 = MOVaddr target-flags(aarch64-page) @.str.7, target-flags(aarch64-pageoff, aarch64-nc) @.str.7, debug-location !185; cg.c:174:5
  $x0 = COPY %41:gpr64, debug-location !185; cg.c:174:5
  $w1 = MOVi32imm 75, debug-location !185; cg.c:174:5
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !185; cg.c:174:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !185; cg.c:174:5
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !186; cg.c:175:5
  %44:gpr64 = MOVaddr target-flags(aarch64-page) @.str.8, target-flags(aarch64-pageoff, aarch64-nc) @.str.8, debug-location !186; cg.c:175:5
  $x0 = COPY %44:gpr64, debug-location !186; cg.c:175:5
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !186; cg.c:175:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !186; cg.c:175:5
  %46:gpr64common = ADRP target-flags(aarch64-page) @naa, debug-location !187; cg.c:177:9
  STRWui %0:gpr32common, %46:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !187 :: (store 4 into @naa); cg.c:177:9
  %47:gpr64common = ADRP target-flags(aarch64-page) @nzz, debug-location !188; cg.c:178:9
  %48:gpr32 = MOVi32imm 14700000
  STRWui %48:gpr32, %47:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nzz, debug-location !188 :: (store 4 into @nzz); cg.c:178:9
  %49:gpr64common = MOVaddr target-flags(aarch64-page) @tran, target-flags(aarch64-pageoff, aarch64-nc) @tran, debug-location !189; cg.c:183:10
  %50:gpr64 = MOVi64imm 4734050326586327040
  STRXui %50:gpr64, %49:gpr64common, 0, debug-location !189 :: (store 8 into @tran); cg.c:183:10
  %51:gpr64common = ADRP target-flags(aarch64-page) @amult, debug-location !190; cg.c:184:11
  %52:gpr64 = MOVi64imm 4742906807993761792
  STRXui %52:gpr64, %51:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !190 :: (store 8 into @amult); cg.c:184:11
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !192; cg.c:185:12
  %53:gpr64common = ADRP target-flags(aarch64-page) %const.0
  %54:fpr64 = LDRDui %53:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  $x0 = COPY %49:gpr64common, debug-location !192; cg.c:185:12
  $d0 = COPY %54:fpr64, debug-location !192; cg.c:185:12
  BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $d0, implicit-def $sp, implicit-def $d0, debug-location !192; cg.c:185:12
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !192; cg.c:185:12
  %55:fpr64 = COPY killed $d0, debug-location !192; cg.c:185:12
  STRDui %55:fpr64, %stack.7.zeta, 0, debug-location !193 :: (store 8 into %ir.zeta); cg.c:185:10
  %56:gpr32 = LDRWui %46:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !194 :: (dereferenceable load 4 from @naa); cg.c:190:11
  %57:gpr32 = LDRWui %47:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nzz, debug-location !195 :: (dereferenceable load 4 from @nzz); cg.c:190:16
  %58:gpr32 = LDRWui %30:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !196 :: (dereferenceable load 4 from @firstrow); cg.c:190:40
  %59:gpr32 = LDRWui %32:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !197 :: (dereferenceable load 4 from @lastrow); cg.c:190:50
  %60:gpr32 = LDRWui %33:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !198 :: (dereferenceable load 4 from @firstcol); cg.c:190:59
  %61:gpr32 = LDRWui %34:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !199 :: (dereferenceable load 4 from @lastcol); cg.c:190:69
  ADJCALLSTACKDOWN 40, 0, implicit-def dead $sp, implicit $sp, debug-location !200; cg.c:190:5
  %62:gpr64 = MOVaddr target-flags(aarch64-page) @iv, target-flags(aarch64-pageoff, aarch64-nc) @iv, debug-location !200; cg.c:190:5
  STRXui %62:gpr64, $sp, 4, debug-location !200 :: (store 8 into stack + 32); cg.c:190:5
  %64:gpr64 = MOVaddr target-flags(aarch64-page) @aelt, target-flags(aarch64-pageoff, aarch64-nc) @aelt, debug-location !200; cg.c:190:5
  STRXui %64:gpr64, $sp, 3, debug-location !200 :: (store 8 into stack + 24); cg.c:190:5
  %65:gpr64 = MOVaddr target-flags(aarch64-page) @acol, target-flags(aarch64-pageoff, aarch64-nc) @acol, debug-location !200; cg.c:190:5
  STRXui %65:gpr64, $sp, 2, debug-location !200 :: (store 8 into stack + 16); cg.c:190:5
  %66:gpr64 = MOVaddr target-flags(aarch64-page) @arow, target-flags(aarch64-pageoff, aarch64-nc) @arow, debug-location !200; cg.c:190:5
  STRXui %66:gpr64, $sp, 1, debug-location !200 :: (store 8 into stack + 8); cg.c:190:5
  STRWui %61:gpr32, $sp, 0, debug-location !200 :: (store 4 into stack); cg.c:190:5
  %67:gpr64 = MOVaddr target-flags(aarch64-page) @a, target-flags(aarch64-pageoff, aarch64-nc) @a, debug-location !200; cg.c:190:5
  %68:gpr64common = MOVaddr target-flags(aarch64-page) @colidx, target-flags(aarch64-pageoff, aarch64-nc) @colidx, debug-location !200; cg.c:190:5
  %69:gpr64common = MOVaddr target-flags(aarch64-page) @rowstr, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, debug-location !200; cg.c:190:5
  $w0 = COPY %56:gpr32, debug-location !200; cg.c:190:5
  $w1 = COPY %57:gpr32, debug-location !200; cg.c:190:5
  $x2 = COPY %67:gpr64, debug-location !200; cg.c:190:5
  $x3 = COPY %68:gpr64common, debug-location !200; cg.c:190:5
  $x4 = COPY %69:gpr64common, debug-location !200; cg.c:190:5
  $w5 = COPY %58:gpr32, debug-location !200; cg.c:190:5
  $w6 = COPY %59:gpr32, debug-location !200; cg.c:190:5
  $w7 = COPY %60:gpr32, debug-location !200; cg.c:190:5
  BL @makea, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $w1, implicit killed $x2, implicit killed $x3, implicit killed $x4, implicit killed $w5, implicit killed $w6, implicit killed $w7, implicit-def $sp, debug-location !200; cg.c:190:5
  ADJCALLSTACKUP 40, 0, implicit-def dead $sp, implicit $sp, debug-location !200; cg.c:190:5
  STRWui $wzr, %stack.4.j, 0, debug-location !201 :: (store 4 into %ir.j); cg.c:202:12

bb.7.for.cond10:
; predecessors: %bb.6, %bb.11
  successors: %bb.8(0x7c000000), %bb.12(0x04000000); %bb.8(96.88%), %bb.12(3.12%)

  %70:gpr32 = LDRWui %stack.4.j, 0, debug-location !204 :: (dereferenceable load 4 from %ir.j); cg.c:202:17
  %72:gpr32 = LDRWui %32:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !206 :: (dereferenceable load 4 from @lastrow); cg.c:202:21
  %74:gpr32 = LDRWui %30:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !207 :: (dereferenceable load 4 from @firstrow); cg.c:202:31
  %75:gpr32common = nsw SUBWrr %72:gpr32, %74:gpr32, debug-location !208; cg.c:202:29
  %76:gpr32common = nsw ADDWri %75:gpr32common, 1, 0, debug-location !209; cg.c:202:40
  dead $wzr = SUBSWrr %70:gpr32, %76:gpr32common, implicit-def $nzcv, debug-location !211; cg.c:202:5
  Bcc 10, %bb.12, implicit killed $nzcv, debug-location !211; cg.c:202:5
  B %bb.8, debug-location !211; cg.c:202:5

bb.8.for.body12:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %363:gpr64 = LDRSWui %stack.4.j, 0, debug-location !212 :: (dereferenceable load 4 from %ir.j); cg.c:203:25
  %365:gpr32 = LDRWroX %69:gpr64common, %363:gpr64, 0, 1, debug-location !215 :: (load 4 from %ir.arrayidx13); cg.c:203:18
  STRWui %365:gpr32, %stack.5.k, 0, debug-location !216 :: (store 4 into %ir.k); cg.c:203:16

bb.9.for.cond14:
; predecessors: %bb.8, %bb.10
  successors: %bb.10(0x7c000000), %bb.11(0x04000000); %bb.10(96.88%), %bb.11(3.12%)

  %366:gpr32 = LDRWui %stack.5.k, 0, debug-location !218 :: (dereferenceable load 4 from %ir.k); cg.c:203:29
  %367:gpr64 = LDRSWui %stack.4.j, 0, debug-location !220 :: (dereferenceable load 4 from %ir.j); cg.c:203:40
  %369:gpr64common = ADDXrs %69:gpr64common, %367:gpr64, 2, debug-location !222; cg.c:203:33
  %370:gpr32 = LDRWui %369:gpr64common, 1, debug-location !222 :: (load 4 from %ir.arrayidx17); cg.c:203:33
  dead $wzr = SUBSWrr %366:gpr32, %370:gpr32, implicit-def $nzcv, debug-location !224; cg.c:203:9
  Bcc 10, %bb.11, implicit killed $nzcv, debug-location !224; cg.c:203:9
  B %bb.10, debug-location !224; cg.c:203:9

bb.10.for.body19:
; predecessors: %bb.9
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %374:gpr64common = LDRSWui %stack.5.k, 0, debug-location !225 :: (dereferenceable load 4 from %ir.k); cg.c:204:32
  %376:gpr64 = UBFMXri %374:gpr64common, 62, 61, debug-location !227; cg.c:204:25
  %378:gpr32 = LDRWroX %68:gpr64common, %376:gpr64, 0, 0, debug-location !227 :: (load 4 from %ir.arrayidx21); cg.c:204:25
  %380:gpr32 = LDRWui %33:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !228 :: (dereferenceable load 4 from @firstcol); cg.c:204:37
  %381:gpr32 = nsw SUBWrr %378:gpr32, %380:gpr32, debug-location !229; cg.c:204:35
  STRWroX %381:gpr32, %68:gpr64common, %376:gpr64, 0, 0, debug-location !232 :: (store 4 into %ir.arrayidx24); cg.c:204:23
  %382:gpr32common = nsw ADDWri %374.sub_32:gpr64common, 1, 0, debug-location !233; cg.c:203:49
  STRWui %382:gpr32common, %stack.5.k, 0, debug-location !233 :: (store 4 into %ir.k); cg.c:203:49
  B %bb.9, debug-location !234; cg.c:203:9

bb.11.for.inc28:
; predecessors: %bb.9
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %372:gpr32common = LDRWui %stack.4.j, 0, debug-location !237 :: (dereferenceable load 4 from %ir.j); cg.c:202:46
  %373:gpr32common = nsw ADDWri %372:gpr32common, 1, 0, debug-location !237; cg.c:202:46
  STRWui %373:gpr32common, %stack.4.j, 0, debug-location !237 :: (store 4 into %ir.j); cg.c:202:46
  B %bb.7, debug-location !238; cg.c:202:5

bb.12.for.end30:
; predecessors: %bb.7
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  STRWui $wzr, %stack.3.i, 0, debug-location !241 :: (store 4 into %ir.i); cg.c:211:12
  %360:gpr64common = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x
  %361:gpr64 = MOVi64imm 4607182418800017408

bb.13.for.cond31:
; predecessors: %bb.12, %bb.14
  successors: %bb.14(0x7c000000), %bb.15(0x04000000); %bb.14(96.88%), %bb.15(3.12%)

  %79:gpr32 = LDRWui %stack.3.i, 0, debug-location !244 :: (dereferenceable load 4 from %ir.i); cg.c:211:17
  %80:gpr32common = ADDWri %0:gpr32common, 1, 0, debug-location !246; cg.c:211:19
  dead $wzr = SUBSWrr %79:gpr32, %80:gpr32common, implicit-def $nzcv, debug-location !247; cg.c:211:5
  Bcc 10, %bb.15, implicit killed $nzcv, debug-location !247; cg.c:211:5
  B %bb.14, debug-location !247; cg.c:211:5

bb.14.for.body33:
; predecessors: %bb.13
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  %358:gpr64common = LDRSWui %stack.3.i, 0, debug-location !248 :: (dereferenceable load 4 from %ir.i); cg.c:212:11
  STRXroX %361:gpr64, %360:gpr64common, %358:gpr64common, 0, 1, debug-location !251 :: (store 8 into %ir.arrayidx35); cg.c:212:14
  %362:gpr32common = nsw ADDWri %358.sub_32:gpr64common, 1, 0, debug-location !252; cg.c:211:30
  STRWui %362:gpr32common, %stack.3.i, 0, debug-location !252 :: (store 4 into %ir.i); cg.c:211:30
  B %bb.13, debug-location !253; cg.c:211:5

bb.15.for.end38:
; predecessors: %bb.13
  successors: %bb.16(0x80000000); %bb.16(100.00%)

  STRWui $wzr, %stack.4.j, 0, debug-location !256 :: (store 4 into %ir.j); cg.c:214:12
  %351:gpr64common = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q
  %354:gpr64common = MOVaddr target-flags(aarch64-page) @z, target-flags(aarch64-pageoff, aarch64-nc) @z
  %355:gpr64common = MOVaddr target-flags(aarch64-page) @r, target-flags(aarch64-pageoff, aarch64-nc) @r
  %356:gpr64common = MOVaddr target-flags(aarch64-page) @p, target-flags(aarch64-pageoff, aarch64-nc) @p

bb.16.for.cond39:
; predecessors: %bb.15, %bb.17
  successors: %bb.17(0x7c000000), %bb.18(0x04000000); %bb.17(96.88%), %bb.18(3.12%)

  %83:gpr32 = LDRWui %stack.4.j, 0, debug-location !259 :: (dereferenceable load 4 from %ir.j); cg.c:214:17
  %85:gpr32 = LDRWui %34:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !261 :: (dereferenceable load 4 from @lastcol); cg.c:214:21
  %87:gpr32 = LDRWui %33:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !262 :: (dereferenceable load 4 from @firstcol); cg.c:214:31
  %88:gpr32common = nsw SUBWrr %85:gpr32, %87:gpr32, debug-location !263; cg.c:214:29
  %89:gpr32common = nsw ADDWri %88:gpr32common, 1, 0, debug-location !264; cg.c:214:40
  dead $wzr = SUBSWrr %83:gpr32, %89:gpr32common, implicit-def $nzcv, debug-location !266; cg.c:214:5
  Bcc 10, %bb.18, implicit killed $nzcv, debug-location !266; cg.c:214:5
  B %bb.17, debug-location !266; cg.c:214:5

bb.17.for.body43:
; predecessors: %bb.16
  successors: %bb.16(0x80000000); %bb.16(100.00%)

  %349:gpr64common = LDRSWui %stack.4.j, 0, debug-location !267 :: (dereferenceable load 4 from %ir.j); cg.c:215:11
  %352:gpr64 = UBFMXri %349:gpr64common, 61, 60, debug-location !278; cg.c:218:9
  STRXroX $xzr, %351:gpr64common, %352:gpr64, 0, 0, debug-location !270 :: (store 8 into %ir.arrayidx45); cg.c:215:14
  STRXroX $xzr, %354:gpr64common, %352:gpr64, 0, 0, debug-location !273 :: (store 8 into %ir.arrayidx47); cg.c:216:14
  STRXroX $xzr, %355:gpr64common, %352:gpr64, 0, 0, debug-location !276 :: (store 8 into %ir.arrayidx49); cg.c:217:14
  STRXroX $xzr, %356:gpr64common, %352:gpr64, 0, 0, debug-location !279 :: (store 8 into %ir.arrayidx51); cg.c:218:14
  %357:gpr32common = nsw ADDWri %349.sub_32:gpr64common, 1, 0, debug-location !280; cg.c:214:46
  STRWui %357:gpr32common, %stack.4.j, 0, debug-location !280 :: (store 4 into %ir.j); cg.c:214:46
  B %bb.16, debug-location !281; cg.c:214:5

bb.18.for.end54:
; predecessors: %bb.16
  successors: %bb.19(0x80000000); %bb.19(100.00%)

  STRXui $xzr, %stack.7.zeta, 0, debug-location !284 :: (store 8 into %ir.zeta); cg.c:221:10
  %92:gpr32 = MOVi32imm 1
  STRWui %92:gpr32, %stack.6.it, 0, debug-location !285 :: (store 4 into %ir.it); cg.c:228:13
  %293:gpr64common = ADDXri %stack.8.rnorm, 0, 0
  %294:gpr64 = MOVaddr target-flags(aarch64-page) @colidx, target-flags(aarch64-pageoff, aarch64-nc) @colidx
  %295:gpr64 = MOVaddr target-flags(aarch64-page) @rowstr, target-flags(aarch64-pageoff, aarch64-nc) @rowstr
  %298:gpr64 = MOVaddr target-flags(aarch64-page) @a, target-flags(aarch64-pageoff, aarch64-nc) @a
  %299:gpr64 = MOVaddr target-flags(aarch64-page) @p, target-flags(aarch64-pageoff, aarch64-nc) @p
  %300:gpr64 = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q
  %301:gpr64 = MOVaddr target-flags(aarch64-page) @r, target-flags(aarch64-pageoff, aarch64-nc) @r
  %313:fpr64 = FMOVDi 112

bb.19.for.cond55:
; predecessors: %bb.18, %bb.28
  successors: %bb.20(0x7c000000), %bb.29(0x04000000); %bb.20(96.88%), %bb.29(3.12%)

  %93:gpr32common = LDRWui %stack.6.it, 0, debug-location !288 :: (dereferenceable load 4 from %ir.it); cg.c:228:18
  dead $wzr = SUBSWri %93:gpr32common, 1, 0, implicit-def $nzcv, debug-location !291; cg.c:228:5
  Bcc 12, %bb.29, implicit killed $nzcv, debug-location !291; cg.c:228:5
  B %bb.20, debug-location !291; cg.c:228:5

bb.20.for.body57:
; predecessors: %bb.19
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  ADJCALLSTACKDOWN 8, 0, implicit-def dead $sp, implicit $sp, debug-location !292; cg.c:232:9
  STRXui %293:gpr64common, $sp, 0, debug-location !292 :: (store 8 into stack); cg.c:232:9
  $x0 = COPY %294:gpr64, debug-location !292; cg.c:232:9
  $x1 = COPY %295:gpr64, debug-location !292; cg.c:232:9
  $x2 = COPY %360:gpr64common, debug-location !292; cg.c:232:9
  $x3 = COPY %354:gpr64common, debug-location !292; cg.c:232:9
  $x4 = COPY %298:gpr64, debug-location !292; cg.c:232:9
  $x5 = COPY %299:gpr64, debug-location !292; cg.c:232:9
  $x6 = COPY %300:gpr64, debug-location !292; cg.c:232:9
  $x7 = COPY %301:gpr64, debug-location !292; cg.c:232:9
  BL @conj_grad, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit killed $x3, implicit killed $x4, implicit killed $x5, implicit killed $x6, implicit killed $x7, implicit-def $sp, debug-location !292; cg.c:232:9
  ADJCALLSTACKUP 8, 0, implicit-def dead $sp, implicit $sp, debug-location !292; cg.c:232:9
  STRXui $xzr, %stack.9.norm_temp1, 0, debug-location !294 :: (store 8 into %ir.norm_temp1); cg.c:240:20
  STRXui $xzr, %stack.10.norm_temp2, 0, debug-location !295 :: (store 8 into %ir.norm_temp2); cg.c:241:20
  STRWui $wzr, %stack.4.j, 0, debug-location !296 :: (store 4 into %ir.j); cg.c:242:16

bb.21.for.cond58:
; predecessors: %bb.20, %bb.22
  successors: %bb.22(0x7c000000), %bb.23(0x04000000); %bb.22(96.88%), %bb.23(3.12%)

  %304:gpr32 = LDRWui %stack.4.j, 0, debug-location !299 :: (dereferenceable load 4 from %ir.j); cg.c:242:21
  %306:gpr32 = LDRWui %34:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !301 :: (dereferenceable load 4 from @lastcol); cg.c:242:25
  %308:gpr32 = LDRWui %33:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !302 :: (dereferenceable load 4 from @firstcol); cg.c:242:35
  %309:gpr32common = nsw SUBWrr %306:gpr32, %308:gpr32, debug-location !303; cg.c:242:33
  %310:gpr32common = nsw ADDWri %309:gpr32common, 1, 0, debug-location !304; cg.c:242:44
  dead $wzr = SUBSWrr %304:gpr32, %310:gpr32common, implicit-def $nzcv, debug-location !306; cg.c:242:9
  Bcc 10, %bb.23, implicit killed $nzcv, debug-location !306; cg.c:242:9
  B %bb.22, debug-location !306; cg.c:242:9

bb.22.for.body62:
; predecessors: %bb.21
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  %335:fpr64 = LDRDui %stack.9.norm_temp1, 0, debug-location !307 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:243:26
  %336:gpr64common = LDRSWui %stack.4.j, 0, debug-location !309 :: (dereferenceable load 4 from %ir.j); cg.c:243:41
  %339:gpr64 = UBFMXri %336:gpr64common, 61, 60, debug-location !318; cg.c:244:39
  %340:fpr64 = LDRDroX %360:gpr64common, %339:gpr64, 0, 0, debug-location !310 :: (load 8 from %ir.arrayidx64); cg.c:243:39
  %342:fpr64 = LDRDroX %354:gpr64common, %339:gpr64, 0, 0, debug-location !318 :: (load 8 from %ir.arrayidx71); cg.c:244:39
  %343:fpr64 = FMULDrr %340:fpr64, %342:fpr64, debug-location !313; cg.c:243:44
  %344:fpr64 = FADDDrr %335:fpr64, %343:fpr64, debug-location !314; cg.c:243:37
  STRDui %344:fpr64, %stack.9.norm_temp1, 0, debug-location !315 :: (store 8 into %ir.norm_temp1); cg.c:243:24
  %345:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !316 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:244:26
  %346:fpr64 = FMULDrr %342:fpr64, %342:fpr64, debug-location !321; cg.c:244:44
  %347:fpr64 = FADDDrr %345:fpr64, %346:fpr64, debug-location !322; cg.c:244:37
  STRDui %347:fpr64, %stack.10.norm_temp2, 0, debug-location !323 :: (store 8 into %ir.norm_temp2); cg.c:244:24
  %348:gpr32common = nsw ADDWri %336.sub_32:gpr64common, 1, 0, debug-location !324; cg.c:242:50
  STRWui %348:gpr32common, %stack.4.j, 0, debug-location !324 :: (store 4 into %ir.j); cg.c:242:50
  B %bb.21, debug-location !325; cg.c:242:9

bb.23.for.end76:
; predecessors: %bb.21
  successors: %bb.25(0x50000000), %bb.24(0x30000000); %bb.25(62.50%), %bb.24(37.50%)

  %1:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !328 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:247:33
  %387:fpr64 = FSQRTDr %1:fpr64, debug-location !329; cg.c:247:28
  FCMPDrr %387:fpr64, %387:fpr64, implicit-def $nzcv, debug-location !330; cg.c:247:26
  Bcc 7, %bb.25, implicit killed $nzcv, debug-location !330; cg.c:247:26
  B %bb.24, debug-location !330; cg.c:247:26

bb.24.call.sqrt:
; predecessors: %bb.23
  successors: %bb.25(0x80000000); %bb.25(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !330; cg.c:247:26
  $d0 = COPY %1:fpr64, debug-location !330; cg.c:247:26
  BL @sqrt, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $d0, implicit-def $sp, implicit-def $d0, debug-location !330; cg.c:247:26
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !330; cg.c:247:26
  %387:fpr64 = COPY killed $d0, debug-location !330; cg.c:247:26

bb.25.for.end76.split:
; predecessors: %bb.23, %bb.24
  successors: %bb.26(0x80000000); %bb.26(100.00%)

  %314:fpr64 = FDIVDrr %313:fpr64, %387:fpr64, debug-location !330; cg.c:247:26
  STRDui %314:fpr64, %stack.10.norm_temp2, 0, debug-location !331 :: (store 8 into %ir.norm_temp2); cg.c:247:20
  STRWui $wzr, %stack.4.j, 0, debug-location !332 :: (store 4 into %ir.j); cg.c:252:16

bb.26.for.cond78:
; predecessors: %bb.25, %bb.27
  successors: %bb.27(0x7c000000), %bb.28(0x04000000); %bb.27(96.88%), %bb.28(3.12%)

  %316:gpr32 = LDRWui %stack.4.j, 0, debug-location !335 :: (dereferenceable load 4 from %ir.j); cg.c:252:21
  %318:gpr32 = LDRWui %34:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !337 :: (dereferenceable load 4 from @lastcol); cg.c:252:25
  %320:gpr32 = LDRWui %33:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !338 :: (dereferenceable load 4 from @firstcol); cg.c:252:35
  %321:gpr32common = nsw SUBWrr %318:gpr32, %320:gpr32, debug-location !339; cg.c:252:33
  %322:gpr32common = nsw ADDWri %321:gpr32common, 1, 0, debug-location !340; cg.c:252:44
  dead $wzr = SUBSWrr %316:gpr32, %322:gpr32common, implicit-def $nzcv, debug-location !342; cg.c:252:9
  Bcc 10, %bb.28, implicit killed $nzcv, debug-location !342; cg.c:252:9
  B %bb.27, debug-location !342; cg.c:252:9

bb.27.for.body82:
; predecessors: %bb.26
  successors: %bb.26(0x80000000); %bb.26(100.00%)

  %326:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !343 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:253:20
  %327:gpr64common = LDRSWui %stack.4.j, 0, debug-location !345 :: (dereferenceable load 4 from %ir.j); cg.c:253:35
  %329:gpr64 = UBFMXri %327:gpr64common, 61, 60, debug-location !346; cg.c:253:33
  %331:fpr64 = LDRDroX %354:gpr64common, %329:gpr64, 0, 0, debug-location !346 :: (load 8 from %ir.arrayidx84); cg.c:253:33
  %332:fpr64 = FMULDrr %326:fpr64, %331:fpr64, debug-location !347; cg.c:253:31
  STRDroX %332:fpr64, %360:gpr64common, %329:gpr64, 0, 0, debug-location !350 :: (store 8 into %ir.arrayidx87); cg.c:253:18
  %334:gpr32common = nsw ADDWri %327.sub_32:gpr64common, 1, 0, debug-location !351; cg.c:252:50
  STRWui %334:gpr32common, %stack.4.j, 0, debug-location !351 :: (store 4 into %ir.j); cg.c:252:50
  B %bb.26, debug-location !352; cg.c:252:9

bb.28.for.inc91:
; predecessors: %bb.26
  successors: %bb.19(0x80000000); %bb.19(100.00%)

  %324:gpr32common = LDRWui %stack.6.it, 0, debug-location !355 :: (dereferenceable load 4 from %ir.it); cg.c:228:29
  %325:gpr32common = nsw ADDWri %324:gpr32common, 1, 0, debug-location !355; cg.c:228:29
  STRWui %325:gpr32common, %stack.6.it, 0, debug-location !355 :: (store 4 into %ir.it); cg.c:228:29
  B %bb.19, debug-location !356; cg.c:228:5

bb.29.for.end93:
; predecessors: %bb.19
  successors: %bb.30(0x80000000); %bb.30(100.00%)

  STRWui $wzr, %stack.3.i, 0, debug-location !359 :: (store 4 into %ir.i); cg.c:260:12
  %290:gpr64 = MOVi64imm 4607182418800017408

bb.30.for.cond94:
; predecessors: %bb.29, %bb.31
  successors: %bb.31(0x7c000000), %bb.32(0x04000000); %bb.31(96.88%), %bb.32(3.12%)

  %96:gpr32 = LDRWui %stack.3.i, 0, debug-location !362 :: (dereferenceable load 4 from %ir.i); cg.c:260:17
  %97:gpr32common = ADDWri %0:gpr32common, 1, 0, debug-location !364; cg.c:260:19
  dead $wzr = SUBSWrr %96:gpr32, %97:gpr32common, implicit-def $nzcv, debug-location !365; cg.c:260:5
  Bcc 10, %bb.32, implicit killed $nzcv, debug-location !365; cg.c:260:5
  B %bb.31, debug-location !365; cg.c:260:5

bb.31.for.body96:
; predecessors: %bb.30
  successors: %bb.30(0x80000000); %bb.30(100.00%)

  %287:gpr64common = LDRSWui %stack.3.i, 0, debug-location !366 :: (dereferenceable load 4 from %ir.i); cg.c:261:11
  STRXroX %290:gpr64, %360:gpr64common, %287:gpr64common, 0, 1, debug-location !369 :: (store 8 into %ir.arrayidx98); cg.c:261:14
  %291:gpr32common = nsw ADDWri %287.sub_32:gpr64common, 1, 0, debug-location !370; cg.c:260:30
  STRWui %291:gpr32common, %stack.3.i, 0, debug-location !370 :: (store 4 into %ir.i); cg.c:260:30
  B %bb.30, debug-location !371; cg.c:260:5

bb.32.for.end101:
; predecessors: %bb.30
  successors: %bb.33(0x80000000); %bb.33(100.00%)

  STRXui $xzr, %stack.7.zeta, 0, debug-location !374 :: (store 8 into %ir.zeta); cg.c:264:10
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !375; cg.c:266:5
  $w0 = COPY $wzr, debug-location !375; cg.c:266:5
  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !375; cg.c:266:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !375; cg.c:266:5
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !376; cg.c:268:55
  $w0 = COPY $wzr, debug-location !376; cg.c:268:55
  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !376; cg.c:268:55
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !376; cg.c:268:55
  %101:fpr64 = COPY killed $d0, debug-location !376; cg.c:268:55
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !377; cg.c:268:5
  %102:gpr64 = MOVaddr target-flags(aarch64-page) @.str.9, target-flags(aarch64-pageoff, aarch64-nc) @.str.9, debug-location !377; cg.c:268:5
  $x0 = COPY %102:gpr64, debug-location !377; cg.c:268:5
  $d0 = COPY %101:fpr64, debug-location !377; cg.c:268:5
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $d0, implicit-def $sp, implicit-def dead $w0, debug-location !377; cg.c:268:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !377; cg.c:268:5
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !378; cg.c:270:5
  %104:gpr32 = MOVi32imm 1
  $w0 = MOVi32imm 1, debug-location !378; cg.c:270:5
  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !378; cg.c:270:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !378; cg.c:270:5
  STRWui %104:gpr32, %stack.6.it, 0, debug-location !379 :: (store 4 into %ir.it); cg.c:279:13
  %214:gpr64common = ADDXri %stack.8.rnorm, 0, 0
  %215:gpr64 = MOVaddr target-flags(aarch64-page) @colidx, target-flags(aarch64-pageoff, aarch64-nc) @colidx
  %216:gpr64 = MOVaddr target-flags(aarch64-page) @rowstr, target-flags(aarch64-pageoff, aarch64-nc) @rowstr
  %219:gpr64 = MOVaddr target-flags(aarch64-page) @a, target-flags(aarch64-pageoff, aarch64-nc) @a
  %220:gpr64 = MOVaddr target-flags(aarch64-page) @p, target-flags(aarch64-pageoff, aarch64-nc) @p
  %221:gpr64 = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q
  %222:gpr64 = MOVaddr target-flags(aarch64-page) @r, target-flags(aarch64-pageoff, aarch64-nc) @r
  %241:gpr64 = MOVi64imm 4633641066610819072
  %246:gpr64 = MOVaddr target-flags(aarch64-page) @.str.10, target-flags(aarch64-pageoff, aarch64-nc) @.str.10
  %251:gpr64 = MOVaddr target-flags(aarch64-page) @.str.11, target-flags(aarch64-pageoff, aarch64-nc) @.str.11

bb.33.for.cond108:
; predecessors: %bb.32, %bb.48
  successors: %bb.34(0x7c000000), %bb.49(0x04000000); %bb.34(96.88%), %bb.49(3.12%)

  %105:gpr32common = LDRWui %stack.6.it, 0, debug-location !382 :: (dereferenceable load 4 from %ir.it); cg.c:279:18
  dead $wzr = SUBSWri %105:gpr32common, 75, 0, implicit-def $nzcv, debug-location !385; cg.c:279:5
  Bcc 12, %bb.49, implicit killed $nzcv, debug-location !385; cg.c:279:5
  B %bb.34, debug-location !385; cg.c:279:5

bb.34.for.body110:
; predecessors: %bb.33
  successors: %bb.35(0x50000000), %bb.36(0x30000000); %bb.35(62.50%), %bb.36(37.50%)

  %211:gpr32 = LDRWui %386:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !386 :: (dereferenceable load 4 from @timeron); cg.c:284:13
  CBZW %211:gpr32, %bb.36, debug-location !389; cg.c:284:13
  B %bb.35, debug-location !389; cg.c:284:13

bb.35.if.then111:
; predecessors: %bb.34
  successors: %bb.36(0x80000000); %bb.36(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !390; cg.c:285:13
  $w0 = MOVi32imm 2, debug-location !390; cg.c:285:13
  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !390; cg.c:285:13
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !390; cg.c:285:13

bb.36.if.end112:
; predecessors: %bb.34, %bb.35
  successors: %bb.37(0x50000000), %bb.38(0x30000000); %bb.37(62.50%), %bb.38(37.50%)

  ADJCALLSTACKDOWN 8, 0, implicit-def dead $sp, implicit $sp, debug-location !391; cg.c:286:9
  STRXui %214:gpr64common, $sp, 0, debug-location !391 :: (store 8 into stack); cg.c:286:9
  $x0 = COPY %215:gpr64, debug-location !391; cg.c:286:9
  $x1 = COPY %216:gpr64, debug-location !391; cg.c:286:9
  $x2 = COPY %360:gpr64common, debug-location !391; cg.c:286:9
  $x3 = COPY %354:gpr64common, debug-location !391; cg.c:286:9
  $x4 = COPY %219:gpr64, debug-location !391; cg.c:286:9
  $x5 = COPY %220:gpr64, debug-location !391; cg.c:286:9
  $x6 = COPY %221:gpr64, debug-location !391; cg.c:286:9
  $x7 = COPY %222:gpr64, debug-location !391; cg.c:286:9
  BL @conj_grad, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit killed $x3, implicit killed $x4, implicit killed $x5, implicit killed $x6, implicit killed $x7, implicit-def $sp, debug-location !391; cg.c:286:9
  ADJCALLSTACKUP 8, 0, implicit-def dead $sp, implicit $sp, debug-location !391; cg.c:286:9
  %224:gpr32 = LDRWui %386:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !392 :: (dereferenceable load 4 from @timeron); cg.c:287:13
  CBZW %224:gpr32, %bb.38, debug-location !394; cg.c:287:13
  B %bb.37, debug-location !394; cg.c:287:13

bb.37.if.then114:
; predecessors: %bb.36
  successors: %bb.38(0x80000000); %bb.38(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !395; cg.c:288:13
  $w0 = MOVi32imm 2, debug-location !395; cg.c:288:13
  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !395; cg.c:288:13
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !395; cg.c:288:13

bb.38.if.end115:
; predecessors: %bb.36, %bb.37
  successors: %bb.39(0x80000000); %bb.39(100.00%)

  STRXui $xzr, %stack.9.norm_temp1, 0, debug-location !396 :: (store 8 into %ir.norm_temp1); cg.c:297:20
  STRXui $xzr, %stack.10.norm_temp2, 0, debug-location !397 :: (store 8 into %ir.norm_temp2); cg.c:298:20
  STRWui $wzr, %stack.4.j, 0, debug-location !398 :: (store 4 into %ir.j); cg.c:299:16

bb.39.for.cond116:
; predecessors: %bb.38, %bb.40
  successors: %bb.40(0x7c000000), %bb.41(0x04000000); %bb.40(96.88%), %bb.41(3.12%)

  %228:gpr32 = LDRWui %stack.4.j, 0, debug-location !401 :: (dereferenceable load 4 from %ir.j); cg.c:299:21
  %230:gpr32 = LDRWui %34:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !403 :: (dereferenceable load 4 from @lastcol); cg.c:299:25
  %232:gpr32 = LDRWui %33:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !404 :: (dereferenceable load 4 from @firstcol); cg.c:299:35
  %233:gpr32common = nsw SUBWrr %230:gpr32, %232:gpr32, debug-location !405; cg.c:299:33
  %234:gpr32common = nsw ADDWri %233:gpr32common, 1, 0, debug-location !406; cg.c:299:44
  dead $wzr = SUBSWrr %228:gpr32, %234:gpr32common, implicit-def $nzcv, debug-location !408; cg.c:299:9
  Bcc 10, %bb.41, implicit killed $nzcv, debug-location !408; cg.c:299:9
  B %bb.40, debug-location !408; cg.c:299:9

bb.40.for.body120:
; predecessors: %bb.39
  successors: %bb.39(0x80000000); %bb.39(100.00%)

  %273:fpr64 = LDRDui %stack.9.norm_temp1, 0, debug-location !409 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:300:26
  %274:gpr64common = LDRSWui %stack.4.j, 0, debug-location !411 :: (dereferenceable load 4 from %ir.j); cg.c:300:41
  %277:gpr64 = UBFMXri %274:gpr64common, 61, 60, debug-location !420; cg.c:301:39
  %278:fpr64 = LDRDroX %360:gpr64common, %277:gpr64, 0, 0, debug-location !412 :: (load 8 from %ir.arrayidx122); cg.c:300:39
  %280:fpr64 = LDRDroX %354:gpr64common, %277:gpr64, 0, 0, debug-location !420 :: (load 8 from %ir.arrayidx130); cg.c:301:39
  %281:fpr64 = FMULDrr %278:fpr64, %280:fpr64, debug-location !415; cg.c:300:44
  %282:fpr64 = FADDDrr %273:fpr64, %281:fpr64, debug-location !416; cg.c:300:37
  STRDui %282:fpr64, %stack.9.norm_temp1, 0, debug-location !417 :: (store 8 into %ir.norm_temp1); cg.c:300:24
  %283:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !418 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:301:26
  %284:fpr64 = FMULDrr %280:fpr64, %280:fpr64, debug-location !423; cg.c:301:44
  %285:fpr64 = FADDDrr %283:fpr64, %284:fpr64, debug-location !424; cg.c:301:37
  STRDui %285:fpr64, %stack.10.norm_temp2, 0, debug-location !425 :: (store 8 into %ir.norm_temp2); cg.c:301:24
  %286:gpr32common = nsw ADDWri %274.sub_32:gpr64common, 1, 0, debug-location !426; cg.c:299:50
  STRWui %286:gpr32common, %stack.4.j, 0, debug-location !426 :: (store 4 into %ir.j); cg.c:299:50
  B %bb.39, debug-location !427; cg.c:299:9

bb.41.for.end135:
; predecessors: %bb.39
  successors: %bb.43(0x50000000), %bb.42(0x30000000); %bb.43(62.50%), %bb.42(37.50%)

  %5:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !430 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:304:33
  %388:fpr64 = FSQRTDr %5:fpr64, debug-location !431; cg.c:304:28
  FCMPDrr %388:fpr64, %388:fpr64, implicit-def $nzcv, debug-location !432; cg.c:304:26
  Bcc 7, %bb.43, implicit killed $nzcv, debug-location !432; cg.c:304:26
  B %bb.42, debug-location !432; cg.c:304:26

bb.42.call.sqrt4:
; predecessors: %bb.41
  successors: %bb.43(0x80000000); %bb.43(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !432; cg.c:304:26
  $d0 = COPY %5:fpr64, debug-location !432; cg.c:304:26
  BL @sqrt, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $d0, implicit-def $sp, implicit-def $d0, debug-location !432; cg.c:304:26
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !432; cg.c:304:26
  %388:fpr64 = COPY killed $d0, debug-location !432; cg.c:304:26

bb.43.for.end135.split:
; predecessors: %bb.41, %bb.42
  successors: %bb.44(0x40000000), %bb.45(0x40000000); %bb.44(50.00%), %bb.45(50.00%)

  %238:fpr64 = FDIVDrr %313:fpr64, %388:fpr64, debug-location !432; cg.c:304:26
  STRDui %238:fpr64, %stack.10.norm_temp2, 0, debug-location !433 :: (store 8 into %ir.norm_temp2); cg.c:304:20
  %239:fpr64 = LDRDui %stack.9.norm_temp1, 0, debug-location !434 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:306:30
  %240:fpr64 = FDIVDrr %313:fpr64, %239:fpr64, debug-location !435; cg.c:306:28
  %242:fpr64 = COPY %241:gpr64
  %243:fpr64 = FADDDrr %240:fpr64, %242:fpr64, debug-location !436; cg.c:306:22
  STRDui %243:fpr64, %stack.7.zeta, 0, debug-location !437 :: (store 8 into %ir.zeta); cg.c:306:14
  %244:gpr32common = LDRWui %stack.6.it, 0, debug-location !438 :: (dereferenceable load 4 from %ir.it); cg.c:307:13
  dead $wzr = SUBSWri %244:gpr32common, 1, 0, implicit-def $nzcv, debug-location !441; cg.c:307:13
  Bcc 1, %bb.45, implicit killed $nzcv, debug-location !441; cg.c:307:13
  B %bb.44, debug-location !441; cg.c:307:13

bb.44.if.then141:
; predecessors: %bb.43
  successors: %bb.45(0x80000000); %bb.45(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !442; cg.c:308:13
  $x0 = COPY %246:gpr64, debug-location !442; cg.c:308:13
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !442; cg.c:308:13
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !442; cg.c:308:13

bb.45.if.end143:
; predecessors: %bb.43, %bb.44
  successors: %bb.46(0x80000000); %bb.46(100.00%)

  %248:gpr32 = LDRWui %stack.6.it, 0, debug-location !443 :: (dereferenceable load 4 from %ir.it); cg.c:309:50
  %249:fpr64 = LDRDui %stack.8.rnorm, 0, debug-location !444 :: (dereferenceable load 8 from %ir.rnorm); cg.c:309:54
  %250:fpr64 = LDRDui %stack.7.zeta, 0, debug-location !445 :: (dereferenceable load 8 from %ir.zeta); cg.c:309:61
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !446; cg.c:309:9
  $x0 = COPY %251:gpr64, debug-location !446; cg.c:309:9
  $w1 = COPY %248:gpr32, debug-location !446; cg.c:309:9
  $d0 = COPY %249:fpr64, debug-location !446; cg.c:309:9
  $d1 = COPY %250:fpr64, debug-location !446; cg.c:309:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0, debug-location !446; cg.c:309:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !446; cg.c:309:9
  STRWui $wzr, %stack.4.j, 0, debug-location !447 :: (store 4 into %ir.j); cg.c:314:16

bb.46.for.cond145:
; predecessors: %bb.45, %bb.47
  successors: %bb.47(0x7c000000), %bb.48(0x04000000); %bb.47(96.88%), %bb.48(3.12%)

  %254:gpr32 = LDRWui %stack.4.j, 0, debug-location !450 :: (dereferenceable load 4 from %ir.j); cg.c:314:21
  %256:gpr32 = LDRWui %34:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !452 :: (dereferenceable load 4 from @lastcol); cg.c:314:25
  %258:gpr32 = LDRWui %33:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !453 :: (dereferenceable load 4 from @firstcol); cg.c:314:35
  %259:gpr32common = nsw SUBWrr %256:gpr32, %258:gpr32, debug-location !454; cg.c:314:33
  %260:gpr32common = nsw ADDWri %259:gpr32common, 1, 0, debug-location !455; cg.c:314:44
  dead $wzr = SUBSWrr %254:gpr32, %260:gpr32common, implicit-def $nzcv, debug-location !457; cg.c:314:9
  Bcc 10, %bb.48, implicit killed $nzcv, debug-location !457; cg.c:314:9
  B %bb.47, debug-location !457; cg.c:314:9

bb.47.for.body149:
; predecessors: %bb.46
  successors: %bb.46(0x80000000); %bb.46(100.00%)

  %264:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !458 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:315:20
  %265:gpr64common = LDRSWui %stack.4.j, 0, debug-location !460 :: (dereferenceable load 4 from %ir.j); cg.c:315:35
  %267:gpr64 = UBFMXri %265:gpr64common, 61, 60, debug-location !461; cg.c:315:33
  %269:fpr64 = LDRDroX %354:gpr64common, %267:gpr64, 0, 0, debug-location !461 :: (load 8 from %ir.arrayidx151); cg.c:315:33
  %270:fpr64 = FMULDrr %264:fpr64, %269:fpr64, debug-location !462; cg.c:315:31
  STRDroX %270:fpr64, %360:gpr64common, %267:gpr64, 0, 0, debug-location !465 :: (store 8 into %ir.arrayidx154); cg.c:315:18
  %272:gpr32common = nsw ADDWri %265.sub_32:gpr64common, 1, 0, debug-location !466; cg.c:314:50
  STRWui %272:gpr32common, %stack.4.j, 0, debug-location !466 :: (store 4 into %ir.j); cg.c:314:50
  B %bb.46, debug-location !467; cg.c:314:9

bb.48.for.inc158:
; predecessors: %bb.46
  successors: %bb.33(0x80000000); %bb.33(100.00%)

  %262:gpr32common = LDRWui %stack.6.it, 0, debug-location !470 :: (dereferenceable load 4 from %ir.it); cg.c:279:33
  %263:gpr32common = nsw ADDWri %262:gpr32common, 1, 0, debug-location !470; cg.c:279:33
  STRWui %263:gpr32common, %stack.6.it, 0, debug-location !470 :: (store 4 into %ir.it); cg.c:279:33
  B %bb.33, debug-location !471; cg.c:279:5

bb.49.do.end164:
; predecessors: %bb.33
  successors: %bb.50(0x40000000), %bb.53(0x40000000); %bb.50(50.00%), %bb.53(50.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !474; cg.c:321:5
  $w0 = MOVi32imm 1, debug-location !474; cg.c:321:5
  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !474; cg.c:321:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !474; cg.c:321:5
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !475; cg.c:327:9
  $w0 = MOVi32imm 1, debug-location !475; cg.c:327:9
  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !475; cg.c:327:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !475; cg.c:327:9
  %108:fpr64 = COPY killed $d0, debug-location !475; cg.c:327:9
  STRDui %108:fpr64, %stack.11.t, 0, debug-location !476 :: (store 8 into %ir.t); cg.c:327:7
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !477; cg.c:329:5
  %109:gpr64 = MOVaddr target-flags(aarch64-page) @.str.12, target-flags(aarch64-pageoff, aarch64-nc) @.str.12, debug-location !477; cg.c:329:5
  $x0 = COPY %109:gpr64, debug-location !477; cg.c:329:5
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !477; cg.c:329:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !477; cg.c:329:5
  %111:gpr64 = MOVi64imm 4457293557087583675
  STRXui %111:gpr64, %stack.17.epsilon, 0, debug-location !478 :: (store 8 into %ir.epsilon); cg.c:331:13
  %112:gpr32common = LDRSBWui %stack.14.Class, 0, debug-location !479 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:332:9
  dead $wzr = SUBSWri %112:gpr32common, 85, 0, implicit-def $nzcv, debug-location !482; cg.c:332:9
  Bcc 0, %bb.53, implicit killed $nzcv, debug-location !482; cg.c:332:9
  B %bb.50, debug-location !482; cg.c:332:9

bb.50.if.then169:
; predecessors: %bb.49
  successors: %bb.51(0x40000000), %bb.52(0x40000000); %bb.51(50.00%), %bb.52(50.00%)

  %119:fpr64 = LDRDui %stack.7.zeta, 0, debug-location !483 :: (dereferenceable load 8 from %ir.zeta); cg.c:333:20
  %120:fpr64 = LDRDui %stack.16.zeta_verify_value, 0, debug-location !485 :: (dereferenceable load 8 from %ir.zeta_verify_value); cg.c:333:27
  %121:fpr64 = FABD64 %119:fpr64, %120:fpr64, debug-location !487; cg.c:333:15
  %122:fpr64 = FDIVDrr %121:fpr64, %120:fpr64, debug-location !489; cg.c:333:46
  STRDui %122:fpr64, %stack.18.err, 0, debug-location !490 :: (store 8 into %ir.err); cg.c:333:13
  %123:fpr64 = LDRDui %stack.17.epsilon, 0, debug-location !493 :: (dereferenceable load 8 from %ir.epsilon); cg.c:334:20
  FCMPDrr %122:fpr64, %123:fpr64, implicit-def $nzcv, debug-location !495; cg.c:334:13
  Bcc 8, %bb.52, implicit killed $nzcv, debug-location !495; cg.c:334:13
  B %bb.51, debug-location !495; cg.c:334:13

bb.51.if.then174:
; predecessors: %bb.50
  successors: %bb.54(0x80000000); %bb.54(100.00%)

  %133:gpr32 = MOVi32imm 1
  STRWui %133:gpr32, %stack.15.verified, 0, debug-location !496 :: (store 4 into %ir.verified); cg.c:335:22
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !498; cg.c:336:13
  %134:gpr64 = MOVaddr target-flags(aarch64-page) @.str.13, target-flags(aarch64-pageoff, aarch64-nc) @.str.13, debug-location !498; cg.c:336:13
  $x0 = COPY %134:gpr64, debug-location !498; cg.c:336:13
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !498; cg.c:336:13
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !498; cg.c:336:13
  %136:fpr64 = LDRDui %stack.7.zeta, 0, debug-location !499 :: (dereferenceable load 8 from %ir.zeta); cg.c:337:45
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !500; cg.c:337:13
  %137:gpr64 = MOVaddr target-flags(aarch64-page) @.str.14, target-flags(aarch64-pageoff, aarch64-nc) @.str.14, debug-location !500; cg.c:337:13
  $x0 = COPY %137:gpr64, debug-location !500; cg.c:337:13
  $d0 = COPY %136:fpr64, debug-location !500; cg.c:337:13
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $d0, implicit-def $sp, implicit-def dead $w0, debug-location !500; cg.c:337:13
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !500; cg.c:337:13
  %139:fpr64 = LDRDui %stack.18.err, 0, debug-location !501 :: (dereferenceable load 8 from %ir.err); cg.c:338:45
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !502; cg.c:338:13
  %140:gpr64 = MOVaddr target-flags(aarch64-page) @.str.15, target-flags(aarch64-pageoff, aarch64-nc) @.str.15, debug-location !502; cg.c:338:13
  $x0 = COPY %140:gpr64, debug-location !502; cg.c:338:13
  $d0 = COPY %139:fpr64, debug-location !502; cg.c:338:13
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $d0, implicit-def $sp, implicit-def dead $w0, debug-location !502; cg.c:338:13
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !502; cg.c:338:13
  B %bb.54, debug-location !503; cg.c:339:9

bb.52.if.else178:
; predecessors: %bb.50
  successors: %bb.54(0x80000000); %bb.54(100.00%)

  STRWui $wzr, %stack.15.verified, 0, debug-location !504 :: (store 4 into %ir.verified); cg.c:341:22
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !506; cg.c:342:13
  %125:gpr64 = MOVaddr target-flags(aarch64-page) @.str.16, target-flags(aarch64-pageoff, aarch64-nc) @.str.16, debug-location !506; cg.c:342:13
  $x0 = COPY %125:gpr64, debug-location !506; cg.c:342:13
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !506; cg.c:342:13
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !506; cg.c:342:13
  %127:fpr64 = LDRDui %stack.7.zeta, 0, debug-location !507 :: (dereferenceable load 8 from %ir.zeta); cg.c:343:54
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !508; cg.c:343:13
  %128:gpr64 = MOVaddr target-flags(aarch64-page) @.str.17, target-flags(aarch64-pageoff, aarch64-nc) @.str.17, debug-location !508; cg.c:343:13
  $x0 = COPY %128:gpr64, debug-location !508; cg.c:343:13
  $d0 = COPY %127:fpr64, debug-location !508; cg.c:343:13
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $d0, implicit-def $sp, implicit-def dead $w0, debug-location !508; cg.c:343:13
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !508; cg.c:343:13
  %130:fpr64 = LDRDui %stack.16.zeta_verify_value, 0, debug-location !509 :: (dereferenceable load 8 from %ir.zeta_verify_value); cg.c:344:54
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !510; cg.c:344:13
  %131:gpr64 = MOVaddr target-flags(aarch64-page) @.str.18, target-flags(aarch64-pageoff, aarch64-nc) @.str.18, debug-location !510; cg.c:344:13
  $x0 = COPY %131:gpr64, debug-location !510; cg.c:344:13
  $d0 = COPY %130:fpr64, debug-location !510; cg.c:344:13
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $d0, implicit-def $sp, implicit-def dead $w0, debug-location !510; cg.c:344:13
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !510; cg.c:344:13
  B %bb.54

bb.53.if.else183:
; predecessors: %bb.49
  successors: %bb.54(0x80000000); %bb.54(100.00%)

  STRWui $wzr, %stack.15.verified, 0, debug-location !511 :: (store 4 into %ir.verified); cg.c:348:18
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !513; cg.c:349:9
  %115:gpr64 = MOVaddr target-flags(aarch64-page) @.str.19, target-flags(aarch64-pageoff, aarch64-nc) @.str.19, debug-location !513; cg.c:349:9
  $x0 = COPY %115:gpr64, debug-location !513; cg.c:349:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !513; cg.c:349:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !513; cg.c:349:9
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !514; cg.c:350:9
  %117:gpr64 = MOVaddr target-flags(aarch64-page) @.str.20, target-flags(aarch64-pageoff, aarch64-nc) @.str.20, debug-location !514; cg.c:350:9
  $x0 = COPY %117:gpr64, debug-location !514; cg.c:350:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !514; cg.c:350:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !514; cg.c:350:9

bb.54.if.end186:
; predecessors: %bb.53, %bb.52, %bb.51
  successors: %bb.55(0x50000000), %bb.56(0x30000000); %bb.55(62.50%), %bb.56(37.50%)

  %142:fpr64 = LDRDui %stack.11.t, 0, debug-location !515 :: (dereferenceable load 8 from %ir.t); cg.c:353:9
  FCMPDri %142:fpr64, implicit-def $nzcv, debug-location !518; cg.c:353:9
  Bcc 0, %bb.56, implicit killed $nzcv, debug-location !518; cg.c:353:9
  B %bb.55, debug-location !518; cg.c:353:9

bb.55.if.then189:
; predecessors: %bb.54
  successors: %bb.57(0x80000000); %bb.57(100.00%)

  %144:fpr64 = LDRDui %stack.11.t, 0, debug-location !519 :: (dereferenceable load 8 from %ir.t); cg.c:357:18
  %145:gpr64common = ADRP target-flags(aarch64-page) %const.1
  %146:fpr64 = LDRDui %145:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  %147:fpr64 = FDIVDrr %146:fpr64, %144:fpr64, debug-location !521; cg.c:356:73
  %148:gpr64 = MOVi64imm 4696837146684686336
  %149:fpr64 = COPY %148:gpr64
  %150:fpr64 = FDIVDrr %147:fpr64, %149:fpr64, debug-location !522; cg.c:357:20
  STRDui %150:fpr64, %stack.12.mflops, 0, debug-location !523 :: (store 8 into %ir.mflops); cg.c:354:16
  B %bb.57, debug-location !524; cg.c:358:5

bb.56.if.else192:
; predecessors: %bb.54
  successors: %bb.57(0x80000000); %bb.57(100.00%)

  STRXui $xzr, %stack.12.mflops, 0, debug-location !525 :: (store 8 into %ir.mflops); cg.c:360:16

bb.57.if.end193:
; predecessors: %bb.56, %bb.55
  successors: %bb.58(0x50000000), %bb.67(0x30000000); %bb.58(62.50%), %bb.67(37.50%)

  %151:gpr32 = LDRSBWui %stack.14.Class, 0, debug-location !527 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:363:25
  %152:fpr64 = LDRDui %stack.11.t, 0, debug-location !528 :: (dereferenceable load 8 from %ir.t); cg.c:363:49
  %153:fpr64 = LDRDui %stack.12.mflops, 0, debug-location !529 :: (dereferenceable load 8 from %ir.mflops); cg.c:363:52
  %154:gpr32 = LDRWui %stack.15.verified, 0, debug-location !530 :: (dereferenceable load 4 from %ir.verified); cg.c:364:47
  ADJCALLSTACKDOWN 72, 0, implicit-def dead $sp, implicit $sp, debug-location !531; cg.c:363:5
  %155:gpr64 = MOVaddr target-flags(aarch64-page) @.str.31, target-flags(aarch64-pageoff, aarch64-nc) @.str.31, debug-location !531; cg.c:363:5
  STRXui %155:gpr64, $sp, 8, debug-location !531 :: (store 8 into stack + 64); cg.c:363:5
  %157:gpr64 = MOVaddr target-flags(aarch64-page) @.str.30, target-flags(aarch64-pageoff, aarch64-nc) @.str.30, debug-location !531; cg.c:363:5
  STRXui %157:gpr64, $sp, 7, debug-location !531 :: (store 8 into stack + 56); cg.c:363:5
  %158:gpr64 = MOVaddr target-flags(aarch64-page) @.str.29, target-flags(aarch64-pageoff, aarch64-nc) @.str.29, debug-location !531; cg.c:363:5
  STRXui %158:gpr64, $sp, 6, debug-location !531 :: (store 8 into stack + 48); cg.c:363:5
  %159:gpr64 = MOVaddr target-flags(aarch64-page) @.str.28, target-flags(aarch64-pageoff, aarch64-nc) @.str.28, debug-location !531; cg.c:363:5
  STRXui %159:gpr64, $sp, 5, debug-location !531 :: (store 8 into stack + 40); cg.c:363:5
  %160:gpr64 = MOVaddr target-flags(aarch64-page) @.str.27, target-flags(aarch64-pageoff, aarch64-nc) @.str.27, debug-location !531; cg.c:363:5
  STRXui %160:gpr64, $sp, 4, debug-location !531 :: (store 8 into stack + 32); cg.c:363:5
  %161:gpr64 = MOVaddr target-flags(aarch64-page) @.str.26, target-flags(aarch64-pageoff, aarch64-nc) @.str.26, debug-location !531; cg.c:363:5
  STRXui %161:gpr64, $sp, 3, debug-location !531 :: (store 8 into stack + 24); cg.c:363:5
  %162:gpr64 = MOVaddr target-flags(aarch64-page) @.str.25, target-flags(aarch64-pageoff, aarch64-nc) @.str.25, debug-location !531; cg.c:363:5
  STRXui %162:gpr64, $sp, 2, debug-location !531 :: (store 8 into stack + 16); cg.c:363:5
  %163:gpr64 = MOVaddr target-flags(aarch64-page) @.str.24, target-flags(aarch64-pageoff, aarch64-nc) @.str.24, debug-location !531; cg.c:363:5
  STRXui %163:gpr64, $sp, 1, debug-location !531 :: (store 8 into stack + 8); cg.c:363:5
  %164:gpr64 = MOVaddr target-flags(aarch64-page) @.str.23, target-flags(aarch64-pageoff, aarch64-nc) @.str.23, debug-location !531; cg.c:363:5
  STRXui %164:gpr64, $sp, 0, debug-location !531 :: (store 8 into stack); cg.c:363:5
  %165:gpr64 = MOVaddr target-flags(aarch64-page) @.str.21, target-flags(aarch64-pageoff, aarch64-nc) @.str.21, debug-location !531; cg.c:363:5
  %166:gpr64 = MOVaddr target-flags(aarch64-page) @.str.22, target-flags(aarch64-pageoff, aarch64-nc) @.str.22, debug-location !531; cg.c:363:5
  $x0 = COPY %165:gpr64, debug-location !531; cg.c:363:5
  $w1 = COPY %151:gpr32, debug-location !531; cg.c:363:5
  $w2 = MOVi32imm 75000, debug-location !531; cg.c:363:5
  $w3 = COPY $wzr, debug-location !531; cg.c:363:5
  $w4 = COPY $wzr, debug-location !531; cg.c:363:5
  $w5 = MOVi32imm 75, debug-location !531; cg.c:363:5
  $d0 = COPY %152:fpr64, debug-location !531; cg.c:363:5
  $d1 = COPY %153:fpr64, debug-location !531; cg.c:363:5
  $x6 = COPY %166:gpr64, debug-location !531; cg.c:363:5
  $w7 = COPY %154:gpr32, debug-location !531; cg.c:363:5
  BL @print_results, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit killed $w4, implicit killed $w5, implicit killed $d0, implicit killed $d1, implicit killed $x6, implicit killed $w7, implicit-def $sp, debug-location !531; cg.c:363:5
  ADJCALLSTACKUP 72, 0, implicit-def dead $sp, implicit $sp, debug-location !531; cg.c:363:5
  %170:gpr32 = LDRWui %386:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !532 :: (dereferenceable load 4 from @timeron); cg.c:370:9
  CBZW %170:gpr32, %bb.67, debug-location !534; cg.c:370:9
  B %bb.58, debug-location !534; cg.c:370:9

bb.58.if.then195:
; predecessors: %bb.57
  successors: %bb.59(0x50000000), %bb.60(0x30000000); %bb.59(62.50%), %bb.60(37.50%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !535; cg.c:371:16
  $w0 = MOVi32imm 1, debug-location !535; cg.c:371:16
  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !535; cg.c:371:16
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !535; cg.c:371:16
  %172:fpr64 = COPY killed $d0, debug-location !535; cg.c:371:16
  STRDui %172:fpr64, %stack.13.tmax, 0, debug-location !537 :: (store 8 into %ir.tmax); cg.c:371:14
  FCMPDri %172:fpr64, implicit-def $nzcv, debug-location !541; cg.c:372:13
  Bcc 1, %bb.60, implicit killed $nzcv, debug-location !541; cg.c:372:13
  B %bb.59, debug-location !541; cg.c:372:13

bb.59.if.then199:
; predecessors: %bb.58
  successors: %bb.60(0x80000000); %bb.60(100.00%)

  %173:gpr64 = MOVi64imm 4607182418800017408
  STRXui %173:gpr64, %stack.13.tmax, 0, debug-location !542 :: (store 8 into %ir.tmax); cg.c:373:18

bb.60.if.end200:
; predecessors: %bb.58, %bb.59
  successors: %bb.61(0x80000000); %bb.61(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !544; cg.c:374:9
  %174:gpr64 = MOVaddr target-flags(aarch64-page) @.str.32, target-flags(aarch64-pageoff, aarch64-nc) @.str.32, debug-location !544; cg.c:374:9
  $x0 = COPY %174:gpr64, debug-location !544; cg.c:374:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !544; cg.c:374:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !544; cg.c:374:9
  STRWui $wzr, %stack.3.i, 0, debug-location !545 :: (store 4 into %ir.i); cg.c:375:16
  %184:gpr64sp = ADDXri %stack.19.t_names, 0, 0
  %206:gpr64 = MOVaddr target-flags(aarch64-page) @.str.33, target-flags(aarch64-pageoff, aarch64-nc) @.str.33
  %187:gpr64 = MOVi64imm 4636737291354636288
  %192:gpr64 = MOVaddr target-flags(aarch64-page) @.str.34, target-flags(aarch64-pageoff, aarch64-nc) @.str.34
  %203:gpr64 = MOVaddr target-flags(aarch64-page) @.str.35, target-flags(aarch64-pageoff, aarch64-nc) @.str.35
  %204:gpr64 = MOVaddr target-flags(aarch64-page) @.str.36, target-flags(aarch64-pageoff, aarch64-nc) @.str.36

bb.61.for.cond202:
; predecessors: %bb.60, %bb.66
  successors: %bb.62(0x7c000000), %bb.67(0x04000000); %bb.62(96.88%), %bb.67(3.12%)

  %177:gpr32common = LDRWui %stack.3.i, 0, debug-location !548 :: (dereferenceable load 4 from %ir.i); cg.c:375:21
  dead $wzr = SUBSWri %177:gpr32common, 2, 0, implicit-def $nzcv, debug-location !551; cg.c:375:9
  Bcc 12, %bb.67, implicit killed $nzcv, debug-location !551; cg.c:375:9
  B %bb.62, debug-location !551; cg.c:375:9

bb.62.for.body205:
; predecessors: %bb.61
  successors: %bb.63(0x30000000), %bb.64(0x50000000); %bb.63(37.50%), %bb.64(62.50%)

  %180:gpr32 = LDRWui %stack.3.i, 0, debug-location !552 :: (dereferenceable load 4 from %ir.i); cg.c:376:28
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !554; cg.c:376:17
  $w0 = COPY %180:gpr32, debug-location !554; cg.c:376:17
  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !554; cg.c:376:17
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !554; cg.c:376:17
  %10:fpr64 = COPY killed $d0, debug-location !554; cg.c:376:17
  STRDui %10:fpr64, %stack.11.t, 0, debug-location !555 :: (store 8 into %ir.t); cg.c:376:15
  %182:gpr64 = LDRSWui %stack.3.i, 0, debug-location !556 :: (dereferenceable load 4 from %ir.i); cg.c:377:17
  %9:gpr64 = LDRXroX %184:gpr64sp, %182:gpr64, 0, 1, debug-location !559 :: (load 8 from %ir.arrayidx211); cg.c:0
  CBNZW %182.sub_32:gpr64, %bb.64, debug-location !560; cg.c:377:17
  B %bb.63, debug-location !560; cg.c:377:17

bb.63.if.then209:
; predecessors: %bb.62
  successors: %bb.66(0x80000000); %bb.66(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !561; cg.c:378:17
  $x0 = COPY %206:gpr64, debug-location !561; cg.c:378:17
  $x1 = COPY %9:gpr64, debug-location !561; cg.c:378:17
  $d0 = COPY %10:fpr64, debug-location !561; cg.c:378:17
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit-def $sp, implicit-def dead $w0, debug-location !561; cg.c:378:17
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !561; cg.c:378:17
  B %bb.66, debug-location !563; cg.c:379:13

bb.64.if.else213:
; predecessors: %bb.62
  successors: %bb.65(0x40000000), %bb.66(0x40000000); %bb.65(50.00%), %bb.66(50.00%)

  %186:fpr64 = LDRDui %stack.11.t, 0, debug-location !564 :: (dereferenceable load 8 from %ir.t); cg.c:382:24
  %188:fpr64 = COPY %187:gpr64
  %189:fpr64 = FMULDrr %186:fpr64, %188:fpr64, debug-location !566; cg.c:382:26
  %190:fpr64 = LDRDui %stack.13.tmax, 0, debug-location !567 :: (dereferenceable load 8 from %ir.tmax); cg.c:382:36
  %191:fpr64 = FDIVDrr %189:fpr64, %190:fpr64, debug-location !568; cg.c:382:34
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !569; cg.c:381:17
  $x0 = COPY %192:gpr64, debug-location !569; cg.c:381:17
  $x1 = COPY %9:gpr64, debug-location !569; cg.c:381:17
  $d0 = COPY %10:fpr64, debug-location !569; cg.c:381:17
  $d1 = COPY %191:fpr64, debug-location !569; cg.c:381:17
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0, debug-location !569; cg.c:381:17
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !569; cg.c:381:17
  %194:gpr32common = LDRWui %stack.3.i, 0, debug-location !570 :: (dereferenceable load 4 from %ir.i); cg.c:383:21
  dead $wzr = SUBSWri %194:gpr32common, 2, 0, implicit-def $nzcv, debug-location !573; cg.c:383:21
  Bcc 1, %bb.66, implicit killed $nzcv, debug-location !573; cg.c:383:21
  B %bb.65, debug-location !573; cg.c:383:21

bb.65.if.then221:
; predecessors: %bb.64
  successors: %bb.66(0x80000000); %bb.66(100.00%)

  %196:fpr64 = LDRDui %stack.13.tmax, 0, debug-location !574 :: (dereferenceable load 8 from %ir.tmax); cg.c:384:25
  %197:fpr64 = LDRDui %stack.11.t, 0, debug-location !576 :: (dereferenceable load 8 from %ir.t); cg.c:384:32
  %198:fpr64 = FSUBDrr %196:fpr64, %197:fpr64, debug-location !577; cg.c:384:30
  STRDui %198:fpr64, %stack.11.t, 0, debug-location !578 :: (store 8 into %ir.t); cg.c:384:23
  %200:fpr64 = COPY %187:gpr64
  %201:fpr64 = FMULDrr %198:fpr64, %200:fpr64, debug-location !581; cg.c:386:30
  %202:fpr64 = FDIVDrr %201:fpr64, %196:fpr64, debug-location !583; cg.c:386:38
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !584; cg.c:385:21
  $x0 = COPY %203:gpr64, debug-location !584; cg.c:385:21
  $x1 = COPY %204:gpr64, debug-location !584; cg.c:385:21
  $d0 = COPY %198:fpr64, debug-location !584; cg.c:385:21
  $d1 = COPY %202:fpr64, debug-location !584; cg.c:385:21
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0, debug-location !584; cg.c:385:21
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !584; cg.c:385:21

bb.66.for.inc228:
; predecessors: %bb.64, %bb.65, %bb.63
  successors: %bb.61(0x80000000); %bb.61(100.00%)

  %208:gpr32common = LDRWui %stack.3.i, 0, debug-location !586 :: (dereferenceable load 4 from %ir.i); cg.c:375:34
  %209:gpr32common = nsw ADDWri %208:gpr32common, 1, 0, debug-location !586; cg.c:375:34
  STRWui %209:gpr32common, %stack.3.i, 0, debug-location !586 :: (store 4 into %ir.i); cg.c:375:34
  B %bb.61, debug-location !587; cg.c:375:9

bb.67.do.end235:
; predecessors: %bb.57, %bb.61

  $w0 = COPY $wzr, debug-location !590; cg.c:394:5
  RET_ReallyLR implicit $w0, debug-location !590; cg.c:394:5

# End machine code for function main.

********** MI Scheduling **********
main:%bb.0 entry
  From: %12:gpr64 = COPY $x1
    To: End RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %12:gpr64 = COPY $x1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(4): Data Latency=0 Reg=%12
  Single Issue       : false;
SU(1):   %11:gpr32 = COPY $w0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(3): Data Latency=0 Reg=%11
  Single Issue       : false;
SU(2):   STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   STRWui %11:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%11
  Single Issue       : false;
SU(4):   STRXui %12:gpr64, %stack.2.argv.addr, 0 :: (store 8 into %ir.argv.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%12
  Single Issue       : false;
SU(5):   STRWui $wzr, %stack.3.i, 0, debug-location !132 :: (store 4 into %ir.i); cg.c:117:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 5 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %12:gpr64 = COPY $x1
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 5 1 2 4 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(5) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(1) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(1) %11:gpr32 = COPY $w0
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 5 4 2 3 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) STRWui $wzr, %stack.3.i, 0, debug-location !132 :: (store 4 into %ir.i); cg.c:117:12
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 3 
Queue TopQ.P: 
Queue TopQ.A: 3 4 2 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) STRXui %12:gpr64, %stack.2.argv.addr, 0 :: (store 8 into %ir.argv.addr)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
Queue TopQ.P: 
Queue TopQ.A: 3 2 
  BotQ.A RemainingLatency 0 + 2c > CritPath 0
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) STRWui %11:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %12:gpr64 = COPY $x1
SU(1):   %11:gpr32 = COPY $w0
SU(2):   STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
SU(3):   STRWui %11:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
SU(4):   STRXui %12:gpr64, %stack.2.argv.addr, 0 :: (store 8 into %ir.argv.addr)
SU(5):   STRWui $wzr, %stack.3.i, 0, debug-location !132 :: (store 4 into %ir.i); cg.c:117:12

********** MI Scheduling **********
main:%bb.1 for.cond
  From: %14:gpr32common = LDRWui %stack.3.i, 0, debug-location !135 :: (dereferenceable load 4 from %ir.i); cg.c:117:17
    To: Bcc 12, %bb.3, implicit killed $nzcv, debug-location !138; cg.c:117:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %14:gpr32common = LDRWui %stack.3.i, 0, debug-location !135 :: (dereferenceable load 4 from %ir.i); cg.c:117:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%14
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %14:gpr32common, 2, 0, implicit-def $nzcv, debug-location !138; cg.c:117:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%14
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.3, implicit killed $nzcv, debug-location !138; cg.c:117:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %14:gpr32common, 2, 0, implicit-def $nzcv, debug-location !138; cg.c:117:5
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %14:gpr32common = LDRWui %stack.3.i, 0, debug-location !135 :: (dereferenceable load 4 from %ir.i); cg.c:117:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   %14:gpr32common = LDRWui %stack.3.i, 0, debug-location !135 :: (dereferenceable load 4 from %ir.i); cg.c:117:17
SU(1):   dead $wzr = SUBSWri %14:gpr32common, 2, 0, implicit-def $nzcv, debug-location !138; cg.c:117:5

********** MI Scheduling **********
main:%bb.2 for.body
  From: %384:gpr32common = LDRWui %stack.3.i, 0, debug-location !142 :: (dereferenceable load 4 from %ir.i); cg.c:117:30
    To: B %bb.1, debug-location !143; cg.c:117:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %384:gpr32common = LDRWui %stack.3.i, 0, debug-location !142 :: (dereferenceable load 4 from %ir.i); cg.c:117:30
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%384
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %385:gpr32common = nsw ADDWri %384:gpr32common, 1, 0, debug-location !142; cg.c:117:30
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%384
  Successors:
    SU(2): Data Latency=1 Reg=%385
  Single Issue       : false;
SU(2):   STRWui %385:gpr32common, %stack.3.i, 0, debug-location !142 :: (store 4 into %ir.i); cg.c:117:30
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%385
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.1, debug-location !143; cg.c:117:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %385:gpr32common, %stack.3.i, 0, debug-location !142 :: (store 4 into %ir.i); cg.c:117:30
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %385:gpr32common = nsw ADDWri %384:gpr32common, 1, 0, debug-location !142; cg.c:117:30
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %384:gpr32common = LDRWui %stack.3.i, 0, debug-location !142 :: (dereferenceable load 4 from %ir.i); cg.c:117:30
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %384:gpr32common = LDRWui %stack.3.i, 0, debug-location !142 :: (dereferenceable load 4 from %ir.i); cg.c:117:30
SU(1):   %385:gpr32common = nsw ADDWri %384:gpr32common, 1, 0, debug-location !142; cg.c:117:30
SU(2):   STRWui %385:gpr32common, %stack.3.i, 0, debug-location !142 :: (store 4 into %ir.i); cg.c:117:30

********** MI Scheduling **********
main:%bb.3 for.end
  From: %18:gpr64 = COPY $x0, debug-location !152; cg.c:122:15
    To: CBZX %18:gpr64, %bb.5, debug-location !156; cg.c:122:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %18:gpr64 = COPY $x0, debug-location !152; cg.c:122:15
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Data Latency=0 Reg=%18
    SU(1): Data Latency=0 Reg=%18
  Single Issue       : false;
SU(1):   STRXui %18:gpr64, %stack.20.fp, 0, debug-location !154 :: (store 8 into %ir.fp); cg.c:122:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%18
  Single Issue       : false;
SU(2):   %386:gpr64common = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
ExitSU:   CBZX %18:gpr64, %bb.5, debug-location !156; cg.c:122:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%18
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %18:gpr64 = COPY $x0, debug-location !152; cg.c:122:15
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %386:gpr64common = ADRP target-flags(aarch64-page) @timeron
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRXui %18:gpr64, %stack.20.fp, 0, debug-location !154 :: (store 8 into %ir.fp); cg.c:122:13
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %18:gpr64 = COPY $x0, debug-location !152; cg.c:122:15
SU(1):   STRXui %18:gpr64, %stack.20.fp, 0, debug-location !154 :: (store 8 into %ir.fp); cg.c:122:13
SU(2):   %386:gpr64common = ADRP target-flags(aarch64-page) @timeron

********** MI Scheduling **********
main:%bb.3 for.end
  From: %16:gpr64 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str, debug-location !152; cg.c:122:15
    To: BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0, debug-location !152; cg.c:122:15
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %16:gpr64 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str, debug-location !152; cg.c:122:15
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%16
  Single Issue       : false;
SU(1):   %17:gpr64 = MOVaddr target-flags(aarch64-page) @.str.1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1, debug-location !152; cg.c:122:15
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%17
  Single Issue       : false;
SU(2):   $x0 = COPY %16:gpr64, debug-location !152; cg.c:122:15
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%16
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $x1 = COPY %17:gpr64, debug-location !152; cg.c:122:15
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%17
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0, debug-location !152; cg.c:122:15
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $x1 = COPY %17:gpr64, debug-location !152; cg.c:122:15
  Ready @0c
  BotQ.A TopLatency SU(3) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $x0 = COPY %16:gpr64, debug-location !152; cg.c:122:15
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %17:gpr64 = MOVaddr target-flags(aarch64-page) @.str.1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1, debug-location !152; cg.c:122:15
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %16:gpr64 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str, debug-location !152; cg.c:122:15
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %16:gpr64 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str, debug-location !152; cg.c:122:15
SU(1):   %17:gpr64 = MOVaddr target-flags(aarch64-page) @.str.1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1, debug-location !152; cg.c:122:15
SU(2):   $x0 = COPY %16:gpr64, debug-location !152; cg.c:122:15
SU(3):   $x1 = COPY %17:gpr64, debug-location !152; cg.c:122:15

********** MI Scheduling **********
main:%bb.4 if.then
  From: %22:gpr32 = MOVi32imm 1
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !166; cg.c:127:9
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Cluster ld/st SU(7) - SU(5)
SU(0):   %22:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%22
  Single Issue       : false;
SU(1):   STRWui %22:gpr32, %386:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !157 :: (store 4 into @timeron); cg.c:123:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%22
  Single Issue       : false;
SU(2):   %23:gpr64 = MOVaddr target-flags(aarch64-page) @.str.2, target-flags(aarch64-pageoff, aarch64-nc) @.str.2, debug-location !160; cg.c:124:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%23
  Single Issue       : false;
SU(3):   STRXui %23:gpr64, %stack.19.t_names, 0, debug-location !160 :: (store 8 into %ir.arrayidx5, align 16); cg.c:124:25
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%23
  Single Issue       : false;
SU(4):   %24:gpr64 = MOVaddr target-flags(aarch64-page) @.str.3, target-flags(aarch64-pageoff, aarch64-nc) @.str.3, debug-location !162; cg.c:125:26
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%24
  Single Issue       : false;
SU(5):   STRXui %24:gpr64, %stack.19.t_names, 1, debug-location !162 :: (store 8 into %ir.arrayidx2); cg.c:125:26
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%24
    SU(7): Ord  Latency=0 Cluster
  Single Issue       : false;
SU(6):   %25:gpr64 = MOVaddr target-flags(aarch64-page) @.str.4, target-flags(aarch64-pageoff, aarch64-nc) @.str.4, debug-location !164; cg.c:126:30
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%25
  Single Issue       : false;
SU(7):   STRXui %25:gpr64, %stack.19.t_names, 2, debug-location !164 :: (store 8 into %ir.arrayidx3, align 16); cg.c:126:30
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%25
  Successors:
    SU(5): Ord  Latency=0 Cluster
  Single Issue       : false;
SU(8):   %26:gpr64 = LDRXui %stack.20.fp, 0, debug-location !165 :: (dereferenceable load 8 from %ir.fp); cg.c:127:16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !166; cg.c:127:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 8 
Queue BotQ.A: 7 5 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(5) WEAK                               
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot WEAK      
Scheduling SU(5) STRXui %24:gpr64, %stack.19.t_names, 1, debug-location !162 :: (store 8 into %ir.arrayidx2); cg.c:125:26
  Ready @0c
  BotQ.A TopLatency SU(5) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 8 
Queue BotQ.A: 7 1 3 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 
BotQ.A RemLatency SU(7) 1c
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(7) STRXui %25:gpr64, %stack.19.t_names, 2, debug-location !164 :: (store 8 into %ir.arrayidx3, align 16); cg.c:126:30
  Ready @1c
  BotQ.A TopLatency SU(7) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 8 
Queue BotQ.A: 4 1 3 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 
BotQ.A RemLatency SU(1) 1c
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %25:gpr64 = MOVaddr target-flags(aarch64-page) @.str.4, target-flags(aarch64-pageoff, aarch64-nc) @.str.4, debug-location !164; cg.c:126:30
  Ready @2c
  BotQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 1 3 8 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 8 
BotQ.A RemLatency SU(1) 1c
  BotQ.A RemainingLatency 1 + 3c > CritPath 3
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(1) BOT-PATH                  1 cycles 
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(3) STRXui %23:gpr64, %stack.19.t_names, 0, debug-location !160 :: (store 8 into %ir.arrayidx5, align 16); cg.c:124:25
  Ready @3c
  BotQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 1 8 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 8 
  BotQ.A RemainingLatency 0 + 4c > CritPath 3
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(1) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) STRWui %22:gpr32, %386:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !157 :: (store 4 into @timeron); cg.c:123:17
  Ready @4c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 2 8 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 8 
  BotQ.A RemainingLatency 0 + 5c > CritPath 3
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %26:gpr64 = LDRXui %stack.20.fp, 0, debug-location !165 :: (dereferenceable load 8 from %ir.fp); cg.c:127:16
  Ready @5c
  BotQ.A BotLatency SU(8) 3c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 
  BotQ.A RemainingLatency 0 + 6c > CritPath 3
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %24:gpr64 = MOVaddr target-flags(aarch64-page) @.str.3, target-flags(aarch64-pageoff, aarch64-nc) @.str.3, debug-location !162; cg.c:125:26
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  BotQ.A RemainingLatency 0 + 7c > CritPath 3
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %23:gpr64 = MOVaddr target-flags(aarch64-page) @.str.2, target-flags(aarch64-pageoff, aarch64-nc) @.str.2, debug-location !160; cg.c:124:25
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %22:gpr32 = MOVi32imm 1
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %22:gpr32 = MOVi32imm 1
SU(2):   %23:gpr64 = MOVaddr target-flags(aarch64-page) @.str.2, target-flags(aarch64-pageoff, aarch64-nc) @.str.2, debug-location !160; cg.c:124:25
SU(4):   %24:gpr64 = MOVaddr target-flags(aarch64-page) @.str.3, target-flags(aarch64-pageoff, aarch64-nc) @.str.3, debug-location !162; cg.c:125:26
SU(8):   %26:gpr64 = LDRXui %stack.20.fp, 0, debug-location !165 :: (dereferenceable load 8 from %ir.fp); cg.c:127:16
SU(1):   STRWui %22:gpr32, %386:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !157 :: (store 4 into @timeron); cg.c:123:17
SU(3):   STRXui %23:gpr64, %stack.19.t_names, 0, debug-location !160 :: (store 8 into %ir.arrayidx5, align 16); cg.c:124:25
SU(6):   %25:gpr64 = MOVaddr target-flags(aarch64-page) @.str.4, target-flags(aarch64-pageoff, aarch64-nc) @.str.4, debug-location !164; cg.c:126:30
SU(7):   STRXui %25:gpr64, %stack.19.t_names, 2, debug-location !164 :: (store 8 into %ir.arrayidx3, align 16); cg.c:126:30
SU(5):   STRXui %24:gpr64, %stack.19.t_names, 1, debug-location !162 :: (store 8 into %ir.arrayidx2); cg.c:125:26

********** MI Scheduling **********
main:%bb.6 if.end
  From: %62:gpr64 = MOVaddr target-flags(aarch64-page) @iv, target-flags(aarch64-pageoff, aarch64-nc) @iv, debug-location !200; cg.c:190:5
    To: BL @makea, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $w1, implicit killed $x2, implicit killed $x3, implicit killed $x4, implicit killed $w5, implicit killed $w6, implicit killed $w7, implicit-def $sp, debug-location !200; cg.c:190:5
 RegionInstrs: 20
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR32arg=8
tcGPR64=8
GPR32=10
Live In: %60 %59 %58 %57 %56 %61 
Live Out: %69 %68 
Live Thru: 
  LiveReg: %69
  UpdateRegP: SU(16) $x4 = COPY %69:gpr64common, debug-location !200; cg.c:190:5
              to GPR32arg -1    tcGPR64 -1    GPR32 -1
  LiveReg: %68
  UpdateRegP: SU(15) $x3 = COPY %68:gpr64common, debug-location !200; cg.c:190:5
              to GPR32arg -1    tcGPR64 -1    GPR32 -1
Top Pressure:
GPR32=6
Bottom Pressure:
GPR32arg=8
tcGPR64=8
GPR32=10
Excess PSets: 
Cluster ld/st SU(7) - SU(5)
Cluster ld/st SU(3) - SU(1)
SU(0):   %62:gpr64 = MOVaddr target-flags(aarch64-page) @iv, target-flags(aarch64-pageoff, aarch64-nc) @iv, debug-location !200; cg.c:190:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%62
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   STRXui %62:gpr64, $sp, 4, debug-location !200 :: (store 8 into stack + 32); cg.c:190:5
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%62
    SU(3): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(2):   %64:gpr64 = MOVaddr target-flags(aarch64-page) @aelt, target-flags(aarch64-pageoff, aarch64-nc) @aelt, debug-location !200; cg.c:190:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%64
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(3):   STRXui %64:gpr64, $sp, 3, debug-location !200 :: (store 8 into stack + 24); cg.c:190:5
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%64
  Successors:
    SU(1): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(4):   %65:gpr64 = MOVaddr target-flags(aarch64-page) @acol, target-flags(aarch64-pageoff, aarch64-nc) @acol, debug-location !200; cg.c:190:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%65
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(5):   STRXui %65:gpr64, $sp, 2, debug-location !200 :: (store 8 into stack + 16); cg.c:190:5
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%65
    SU(7): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(6):   %66:gpr64 = MOVaddr target-flags(aarch64-page) @arow, target-flags(aarch64-pageoff, aarch64-nc) @arow, debug-location !200; cg.c:190:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%66
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   STRXui %66:gpr64, $sp, 1, debug-location !200 :: (store 8 into stack + 8); cg.c:190:5
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%66
  Successors:
    SU(5): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(8):   STRWui %61:gpr32, $sp, 0, debug-location !200 :: (store 4 into stack); cg.c:190:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(9):   %67:gpr64 = MOVaddr target-flags(aarch64-page) @a, target-flags(aarch64-pageoff, aarch64-nc) @a, debug-location !200; cg.c:190:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(14): Data Latency=1 Reg=%67
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(10):   %68:gpr64common = MOVaddr target-flags(aarch64-page) @colidx, target-flags(aarch64-pageoff, aarch64-nc) @colidx, debug-location !200; cg.c:190:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(15): Data Latency=1 Reg=%68
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(11):   %69:gpr64common = MOVaddr target-flags(aarch64-page) @rowstr, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, debug-location !200; cg.c:190:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(16): Data Latency=1 Reg=%69
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(12):   $w0 = COPY %56:gpr32, debug-location !200; cg.c:190:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1
  Single Issue       : false;
SU(13):   $w1 = COPY %57:gpr32, debug-location !200; cg.c:190:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1
  Single Issue       : false;
SU(14):   $x2 = COPY %67:gpr64, debug-location !200; cg.c:190:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=%67
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1
  Single Issue       : false;
SU(15):   $x3 = COPY %68:gpr64common, debug-location !200; cg.c:190:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%68
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1    GPR32 -1
  Single Issue       : false;
SU(16):   $x4 = COPY %69:gpr64common, debug-location !200; cg.c:190:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(11): Data Latency=1 Reg=%69
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1    GPR32 -1
  Single Issue       : false;
SU(17):   $w5 = COPY %58:gpr32, debug-location !200; cg.c:190:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1
  Single Issue       : false;
SU(18):   $w6 = COPY %59:gpr32, debug-location !200; cg.c:190:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1
  Single Issue       : false;
SU(19):   $w7 = COPY %60:gpr32, debug-location !200; cg.c:190:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1
  Single Issue       : false;
ExitSU:   BL @makea, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $w1, implicit killed $x2, implicit killed $x3, implicit killed $x4, implicit killed $w5, implicit killed $w6, implicit killed $w7, implicit-def $sp, debug-location !200; cg.c:190:5
  # preds left       : 8
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(19): Ord  Latency=0 Artificial
    SU(18): Ord  Latency=0 Artificial
    SU(17): Ord  Latency=0 Artificial
    SU(16): Ord  Latency=0 Artificial
    SU(15): Ord  Latency=0 Artificial
    SU(14): Ord  Latency=0 Artificial
    SU(13): Ord  Latency=0 Artificial
    SU(12): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 7 5 3 1 19 18 17 16 15 14 13 12 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 9 10 11 12 13 17 18 19 
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(19) PHYS-REG                           
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(19) $w7 = COPY %60:gpr32, debug-location !200; cg.c:190:5
Bottom Pressure:
GPR32arg=7
tcGPR64=7
GPR32=10
  GPR32arg: 8 <= 8(+ 0 livethru)
  LiveReg: %60
  UpdateRegP: SU(19) $w7 = COPY %60:gpr32, debug-location !200; cg.c:190:5
              to GPR32arg -1    tcGPR64 -1    GPR32 -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 7 5 3 1 12 18 17 16 15 14 13 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 9 10 11 12 13 17 18 
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(12) PHYS-REG                           
  Cand SU(18) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(18) $w6 = COPY %59:gpr32, debug-location !200; cg.c:190:5
Bottom Pressure:
GPR32arg=6
tcGPR64=6
GPR32=10
  GPR32arg: 8 <= 8(+ 0 livethru)
  LiveReg: %59
  UpdateRegP: SU(18) $w6 = COPY %59:gpr32, debug-location !200; cg.c:190:5
              to GPR32arg -1    tcGPR64 -1    GPR32 -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 7 5 3 1 12 13 17 16 15 14 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 9 10 11 12 13 17 
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(12) PHYS-REG                           
  Cand SU(13) ORDER                              
  Cand SU(17) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(17) $w5 = COPY %58:gpr32, debug-location !200; cg.c:190:5
Bottom Pressure:
GPR32arg=5
tcGPR64=5
GPR32=10
  GPR32arg: 8 <= 8(+ 0 livethru)
  LiveReg: %58
  UpdateRegP: SU(17) $w5 = COPY %58:gpr32, debug-location !200; cg.c:190:5
              to GPR32arg -1    tcGPR64 -1    GPR32 -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 7 5 3 1 12 13 14 16 15 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 9 10 11 12 13 
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(12) PHYS-REG                           
  Cand SU(13) ORDER                              
  Cand SU(14) ORDER                              
  Cand SU(16) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(16) $x4 = COPY %69:gpr64common, debug-location !200; cg.c:190:5
Bottom Pressure:
GPR32arg=4
tcGPR64=4
GPR32=9
  GPR32arg: 8 <= 8(+ 0 livethru)
  Ready @0c
  BotQ.A TopLatency SU(16) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 11 
Queue BotQ.A: 8 7 5 3 1 12 13 14 15 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 9 10 11 12 13 
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(12) PHYS-REG                           
  Cand SU(13) ORDER                              
  Cand SU(14) ORDER                              
  Cand SU(15) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(15) $x3 = COPY %68:gpr64common, debug-location !200; cg.c:190:5
Bottom Pressure:
GPR32arg=3
tcGPR64=3
GPR32=8
  GPR32arg: 8 <= 8(+ 0 livethru)
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 11 10 
Queue BotQ.A: 8 7 5 3 1 12 13 14 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 9 10 11 12 13 
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(12) PHYS-REG                           
  Cand SU(13) ORDER                              
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(14) $x2 = COPY %67:gpr64, debug-location !200; cg.c:190:5
Bottom Pressure:
GPR32arg=2
tcGPR64=2
GPR32=8
  GPR32arg: 8 <= 8(+ 0 livethru)
  LiveReg: %67
  UpdateRegP: SU(14) $x2 = COPY %67:gpr64, debug-location !200; cg.c:190:5
              to GPR32arg -1    tcGPR64 -1    GPR32 -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 11 10 9 
Queue BotQ.A: 8 7 5 3 1 12 13 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 9 10 11 12 13 
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(12) PHYS-REG                           
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(13) $w1 = COPY %57:gpr32, debug-location !200; cg.c:190:5
Bottom Pressure:
GPR32arg=1
tcGPR64=1
GPR32=8
  GPR32arg: 8 <= 8(+ 0 livethru)
  LiveReg: %57
  UpdateRegP: SU(13) $w1 = COPY %57:gpr32, debug-location !200; cg.c:190:5
              to GPR32arg -1    tcGPR64 -1    GPR32 -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 11 10 9 
Queue BotQ.A: 8 7 5 3 1 12 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 9 10 11 12 
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(12) PHYS-REG                           
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(12) $w0 = COPY %56:gpr32, debug-location !200; cg.c:190:5
Bottom Pressure:
GPR32=8
  GPR32arg: 8 <= 8(+ 0 livethru)
  LiveReg: %56
  UpdateRegP: SU(12) $w0 = COPY %56:gpr32, debug-location !200; cg.c:190:5
              to GPR32arg -1    tcGPR64 -1    GPR32 -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 11 10 9 
Queue BotQ.A: 8 7 5 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 9 10 11 
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(8) STRWui %61:gpr32, $sp, 0, debug-location !200 :: (store 4 into stack); cg.c:190:5
Bottom Pressure:
GPR32=9
  LiveReg: %61
  UpdateRegP: SU(8) STRWui %61:gpr32, $sp, 0, debug-location !200 :: (store 4 into stack); cg.c:190:5
              to 
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 7 5 3 11 9 10 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 11 9 10 
BotQ.A RemLatency SU(1) 1c
  BotQ.A RemainingLatency 1 + 1c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(5) STRXui %65:gpr64, $sp, 2, debug-location !200 :: (store 8 into stack + 16); cg.c:190:5
Bottom Pressure:
GPR32=10
  LiveReg: %65
  UpdateRegP: SU(5) STRXui %65:gpr64, $sp, 2, debug-location !200 :: (store 8 into stack + 16); cg.c:190:5
              to 
  Ready @1c
  BotQ.A TopLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 7 10 3 11 9 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 11 9 10 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(7) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(7) STRXui %66:gpr64, $sp, 1, debug-location !200 :: (store 8 into stack + 8); cg.c:190:5
Bottom Pressure:
GPR32=11
  LiveReg: %66
  UpdateRegP: SU(7) STRXui %66:gpr64, $sp, 1, debug-location !200 :: (store 8 into stack + 8); cg.c:190:5
              to 
  Ready @2c
  BotQ.A TopLatency SU(7) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 10 3 11 9 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 11 9 10 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(4) REG-MAX                            
  Cand SU(10) ORDER                              
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(11) %69:gpr64common = MOVaddr target-flags(aarch64-page) @rowstr, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, debug-location !200; cg.c:190:5
Bottom Pressure:
GPR32=10
  Ready @3c
  BotQ.A BotLatency SU(11) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 10 3 6 9 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 10 9 
  BotQ.A RemainingLatency 0 + 4c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(1) STRXui %62:gpr64, $sp, 4, debug-location !200 :: (store 8 into stack + 32); cg.c:190:5
Bottom Pressure:
GPR32=11
  LiveReg: %62
  UpdateRegP: SU(1) STRXui %62:gpr64, $sp, 4, debug-location !200 :: (store 8 into stack + 32); cg.c:190:5
              to 
  Ready @4c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 4 10 3 6 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 10 9 
  BotQ.A RemainingLatency 0 + 5c > CritPath 1
Picking from Bot:
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(3) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(3) STRXui %64:gpr64, $sp, 3, debug-location !200 :: (store 8 into stack + 24); cg.c:190:5
Bottom Pressure:
GPR32=12
  LiveReg: %64
  UpdateRegP: SU(3) STRXui %64:gpr64, $sp, 3, debug-location !200 :: (store 8 into stack + 24); cg.c:190:5
              to 
  Ready @5c
  BotQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 4 10 0 6 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 10 9 
  BotQ.A RemainingLatency 0 + 6c > CritPath 1
Picking from Bot:
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(10) %68:gpr64common = MOVaddr target-flags(aarch64-page) @colidx, target-flags(aarch64-pageoff, aarch64-nc) @colidx, debug-location !200; cg.c:190:5
Bottom Pressure:
GPR32=11
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 4 2 0 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 9 
  BotQ.A RemainingLatency 0 + 7c > CritPath 1
Picking from Bot:
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(9) %67:gpr64 = MOVaddr target-flags(aarch64-page) @a, target-flags(aarch64-pageoff, aarch64-nc) @a, debug-location !200; cg.c:190:5
Bottom Pressure:
GPR32=10
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 4 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 
  BotQ.A RemainingLatency 0 + 8c > CritPath 1
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %66:gpr64 = MOVaddr target-flags(aarch64-page) @arow, target-flags(aarch64-pageoff, aarch64-nc) @arow, debug-location !200; cg.c:190:5
Bottom Pressure:
GPR32=9
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 
  BotQ.A RemainingLatency 0 + 9c > CritPath 1
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %65:gpr64 = MOVaddr target-flags(aarch64-page) @acol, target-flags(aarch64-pageoff, aarch64-nc) @acol, debug-location !200; cg.c:190:5
Bottom Pressure:
GPR32=8
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  BotQ.A RemainingLatency 0 + 10c > CritPath 1
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %64:gpr64 = MOVaddr target-flags(aarch64-page) @aelt, target-flags(aarch64-pageoff, aarch64-nc) @aelt, debug-location !200; cg.c:190:5
Bottom Pressure:
GPR32=7
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %62:gpr64 = MOVaddr target-flags(aarch64-page) @iv, target-flags(aarch64-pageoff, aarch64-nc) @iv, debug-location !200; cg.c:190:5
Bottom Pressure:
GPR32=6
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %62:gpr64 = MOVaddr target-flags(aarch64-page) @iv, target-flags(aarch64-pageoff, aarch64-nc) @iv, debug-location !200; cg.c:190:5
SU(2):   %64:gpr64 = MOVaddr target-flags(aarch64-page) @aelt, target-flags(aarch64-pageoff, aarch64-nc) @aelt, debug-location !200; cg.c:190:5
SU(4):   %65:gpr64 = MOVaddr target-flags(aarch64-page) @acol, target-flags(aarch64-pageoff, aarch64-nc) @acol, debug-location !200; cg.c:190:5
SU(6):   %66:gpr64 = MOVaddr target-flags(aarch64-page) @arow, target-flags(aarch64-pageoff, aarch64-nc) @arow, debug-location !200; cg.c:190:5
SU(9):   %67:gpr64 = MOVaddr target-flags(aarch64-page) @a, target-flags(aarch64-pageoff, aarch64-nc) @a, debug-location !200; cg.c:190:5
SU(10):   %68:gpr64common = MOVaddr target-flags(aarch64-page) @colidx, target-flags(aarch64-pageoff, aarch64-nc) @colidx, debug-location !200; cg.c:190:5
SU(3):   STRXui %64:gpr64, $sp, 3, debug-location !200 :: (store 8 into stack + 24); cg.c:190:5
SU(1):   STRXui %62:gpr64, $sp, 4, debug-location !200 :: (store 8 into stack + 32); cg.c:190:5
SU(11):   %69:gpr64common = MOVaddr target-flags(aarch64-page) @rowstr, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, debug-location !200; cg.c:190:5
SU(7):   STRXui %66:gpr64, $sp, 1, debug-location !200 :: (store 8 into stack + 8); cg.c:190:5
SU(5):   STRXui %65:gpr64, $sp, 2, debug-location !200 :: (store 8 into stack + 16); cg.c:190:5
SU(8):   STRWui %61:gpr32, $sp, 0, debug-location !200 :: (store 4 into stack); cg.c:190:5
SU(12):   $w0 = COPY %56:gpr32, debug-location !200; cg.c:190:5
SU(13):   $w1 = COPY %57:gpr32, debug-location !200; cg.c:190:5
SU(14):   $x2 = COPY %67:gpr64, debug-location !200; cg.c:190:5
SU(15):   $x3 = COPY %68:gpr64common, debug-location !200; cg.c:190:5
SU(16):   $x4 = COPY %69:gpr64common, debug-location !200; cg.c:190:5
SU(17):   $w5 = COPY %58:gpr32, debug-location !200; cg.c:190:5
SU(18):   $w6 = COPY %59:gpr32, debug-location !200; cg.c:190:5
SU(19):   $w7 = COPY %60:gpr32, debug-location !200; cg.c:190:5

********** MI Scheduling **********
main:%bb.6 if.end
  From: %55:fpr64 = COPY killed $d0, debug-location !192; cg.c:185:12
    To: ADJCALLSTACKDOWN 40, 0, implicit-def dead $sp, implicit $sp, debug-location !200; cg.c:190:5
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %55:fpr64 = COPY killed $d0, debug-location !192; cg.c:185:12
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%55
  Single Issue       : false;
SU(1):   STRDui %55:fpr64, %stack.7.zeta, 0, debug-location !193 :: (store 8 into %ir.zeta); cg.c:185:10
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%55
  Single Issue       : false;
SU(2):   %56:gpr32 = LDRWui %46:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !194 :: (dereferenceable load 4 from @naa); cg.c:190:11
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %57:gpr32 = LDRWui %47:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nzz, debug-location !195 :: (dereferenceable load 4 from @nzz); cg.c:190:16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(4):   %58:gpr32 = LDRWui %30:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !196 :: (dereferenceable load 4 from @firstrow); cg.c:190:40
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(5):   %59:gpr32 = LDRWui %32:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !197 :: (dereferenceable load 4 from @lastrow); cg.c:190:50
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(6):   %60:gpr32 = LDRWui %33:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !198 :: (dereferenceable load 4 from @firstcol); cg.c:190:59
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(7):   %61:gpr32 = LDRWui %34:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !199 :: (dereferenceable load 4 from @lastcol); cg.c:190:69
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 40, 0, implicit-def dead $sp, implicit $sp, debug-location !200; cg.c:190:5
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=3 Artificial
    SU(6): Ord  Latency=3 Artificial
    SU(5): Ord  Latency=3 Artificial
    SU(4): Ord  Latency=3 Artificial
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 6 5 4 3 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %55:fpr64, %stack.7.zeta, 0, debug-location !193 :: (store 8 into %ir.zeta); cg.c:185:10
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 6 5 4 3 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %55:fpr64 = COPY killed $d0, debug-location !192; cg.c:185:12
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 2 BotQ.A
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 7 2 3 4 5 6 
Queue TopQ.P: 
Queue TopQ.A: 7 2 3 4 5 6 
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(7) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %61:gpr32 = LDRWui %34:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !199 :: (dereferenceable load 4 from @lastcol); cg.c:190:69
  Ready @3c
  BotQ.A BotLatency SU(7) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 2
  Executed: 4c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 2 3 4 5 
Queue TopQ.P: 
Queue TopQ.A: 6 2 3 4 5 
  BotQ.A RemainingLatency 0 + 4c > CritPath 3
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %60:gpr32 = LDRWui %33:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !198 :: (dereferenceable load 4 from @firstcol); cg.c:190:59
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 2 3 4 
Queue TopQ.P: 
Queue TopQ.A: 5 2 3 4 
  BotQ.A RemainingLatency 0 + 5c > CritPath 3
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %59:gpr32 = LDRWui %32:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !197 :: (dereferenceable load 4 from @lastrow); cg.c:190:50
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 2 3 
Queue TopQ.P: 
Queue TopQ.A: 4 2 3 
  BotQ.A RemainingLatency 0 + 6c > CritPath 3
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %58:gpr32 = LDRWui %30:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !196 :: (dereferenceable load 4 from @firstrow); cg.c:190:40
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 3 2 
  BotQ.A RemainingLatency 0 + 7c > CritPath 3
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %57:gpr32 = LDRWui %47:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nzz, debug-location !195 :: (dereferenceable load 4 from @nzz); cg.c:190:16
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %56:gpr32 = LDRWui %46:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !194 :: (dereferenceable load 4 from @naa); cg.c:190:11
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(2):   %56:gpr32 = LDRWui %46:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !194 :: (dereferenceable load 4 from @naa); cg.c:190:11
SU(3):   %57:gpr32 = LDRWui %47:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nzz, debug-location !195 :: (dereferenceable load 4 from @nzz); cg.c:190:16
SU(4):   %58:gpr32 = LDRWui %30:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !196 :: (dereferenceable load 4 from @firstrow); cg.c:190:40
SU(5):   %59:gpr32 = LDRWui %32:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !197 :: (dereferenceable load 4 from @lastrow); cg.c:190:50
SU(6):   %60:gpr32 = LDRWui %33:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !198 :: (dereferenceable load 4 from @firstcol); cg.c:190:59
SU(7):   %61:gpr32 = LDRWui %34:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !199 :: (dereferenceable load 4 from @lastcol); cg.c:190:69
SU(0):   %55:fpr64 = COPY $d0, debug-location !192; cg.c:185:12
SU(1):   STRDui %55:fpr64, %stack.7.zeta, 0, debug-location !193 :: (store 8 into %ir.zeta); cg.c:185:10

********** MI Scheduling **********
main:%bb.6 if.end
  From: %53:gpr64common = ADRP target-flags(aarch64-page) %const.0
    To: BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !192; cg.c:185:12
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %53:gpr64common = ADRP target-flags(aarch64-page) %const.0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=1 Reg=%53
  Single Issue       : false;
SU(1):   %54:fpr64 = LDRDui %53:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Data Latency=1 Reg=%53
  Successors:
    SU(3): Data Latency=4 Reg=%54
  Single Issue       : false;
SU(2):   $x0 = COPY %49:gpr64common, debug-location !192; cg.c:185:12
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $d0 = COPY %54:fpr64, debug-location !192; cg.c:185:12
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%54
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !192; cg.c:185:12
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $d0 = COPY %54:fpr64, debug-location !192; cg.c:185:12
  Ready @0c
  BotQ.A TopLatency SU(3) 5c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $x0 = COPY %49:gpr64common, debug-location !192; cg.c:185:12
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %54:fpr64 = LDRDui %53:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  Ready @4c
  BotQ.A BotLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 1
  Executed: 5c
  Critical: 1c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %53:gpr64common = ADRP target-flags(aarch64-page) %const.0
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %53:gpr64common = ADRP target-flags(aarch64-page) %const.0
SU(1):   %54:fpr64 = LDRDui %53:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
SU(2):   $x0 = COPY %49:gpr64common, debug-location !192; cg.c:185:12
SU(3):   $d0 = COPY %54:fpr64, debug-location !192; cg.c:185:12

********** MI Scheduling **********
main:%bb.6 if.end
  From: %46:gpr64common = ADRP target-flags(aarch64-page) @naa, debug-location !187; cg.c:177:9
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !192; cg.c:185:12
 RegionInstrs: 11
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %46:gpr64common = ADRP target-flags(aarch64-page) @naa, debug-location !187; cg.c:177:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%46
  Single Issue       : false;
SU(1):   STRWui %0:gpr32common, %46:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !187 :: (store 4 into @naa); cg.c:177:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%46
  Single Issue       : false;
SU(2):   %47:gpr64common = ADRP target-flags(aarch64-page) @nzz, debug-location !188; cg.c:178:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(4): Data Latency=1 Reg=%47
  Single Issue       : false;
SU(3):   %48:gpr32 = MOVi32imm 14700000
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(4): Data Latency=1 Reg=%48
  Single Issue       : false;
SU(4):   STRWui %48:gpr32, %47:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nzz, debug-location !188 :: (store 4 into @nzz); cg.c:178:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%48
    SU(2): Data Latency=1 Reg=%47
  Single Issue       : false;
SU(5):   %49:gpr64common = MOVaddr target-flags(aarch64-page) @tran, target-flags(aarch64-pageoff, aarch64-nc) @tran, debug-location !189; cg.c:183:10
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%49
  Single Issue       : false;
SU(6):   %50:gpr64 = MOVi64imm 4734050326586327040
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%50
  Single Issue       : false;
SU(7):   STRXui %50:gpr64, %49:gpr64common, 0, debug-location !189 :: (store 8 into @tran); cg.c:183:10
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%50
    SU(5): Data Latency=1 Reg=%49
  Single Issue       : false;
SU(8):   %51:gpr64common = ADRP target-flags(aarch64-page) @amult, debug-location !190; cg.c:184:11
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(10): Data Latency=1 Reg=%51
  Single Issue       : false;
SU(9):   %52:gpr64 = MOVi64imm 4742906807993761792
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(10): Data Latency=1 Reg=%52
  Single Issue       : false;
SU(10):   STRXui %52:gpr64, %51:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !190 :: (store 8 into @amult); cg.c:184:11
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=%52
    SU(8): Data Latency=1 Reg=%51
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !192; cg.c:185:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 7 4 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 6 8 9 
Picking from Bot:
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) STRXui %52:gpr64, %51:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !190 :: (store 8 into @amult); cg.c:184:11
  Ready @0c
  BotQ.A TopLatency SU(10) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 7 4 9 8 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 6 8 9 
BotQ.A RemLatency SU(1) 1c
  BotQ.A RemainingLatency 1 + 1c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(7) STRXui %50:gpr64, %49:gpr64common, 0, debug-location !189 :: (store 8 into @tran); cg.c:183:10
  Ready @1c
  BotQ.A TopLatency SU(7) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 8 4 9 6 5 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 6 8 9 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) STRWui %48:gpr32, %47:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nzz, debug-location !188 :: (store 4 into @nzz); cg.c:178:9
  Ready @2c
  BotQ.A TopLatency SU(4) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 8 5 9 6 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 6 8 9 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) STRWui %0:gpr32common, %46:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !187 :: (store 4 into @naa); cg.c:177:9
  Ready @3c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 8 5 9 6 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 6 8 9 
  BotQ.A RemainingLatency 0 + 4c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(9) %52:gpr64 = MOVi64imm 4742906807993761792
  Ready @4c
  BotQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 8 5 0 6 3 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 6 8 
  BotQ.A RemainingLatency 0 + 5c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %51:gpr64common = ADRP target-flags(aarch64-page) @amult, debug-location !190; cg.c:184:11
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 5 0 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 6 
  BotQ.A RemainingLatency 0 + 6c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %50:gpr64 = MOVi64imm 4734050326586327040
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 5 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 
  BotQ.A RemainingLatency 0 + 7c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %49:gpr64common = MOVaddr target-flags(aarch64-page) @tran, target-flags(aarch64-pageoff, aarch64-nc) @tran, debug-location !189; cg.c:183:10
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 
  BotQ.A RemainingLatency 0 + 8c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %48:gpr32 = MOVi32imm 14700000
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  BotQ.A RemainingLatency 0 + 9c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %47:gpr64common = ADRP target-flags(aarch64-page) @nzz, debug-location !188; cg.c:178:9
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %46:gpr64common = ADRP target-flags(aarch64-page) @naa, debug-location !187; cg.c:177:9
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %46:gpr64common = ADRP target-flags(aarch64-page) @naa, debug-location !187; cg.c:177:9
SU(2):   %47:gpr64common = ADRP target-flags(aarch64-page) @nzz, debug-location !188; cg.c:178:9
SU(3):   %48:gpr32 = MOVi32imm 14700000
SU(5):   %49:gpr64common = MOVaddr target-flags(aarch64-page) @tran, target-flags(aarch64-pageoff, aarch64-nc) @tran, debug-location !189; cg.c:183:10
SU(6):   %50:gpr64 = MOVi64imm 4734050326586327040
SU(8):   %51:gpr64common = ADRP target-flags(aarch64-page) @amult, debug-location !190; cg.c:184:11
SU(9):   %52:gpr64 = MOVi64imm 4742906807993761792
SU(1):   STRWui %0:gpr32common, %46:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !187 :: (store 4 into @naa); cg.c:177:9
SU(4):   STRWui %48:gpr32, %47:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nzz, debug-location !188 :: (store 4 into @nzz); cg.c:178:9
SU(7):   STRXui %50:gpr64, %49:gpr64common, 0, debug-location !189 :: (store 8 into @tran); cg.c:183:10
SU(10):   STRXui %52:gpr64, %51:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !190 :: (store 8 into @amult); cg.c:184:11

********** MI Scheduling **********
main:%bb.6 if.end
  From: %44:gpr64 = MOVaddr target-flags(aarch64-page) @.str.8, target-flags(aarch64-pageoff, aarch64-nc) @.str.8, debug-location !186; cg.c:175:5
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !186; cg.c:175:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %44:gpr64 = MOVaddr target-flags(aarch64-page) @.str.8, target-flags(aarch64-pageoff, aarch64-nc) @.str.8, debug-location !186; cg.c:175:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%44
  Single Issue       : false;
SU(1):   $x0 = COPY %44:gpr64, debug-location !186; cg.c:175:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%44
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !186; cg.c:175:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %44:gpr64, debug-location !186; cg.c:175:5
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %44:gpr64 = MOVaddr target-flags(aarch64-page) @.str.8, target-flags(aarch64-pageoff, aarch64-nc) @.str.8, debug-location !186; cg.c:175:5
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %44:gpr64 = MOVaddr target-flags(aarch64-page) @.str.8, target-flags(aarch64-pageoff, aarch64-nc) @.str.8, debug-location !186; cg.c:175:5
SU(1):   $x0 = COPY %44:gpr64, debug-location !186; cg.c:175:5

********** MI Scheduling **********
main:%bb.6 if.end
  From: %41:gpr64 = MOVaddr target-flags(aarch64-page) @.str.7, target-flags(aarch64-pageoff, aarch64-nc) @.str.7, debug-location !185; cg.c:174:5
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !185; cg.c:174:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %41:gpr64 = MOVaddr target-flags(aarch64-page) @.str.7, target-flags(aarch64-pageoff, aarch64-nc) @.str.7, debug-location !185; cg.c:174:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%41
  Single Issue       : false;
SU(1):   $x0 = COPY %41:gpr64, debug-location !185; cg.c:174:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%41
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $w1 = MOVi32imm 75, debug-location !185; cg.c:174:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !185; cg.c:174:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %41:gpr64, debug-location !185; cg.c:174:5
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $w1 = MOVi32imm 75, debug-location !185; cg.c:174:5
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %41:gpr64 = MOVaddr target-flags(aarch64-page) @.str.7, target-flags(aarch64-pageoff, aarch64-nc) @.str.7, debug-location !185; cg.c:174:5
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %41:gpr64 = MOVaddr target-flags(aarch64-page) @.str.7, target-flags(aarch64-pageoff, aarch64-nc) @.str.7, debug-location !185; cg.c:174:5
SU(2):   $w1 = MOVi32imm 75, debug-location !185; cg.c:174:5
SU(1):   $x0 = COPY %41:gpr64, debug-location !185; cg.c:174:5

********** MI Scheduling **********
main:%bb.6 if.end
  From: %39:gpr64 = MOVaddr target-flags(aarch64-page) @.str.6, target-flags(aarch64-pageoff, aarch64-nc) @.str.6, debug-location !184; cg.c:173:5
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !184; cg.c:173:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %39:gpr64 = MOVaddr target-flags(aarch64-page) @.str.6, target-flags(aarch64-pageoff, aarch64-nc) @.str.6, debug-location !184; cg.c:173:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%39
  Single Issue       : false;
SU(1):   $x0 = COPY %39:gpr64, debug-location !184; cg.c:173:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%39
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $w1 = MOVi32imm 75000, debug-location !184; cg.c:173:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !184; cg.c:173:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %39:gpr64, debug-location !184; cg.c:173:5
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $w1 = MOVi32imm 75000, debug-location !184; cg.c:173:5
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %39:gpr64 = MOVaddr target-flags(aarch64-page) @.str.6, target-flags(aarch64-pageoff, aarch64-nc) @.str.6, debug-location !184; cg.c:173:5
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %39:gpr64 = MOVaddr target-flags(aarch64-page) @.str.6, target-flags(aarch64-pageoff, aarch64-nc) @.str.6, debug-location !184; cg.c:173:5
SU(2):   $w1 = MOVi32imm 75000, debug-location !184; cg.c:173:5
SU(1):   $x0 = COPY %39:gpr64, debug-location !184; cg.c:173:5

********** MI Scheduling **********
main:%bb.6 if.end
  From: %37:gpr64 = MOVaddr target-flags(aarch64-page) @.str.5, target-flags(aarch64-pageoff, aarch64-nc) @.str.5, debug-location !183; cg.c:172:5
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !183; cg.c:172:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %37:gpr64 = MOVaddr target-flags(aarch64-page) @.str.5, target-flags(aarch64-pageoff, aarch64-nc) @.str.5, debug-location !183; cg.c:172:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%37
  Single Issue       : false;
SU(1):   $x0 = COPY %37:gpr64, debug-location !183; cg.c:172:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%37
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !183; cg.c:172:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %37:gpr64, debug-location !183; cg.c:172:5
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %37:gpr64 = MOVaddr target-flags(aarch64-page) @.str.5, target-flags(aarch64-pageoff, aarch64-nc) @.str.5, debug-location !183; cg.c:172:5
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %37:gpr64 = MOVaddr target-flags(aarch64-page) @.str.5, target-flags(aarch64-pageoff, aarch64-nc) @.str.5, debug-location !183; cg.c:172:5
SU(1):   $x0 = COPY %37:gpr64, debug-location !183; cg.c:172:5

********** MI Scheduling **********
main:%bb.6 if.end
  From: %30:gpr64common = ADRP target-flags(aarch64-page) @firstrow, debug-location !172; cg.c:135:14
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !183; cg.c:172:5
 RegionInstrs: 13
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %30:gpr64common = ADRP target-flags(aarch64-page) @firstrow, debug-location !172; cg.c:135:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%30
  Single Issue       : false;
SU(1):   STRWui $wzr, %30:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !172 :: (store 4 into @firstrow); cg.c:135:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%30
  Single Issue       : false;
SU(2):   %31:gpr32common = SUBWri %0:gpr32common, 1, 0, debug-location !173; cg.c:136:13
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(8): Data Latency=1 Reg=%31
    SU(4): Data Latency=1 Reg=%31
  Single Issue       : false;
SU(3):   %32:gpr64common = ADRP target-flags(aarch64-page) @lastrow, debug-location !173; cg.c:136:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(4): Data Latency=1 Reg=%32
  Single Issue       : false;
SU(4):   STRWui %31:gpr32common, %32:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !173 :: (store 4 into @lastrow); cg.c:136:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%32
    SU(2): Data Latency=1 Reg=%31
  Single Issue       : false;
SU(5):   %33:gpr64common = ADRP target-flags(aarch64-page) @firstcol, debug-location !174; cg.c:137:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(6): Data Latency=1 Reg=%33
  Single Issue       : false;
SU(6):   STRWui $wzr, %33:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !174 :: (store 4 into @firstcol); cg.c:137:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%33
  Single Issue       : false;
SU(7):   %34:gpr64common = ADRP target-flags(aarch64-page) @lastcol, debug-location !175; cg.c:138:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(8): Data Latency=1 Reg=%34
  Single Issue       : false;
SU(8):   STRWui %31:gpr32common, %34:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !175 :: (store 4 into @lastcol); cg.c:138:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=%34
    SU(2): Data Latency=1 Reg=%31
  Single Issue       : false;
SU(9):   %35:gpr32 = MOVi32imm 66
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(10): Data Latency=1 Reg=%35
  Single Issue       : false;
SU(10):   STRBBui %35:gpr32, %stack.14.Class, 0, debug-location !176 :: (store 1 into %ir.Class, align 4); cg.c:153:15
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=%35
  Single Issue       : false;
SU(11):   %36:gpr64 = MOVi64imm 4627086287187887514
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(12): Data Latency=1 Reg=%36
  Single Issue       : false;
SU(12):   STRXui %36:gpr64, %stack.16.zeta_verify_value, 0, debug-location !182 :: (store 8 into %ir.zeta_verify_value); cg.c:154:27
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(11): Data Latency=1 Reg=%36
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !183; cg.c:172:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 10 8 6 4 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 7 9 11 
Picking from Bot:
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) STRXui %36:gpr64, %stack.16.zeta_verify_value, 0, debug-location !182 :: (store 8 into %ir.zeta_verify_value); cg.c:154:27
  Ready @0c
  BotQ.A TopLatency SU(12) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 10 8 6 4 11 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 7 9 11 
BotQ.A RemLatency SU(1) 1c
  BotQ.A RemainingLatency 1 + 1c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(10) STRBBui %35:gpr32, %stack.14.Class, 0, debug-location !176 :: (store 1 into %ir.Class, align 4); cg.c:153:15
  Ready @1c
  BotQ.A TopLatency SU(10) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 11 8 6 4 9 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 7 9 11 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(8) STRWui %31:gpr32common, %34:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !175 :: (store 4 into @lastcol); cg.c:138:13
  Ready @2c
  BotQ.A TopLatency SU(8) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 11 9 6 4 7 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 7 9 11 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(6) STRWui $wzr, %33:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !174 :: (store 4 into @firstcol); cg.c:137:14
  Ready @3c
  BotQ.A TopLatency SU(6) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 11 9 7 4 5 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 7 9 11 
  BotQ.A RemainingLatency 0 + 4c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) STRWui %31:gpr32common, %32:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !173 :: (store 4 into @lastrow); cg.c:136:13
  Ready @4c
  BotQ.A TopLatency SU(4) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 11 9 7 5 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 7 9 11 
  BotQ.A RemainingLatency 0 + 5c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) STRWui $wzr, %30:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !172 :: (store 4 into @firstrow); cg.c:135:14
  Ready @5c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 11 9 7 5 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 7 9 11 
  BotQ.A RemainingLatency 0 + 6c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(11) %36:gpr64 = MOVi64imm 4627086287187887514
  Ready @6c
  BotQ.A BotLatency SU(11) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 9 7 5 3 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 7 9 
  BotQ.A RemainingLatency 0 + 7c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(9) %35:gpr32 = MOVi32imm 66
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 3 7 5 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 7 
  BotQ.A RemainingLatency 0 + 8c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %34:gpr64common = ADRP target-flags(aarch64-page) @lastcol, debug-location !175; cg.c:138:13
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 3 5 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 
  BotQ.A RemainingLatency 0 + 9c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %33:gpr64common = ADRP target-flags(aarch64-page) @firstcol, debug-location !174; cg.c:137:14
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 3 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 
  BotQ.A RemainingLatency 0 + 10c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %32:gpr64common = ADRP target-flags(aarch64-page) @lastrow, debug-location !173; cg.c:136:13
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  BotQ.A RemainingLatency 0 + 11c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %31:gpr32common = SUBWri %0:gpr32common, 1, 0, debug-location !173; cg.c:136:13
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %30:gpr64common = ADRP target-flags(aarch64-page) @firstrow, debug-location !172; cg.c:135:14
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %30:gpr64common = ADRP target-flags(aarch64-page) @firstrow, debug-location !172; cg.c:135:14
SU(2):   %31:gpr32common = SUBWri %0:gpr32common, 1, 0, debug-location !173; cg.c:136:13
SU(3):   %32:gpr64common = ADRP target-flags(aarch64-page) @lastrow, debug-location !173; cg.c:136:13
SU(5):   %33:gpr64common = ADRP target-flags(aarch64-page) @firstcol, debug-location !174; cg.c:137:14
SU(7):   %34:gpr64common = ADRP target-flags(aarch64-page) @lastcol, debug-location !175; cg.c:138:13
SU(9):   %35:gpr32 = MOVi32imm 66
SU(11):   %36:gpr64 = MOVi64imm 4627086287187887514
SU(1):   STRWui $wzr, %30:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !172 :: (store 4 into @firstrow); cg.c:135:14
SU(4):   STRWui %31:gpr32common, %32:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !173 :: (store 4 into @lastrow); cg.c:136:13
SU(6):   STRWui $wzr, %33:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !174 :: (store 4 into @firstcol); cg.c:137:14
SU(8):   STRWui %31:gpr32common, %34:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !175 :: (store 4 into @lastcol); cg.c:138:13
SU(10):   STRBBui %35:gpr32, %stack.14.Class, 0, debug-location !176 :: (store 1 into %ir.Class, align 4); cg.c:153:15
SU(12):   STRXui %36:gpr64, %stack.16.zeta_verify_value, 0, debug-location !182 :: (store 8 into %ir.zeta_verify_value); cg.c:154:27

********** MI Scheduling **********
main:%bb.7 for.cond10
  From: %70:gpr32 = LDRWui %stack.4.j, 0, debug-location !204 :: (dereferenceable load 4 from %ir.j); cg.c:202:17
    To: Bcc 10, %bb.12, implicit killed $nzcv, debug-location !211; cg.c:202:5
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %70:gpr32 = LDRWui %stack.4.j, 0, debug-location !204 :: (dereferenceable load 4 from %ir.j); cg.c:202:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=%70
  Single Issue       : false;
SU(1):   %72:gpr32 = LDRWui %32:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !206 :: (dereferenceable load 4 from @lastrow); cg.c:202:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%72
  Single Issue       : false;
SU(2):   %74:gpr32 = LDRWui %30:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !207 :: (dereferenceable load 4 from @firstrow); cg.c:202:31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%74
  Single Issue       : false;
SU(3):   %75:gpr32common = nsw SUBWrr %72:gpr32, %74:gpr32, debug-location !208; cg.c:202:29
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(2): Data Latency=4 Reg=%74
    SU(1): Data Latency=4 Reg=%72
  Successors:
    SU(4): Data Latency=1 Reg=%75
  Single Issue       : false;
SU(4):   %76:gpr32common = nsw ADDWri %75:gpr32common, 1, 0, debug-location !209; cg.c:202:40
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1 Reg=%75
  Successors:
    SU(5): Data Latency=1 Reg=%76
  Single Issue       : false;
SU(5):   dead $wzr = SUBSWrr %70:gpr32, %76:gpr32common, implicit-def $nzcv, debug-location !211; cg.c:202:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%76
    SU(0): Data Latency=4 Reg=%70
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.12, implicit killed $nzcv, debug-location !211; cg.c:202:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) dead $wzr = SUBSWrr %70:gpr32, %76:gpr32common, implicit-def $nzcv, debug-location !211; cg.c:202:5
  Ready @1c
  BotQ.A TopLatency SU(5) 6c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %76:gpr32common = nsw ADDWri %75:gpr32common, 1, 0, debug-location !209; cg.c:202:40
  Ready @2c
  BotQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %75:gpr32common = nsw SUBWrr %72:gpr32, %74:gpr32, debug-location !208; cg.c:202:29
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 1 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %70:gpr32 = LDRWui %stack.4.j, 0, debug-location !204 :: (dereferenceable load 4 from %ir.j); cg.c:202:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %74:gpr32 = LDRWui %30:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !207 :: (dereferenceable load 4 from @firstrow); cg.c:202:31
  Ready @7c
  BotQ.A BotLatency SU(2) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %72:gpr32 = LDRWui %32:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !206 :: (dereferenceable load 4 from @lastrow); cg.c:202:21
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(1):   %72:gpr32 = LDRWui %32:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !206 :: (dereferenceable load 4 from @lastrow); cg.c:202:21
SU(2):   %74:gpr32 = LDRWui %30:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !207 :: (dereferenceable load 4 from @firstrow); cg.c:202:31
SU(0):   %70:gpr32 = LDRWui %stack.4.j, 0, debug-location !204 :: (dereferenceable load 4 from %ir.j); cg.c:202:17
SU(3):   %75:gpr32common = nsw SUBWrr %72:gpr32, %74:gpr32, debug-location !208; cg.c:202:29
SU(4):   %76:gpr32common = nsw ADDWri %75:gpr32common, 1, 0, debug-location !209; cg.c:202:40
SU(5):   dead $wzr = SUBSWrr %70:gpr32, %76:gpr32common, implicit-def $nzcv, debug-location !211; cg.c:202:5

********** MI Scheduling **********
main:%bb.8 for.body12
  From: %363:gpr64 = LDRSWui %stack.4.j, 0, debug-location !212 :: (dereferenceable load 4 from %ir.j); cg.c:203:25
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %363:gpr64 = LDRSWui %stack.4.j, 0, debug-location !212 :: (dereferenceable load 4 from %ir.j); cg.c:203:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%363
  Single Issue       : false;
SU(1):   %365:gpr32 = LDRWroX %69:gpr64common, %363:gpr64, 0, 1, debug-location !215 :: (load 4 from %ir.arrayidx13); cg.c:203:18
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%363
  Successors:
    SU(2): Data Latency=4 Reg=%365
  Single Issue       : false;
SU(2):   STRWui %365:gpr32, %stack.5.k, 0, debug-location !216 :: (store 4 into %ir.k); cg.c:203:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%365
  Single Issue       : false;
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %365:gpr32, %stack.5.k, 0, debug-location !216 :: (store 4 into %ir.k); cg.c:203:16
  Ready @0c
  BotQ.A TopLatency SU(2) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %365:gpr32 = LDRWroX %69:gpr64common, %363:gpr64, 0, 1, debug-location !215 :: (load 4 from %ir.arrayidx13); cg.c:203:18
  Ready @4c
  BotQ.A BotLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 8 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %363:gpr64 = LDRSWui %stack.4.j, 0, debug-location !212 :: (dereferenceable load 4 from %ir.j); cg.c:203:25
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 3
  Executed: 9c
  Critical: 3c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   %363:gpr64 = LDRSWui %stack.4.j, 0, debug-location !212 :: (dereferenceable load 4 from %ir.j); cg.c:203:25
SU(1):   %365:gpr32 = LDRWroX %69:gpr64common, %363:gpr64, 0, 1, debug-location !215 :: (load 4 from %ir.arrayidx13); cg.c:203:18
SU(2):   STRWui %365:gpr32, %stack.5.k, 0, debug-location !216 :: (store 4 into %ir.k); cg.c:203:16

********** MI Scheduling **********
main:%bb.9 for.cond14
  From: %366:gpr32 = LDRWui %stack.5.k, 0, debug-location !218 :: (dereferenceable load 4 from %ir.k); cg.c:203:29
    To: Bcc 10, %bb.11, implicit killed $nzcv, debug-location !224; cg.c:203:9
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %366:gpr32 = LDRWui %stack.5.k, 0, debug-location !218 :: (dereferenceable load 4 from %ir.k); cg.c:203:29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=%366
  Single Issue       : false;
SU(1):   %367:gpr64 = LDRSWui %stack.4.j, 0, debug-location !220 :: (dereferenceable load 4 from %ir.j); cg.c:203:40
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(2): Data Latency=4 Reg=%367
  Single Issue       : false;
SU(2):   %369:gpr64common = ADDXrs %69:gpr64common, %367:gpr64, 2, debug-location !222; cg.c:203:33
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(1): Data Latency=4 Reg=%367
  Successors:
    SU(3): Data Latency=1 Reg=%369
  Single Issue       : false;
SU(3):   %370:gpr32 = LDRWui %369:gpr64common, 1, debug-location !222 :: (load 4 from %ir.arrayidx17); cg.c:203:33
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(2): Data Latency=1 Reg=%369
  Successors:
    SU(4): Data Latency=4 Reg=%370
  Single Issue       : false;
SU(4):   dead $wzr = SUBSWrr %366:gpr32, %370:gpr32, implicit-def $nzcv, debug-location !224; cg.c:203:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%370
    SU(0): Data Latency=4 Reg=%366
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.11, implicit killed $nzcv, debug-location !224; cg.c:203:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) dead $wzr = SUBSWrr %366:gpr32, %370:gpr32, implicit-def $nzcv, debug-location !224; cg.c:203:9
  Ready @1c
  BotQ.A TopLatency SU(4) 9c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(3) 5c
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %370:gpr32 = LDRWui %369:gpr64common, 1, debug-location !222 :: (load 4 from %ir.arrayidx17); cg.c:203:33
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(2) 4c
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %369:gpr64common = ADDXrs %69:gpr64common, %367:gpr64, 2, debug-location !222; cg.c:203:33
  Ready @6c
  BotQ.A BotLatency SU(2) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %366:gpr32 = LDRWui %stack.5.k, 0, debug-location !218 :: (dereferenceable load 4 from %ir.k); cg.c:203:29
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 4
  Executed: 8c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %367:gpr64 = LDRSWui %stack.4.j, 0, debug-location !220 :: (dereferenceable load 4 from %ir.j); cg.c:203:40
  Ready @10c
  BotQ.A BotLatency SU(1) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(1):   %367:gpr64 = LDRSWui %stack.4.j, 0, debug-location !220 :: (dereferenceable load 4 from %ir.j); cg.c:203:40
SU(0):   %366:gpr32 = LDRWui %stack.5.k, 0, debug-location !218 :: (dereferenceable load 4 from %ir.k); cg.c:203:29
SU(2):   %369:gpr64common = ADDXrs %69:gpr64common, %367:gpr64, 2, debug-location !222; cg.c:203:33
SU(3):   %370:gpr32 = LDRWui %369:gpr64common, 1, debug-location !222 :: (load 4 from %ir.arrayidx17); cg.c:203:33
SU(4):   dead $wzr = SUBSWrr %366:gpr32, %370:gpr32, implicit-def $nzcv, debug-location !224; cg.c:203:9

********** MI Scheduling **********
main:%bb.10 for.body19
  From: %374:gpr64common = LDRSWui %stack.5.k, 0, debug-location !225 :: (dereferenceable load 4 from %ir.k); cg.c:204:32
    To: B %bb.9, debug-location !234; cg.c:203:9
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %374:gpr64common = LDRSWui %stack.5.k, 0, debug-location !225 :: (dereferenceable load 4 from %ir.k); cg.c:204:32
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(6): Data Latency=4 Reg=%374
    SU(1): Data Latency=4 Reg=%374
    SU(7): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %376:gpr64 = UBFMXri %374:gpr64common, 62, 61, debug-location !227; cg.c:204:25
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(0): Data Latency=4 Reg=%374
  Successors:
    SU(5): Data Latency=1 Reg=%376
    SU(2): Data Latency=1 Reg=%376
  Single Issue       : false;
SU(2):   %378:gpr32 = LDRWroX %68:gpr64common, %376:gpr64, 0, 0, debug-location !227 :: (load 4 from %ir.arrayidx21); cg.c:204:25
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(1): Data Latency=1 Reg=%376
  Successors:
    SU(4): Data Latency=4 Reg=%378
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   %380:gpr32 = LDRWui %33:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !228 :: (dereferenceable load 4 from @firstcol); cg.c:204:37
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=%380
  Single Issue       : false;
SU(4):   %381:gpr32 = nsw SUBWrr %378:gpr32, %380:gpr32, debug-location !229; cg.c:204:35
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=%378
    SU(3): Data Latency=4 Reg=%380
  Successors:
    SU(5): Data Latency=1 Reg=%381
  Single Issue       : false;
SU(5):   STRWroX %381:gpr32, %68:gpr64common, %376:gpr64, 0, 0, debug-location !232 :: (store 4 into %ir.arrayidx24); cg.c:204:23
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%381
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=1 Reg=%376
  Single Issue       : false;
SU(6):   %382:gpr32common = nsw ADDWri %374.sub_32:gpr64common, 1, 0, debug-location !233; cg.c:203:49
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%374
  Successors:
    SU(7): Data Latency=1 Reg=%382
  Single Issue       : false;
SU(7):   STRWui %382:gpr32common, %stack.5.k, 0, debug-location !233 :: (store 4 into %ir.k); cg.c:203:49
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%382
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.9, debug-location !234; cg.c:203:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 5 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) STRWui %382:gpr32common, %stack.5.k, 0, debug-location !233 :: (store 4 into %ir.k); cg.c:203:49
  Ready @0c
  BotQ.A TopLatency SU(7) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
BotQ.A RemLatency SU(5) 10c
  BotQ.A RemainingLatency 10 + 1c > CritPath 10
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) STRWroX %381:gpr32, %68:gpr64common, %376:gpr64, 0, 0, debug-location !232 :: (store 4 into %ir.arrayidx24); cg.c:204:23
  Ready @1c
  BotQ.A TopLatency SU(5) 10c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 4 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
BotQ.A RemLatency SU(4) 9c
  BotQ.A RemainingLatency 9 + 2c > CritPath 10
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(4) BOT-PATH                  9 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) %381:gpr32 = nsw SUBWrr %378:gpr32, %380:gpr32, debug-location !229; cg.c:204:35
  Ready @2c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 3 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %382:gpr32common = nsw ADDWri %374.sub_32:gpr64common, 1, 0, debug-location !233; cg.c:203:49
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 3 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
BotQ.A RemLatency SU(2) 5c
  BotQ.A RemainingLatency 5 + 6c > CritPath 10
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) %378:gpr32 = LDRWroX %68:gpr64common, %376:gpr64, 0, 0, debug-location !227 :: (load 4 from %ir.arrayidx21); cg.c:204:25
  Ready @6c
  BotQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
BotQ.A RemLatency SU(1) 4c
  BotQ.A RemainingLatency 4 + 7c > CritPath 10
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(1) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) %376:gpr64 = UBFMXri %374:gpr64common, 62, 61, debug-location !227; cg.c:204:25
  Ready @7c
  BotQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %380:gpr32 = LDRWui %33:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !228 :: (dereferenceable load 4 from @firstcol); cg.c:204:37
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %374:gpr64common = LDRSWui %stack.5.k, 0, debug-location !225 :: (dereferenceable load 4 from %ir.k); cg.c:204:32
  Ready @11c
  BotQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 8
  Executed: 12c
  Critical: 8c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   %374:gpr64common = LDRSWui %stack.5.k, 0, debug-location !225 :: (dereferenceable load 4 from %ir.k); cg.c:204:32
SU(3):   %380:gpr32 = LDRWui %33:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !228 :: (dereferenceable load 4 from @firstcol); cg.c:204:37
SU(1):   %376:gpr64 = UBFMXri %374:gpr64common, 62, 61, debug-location !227; cg.c:204:25
SU(2):   %378:gpr32 = LDRWroX %68:gpr64common, %376:gpr64, 0, 0, debug-location !227 :: (load 4 from %ir.arrayidx21); cg.c:204:25
SU(6):   %382:gpr32common = nsw ADDWri %374.sub_32:gpr64common, 1, 0, debug-location !233; cg.c:203:49
SU(4):   %381:gpr32 = nsw SUBWrr %378:gpr32, %380:gpr32, debug-location !229; cg.c:204:35
SU(5):   STRWroX %381:gpr32, %68:gpr64common, %376:gpr64, 0, 0, debug-location !232 :: (store 4 into %ir.arrayidx24); cg.c:204:23
SU(7):   STRWui %382:gpr32common, %stack.5.k, 0, debug-location !233 :: (store 4 into %ir.k); cg.c:203:49

********** MI Scheduling **********
main:%bb.11 for.inc28
  From: %372:gpr32common = LDRWui %stack.4.j, 0, debug-location !237 :: (dereferenceable load 4 from %ir.j); cg.c:202:46
    To: B %bb.7, debug-location !238; cg.c:202:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %372:gpr32common = LDRWui %stack.4.j, 0, debug-location !237 :: (dereferenceable load 4 from %ir.j); cg.c:202:46
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%372
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %373:gpr32common = nsw ADDWri %372:gpr32common, 1, 0, debug-location !237; cg.c:202:46
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%372
  Successors:
    SU(2): Data Latency=1 Reg=%373
  Single Issue       : false;
SU(2):   STRWui %373:gpr32common, %stack.4.j, 0, debug-location !237 :: (store 4 into %ir.j); cg.c:202:46
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%373
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.7, debug-location !238; cg.c:202:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %373:gpr32common, %stack.4.j, 0, debug-location !237 :: (store 4 into %ir.j); cg.c:202:46
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %373:gpr32common = nsw ADDWri %372:gpr32common, 1, 0, debug-location !237; cg.c:202:46
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %372:gpr32common = LDRWui %stack.4.j, 0, debug-location !237 :: (dereferenceable load 4 from %ir.j); cg.c:202:46
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   %372:gpr32common = LDRWui %stack.4.j, 0, debug-location !237 :: (dereferenceable load 4 from %ir.j); cg.c:202:46
SU(1):   %373:gpr32common = nsw ADDWri %372:gpr32common, 1, 0, debug-location !237; cg.c:202:46
SU(2):   STRWui %373:gpr32common, %stack.4.j, 0, debug-location !237 :: (store 4 into %ir.j); cg.c:202:46

********** MI Scheduling **********
main:%bb.12 for.end30
  From: STRWui $wzr, %stack.3.i, 0, debug-location !241 :: (store 4 into %ir.i); cg.c:211:12
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui $wzr, %stack.3.i, 0, debug-location !241 :: (store 4 into %ir.i); cg.c:211:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %360:gpr64common = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   %361:gpr64 = MOVi64imm 4607182418800017408
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %361:gpr64 = MOVi64imm 4607182418800017408
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %360:gpr64common = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.3.i, 0, debug-location !241 :: (store 4 into %ir.i); cg.c:211:12
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   STRWui $wzr, %stack.3.i, 0, debug-location !241 :: (store 4 into %ir.i); cg.c:211:12
SU(1):   %360:gpr64common = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x
SU(2):   %361:gpr64 = MOVi64imm 4607182418800017408

********** MI Scheduling **********
main:%bb.13 for.cond31
  From: %79:gpr32 = LDRWui %stack.3.i, 0, debug-location !244 :: (dereferenceable load 4 from %ir.i); cg.c:211:17
    To: Bcc 10, %bb.15, implicit killed $nzcv, debug-location !247; cg.c:211:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %79:gpr32 = LDRWui %stack.3.i, 0, debug-location !244 :: (dereferenceable load 4 from %ir.i); cg.c:211:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%79
  Single Issue       : false;
SU(1):   %80:gpr32common = ADDWri %0:gpr32common, 1, 0, debug-location !246; cg.c:211:19
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Data Latency=1 Reg=%80
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %79:gpr32, %80:gpr32common, implicit-def $nzcv, debug-location !247; cg.c:211:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=%80
    SU(0): Data Latency=4 Reg=%79
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.15, implicit killed $nzcv, debug-location !247; cg.c:211:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %79:gpr32, %80:gpr32common, implicit-def $nzcv, debug-location !247; cg.c:211:5
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %80:gpr32common = ADDWri %0:gpr32common, 1, 0, debug-location !246; cg.c:211:19
  Ready @2c
  BotQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %79:gpr32 = LDRWui %stack.3.i, 0, debug-location !244 :: (dereferenceable load 4 from %ir.i); cg.c:211:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   %79:gpr32 = LDRWui %stack.3.i, 0, debug-location !244 :: (dereferenceable load 4 from %ir.i); cg.c:211:17
SU(1):   %80:gpr32common = ADDWri %0:gpr32common, 1, 0, debug-location !246; cg.c:211:19
SU(2):   dead $wzr = SUBSWrr %79:gpr32, %80:gpr32common, implicit-def $nzcv, debug-location !247; cg.c:211:5

********** MI Scheduling **********
main:%bb.14 for.body33
  From: %358:gpr64common = LDRSWui %stack.3.i, 0, debug-location !248 :: (dereferenceable load 4 from %ir.i); cg.c:212:11
    To: B %bb.13, debug-location !253; cg.c:211:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %358:gpr64common = LDRSWui %stack.3.i, 0, debug-location !248 :: (dereferenceable load 4 from %ir.i); cg.c:212:11
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%358
    SU(1): Data Latency=4 Reg=%358
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   STRXroX %361:gpr64, %360:gpr64common, %358:gpr64common, 0, 1, debug-location !251 :: (store 8 into %ir.arrayidx35); cg.c:212:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%358
  Single Issue       : false;
SU(2):   %362:gpr32common = nsw ADDWri %358.sub_32:gpr64common, 1, 0, debug-location !252; cg.c:211:30
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%358
  Successors:
    SU(3): Data Latency=1 Reg=%362
  Single Issue       : false;
SU(3):   STRWui %362:gpr32common, %stack.3.i, 0, debug-location !252 :: (store 4 into %ir.i); cg.c:211:30
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%362
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.13, debug-location !253; cg.c:211:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) %358:gpr64common = LDRSWui %stack.3.i, 0, debug-location !248 :: (dereferenceable load 4 from %ir.i); cg.c:212:11
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 1 
TopQ.A RemLatency SU(2) 1c
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) STRWui %362:gpr32common, %stack.3.i, 0, debug-location !252 :: (store 4 into %ir.i); cg.c:211:30
  Ready @0c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
BotQ.A RemLatency SU(1) 4c
TopQ.A RemLatency SU(2) 1c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %362:gpr32common = nsw ADDWri %358.sub_32:gpr64common, 1, 0, debug-location !252; cg.c:211:30
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRXroX %361:gpr64, %360:gpr64common, %358:gpr64common, 0, 1, debug-location !251 :: (store 8 into %ir.arrayidx35); cg.c:212:14
  Ready @2c
  BotQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   %358:gpr64common = LDRSWui %stack.3.i, 0, debug-location !248 :: (dereferenceable load 4 from %ir.i); cg.c:212:11
SU(1):   STRXroX %361:gpr64, %360:gpr64common, %358:gpr64common, 0, 1, debug-location !251 :: (store 8 into %ir.arrayidx35); cg.c:212:14
SU(2):   %362:gpr32common = nsw ADDWri %358.sub_32:gpr64common, 1, 0, debug-location !252; cg.c:211:30
SU(3):   STRWui %362:gpr32common, %stack.3.i, 0, debug-location !252 :: (store 4 into %ir.i); cg.c:211:30

********** MI Scheduling **********
main:%bb.15 for.end38
  From: STRWui $wzr, %stack.4.j, 0, debug-location !256 :: (store 4 into %ir.j); cg.c:214:12
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui $wzr, %stack.4.j, 0, debug-location !256 :: (store 4 into %ir.j); cg.c:214:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %351:gpr64common = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   %354:gpr64common = MOVaddr target-flags(aarch64-page) @z, target-flags(aarch64-pageoff, aarch64-nc) @z
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %355:gpr64common = MOVaddr target-flags(aarch64-page) @r, target-flags(aarch64-pageoff, aarch64-nc) @r
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   %356:gpr64common = MOVaddr target-flags(aarch64-page) @p, target-flags(aarch64-pageoff, aarch64-nc) @p
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %356:gpr64common = MOVaddr target-flags(aarch64-page) @p, target-flags(aarch64-pageoff, aarch64-nc) @p
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %355:gpr64common = MOVaddr target-flags(aarch64-page) @r, target-flags(aarch64-pageoff, aarch64-nc) @r
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  BotQ.A RemainingLatency 0 + 2c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %354:gpr64common = MOVaddr target-flags(aarch64-page) @z, target-flags(aarch64-pageoff, aarch64-nc) @z
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 3c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %351:gpr64common = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.4.j, 0, debug-location !256 :: (store 4 into %ir.j); cg.c:214:12
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   STRWui $wzr, %stack.4.j, 0, debug-location !256 :: (store 4 into %ir.j); cg.c:214:12
SU(1):   %351:gpr64common = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q
SU(2):   %354:gpr64common = MOVaddr target-flags(aarch64-page) @z, target-flags(aarch64-pageoff, aarch64-nc) @z
SU(3):   %355:gpr64common = MOVaddr target-flags(aarch64-page) @r, target-flags(aarch64-pageoff, aarch64-nc) @r
SU(4):   %356:gpr64common = MOVaddr target-flags(aarch64-page) @p, target-flags(aarch64-pageoff, aarch64-nc) @p

********** MI Scheduling **********
main:%bb.16 for.cond39
  From: %83:gpr32 = LDRWui %stack.4.j, 0, debug-location !259 :: (dereferenceable load 4 from %ir.j); cg.c:214:17
    To: Bcc 10, %bb.18, implicit killed $nzcv, debug-location !266; cg.c:214:5
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %83:gpr32 = LDRWui %stack.4.j, 0, debug-location !259 :: (dereferenceable load 4 from %ir.j); cg.c:214:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=%83
  Single Issue       : false;
SU(1):   %85:gpr32 = LDRWui %34:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !261 :: (dereferenceable load 4 from @lastcol); cg.c:214:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%85
  Single Issue       : false;
SU(2):   %87:gpr32 = LDRWui %33:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !262 :: (dereferenceable load 4 from @firstcol); cg.c:214:31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%87
  Single Issue       : false;
SU(3):   %88:gpr32common = nsw SUBWrr %85:gpr32, %87:gpr32, debug-location !263; cg.c:214:29
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(2): Data Latency=4 Reg=%87
    SU(1): Data Latency=4 Reg=%85
  Successors:
    SU(4): Data Latency=1 Reg=%88
  Single Issue       : false;
SU(4):   %89:gpr32common = nsw ADDWri %88:gpr32common, 1, 0, debug-location !264; cg.c:214:40
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1 Reg=%88
  Successors:
    SU(5): Data Latency=1 Reg=%89
  Single Issue       : false;
SU(5):   dead $wzr = SUBSWrr %83:gpr32, %89:gpr32common, implicit-def $nzcv, debug-location !266; cg.c:214:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%89
    SU(0): Data Latency=4 Reg=%83
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.18, implicit killed $nzcv, debug-location !266; cg.c:214:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) dead $wzr = SUBSWrr %83:gpr32, %89:gpr32common, implicit-def $nzcv, debug-location !266; cg.c:214:5
  Ready @1c
  BotQ.A TopLatency SU(5) 6c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %89:gpr32common = nsw ADDWri %88:gpr32common, 1, 0, debug-location !264; cg.c:214:40
  Ready @2c
  BotQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %88:gpr32common = nsw SUBWrr %85:gpr32, %87:gpr32, debug-location !263; cg.c:214:29
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 1 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %83:gpr32 = LDRWui %stack.4.j, 0, debug-location !259 :: (dereferenceable load 4 from %ir.j); cg.c:214:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %87:gpr32 = LDRWui %33:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !262 :: (dereferenceable load 4 from @firstcol); cg.c:214:31
  Ready @7c
  BotQ.A BotLatency SU(2) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %85:gpr32 = LDRWui %34:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !261 :: (dereferenceable load 4 from @lastcol); cg.c:214:21
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.16 ***
SU(1):   %85:gpr32 = LDRWui %34:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !261 :: (dereferenceable load 4 from @lastcol); cg.c:214:21
SU(2):   %87:gpr32 = LDRWui %33:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !262 :: (dereferenceable load 4 from @firstcol); cg.c:214:31
SU(0):   %83:gpr32 = LDRWui %stack.4.j, 0, debug-location !259 :: (dereferenceable load 4 from %ir.j); cg.c:214:17
SU(3):   %88:gpr32common = nsw SUBWrr %85:gpr32, %87:gpr32, debug-location !263; cg.c:214:29
SU(4):   %89:gpr32common = nsw ADDWri %88:gpr32common, 1, 0, debug-location !264; cg.c:214:40
SU(5):   dead $wzr = SUBSWrr %83:gpr32, %89:gpr32common, implicit-def $nzcv, debug-location !266; cg.c:214:5

********** MI Scheduling **********
main:%bb.17 for.body43
  From: %349:gpr64common = LDRSWui %stack.4.j, 0, debug-location !267 :: (dereferenceable load 4 from %ir.j); cg.c:215:11
    To: B %bb.16, debug-location !281; cg.c:214:5
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %349:gpr64common = LDRSWui %stack.4.j, 0, debug-location !267 :: (dereferenceable load 4 from %ir.j); cg.c:215:11
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(6): Data Latency=4 Reg=%349
    SU(1): Data Latency=4 Reg=%349
    SU(7): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %352:gpr64 = UBFMXri %349:gpr64common, 61, 60, debug-location !278; cg.c:218:9
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%349
  Successors:
    SU(5): Data Latency=1 Reg=%352
    SU(4): Data Latency=1 Reg=%352
    SU(3): Data Latency=1 Reg=%352
    SU(2): Data Latency=1 Reg=%352
  Single Issue       : false;
SU(2):   STRXroX $xzr, %351:gpr64common, %352:gpr64, 0, 0, debug-location !270 :: (store 8 into %ir.arrayidx45); cg.c:215:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%352
  Single Issue       : false;
SU(3):   STRXroX $xzr, %354:gpr64common, %352:gpr64, 0, 0, debug-location !273 :: (store 8 into %ir.arrayidx47); cg.c:216:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%352
  Single Issue       : false;
SU(4):   STRXroX $xzr, %355:gpr64common, %352:gpr64, 0, 0, debug-location !276 :: (store 8 into %ir.arrayidx49); cg.c:217:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%352
  Single Issue       : false;
SU(5):   STRXroX $xzr, %356:gpr64common, %352:gpr64, 0, 0, debug-location !279 :: (store 8 into %ir.arrayidx51); cg.c:218:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%352
  Single Issue       : false;
SU(6):   %357:gpr32common = nsw ADDWri %349.sub_32:gpr64common, 1, 0, debug-location !280; cg.c:214:46
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%349
  Successors:
    SU(7): Data Latency=1 Reg=%357
  Single Issue       : false;
SU(7):   STRWui %357:gpr32common, %stack.4.j, 0, debug-location !280 :: (store 4 into %ir.j); cg.c:214:46
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%357
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.16, debug-location !281; cg.c:214:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 5 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) %349:gpr64common = LDRSWui %stack.4.j, 0, debug-location !267 :: (dereferenceable load 4 from %ir.j); cg.c:215:11
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 5 4 3 2 
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 6 1 
TopQ.A RemLatency SU(6) 1c
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(6) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) STRWui %357:gpr32common, %stack.4.j, 0, debug-location !280 :: (store 4 into %ir.j); cg.c:214:46
  Ready @0c
  BotQ.A TopLatency SU(7) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 5 4 3 6 
Queue TopQ.P: 
Queue TopQ.A: 6 1 
BotQ.A RemLatency SU(2) 5c
  BotQ.A RemainingLatency 5 + 1c > CritPath 5
TopQ.A RemLatency SU(6) 1c
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) STRXroX $xzr, %356:gpr64common, %352:gpr64, 0, 0, debug-location !279 :: (store 8 into %ir.arrayidx51); cg.c:218:14
  Ready @1c
  BotQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 6 4 3 
Queue TopQ.P: 
Queue TopQ.A: 6 1 
BotQ.A RemLatency SU(2) 5c
  BotQ.A RemainingLatency 5 + 2c > CritPath 5
TopQ.A RemLatency SU(6) 1c
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) STRXroX $xzr, %355:gpr64common, %352:gpr64, 0, 0, debug-location !276 :: (store 8 into %ir.arrayidx49); cg.c:217:14
  Ready @2c
  BotQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 6 3 
Queue TopQ.P: 
Queue TopQ.A: 6 1 
BotQ.A RemLatency SU(2) 5c
  BotQ.A RemainingLatency 5 + 3c > CritPath 5
TopQ.A RemLatency SU(6) 1c
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) STRXroX $xzr, %354:gpr64common, %352:gpr64, 0, 0, debug-location !273 :: (store 8 into %ir.arrayidx47); cg.c:216:14
  Ready @3c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 6 
Queue TopQ.P: 
Queue TopQ.A: 6 1 
BotQ.A RemLatency SU(2) 5c
  BotQ.A RemainingLatency 5 + 4c > CritPath 5
TopQ.A RemLatency SU(6) 1c
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) STRXroX $xzr, %351:gpr64common, %352:gpr64, 0, 0, debug-location !270 :: (store 8 into %ir.arrayidx45); cg.c:215:14
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 1 
Queue TopQ.P: 
Queue TopQ.A: 6 1 
BotQ.A RemLatency SU(6) 4c
  BotQ.A RemainingLatency 4 + 5c > CritPath 5
TopQ.A RemLatency SU(6) 1c
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %357:gpr32common = nsw ADDWri %349.sub_32:gpr64common, 1, 0, debug-location !280; cg.c:214:46
  Ready @5c
  BotQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %352:gpr64 = UBFMXri %349:gpr64common, 61, 60, debug-location !278; cg.c:218:9
  Ready @6c
  BotQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   %349:gpr64common = LDRSWui %stack.4.j, 0, debug-location !267 :: (dereferenceable load 4 from %ir.j); cg.c:215:11
SU(1):   %352:gpr64 = UBFMXri %349:gpr64common, 61, 60, debug-location !278; cg.c:218:9
SU(6):   %357:gpr32common = nsw ADDWri %349.sub_32:gpr64common, 1, 0, debug-location !280; cg.c:214:46
SU(2):   STRXroX $xzr, %351:gpr64common, %352:gpr64, 0, 0, debug-location !270 :: (store 8 into %ir.arrayidx45); cg.c:215:14
SU(3):   STRXroX $xzr, %354:gpr64common, %352:gpr64, 0, 0, debug-location !273 :: (store 8 into %ir.arrayidx47); cg.c:216:14
SU(4):   STRXroX $xzr, %355:gpr64common, %352:gpr64, 0, 0, debug-location !276 :: (store 8 into %ir.arrayidx49); cg.c:217:14
SU(5):   STRXroX $xzr, %356:gpr64common, %352:gpr64, 0, 0, debug-location !279 :: (store 8 into %ir.arrayidx51); cg.c:218:14
SU(7):   STRWui %357:gpr32common, %stack.4.j, 0, debug-location !280 :: (store 4 into %ir.j); cg.c:214:46

********** MI Scheduling **********
main:%bb.18 for.end54
  From: STRXui $xzr, %stack.7.zeta, 0, debug-location !284 :: (store 8 into %ir.zeta); cg.c:221:10
    To: End RegionInstrs: 11
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRXui $xzr, %stack.7.zeta, 0, debug-location !284 :: (store 8 into %ir.zeta); cg.c:221:10
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %92:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%92
  Single Issue       : false;
SU(2):   STRWui %92:gpr32, %stack.6.it, 0, debug-location !285 :: (store 4 into %ir.it); cg.c:228:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%92
  Single Issue       : false;
SU(3):   %293:gpr64common = ADDXri %stack.8.rnorm, 0, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   %294:gpr64 = MOVaddr target-flags(aarch64-page) @colidx, target-flags(aarch64-pageoff, aarch64-nc) @colidx
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   %295:gpr64 = MOVaddr target-flags(aarch64-page) @rowstr, target-flags(aarch64-pageoff, aarch64-nc) @rowstr
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(6):   %298:gpr64 = MOVaddr target-flags(aarch64-page) @a, target-flags(aarch64-pageoff, aarch64-nc) @a
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(7):   %299:gpr64 = MOVaddr target-flags(aarch64-page) @p, target-flags(aarch64-pageoff, aarch64-nc) @p
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(8):   %300:gpr64 = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(9):   %301:gpr64 = MOVaddr target-flags(aarch64-page) @r, target-flags(aarch64-pageoff, aarch64-nc) @r
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(10):   %313:fpr64 = FMOVDi 112
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 9 8 7 6 5 4 3 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 5 6 7 8 9 10 
Picking from Bot:
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %313:fpr64 = FMOVDi 112
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 9 8 7 6 5 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 5 6 7 8 9 
BotQ.A RemLatency SU(2) 1c
  BotQ.A RemainingLatency 1 + 1c > CritPath 1
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(2) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) STRWui %92:gpr32, %stack.6.it, 0, debug-location !285 :: (store 4 into %ir.it); cg.c:228:13
  Ready @1c
  BotQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 9 8 7 6 5 4 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 5 6 7 8 9 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(9) %301:gpr64 = MOVaddr target-flags(aarch64-page) @r, target-flags(aarch64-pageoff, aarch64-nc) @r
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 8 7 6 5 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 5 6 7 8 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %300:gpr64 = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 3 7 6 5 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 5 6 7 
  BotQ.A RemainingLatency 0 + 4c > CritPath 1
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %299:gpr64 = MOVaddr target-flags(aarch64-page) @p, target-flags(aarch64-pageoff, aarch64-nc) @p
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 3 4 6 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 5 6 
  BotQ.A RemainingLatency 0 + 5c > CritPath 1
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %298:gpr64 = MOVaddr target-flags(aarch64-page) @a, target-flags(aarch64-pageoff, aarch64-nc) @a
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 3 4 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 5 
  BotQ.A RemainingLatency 0 + 6c > CritPath 1
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %295:gpr64 = MOVaddr target-flags(aarch64-page) @rowstr, target-flags(aarch64-pageoff, aarch64-nc) @rowstr
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 3 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 
  BotQ.A RemainingLatency 0 + 7c > CritPath 1
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %294:gpr64 = MOVaddr target-flags(aarch64-page) @colidx, target-flags(aarch64-pageoff, aarch64-nc) @colidx
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  BotQ.A RemainingLatency 0 + 8c > CritPath 1
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %293:gpr64common = ADDXri %stack.8.rnorm, 0, 0
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 9c > CritPath 1
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %92:gpr32 = MOVi32imm 1
  Ready @9c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRXui $xzr, %stack.7.zeta, 0, debug-location !284 :: (store 8 into %ir.zeta); cg.c:221:10
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.18 ***
SU(0):   STRXui $xzr, %stack.7.zeta, 0, debug-location !284 :: (store 8 into %ir.zeta); cg.c:221:10
SU(1):   %92:gpr32 = MOVi32imm 1
SU(3):   %293:gpr64common = ADDXri %stack.8.rnorm, 0, 0
SU(4):   %294:gpr64 = MOVaddr target-flags(aarch64-page) @colidx, target-flags(aarch64-pageoff, aarch64-nc) @colidx
SU(5):   %295:gpr64 = MOVaddr target-flags(aarch64-page) @rowstr, target-flags(aarch64-pageoff, aarch64-nc) @rowstr
SU(6):   %298:gpr64 = MOVaddr target-flags(aarch64-page) @a, target-flags(aarch64-pageoff, aarch64-nc) @a
SU(7):   %299:gpr64 = MOVaddr target-flags(aarch64-page) @p, target-flags(aarch64-pageoff, aarch64-nc) @p
SU(8):   %300:gpr64 = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q
SU(9):   %301:gpr64 = MOVaddr target-flags(aarch64-page) @r, target-flags(aarch64-pageoff, aarch64-nc) @r
SU(2):   STRWui %92:gpr32, %stack.6.it, 0, debug-location !285 :: (store 4 into %ir.it); cg.c:228:13
SU(10):   %313:fpr64 = FMOVDi 112

********** MI Scheduling **********
main:%bb.19 for.cond55
  From: %93:gpr32common = LDRWui %stack.6.it, 0, debug-location !288 :: (dereferenceable load 4 from %ir.it); cg.c:228:18
    To: Bcc 12, %bb.29, implicit killed $nzcv, debug-location !291; cg.c:228:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %93:gpr32common = LDRWui %stack.6.it, 0, debug-location !288 :: (dereferenceable load 4 from %ir.it); cg.c:228:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%93
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %93:gpr32common, 1, 0, implicit-def $nzcv, debug-location !291; cg.c:228:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%93
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.29, implicit killed $nzcv, debug-location !291; cg.c:228:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %93:gpr32common, 1, 0, implicit-def $nzcv, debug-location !291; cg.c:228:5
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %93:gpr32common = LDRWui %stack.6.it, 0, debug-location !288 :: (dereferenceable load 4 from %ir.it); cg.c:228:18
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   %93:gpr32common = LDRWui %stack.6.it, 0, debug-location !288 :: (dereferenceable load 4 from %ir.it); cg.c:228:18
SU(1):   dead $wzr = SUBSWri %93:gpr32common, 1, 0, implicit-def $nzcv, debug-location !291; cg.c:228:5

********** MI Scheduling **********
main:%bb.20 for.body57
  From: STRXui $xzr, %stack.9.norm_temp1, 0, debug-location !294 :: (store 8 into %ir.norm_temp1); cg.c:240:20
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRXui $xzr, %stack.9.norm_temp1, 0, debug-location !294 :: (store 8 into %ir.norm_temp1); cg.c:240:20
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   STRXui $xzr, %stack.10.norm_temp2, 0, debug-location !295 :: (store 8 into %ir.norm_temp2); cg.c:241:20
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   STRWui $wzr, %stack.4.j, 0, debug-location !296 :: (store 4 into %ir.j); cg.c:242:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) STRWui $wzr, %stack.4.j, 0, debug-location !296 :: (store 4 into %ir.j); cg.c:242:16
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) STRXui $xzr, %stack.10.norm_temp2, 0, debug-location !295 :: (store 8 into %ir.norm_temp2); cg.c:241:20
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRXui $xzr, %stack.9.norm_temp1, 0, debug-location !294 :: (store 8 into %ir.norm_temp1); cg.c:240:20
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   STRXui $xzr, %stack.9.norm_temp1, 0, debug-location !294 :: (store 8 into %ir.norm_temp1); cg.c:240:20
SU(1):   STRXui $xzr, %stack.10.norm_temp2, 0, debug-location !295 :: (store 8 into %ir.norm_temp2); cg.c:241:20
SU(2):   STRWui $wzr, %stack.4.j, 0, debug-location !296 :: (store 4 into %ir.j); cg.c:242:16

********** MI Scheduling **********
main:%bb.20 for.body57
  From: STRXui %293:gpr64common, $sp, 0, debug-location !292 :: (store 8 into stack); cg.c:232:9
    To: BL @conj_grad, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit killed $x3, implicit killed $x4, implicit killed $x5, implicit killed $x6, implicit killed $x7, implicit-def $sp, debug-location !292; cg.c:232:9
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRXui %293:gpr64common, $sp, 0, debug-location !292 :: (store 8 into stack); cg.c:232:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   $x0 = COPY %294:gpr64, debug-location !292; cg.c:232:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $x1 = COPY %295:gpr64, debug-location !292; cg.c:232:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $x2 = COPY %360:gpr64common, debug-location !292; cg.c:232:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $x3 = COPY %354:gpr64common, debug-location !292; cg.c:232:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(5):   $x4 = COPY %298:gpr64, debug-location !292; cg.c:232:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(6):   $x5 = COPY %299:gpr64, debug-location !292; cg.c:232:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(7):   $x6 = COPY %300:gpr64, debug-location !292; cg.c:232:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(8):   $x7 = COPY %301:gpr64, debug-location !292; cg.c:232:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @conj_grad, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit killed $x3, implicit killed $x4, implicit killed $x5, implicit killed $x6, implicit killed $x7, implicit-def $sp, debug-location !292; cg.c:232:9
  # preds left       : 8
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=0 Artificial
    SU(7): Ord  Latency=0 Artificial
    SU(6): Ord  Latency=0 Artificial
    SU(5): Ord  Latency=0 Artificial
    SU(4): Ord  Latency=0 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 8 7 6 5 4 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 7 8 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(8) PHYS-REG                           
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(8) $x7 = COPY %301:gpr64, debug-location !292; cg.c:232:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 7 6 5 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 7 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(7) $x6 = COPY %300:gpr64, debug-location !292; cg.c:232:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 6 5 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(6) $x5 = COPY %299:gpr64, debug-location !292; cg.c:232:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 5 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(5) $x4 = COPY %298:gpr64, debug-location !292; cg.c:232:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(4) $x3 = COPY %354:gpr64common, debug-location !292; cg.c:232:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(3) $x2 = COPY %360:gpr64common, debug-location !292; cg.c:232:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(2) $x1 = COPY %295:gpr64, debug-location !292; cg.c:232:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(1) $x0 = COPY %294:gpr64, debug-location !292; cg.c:232:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRXui %293:gpr64common, $sp, 0, debug-location !292 :: (store 8 into stack); cg.c:232:9
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   STRXui %293:gpr64common, $sp, 0, debug-location !292 :: (store 8 into stack); cg.c:232:9
SU(1):   $x0 = COPY %294:gpr64, debug-location !292; cg.c:232:9
SU(2):   $x1 = COPY %295:gpr64, debug-location !292; cg.c:232:9
SU(3):   $x2 = COPY %360:gpr64common, debug-location !292; cg.c:232:9
SU(4):   $x3 = COPY %354:gpr64common, debug-location !292; cg.c:232:9
SU(5):   $x4 = COPY %298:gpr64, debug-location !292; cg.c:232:9
SU(6):   $x5 = COPY %299:gpr64, debug-location !292; cg.c:232:9
SU(7):   $x6 = COPY %300:gpr64, debug-location !292; cg.c:232:9
SU(8):   $x7 = COPY %301:gpr64, debug-location !292; cg.c:232:9

********** MI Scheduling **********
main:%bb.21 for.cond58
  From: %304:gpr32 = LDRWui %stack.4.j, 0, debug-location !299 :: (dereferenceable load 4 from %ir.j); cg.c:242:21
    To: Bcc 10, %bb.23, implicit killed $nzcv, debug-location !306; cg.c:242:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %304:gpr32 = LDRWui %stack.4.j, 0, debug-location !299 :: (dereferenceable load 4 from %ir.j); cg.c:242:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=%304
  Single Issue       : false;
SU(1):   %306:gpr32 = LDRWui %34:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !301 :: (dereferenceable load 4 from @lastcol); cg.c:242:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%306
  Single Issue       : false;
SU(2):   %308:gpr32 = LDRWui %33:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !302 :: (dereferenceable load 4 from @firstcol); cg.c:242:35
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%308
  Single Issue       : false;
SU(3):   %309:gpr32common = nsw SUBWrr %306:gpr32, %308:gpr32, debug-location !303; cg.c:242:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(2): Data Latency=4 Reg=%308
    SU(1): Data Latency=4 Reg=%306
  Successors:
    SU(4): Data Latency=1 Reg=%309
  Single Issue       : false;
SU(4):   %310:gpr32common = nsw ADDWri %309:gpr32common, 1, 0, debug-location !304; cg.c:242:44
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1 Reg=%309
  Successors:
    SU(5): Data Latency=1 Reg=%310
  Single Issue       : false;
SU(5):   dead $wzr = SUBSWrr %304:gpr32, %310:gpr32common, implicit-def $nzcv, debug-location !306; cg.c:242:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%310
    SU(0): Data Latency=4 Reg=%304
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.23, implicit killed $nzcv, debug-location !306; cg.c:242:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) dead $wzr = SUBSWrr %304:gpr32, %310:gpr32common, implicit-def $nzcv, debug-location !306; cg.c:242:9
  Ready @1c
  BotQ.A TopLatency SU(5) 6c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %310:gpr32common = nsw ADDWri %309:gpr32common, 1, 0, debug-location !304; cg.c:242:44
  Ready @2c
  BotQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %309:gpr32common = nsw SUBWrr %306:gpr32, %308:gpr32, debug-location !303; cg.c:242:33
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 1 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %304:gpr32 = LDRWui %stack.4.j, 0, debug-location !299 :: (dereferenceable load 4 from %ir.j); cg.c:242:21
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %308:gpr32 = LDRWui %33:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !302 :: (dereferenceable load 4 from @firstcol); cg.c:242:35
  Ready @7c
  BotQ.A BotLatency SU(2) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %306:gpr32 = LDRWui %34:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !301 :: (dereferenceable load 4 from @lastcol); cg.c:242:25
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.21 ***
SU(1):   %306:gpr32 = LDRWui %34:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !301 :: (dereferenceable load 4 from @lastcol); cg.c:242:25
SU(2):   %308:gpr32 = LDRWui %33:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !302 :: (dereferenceable load 4 from @firstcol); cg.c:242:35
SU(0):   %304:gpr32 = LDRWui %stack.4.j, 0, debug-location !299 :: (dereferenceable load 4 from %ir.j); cg.c:242:21
SU(3):   %309:gpr32common = nsw SUBWrr %306:gpr32, %308:gpr32, debug-location !303; cg.c:242:33
SU(4):   %310:gpr32common = nsw ADDWri %309:gpr32common, 1, 0, debug-location !304; cg.c:242:44
SU(5):   dead $wzr = SUBSWrr %304:gpr32, %310:gpr32common, implicit-def $nzcv, debug-location !306; cg.c:242:9

********** MI Scheduling **********
main:%bb.22 for.body62
  From: %335:fpr64 = LDRDui %stack.9.norm_temp1, 0, debug-location !307 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:243:26
    To: B %bb.21, debug-location !325; cg.c:242:9
 RegionInstrs: 14
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %335:fpr64 = LDRDui %stack.9.norm_temp1, 0, debug-location !307 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:243:26
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(6): Data Latency=4 Reg=%335
    SU(7): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %336:gpr64common = LDRSWui %stack.4.j, 0, debug-location !309 :: (dereferenceable load 4 from %ir.j); cg.c:243:41
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(12): Data Latency=4 Reg=%336
    SU(2): Data Latency=4 Reg=%336
    SU(13): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %339:gpr64 = UBFMXri %336:gpr64common, 61, 60, debug-location !318; cg.c:244:39
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(1): Data Latency=4 Reg=%336
  Successors:
    SU(4): Data Latency=1 Reg=%339
    SU(3): Data Latency=1 Reg=%339
  Single Issue       : false;
SU(3):   %340:fpr64 = LDRDroX %360:gpr64common, %339:gpr64, 0, 0, debug-location !310 :: (load 8 from %ir.arrayidx64); cg.c:243:39
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(2): Data Latency=1 Reg=%339
  Successors:
    SU(5): Data Latency=4 Reg=%340
  Single Issue       : false;
SU(4):   %342:fpr64 = LDRDroX %354:gpr64common, %339:gpr64, 0, 0, debug-location !318 :: (load 8 from %ir.arrayidx71); cg.c:244:39
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(2): Data Latency=1 Reg=%339
  Successors:
    SU(9): Data Latency=4 Reg=%342
    SU(5): Data Latency=4 Reg=%342
  Single Issue       : false;
SU(5):   %343:fpr64 = FMULDrr %340:fpr64, %342:fpr64, debug-location !313; cg.c:243:44
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 2
  Predecessors:
    SU(4): Data Latency=4 Reg=%342
    SU(3): Data Latency=4 Reg=%340
  Successors:
    SU(6): Data Latency=1 Reg=%343
  Single Issue       : false;
SU(6):   %344:fpr64 = FADDDrr %335:fpr64, %343:fpr64, debug-location !314; cg.c:243:37
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(5): Data Latency=1 Reg=%343
    SU(0): Data Latency=4 Reg=%335
  Successors:
    SU(7): Data Latency=1 Reg=%344
  Single Issue       : false;
SU(7):   STRDui %344:fpr64, %stack.9.norm_temp1, 0, debug-location !315 :: (store 8 into %ir.norm_temp1); cg.c:243:24
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%344
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
SU(8):   %345:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !316 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:244:26
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(10): Data Latency=4 Reg=%345
    SU(11): Ord  Latency=0 Memory
  Single Issue       : false;
SU(9):   %346:fpr64 = FMULDrr %342:fpr64, %342:fpr64, debug-location !321; cg.c:244:44
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 2
  Predecessors:
    SU(4): Data Latency=4 Reg=%342
  Successors:
    SU(10): Data Latency=1 Reg=%346
  Single Issue       : false;
SU(10):   %347:fpr64 = FADDDrr %345:fpr64, %346:fpr64, debug-location !322; cg.c:244:37
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(9): Data Latency=1 Reg=%346
    SU(8): Data Latency=4 Reg=%345
  Successors:
    SU(11): Data Latency=1 Reg=%347
  Single Issue       : false;
SU(11):   STRDui %347:fpr64, %stack.10.norm_temp2, 0, debug-location !323 :: (store 8 into %ir.norm_temp2); cg.c:244:24
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%347
    SU(8): Ord  Latency=0 Memory
  Single Issue       : false;
SU(12):   %348:gpr32common = nsw ADDWri %336.sub_32:gpr64common, 1, 0, debug-location !324; cg.c:242:50
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%336
  Successors:
    SU(13): Data Latency=1 Reg=%348
  Single Issue       : false;
SU(13):   STRWui %348:gpr32common, %stack.4.j, 0, debug-location !324 :: (store 4 into %ir.j); cg.c:242:50
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%348
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.21, debug-location !325; cg.c:242:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 11
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 11 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 8 
Picking from Bot:
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) STRWui %348:gpr32common, %stack.4.j, 0, debug-location !324 :: (store 4 into %ir.j); cg.c:242:50
  Ready @0c
  BotQ.A TopLatency SU(13) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 11 12 
Queue TopQ.P: 
Queue TopQ.A: 0 1 8 
BotQ.A RemLatency SU(7) 11c
  BotQ.A RemainingLatency 11 + 1c > CritPath 11
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(11) STRDui %347:fpr64, %stack.10.norm_temp2, 0, debug-location !323 :: (store 8 into %ir.norm_temp2); cg.c:244:24
  Ready @1c
  BotQ.A TopLatency SU(11) 11c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 12 10 
Queue TopQ.P: 
Queue TopQ.A: 0 1 8 
BotQ.A RemLatency SU(7) 11c
  BotQ.A RemainingLatency 11 + 2c > CritPath 11
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(7) STRDui %344:fpr64, %stack.9.norm_temp1, 0, debug-location !315 :: (store 8 into %ir.norm_temp1); cg.c:243:24
  Ready @2c
  BotQ.A TopLatency SU(7) 11c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 12 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 8 
BotQ.A RemLatency SU(10) 10c
  BotQ.A RemainingLatency 10 + 3c > CritPath 11
Picking from Bot:
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(10) %347:fpr64 = FADDDrr %345:fpr64, %346:fpr64, debug-location !322; cg.c:244:37
  Ready @3c
  BotQ.A BotLatency SU(10) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 8 
Queue BotQ.A: 6 12 9 
Queue TopQ.P: 
Queue TopQ.A: 0 1 8 
BotQ.A RemLatency SU(6) 10c
  BotQ.A RemainingLatency 10 + 4c > CritPath 11
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(6) %344:fpr64 = FADDDrr %335:fpr64, %343:fpr64, debug-location !314; cg.c:243:37
  Ready @4c
  BotQ.A TopLatency SU(6) 10c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 8 0 
Queue BotQ.A: 9 12 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 8 
BotQ.A RemLatency SU(9) 9c
  BotQ.A RemainingLatency 9 + 5c > CritPath 11
Picking from Bot:
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(9) %346:fpr64 = FMULDrr %342:fpr64, %342:fpr64, debug-location !321; cg.c:244:44
  Ready @5c
  BotQ.A BotLatency SU(9) 2c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 8 0 
Queue BotQ.A: 5 12 
Queue TopQ.P: 
Queue TopQ.A: 0 1 8 
BotQ.A RemLatency SU(5) 9c
  BotQ.A RemainingLatency 9 + 6c > CritPath 11
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) %343:fpr64 = FMULDrr %340:fpr64, %342:fpr64, debug-location !313; cg.c:243:44
  Ready @6c
  BotQ.A TopLatency SU(5) 9c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 0 4 
Queue BotQ.A: 12 8 
Queue TopQ.P: 
Queue TopQ.A: 0 1 8 
BotQ.A RemLatency SU(12) 4c
BotQ.A RemLatency SU(3) 5c
  BotQ.A RemainingLatency 8 + 7c > CritPath 11
Picking from Bot:
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(12) %348:gpr32common = nsw ADDWri %336.sub_32:gpr64common, 1, 0, debug-location !324; cg.c:242:50
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 4 
Queue BotQ.A: 8 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 8 
BotQ.A RemLatency SU(3) 5c
  BotQ.A RemainingLatency 7 + 8c > CritPath 11
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %345:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !316 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:244:26
  Ready @8c
  BotQ.A BotLatency SU(8) 5c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 4 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %335:fpr64 = LDRDui %stack.9.norm_temp1, 0, debug-location !307 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:243:26
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) %336:gpr64common = LDRSWui %stack.4.j, 0, debug-location !309 :: (dereferenceable load 4 from %ir.j); cg.c:243:41
  Ready @0c
  TopQ.A BotLatency SU(1) 11c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) %339:gpr64 = UBFMXri %336:gpr64common, 61, 60, debug-location !318; cg.c:244:39
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
Queue TopQ.P: 
Queue TopQ.A: 4 3 
BotQ.A RemLatency SU(3) 5c
  BotQ.A RemainingLatency 5 + 10c > CritPath 11
TopQ.A RemLatency SU(4) 6c
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %342:fpr64 = LDRDroX %354:gpr64common, %339:gpr64, 0, 0, debug-location !318 :: (load 8 from %ir.arrayidx71); cg.c:244:39
  Ready @10c
  BotQ.A BotLatency SU(4) 6c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %340:fpr64 = LDRDroX %360:gpr64common, %339:gpr64, 0, 0, debug-location !310 :: (load 8 from %ir.arrayidx64); cg.c:243:39
  Ready @11c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.22 ***
SU(1):   %336:gpr64common = LDRSWui %stack.4.j, 0, debug-location !309 :: (dereferenceable load 4 from %ir.j); cg.c:243:41
SU(2):   %339:gpr64 = UBFMXri %336:gpr64common, 61, 60, debug-location !318; cg.c:244:39
SU(3):   %340:fpr64 = LDRDroX %360:gpr64common, %339:gpr64, 0, 0, debug-location !310 :: (load 8 from %ir.arrayidx64); cg.c:243:39
SU(4):   %342:fpr64 = LDRDroX %354:gpr64common, %339:gpr64, 0, 0, debug-location !318 :: (load 8 from %ir.arrayidx71); cg.c:244:39
SU(0):   %335:fpr64 = LDRDui %stack.9.norm_temp1, 0, debug-location !307 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:243:26
SU(8):   %345:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !316 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:244:26
SU(12):   %348:gpr32common = nsw ADDWri %336.sub_32:gpr64common, 1, 0, debug-location !324; cg.c:242:50
SU(5):   %343:fpr64 = FMULDrr %340:fpr64, %342:fpr64, debug-location !313; cg.c:243:44
SU(9):   %346:fpr64 = FMULDrr %342:fpr64, %342:fpr64, debug-location !321; cg.c:244:44
SU(6):   %344:fpr64 = FADDDrr %335:fpr64, %343:fpr64, debug-location !314; cg.c:243:37
SU(10):   %347:fpr64 = FADDDrr %345:fpr64, %346:fpr64, debug-location !322; cg.c:244:37
SU(7):   STRDui %344:fpr64, %stack.9.norm_temp1, 0, debug-location !315 :: (store 8 into %ir.norm_temp1); cg.c:243:24
SU(11):   STRDui %347:fpr64, %stack.10.norm_temp2, 0, debug-location !323 :: (store 8 into %ir.norm_temp2); cg.c:244:24
SU(13):   STRWui %348:gpr32common, %stack.4.j, 0, debug-location !324 :: (store 4 into %ir.j); cg.c:242:50

********** MI Scheduling **********
main:%bb.23 for.end76
  From: %1:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !328 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:247:33
    To: Bcc 7, %bb.25, implicit killed $nzcv, debug-location !330; cg.c:247:26
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %1:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !328 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:247:33
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(1): Data Latency=4 Reg=%1
  Single Issue       : false;
SU(1):   %387:fpr64 = FSQRTDr %1:fpr64, debug-location !329; cg.c:247:28
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(0): Data Latency=4 Reg=%1
  Successors:
    SU(2): Data Latency=1 Reg=%387
  Single Issue       : false;
SU(2):   FCMPDrr %387:fpr64, %387:fpr64, implicit-def $nzcv, debug-location !330; cg.c:247:26
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=%387
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 7, %bb.25, implicit killed $nzcv, debug-location !330; cg.c:247:26
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) FCMPDrr %387:fpr64, %387:fpr64, implicit-def $nzcv, debug-location !330; cg.c:247:26
  Ready @1c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %387:fpr64 = FSQRTDr %1:fpr64, debug-location !329; cg.c:247:28
  Ready @2c
  BotQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %1:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !328 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:247:33
  Ready @6c
  BotQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.23 ***
SU(0):   %1:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !328 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:247:33
SU(1):   %387:fpr64 = FSQRTDr %1:fpr64, debug-location !329; cg.c:247:28
SU(2):   FCMPDrr %387:fpr64, %387:fpr64, implicit-def $nzcv, debug-location !330; cg.c:247:26

********** MI Scheduling **********
main:%bb.25 for.end76.split
  From: %314:fpr64 = FDIVDrr %313:fpr64, %387:fpr64, debug-location !330; cg.c:247:26
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %314:fpr64 = FDIVDrr %313:fpr64, %387:fpr64, debug-location !330; cg.c:247:26
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%314
  Single Issue       : false;
SU(1):   STRDui %314:fpr64, %stack.10.norm_temp2, 0, debug-location !331 :: (store 8 into %ir.norm_temp2); cg.c:247:20
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%314
  Single Issue       : false;
SU(2):   STRWui $wzr, %stack.4.j, 0, debug-location !332 :: (store 4 into %ir.j); cg.c:252:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) STRWui $wzr, %stack.4.j, 0, debug-location !332 :: (store 4 into %ir.j); cg.c:252:16
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %314:fpr64, %stack.10.norm_temp2, 0, debug-location !331 :: (store 8 into %ir.norm_temp2); cg.c:247:20
  Ready @1c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %314:fpr64 = FDIVDrr %313:fpr64, %387:fpr64, debug-location !330; cg.c:247:26
  Ready @2c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   %314:fpr64 = FDIVDrr %313:fpr64, %387:fpr64, debug-location !330; cg.c:247:26
SU(1):   STRDui %314:fpr64, %stack.10.norm_temp2, 0, debug-location !331 :: (store 8 into %ir.norm_temp2); cg.c:247:20
SU(2):   STRWui $wzr, %stack.4.j, 0, debug-location !332 :: (store 4 into %ir.j); cg.c:252:16

********** MI Scheduling **********
main:%bb.26 for.cond78
  From: %316:gpr32 = LDRWui %stack.4.j, 0, debug-location !335 :: (dereferenceable load 4 from %ir.j); cg.c:252:21
    To: Bcc 10, %bb.28, implicit killed $nzcv, debug-location !342; cg.c:252:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %316:gpr32 = LDRWui %stack.4.j, 0, debug-location !335 :: (dereferenceable load 4 from %ir.j); cg.c:252:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=%316
  Single Issue       : false;
SU(1):   %318:gpr32 = LDRWui %34:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !337 :: (dereferenceable load 4 from @lastcol); cg.c:252:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%318
  Single Issue       : false;
SU(2):   %320:gpr32 = LDRWui %33:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !338 :: (dereferenceable load 4 from @firstcol); cg.c:252:35
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%320
  Single Issue       : false;
SU(3):   %321:gpr32common = nsw SUBWrr %318:gpr32, %320:gpr32, debug-location !339; cg.c:252:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(2): Data Latency=4 Reg=%320
    SU(1): Data Latency=4 Reg=%318
  Successors:
    SU(4): Data Latency=1 Reg=%321
  Single Issue       : false;
SU(4):   %322:gpr32common = nsw ADDWri %321:gpr32common, 1, 0, debug-location !340; cg.c:252:44
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1 Reg=%321
  Successors:
    SU(5): Data Latency=1 Reg=%322
  Single Issue       : false;
SU(5):   dead $wzr = SUBSWrr %316:gpr32, %322:gpr32common, implicit-def $nzcv, debug-location !342; cg.c:252:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%322
    SU(0): Data Latency=4 Reg=%316
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.28, implicit killed $nzcv, debug-location !342; cg.c:252:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) dead $wzr = SUBSWrr %316:gpr32, %322:gpr32common, implicit-def $nzcv, debug-location !342; cg.c:252:9
  Ready @1c
  BotQ.A TopLatency SU(5) 6c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %322:gpr32common = nsw ADDWri %321:gpr32common, 1, 0, debug-location !340; cg.c:252:44
  Ready @2c
  BotQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %321:gpr32common = nsw SUBWrr %318:gpr32, %320:gpr32, debug-location !339; cg.c:252:33
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 1 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %316:gpr32 = LDRWui %stack.4.j, 0, debug-location !335 :: (dereferenceable load 4 from %ir.j); cg.c:252:21
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %320:gpr32 = LDRWui %33:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !338 :: (dereferenceable load 4 from @firstcol); cg.c:252:35
  Ready @7c
  BotQ.A BotLatency SU(2) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %318:gpr32 = LDRWui %34:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !337 :: (dereferenceable load 4 from @lastcol); cg.c:252:25
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.26 ***
SU(1):   %318:gpr32 = LDRWui %34:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !337 :: (dereferenceable load 4 from @lastcol); cg.c:252:25
SU(2):   %320:gpr32 = LDRWui %33:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !338 :: (dereferenceable load 4 from @firstcol); cg.c:252:35
SU(0):   %316:gpr32 = LDRWui %stack.4.j, 0, debug-location !335 :: (dereferenceable load 4 from %ir.j); cg.c:252:21
SU(3):   %321:gpr32common = nsw SUBWrr %318:gpr32, %320:gpr32, debug-location !339; cg.c:252:33
SU(4):   %322:gpr32common = nsw ADDWri %321:gpr32common, 1, 0, debug-location !340; cg.c:252:44
SU(5):   dead $wzr = SUBSWrr %316:gpr32, %322:gpr32common, implicit-def $nzcv, debug-location !342; cg.c:252:9

********** MI Scheduling **********
main:%bb.27 for.body82
  From: %326:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !343 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:253:20
    To: B %bb.26, debug-location !352; cg.c:252:9
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %326:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !343 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:253:20
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=%326
  Single Issue       : false;
SU(1):   %327:gpr64common = LDRSWui %stack.4.j, 0, debug-location !345 :: (dereferenceable load 4 from %ir.j); cg.c:253:35
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(6): Data Latency=4 Reg=%327
    SU(2): Data Latency=4 Reg=%327
    SU(7): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %329:gpr64 = UBFMXri %327:gpr64common, 61, 60, debug-location !346; cg.c:253:33
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(1): Data Latency=4 Reg=%327
  Successors:
    SU(5): Data Latency=1 Reg=%329
    SU(3): Data Latency=1 Reg=%329
  Single Issue       : false;
SU(3):   %331:fpr64 = LDRDroX %354:gpr64common, %329:gpr64, 0, 0, debug-location !346 :: (load 8 from %ir.arrayidx84); cg.c:253:33
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(2): Data Latency=1 Reg=%329
  Successors:
    SU(4): Data Latency=4 Reg=%331
  Single Issue       : false;
SU(4):   %332:fpr64 = FMULDrr %326:fpr64, %331:fpr64, debug-location !347; cg.c:253:31
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%331
    SU(0): Data Latency=4 Reg=%326
  Successors:
    SU(5): Data Latency=1 Reg=%332
  Single Issue       : false;
SU(5):   STRDroX %332:fpr64, %360:gpr64common, %329:gpr64, 0, 0, debug-location !350 :: (store 8 into %ir.arrayidx87); cg.c:253:18
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%332
    SU(2): Data Latency=1 Reg=%329
  Single Issue       : false;
SU(6):   %334:gpr32common = nsw ADDWri %327.sub_32:gpr64common, 1, 0, debug-location !351; cg.c:252:50
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%327
  Successors:
    SU(7): Data Latency=1 Reg=%334
  Single Issue       : false;
SU(7):   STRWui %334:gpr32common, %stack.4.j, 0, debug-location !351 :: (store 4 into %ir.j); cg.c:252:50
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%334
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.26, debug-location !352; cg.c:252:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) STRWui %334:gpr32common, %stack.4.j, 0, debug-location !351 :: (store 4 into %ir.j); cg.c:252:50
  Ready @0c
  BotQ.A TopLatency SU(7) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(5) 10c
  BotQ.A RemainingLatency 10 + 1c > CritPath 10
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) STRDroX %332:fpr64, %360:gpr64common, %329:gpr64, 0, 0, debug-location !350 :: (store 8 into %ir.arrayidx87); cg.c:253:18
  Ready @1c
  BotQ.A TopLatency SU(5) 10c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(4) 9c
  BotQ.A RemainingLatency 9 + 2c > CritPath 10
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(4) BOT-PATH                  9 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) %332:fpr64 = FMULDrr %326:fpr64, %331:fpr64, debug-location !347; cg.c:253:31
  Ready @2c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 0 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %334:gpr32common = nsw ADDWri %327.sub_32:gpr64common, 1, 0, debug-location !351; cg.c:252:50
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(3) 5c
  BotQ.A RemainingLatency 5 + 6c > CritPath 10
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(3) %331:fpr64 = LDRDroX %354:gpr64common, %329:gpr64, 0, 0, debug-location !346 :: (load 8 from %ir.arrayidx84); cg.c:253:33
  Ready @6c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(2) 4c
  BotQ.A RemainingLatency 4 + 7c > CritPath 10
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) %329:gpr64 = UBFMXri %327:gpr64common, 61, 60, debug-location !346; cg.c:253:33
  Ready @7c
  BotQ.A BotLatency SU(2) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %326:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !343 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:253:20
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %327:gpr64common = LDRSWui %stack.4.j, 0, debug-location !345 :: (dereferenceable load 4 from %ir.j); cg.c:253:35
  Ready @11c
  BotQ.A BotLatency SU(1) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 8
  Executed: 12c
  Critical: 8c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.27 ***
SU(1):   %327:gpr64common = LDRSWui %stack.4.j, 0, debug-location !345 :: (dereferenceable load 4 from %ir.j); cg.c:253:35
SU(0):   %326:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !343 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:253:20
SU(2):   %329:gpr64 = UBFMXri %327:gpr64common, 61, 60, debug-location !346; cg.c:253:33
SU(3):   %331:fpr64 = LDRDroX %354:gpr64common, %329:gpr64, 0, 0, debug-location !346 :: (load 8 from %ir.arrayidx84); cg.c:253:33
SU(6):   %334:gpr32common = nsw ADDWri %327.sub_32:gpr64common, 1, 0, debug-location !351; cg.c:252:50
SU(4):   %332:fpr64 = FMULDrr %326:fpr64, %331:fpr64, debug-location !347; cg.c:253:31
SU(5):   STRDroX %332:fpr64, %360:gpr64common, %329:gpr64, 0, 0, debug-location !350 :: (store 8 into %ir.arrayidx87); cg.c:253:18
SU(7):   STRWui %334:gpr32common, %stack.4.j, 0, debug-location !351 :: (store 4 into %ir.j); cg.c:252:50

********** MI Scheduling **********
main:%bb.28 for.inc91
  From: %324:gpr32common = LDRWui %stack.6.it, 0, debug-location !355 :: (dereferenceable load 4 from %ir.it); cg.c:228:29
    To: B %bb.19, debug-location !356; cg.c:228:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %324:gpr32common = LDRWui %stack.6.it, 0, debug-location !355 :: (dereferenceable load 4 from %ir.it); cg.c:228:29
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%324
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %325:gpr32common = nsw ADDWri %324:gpr32common, 1, 0, debug-location !355; cg.c:228:29
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%324
  Successors:
    SU(2): Data Latency=1 Reg=%325
  Single Issue       : false;
SU(2):   STRWui %325:gpr32common, %stack.6.it, 0, debug-location !355 :: (store 4 into %ir.it); cg.c:228:29
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%325
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.19, debug-location !356; cg.c:228:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %325:gpr32common, %stack.6.it, 0, debug-location !355 :: (store 4 into %ir.it); cg.c:228:29
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %325:gpr32common = nsw ADDWri %324:gpr32common, 1, 0, debug-location !355; cg.c:228:29
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %324:gpr32common = LDRWui %stack.6.it, 0, debug-location !355 :: (dereferenceable load 4 from %ir.it); cg.c:228:29
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.28 ***
SU(0):   %324:gpr32common = LDRWui %stack.6.it, 0, debug-location !355 :: (dereferenceable load 4 from %ir.it); cg.c:228:29
SU(1):   %325:gpr32common = nsw ADDWri %324:gpr32common, 1, 0, debug-location !355; cg.c:228:29
SU(2):   STRWui %325:gpr32common, %stack.6.it, 0, debug-location !355 :: (store 4 into %ir.it); cg.c:228:29

********** MI Scheduling **********
main:%bb.29 for.end93
  From: STRWui $wzr, %stack.3.i, 0, debug-location !359 :: (store 4 into %ir.i); cg.c:260:12
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui $wzr, %stack.3.i, 0, debug-location !359 :: (store 4 into %ir.i); cg.c:260:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %290:gpr64 = MOVi64imm 4607182418800017408
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %290:gpr64 = MOVi64imm 4607182418800017408
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.3.i, 0, debug-location !359 :: (store 4 into %ir.i); cg.c:260:12
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.29 ***
SU(0):   STRWui $wzr, %stack.3.i, 0, debug-location !359 :: (store 4 into %ir.i); cg.c:260:12
SU(1):   %290:gpr64 = MOVi64imm 4607182418800017408

********** MI Scheduling **********
main:%bb.30 for.cond94
  From: %96:gpr32 = LDRWui %stack.3.i, 0, debug-location !362 :: (dereferenceable load 4 from %ir.i); cg.c:260:17
    To: Bcc 10, %bb.32, implicit killed $nzcv, debug-location !365; cg.c:260:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %96:gpr32 = LDRWui %stack.3.i, 0, debug-location !362 :: (dereferenceable load 4 from %ir.i); cg.c:260:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%96
  Single Issue       : false;
SU(1):   %97:gpr32common = ADDWri %0:gpr32common, 1, 0, debug-location !364; cg.c:260:19
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Data Latency=1 Reg=%97
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %96:gpr32, %97:gpr32common, implicit-def $nzcv, debug-location !365; cg.c:260:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=%97
    SU(0): Data Latency=4 Reg=%96
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.32, implicit killed $nzcv, debug-location !365; cg.c:260:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %96:gpr32, %97:gpr32common, implicit-def $nzcv, debug-location !365; cg.c:260:5
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %97:gpr32common = ADDWri %0:gpr32common, 1, 0, debug-location !364; cg.c:260:19
  Ready @2c
  BotQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %96:gpr32 = LDRWui %stack.3.i, 0, debug-location !362 :: (dereferenceable load 4 from %ir.i); cg.c:260:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.30 ***
SU(0):   %96:gpr32 = LDRWui %stack.3.i, 0, debug-location !362 :: (dereferenceable load 4 from %ir.i); cg.c:260:17
SU(1):   %97:gpr32common = ADDWri %0:gpr32common, 1, 0, debug-location !364; cg.c:260:19
SU(2):   dead $wzr = SUBSWrr %96:gpr32, %97:gpr32common, implicit-def $nzcv, debug-location !365; cg.c:260:5

********** MI Scheduling **********
main:%bb.31 for.body96
  From: %287:gpr64common = LDRSWui %stack.3.i, 0, debug-location !366 :: (dereferenceable load 4 from %ir.i); cg.c:261:11
    To: B %bb.30, debug-location !371; cg.c:260:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %287:gpr64common = LDRSWui %stack.3.i, 0, debug-location !366 :: (dereferenceable load 4 from %ir.i); cg.c:261:11
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%287
    SU(1): Data Latency=4 Reg=%287
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   STRXroX %290:gpr64, %360:gpr64common, %287:gpr64common, 0, 1, debug-location !369 :: (store 8 into %ir.arrayidx98); cg.c:261:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%287
  Single Issue       : false;
SU(2):   %291:gpr32common = nsw ADDWri %287.sub_32:gpr64common, 1, 0, debug-location !370; cg.c:260:30
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%287
  Successors:
    SU(3): Data Latency=1 Reg=%291
  Single Issue       : false;
SU(3):   STRWui %291:gpr32common, %stack.3.i, 0, debug-location !370 :: (store 4 into %ir.i); cg.c:260:30
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%291
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.30, debug-location !371; cg.c:260:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) %287:gpr64common = LDRSWui %stack.3.i, 0, debug-location !366 :: (dereferenceable load 4 from %ir.i); cg.c:261:11
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 1 
TopQ.A RemLatency SU(2) 1c
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) STRWui %291:gpr32common, %stack.3.i, 0, debug-location !370 :: (store 4 into %ir.i); cg.c:260:30
  Ready @0c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
BotQ.A RemLatency SU(1) 4c
TopQ.A RemLatency SU(2) 1c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %291:gpr32common = nsw ADDWri %287.sub_32:gpr64common, 1, 0, debug-location !370; cg.c:260:30
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRXroX %290:gpr64, %360:gpr64common, %287:gpr64common, 0, 1, debug-location !369 :: (store 8 into %ir.arrayidx98); cg.c:261:14
  Ready @2c
  BotQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.31 ***
SU(0):   %287:gpr64common = LDRSWui %stack.3.i, 0, debug-location !366 :: (dereferenceable load 4 from %ir.i); cg.c:261:11
SU(1):   STRXroX %290:gpr64, %360:gpr64common, %287:gpr64common, 0, 1, debug-location !369 :: (store 8 into %ir.arrayidx98); cg.c:261:14
SU(2):   %291:gpr32common = nsw ADDWri %287.sub_32:gpr64common, 1, 0, debug-location !370; cg.c:260:30
SU(3):   STRWui %291:gpr32common, %stack.3.i, 0, debug-location !370 :: (store 4 into %ir.i); cg.c:260:30

********** MI Scheduling **********
main:%bb.32 for.end101
  From: STRWui %104:gpr32, %stack.6.it, 0, debug-location !379 :: (store 4 into %ir.it); cg.c:279:13
    To: End RegionInstrs: 11
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui %104:gpr32, %stack.6.it, 0, debug-location !379 :: (store 4 into %ir.it); cg.c:279:13
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %214:gpr64common = ADDXri %stack.8.rnorm, 0, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   %215:gpr64 = MOVaddr target-flags(aarch64-page) @colidx, target-flags(aarch64-pageoff, aarch64-nc) @colidx
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %216:gpr64 = MOVaddr target-flags(aarch64-page) @rowstr, target-flags(aarch64-pageoff, aarch64-nc) @rowstr
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   %219:gpr64 = MOVaddr target-flags(aarch64-page) @a, target-flags(aarch64-pageoff, aarch64-nc) @a
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   %220:gpr64 = MOVaddr target-flags(aarch64-page) @p, target-flags(aarch64-pageoff, aarch64-nc) @p
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(6):   %221:gpr64 = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(7):   %222:gpr64 = MOVaddr target-flags(aarch64-page) @r, target-flags(aarch64-pageoff, aarch64-nc) @r
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(8):   %241:gpr64 = MOVi64imm 4633641066610819072
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(9):   %246:gpr64 = MOVaddr target-flags(aarch64-page) @.str.10, target-flags(aarch64-pageoff, aarch64-nc) @.str.10
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(10):   %251:gpr64 = MOVaddr target-flags(aarch64-page) @.str.11, target-flags(aarch64-pageoff, aarch64-nc) @.str.11
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 9 8 7 6 5 4 3 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 7 8 9 10 
Picking from Bot:
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %251:gpr64 = MOVaddr target-flags(aarch64-page) @.str.11, target-flags(aarch64-pageoff, aarch64-nc) @.str.11
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 9 8 7 6 5 4 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 7 8 9 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(9) %246:gpr64 = MOVaddr target-flags(aarch64-page) @.str.10, target-flags(aarch64-pageoff, aarch64-nc) @.str.10
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 8 7 6 5 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 7 8 
  BotQ.A RemainingLatency 0 + 2c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %241:gpr64 = MOVi64imm 4633641066610819072
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 7 6 5 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 7 
  BotQ.A RemainingLatency 0 + 3c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %222:gpr64 = MOVaddr target-flags(aarch64-page) @r, target-flags(aarch64-pageoff, aarch64-nc) @r
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 6 5 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 
  BotQ.A RemainingLatency 0 + 4c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %221:gpr64 = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 4 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 
  BotQ.A RemainingLatency 0 + 5c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %220:gpr64 = MOVaddr target-flags(aarch64-page) @p, target-flags(aarch64-pageoff, aarch64-nc) @p
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 
  BotQ.A RemainingLatency 0 + 6c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %219:gpr64 = MOVaddr target-flags(aarch64-page) @a, target-flags(aarch64-pageoff, aarch64-nc) @a
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  BotQ.A RemainingLatency 0 + 7c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %216:gpr64 = MOVaddr target-flags(aarch64-page) @rowstr, target-flags(aarch64-pageoff, aarch64-nc) @rowstr
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  BotQ.A RemainingLatency 0 + 8c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %215:gpr64 = MOVaddr target-flags(aarch64-page) @colidx, target-flags(aarch64-pageoff, aarch64-nc) @colidx
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 9c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %214:gpr64common = ADDXri %stack.8.rnorm, 0, 0
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui %104:gpr32, %stack.6.it, 0, debug-location !379 :: (store 4 into %ir.it); cg.c:279:13
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   STRWui %104:gpr32, %stack.6.it, 0, debug-location !379 :: (store 4 into %ir.it); cg.c:279:13
SU(1):   %214:gpr64common = ADDXri %stack.8.rnorm, 0, 0
SU(2):   %215:gpr64 = MOVaddr target-flags(aarch64-page) @colidx, target-flags(aarch64-pageoff, aarch64-nc) @colidx
SU(3):   %216:gpr64 = MOVaddr target-flags(aarch64-page) @rowstr, target-flags(aarch64-pageoff, aarch64-nc) @rowstr
SU(4):   %219:gpr64 = MOVaddr target-flags(aarch64-page) @a, target-flags(aarch64-pageoff, aarch64-nc) @a
SU(5):   %220:gpr64 = MOVaddr target-flags(aarch64-page) @p, target-flags(aarch64-pageoff, aarch64-nc) @p
SU(6):   %221:gpr64 = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q
SU(7):   %222:gpr64 = MOVaddr target-flags(aarch64-page) @r, target-flags(aarch64-pageoff, aarch64-nc) @r
SU(8):   %241:gpr64 = MOVi64imm 4633641066610819072
SU(9):   %246:gpr64 = MOVaddr target-flags(aarch64-page) @.str.10, target-flags(aarch64-pageoff, aarch64-nc) @.str.10
SU(10):   %251:gpr64 = MOVaddr target-flags(aarch64-page) @.str.11, target-flags(aarch64-pageoff, aarch64-nc) @.str.11

********** MI Scheduling **********
main:%bb.32 for.end101
  From: %104:gpr32 = MOVi32imm 1
    To: BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !378; cg.c:270:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %104:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   $w0 = MOVi32imm 1, debug-location !378; cg.c:270:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !378; cg.c:270:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %104:gpr32 = MOVi32imm 1
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $w0 = MOVi32imm 1, debug-location !378; cg.c:270:5
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.32 ***
SU(1):   $w0 = MOVi32imm 1, debug-location !378; cg.c:270:5
SU(0):   %104:gpr32 = MOVi32imm 1

********** MI Scheduling **********
main:%bb.32 for.end101
  From: %102:gpr64 = MOVaddr target-flags(aarch64-page) @.str.9, target-flags(aarch64-pageoff, aarch64-nc) @.str.9, debug-location !377; cg.c:268:5
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !377; cg.c:268:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %102:gpr64 = MOVaddr target-flags(aarch64-page) @.str.9, target-flags(aarch64-pageoff, aarch64-nc) @.str.9, debug-location !377; cg.c:268:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%102
  Single Issue       : false;
SU(1):   $x0 = COPY %102:gpr64, debug-location !377; cg.c:268:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%102
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %101:fpr64, debug-location !377; cg.c:268:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !377; cg.c:268:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $d0 = COPY %101:fpr64, debug-location !377; cg.c:268:5
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %102:gpr64, debug-location !377; cg.c:268:5
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %102:gpr64 = MOVaddr target-flags(aarch64-page) @.str.9, target-flags(aarch64-pageoff, aarch64-nc) @.str.9, debug-location !377; cg.c:268:5
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   %102:gpr64 = MOVaddr target-flags(aarch64-page) @.str.9, target-flags(aarch64-pageoff, aarch64-nc) @.str.9, debug-location !377; cg.c:268:5
SU(1):   $x0 = COPY %102:gpr64, debug-location !377; cg.c:268:5
SU(2):   $d0 = COPY %101:fpr64, debug-location !377; cg.c:268:5

********** MI Scheduling **********
main:%bb.33 for.cond108
  From: %105:gpr32common = LDRWui %stack.6.it, 0, debug-location !382 :: (dereferenceable load 4 from %ir.it); cg.c:279:18
    To: Bcc 12, %bb.49, implicit killed $nzcv, debug-location !385; cg.c:279:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %105:gpr32common = LDRWui %stack.6.it, 0, debug-location !382 :: (dereferenceable load 4 from %ir.it); cg.c:279:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%105
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %105:gpr32common, 75, 0, implicit-def $nzcv, debug-location !385; cg.c:279:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%105
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.49, implicit killed $nzcv, debug-location !385; cg.c:279:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %105:gpr32common, 75, 0, implicit-def $nzcv, debug-location !385; cg.c:279:5
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %105:gpr32common = LDRWui %stack.6.it, 0, debug-location !382 :: (dereferenceable load 4 from %ir.it); cg.c:279:18
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.33 ***
SU(0):   %105:gpr32common = LDRWui %stack.6.it, 0, debug-location !382 :: (dereferenceable load 4 from %ir.it); cg.c:279:18
SU(1):   dead $wzr = SUBSWri %105:gpr32common, 75, 0, implicit-def $nzcv, debug-location !385; cg.c:279:5

********** MI Scheduling **********
main:%bb.36 if.end112
  From: STRXui %214:gpr64common, $sp, 0, debug-location !391 :: (store 8 into stack); cg.c:286:9
    To: BL @conj_grad, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit killed $x3, implicit killed $x4, implicit killed $x5, implicit killed $x6, implicit killed $x7, implicit-def $sp, debug-location !391; cg.c:286:9
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRXui %214:gpr64common, $sp, 0, debug-location !391 :: (store 8 into stack); cg.c:286:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   $x0 = COPY %215:gpr64, debug-location !391; cg.c:286:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $x1 = COPY %216:gpr64, debug-location !391; cg.c:286:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $x2 = COPY %360:gpr64common, debug-location !391; cg.c:286:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $x3 = COPY %354:gpr64common, debug-location !391; cg.c:286:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(5):   $x4 = COPY %219:gpr64, debug-location !391; cg.c:286:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(6):   $x5 = COPY %220:gpr64, debug-location !391; cg.c:286:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(7):   $x6 = COPY %221:gpr64, debug-location !391; cg.c:286:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(8):   $x7 = COPY %222:gpr64, debug-location !391; cg.c:286:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @conj_grad, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit killed $x3, implicit killed $x4, implicit killed $x5, implicit killed $x6, implicit killed $x7, implicit-def $sp, debug-location !391; cg.c:286:9
  # preds left       : 8
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=0 Artificial
    SU(7): Ord  Latency=0 Artificial
    SU(6): Ord  Latency=0 Artificial
    SU(5): Ord  Latency=0 Artificial
    SU(4): Ord  Latency=0 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 8 7 6 5 4 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 7 8 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(8) PHYS-REG                           
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(8) $x7 = COPY %222:gpr64, debug-location !391; cg.c:286:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 7 6 5 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 7 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(7) $x6 = COPY %221:gpr64, debug-location !391; cg.c:286:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 6 5 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(6) $x5 = COPY %220:gpr64, debug-location !391; cg.c:286:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 5 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(5) $x4 = COPY %219:gpr64, debug-location !391; cg.c:286:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(4) $x3 = COPY %354:gpr64common, debug-location !391; cg.c:286:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(3) $x2 = COPY %360:gpr64common, debug-location !391; cg.c:286:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(2) $x1 = COPY %216:gpr64, debug-location !391; cg.c:286:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(1) $x0 = COPY %215:gpr64, debug-location !391; cg.c:286:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRXui %214:gpr64common, $sp, 0, debug-location !391 :: (store 8 into stack); cg.c:286:9
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.36 ***
SU(0):   STRXui %214:gpr64common, $sp, 0, debug-location !391 :: (store 8 into stack); cg.c:286:9
SU(1):   $x0 = COPY %215:gpr64, debug-location !391; cg.c:286:9
SU(2):   $x1 = COPY %216:gpr64, debug-location !391; cg.c:286:9
SU(3):   $x2 = COPY %360:gpr64common, debug-location !391; cg.c:286:9
SU(4):   $x3 = COPY %354:gpr64common, debug-location !391; cg.c:286:9
SU(5):   $x4 = COPY %219:gpr64, debug-location !391; cg.c:286:9
SU(6):   $x5 = COPY %220:gpr64, debug-location !391; cg.c:286:9
SU(7):   $x6 = COPY %221:gpr64, debug-location !391; cg.c:286:9
SU(8):   $x7 = COPY %222:gpr64, debug-location !391; cg.c:286:9

********** MI Scheduling **********
main:%bb.38 if.end115
  From: STRXui $xzr, %stack.9.norm_temp1, 0, debug-location !396 :: (store 8 into %ir.norm_temp1); cg.c:297:20
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRXui $xzr, %stack.9.norm_temp1, 0, debug-location !396 :: (store 8 into %ir.norm_temp1); cg.c:297:20
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   STRXui $xzr, %stack.10.norm_temp2, 0, debug-location !397 :: (store 8 into %ir.norm_temp2); cg.c:298:20
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   STRWui $wzr, %stack.4.j, 0, debug-location !398 :: (store 4 into %ir.j); cg.c:299:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) STRWui $wzr, %stack.4.j, 0, debug-location !398 :: (store 4 into %ir.j); cg.c:299:16
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) STRXui $xzr, %stack.10.norm_temp2, 0, debug-location !397 :: (store 8 into %ir.norm_temp2); cg.c:298:20
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRXui $xzr, %stack.9.norm_temp1, 0, debug-location !396 :: (store 8 into %ir.norm_temp1); cg.c:297:20
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   STRXui $xzr, %stack.9.norm_temp1, 0, debug-location !396 :: (store 8 into %ir.norm_temp1); cg.c:297:20
SU(1):   STRXui $xzr, %stack.10.norm_temp2, 0, debug-location !397 :: (store 8 into %ir.norm_temp2); cg.c:298:20
SU(2):   STRWui $wzr, %stack.4.j, 0, debug-location !398 :: (store 4 into %ir.j); cg.c:299:16

********** MI Scheduling **********
main:%bb.39 for.cond116
  From: %228:gpr32 = LDRWui %stack.4.j, 0, debug-location !401 :: (dereferenceable load 4 from %ir.j); cg.c:299:21
    To: Bcc 10, %bb.41, implicit killed $nzcv, debug-location !408; cg.c:299:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %228:gpr32 = LDRWui %stack.4.j, 0, debug-location !401 :: (dereferenceable load 4 from %ir.j); cg.c:299:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=%228
  Single Issue       : false;
SU(1):   %230:gpr32 = LDRWui %34:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !403 :: (dereferenceable load 4 from @lastcol); cg.c:299:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%230
  Single Issue       : false;
SU(2):   %232:gpr32 = LDRWui %33:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !404 :: (dereferenceable load 4 from @firstcol); cg.c:299:35
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%232
  Single Issue       : false;
SU(3):   %233:gpr32common = nsw SUBWrr %230:gpr32, %232:gpr32, debug-location !405; cg.c:299:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(2): Data Latency=4 Reg=%232
    SU(1): Data Latency=4 Reg=%230
  Successors:
    SU(4): Data Latency=1 Reg=%233
  Single Issue       : false;
SU(4):   %234:gpr32common = nsw ADDWri %233:gpr32common, 1, 0, debug-location !406; cg.c:299:44
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1 Reg=%233
  Successors:
    SU(5): Data Latency=1 Reg=%234
  Single Issue       : false;
SU(5):   dead $wzr = SUBSWrr %228:gpr32, %234:gpr32common, implicit-def $nzcv, debug-location !408; cg.c:299:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%234
    SU(0): Data Latency=4 Reg=%228
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.41, implicit killed $nzcv, debug-location !408; cg.c:299:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) dead $wzr = SUBSWrr %228:gpr32, %234:gpr32common, implicit-def $nzcv, debug-location !408; cg.c:299:9
  Ready @1c
  BotQ.A TopLatency SU(5) 6c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %234:gpr32common = nsw ADDWri %233:gpr32common, 1, 0, debug-location !406; cg.c:299:44
  Ready @2c
  BotQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %233:gpr32common = nsw SUBWrr %230:gpr32, %232:gpr32, debug-location !405; cg.c:299:33
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 1 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %228:gpr32 = LDRWui %stack.4.j, 0, debug-location !401 :: (dereferenceable load 4 from %ir.j); cg.c:299:21
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %232:gpr32 = LDRWui %33:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !404 :: (dereferenceable load 4 from @firstcol); cg.c:299:35
  Ready @7c
  BotQ.A BotLatency SU(2) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %230:gpr32 = LDRWui %34:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !403 :: (dereferenceable load 4 from @lastcol); cg.c:299:25
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.39 ***
SU(1):   %230:gpr32 = LDRWui %34:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !403 :: (dereferenceable load 4 from @lastcol); cg.c:299:25
SU(2):   %232:gpr32 = LDRWui %33:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !404 :: (dereferenceable load 4 from @firstcol); cg.c:299:35
SU(0):   %228:gpr32 = LDRWui %stack.4.j, 0, debug-location !401 :: (dereferenceable load 4 from %ir.j); cg.c:299:21
SU(3):   %233:gpr32common = nsw SUBWrr %230:gpr32, %232:gpr32, debug-location !405; cg.c:299:33
SU(4):   %234:gpr32common = nsw ADDWri %233:gpr32common, 1, 0, debug-location !406; cg.c:299:44
SU(5):   dead $wzr = SUBSWrr %228:gpr32, %234:gpr32common, implicit-def $nzcv, debug-location !408; cg.c:299:9

********** MI Scheduling **********
main:%bb.40 for.body120
  From: %273:fpr64 = LDRDui %stack.9.norm_temp1, 0, debug-location !409 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:300:26
    To: B %bb.39, debug-location !427; cg.c:299:9
 RegionInstrs: 14
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %273:fpr64 = LDRDui %stack.9.norm_temp1, 0, debug-location !409 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:300:26
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(6): Data Latency=4 Reg=%273
    SU(7): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %274:gpr64common = LDRSWui %stack.4.j, 0, debug-location !411 :: (dereferenceable load 4 from %ir.j); cg.c:300:41
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(12): Data Latency=4 Reg=%274
    SU(2): Data Latency=4 Reg=%274
    SU(13): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %277:gpr64 = UBFMXri %274:gpr64common, 61, 60, debug-location !420; cg.c:301:39
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(1): Data Latency=4 Reg=%274
  Successors:
    SU(4): Data Latency=1 Reg=%277
    SU(3): Data Latency=1 Reg=%277
  Single Issue       : false;
SU(3):   %278:fpr64 = LDRDroX %360:gpr64common, %277:gpr64, 0, 0, debug-location !412 :: (load 8 from %ir.arrayidx122); cg.c:300:39
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(2): Data Latency=1 Reg=%277
  Successors:
    SU(5): Data Latency=4 Reg=%278
  Single Issue       : false;
SU(4):   %280:fpr64 = LDRDroX %354:gpr64common, %277:gpr64, 0, 0, debug-location !420 :: (load 8 from %ir.arrayidx130); cg.c:301:39
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(2): Data Latency=1 Reg=%277
  Successors:
    SU(9): Data Latency=4 Reg=%280
    SU(5): Data Latency=4 Reg=%280
  Single Issue       : false;
SU(5):   %281:fpr64 = FMULDrr %278:fpr64, %280:fpr64, debug-location !415; cg.c:300:44
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 2
  Predecessors:
    SU(4): Data Latency=4 Reg=%280
    SU(3): Data Latency=4 Reg=%278
  Successors:
    SU(6): Data Latency=1 Reg=%281
  Single Issue       : false;
SU(6):   %282:fpr64 = FADDDrr %273:fpr64, %281:fpr64, debug-location !416; cg.c:300:37
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(5): Data Latency=1 Reg=%281
    SU(0): Data Latency=4 Reg=%273
  Successors:
    SU(7): Data Latency=1 Reg=%282
  Single Issue       : false;
SU(7):   STRDui %282:fpr64, %stack.9.norm_temp1, 0, debug-location !417 :: (store 8 into %ir.norm_temp1); cg.c:300:24
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%282
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
SU(8):   %283:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !418 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:301:26
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(10): Data Latency=4 Reg=%283
    SU(11): Ord  Latency=0 Memory
  Single Issue       : false;
SU(9):   %284:fpr64 = FMULDrr %280:fpr64, %280:fpr64, debug-location !423; cg.c:301:44
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 2
  Predecessors:
    SU(4): Data Latency=4 Reg=%280
  Successors:
    SU(10): Data Latency=1 Reg=%284
  Single Issue       : false;
SU(10):   %285:fpr64 = FADDDrr %283:fpr64, %284:fpr64, debug-location !424; cg.c:301:37
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(9): Data Latency=1 Reg=%284
    SU(8): Data Latency=4 Reg=%283
  Successors:
    SU(11): Data Latency=1 Reg=%285
  Single Issue       : false;
SU(11):   STRDui %285:fpr64, %stack.10.norm_temp2, 0, debug-location !425 :: (store 8 into %ir.norm_temp2); cg.c:301:24
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%285
    SU(8): Ord  Latency=0 Memory
  Single Issue       : false;
SU(12):   %286:gpr32common = nsw ADDWri %274.sub_32:gpr64common, 1, 0, debug-location !426; cg.c:299:50
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%274
  Successors:
    SU(13): Data Latency=1 Reg=%286
  Single Issue       : false;
SU(13):   STRWui %286:gpr32common, %stack.4.j, 0, debug-location !426 :: (store 4 into %ir.j); cg.c:299:50
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%286
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.39, debug-location !427; cg.c:299:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 11
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 11 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 8 
Picking from Bot:
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) STRWui %286:gpr32common, %stack.4.j, 0, debug-location !426 :: (store 4 into %ir.j); cg.c:299:50
  Ready @0c
  BotQ.A TopLatency SU(13) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 11 12 
Queue TopQ.P: 
Queue TopQ.A: 0 1 8 
BotQ.A RemLatency SU(7) 11c
  BotQ.A RemainingLatency 11 + 1c > CritPath 11
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(11) STRDui %285:fpr64, %stack.10.norm_temp2, 0, debug-location !425 :: (store 8 into %ir.norm_temp2); cg.c:301:24
  Ready @1c
  BotQ.A TopLatency SU(11) 11c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 12 10 
Queue TopQ.P: 
Queue TopQ.A: 0 1 8 
BotQ.A RemLatency SU(7) 11c
  BotQ.A RemainingLatency 11 + 2c > CritPath 11
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(7) STRDui %282:fpr64, %stack.9.norm_temp1, 0, debug-location !417 :: (store 8 into %ir.norm_temp1); cg.c:300:24
  Ready @2c
  BotQ.A TopLatency SU(7) 11c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 12 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 8 
BotQ.A RemLatency SU(10) 10c
  BotQ.A RemainingLatency 10 + 3c > CritPath 11
Picking from Bot:
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(10) %285:fpr64 = FADDDrr %283:fpr64, %284:fpr64, debug-location !424; cg.c:301:37
  Ready @3c
  BotQ.A BotLatency SU(10) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 8 
Queue BotQ.A: 6 12 9 
Queue TopQ.P: 
Queue TopQ.A: 0 1 8 
BotQ.A RemLatency SU(6) 10c
  BotQ.A RemainingLatency 10 + 4c > CritPath 11
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(6) %282:fpr64 = FADDDrr %273:fpr64, %281:fpr64, debug-location !416; cg.c:300:37
  Ready @4c
  BotQ.A TopLatency SU(6) 10c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 8 0 
Queue BotQ.A: 9 12 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 8 
BotQ.A RemLatency SU(9) 9c
  BotQ.A RemainingLatency 9 + 5c > CritPath 11
Picking from Bot:
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(9) %284:fpr64 = FMULDrr %280:fpr64, %280:fpr64, debug-location !423; cg.c:301:44
  Ready @5c
  BotQ.A BotLatency SU(9) 2c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 8 0 
Queue BotQ.A: 5 12 
Queue TopQ.P: 
Queue TopQ.A: 0 1 8 
BotQ.A RemLatency SU(5) 9c
  BotQ.A RemainingLatency 9 + 6c > CritPath 11
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) %281:fpr64 = FMULDrr %278:fpr64, %280:fpr64, debug-location !415; cg.c:300:44
  Ready @6c
  BotQ.A TopLatency SU(5) 9c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 0 4 
Queue BotQ.A: 12 8 
Queue TopQ.P: 
Queue TopQ.A: 0 1 8 
BotQ.A RemLatency SU(12) 4c
BotQ.A RemLatency SU(3) 5c
  BotQ.A RemainingLatency 8 + 7c > CritPath 11
Picking from Bot:
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(12) %286:gpr32common = nsw ADDWri %274.sub_32:gpr64common, 1, 0, debug-location !426; cg.c:299:50
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 4 
Queue BotQ.A: 8 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 8 
BotQ.A RemLatency SU(3) 5c
  BotQ.A RemainingLatency 7 + 8c > CritPath 11
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %283:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !418 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:301:26
  Ready @8c
  BotQ.A BotLatency SU(8) 5c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 4 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %273:fpr64 = LDRDui %stack.9.norm_temp1, 0, debug-location !409 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:300:26
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) %274:gpr64common = LDRSWui %stack.4.j, 0, debug-location !411 :: (dereferenceable load 4 from %ir.j); cg.c:300:41
  Ready @0c
  TopQ.A BotLatency SU(1) 11c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) %277:gpr64 = UBFMXri %274:gpr64common, 61, 60, debug-location !420; cg.c:301:39
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
Queue TopQ.P: 
Queue TopQ.A: 4 3 
BotQ.A RemLatency SU(3) 5c
  BotQ.A RemainingLatency 5 + 10c > CritPath 11
TopQ.A RemLatency SU(4) 6c
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %280:fpr64 = LDRDroX %354:gpr64common, %277:gpr64, 0, 0, debug-location !420 :: (load 8 from %ir.arrayidx130); cg.c:301:39
  Ready @10c
  BotQ.A BotLatency SU(4) 6c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %278:fpr64 = LDRDroX %360:gpr64common, %277:gpr64, 0, 0, debug-location !412 :: (load 8 from %ir.arrayidx122); cg.c:300:39
  Ready @11c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.40 ***
SU(1):   %274:gpr64common = LDRSWui %stack.4.j, 0, debug-location !411 :: (dereferenceable load 4 from %ir.j); cg.c:300:41
SU(2):   %277:gpr64 = UBFMXri %274:gpr64common, 61, 60, debug-location !420; cg.c:301:39
SU(3):   %278:fpr64 = LDRDroX %360:gpr64common, %277:gpr64, 0, 0, debug-location !412 :: (load 8 from %ir.arrayidx122); cg.c:300:39
SU(4):   %280:fpr64 = LDRDroX %354:gpr64common, %277:gpr64, 0, 0, debug-location !420 :: (load 8 from %ir.arrayidx130); cg.c:301:39
SU(0):   %273:fpr64 = LDRDui %stack.9.norm_temp1, 0, debug-location !409 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:300:26
SU(8):   %283:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !418 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:301:26
SU(12):   %286:gpr32common = nsw ADDWri %274.sub_32:gpr64common, 1, 0, debug-location !426; cg.c:299:50
SU(5):   %281:fpr64 = FMULDrr %278:fpr64, %280:fpr64, debug-location !415; cg.c:300:44
SU(9):   %284:fpr64 = FMULDrr %280:fpr64, %280:fpr64, debug-location !423; cg.c:301:44
SU(6):   %282:fpr64 = FADDDrr %273:fpr64, %281:fpr64, debug-location !416; cg.c:300:37
SU(10):   %285:fpr64 = FADDDrr %283:fpr64, %284:fpr64, debug-location !424; cg.c:301:37
SU(7):   STRDui %282:fpr64, %stack.9.norm_temp1, 0, debug-location !417 :: (store 8 into %ir.norm_temp1); cg.c:300:24
SU(11):   STRDui %285:fpr64, %stack.10.norm_temp2, 0, debug-location !425 :: (store 8 into %ir.norm_temp2); cg.c:301:24
SU(13):   STRWui %286:gpr32common, %stack.4.j, 0, debug-location !426 :: (store 4 into %ir.j); cg.c:299:50

********** MI Scheduling **********
main:%bb.41 for.end135
  From: %5:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !430 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:304:33
    To: Bcc 7, %bb.43, implicit killed $nzcv, debug-location !432; cg.c:304:26
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %5:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !430 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:304:33
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(1): Data Latency=4 Reg=%5
  Single Issue       : false;
SU(1):   %388:fpr64 = FSQRTDr %5:fpr64, debug-location !431; cg.c:304:28
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(0): Data Latency=4 Reg=%5
  Successors:
    SU(2): Data Latency=1 Reg=%388
  Single Issue       : false;
SU(2):   FCMPDrr %388:fpr64, %388:fpr64, implicit-def $nzcv, debug-location !432; cg.c:304:26
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=%388
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 7, %bb.43, implicit killed $nzcv, debug-location !432; cg.c:304:26
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) FCMPDrr %388:fpr64, %388:fpr64, implicit-def $nzcv, debug-location !432; cg.c:304:26
  Ready @1c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %388:fpr64 = FSQRTDr %5:fpr64, debug-location !431; cg.c:304:28
  Ready @2c
  BotQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %5:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !430 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:304:33
  Ready @6c
  BotQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.41 ***
SU(0):   %5:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !430 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:304:33
SU(1):   %388:fpr64 = FSQRTDr %5:fpr64, debug-location !431; cg.c:304:28
SU(2):   FCMPDrr %388:fpr64, %388:fpr64, implicit-def $nzcv, debug-location !432; cg.c:304:26

********** MI Scheduling **********
main:%bb.43 for.end135.split
  From: %238:fpr64 = FDIVDrr %313:fpr64, %388:fpr64, debug-location !432; cg.c:304:26
    To: Bcc 1, %bb.45, implicit killed $nzcv, debug-location !441; cg.c:307:13
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %238:fpr64 = FDIVDrr %313:fpr64, %388:fpr64, debug-location !432; cg.c:304:26
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%238
  Single Issue       : false;
SU(1):   STRDui %238:fpr64, %stack.10.norm_temp2, 0, debug-location !433 :: (store 8 into %ir.norm_temp2); cg.c:304:20
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%238
  Single Issue       : false;
SU(2):   %239:fpr64 = LDRDui %stack.9.norm_temp1, 0, debug-location !434 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:306:30
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(3): Data Latency=4 Reg=%239
  Single Issue       : false;
SU(3):   %240:fpr64 = FDIVDrr %313:fpr64, %239:fpr64, debug-location !435; cg.c:306:28
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(2): Data Latency=4 Reg=%239
  Successors:
    SU(5): Data Latency=1 Reg=%240
  Single Issue       : false;
SU(4):   %242:fpr64 = COPY %241:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=0 Reg=%242
  Single Issue       : false;
SU(5):   %243:fpr64 = FADDDrr %240:fpr64, %242:fpr64, debug-location !436; cg.c:306:22
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(3): Data Latency=1 Reg=%240
    SU(4): Data Latency=0 Reg=%242
  Successors:
    SU(6): Data Latency=1 Reg=%243
  Single Issue       : false;
SU(6):   STRDui %243:fpr64, %stack.7.zeta, 0, debug-location !437 :: (store 8 into %ir.zeta); cg.c:306:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%243
  Single Issue       : false;
SU(7):   %244:gpr32common = LDRWui %stack.6.it, 0, debug-location !438 :: (dereferenceable load 4 from %ir.it); cg.c:307:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(8): Data Latency=4 Reg=%244
  Single Issue       : false;
SU(8):   dead $wzr = SUBSWri %244:gpr32common, 1, 0, implicit-def $nzcv, debug-location !441; cg.c:307:13
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(7): Data Latency=4 Reg=%244
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.45, implicit killed $nzcv, debug-location !441; cg.c:307:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 8 
Queue BotQ.A: 6 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 7 
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) STRDui %243:fpr64, %stack.7.zeta, 0, debug-location !437 :: (store 8 into %ir.zeta); cg.c:306:14
  Ready @0c
  BotQ.A TopLatency SU(6) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 5 8 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 7 
BotQ.A RemLatency SU(5) 5c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) dead $wzr = SUBSWri %244:gpr32common, 1, 0, implicit-def $nzcv, debug-location !441; cg.c:307:13
  Ready @1c
  BotQ.A BotLatency SU(8) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 
Queue BotQ.A: 1 5 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 7 
BotQ.A RemLatency SU(5) 5c
  BotQ.A RemainingLatency 5 + 2c > CritPath 6
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(5) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) %243:fpr64 = FADDDrr %240:fpr64, %242:fpr64, debug-location !436; cg.c:306:22
  Ready @2c
  BotQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 
Queue BotQ.A: 1 3 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 7 
BotQ.A RemLatency SU(3) 4c
  BotQ.A RemainingLatency 4 + 3c > CritPath 6
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(3) %240:fpr64 = FDIVDrr %313:fpr64, %239:fpr64, debug-location !435; cg.c:306:28
  Ready @3c
  BotQ.A BotLatency SU(3) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 2 
Queue BotQ.A: 1 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 7 
BotQ.A RemLatency SU(1) 1c
  BotQ.A RemainingLatency 3 + 4c > CritPath 6
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) STRDui %238:fpr64, %stack.10.norm_temp2, 0, debug-location !433 :: (store 8 into %ir.norm_temp2); cg.c:304:20
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 4 0 7 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 7 
  BotQ.A RemainingLatency 2 + 5c > CritPath 6
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %244:gpr32common = LDRWui %stack.6.it, 0, debug-location !438 :: (dereferenceable load 4 from %ir.it); cg.c:307:13
  Ready @5c
  BotQ.A BotLatency SU(7) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 4 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 
  BotQ.A RemainingLatency 1 + 6c > CritPath 6
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %242:fpr64 = COPY %241:gpr64
  Ready @6c
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %238:fpr64 = FDIVDrr %313:fpr64, %388:fpr64, debug-location !432; cg.c:304:26
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %239:fpr64 = LDRDui %stack.9.norm_temp1, 0, debug-location !434 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:306:30
  Ready @7c
  BotQ.A BotLatency SU(2) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.43 ***
SU(2):   %239:fpr64 = LDRDui %stack.9.norm_temp1, 0, debug-location !434 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:306:30
SU(0):   %238:fpr64 = FDIVDrr %313:fpr64, %388:fpr64, debug-location !432; cg.c:304:26
SU(4):   %242:fpr64 = COPY %241:gpr64
SU(7):   %244:gpr32common = LDRWui %stack.6.it, 0, debug-location !438 :: (dereferenceable load 4 from %ir.it); cg.c:307:13
SU(1):   STRDui %238:fpr64, %stack.10.norm_temp2, 0, debug-location !433 :: (store 8 into %ir.norm_temp2); cg.c:304:20
SU(3):   %240:fpr64 = FDIVDrr %313:fpr64, %239:fpr64, debug-location !435; cg.c:306:28
SU(5):   %243:fpr64 = FADDDrr %240:fpr64, %242:fpr64, debug-location !436; cg.c:306:22
SU(8):   dead $wzr = SUBSWri %244:gpr32common, 1, 0, implicit-def $nzcv, debug-location !441; cg.c:307:13
SU(6):   STRDui %243:fpr64, %stack.7.zeta, 0, debug-location !437 :: (store 8 into %ir.zeta); cg.c:306:14

********** MI Scheduling **********
main:%bb.45 if.end143
  From: $x0 = COPY %251:gpr64, debug-location !446; cg.c:309:9
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0, debug-location !446; cg.c:309:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %251:gpr64, debug-location !446; cg.c:309:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $w1 = COPY %248:gpr32, debug-location !446; cg.c:309:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %249:fpr64, debug-location !446; cg.c:309:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $d1 = COPY %250:fpr64, debug-location !446; cg.c:309:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0, debug-location !446; cg.c:309:9
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $d1 = COPY %250:fpr64, debug-location !446; cg.c:309:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(2) $d0 = COPY %249:fpr64, debug-location !446; cg.c:309:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(1) $w1 = COPY %248:gpr32, debug-location !446; cg.c:309:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %251:gpr64, debug-location !446; cg.c:309:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   $x0 = COPY %251:gpr64, debug-location !446; cg.c:309:9
SU(1):   $w1 = COPY %248:gpr32, debug-location !446; cg.c:309:9
SU(2):   $d0 = COPY %249:fpr64, debug-location !446; cg.c:309:9
SU(3):   $d1 = COPY %250:fpr64, debug-location !446; cg.c:309:9

********** MI Scheduling **********
main:%bb.45 if.end143
  From: %248:gpr32 = LDRWui %stack.6.it, 0, debug-location !443 :: (dereferenceable load 4 from %ir.it); cg.c:309:50
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !446; cg.c:309:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %248:gpr32 = LDRWui %stack.6.it, 0, debug-location !443 :: (dereferenceable load 4 from %ir.it); cg.c:309:50
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %249:fpr64 = LDRDui %stack.8.rnorm, 0, debug-location !444 :: (dereferenceable load 8 from %ir.rnorm); cg.c:309:54
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %250:fpr64 = LDRDui %stack.7.zeta, 0, debug-location !445 :: (dereferenceable load 8 from %ir.zeta); cg.c:309:61
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !446; cg.c:309:9
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %250:fpr64 = LDRDui %stack.7.zeta, 0, debug-location !445 :: (dereferenceable load 8 from %ir.zeta); cg.c:309:61
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 1
  Executed: 4c
  Critical: 1c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 4c > CritPath 3
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %249:fpr64 = LDRDui %stack.8.rnorm, 0, debug-location !444 :: (dereferenceable load 8 from %ir.rnorm); cg.c:309:54
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %248:gpr32 = LDRWui %stack.6.it, 0, debug-location !443 :: (dereferenceable load 4 from %ir.it); cg.c:309:50
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   %248:gpr32 = LDRWui %stack.6.it, 0, debug-location !443 :: (dereferenceable load 4 from %ir.it); cg.c:309:50
SU(1):   %249:fpr64 = LDRDui %stack.8.rnorm, 0, debug-location !444 :: (dereferenceable load 8 from %ir.rnorm); cg.c:309:54
SU(2):   %250:fpr64 = LDRDui %stack.7.zeta, 0, debug-location !445 :: (dereferenceable load 8 from %ir.zeta); cg.c:309:61

********** MI Scheduling **********
main:%bb.46 for.cond145
  From: %254:gpr32 = LDRWui %stack.4.j, 0, debug-location !450 :: (dereferenceable load 4 from %ir.j); cg.c:314:21
    To: Bcc 10, %bb.48, implicit killed $nzcv, debug-location !457; cg.c:314:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %254:gpr32 = LDRWui %stack.4.j, 0, debug-location !450 :: (dereferenceable load 4 from %ir.j); cg.c:314:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=%254
  Single Issue       : false;
SU(1):   %256:gpr32 = LDRWui %34:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !452 :: (dereferenceable load 4 from @lastcol); cg.c:314:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%256
  Single Issue       : false;
SU(2):   %258:gpr32 = LDRWui %33:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !453 :: (dereferenceable load 4 from @firstcol); cg.c:314:35
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%258
  Single Issue       : false;
SU(3):   %259:gpr32common = nsw SUBWrr %256:gpr32, %258:gpr32, debug-location !454; cg.c:314:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(2): Data Latency=4 Reg=%258
    SU(1): Data Latency=4 Reg=%256
  Successors:
    SU(4): Data Latency=1 Reg=%259
  Single Issue       : false;
SU(4):   %260:gpr32common = nsw ADDWri %259:gpr32common, 1, 0, debug-location !455; cg.c:314:44
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1 Reg=%259
  Successors:
    SU(5): Data Latency=1 Reg=%260
  Single Issue       : false;
SU(5):   dead $wzr = SUBSWrr %254:gpr32, %260:gpr32common, implicit-def $nzcv, debug-location !457; cg.c:314:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%260
    SU(0): Data Latency=4 Reg=%254
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.48, implicit killed $nzcv, debug-location !457; cg.c:314:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) dead $wzr = SUBSWrr %254:gpr32, %260:gpr32common, implicit-def $nzcv, debug-location !457; cg.c:314:9
  Ready @1c
  BotQ.A TopLatency SU(5) 6c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %260:gpr32common = nsw ADDWri %259:gpr32common, 1, 0, debug-location !455; cg.c:314:44
  Ready @2c
  BotQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %259:gpr32common = nsw SUBWrr %256:gpr32, %258:gpr32, debug-location !454; cg.c:314:33
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 1 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %254:gpr32 = LDRWui %stack.4.j, 0, debug-location !450 :: (dereferenceable load 4 from %ir.j); cg.c:314:21
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %258:gpr32 = LDRWui %33:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !453 :: (dereferenceable load 4 from @firstcol); cg.c:314:35
  Ready @7c
  BotQ.A BotLatency SU(2) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %256:gpr32 = LDRWui %34:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !452 :: (dereferenceable load 4 from @lastcol); cg.c:314:25
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.46 ***
SU(1):   %256:gpr32 = LDRWui %34:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !452 :: (dereferenceable load 4 from @lastcol); cg.c:314:25
SU(2):   %258:gpr32 = LDRWui %33:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !453 :: (dereferenceable load 4 from @firstcol); cg.c:314:35
SU(0):   %254:gpr32 = LDRWui %stack.4.j, 0, debug-location !450 :: (dereferenceable load 4 from %ir.j); cg.c:314:21
SU(3):   %259:gpr32common = nsw SUBWrr %256:gpr32, %258:gpr32, debug-location !454; cg.c:314:33
SU(4):   %260:gpr32common = nsw ADDWri %259:gpr32common, 1, 0, debug-location !455; cg.c:314:44
SU(5):   dead $wzr = SUBSWrr %254:gpr32, %260:gpr32common, implicit-def $nzcv, debug-location !457; cg.c:314:9

********** MI Scheduling **********
main:%bb.47 for.body149
  From: %264:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !458 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:315:20
    To: B %bb.46, debug-location !467; cg.c:314:9
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %264:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !458 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:315:20
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=%264
  Single Issue       : false;
SU(1):   %265:gpr64common = LDRSWui %stack.4.j, 0, debug-location !460 :: (dereferenceable load 4 from %ir.j); cg.c:315:35
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(6): Data Latency=4 Reg=%265
    SU(2): Data Latency=4 Reg=%265
    SU(7): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %267:gpr64 = UBFMXri %265:gpr64common, 61, 60, debug-location !461; cg.c:315:33
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(1): Data Latency=4 Reg=%265
  Successors:
    SU(5): Data Latency=1 Reg=%267
    SU(3): Data Latency=1 Reg=%267
  Single Issue       : false;
SU(3):   %269:fpr64 = LDRDroX %354:gpr64common, %267:gpr64, 0, 0, debug-location !461 :: (load 8 from %ir.arrayidx151); cg.c:315:33
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(2): Data Latency=1 Reg=%267
  Successors:
    SU(4): Data Latency=4 Reg=%269
  Single Issue       : false;
SU(4):   %270:fpr64 = FMULDrr %264:fpr64, %269:fpr64, debug-location !462; cg.c:315:31
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%269
    SU(0): Data Latency=4 Reg=%264
  Successors:
    SU(5): Data Latency=1 Reg=%270
  Single Issue       : false;
SU(5):   STRDroX %270:fpr64, %360:gpr64common, %267:gpr64, 0, 0, debug-location !465 :: (store 8 into %ir.arrayidx154); cg.c:315:18
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%270
    SU(2): Data Latency=1 Reg=%267
  Single Issue       : false;
SU(6):   %272:gpr32common = nsw ADDWri %265.sub_32:gpr64common, 1, 0, debug-location !466; cg.c:314:50
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%265
  Successors:
    SU(7): Data Latency=1 Reg=%272
  Single Issue       : false;
SU(7):   STRWui %272:gpr32common, %stack.4.j, 0, debug-location !466 :: (store 4 into %ir.j); cg.c:314:50
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%272
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.46, debug-location !467; cg.c:314:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) STRWui %272:gpr32common, %stack.4.j, 0, debug-location !466 :: (store 4 into %ir.j); cg.c:314:50
  Ready @0c
  BotQ.A TopLatency SU(7) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(5) 10c
  BotQ.A RemainingLatency 10 + 1c > CritPath 10
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) STRDroX %270:fpr64, %360:gpr64common, %267:gpr64, 0, 0, debug-location !465 :: (store 8 into %ir.arrayidx154); cg.c:315:18
  Ready @1c
  BotQ.A TopLatency SU(5) 10c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(4) 9c
  BotQ.A RemainingLatency 9 + 2c > CritPath 10
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(4) BOT-PATH                  9 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) %270:fpr64 = FMULDrr %264:fpr64, %269:fpr64, debug-location !462; cg.c:315:31
  Ready @2c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 0 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %272:gpr32common = nsw ADDWri %265.sub_32:gpr64common, 1, 0, debug-location !466; cg.c:314:50
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(3) 5c
  BotQ.A RemainingLatency 5 + 6c > CritPath 10
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(3) %269:fpr64 = LDRDroX %354:gpr64common, %267:gpr64, 0, 0, debug-location !461 :: (load 8 from %ir.arrayidx151); cg.c:315:33
  Ready @6c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(2) 4c
  BotQ.A RemainingLatency 4 + 7c > CritPath 10
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) %267:gpr64 = UBFMXri %265:gpr64common, 61, 60, debug-location !461; cg.c:315:33
  Ready @7c
  BotQ.A BotLatency SU(2) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %264:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !458 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:315:20
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %265:gpr64common = LDRSWui %stack.4.j, 0, debug-location !460 :: (dereferenceable load 4 from %ir.j); cg.c:315:35
  Ready @11c
  BotQ.A BotLatency SU(1) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 8
  Executed: 12c
  Critical: 8c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.47 ***
SU(1):   %265:gpr64common = LDRSWui %stack.4.j, 0, debug-location !460 :: (dereferenceable load 4 from %ir.j); cg.c:315:35
SU(0):   %264:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !458 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:315:20
SU(2):   %267:gpr64 = UBFMXri %265:gpr64common, 61, 60, debug-location !461; cg.c:315:33
SU(3):   %269:fpr64 = LDRDroX %354:gpr64common, %267:gpr64, 0, 0, debug-location !461 :: (load 8 from %ir.arrayidx151); cg.c:315:33
SU(6):   %272:gpr32common = nsw ADDWri %265.sub_32:gpr64common, 1, 0, debug-location !466; cg.c:314:50
SU(4):   %270:fpr64 = FMULDrr %264:fpr64, %269:fpr64, debug-location !462; cg.c:315:31
SU(5):   STRDroX %270:fpr64, %360:gpr64common, %267:gpr64, 0, 0, debug-location !465 :: (store 8 into %ir.arrayidx154); cg.c:315:18
SU(7):   STRWui %272:gpr32common, %stack.4.j, 0, debug-location !466 :: (store 4 into %ir.j); cg.c:314:50

********** MI Scheduling **********
main:%bb.48 for.inc158
  From: %262:gpr32common = LDRWui %stack.6.it, 0, debug-location !470 :: (dereferenceable load 4 from %ir.it); cg.c:279:33
    To: B %bb.33, debug-location !471; cg.c:279:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %262:gpr32common = LDRWui %stack.6.it, 0, debug-location !470 :: (dereferenceable load 4 from %ir.it); cg.c:279:33
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%262
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %263:gpr32common = nsw ADDWri %262:gpr32common, 1, 0, debug-location !470; cg.c:279:33
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%262
  Successors:
    SU(2): Data Latency=1 Reg=%263
  Single Issue       : false;
SU(2):   STRWui %263:gpr32common, %stack.6.it, 0, debug-location !470 :: (store 4 into %ir.it); cg.c:279:33
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%263
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.33, debug-location !471; cg.c:279:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %263:gpr32common, %stack.6.it, 0, debug-location !470 :: (store 4 into %ir.it); cg.c:279:33
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %263:gpr32common = nsw ADDWri %262:gpr32common, 1, 0, debug-location !470; cg.c:279:33
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %262:gpr32common = LDRWui %stack.6.it, 0, debug-location !470 :: (dereferenceable load 4 from %ir.it); cg.c:279:33
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.48 ***
SU(0):   %262:gpr32common = LDRWui %stack.6.it, 0, debug-location !470 :: (dereferenceable load 4 from %ir.it); cg.c:279:33
SU(1):   %263:gpr32common = nsw ADDWri %262:gpr32common, 1, 0, debug-location !470; cg.c:279:33
SU(2):   STRWui %263:gpr32common, %stack.6.it, 0, debug-location !470 :: (store 4 into %ir.it); cg.c:279:33

********** MI Scheduling **********
main:%bb.49 do.end164
  From: %111:gpr64 = MOVi64imm 4457293557087583675
    To: Bcc 0, %bb.53, implicit killed $nzcv, debug-location !482; cg.c:332:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %111:gpr64 = MOVi64imm 4457293557087583675
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%111
  Single Issue       : false;
SU(1):   STRXui %111:gpr64, %stack.17.epsilon, 0, debug-location !478 :: (store 8 into %ir.epsilon); cg.c:331:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%111
  Single Issue       : false;
SU(2):   %112:gpr32common = LDRSBWui %stack.14.Class, 0, debug-location !479 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:332:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=%112
  Single Issue       : false;
SU(3):   dead $wzr = SUBSWri %112:gpr32common, 85, 0, implicit-def $nzcv, debug-location !482; cg.c:332:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=%112
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 0, %bb.53, implicit killed $nzcv, debug-location !482; cg.c:332:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRXui %111:gpr64, %stack.17.epsilon, 0, debug-location !478 :: (store 8 into %ir.epsilon); cg.c:331:13
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
BotQ.A RemLatency SU(3) 4c
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) dead $wzr = SUBSWri %112:gpr32common, 85, 0, implicit-def $nzcv, debug-location !482; cg.c:332:9
  Ready @1c
  BotQ.A TopLatency SU(3) 4c
  BotQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %111:gpr64 = MOVi64imm 4457293557087583675
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %112:gpr32common = LDRSBWui %stack.14.Class, 0, debug-location !479 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:332:9
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.49 ***
SU(2):   %112:gpr32common = LDRSBWui %stack.14.Class, 0, debug-location !479 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:332:9
SU(0):   %111:gpr64 = MOVi64imm 4457293557087583675
SU(3):   dead $wzr = SUBSWri %112:gpr32common, 85, 0, implicit-def $nzcv, debug-location !482; cg.c:332:9
SU(1):   STRXui %111:gpr64, %stack.17.epsilon, 0, debug-location !478 :: (store 8 into %ir.epsilon); cg.c:331:13

********** MI Scheduling **********
main:%bb.49 do.end164
  From: %109:gpr64 = MOVaddr target-flags(aarch64-page) @.str.12, target-flags(aarch64-pageoff, aarch64-nc) @.str.12, debug-location !477; cg.c:329:5
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !477; cg.c:329:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %109:gpr64 = MOVaddr target-flags(aarch64-page) @.str.12, target-flags(aarch64-pageoff, aarch64-nc) @.str.12, debug-location !477; cg.c:329:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%109
  Single Issue       : false;
SU(1):   $x0 = COPY %109:gpr64, debug-location !477; cg.c:329:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%109
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !477; cg.c:329:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %109:gpr64, debug-location !477; cg.c:329:5
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %109:gpr64 = MOVaddr target-flags(aarch64-page) @.str.12, target-flags(aarch64-pageoff, aarch64-nc) @.str.12, debug-location !477; cg.c:329:5
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.49 ***
SU(0):   %109:gpr64 = MOVaddr target-flags(aarch64-page) @.str.12, target-flags(aarch64-pageoff, aarch64-nc) @.str.12, debug-location !477; cg.c:329:5
SU(1):   $x0 = COPY %109:gpr64, debug-location !477; cg.c:329:5

********** MI Scheduling **********
main:%bb.49 do.end164
  From: %108:fpr64 = COPY $d0, debug-location !475; cg.c:327:9
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !477; cg.c:329:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %108:fpr64 = COPY $d0, debug-location !475; cg.c:327:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%108
  Single Issue       : false;
SU(1):   STRDui %108:fpr64, %stack.11.t, 0, debug-location !476 :: (store 8 into %ir.t); cg.c:327:7
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%108
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !477; cg.c:329:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %108:fpr64, %stack.11.t, 0, debug-location !476 :: (store 8 into %ir.t); cg.c:327:7
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %108:fpr64 = COPY $d0, debug-location !475; cg.c:327:9
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.49 ***
SU(0):   %108:fpr64 = COPY $d0, debug-location !475; cg.c:327:9
SU(1):   STRDui %108:fpr64, %stack.11.t, 0, debug-location !476 :: (store 8 into %ir.t); cg.c:327:7

********** MI Scheduling **********
main:%bb.50 if.then169
  From: %119:fpr64 = LDRDui %stack.7.zeta, 0, debug-location !483 :: (dereferenceable load 8 from %ir.zeta); cg.c:333:20
    To: Bcc 8, %bb.52, implicit killed $nzcv, debug-location !495; cg.c:334:13
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %119:fpr64 = LDRDui %stack.7.zeta, 0, debug-location !483 :: (dereferenceable load 8 from %ir.zeta); cg.c:333:20
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(2): Data Latency=4 Reg=%119
  Single Issue       : false;
SU(1):   %120:fpr64 = LDRDui %stack.16.zeta_verify_value, 0, debug-location !485 :: (dereferenceable load 8 from %ir.zeta_verify_value); cg.c:333:27
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%120
    SU(2): Data Latency=4 Reg=%120
  Single Issue       : false;
SU(2):   %121:fpr64 = FABD64 %119:fpr64, %120:fpr64, debug-location !487; cg.c:333:15
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=%120
    SU(0): Data Latency=4 Reg=%119
  Successors:
    SU(3): Data Latency=1 Reg=%121
  Single Issue       : false;
SU(3):   %122:fpr64 = FDIVDrr %121:fpr64, %120:fpr64, debug-location !489; cg.c:333:46
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(2): Data Latency=1 Reg=%121
    SU(1): Data Latency=4 Reg=%120
  Successors:
    SU(6): Data Latency=1 Reg=%122
    SU(4): Data Latency=1 Reg=%122
  Single Issue       : false;
SU(4):   STRDui %122:fpr64, %stack.18.err, 0, debug-location !490 :: (store 8 into %ir.err); cg.c:333:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%122
  Single Issue       : false;
SU(5):   %123:fpr64 = LDRDui %stack.17.epsilon, 0, debug-location !493 :: (dereferenceable load 8 from %ir.epsilon); cg.c:334:20
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(6): Data Latency=4 Reg=%123
  Single Issue       : false;
SU(6):   FCMPDrr %122:fpr64, %123:fpr64, implicit-def $nzcv, debug-location !495; cg.c:334:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(3): Data Latency=1 Reg=%122
    SU(5): Data Latency=4 Reg=%123
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 8, %bb.52, implicit killed $nzcv, debug-location !495; cg.c:334:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) STRDui %122:fpr64, %stack.18.err, 0, debug-location !490 :: (store 8 into %ir.err); cg.c:333:13
  Ready @0c
  BotQ.A TopLatency SU(4) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) FCMPDrr %122:fpr64, %123:fpr64, implicit-def $nzcv, debug-location !495; cg.c:334:13
  Ready @1c
  BotQ.A TopLatency SU(6) 6c
  BotQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %122:fpr64 = FDIVDrr %121:fpr64, %120:fpr64, debug-location !489; cg.c:333:46
  Ready @2c
  BotQ.A BotLatency SU(3) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %121:fpr64 = FABD64 %119:fpr64, %120:fpr64, debug-location !487; cg.c:333:15
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 0 1 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %123:fpr64 = LDRDui %stack.17.epsilon, 0, debug-location !493 :: (dereferenceable load 8 from %ir.epsilon); cg.c:334:20
  Ready @5c
  BotQ.A BotLatency SU(5) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %120:fpr64 = LDRDui %stack.16.zeta_verify_value, 0, debug-location !485 :: (dereferenceable load 8 from %ir.zeta_verify_value); cg.c:333:27
  Ready @7c
  BotQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %119:fpr64 = LDRDui %stack.7.zeta, 0, debug-location !483 :: (dereferenceable load 8 from %ir.zeta); cg.c:333:20
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.50 ***
SU(0):   %119:fpr64 = LDRDui %stack.7.zeta, 0, debug-location !483 :: (dereferenceable load 8 from %ir.zeta); cg.c:333:20
SU(1):   %120:fpr64 = LDRDui %stack.16.zeta_verify_value, 0, debug-location !485 :: (dereferenceable load 8 from %ir.zeta_verify_value); cg.c:333:27
SU(5):   %123:fpr64 = LDRDui %stack.17.epsilon, 0, debug-location !493 :: (dereferenceable load 8 from %ir.epsilon); cg.c:334:20
SU(2):   %121:fpr64 = FABD64 %119:fpr64, %120:fpr64, debug-location !487; cg.c:333:15
SU(3):   %122:fpr64 = FDIVDrr %121:fpr64, %120:fpr64, debug-location !489; cg.c:333:46
SU(6):   FCMPDrr %122:fpr64, %123:fpr64, implicit-def $nzcv, debug-location !495; cg.c:334:13
SU(4):   STRDui %122:fpr64, %stack.18.err, 0, debug-location !490 :: (store 8 into %ir.err); cg.c:333:13

********** MI Scheduling **********
main:%bb.51 if.then174
  From: %140:gpr64 = MOVaddr target-flags(aarch64-page) @.str.15, target-flags(aarch64-pageoff, aarch64-nc) @.str.15, debug-location !502; cg.c:338:13
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !502; cg.c:338:13
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %140:gpr64 = MOVaddr target-flags(aarch64-page) @.str.15, target-flags(aarch64-pageoff, aarch64-nc) @.str.15, debug-location !502; cg.c:338:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%140
  Single Issue       : false;
SU(1):   $x0 = COPY %140:gpr64, debug-location !502; cg.c:338:13
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%140
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %139:fpr64, debug-location !502; cg.c:338:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !502; cg.c:338:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $d0 = COPY %139:fpr64, debug-location !502; cg.c:338:13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %140:gpr64, debug-location !502; cg.c:338:13
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %140:gpr64 = MOVaddr target-flags(aarch64-page) @.str.15, target-flags(aarch64-pageoff, aarch64-nc) @.str.15, debug-location !502; cg.c:338:13
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.51 ***
SU(0):   %140:gpr64 = MOVaddr target-flags(aarch64-page) @.str.15, target-flags(aarch64-pageoff, aarch64-nc) @.str.15, debug-location !502; cg.c:338:13
SU(1):   $x0 = COPY %140:gpr64, debug-location !502; cg.c:338:13
SU(2):   $d0 = COPY %139:fpr64, debug-location !502; cg.c:338:13

********** MI Scheduling **********
main:%bb.51 if.then174
  From: %137:gpr64 = MOVaddr target-flags(aarch64-page) @.str.14, target-flags(aarch64-pageoff, aarch64-nc) @.str.14, debug-location !500; cg.c:337:13
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !500; cg.c:337:13
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %137:gpr64 = MOVaddr target-flags(aarch64-page) @.str.14, target-flags(aarch64-pageoff, aarch64-nc) @.str.14, debug-location !500; cg.c:337:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%137
  Single Issue       : false;
SU(1):   $x0 = COPY %137:gpr64, debug-location !500; cg.c:337:13
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%137
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %136:fpr64, debug-location !500; cg.c:337:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !500; cg.c:337:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $d0 = COPY %136:fpr64, debug-location !500; cg.c:337:13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %137:gpr64, debug-location !500; cg.c:337:13
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %137:gpr64 = MOVaddr target-flags(aarch64-page) @.str.14, target-flags(aarch64-pageoff, aarch64-nc) @.str.14, debug-location !500; cg.c:337:13
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.51 ***
SU(0):   %137:gpr64 = MOVaddr target-flags(aarch64-page) @.str.14, target-flags(aarch64-pageoff, aarch64-nc) @.str.14, debug-location !500; cg.c:337:13
SU(1):   $x0 = COPY %137:gpr64, debug-location !500; cg.c:337:13
SU(2):   $d0 = COPY %136:fpr64, debug-location !500; cg.c:337:13

********** MI Scheduling **********
main:%bb.51 if.then174
  From: %134:gpr64 = MOVaddr target-flags(aarch64-page) @.str.13, target-flags(aarch64-pageoff, aarch64-nc) @.str.13, debug-location !498; cg.c:336:13
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !498; cg.c:336:13
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %134:gpr64 = MOVaddr target-flags(aarch64-page) @.str.13, target-flags(aarch64-pageoff, aarch64-nc) @.str.13, debug-location !498; cg.c:336:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%134
  Single Issue       : false;
SU(1):   $x0 = COPY %134:gpr64, debug-location !498; cg.c:336:13
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%134
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !498; cg.c:336:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %134:gpr64, debug-location !498; cg.c:336:13
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %134:gpr64 = MOVaddr target-flags(aarch64-page) @.str.13, target-flags(aarch64-pageoff, aarch64-nc) @.str.13, debug-location !498; cg.c:336:13
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.51 ***
SU(0):   %134:gpr64 = MOVaddr target-flags(aarch64-page) @.str.13, target-flags(aarch64-pageoff, aarch64-nc) @.str.13, debug-location !498; cg.c:336:13
SU(1):   $x0 = COPY %134:gpr64, debug-location !498; cg.c:336:13

********** MI Scheduling **********
main:%bb.51 if.then174
  From: %133:gpr32 = MOVi32imm 1
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !498; cg.c:336:13
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %133:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%133
  Single Issue       : false;
SU(1):   STRWui %133:gpr32, %stack.15.verified, 0, debug-location !496 :: (store 4 into %ir.verified); cg.c:335:22
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%133
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !498; cg.c:336:13
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %133:gpr32, %stack.15.verified, 0, debug-location !496 :: (store 4 into %ir.verified); cg.c:335:22
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %133:gpr32 = MOVi32imm 1
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.51 ***
SU(0):   %133:gpr32 = MOVi32imm 1
SU(1):   STRWui %133:gpr32, %stack.15.verified, 0, debug-location !496 :: (store 4 into %ir.verified); cg.c:335:22

********** MI Scheduling **********
main:%bb.52 if.else178
  From: %131:gpr64 = MOVaddr target-flags(aarch64-page) @.str.18, target-flags(aarch64-pageoff, aarch64-nc) @.str.18, debug-location !510; cg.c:344:13
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !510; cg.c:344:13
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %131:gpr64 = MOVaddr target-flags(aarch64-page) @.str.18, target-flags(aarch64-pageoff, aarch64-nc) @.str.18, debug-location !510; cg.c:344:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%131
  Single Issue       : false;
SU(1):   $x0 = COPY %131:gpr64, debug-location !510; cg.c:344:13
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%131
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %130:fpr64, debug-location !510; cg.c:344:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !510; cg.c:344:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $d0 = COPY %130:fpr64, debug-location !510; cg.c:344:13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %131:gpr64, debug-location !510; cg.c:344:13
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %131:gpr64 = MOVaddr target-flags(aarch64-page) @.str.18, target-flags(aarch64-pageoff, aarch64-nc) @.str.18, debug-location !510; cg.c:344:13
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.52 ***
SU(0):   %131:gpr64 = MOVaddr target-flags(aarch64-page) @.str.18, target-flags(aarch64-pageoff, aarch64-nc) @.str.18, debug-location !510; cg.c:344:13
SU(1):   $x0 = COPY %131:gpr64, debug-location !510; cg.c:344:13
SU(2):   $d0 = COPY %130:fpr64, debug-location !510; cg.c:344:13

********** MI Scheduling **********
main:%bb.52 if.else178
  From: %128:gpr64 = MOVaddr target-flags(aarch64-page) @.str.17, target-flags(aarch64-pageoff, aarch64-nc) @.str.17, debug-location !508; cg.c:343:13
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !508; cg.c:343:13
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %128:gpr64 = MOVaddr target-flags(aarch64-page) @.str.17, target-flags(aarch64-pageoff, aarch64-nc) @.str.17, debug-location !508; cg.c:343:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%128
  Single Issue       : false;
SU(1):   $x0 = COPY %128:gpr64, debug-location !508; cg.c:343:13
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%128
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %127:fpr64, debug-location !508; cg.c:343:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !508; cg.c:343:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $d0 = COPY %127:fpr64, debug-location !508; cg.c:343:13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %128:gpr64, debug-location !508; cg.c:343:13
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %128:gpr64 = MOVaddr target-flags(aarch64-page) @.str.17, target-flags(aarch64-pageoff, aarch64-nc) @.str.17, debug-location !508; cg.c:343:13
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.52 ***
SU(0):   %128:gpr64 = MOVaddr target-flags(aarch64-page) @.str.17, target-flags(aarch64-pageoff, aarch64-nc) @.str.17, debug-location !508; cg.c:343:13
SU(1):   $x0 = COPY %128:gpr64, debug-location !508; cg.c:343:13
SU(2):   $d0 = COPY %127:fpr64, debug-location !508; cg.c:343:13

********** MI Scheduling **********
main:%bb.52 if.else178
  From: %125:gpr64 = MOVaddr target-flags(aarch64-page) @.str.16, target-flags(aarch64-pageoff, aarch64-nc) @.str.16, debug-location !506; cg.c:342:13
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !506; cg.c:342:13
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %125:gpr64 = MOVaddr target-flags(aarch64-page) @.str.16, target-flags(aarch64-pageoff, aarch64-nc) @.str.16, debug-location !506; cg.c:342:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%125
  Single Issue       : false;
SU(1):   $x0 = COPY %125:gpr64, debug-location !506; cg.c:342:13
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%125
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !506; cg.c:342:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %125:gpr64, debug-location !506; cg.c:342:13
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %125:gpr64 = MOVaddr target-flags(aarch64-page) @.str.16, target-flags(aarch64-pageoff, aarch64-nc) @.str.16, debug-location !506; cg.c:342:13
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.52 ***
SU(0):   %125:gpr64 = MOVaddr target-flags(aarch64-page) @.str.16, target-flags(aarch64-pageoff, aarch64-nc) @.str.16, debug-location !506; cg.c:342:13
SU(1):   $x0 = COPY %125:gpr64, debug-location !506; cg.c:342:13

********** MI Scheduling **********
main:%bb.53 if.else183
  From: %117:gpr64 = MOVaddr target-flags(aarch64-page) @.str.20, target-flags(aarch64-pageoff, aarch64-nc) @.str.20, debug-location !514; cg.c:350:9
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !514; cg.c:350:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %117:gpr64 = MOVaddr target-flags(aarch64-page) @.str.20, target-flags(aarch64-pageoff, aarch64-nc) @.str.20, debug-location !514; cg.c:350:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%117
  Single Issue       : false;
SU(1):   $x0 = COPY %117:gpr64, debug-location !514; cg.c:350:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%117
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !514; cg.c:350:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %117:gpr64, debug-location !514; cg.c:350:9
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %117:gpr64 = MOVaddr target-flags(aarch64-page) @.str.20, target-flags(aarch64-pageoff, aarch64-nc) @.str.20, debug-location !514; cg.c:350:9
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.53 ***
SU(0):   %117:gpr64 = MOVaddr target-flags(aarch64-page) @.str.20, target-flags(aarch64-pageoff, aarch64-nc) @.str.20, debug-location !514; cg.c:350:9
SU(1):   $x0 = COPY %117:gpr64, debug-location !514; cg.c:350:9

********** MI Scheduling **********
main:%bb.53 if.else183
  From: %115:gpr64 = MOVaddr target-flags(aarch64-page) @.str.19, target-flags(aarch64-pageoff, aarch64-nc) @.str.19, debug-location !513; cg.c:349:9
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !513; cg.c:349:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %115:gpr64 = MOVaddr target-flags(aarch64-page) @.str.19, target-flags(aarch64-pageoff, aarch64-nc) @.str.19, debug-location !513; cg.c:349:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%115
  Single Issue       : false;
SU(1):   $x0 = COPY %115:gpr64, debug-location !513; cg.c:349:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%115
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !513; cg.c:349:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %115:gpr64, debug-location !513; cg.c:349:9
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %115:gpr64 = MOVaddr target-flags(aarch64-page) @.str.19, target-flags(aarch64-pageoff, aarch64-nc) @.str.19, debug-location !513; cg.c:349:9
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.53 ***
SU(0):   %115:gpr64 = MOVaddr target-flags(aarch64-page) @.str.19, target-flags(aarch64-pageoff, aarch64-nc) @.str.19, debug-location !513; cg.c:349:9
SU(1):   $x0 = COPY %115:gpr64, debug-location !513; cg.c:349:9

********** MI Scheduling **********
main:%bb.54 if.end186
  From: %142:fpr64 = LDRDui %stack.11.t, 0, debug-location !515 :: (dereferenceable load 8 from %ir.t); cg.c:353:9
    To: Bcc 0, %bb.56, implicit killed $nzcv, debug-location !518; cg.c:353:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %142:fpr64 = LDRDui %stack.11.t, 0, debug-location !515 :: (dereferenceable load 8 from %ir.t); cg.c:353:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%142
  Single Issue       : false;
SU(1):   FCMPDri %142:fpr64, implicit-def $nzcv, debug-location !518; cg.c:353:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%142
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 0, %bb.56, implicit killed $nzcv, debug-location !518; cg.c:353:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) FCMPDri %142:fpr64, implicit-def $nzcv, debug-location !518; cg.c:353:9
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %142:fpr64 = LDRDui %stack.11.t, 0, debug-location !515 :: (dereferenceable load 8 from %ir.t); cg.c:353:9
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.54 ***
SU(0):   %142:fpr64 = LDRDui %stack.11.t, 0, debug-location !515 :: (dereferenceable load 8 from %ir.t); cg.c:353:9
SU(1):   FCMPDri %142:fpr64, implicit-def $nzcv, debug-location !518; cg.c:353:9

********** MI Scheduling **********
main:%bb.55 if.then189
  From: %144:fpr64 = LDRDui %stack.11.t, 0, debug-location !519 :: (dereferenceable load 8 from %ir.t); cg.c:357:18
    To: B %bb.57, debug-location !524; cg.c:358:5
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Constraining copy SU(5)
SU(0):   %144:fpr64 = LDRDui %stack.11.t, 0, debug-location !519 :: (dereferenceable load 8 from %ir.t); cg.c:357:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(3): Data Latency=4 Reg=%144
  Single Issue       : false;
SU(1):   %145:gpr64common = ADRP target-flags(aarch64-page) %const.1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 7
  Successors:
    SU(2): Data Latency=1 Reg=%145
  Single Issue       : false;
SU(2):   %146:fpr64 = LDRDui %145:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 6
  Predecessors:
    SU(1): Data Latency=1 Reg=%145
  Successors:
    SU(3): Data Latency=4 Reg=%146
  Single Issue       : false;
SU(3):   %147:fpr64 = FDIVDrr %146:fpr64, %144:fpr64, debug-location !521; cg.c:356:73
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(2): Data Latency=4 Reg=%146
    SU(0): Data Latency=4 Reg=%144
  Successors:
    SU(6): Data Latency=1 Reg=%147
  Single Issue       : false;
SU(4):   %148:gpr64 = MOVi64imm 4696837146684686336
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Data Latency=1 Reg=%148
  Single Issue       : false;
SU(5):   %149:fpr64 = COPY %148:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%148
  Successors:
    SU(6): Data Latency=0 Reg=%149
  Single Issue       : false;
SU(6):   %150:fpr64 = FDIVDrr %147:fpr64, %149:fpr64, debug-location !522; cg.c:357:20
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(3): Data Latency=1 Reg=%147
    SU(5): Data Latency=0 Reg=%149
  Successors:
    SU(7): Data Latency=1 Reg=%150
  Single Issue       : false;
SU(7):   STRDui %150:fpr64, %stack.12.mflops, 0, debug-location !523 :: (store 8 into %ir.mflops); cg.c:354:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%150
  Single Issue       : false;
ExitSU:   B %bb.57, debug-location !524; cg.c:358:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) STRDui %150:fpr64, %stack.12.mflops, 0, debug-location !523 :: (store 8 into %ir.mflops); cg.c:354:16
  Ready @0c
  BotQ.A TopLatency SU(7) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %150:fpr64 = FDIVDrr %147:fpr64, %149:fpr64, debug-location !522; cg.c:357:20
  Ready @1c
  BotQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 
BotQ.A RemLatency SU(3) 5c
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %149:fpr64 = COPY %148:gpr64
  Ready @2c
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %147:fpr64 = FDIVDrr %146:fpr64, %144:fpr64, debug-location !521; cg.c:356:73
  Ready @2c
  BotQ.A BotLatency SU(3) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 2 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %148:gpr64 = MOVi64imm 4696837146684686336
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(2) 1c
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %146:fpr64 = LDRDui %145:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  Ready @6c
  BotQ.A BotLatency SU(2) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %145:gpr64common = ADRP target-flags(aarch64-page) %const.1
  Ready @7c
  BotQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %144:fpr64 = LDRDui %stack.11.t, 0, debug-location !519 :: (dereferenceable load 8 from %ir.t); cg.c:357:18
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.55 ***
SU(0):   %144:fpr64 = LDRDui %stack.11.t, 0, debug-location !519 :: (dereferenceable load 8 from %ir.t); cg.c:357:18
SU(1):   %145:gpr64common = ADRP target-flags(aarch64-page) %const.1
SU(2):   %146:fpr64 = LDRDui %145:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
SU(4):   %148:gpr64 = MOVi64imm 4696837146684686336
SU(3):   %147:fpr64 = FDIVDrr %146:fpr64, %144:fpr64, debug-location !521; cg.c:356:73
SU(5):   %149:fpr64 = COPY %148:gpr64
SU(6):   %150:fpr64 = FDIVDrr %147:fpr64, %149:fpr64, debug-location !522; cg.c:357:20
SU(7):   STRDui %150:fpr64, %stack.12.mflops, 0, debug-location !523 :: (store 8 into %ir.mflops); cg.c:354:16

********** MI Scheduling **********
main:%bb.57 if.end193
  From: %155:gpr64 = MOVaddr target-flags(aarch64-page) @.str.31, target-flags(aarch64-pageoff, aarch64-nc) @.str.31, debug-location !531; cg.c:363:5
    To: BL @print_results, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit killed $w4, implicit killed $w5, implicit $d0, implicit killed $d1, implicit killed $x6, implicit killed $w7, implicit-def $sp, debug-location !531; cg.c:363:5
 RegionInstrs: 30
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR32arg=8
tcGPR64=8
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=8
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
Live In: %154 %153 %152 %151 
Live Out: 
Live Thru: 
Top Pressure:
FPR8=2
GPR32=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
Bottom Pressure:
GPR32arg=8
tcGPR64=8
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=8
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
Excess PSets: 
Cluster ld/st SU(17) - SU(15)
Cluster ld/st SU(13) - SU(11)
Cluster ld/st SU(9) - SU(7)
Cluster ld/st SU(5) - SU(3)
SU(0):   %155:gpr64 = MOVaddr target-flags(aarch64-page) @.str.31, target-flags(aarch64-pageoff, aarch64-nc) @.str.31, debug-location !531; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%155
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   STRXui %155:gpr64, $sp, 8, debug-location !531 :: (store 8 into stack + 64); cg.c:363:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%155
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(2):   %157:gpr64 = MOVaddr target-flags(aarch64-page) @.str.30, target-flags(aarch64-pageoff, aarch64-nc) @.str.30, debug-location !531; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%157
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(3):   STRXui %157:gpr64, $sp, 7, debug-location !531 :: (store 8 into stack + 56); cg.c:363:5
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%157
    SU(5): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(4):   %158:gpr64 = MOVaddr target-flags(aarch64-page) @.str.29, target-flags(aarch64-pageoff, aarch64-nc) @.str.29, debug-location !531; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%158
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(5):   STRXui %158:gpr64, $sp, 6, debug-location !531 :: (store 8 into stack + 48); cg.c:363:5
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%158
  Successors:
    SU(3): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(6):   %159:gpr64 = MOVaddr target-flags(aarch64-page) @.str.28, target-flags(aarch64-pageoff, aarch64-nc) @.str.28, debug-location !531; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%159
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   STRXui %159:gpr64, $sp, 5, debug-location !531 :: (store 8 into stack + 40); cg.c:363:5
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%159
    SU(9): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(8):   %160:gpr64 = MOVaddr target-flags(aarch64-page) @.str.27, target-flags(aarch64-pageoff, aarch64-nc) @.str.27, debug-location !531; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(9): Data Latency=1 Reg=%160
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(9):   STRXui %160:gpr64, $sp, 4, debug-location !531 :: (store 8 into stack + 32); cg.c:363:5
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%160
  Successors:
    SU(7): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(10):   %161:gpr64 = MOVaddr target-flags(aarch64-page) @.str.26, target-flags(aarch64-pageoff, aarch64-nc) @.str.26, debug-location !531; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(11): Data Latency=1 Reg=%161
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(11):   STRXui %161:gpr64, $sp, 3, debug-location !531 :: (store 8 into stack + 24); cg.c:363:5
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%161
    SU(13): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(12):   %162:gpr64 = MOVaddr target-flags(aarch64-page) @.str.25, target-flags(aarch64-pageoff, aarch64-nc) @.str.25, debug-location !531; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(13): Data Latency=1 Reg=%162
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(13):   STRXui %162:gpr64, $sp, 2, debug-location !531 :: (store 8 into stack + 16); cg.c:363:5
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%162
  Successors:
    SU(11): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(14):   %163:gpr64 = MOVaddr target-flags(aarch64-page) @.str.24, target-flags(aarch64-pageoff, aarch64-nc) @.str.24, debug-location !531; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(15): Data Latency=1 Reg=%163
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(15):   STRXui %163:gpr64, $sp, 1, debug-location !531 :: (store 8 into stack + 8); cg.c:363:5
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(14): Data Latency=1 Reg=%163
    SU(17): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(16):   %164:gpr64 = MOVaddr target-flags(aarch64-page) @.str.23, target-flags(aarch64-pageoff, aarch64-nc) @.str.23, debug-location !531; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(17): Data Latency=1 Reg=%164
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(17):   STRXui %164:gpr64, $sp, 0, debug-location !531 :: (store 8 into stack); cg.c:363:5
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(16): Data Latency=1 Reg=%164
  Successors:
    SU(15): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(18):   %165:gpr64 = MOVaddr target-flags(aarch64-page) @.str.21, target-flags(aarch64-pageoff, aarch64-nc) @.str.21, debug-location !531; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(20): Data Latency=1 Reg=%165
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(19):   %166:gpr64 = MOVaddr target-flags(aarch64-page) @.str.22, target-flags(aarch64-pageoff, aarch64-nc) @.str.22, debug-location !531; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(28): Data Latency=1 Reg=%166
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(20):   $x0 = COPY %165:gpr64, debug-location !531; cg.c:363:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(18): Data Latency=1 Reg=%165
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1
  Single Issue       : false;
SU(21):   $w1 = COPY %151:gpr32, debug-location !531; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1
  Single Issue       : false;
SU(22):   $w2 = MOVi32imm 75000, debug-location !531; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1    GPR32 -1
  Single Issue       : false;
SU(23):   $w3 = COPY $wzr, debug-location !531; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1    GPR32 -1
  Single Issue       : false;
SU(24):   $w4 = COPY $wzr, debug-location !531; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1    GPR32 -1
  Single Issue       : false;
SU(25):   $w5 = MOVi32imm 75, debug-location !531; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1    GPR32 -1
  Single Issue       : false;
SU(26):   $d0 = COPY %152:fpr64, debug-location !531; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : FPR128_lo -1    ZPR_3b -1    FPR128_lo+ZPR_3b -1    QQ_with_qsub1_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR4_with_zsub3_in_ZPR_4b -1    ZPR4_with_zsub_in_FPR128_lo -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1
  Single Issue       : false;
SU(27):   $d1 = COPY %153:fpr64, debug-location !531; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : FPR128_lo -1    ZPR_3b -1    FPR128_lo+ZPR_3b -1    QQ_with_qsub1_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR4_with_zsub3_in_ZPR_4b -1    ZPR4_with_zsub_in_FPR128_lo -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1
  Single Issue       : false;
SU(28):   $x6 = COPY %166:gpr64, debug-location !531; cg.c:363:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(19): Data Latency=1 Reg=%166
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1
  Single Issue       : false;
SU(29):   $w7 = COPY %154:gpr32, debug-location !531; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1
  Single Issue       : false;
ExitSU:   BL @print_results, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit killed $w4, implicit killed $w5, implicit $d0, implicit killed $d1, implicit killed $x6, implicit killed $w7, implicit-def $sp, debug-location !531; cg.c:363:5
  # preds left       : 10
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(29): Ord  Latency=0 Artificial
    SU(28): Ord  Latency=0 Artificial
    SU(27): Ord  Latency=0 Artificial
    SU(26): Ord  Latency=0 Artificial
    SU(25): Ord  Latency=1 Artificial
    SU(24): Ord  Latency=0 Artificial
    SU(23): Ord  Latency=0 Artificial
    SU(22): Ord  Latency=1 Artificial
    SU(21): Ord  Latency=0 Artificial
    SU(20): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 25 22 
Queue BotQ.A: 17 15 13 11 9 7 5 3 1 29 28 27 26 24 23 21 20 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 24 25 26 27 29 
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(15) WEAK                               
  Cand SU(29) PHYS-REG                           
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(23) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(29) $w7 = COPY %154:gpr32, debug-location !531; cg.c:363:5
Bottom Pressure:
GPR32arg=7
tcGPR64=7
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=8
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  LiveReg: %154
  UpdateRegP: SU(29) $w7 = COPY %154:gpr32, debug-location !531; cg.c:363:5
              to GPR32arg -1    tcGPR64 -1    GPR32 -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 25 22 
Queue BotQ.A: 17 15 13 11 9 7 5 3 1 20 28 27 26 24 23 21 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 24 25 26 27 
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(15) WEAK                               
  Cand SU(20) PHYS-REG                           
  Cand SU(28) ORDER                              
Picking from Top:
  Cand SU(23) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(28) $x6 = COPY %166:gpr64, debug-location !531; cg.c:363:5
Bottom Pressure:
GPR32arg=6
tcGPR64=6
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=8
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  LiveReg: %166
  UpdateRegP: SU(28) $x6 = COPY %166:gpr64, debug-location !531; cg.c:363:5
              to GPR32arg -1    tcGPR64 -1    GPR32 -1
  Ready @0c
  BotQ.A TopLatency SU(28) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 25 22 19 
Queue BotQ.A: 17 15 13 11 9 7 5 3 1 20 21 27 26 24 23 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 24 25 26 27 
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(15) WEAK                               
  Cand SU(20) PHYS-REG                           
  Cand SU(21) ORDER                              
  Cand SU(24) ORDER                              
Picking from Top:
  Cand SU(23) NOCAND                             
Pick Bot ORDER     
Scheduling SU(24) $w4 = COPY $wzr, debug-location !531; cg.c:363:5
Bottom Pressure:
GPR32arg=5
tcGPR64=5
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=7
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 25 22 19 
Queue BotQ.A: 17 15 13 11 9 7 5 3 1 20 21 27 26 23 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 27 25 26 
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(15) WEAK                               
  Cand SU(20) PHYS-REG                           
  Cand SU(21) ORDER                              
  Cand SU(23) ORDER                              
Picking from Top:
  Cand SU(23) NOCAND                             
Pick Bot ORDER     
Scheduling SU(23) $w3 = COPY $wzr, debug-location !531; cg.c:363:5
Bottom Pressure:
GPR32arg=4
tcGPR64=4
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=6
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 25 22 19 
Queue BotQ.A: 17 15 13 11 9 7 5 3 1 20 21 27 26 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 26 27 25 
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(15) WEAK                               
  Cand SU(20) PHYS-REG                           
  Cand SU(21) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(21) $w1 = COPY %151:gpr32, debug-location !531; cg.c:363:5
Bottom Pressure:
GPR32arg=3
tcGPR64=3
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=6
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  LiveReg: %151
  UpdateRegP: SU(21) $w1 = COPY %151:gpr32, debug-location !531; cg.c:363:5
              to GPR32arg -1    tcGPR64 -1    GPR32 -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 25 22 19 
Queue BotQ.A: 17 15 13 11 9 7 5 3 1 20 26 27 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 25 22 26 27 
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(15) WEAK                               
  Cand SU(20) PHYS-REG                           
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(20) $x0 = COPY %165:gpr64, debug-location !531; cg.c:363:5
Bottom Pressure:
GPR32arg=2
tcGPR64=2
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=6
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  LiveReg: %165
  UpdateRegP: SU(20) $x0 = COPY %165:gpr64, debug-location !531; cg.c:363:5
              to GPR32arg -1    tcGPR64 -1    GPR32 -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 25 22 19 18 
Queue BotQ.A: 17 15 13 11 9 7 5 3 1 27 26 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 25 22 26 27 
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(15) WEAK                               
  Cand SU(27) PHYS-REG                           
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(27) $d1 = COPY %153:fpr64, debug-location !531; cg.c:363:5
Bottom Pressure:
GPR32arg=2
tcGPR64=2
FPR128_lo=1
ZPR_3b=1
FPR128_lo+ZPR_3b=1
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=1
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=1
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=1
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=1
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=1
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=1
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=1
GPR32=6
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR4_with_zsub3_in_ZPR_4b=1
ZPR4_with_zsub_in_FPR128_lo=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=1
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %153
  UpdateRegP: SU(27) $d1 = COPY %153:fpr64, debug-location !531; cg.c:363:5
              to FPR128_lo -1    ZPR_3b -1    FPR128_lo+ZPR_3b -1    QQ_with_qsub1_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8 -1    FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR4_with_zsub3_in_ZPR_4b -1    ZPR4_with_zsub_in_FPR128_lo -1    FPR8+ZPR_3b -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 25 22 19 18 
Queue BotQ.A: 17 15 13 11 9 7 5 3 1 26 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 25 22 26 
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(15) WEAK                               
  Cand SU(26) PHYS-REG                           
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(26) $d0 = COPY %152:fpr64, debug-location !531; cg.c:363:5
Bottom Pressure:
GPR32arg=2
tcGPR64=2
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %152
  UpdateRegP: SU(26) $d0 = COPY %152:fpr64, debug-location !531; cg.c:363:5
              to FPR128_lo -1    ZPR_3b -1    FPR128_lo+ZPR_3b -1    QQ_with_qsub1_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8 -1    FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR4_with_zsub3_in_ZPR_4b -1    ZPR4_with_zsub_in_FPR128_lo -1    FPR8+ZPR_3b -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 25 22 19 18 
Queue BotQ.A: 17 15 13 11 9 7 5 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 25 22 
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(15) WEAK                               
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(15) STRXui %163:gpr64, $sp, 1, debug-location !531 :: (store 8 into stack + 8); cg.c:363:5
Bottom Pressure:
GPR32arg=2
tcGPR64=2
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %163
  UpdateRegP: SU(15) STRXui %163:gpr64, $sp, 1, debug-location !531 :: (store 8 into stack + 8); cg.c:363:5
              to 
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 1 13 11 9 7 5 3 14 25 18 19 22 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 25 22 
BotQ.A RemLatency SU(17) 1c
  BotQ.A RemainingLatency 1 + 1c > CritPath 1
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(25) PHYS-REG                           
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(25) $w5 = MOVi32imm 75, debug-location !531; cg.c:363:5
Bottom Pressure:
GPR32arg=1
tcGPR64=1
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  Ready @1c
  BotQ.A BotLatency SU(25) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 1 13 11 9 7 5 3 14 22 18 19 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 22 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(22) PHYS-REG                           
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(22) $w2 = MOVi32imm 75000, debug-location !531; cg.c:363:5
Bottom Pressure:
FPR8=2
GPR32=5
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 1 13 11 9 7 5 3 14 19 18 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Cand SU(17) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(17) STRXui %164:gpr64, $sp, 0, debug-location !531 :: (store 8 into stack); cg.c:363:5
Bottom Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %164
  UpdateRegP: SU(17) STRXui %164:gpr64, $sp, 0, debug-location !531 :: (store 8 into stack); cg.c:363:5
              to 
  Ready @3c
  BotQ.A TopLatency SU(17) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 1 13 11 9 7 5 3 14 19 16 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 
  BotQ.A RemainingLatency 0 + 4c > CritPath 1
Picking from Bot:
  Cand SU(18) ORDER                              
  Cand SU(1) BOT-PATH                  1 cycles 
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(11) STRXui %161:gpr64, $sp, 3, debug-location !531 :: (store 8 into stack + 24); cg.c:363:5
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %161
  UpdateRegP: SU(11) STRXui %161:gpr64, $sp, 3, debug-location !531 :: (store 8 into stack + 24); cg.c:363:5
              to 
  Ready @4c
  BotQ.A TopLatency SU(11) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 1 13 16 9 7 5 3 14 19 10 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 
  BotQ.A RemainingLatency 0 + 5c > CritPath 1
Picking from Bot:
  Cand SU(18) ORDER                              
  Cand SU(1) BOT-PATH                  1 cycles 
  Cand SU(13) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(13) STRXui %162:gpr64, $sp, 2, debug-location !531 :: (store 8 into stack + 16); cg.c:363:5
Bottom Pressure:
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %162
  UpdateRegP: SU(13) STRXui %162:gpr64, $sp, 2, debug-location !531 :: (store 8 into stack + 16); cg.c:363:5
              to 
  Ready @5c
  BotQ.A TopLatency SU(13) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 1 10 16 9 7 5 3 14 19 12 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 
  BotQ.A RemainingLatency 0 + 6c > CritPath 1
Picking from Bot:
  Cand SU(18) ORDER                              
  Cand SU(19) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(19) %166:gpr64 = MOVaddr target-flags(aarch64-page) @.str.22, target-flags(aarch64-pageoff, aarch64-nc) @.str.22, debug-location !531; cg.c:363:5
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 1 10 16 9 7 5 3 14 12 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 
  BotQ.A RemainingLatency 0 + 7c > CritPath 1
Picking from Bot:
  Cand SU(18) ORDER                              
  Cand SU(1) BOT-PATH                  1 cycles 
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(7) STRXui %159:gpr64, $sp, 5, debug-location !531 :: (store 8 into stack + 40); cg.c:363:5
Bottom Pressure:
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %159
  UpdateRegP: SU(7) STRXui %159:gpr64, $sp, 5, debug-location !531 :: (store 8 into stack + 40); cg.c:363:5
              to 
  Ready @7c
  BotQ.A TopLatency SU(7) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 1 10 16 9 12 5 3 14 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 
  BotQ.A RemainingLatency 0 + 8c > CritPath 1
Picking from Bot:
  Cand SU(18) ORDER                              
  Cand SU(9) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(9) STRXui %160:gpr64, $sp, 4, debug-location !531 :: (store 8 into stack + 32); cg.c:363:5
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %160
  UpdateRegP: SU(9) STRXui %160:gpr64, $sp, 4, debug-location !531 :: (store 8 into stack + 32); cg.c:363:5
              to 
  Ready @8c
  BotQ.A TopLatency SU(9) 1c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 1 10 16 6 12 5 3 14 8 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 
  BotQ.A RemainingLatency 0 + 9c > CritPath 1
Picking from Bot:
  Cand SU(18) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(18) %165:gpr64 = MOVaddr target-flags(aarch64-page) @.str.21, target-flags(aarch64-pageoff, aarch64-nc) @.str.21, debug-location !531; cg.c:363:5
Bottom Pressure:
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 1 10 16 6 12 5 3 14 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 
  BotQ.A RemainingLatency 0 + 10c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(1) BOT-PATH                  1 cycles 
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(3) STRXui %157:gpr64, $sp, 7, debug-location !531 :: (store 8 into stack + 56); cg.c:363:5
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %157
  UpdateRegP: SU(3) STRXui %157:gpr64, $sp, 7, debug-location !531 :: (store 8 into stack + 56); cg.c:363:5
              to 
  Ready @10c
  BotQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 1 10 16 6 12 5 14 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 
  BotQ.A RemainingLatency 0 + 11c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(5) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(5) STRXui %158:gpr64, $sp, 6, debug-location !531 :: (store 8 into stack + 48); cg.c:363:5
Bottom Pressure:
FPR8=2
GPR32=10
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %158
  UpdateRegP: SU(5) STRXui %158:gpr64, $sp, 6, debug-location !531 :: (store 8 into stack + 48); cg.c:363:5
              to 
  Ready @11c
  BotQ.A TopLatency SU(5) 1c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 1 10 16 6 12 2 14 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 
  BotQ.A RemainingLatency 0 + 12c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(16) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(16) %164:gpr64 = MOVaddr target-flags(aarch64-page) @.str.23, target-flags(aarch64-pageoff, aarch64-nc) @.str.23, debug-location !531; cg.c:363:5
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 1 10 4 6 12 2 14 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 
  BotQ.A RemainingLatency 0 + 13c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(1) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) STRXui %155:gpr64, $sp, 8, debug-location !531 :: (store 8 into stack + 64); cg.c:363:5
Bottom Pressure:
FPR8=2
GPR32=10
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %155
  UpdateRegP: SU(1) STRXui %155:gpr64, $sp, 8, debug-location !531 :: (store 8 into stack + 64); cg.c:363:5
              to 
  Ready @13c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 14 10 4 6 12 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 
  BotQ.A RemainingLatency 0 + 14c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(14) %163:gpr64 = MOVaddr target-flags(aarch64-page) @.str.24, target-flags(aarch64-pageoff, aarch64-nc) @.str.24, debug-location !531; cg.c:363:5
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 0 10 4 6 12 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 
  BotQ.A RemainingLatency 0 + 15c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(12) %162:gpr64 = MOVaddr target-flags(aarch64-page) @.str.25, target-flags(aarch64-pageoff, aarch64-nc) @.str.25, debug-location !531; cg.c:363:5
Bottom Pressure:
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @15c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 0 10 4 6 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 
  BotQ.A RemainingLatency 0 + 16c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(10) %161:gpr64 = MOVaddr target-flags(aarch64-page) @.str.26, target-flags(aarch64-pageoff, aarch64-nc) @.str.26, debug-location !531; cg.c:363:5
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 0 2 4 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 
  BotQ.A RemainingLatency 0 + 17c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %160:gpr64 = MOVaddr target-flags(aarch64-page) @.str.27, target-flags(aarch64-pageoff, aarch64-nc) @.str.27, debug-location !531; cg.c:363:5
Bottom Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 0 2 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 
  BotQ.A RemainingLatency 0 + 18c > CritPath 1
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %159:gpr64 = MOVaddr target-flags(aarch64-page) @.str.28, target-flags(aarch64-pageoff, aarch64-nc) @.str.28, debug-location !531; cg.c:363:5
Bottom Pressure:
FPR8=2
GPR32=5
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 0 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 
  BotQ.A RemainingLatency 0 + 19c > CritPath 1
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %158:gpr64 = MOVaddr target-flags(aarch64-page) @.str.29, target-flags(aarch64-pageoff, aarch64-nc) @.str.29, debug-location !531; cg.c:363:5
Bottom Pressure:
FPR8=2
GPR32=4
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @19c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  BotQ.A RemainingLatency 0 + 20c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %157:gpr64 = MOVaddr target-flags(aarch64-page) @.str.30, target-flags(aarch64-pageoff, aarch64-nc) @.str.30, debug-location !531; cg.c:363:5
Bottom Pressure:
FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @20c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %155:gpr64 = MOVaddr target-flags(aarch64-page) @.str.31, target-flags(aarch64-pageoff, aarch64-nc) @.str.31, debug-location !531; cg.c:363:5
Bottom Pressure:
FPR8=2
GPR32=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @21c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.57 ***
SU(0):   %155:gpr64 = MOVaddr target-flags(aarch64-page) @.str.31, target-flags(aarch64-pageoff, aarch64-nc) @.str.31, debug-location !531; cg.c:363:5
SU(2):   %157:gpr64 = MOVaddr target-flags(aarch64-page) @.str.30, target-flags(aarch64-pageoff, aarch64-nc) @.str.30, debug-location !531; cg.c:363:5
SU(4):   %158:gpr64 = MOVaddr target-flags(aarch64-page) @.str.29, target-flags(aarch64-pageoff, aarch64-nc) @.str.29, debug-location !531; cg.c:363:5
SU(6):   %159:gpr64 = MOVaddr target-flags(aarch64-page) @.str.28, target-flags(aarch64-pageoff, aarch64-nc) @.str.28, debug-location !531; cg.c:363:5
SU(8):   %160:gpr64 = MOVaddr target-flags(aarch64-page) @.str.27, target-flags(aarch64-pageoff, aarch64-nc) @.str.27, debug-location !531; cg.c:363:5
SU(10):   %161:gpr64 = MOVaddr target-flags(aarch64-page) @.str.26, target-flags(aarch64-pageoff, aarch64-nc) @.str.26, debug-location !531; cg.c:363:5
SU(12):   %162:gpr64 = MOVaddr target-flags(aarch64-page) @.str.25, target-flags(aarch64-pageoff, aarch64-nc) @.str.25, debug-location !531; cg.c:363:5
SU(14):   %163:gpr64 = MOVaddr target-flags(aarch64-page) @.str.24, target-flags(aarch64-pageoff, aarch64-nc) @.str.24, debug-location !531; cg.c:363:5
SU(1):   STRXui %155:gpr64, $sp, 8, debug-location !531 :: (store 8 into stack + 64); cg.c:363:5
SU(16):   %164:gpr64 = MOVaddr target-flags(aarch64-page) @.str.23, target-flags(aarch64-pageoff, aarch64-nc) @.str.23, debug-location !531; cg.c:363:5
SU(5):   STRXui %158:gpr64, $sp, 6, debug-location !531 :: (store 8 into stack + 48); cg.c:363:5
SU(3):   STRXui %157:gpr64, $sp, 7, debug-location !531 :: (store 8 into stack + 56); cg.c:363:5
SU(18):   %165:gpr64 = MOVaddr target-flags(aarch64-page) @.str.21, target-flags(aarch64-pageoff, aarch64-nc) @.str.21, debug-location !531; cg.c:363:5
SU(9):   STRXui %160:gpr64, $sp, 4, debug-location !531 :: (store 8 into stack + 32); cg.c:363:5
SU(7):   STRXui %159:gpr64, $sp, 5, debug-location !531 :: (store 8 into stack + 40); cg.c:363:5
SU(19):   %166:gpr64 = MOVaddr target-flags(aarch64-page) @.str.22, target-flags(aarch64-pageoff, aarch64-nc) @.str.22, debug-location !531; cg.c:363:5
SU(13):   STRXui %162:gpr64, $sp, 2, debug-location !531 :: (store 8 into stack + 16); cg.c:363:5
SU(11):   STRXui %161:gpr64, $sp, 3, debug-location !531 :: (store 8 into stack + 24); cg.c:363:5
SU(17):   STRXui %164:gpr64, $sp, 0, debug-location !531 :: (store 8 into stack); cg.c:363:5
SU(22):   $w2 = MOVi32imm 75000, debug-location !531; cg.c:363:5
SU(25):   $w5 = MOVi32imm 75, debug-location !531; cg.c:363:5
SU(15):   STRXui %163:gpr64, $sp, 1, debug-location !531 :: (store 8 into stack + 8); cg.c:363:5
SU(26):   $d0 = COPY %152:fpr64, debug-location !531; cg.c:363:5
SU(27):   $d1 = COPY %153:fpr64, debug-location !531; cg.c:363:5
SU(20):   $x0 = COPY %165:gpr64, debug-location !531; cg.c:363:5
SU(21):   $w1 = COPY %151:gpr32, debug-location !531; cg.c:363:5
SU(23):   $w3 = COPY $wzr, debug-location !531; cg.c:363:5
SU(24):   $w4 = COPY $wzr, debug-location !531; cg.c:363:5
SU(28):   $x6 = COPY %166:gpr64, debug-location !531; cg.c:363:5
SU(29):   $w7 = COPY %154:gpr32, debug-location !531; cg.c:363:5

********** MI Scheduling **********
main:%bb.57 if.end193
  From: %151:gpr32 = LDRSBWui %stack.14.Class, 0, debug-location !527 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:363:25
    To: ADJCALLSTACKDOWN 72, 0, implicit-def dead $sp, implicit $sp, debug-location !531; cg.c:363:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %151:gpr32 = LDRSBWui %stack.14.Class, 0, debug-location !527 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:363:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %152:fpr64 = LDRDui %stack.11.t, 0, debug-location !528 :: (dereferenceable load 8 from %ir.t); cg.c:363:49
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %153:fpr64 = LDRDui %stack.12.mflops, 0, debug-location !529 :: (dereferenceable load 8 from %ir.mflops); cg.c:363:52
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %154:gpr32 = LDRWui %stack.15.verified, 0, debug-location !530 :: (dereferenceable load 4 from %ir.verified); cg.c:364:47
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 72, 0, implicit-def dead $sp, implicit $sp, debug-location !531; cg.c:363:5
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 0 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %154:gpr32 = LDRWui %stack.15.verified, 0, debug-location !530 :: (dereferenceable load 4 from %ir.verified); cg.c:364:47
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 1
  Executed: 4c
  Critical: 1c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  BotQ.A RemainingLatency 0 + 4c > CritPath 3
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %153:fpr64 = LDRDui %stack.12.mflops, 0, debug-location !529 :: (dereferenceable load 8 from %ir.mflops); cg.c:363:52
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 5c > CritPath 3
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %152:fpr64 = LDRDui %stack.11.t, 0, debug-location !528 :: (dereferenceable load 8 from %ir.t); cg.c:363:49
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %151:gpr32 = LDRSBWui %stack.14.Class, 0, debug-location !527 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:363:25
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.57 ***
SU(0):   %151:gpr32 = LDRSBWui %stack.14.Class, 0, debug-location !527 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:363:25
SU(1):   %152:fpr64 = LDRDui %stack.11.t, 0, debug-location !528 :: (dereferenceable load 8 from %ir.t); cg.c:363:49
SU(2):   %153:fpr64 = LDRDui %stack.12.mflops, 0, debug-location !529 :: (dereferenceable load 8 from %ir.mflops); cg.c:363:52
SU(3):   %154:gpr32 = LDRWui %stack.15.verified, 0, debug-location !530 :: (dereferenceable load 4 from %ir.verified); cg.c:364:47

********** MI Scheduling **********
main:%bb.58 if.then195
  From: %172:fpr64 = COPY $d0, debug-location !535; cg.c:371:16
    To: Bcc 1, %bb.60, implicit killed $nzcv, debug-location !541; cg.c:372:13
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %172:fpr64 = COPY $d0, debug-location !535; cg.c:371:16
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=0 Reg=%172
    SU(1): Data Latency=0 Reg=%172
  Single Issue       : false;
SU(1):   STRDui %172:fpr64, %stack.13.tmax, 0, debug-location !537 :: (store 8 into %ir.tmax); cg.c:371:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%172
  Single Issue       : false;
SU(2):   FCMPDri %172:fpr64, implicit-def $nzcv, debug-location !541; cg.c:372:13
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Data Latency=0 Reg=%172
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.60, implicit killed $nzcv, debug-location !541; cg.c:372:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %172:fpr64, %stack.13.tmax, 0, debug-location !537 :: (store 8 into %ir.tmax); cg.c:371:14
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) FCMPDri %172:fpr64, implicit-def $nzcv, debug-location !541; cg.c:372:13
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %172:fpr64 = COPY $d0, debug-location !535; cg.c:371:16
  Ready @2c
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.58 ***
SU(0):   %172:fpr64 = COPY $d0, debug-location !535; cg.c:371:16
SU(2):   FCMPDri %172:fpr64, implicit-def $nzcv, debug-location !541; cg.c:372:13
SU(1):   STRDui %172:fpr64, %stack.13.tmax, 0, debug-location !537 :: (store 8 into %ir.tmax); cg.c:371:14

********** MI Scheduling **********
main:%bb.59 if.then199
  From: %173:gpr64 = MOVi64imm 4607182418800017408
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %173:gpr64 = MOVi64imm 4607182418800017408
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%173
  Single Issue       : false;
SU(1):   STRXui %173:gpr64, %stack.13.tmax, 0, debug-location !542 :: (store 8 into %ir.tmax); cg.c:373:18
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%173
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRXui %173:gpr64, %stack.13.tmax, 0, debug-location !542 :: (store 8 into %ir.tmax); cg.c:373:18
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %173:gpr64 = MOVi64imm 4607182418800017408
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.59 ***
SU(0):   %173:gpr64 = MOVi64imm 4607182418800017408
SU(1):   STRXui %173:gpr64, %stack.13.tmax, 0, debug-location !542 :: (store 8 into %ir.tmax); cg.c:373:18

********** MI Scheduling **********
main:%bb.60 if.end200
  From: STRWui $wzr, %stack.3.i, 0, debug-location !545 :: (store 4 into %ir.i); cg.c:375:16
    To: End RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui $wzr, %stack.3.i, 0, debug-location !545 :: (store 4 into %ir.i); cg.c:375:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %184:gpr64sp = ADDXri %stack.19.t_names, 0, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   %206:gpr64 = MOVaddr target-flags(aarch64-page) @.str.33, target-flags(aarch64-pageoff, aarch64-nc) @.str.33
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %187:gpr64 = MOVi64imm 4636737291354636288
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   %192:gpr64 = MOVaddr target-flags(aarch64-page) @.str.34, target-flags(aarch64-pageoff, aarch64-nc) @.str.34
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   %203:gpr64 = MOVaddr target-flags(aarch64-page) @.str.35, target-flags(aarch64-pageoff, aarch64-nc) @.str.35
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(6):   %204:gpr64 = MOVaddr target-flags(aarch64-page) @.str.36, target-flags(aarch64-pageoff, aarch64-nc) @.str.36
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 5 4 3 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %204:gpr64 = MOVaddr target-flags(aarch64-page) @.str.36, target-flags(aarch64-pageoff, aarch64-nc) @.str.36
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 5 4 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %203:gpr64 = MOVaddr target-flags(aarch64-page) @.str.35, target-flags(aarch64-pageoff, aarch64-nc) @.str.35
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 
  BotQ.A RemainingLatency 0 + 2c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %192:gpr64 = MOVaddr target-flags(aarch64-page) @.str.34, target-flags(aarch64-pageoff, aarch64-nc) @.str.34
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  BotQ.A RemainingLatency 0 + 3c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %187:gpr64 = MOVi64imm 4636737291354636288
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  BotQ.A RemainingLatency 0 + 4c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %206:gpr64 = MOVaddr target-flags(aarch64-page) @.str.33, target-flags(aarch64-pageoff, aarch64-nc) @.str.33
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 5c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %184:gpr64sp = ADDXri %stack.19.t_names, 0, 0
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.3.i, 0, debug-location !545 :: (store 4 into %ir.i); cg.c:375:16
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.60 ***
SU(0):   STRWui $wzr, %stack.3.i, 0, debug-location !545 :: (store 4 into %ir.i); cg.c:375:16
SU(1):   %184:gpr64sp = ADDXri %stack.19.t_names, 0, 0
SU(2):   %206:gpr64 = MOVaddr target-flags(aarch64-page) @.str.33, target-flags(aarch64-pageoff, aarch64-nc) @.str.33
SU(3):   %187:gpr64 = MOVi64imm 4636737291354636288
SU(4):   %192:gpr64 = MOVaddr target-flags(aarch64-page) @.str.34, target-flags(aarch64-pageoff, aarch64-nc) @.str.34
SU(5):   %203:gpr64 = MOVaddr target-flags(aarch64-page) @.str.35, target-flags(aarch64-pageoff, aarch64-nc) @.str.35
SU(6):   %204:gpr64 = MOVaddr target-flags(aarch64-page) @.str.36, target-flags(aarch64-pageoff, aarch64-nc) @.str.36

********** MI Scheduling **********
main:%bb.60 if.end200
  From: %174:gpr64 = MOVaddr target-flags(aarch64-page) @.str.32, target-flags(aarch64-pageoff, aarch64-nc) @.str.32, debug-location !544; cg.c:374:9
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !544; cg.c:374:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %174:gpr64 = MOVaddr target-flags(aarch64-page) @.str.32, target-flags(aarch64-pageoff, aarch64-nc) @.str.32, debug-location !544; cg.c:374:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%174
  Single Issue       : false;
SU(1):   $x0 = COPY %174:gpr64, debug-location !544; cg.c:374:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%174
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !544; cg.c:374:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %174:gpr64, debug-location !544; cg.c:374:9
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %174:gpr64 = MOVaddr target-flags(aarch64-page) @.str.32, target-flags(aarch64-pageoff, aarch64-nc) @.str.32, debug-location !544; cg.c:374:9
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.60 ***
SU(0):   %174:gpr64 = MOVaddr target-flags(aarch64-page) @.str.32, target-flags(aarch64-pageoff, aarch64-nc) @.str.32, debug-location !544; cg.c:374:9
SU(1):   $x0 = COPY %174:gpr64, debug-location !544; cg.c:374:9

********** MI Scheduling **********
main:%bb.61 for.cond202
  From: %177:gpr32common = LDRWui %stack.3.i, 0, debug-location !548 :: (dereferenceable load 4 from %ir.i); cg.c:375:21
    To: Bcc 12, %bb.67, implicit killed $nzcv, debug-location !551; cg.c:375:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %177:gpr32common = LDRWui %stack.3.i, 0, debug-location !548 :: (dereferenceable load 4 from %ir.i); cg.c:375:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%177
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %177:gpr32common, 2, 0, implicit-def $nzcv, debug-location !551; cg.c:375:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%177
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.67, implicit killed $nzcv, debug-location !551; cg.c:375:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %177:gpr32common, 2, 0, implicit-def $nzcv, debug-location !551; cg.c:375:9
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %177:gpr32common = LDRWui %stack.3.i, 0, debug-location !548 :: (dereferenceable load 4 from %ir.i); cg.c:375:21
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.61 ***
SU(0):   %177:gpr32common = LDRWui %stack.3.i, 0, debug-location !548 :: (dereferenceable load 4 from %ir.i); cg.c:375:21
SU(1):   dead $wzr = SUBSWri %177:gpr32common, 2, 0, implicit-def $nzcv, debug-location !551; cg.c:375:9

********** MI Scheduling **********
main:%bb.62 for.body205
  From: %10:fpr64 = COPY $d0, debug-location !554; cg.c:376:17
    To: CBNZW %182.sub_32:gpr64, %bb.64, debug-location !560; cg.c:377:17
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %10:fpr64 = COPY $d0, debug-location !554; cg.c:376:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%10
  Single Issue       : false;
SU(1):   STRDui %10:fpr64, %stack.11.t, 0, debug-location !555 :: (store 8 into %ir.t); cg.c:376:15
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%10
  Single Issue       : false;
SU(2):   %182:gpr64 = LDRSWui %stack.3.i, 0, debug-location !556 :: (dereferenceable load 4 from %ir.i); cg.c:377:17
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    ExitSU: Data Latency=4 Reg=%182
    SU(3): Data Latency=4 Reg=%182
  Single Issue       : false;
SU(3):   %9:gpr64 = LDRXroX %184:gpr64sp, %182:gpr64, 0, 1, debug-location !559 :: (load 8 from %ir.arrayidx211); cg.c:0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(2): Data Latency=4 Reg=%182
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   CBNZW %182.sub_32:gpr64, %bb.64, debug-location !560; cg.c:377:17
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=3 Artificial
    SU(2): Data Latency=4 Reg=%182
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %10:fpr64, %stack.11.t, 0, debug-location !555 :: (store 8 into %ir.t); cg.c:376:15
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %10:fpr64 = COPY $d0, debug-location !554; cg.c:376:17
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 2 BotQ.A
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %9:gpr64 = LDRXroX %184:gpr64sp, %182:gpr64, 0, 1, debug-location !559 :: (load 8 from %ir.arrayidx211); cg.c:0
  Ready @3c
  BotQ.A TopLatency SU(3) 4c
  BotQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 2
  Executed: 4c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %182:gpr64 = LDRSWui %stack.3.i, 0, debug-location !556 :: (dereferenceable load 4 from %ir.i); cg.c:377:17
  Ready @7c
  BotQ.A BotLatency SU(2) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 3
  Executed: 8c
  Critical: 3c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.62 ***
SU(2):   %182:gpr64 = LDRSWui %stack.3.i, 0, debug-location !556 :: (dereferenceable load 4 from %ir.i); cg.c:377:17
SU(3):   %9:gpr64 = LDRXroX %184:gpr64sp, %182:gpr64, 0, 1, debug-location !559 :: (load 8 from %ir.arrayidx211); cg.c:0
SU(0):   %10:fpr64 = COPY $d0, debug-location !554; cg.c:376:17
SU(1):   STRDui %10:fpr64, %stack.11.t, 0, debug-location !555 :: (store 8 into %ir.t); cg.c:376:15

********** MI Scheduling **********
main:%bb.63 if.then209
  From: $x0 = COPY %206:gpr64, debug-location !561; cg.c:378:17
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !561; cg.c:378:17
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %206:gpr64, debug-location !561; cg.c:378:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $x1 = COPY %9:gpr64, debug-location !561; cg.c:378:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %10:fpr64, debug-location !561; cg.c:378:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !561; cg.c:378:17
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $d0 = COPY %10:fpr64, debug-location !561; cg.c:378:17
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(1) $x1 = COPY %9:gpr64, debug-location !561; cg.c:378:17
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %206:gpr64, debug-location !561; cg.c:378:17
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.63 ***
SU(0):   $x0 = COPY %206:gpr64, debug-location !561; cg.c:378:17
SU(1):   $x1 = COPY %9:gpr64, debug-location !561; cg.c:378:17
SU(2):   $d0 = COPY %10:fpr64, debug-location !561; cg.c:378:17

********** MI Scheduling **********
main:%bb.64 if.else213
  From: %194:gpr32common = LDRWui %stack.3.i, 0, debug-location !570 :: (dereferenceable load 4 from %ir.i); cg.c:383:21
    To: Bcc 1, %bb.66, implicit killed $nzcv, debug-location !573; cg.c:383:21
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %194:gpr32common = LDRWui %stack.3.i, 0, debug-location !570 :: (dereferenceable load 4 from %ir.i); cg.c:383:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%194
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %194:gpr32common, 2, 0, implicit-def $nzcv, debug-location !573; cg.c:383:21
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%194
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.66, implicit killed $nzcv, debug-location !573; cg.c:383:21
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %194:gpr32common, 2, 0, implicit-def $nzcv, debug-location !573; cg.c:383:21
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %194:gpr32common = LDRWui %stack.3.i, 0, debug-location !570 :: (dereferenceable load 4 from %ir.i); cg.c:383:21
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.64 ***
SU(0):   %194:gpr32common = LDRWui %stack.3.i, 0, debug-location !570 :: (dereferenceable load 4 from %ir.i); cg.c:383:21
SU(1):   dead $wzr = SUBSWri %194:gpr32common, 2, 0, implicit-def $nzcv, debug-location !573; cg.c:383:21

********** MI Scheduling **********
main:%bb.64 if.else213
  From: $x0 = COPY %192:gpr64, debug-location !569; cg.c:381:17
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0, debug-location !569; cg.c:381:17
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %192:gpr64, debug-location !569; cg.c:381:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $x1 = COPY %9:gpr64, debug-location !569; cg.c:381:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %10:fpr64, debug-location !569; cg.c:381:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $d1 = COPY %191:fpr64, debug-location !569; cg.c:381:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0, debug-location !569; cg.c:381:17
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $d1 = COPY %191:fpr64, debug-location !569; cg.c:381:17
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(2) $d0 = COPY %10:fpr64, debug-location !569; cg.c:381:17
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(1) $x1 = COPY %9:gpr64, debug-location !569; cg.c:381:17
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %192:gpr64, debug-location !569; cg.c:381:17
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.64 ***
SU(0):   $x0 = COPY %192:gpr64, debug-location !569; cg.c:381:17
SU(1):   $x1 = COPY %9:gpr64, debug-location !569; cg.c:381:17
SU(2):   $d0 = COPY %10:fpr64, debug-location !569; cg.c:381:17
SU(3):   $d1 = COPY %191:fpr64, debug-location !569; cg.c:381:17

********** MI Scheduling **********
main:%bb.64 if.else213
  From: %186:fpr64 = LDRDui %stack.11.t, 0, debug-location !564 :: (dereferenceable load 8 from %ir.t); cg.c:382:24
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !569; cg.c:381:17
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %186:fpr64 = LDRDui %stack.11.t, 0, debug-location !564 :: (dereferenceable load 8 from %ir.t); cg.c:382:24
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%186
  Single Issue       : false;
SU(1):   %188:fpr64 = COPY %187:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=0 Reg=%188
  Single Issue       : false;
SU(2):   %189:fpr64 = FMULDrr %186:fpr64, %188:fpr64, debug-location !566; cg.c:382:26
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=0 Reg=%188
    SU(0): Data Latency=4 Reg=%186
  Successors:
    SU(4): Data Latency=1 Reg=%189
  Single Issue       : false;
SU(3):   %190:fpr64 = LDRDui %stack.13.tmax, 0, debug-location !567 :: (dereferenceable load 8 from %ir.tmax); cg.c:382:36
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(4): Data Latency=4 Reg=%190
  Single Issue       : false;
SU(4):   %191:fpr64 = FDIVDrr %189:fpr64, %190:fpr64, debug-location !568; cg.c:382:34
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%189
    SU(3): Data Latency=4 Reg=%190
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !569; cg.c:381:17
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %191:fpr64 = FDIVDrr %189:fpr64, %190:fpr64, debug-location !568; cg.c:382:34
  Ready @0c
  BotQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %189:fpr64 = FMULDrr %186:fpr64, %188:fpr64, debug-location !566; cg.c:382:26
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %188:fpr64 = COPY %187:gpr64
  Ready @2c
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Cycle: 4 BotQ.A
Queue BotQ.P: 0 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %190:fpr64 = LDRDui %stack.13.tmax, 0, debug-location !567 :: (dereferenceable load 8 from %ir.tmax); cg.c:382:36
  Ready @4c
  BotQ.A BotLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %186:fpr64 = LDRDui %stack.11.t, 0, debug-location !564 :: (dereferenceable load 8 from %ir.t); cg.c:382:24
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.64 ***
SU(0):   %186:fpr64 = LDRDui %stack.11.t, 0, debug-location !564 :: (dereferenceable load 8 from %ir.t); cg.c:382:24
SU(3):   %190:fpr64 = LDRDui %stack.13.tmax, 0, debug-location !567 :: (dereferenceable load 8 from %ir.tmax); cg.c:382:36
SU(1):   %188:fpr64 = COPY %187:gpr64
SU(2):   %189:fpr64 = FMULDrr %186:fpr64, %188:fpr64, debug-location !566; cg.c:382:26
SU(4):   %191:fpr64 = FDIVDrr %189:fpr64, %190:fpr64, debug-location !568; cg.c:382:34

********** MI Scheduling **********
main:%bb.65 if.then221
  From: $x0 = COPY %203:gpr64, debug-location !584; cg.c:385:21
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0, debug-location !584; cg.c:385:21
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %203:gpr64, debug-location !584; cg.c:385:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $x1 = COPY %204:gpr64, debug-location !584; cg.c:385:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %198:fpr64, debug-location !584; cg.c:385:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $d1 = COPY %202:fpr64, debug-location !584; cg.c:385:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0, debug-location !584; cg.c:385:21
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $d1 = COPY %202:fpr64, debug-location !584; cg.c:385:21
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(2) $d0 = COPY %198:fpr64, debug-location !584; cg.c:385:21
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(1) $x1 = COPY %204:gpr64, debug-location !584; cg.c:385:21
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %203:gpr64, debug-location !584; cg.c:385:21
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.65 ***
SU(0):   $x0 = COPY %203:gpr64, debug-location !584; cg.c:385:21
SU(1):   $x1 = COPY %204:gpr64, debug-location !584; cg.c:385:21
SU(2):   $d0 = COPY %198:fpr64, debug-location !584; cg.c:385:21
SU(3):   $d1 = COPY %202:fpr64, debug-location !584; cg.c:385:21

********** MI Scheduling **********
main:%bb.65 if.then221
  From: %196:fpr64 = LDRDui %stack.13.tmax, 0, debug-location !574 :: (dereferenceable load 8 from %ir.tmax); cg.c:384:25
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !584; cg.c:385:21
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %196:fpr64 = LDRDui %stack.13.tmax, 0, debug-location !574 :: (dereferenceable load 8 from %ir.tmax); cg.c:384:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(6): Data Latency=4 Reg=%196
    SU(2): Data Latency=4 Reg=%196
  Single Issue       : false;
SU(1):   %197:fpr64 = LDRDui %stack.11.t, 0, debug-location !576 :: (dereferenceable load 8 from %ir.t); cg.c:384:32
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Data Latency=4 Reg=%197
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %198:fpr64 = FSUBDrr %196:fpr64, %197:fpr64, debug-location !577; cg.c:384:30
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(1): Data Latency=4 Reg=%197
    SU(0): Data Latency=4 Reg=%196
  Successors:
    SU(5): Data Latency=1 Reg=%198
    SU(3): Data Latency=1 Reg=%198
  Single Issue       : false;
SU(3):   STRDui %198:fpr64, %stack.11.t, 0, debug-location !578 :: (store 8 into %ir.t); cg.c:384:23
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%198
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   %200:fpr64 = COPY %187:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=0 Reg=%200
  Single Issue       : false;
SU(5):   %201:fpr64 = FMULDrr %198:fpr64, %200:fpr64, debug-location !581; cg.c:386:30
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=%198
    SU(4): Data Latency=0 Reg=%200
  Successors:
    SU(6): Data Latency=1 Reg=%201
  Single Issue       : false;
SU(6):   %202:fpr64 = FDIVDrr %201:fpr64, %196:fpr64, debug-location !583; cg.c:386:38
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%201
    SU(0): Data Latency=4 Reg=%196
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !584; cg.c:385:21
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %202:fpr64 = FDIVDrr %201:fpr64, %196:fpr64, debug-location !583; cg.c:386:38
  Ready @0c
  BotQ.A TopLatency SU(6) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 
BotQ.A RemLatency SU(3) 5c
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %201:fpr64 = FMULDrr %198:fpr64, %200:fpr64, debug-location !581; cg.c:386:30
  Ready @1c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 
BotQ.A RemLatency SU(3) 5c
  BotQ.A RemainingLatency 5 + 2c > CritPath 6
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(3) STRDui %198:fpr64, %stack.11.t, 0, debug-location !578 :: (store 8 into %ir.t); cg.c:384:23
  Ready @2c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 
BotQ.A RemLatency SU(2) 4c
  BotQ.A RemainingLatency 4 + 3c > CritPath 6
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(2) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) %198:fpr64 = FSUBDrr %196:fpr64, %197:fpr64, debug-location !577; cg.c:384:30
  Ready @3c
  BotQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %200:fpr64 = COPY %187:gpr64
  Ready @4c
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 7c > CritPath 6
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %197:fpr64 = LDRDui %stack.11.t, 0, debug-location !576 :: (dereferenceable load 8 from %ir.t); cg.c:384:32
  Ready @7c
  BotQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %196:fpr64 = LDRDui %stack.13.tmax, 0, debug-location !574 :: (dereferenceable load 8 from %ir.tmax); cg.c:384:25
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.65 ***
SU(0):   %196:fpr64 = LDRDui %stack.13.tmax, 0, debug-location !574 :: (dereferenceable load 8 from %ir.tmax); cg.c:384:25
SU(1):   %197:fpr64 = LDRDui %stack.11.t, 0, debug-location !576 :: (dereferenceable load 8 from %ir.t); cg.c:384:32
SU(4):   %200:fpr64 = COPY %187:gpr64
SU(2):   %198:fpr64 = FSUBDrr %196:fpr64, %197:fpr64, debug-location !577; cg.c:384:30
SU(3):   STRDui %198:fpr64, %stack.11.t, 0, debug-location !578 :: (store 8 into %ir.t); cg.c:384:23
SU(5):   %201:fpr64 = FMULDrr %198:fpr64, %200:fpr64, debug-location !581; cg.c:386:30
SU(6):   %202:fpr64 = FDIVDrr %201:fpr64, %196:fpr64, debug-location !583; cg.c:386:38

********** MI Scheduling **********
main:%bb.66 for.inc228
  From: %208:gpr32common = LDRWui %stack.3.i, 0, debug-location !586 :: (dereferenceable load 4 from %ir.i); cg.c:375:34
    To: B %bb.61, debug-location !587; cg.c:375:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %208:gpr32common = LDRWui %stack.3.i, 0, debug-location !586 :: (dereferenceable load 4 from %ir.i); cg.c:375:34
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%208
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %209:gpr32common = nsw ADDWri %208:gpr32common, 1, 0, debug-location !586; cg.c:375:34
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%208
  Successors:
    SU(2): Data Latency=1 Reg=%209
  Single Issue       : false;
SU(2):   STRWui %209:gpr32common, %stack.3.i, 0, debug-location !586 :: (store 4 into %ir.i); cg.c:375:34
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%209
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.61, debug-location !587; cg.c:375:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %209:gpr32common, %stack.3.i, 0, debug-location !586 :: (store 4 into %ir.i); cg.c:375:34
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %209:gpr32common = nsw ADDWri %208:gpr32common, 1, 0, debug-location !586; cg.c:375:34
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %208:gpr32common = LDRWui %stack.3.i, 0, debug-location !586 :: (dereferenceable load 4 from %ir.i); cg.c:375:34
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.66 ***
SU(0):   %208:gpr32common = LDRWui %stack.3.i, 0, debug-location !586 :: (dereferenceable load 4 from %ir.i); cg.c:375:34
SU(1):   %209:gpr32common = nsw ADDWri %208:gpr32common, 1, 0, debug-location !586; cg.c:375:34
SU(2):   STRWui %209:gpr32common, %stack.3.i, 0, debug-location !586 :: (store 4 into %ir.i); cg.c:375:34

********** INTERVALS **********
WSP [240r,240d:2)[272r,272d:1)[288r,288d:0)[384r,384d:119)[464r,464d:118)[480r,480d:117)[768r,768d:116)[784r,784d:115)[792r,792d:114)[912r,912d:113)[960r,960d:112)[976r,976d:111)[1224r,1224d:110)[1248r,1248d:109)[1264r,1264d:108)[1280r,1280d:107)[1344r,1344d:106)[1360r,1360d:105)[1376r,1376d:104)[1456r,1456d:103)[1472r,1472d:102)[1488r,1488d:101)[1536r,1536d:100)[1552r,1552d:99)[1752r,1752d:98)[1824r,1824d:97)[1840r,1840d:96)[1984r,1984d:95)[2336r,2336d:94)[2352r,2352d:93)[4016r,4016d:8)[4192r,4192d:7)[4208r,4208d:6)[4848r,4848d:5)[4880r,4880d:4)[4896r,4896d:3)[5776r,5776d:92)[5824r,5824d:91)[5840r,5840d:90)[5856r,5856d:89)[5888r,5888d:88)[5904r,5904d:87)[5936r,5936d:86)[6000r,6000d:85)[6016r,6016d:84)[6032r,6032d:83)[6080r,6080d:82)[6096r,6096d:81)[6464r,6464d:26)[6496r,6496d:25)[6512r,6512d:24)[6544r,6544d:23)[6720r,6720d:22)[6736r,6736d:21)[6816r,6816d:20)[6848r,6848d:19)[6864r,6864d:18)[7520r,7520d:17)[7552r,7552d:16)[7568r,7568d:15)[7856r,7856d:14)[7888r,7888d:13)[7904r,7904d:12)[7984r,7984d:11)[8064r,8064d:10)[8080r,8080d:9)[8544r,8544d:80)[8592r,8592d:79)[8608r,8608d:78)[8624r,8624d:77)[8656r,8656d:76)[8672r,8672d:75)[8720r,8720d:74)[8768r,8768d:73)[8784r,8784d:72)[9104r,9104d:56)[9152r,9152d:55)[9168r,9168d:54)[9200r,9200d:53)[9264r,9264d:52)[9280r,9280d:51)[9312r,9312d:50)[9376r,9376d:49)[9392r,9392d:48)[9472r,9472d:65)[9520r,9520d:64)[9536r,9536d:63)[9568r,9568d:62)[9632r,9632d:61)[9648r,9648d:60)[9680r,9680d:59)[9744r,9744d:58)[9760r,9760d:57)[9840r,9840d:71)[9888r,9888d:70)[9904r,9904d:69)[9920r,9920d:68)[9968r,9968d:67)[9984r,9984d:66)[10368r,10368d:47)[10912r,10912d:46)[10928r,10928d:45)[11008r,11008d:44)[11056r,11056d:43)[11072r,11072d:42)[11232r,11232d:41)[11280r,11280d:40)[11296r,11296d:39)[11552r,11552d:38)[11584r,11584d:37)[11600r,11600d:36)[11776r,11776d:29)[11840r,11840d:28)[11856r,11856d:27)[11984r,11984d:35)[12064r,12064d:34)[12080r,12080d:33)[12288r,12288d:32)[12368r,12368d:31)[12384r,12384d:30)  0@288r 1@272r 2@240r 3@4896r 4@4880r 5@4848r 6@4208r 7@4192r 8@4016r 9@8080r 10@8064r 11@7984r 12@7904r 13@7888r 14@7856r 15@7568r 16@7552r 17@7520r 18@6864r 19@6848r 20@6816r 21@6736r 22@6720r 23@6544r 24@6512r 25@6496r 26@6464r 27@11856r 28@11840r 29@11776r 30@12384r 31@12368r 32@12288r 33@12080r 34@12064r 35@11984r 36@11600r 37@11584r 38@11552r 39@11296r 40@11280r 41@11232r 42@11072r 43@11056r 44@11008r 45@10928r 46@10912r 47@10368r 48@9392r 49@9376r 50@9312r 51@9280r 52@9264r 53@9200r 54@9168r 55@9152r 56@9104r 57@9760r 58@9744r 59@9680r 60@9648r 61@9632r 62@9568r 63@9536r 64@9520r 65@9472r 66@9984r 67@9968r 68@9920r 69@9904r 70@9888r 71@9840r 72@8784r 73@8768r 74@8720r 75@8672r 76@8656r 77@8624r 78@8608r 79@8592r 80@8544r 81@6096r 82@6080r 83@6032r 84@6016r 85@6000r 86@5936r 87@5904r 88@5888r 89@5856r 90@5840r 91@5824r 92@5776r 93@2352r 94@2336r 95@1984r 96@1840r 97@1824r 98@1752r 99@1552r 100@1536r 101@1488r 102@1472r 103@1456r 104@1376r 105@1360r 106@1344r 107@1280r 108@1264r 109@1248r 110@1224r 111@976r 112@960r 113@912r 114@792r 115@784r 116@768r 117@480r 118@464r 119@384r
B0 [1808r,1824r:19)[1824r,1972r:18)[4864r,4880r:1)[4880r,4912r:0)[5888r,5920r:17)[5984r,6000r:16)[7536r,7552r:4)[7552r,7584r:3)[8032r,8064r:2)[8656r,8688r:15)[9248r,9264r:12)[9360r,9376r:11)[9616r,9632r:14)[9728r,9744r:13)[10848r,10912r:10)[11056r,11088r:9)[11584r,11684r:8)[11824r,11840r:5)[12032r,12064r:7)[12336r,12368r:6)  0@4880r 1@4864r 2@8032r 3@7552r 4@7536r 5@11824r 6@12336r 7@12032r 8@11584r 9@11056r 10@10848r 11@9360r 12@9248r 13@9728r 14@9616r 15@8656r 16@5984r 17@5888r 18@1824r 19@1808r
W0 [0B,32r:0)[256r,272r:1)[432r,464r:61)[464r,496r:60)[776r,784r:59)[784r,784d:34)[944r,960r:33)[1240r,1248r:58)[1248r,1248d:32)[1336r,1344r:57)[1344r,1344d:31)[1448r,1456r:56)[1456r,1456d:30)[1520r,1536r:55)[1536r,1536d:29)[1792r,1824r:54)[2224r,2336r:28)[4064r,4192r:35)[5808r,5824r:27)[5872r,5888r:26)[5968r,6000r:53)[6000r,6000d:25)[6064r,6080r:24)[6480r,6496r:5)[6592r,6720r:38)[6832r,6848r:4)[7872r,7888r:37)[7888r,7888d:3)[8000r,8064r:36)[8064r,8064d:2)[8576r,8592r:23)[8640r,8656r:22)[8752r,8768r:52)[8768r,8768d:21)[9136r,9152r:46)[9152r,9152d:15)[9232r,9264r:45)[9264r,9264d:14)[9344r,9376r:44)[9376r,9376d:13)[9504r,9520r:49)[9520r,9520d:18)[9600r,9632r:48)[9632r,9632d:17)[9712r,9744r:47)[9744r,9744d:16)[9872r,9888r:51)[9888r,9888d:20)[9952r,9968r:50)[9968r,9968d:19)[10868r,10912r:43)[11040r,11056r:12)[11264r,11280r:42)[11280r,11280d:11)[11568r,11584r:9)[11792r,11840r:39)[11840r,11840d:6)[12000r,12064r:41)[12064r,12064d:8)[12304r,12368r:40)[12368r,12368d:7)[12512r,12528r:10)  0@0B-phi 1@256r 2@8064r 3@7888r 4@6832r 5@6480r 6@11840r 7@12368r 8@12064r 9@11568r 10@12512r 11@11280r 12@11040r 13@9376r 14@9264r 15@9152r 16@9744r 17@9632r 18@9520r 19@9968r 20@9888r 21@8768r 22@8640r 23@8576r 24@6064r 25@6000r 26@5872r 27@5808r 28@2224r 29@1536r 30@1456r 31@1344r 32@1248r 33@944r 34@784r 35@4064r 36@8000r 37@7872r 38@6592r 39@11792r 40@12304r 41@12000r 42@11264r 43@10868r 44@9344r 45@9232r 46@9136r 47@9712r 48@9600r 49@9504r 50@9952r 51@9872r 52@8752r 53@5968r 54@1792r 55@1520r 56@1448r 57@1336r 58@1240r 59@776r 60@464r 61@432r
W1 [0B,16r:0)[448r,464r:11)[1328r,1344r:5)[1440r,1456r:4)[2232r,2336r:3)[4080r,4192r:6)[6608r,6720r:7)[8016r,8064r:1)[10872r,10912r:2)[11808r,11840r:8)[12016r,12064r:10)[12320r,12368r:9)  0@0B-phi 1@8016r 2@10872r 3@2232r 4@1440r 5@1328r 6@4080r 7@6608r 8@11808r 9@12320r 10@12016r 11@448r
W3 [2256r,2336r:3)[4112r,4192r:1)[6640r,6720r:2)[10880r,10912r:0)  0@10880r 1@4112r 2@6640r 3@2256r
W4 [2272r,2336r:3)[4128r,4192r:1)[6656r,6720r:2)[10888r,10912r:0)  0@10888r 1@4128r 2@6656r 3@2272r
%0 [880r,5728B:0)  0@880r weight:0.000000e+00
%1 [4744r,4864r:0)  0@4744r weight:0.000000e+00
%5 [7416r,7536r:0)  0@7416r weight:0.000000e+00
%9 [11680r,11808r:0)[11888B,12016r:0)  0@11680r weight:0.000000e+00
%10 [11684r,11824r:0)[11888B,12032r:0)  0@11684r weight:0.000000e+00
%11 [32r,80r:0)  0@32r weight:0.000000e+00
%12 [16r,96r:0)  0@16r weight:0.000000e+00
%14 [144r,160r:0)  0@144r weight:0.000000e+00
%16 [400r,432r:0)  0@400r weight:0.000000e+00
%17 [416r,448r:0)  0@416r weight:0.000000e+00
%18 [496r,544r:0)  0@496r weight:0.000000e+00
%22 [592r,728r:0)  0@592r weight:0.000000e+00
%23 [624r,736r:0)  0@624r weight:0.000000e+00
%24 [656r,760r:0)  0@656r weight:0.000000e+00
%25 [744r,752r:0)  0@744r weight:0.000000e+00
%26 [720r,776r:0)  0@720r weight:0.000000e+00
%30 [992r,2976B:0)  0@992r weight:0.000000e+00
%31 [1024r,1200r:0)  0@1024r weight:0.000000e+00
%32 [1040r,2976B:0)  0@1040r weight:0.000000e+00
%33 [1072r,8528B:0)  0@1072r weight:0.000000e+00
%34 [1104r,8528B:0)  0@1104r weight:0.000000e+00
%35 [1136r,1208r:0)  0@1136r weight:0.000000e+00
%36 [1168r,1216r:0)  0@1168r weight:0.000000e+00
%37 [1232r,1240r:0)  0@1232r weight:0.000000e+00
%39 [1296r,1336r:0)  0@1296r weight:0.000000e+00
%41 [1392r,1448r:0)  0@1392r weight:0.000000e+00
%44 [1504r,1520r:0)  0@1504r weight:0.000000e+00
%46 [1568r,1888r:0)  0@1568r weight:0.000000e+00
%47 [1600r,1904r:0)  0@1600r weight:0.000000e+00
%48 [1616r,1728r:0)  0@1616r weight:0.000000e+00
%49 [1648r,1792r:0)  0@1648r weight:0.000000e+00
%50 [1664r,1736r:0)  0@1664r weight:0.000000e+00
%51 [1696r,1744r:0)  0@1696r weight:0.000000e+00
%52 [1712r,1744r:0)  0@1712r weight:0.000000e+00
%53 [1760r,1776r:0)  0@1760r weight:0.000000e+00
%54 [1776r,1808r:0)  0@1776r weight:0.000000e+00
%55 [1972r,1976r:0)  0@1972r weight:0.000000e+00
%56 [1888r,2224r:0)  0@1888r weight:0.000000e+00
%57 [1904r,2232r:0)  0@1904r weight:0.000000e+00
%58 [1920r,2288r:0)  0@1920r weight:0.000000e+00
%59 [1936r,2304r:0)  0@1936r weight:0.000000e+00
%60 [1952r,2320r:0)  0@1952r weight:0.000000e+00
%61 [1968r,2216r:0)  0@1968r weight:0.000000e+00
%62 [2000r,2184r:0)  0@2000r weight:0.000000e+00
%64 [2048r,2180r:0)  0@2048r weight:0.000000e+00
%65 [2080r,2208r:0)  0@2080r weight:0.000000e+00
%66 [2112r,2200r:0)  0@2112r weight:0.000000e+00
%67 [2160r,2240r:0)  0@2160r weight:0.000000e+00
%68 [2176r,2976B:0)  0@2176r weight:0.000000e+00
%69 [2192r,2976B:0)  0@2192r weight:0.000000e+00
%70 [2440r,2480r:0)  0@2440r weight:0.000000e+00
%72 [2416r,2448r:0)  0@2416r weight:0.000000e+00
%74 [2432r,2448r:0)  0@2432r weight:0.000000e+00
%75 [2448r,2464r:0)  0@2448r weight:0.000000e+00
%76 [2464r,2480r:0)  0@2464r weight:0.000000e+00
%79 [3072r,3104r:0)  0@3072r weight:0.000000e+00
%80 [3088r,3104r:0)  0@3088r weight:0.000000e+00
%83 [3432r,3472r:0)  0@3432r weight:0.000000e+00
%85 [3408r,3440r:0)  0@3408r weight:0.000000e+00
%87 [3424r,3440r:0)  0@3424r weight:0.000000e+00
%88 [3440r,3456r:0)  0@3440r weight:0.000000e+00
%89 [3456r,3472r:0)  0@3456r weight:0.000000e+00
%92 [3760r,3896r:0)  0@3760r weight:0.000000e+00
%93 [3936r,3952r:0)  0@3936r weight:0.000000e+00
%96 [5536r,5568r:0)  0@5536r weight:0.000000e+00
%97 [5552r,5568r:0)  0@5552r weight:0.000000e+00
%101 [5920r,5984r:0)  0@5920r weight:0.000000e+00
%102 [5952r,5968r:0)  0@5952r weight:0.000000e+00
%104 [6072r,6112r:0)  0@6072r weight:0.000000e+00
%105 [6320r,6336r:0)  0@6320r weight:0.000000e+00
%108 [8688r,8704r:0)  0@8688r weight:0.000000e+00
%109 [8736r,8752r:0)  0@8736r weight:0.000000e+00
%111 [8840r,8856r:0)  0@8840r weight:0.000000e+00
%112 [8832r,8848r:0)  0@8832r weight:0.000000e+00
%115 [9856r,9872r:0)  0@9856r weight:0.000000e+00
%117 [9936r,9952r:0)  0@9936r weight:0.000000e+00
%119 [8912r,8996r:0)  0@8912r weight:0.000000e+00
%120 [8928r,9000r:0)  0@8928r weight:0.000000e+00
%121 [8996r,9000r:0)  0@8996r weight:0.000000e+00
%122 [9000r,9016r:0)  0@9000r weight:0.000000e+00
%123 [8992r,9008r:0)  0@8992r weight:0.000000e+00
%125 [9488r,9504r:0)  0@9488r weight:0.000000e+00
%127 [9552r,9616r:0)  0@9552r weight:0.000000e+00
%128 [9584r,9600r:0)  0@9584r weight:0.000000e+00
%130 [9664r,9728r:0)  0@9664r weight:0.000000e+00
%131 [9696r,9712r:0)  0@9696r weight:0.000000e+00
%133 [9072r,9088r:0)  0@9072r weight:0.000000e+00
%134 [9120r,9136r:0)  0@9120r weight:0.000000e+00
%136 [9184r,9248r:0)  0@9184r weight:0.000000e+00
%137 [9216r,9232r:0)  0@9216r weight:0.000000e+00
%139 [9296r,9360r:0)  0@9296r weight:0.000000e+00
%140 [9328r,9344r:0)  0@9328r weight:0.000000e+00
%142 [10016r,10032r:0)  0@10016r weight:0.000000e+00
%144 [10096r,10168r:0)  0@10096r weight:0.000000e+00
%145 [10112r,10128r:0)  0@10112r weight:0.000000e+00
%146 [10128r,10168r:0)  0@10128r weight:0.000000e+00
%147 [10168r,10192r:0)  0@10168r weight:0.000000e+00
%148 [10160r,10176r:0)  0@10160r weight:0.000000e+00
%149 [10176r,10192r:0)  0@10176r weight:0.000000e+00
%150 [10192r,10208r:0)  0@10192r weight:0.000000e+00
%151 [10304r,10872r:0)  0@10304r weight:0.000000e+00
%152 [10320r,10848r:0)  0@10320r weight:0.000000e+00
%153 [10336r,10864r:0)  0@10336r weight:0.000000e+00
%154 [10352r,10904r:0)  0@10352r weight:0.000000e+00
%155 [10384r,10632r:0)  0@10384r weight:0.000000e+00
%157 [10432r,10664r:0)  0@10432r weight:0.000000e+00
%158 [10464r,10660r:0)  0@10464r weight:0.000000e+00
%159 [10496r,10696r:0)  0@10496r weight:0.000000e+00
%160 [10528r,10692r:0)  0@10528r weight:0.000000e+00
%161 [10560r,10720r:0)  0@10560r weight:0.000000e+00
%162 [10592r,10712r:0)  0@10592r weight:0.000000e+00
%163 [10624r,10840r:0)  0@10624r weight:0.000000e+00
%164 [10656r,10728r:0)  0@10656r weight:0.000000e+00
%165 [10688r,10868r:0)  0@10688r weight:0.000000e+00
%166 [10704r,10896r:0)  0@10704r weight:0.000000e+00
%170 [10944r,10960r:0)  0@10944r weight:0.000000e+00
%172 [11088r,11128r:0)  0@11088r weight:0.000000e+00
%173 [11184r,11200r:0)  0@11184r weight:0.000000e+00
%174 [11248r,11264r:0)  0@11248r weight:0.000000e+00
%177 [11456r,11472r:0)  0@11456r weight:0.000000e+00
%180 [11536r,11568r:0)  0@11536r weight:0.000000e+00
%182 [11648r,11728r:0)  0@11648r weight:0.000000e+00
%184 [11344r,12480B:0)  0@11344r weight:0.000000e+00
%186 [11904r,11960r:0)  0@11904r weight:0.000000e+00
%187 [11376r,12480B:0)  0@11376r weight:0.000000e+00
%188 [11956r,11960r:0)  0@11956r weight:0.000000e+00
%189 [11960r,11968r:0)  0@11960r weight:0.000000e+00
%190 [11952r,11968r:0)  0@11952r weight:0.000000e+00
%191 [11968r,12048r:0)  0@11968r weight:0.000000e+00
%192 [11392r,12480B:0)  0@11392r weight:0.000000e+00
%194 [12096r,12112r:0)  0@12096r weight:0.000000e+00
%196 [12176r,12272r:0)  0@12176r weight:0.000000e+00
%197 [12192r,12244r:0)  0@12192r weight:0.000000e+00
%198 [12244r,12336r:0)  0@12244r weight:0.000000e+00
%200 [12240r,12256r:0)  0@12240r weight:0.000000e+00
%201 [12256r,12272r:0)  0@12256r weight:0.000000e+00
%202 [12272r,12352r:0)  0@12272r weight:0.000000e+00
%203 [11408r,12480B:0)  0@11408r weight:0.000000e+00
%204 [11424r,12480B:0)  0@11424r weight:0.000000e+00
%206 [11360r,12480B:0)  0@11360r weight:0.000000e+00
%208 [12416r,12432r:0)  0@12416r weight:0.000000e+00
%209 [12432r,12448r:0)  0@12432r weight:0.000000e+00
%211 [6400r,6416r:0)  0@6400r weight:0.000000e+00
%214 [6144r,8528B:0)  0@6144r weight:0.000000e+00
%215 [6160r,8528B:0)  0@6160r weight:0.000000e+00
%216 [6176r,8528B:0)  0@6176r weight:0.000000e+00
%219 [6192r,8528B:0)  0@6192r weight:0.000000e+00
%220 [6208r,8528B:0)  0@6208r weight:0.000000e+00
%221 [6224r,8528B:0)  0@6224r weight:0.000000e+00
%222 [6240r,8528B:0)  0@6240r weight:0.000000e+00
%224 [6752r,6768r:0)  0@6752r weight:0.000000e+00
%228 [7032r,7072r:0)  0@7032r weight:0.000000e+00
%230 [7008r,7040r:0)  0@7008r weight:0.000000e+00
%232 [7024r,7040r:0)  0@7024r weight:0.000000e+00
%233 [7040r,7056r:0)  0@7040r weight:0.000000e+00
%234 [7056r,7072r:0)  0@7056r weight:0.000000e+00
%238 [7704r,7784r:0)  0@7704r weight:0.000000e+00
%239 [7696r,7792r:0)  0@7696r weight:0.000000e+00
%240 [7792r,7800r:0)  0@7792r weight:0.000000e+00
%241 [6256r,8528B:0)  0@6256r weight:0.000000e+00
%242 [7728r,7800r:0)  0@7728r weight:0.000000e+00
%243 [7800r,7816r:0)  0@7800r weight:0.000000e+00
%244 [7776r,7808r:0)  0@7776r weight:0.000000e+00
%246 [6272r,8528B:0)  0@6272r weight:0.000000e+00
%248 [7936r,8016r:0)  0@7936r weight:0.000000e+00
%249 [7952r,8032r:0)  0@7952r weight:0.000000e+00
%250 [7968r,8048r:0)  0@7968r weight:0.000000e+00
%251 [6288r,8528B:0)  0@6288r weight:0.000000e+00
%254 [8184r,8224r:0)  0@8184r weight:0.000000e+00
%256 [8160r,8192r:0)  0@8160r weight:0.000000e+00
%258 [8176r,8192r:0)  0@8176r weight:0.000000e+00
%259 [8192r,8208r:0)  0@8192r weight:0.000000e+00
%260 [8208r,8224r:0)  0@8208r weight:0.000000e+00
%262 [8464r,8480r:0)  0@8464r weight:0.000000e+00
%263 [8480r,8496r:0)  0@8480r weight:0.000000e+00
%264 [8312r,8404r:0)  0@8312r weight:0.000000e+00
%265 [8304r,8400r:0)  0@8304r weight:0.000000e+00
%267 [8336r,8408r:0)  0@8336r weight:0.000000e+00
%269 [8352r,8404r:0)  0@8352r weight:0.000000e+00
%270 [8404r,8408r:0)  0@8404r weight:0.000000e+00
%272 [8400r,8416r:0)  0@8400r weight:0.000000e+00
%273 [7224r,7360r:0)  0@7224r weight:0.000000e+00
%274 [7152r,7344r:0)  0@7152r weight:0.000000e+00
%277 [7184r,7216r:0)  0@7184r weight:0.000000e+00
%278 [7200r,7348r:0)  0@7200r weight:0.000000e+00
%280 [7216r,7352r:0)  0@7216r weight:0.000000e+00
%281 [7348r,7360r:0)  0@7348r weight:0.000000e+00
%282 [7360r,7376r:0)  0@7360r weight:0.000000e+00
%283 [7280r,7368r:0)  0@7280r weight:0.000000e+00
%284 [7352r,7368r:0)  0@7352r weight:0.000000e+00
%285 [7368r,7384r:0)  0@7368r weight:0.000000e+00
%286 [7344r,7392r:0)  0@7344r weight:0.000000e+00
%287 [5632r,5680r:0)  0@5632r weight:0.000000e+00
%290 [5504r,5728B:0)  0@5504r weight:0.000000e+00
%291 [5680r,5696r:0)  0@5680r weight:0.000000e+00
%293 [3792r,5456B:0)  0@3792r weight:0.000000e+00
%294 [3808r,5456B:0)  0@3808r weight:0.000000e+00
%295 [3824r,5456B:0)  0@3824r weight:0.000000e+00
%298 [3840r,5456B:0)  0@3840r weight:0.000000e+00
%299 [3856r,5456B:0)  0@3856r weight:0.000000e+00
%300 [3872r,5456B:0)  0@3872r weight:0.000000e+00
%301 [3888r,5456B:0)  0@3888r weight:0.000000e+00
%304 [4360r,4400r:0)  0@4360r weight:0.000000e+00
%306 [4336r,4368r:0)  0@4336r weight:0.000000e+00
%308 [4352r,4368r:0)  0@4352r weight:0.000000e+00
%309 [4368r,4384r:0)  0@4368r weight:0.000000e+00
%310 [4384r,4400r:0)  0@4384r weight:0.000000e+00
%313 [3904r,8528B:0)  0@3904r weight:0.000000e+00
%314 [4992r,5008r:0)  0@4992r weight:0.000000e+00
%316 [5112r,5152r:0)  0@5112r weight:0.000000e+00
%318 [5088r,5120r:0)  0@5088r weight:0.000000e+00
%320 [5104r,5120r:0)  0@5104r weight:0.000000e+00
%321 [5120r,5136r:0)  0@5120r weight:0.000000e+00
%322 [5136r,5152r:0)  0@5136r weight:0.000000e+00
%324 [5392r,5408r:0)  0@5392r weight:0.000000e+00
%325 [5408r,5424r:0)  0@5408r weight:0.000000e+00
%326 [5240r,5332r:0)  0@5240r weight:0.000000e+00
%327 [5232r,5328r:0)  0@5232r weight:0.000000e+00
%329 [5264r,5336r:0)  0@5264r weight:0.000000e+00
%331 [5280r,5332r:0)  0@5280r weight:0.000000e+00
%332 [5332r,5336r:0)  0@5332r weight:0.000000e+00
%334 [5328r,5344r:0)  0@5328r weight:0.000000e+00
%335 [4552r,4688r:0)  0@4552r weight:0.000000e+00
%336 [4480r,4672r:0)  0@4480r weight:0.000000e+00
%339 [4512r,4544r:0)  0@4512r weight:0.000000e+00
%340 [4528r,4676r:0)  0@4528r weight:0.000000e+00
%342 [4544r,4680r:0)  0@4544r weight:0.000000e+00
%343 [4676r,4688r:0)  0@4676r weight:0.000000e+00
%344 [4688r,4704r:0)  0@4688r weight:0.000000e+00
%345 [4608r,4696r:0)  0@4608r weight:0.000000e+00
%346 [4680r,4696r:0)  0@4680r weight:0.000000e+00
%347 [4696r,4712r:0)  0@4696r weight:0.000000e+00
%348 [4672r,4720r:0)  0@4672r weight:0.000000e+00
%349 [3536r,3664r:0)  0@3536r weight:0.000000e+00
%351 [3312r,3712B:0)  0@3312r weight:0.000000e+00
%352 [3568r,3688r:0)  0@3568r weight:0.000000e+00
%354 [3328r,8528B:0)  0@3328r weight:0.000000e+00
%355 [3344r,3712B:0)  0@3344r weight:0.000000e+00
%356 [3360r,3712B:0)  0@3360r weight:0.000000e+00
%357 [3664r,3696r:0)  0@3664r weight:0.000000e+00
%358 [3168r,3216r:0)  0@3168r weight:0.000000e+00
%360 [3024r,8528B:0)  0@3024r weight:0.000000e+00
%361 [3040r,3264B:0)  0@3040r weight:0.000000e+00
%362 [3216r,3232r:0)  0@3216r weight:0.000000e+00
%363 [2544r,2560r:0)  0@2544r weight:0.000000e+00
%365 [2560r,2576r:0)  0@2560r weight:0.000000e+00
%366 [2632r,2672r:0)  0@2632r weight:0.000000e+00
%367 [2624r,2640r:0)  0@2624r weight:0.000000e+00
%369 [2640r,2656r:0)  0@2640r weight:0.000000e+00
%370 [2656r,2672r:0)  0@2656r weight:0.000000e+00
%372 [2912r,2928r:0)  0@2912r weight:0.000000e+00
%373 [2928r,2944r:0)  0@2928r weight:0.000000e+00
%374 [2736r,2848r:0)  0@2736r weight:0.000000e+00
%376 [2804r,2856r:0)  0@2804r weight:0.000000e+00
%378 [2808r,2852r:0)  0@2808r weight:0.000000e+00
%380 [2800r,2852r:0)  0@2800r weight:0.000000e+00
%381 [2852r,2856r:0)  0@2852r weight:0.000000e+00
%382 [2848r,2864r:0)  0@2848r weight:0.000000e+00
%383 [224r,256r:0)  0@224r weight:0.000000e+00
%384 [304r,320r:0)  0@304r weight:0.000000e+00
%385 [320r,336r:0)  0@320r weight:0.000000e+00
%386 [528r,10944r:0)  0@528r weight:0.000000e+00
%387 [4752r,4832B:0)[4912r,4960B:1)[4960B,4992r:2)  0@4752r 1@4912r 2@4960B-phi weight:0.000000e+00
%388 [7424r,7504B:0)[7584r,7632B:1)[7632B,7704r:2)  0@7424r 1@7584r 2@7632B-phi weight:0.000000e+00
RegMasks: 272r 464r 784r 960r 1248r 1344r 1456r 1536r 1824r 2336r 4192r 4880r 5824r 5888r 6000r 6080r 6496r 6720r 6848r 7552r 7888r 8064r 8592r 8656r 8768r 9152r 9264r 9376r 9520r 9632r 9744r 9888r 9968r 10912r 11056r 11280r 11584r 11840r 12064r 12368r
********** MACHINEINSTRS **********
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
  fi#6: size=4, align=4, at location [SP]
  fi#7: size=8, align=8, at location [SP]
  fi#8: size=8, align=8, at location [SP]
  fi#9: size=8, align=8, at location [SP]
  fi#10: size=8, align=8, at location [SP]
  fi#11: size=8, align=8, at location [SP]
  fi#12: size=8, align=8, at location [SP]
  fi#13: size=8, align=8, at location [SP]
  fi#14: size=1, align=4, at location [SP]
  fi#15: size=4, align=4, at location [SP]
  fi#16: size=8, align=8, at location [SP]
  fi#17: size=8, align=8, at location [SP]
  fi#18: size=8, align=8, at location [SP]
  fi#19: size=24, align=16, at location [SP]
  fi#20: size=8, align=8, at location [SP]
Constant Pool:
  cp#0: 0x41D2309CE5400000, align=8
  cp#1: 0x422979CA8D600000, align=8
Function Live Ins: $w0 in %11, $x1 in %12

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $w0, $x1
16B	  %12:gpr64 = COPY $x1
32B	  %11:gpr32 = COPY $w0
64B	  STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
80B	  STRWui %11:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
96B	  STRXui %12:gpr64, %stack.2.argv.addr, 0 :: (store 8 into %ir.argv.addr)
112B	  STRWui $wzr, %stack.3.i, 0, debug-location !132 :: (store 4 into %ir.i); cg.c:117:12

128B	bb.1.for.cond:
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

144B	  %14:gpr32common = LDRWui %stack.3.i, 0, debug-location !135 :: (dereferenceable load 4 from %ir.i); cg.c:117:17
160B	  dead $wzr = SUBSWri %14:gpr32common, 2, 0, implicit-def $nzcv, debug-location !138; cg.c:117:5
176B	  Bcc 12, %bb.3, implicit killed $nzcv, debug-location !138; cg.c:117:5
192B	  B %bb.2, debug-location !138; cg.c:117:5

208B	bb.2.for.body:
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

224B	  %383:gpr32 = LDRWui %stack.3.i, 0, debug-location !139 :: (dereferenceable load 4 from %ir.i); cg.c:118:21
240B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !141; cg.c:118:9
256B	  $w0 = COPY %383:gpr32, debug-location !141; cg.c:118:9
272B	  BL @timer_clear, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !141; cg.c:118:9
288B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !141; cg.c:118:9
304B	  %384:gpr32common = LDRWui %stack.3.i, 0, debug-location !142 :: (dereferenceable load 4 from %ir.i); cg.c:117:30
320B	  %385:gpr32common = nsw ADDWri %384:gpr32common, 1, 0, debug-location !142; cg.c:117:30
336B	  STRWui %385:gpr32common, %stack.3.i, 0, debug-location !142 :: (store 4 into %ir.i); cg.c:117:30
352B	  B %bb.1, debug-location !143; cg.c:117:5

368B	bb.3.for.end:
	; predecessors: %bb.1
	  successors: %bb.4(0x50000000), %bb.5(0x30000000); %bb.4(62.50%), %bb.5(37.50%)

384B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !152; cg.c:122:15
400B	  %16:gpr64 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str, debug-location !152; cg.c:122:15
416B	  %17:gpr64 = MOVaddr target-flags(aarch64-page) @.str.1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1, debug-location !152; cg.c:122:15
432B	  $x0 = COPY %16:gpr64, debug-location !152; cg.c:122:15
448B	  $x1 = COPY %17:gpr64, debug-location !152; cg.c:122:15
464B	  BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0, debug-location !152; cg.c:122:15
480B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !152; cg.c:122:15
496B	  %18:gpr64 = COPY $x0, debug-location !152; cg.c:122:15
512B	  STRXui %18:gpr64, %stack.20.fp, 0, debug-location !154 :: (store 8 into %ir.fp); cg.c:122:13
528B	  %386:gpr64common = ADRP target-flags(aarch64-page) @timeron
544B	  CBZX %18:gpr64, %bb.5, debug-location !156; cg.c:122:9
560B	  B %bb.4, debug-location !156; cg.c:122:9

576B	bb.4.if.then:
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

592B	  %22:gpr32 = MOVi32imm 1
624B	  %23:gpr64 = MOVaddr target-flags(aarch64-page) @.str.2, target-flags(aarch64-pageoff, aarch64-nc) @.str.2, debug-location !160; cg.c:124:25
656B	  %24:gpr64 = MOVaddr target-flags(aarch64-page) @.str.3, target-flags(aarch64-pageoff, aarch64-nc) @.str.3, debug-location !162; cg.c:125:26
720B	  %26:gpr64 = LDRXui %stack.20.fp, 0, debug-location !165 :: (dereferenceable load 8 from %ir.fp); cg.c:127:16
728B	  STRWui %22:gpr32, %386:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !157 :: (store 4 into @timeron); cg.c:123:17
736B	  STRXui %23:gpr64, %stack.19.t_names, 0, debug-location !160 :: (store 8 into %ir.arrayidx5, align 16); cg.c:124:25
744B	  %25:gpr64 = MOVaddr target-flags(aarch64-page) @.str.4, target-flags(aarch64-pageoff, aarch64-nc) @.str.4, debug-location !164; cg.c:126:30
752B	  STRXui %25:gpr64, %stack.19.t_names, 2, debug-location !164 :: (store 8 into %ir.arrayidx3, align 16); cg.c:126:30
760B	  STRXui %24:gpr64, %stack.19.t_names, 1, debug-location !162 :: (store 8 into %ir.arrayidx2); cg.c:125:26
768B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !166; cg.c:127:9
776B	  $x0 = COPY %26:gpr64, debug-location !166; cg.c:127:9
784B	  BL @fclose, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !166; cg.c:127:9
792B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !166; cg.c:127:9
800B	  B %bb.6, debug-location !167; cg.c:128:5

816B	bb.5.if.else:
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

848B	  STRWui $wzr, %386:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !168 :: (store 4 into @timeron); cg.c:130:17

864B	bb.6.if.end:
	; predecessors: %bb.5, %bb.4
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

880B	  %0:gpr32common = MOVi32imm 75000
912B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !171; cg.c:133:5
944B	  $w0 = COPY $wzr, debug-location !171; cg.c:133:5
960B	  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !171; cg.c:133:5
976B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !171; cg.c:133:5
992B	  %30:gpr64common = ADRP target-flags(aarch64-page) @firstrow, debug-location !172; cg.c:135:14
1024B	  %31:gpr32common = SUBWri %0:gpr32common, 1, 0, debug-location !173; cg.c:136:13
1040B	  %32:gpr64common = ADRP target-flags(aarch64-page) @lastrow, debug-location !173; cg.c:136:13
1072B	  %33:gpr64common = ADRP target-flags(aarch64-page) @firstcol, debug-location !174; cg.c:137:14
1104B	  %34:gpr64common = ADRP target-flags(aarch64-page) @lastcol, debug-location !175; cg.c:138:13
1136B	  %35:gpr32 = MOVi32imm 66
1168B	  %36:gpr64 = MOVi64imm 4627086287187887514
1176B	  STRWui $wzr, %30:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !172 :: (store 4 into @firstrow); cg.c:135:14
1184B	  STRWui %31:gpr32common, %32:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !173 :: (store 4 into @lastrow); cg.c:136:13
1192B	  STRWui $wzr, %33:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !174 :: (store 4 into @firstcol); cg.c:137:14
1200B	  STRWui %31:gpr32common, %34:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !175 :: (store 4 into @lastcol); cg.c:138:13
1208B	  STRBBui %35:gpr32, %stack.14.Class, 0, debug-location !176 :: (store 1 into %ir.Class, align 4); cg.c:153:15
1216B	  STRXui %36:gpr64, %stack.16.zeta_verify_value, 0, debug-location !182 :: (store 8 into %ir.zeta_verify_value); cg.c:154:27
1224B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !183; cg.c:172:5
1232B	  %37:gpr64 = MOVaddr target-flags(aarch64-page) @.str.5, target-flags(aarch64-pageoff, aarch64-nc) @.str.5, debug-location !183; cg.c:172:5
1240B	  $x0 = COPY %37:gpr64, debug-location !183; cg.c:172:5
1248B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !183; cg.c:172:5
1264B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !183; cg.c:172:5
1280B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !184; cg.c:173:5
1296B	  %39:gpr64 = MOVaddr target-flags(aarch64-page) @.str.6, target-flags(aarch64-pageoff, aarch64-nc) @.str.6, debug-location !184; cg.c:173:5
1328B	  $w1 = MOVi32imm 75000, debug-location !184; cg.c:173:5
1336B	  $x0 = COPY %39:gpr64, debug-location !184; cg.c:173:5
1344B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !184; cg.c:173:5
1360B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !184; cg.c:173:5
1376B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !185; cg.c:174:5
1392B	  %41:gpr64 = MOVaddr target-flags(aarch64-page) @.str.7, target-flags(aarch64-pageoff, aarch64-nc) @.str.7, debug-location !185; cg.c:174:5
1440B	  $w1 = MOVi32imm 75, debug-location !185; cg.c:174:5
1448B	  $x0 = COPY %41:gpr64, debug-location !185; cg.c:174:5
1456B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !185; cg.c:174:5
1472B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !185; cg.c:174:5
1488B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !186; cg.c:175:5
1504B	  %44:gpr64 = MOVaddr target-flags(aarch64-page) @.str.8, target-flags(aarch64-pageoff, aarch64-nc) @.str.8, debug-location !186; cg.c:175:5
1520B	  $x0 = COPY %44:gpr64, debug-location !186; cg.c:175:5
1536B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !186; cg.c:175:5
1552B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !186; cg.c:175:5
1568B	  %46:gpr64common = ADRP target-flags(aarch64-page) @naa, debug-location !187; cg.c:177:9
1600B	  %47:gpr64common = ADRP target-flags(aarch64-page) @nzz, debug-location !188; cg.c:178:9
1616B	  %48:gpr32 = MOVi32imm 14700000
1648B	  %49:gpr64common = MOVaddr target-flags(aarch64-page) @tran, target-flags(aarch64-pageoff, aarch64-nc) @tran, debug-location !189; cg.c:183:10
1664B	  %50:gpr64 = MOVi64imm 4734050326586327040
1696B	  %51:gpr64common = ADRP target-flags(aarch64-page) @amult, debug-location !190; cg.c:184:11
1712B	  %52:gpr64 = MOVi64imm 4742906807993761792
1720B	  STRWui %0:gpr32common, %46:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !187 :: (store 4 into @naa); cg.c:177:9
1728B	  STRWui %48:gpr32, %47:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nzz, debug-location !188 :: (store 4 into @nzz); cg.c:178:9
1736B	  STRXui %50:gpr64, %49:gpr64common, 0, debug-location !189 :: (store 8 into @tran); cg.c:183:10
1744B	  STRXui %52:gpr64, %51:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !190 :: (store 8 into @amult); cg.c:184:11
1752B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !192; cg.c:185:12
1760B	  %53:gpr64common = ADRP target-flags(aarch64-page) %const.0
1776B	  %54:fpr64 = LDRDui %53:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
1792B	  $x0 = COPY %49:gpr64common, debug-location !192; cg.c:185:12
1808B	  $d0 = COPY %54:fpr64, debug-location !192; cg.c:185:12
1824B	  BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !192; cg.c:185:12
1840B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !192; cg.c:185:12
1888B	  %56:gpr32 = LDRWui %46:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !194 :: (dereferenceable load 4 from @naa); cg.c:190:11
1904B	  %57:gpr32 = LDRWui %47:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nzz, debug-location !195 :: (dereferenceable load 4 from @nzz); cg.c:190:16
1920B	  %58:gpr32 = LDRWui %30:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !196 :: (dereferenceable load 4 from @firstrow); cg.c:190:40
1936B	  %59:gpr32 = LDRWui %32:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !197 :: (dereferenceable load 4 from @lastrow); cg.c:190:50
1952B	  %60:gpr32 = LDRWui %33:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !198 :: (dereferenceable load 4 from @firstcol); cg.c:190:59
1968B	  %61:gpr32 = LDRWui %34:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !199 :: (dereferenceable load 4 from @lastcol); cg.c:190:69
1972B	  %55:fpr64 = COPY $d0, debug-location !192; cg.c:185:12
1976B	  STRDui %55:fpr64, %stack.7.zeta, 0, debug-location !193 :: (store 8 into %ir.zeta); cg.c:185:10
1984B	  ADJCALLSTACKDOWN 40, 0, implicit-def dead $sp, implicit $sp, debug-location !200; cg.c:190:5
2000B	  %62:gpr64 = MOVaddr target-flags(aarch64-page) @iv, target-flags(aarch64-pageoff, aarch64-nc) @iv, debug-location !200; cg.c:190:5
2048B	  %64:gpr64 = MOVaddr target-flags(aarch64-page) @aelt, target-flags(aarch64-pageoff, aarch64-nc) @aelt, debug-location !200; cg.c:190:5
2080B	  %65:gpr64 = MOVaddr target-flags(aarch64-page) @acol, target-flags(aarch64-pageoff, aarch64-nc) @acol, debug-location !200; cg.c:190:5
2112B	  %66:gpr64 = MOVaddr target-flags(aarch64-page) @arow, target-flags(aarch64-pageoff, aarch64-nc) @arow, debug-location !200; cg.c:190:5
2160B	  %67:gpr64 = MOVaddr target-flags(aarch64-page) @a, target-flags(aarch64-pageoff, aarch64-nc) @a, debug-location !200; cg.c:190:5
2176B	  %68:gpr64common = MOVaddr target-flags(aarch64-page) @colidx, target-flags(aarch64-pageoff, aarch64-nc) @colidx, debug-location !200; cg.c:190:5
2180B	  STRXui %64:gpr64, $sp, 3, debug-location !200 :: (store 8 into stack + 24); cg.c:190:5
2184B	  STRXui %62:gpr64, $sp, 4, debug-location !200 :: (store 8 into stack + 32); cg.c:190:5
2192B	  %69:gpr64common = MOVaddr target-flags(aarch64-page) @rowstr, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, debug-location !200; cg.c:190:5
2200B	  STRXui %66:gpr64, $sp, 1, debug-location !200 :: (store 8 into stack + 8); cg.c:190:5
2208B	  STRXui %65:gpr64, $sp, 2, debug-location !200 :: (store 8 into stack + 16); cg.c:190:5
2216B	  STRWui %61:gpr32, $sp, 0, debug-location !200 :: (store 4 into stack); cg.c:190:5
2224B	  $w0 = COPY %56:gpr32, debug-location !200; cg.c:190:5
2232B	  $w1 = COPY %57:gpr32, debug-location !200; cg.c:190:5
2240B	  $x2 = COPY %67:gpr64, debug-location !200; cg.c:190:5
2256B	  $x3 = COPY %68:gpr64common, debug-location !200; cg.c:190:5
2272B	  $x4 = COPY %69:gpr64common, debug-location !200; cg.c:190:5
2288B	  $w5 = COPY %58:gpr32, debug-location !200; cg.c:190:5
2304B	  $w6 = COPY %59:gpr32, debug-location !200; cg.c:190:5
2320B	  $w7 = COPY %60:gpr32, debug-location !200; cg.c:190:5
2336B	  BL @makea, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $w1, implicit killed $x2, implicit $x3, implicit $x4, implicit killed $w5, implicit killed $w6, implicit killed $w7, implicit-def $sp, debug-location !200; cg.c:190:5
2352B	  ADJCALLSTACKUP 40, 0, implicit-def dead $sp, implicit $sp, debug-location !200; cg.c:190:5
2368B	  STRWui $wzr, %stack.4.j, 0, debug-location !201 :: (store 4 into %ir.j); cg.c:202:12

2384B	bb.7.for.cond10:
	; predecessors: %bb.6, %bb.11
	  successors: %bb.8(0x7c000000), %bb.12(0x04000000); %bb.8(96.88%), %bb.12(3.12%)

2416B	  %72:gpr32 = LDRWui %32:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !206 :: (dereferenceable load 4 from @lastrow); cg.c:202:21
2432B	  %74:gpr32 = LDRWui %30:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !207 :: (dereferenceable load 4 from @firstrow); cg.c:202:31
2440B	  %70:gpr32 = LDRWui %stack.4.j, 0, debug-location !204 :: (dereferenceable load 4 from %ir.j); cg.c:202:17
2448B	  %75:gpr32common = nsw SUBWrr %72:gpr32, %74:gpr32, debug-location !208; cg.c:202:29
2464B	  %76:gpr32common = nsw ADDWri %75:gpr32common, 1, 0, debug-location !209; cg.c:202:40
2480B	  dead $wzr = SUBSWrr %70:gpr32, %76:gpr32common, implicit-def $nzcv, debug-location !211; cg.c:202:5
2496B	  Bcc 10, %bb.12, implicit killed $nzcv, debug-location !211; cg.c:202:5
2512B	  B %bb.8, debug-location !211; cg.c:202:5

2528B	bb.8.for.body12:
	; predecessors: %bb.7
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

2544B	  %363:gpr64 = LDRSWui %stack.4.j, 0, debug-location !212 :: (dereferenceable load 4 from %ir.j); cg.c:203:25
2560B	  %365:gpr32 = LDRWroX %69:gpr64common, %363:gpr64, 0, 1, debug-location !215 :: (load 4 from %ir.arrayidx13); cg.c:203:18
2576B	  STRWui %365:gpr32, %stack.5.k, 0, debug-location !216 :: (store 4 into %ir.k); cg.c:203:16

2592B	bb.9.for.cond14:
	; predecessors: %bb.8, %bb.10
	  successors: %bb.10(0x7c000000), %bb.11(0x04000000); %bb.10(96.88%), %bb.11(3.12%)

2624B	  %367:gpr64 = LDRSWui %stack.4.j, 0, debug-location !220 :: (dereferenceable load 4 from %ir.j); cg.c:203:40
2632B	  %366:gpr32 = LDRWui %stack.5.k, 0, debug-location !218 :: (dereferenceable load 4 from %ir.k); cg.c:203:29
2640B	  %369:gpr64common = ADDXrs %69:gpr64common, %367:gpr64, 2, debug-location !222; cg.c:203:33
2656B	  %370:gpr32 = LDRWui %369:gpr64common, 1, debug-location !222 :: (load 4 from %ir.arrayidx17); cg.c:203:33
2672B	  dead $wzr = SUBSWrr %366:gpr32, %370:gpr32, implicit-def $nzcv, debug-location !224; cg.c:203:9
2688B	  Bcc 10, %bb.11, implicit killed $nzcv, debug-location !224; cg.c:203:9
2704B	  B %bb.10, debug-location !224; cg.c:203:9

2720B	bb.10.for.body19:
	; predecessors: %bb.9
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

2736B	  %374:gpr64common = LDRSWui %stack.5.k, 0, debug-location !225 :: (dereferenceable load 4 from %ir.k); cg.c:204:32
2800B	  %380:gpr32 = LDRWui %33:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !228 :: (dereferenceable load 4 from @firstcol); cg.c:204:37
2804B	  %376:gpr64 = UBFMXri %374:gpr64common, 62, 61, debug-location !227; cg.c:204:25
2808B	  %378:gpr32 = LDRWroX %68:gpr64common, %376:gpr64, 0, 0, debug-location !227 :: (load 4 from %ir.arrayidx21); cg.c:204:25
2848B	  %382:gpr32common = nsw ADDWri %374.sub_32:gpr64common, 1, 0, debug-location !233; cg.c:203:49
2852B	  %381:gpr32 = nsw SUBWrr %378:gpr32, %380:gpr32, debug-location !229; cg.c:204:35
2856B	  STRWroX %381:gpr32, %68:gpr64common, %376:gpr64, 0, 0, debug-location !232 :: (store 4 into %ir.arrayidx24); cg.c:204:23
2864B	  STRWui %382:gpr32common, %stack.5.k, 0, debug-location !233 :: (store 4 into %ir.k); cg.c:203:49
2880B	  B %bb.9, debug-location !234; cg.c:203:9

2896B	bb.11.for.inc28:
	; predecessors: %bb.9
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

2912B	  %372:gpr32common = LDRWui %stack.4.j, 0, debug-location !237 :: (dereferenceable load 4 from %ir.j); cg.c:202:46
2928B	  %373:gpr32common = nsw ADDWri %372:gpr32common, 1, 0, debug-location !237; cg.c:202:46
2944B	  STRWui %373:gpr32common, %stack.4.j, 0, debug-location !237 :: (store 4 into %ir.j); cg.c:202:46
2960B	  B %bb.7, debug-location !238; cg.c:202:5

2976B	bb.12.for.end30:
	; predecessors: %bb.7
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

3008B	  STRWui $wzr, %stack.3.i, 0, debug-location !241 :: (store 4 into %ir.i); cg.c:211:12
3024B	  %360:gpr64common = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x
3040B	  %361:gpr64 = MOVi64imm 4607182418800017408

3056B	bb.13.for.cond31:
	; predecessors: %bb.12, %bb.14
	  successors: %bb.14(0x7c000000), %bb.15(0x04000000); %bb.14(96.88%), %bb.15(3.12%)

3072B	  %79:gpr32 = LDRWui %stack.3.i, 0, debug-location !244 :: (dereferenceable load 4 from %ir.i); cg.c:211:17
3088B	  %80:gpr32common = ADDWri %0:gpr32common, 1, 0, debug-location !246; cg.c:211:19
3104B	  dead $wzr = SUBSWrr %79:gpr32, %80:gpr32common, implicit-def $nzcv, debug-location !247; cg.c:211:5
3120B	  Bcc 10, %bb.15, implicit killed $nzcv, debug-location !247; cg.c:211:5
3136B	  B %bb.14, debug-location !247; cg.c:211:5

3152B	bb.14.for.body33:
	; predecessors: %bb.13
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

3168B	  %358:gpr64common = LDRSWui %stack.3.i, 0, debug-location !248 :: (dereferenceable load 4 from %ir.i); cg.c:212:11
3200B	  STRXroX %361:gpr64, %360:gpr64common, %358:gpr64common, 0, 1, debug-location !251 :: (store 8 into %ir.arrayidx35); cg.c:212:14
3216B	  %362:gpr32common = nsw ADDWri %358.sub_32:gpr64common, 1, 0, debug-location !252; cg.c:211:30
3232B	  STRWui %362:gpr32common, %stack.3.i, 0, debug-location !252 :: (store 4 into %ir.i); cg.c:211:30
3248B	  B %bb.13, debug-location !253; cg.c:211:5

3264B	bb.15.for.end38:
	; predecessors: %bb.13
	  successors: %bb.16(0x80000000); %bb.16(100.00%)

3296B	  STRWui $wzr, %stack.4.j, 0, debug-location !256 :: (store 4 into %ir.j); cg.c:214:12
3312B	  %351:gpr64common = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q
3328B	  %354:gpr64common = MOVaddr target-flags(aarch64-page) @z, target-flags(aarch64-pageoff, aarch64-nc) @z
3344B	  %355:gpr64common = MOVaddr target-flags(aarch64-page) @r, target-flags(aarch64-pageoff, aarch64-nc) @r
3360B	  %356:gpr64common = MOVaddr target-flags(aarch64-page) @p, target-flags(aarch64-pageoff, aarch64-nc) @p

3376B	bb.16.for.cond39:
	; predecessors: %bb.15, %bb.17
	  successors: %bb.17(0x7c000000), %bb.18(0x04000000); %bb.17(96.88%), %bb.18(3.12%)

3408B	  %85:gpr32 = LDRWui %34:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !261 :: (dereferenceable load 4 from @lastcol); cg.c:214:21
3424B	  %87:gpr32 = LDRWui %33:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !262 :: (dereferenceable load 4 from @firstcol); cg.c:214:31
3432B	  %83:gpr32 = LDRWui %stack.4.j, 0, debug-location !259 :: (dereferenceable load 4 from %ir.j); cg.c:214:17
3440B	  %88:gpr32common = nsw SUBWrr %85:gpr32, %87:gpr32, debug-location !263; cg.c:214:29
3456B	  %89:gpr32common = nsw ADDWri %88:gpr32common, 1, 0, debug-location !264; cg.c:214:40
3472B	  dead $wzr = SUBSWrr %83:gpr32, %89:gpr32common, implicit-def $nzcv, debug-location !266; cg.c:214:5
3488B	  Bcc 10, %bb.18, implicit killed $nzcv, debug-location !266; cg.c:214:5
3504B	  B %bb.17, debug-location !266; cg.c:214:5

3520B	bb.17.for.body43:
	; predecessors: %bb.16
	  successors: %bb.16(0x80000000); %bb.16(100.00%)

3536B	  %349:gpr64common = LDRSWui %stack.4.j, 0, debug-location !267 :: (dereferenceable load 4 from %ir.j); cg.c:215:11
3568B	  %352:gpr64 = UBFMXri %349:gpr64common, 61, 60, debug-location !278; cg.c:218:9
3664B	  %357:gpr32common = nsw ADDWri %349.sub_32:gpr64common, 1, 0, debug-location !280; cg.c:214:46
3668B	  STRXroX $xzr, %351:gpr64common, %352:gpr64, 0, 0, debug-location !270 :: (store 8 into %ir.arrayidx45); cg.c:215:14
3672B	  STRXroX $xzr, %354:gpr64common, %352:gpr64, 0, 0, debug-location !273 :: (store 8 into %ir.arrayidx47); cg.c:216:14
3680B	  STRXroX $xzr, %355:gpr64common, %352:gpr64, 0, 0, debug-location !276 :: (store 8 into %ir.arrayidx49); cg.c:217:14
3688B	  STRXroX $xzr, %356:gpr64common, %352:gpr64, 0, 0, debug-location !279 :: (store 8 into %ir.arrayidx51); cg.c:218:14
3696B	  STRWui %357:gpr32common, %stack.4.j, 0, debug-location !280 :: (store 4 into %ir.j); cg.c:214:46
3704B	  B %bb.16, debug-location !281; cg.c:214:5

3712B	bb.18.for.end54:
	; predecessors: %bb.16
	  successors: %bb.19(0x80000000); %bb.19(100.00%)

3744B	  STRXui $xzr, %stack.7.zeta, 0, debug-location !284 :: (store 8 into %ir.zeta); cg.c:221:10
3760B	  %92:gpr32 = MOVi32imm 1
3792B	  %293:gpr64common = ADDXri %stack.8.rnorm, 0, 0
3808B	  %294:gpr64 = MOVaddr target-flags(aarch64-page) @colidx, target-flags(aarch64-pageoff, aarch64-nc) @colidx
3824B	  %295:gpr64 = MOVaddr target-flags(aarch64-page) @rowstr, target-flags(aarch64-pageoff, aarch64-nc) @rowstr
3840B	  %298:gpr64 = MOVaddr target-flags(aarch64-page) @a, target-flags(aarch64-pageoff, aarch64-nc) @a
3856B	  %299:gpr64 = MOVaddr target-flags(aarch64-page) @p, target-flags(aarch64-pageoff, aarch64-nc) @p
3872B	  %300:gpr64 = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q
3888B	  %301:gpr64 = MOVaddr target-flags(aarch64-page) @r, target-flags(aarch64-pageoff, aarch64-nc) @r
3896B	  STRWui %92:gpr32, %stack.6.it, 0, debug-location !285 :: (store 4 into %ir.it); cg.c:228:13
3904B	  %313:fpr64 = FMOVDi 112

3920B	bb.19.for.cond55:
	; predecessors: %bb.18, %bb.28
	  successors: %bb.20(0x7c000000), %bb.29(0x04000000); %bb.20(96.88%), %bb.29(3.12%)

3936B	  %93:gpr32common = LDRWui %stack.6.it, 0, debug-location !288 :: (dereferenceable load 4 from %ir.it); cg.c:228:18
3952B	  dead $wzr = SUBSWri %93:gpr32common, 1, 0, implicit-def $nzcv, debug-location !291; cg.c:228:5
3968B	  Bcc 12, %bb.29, implicit killed $nzcv, debug-location !291; cg.c:228:5
3984B	  B %bb.20, debug-location !291; cg.c:228:5

4000B	bb.20.for.body57:
	; predecessors: %bb.19
	  successors: %bb.21(0x80000000); %bb.21(100.00%)

4016B	  ADJCALLSTACKDOWN 8, 0, implicit-def dead $sp, implicit $sp, debug-location !292; cg.c:232:9
4048B	  STRXui %293:gpr64common, $sp, 0, debug-location !292 :: (store 8 into stack); cg.c:232:9
4064B	  $x0 = COPY %294:gpr64, debug-location !292; cg.c:232:9
4080B	  $x1 = COPY %295:gpr64, debug-location !292; cg.c:232:9
4096B	  $x2 = COPY %360:gpr64common, debug-location !292; cg.c:232:9
4112B	  $x3 = COPY %354:gpr64common, debug-location !292; cg.c:232:9
4128B	  $x4 = COPY %298:gpr64, debug-location !292; cg.c:232:9
4144B	  $x5 = COPY %299:gpr64, debug-location !292; cg.c:232:9
4160B	  $x6 = COPY %300:gpr64, debug-location !292; cg.c:232:9
4176B	  $x7 = COPY %301:gpr64, debug-location !292; cg.c:232:9
4192B	  BL @conj_grad, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit $x3, implicit $x4, implicit killed $x5, implicit killed $x6, implicit killed $x7, implicit-def $sp, debug-location !292; cg.c:232:9
4208B	  ADJCALLSTACKUP 8, 0, implicit-def dead $sp, implicit $sp, debug-location !292; cg.c:232:9
4240B	  STRXui $xzr, %stack.9.norm_temp1, 0, debug-location !294 :: (store 8 into %ir.norm_temp1); cg.c:240:20
4256B	  STRXui $xzr, %stack.10.norm_temp2, 0, debug-location !295 :: (store 8 into %ir.norm_temp2); cg.c:241:20
4288B	  STRWui $wzr, %stack.4.j, 0, debug-location !296 :: (store 4 into %ir.j); cg.c:242:16

4304B	bb.21.for.cond58:
	; predecessors: %bb.20, %bb.22
	  successors: %bb.22(0x7c000000), %bb.23(0x04000000); %bb.22(96.88%), %bb.23(3.12%)

4336B	  %306:gpr32 = LDRWui %34:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !301 :: (dereferenceable load 4 from @lastcol); cg.c:242:25
4352B	  %308:gpr32 = LDRWui %33:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !302 :: (dereferenceable load 4 from @firstcol); cg.c:242:35
4360B	  %304:gpr32 = LDRWui %stack.4.j, 0, debug-location !299 :: (dereferenceable load 4 from %ir.j); cg.c:242:21
4368B	  %309:gpr32common = nsw SUBWrr %306:gpr32, %308:gpr32, debug-location !303; cg.c:242:33
4384B	  %310:gpr32common = nsw ADDWri %309:gpr32common, 1, 0, debug-location !304; cg.c:242:44
4400B	  dead $wzr = SUBSWrr %304:gpr32, %310:gpr32common, implicit-def $nzcv, debug-location !306; cg.c:242:9
4416B	  Bcc 10, %bb.23, implicit killed $nzcv, debug-location !306; cg.c:242:9
4432B	  B %bb.22, debug-location !306; cg.c:242:9

4448B	bb.22.for.body62:
	; predecessors: %bb.21
	  successors: %bb.21(0x80000000); %bb.21(100.00%)

4480B	  %336:gpr64common = LDRSWui %stack.4.j, 0, debug-location !309 :: (dereferenceable load 4 from %ir.j); cg.c:243:41
4512B	  %339:gpr64 = UBFMXri %336:gpr64common, 61, 60, debug-location !318; cg.c:244:39
4528B	  %340:fpr64 = LDRDroX %360:gpr64common, %339:gpr64, 0, 0, debug-location !310 :: (load 8 from %ir.arrayidx64); cg.c:243:39
4544B	  %342:fpr64 = LDRDroX %354:gpr64common, %339:gpr64, 0, 0, debug-location !318 :: (load 8 from %ir.arrayidx71); cg.c:244:39
4552B	  %335:fpr64 = LDRDui %stack.9.norm_temp1, 0, debug-location !307 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:243:26
4608B	  %345:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !316 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:244:26
4672B	  %348:gpr32common = nsw ADDWri %336.sub_32:gpr64common, 1, 0, debug-location !324; cg.c:242:50
4676B	  %343:fpr64 = FMULDrr %340:fpr64, %342:fpr64, debug-location !313; cg.c:243:44
4680B	  %346:fpr64 = FMULDrr %342:fpr64, %342:fpr64, debug-location !321; cg.c:244:44
4688B	  %344:fpr64 = FADDDrr %335:fpr64, %343:fpr64, debug-location !314; cg.c:243:37
4696B	  %347:fpr64 = FADDDrr %345:fpr64, %346:fpr64, debug-location !322; cg.c:244:37
4704B	  STRDui %344:fpr64, %stack.9.norm_temp1, 0, debug-location !315 :: (store 8 into %ir.norm_temp1); cg.c:243:24
4712B	  STRDui %347:fpr64, %stack.10.norm_temp2, 0, debug-location !323 :: (store 8 into %ir.norm_temp2); cg.c:244:24
4720B	  STRWui %348:gpr32common, %stack.4.j, 0, debug-location !324 :: (store 4 into %ir.j); cg.c:242:50
4728B	  B %bb.21, debug-location !325; cg.c:242:9

4736B	bb.23.for.end76:
	; predecessors: %bb.21
	  successors: %bb.25(0x50000000), %bb.24(0x30000000); %bb.25(62.50%), %bb.24(37.50%)

4744B	  %1:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !328 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:247:33
4752B	  %387:fpr64 = FSQRTDr %1:fpr64, debug-location !329; cg.c:247:28
4768B	  FCMPDrr %387:fpr64, %387:fpr64, implicit-def $nzcv, debug-location !330; cg.c:247:26
4800B	  Bcc 7, %bb.25, implicit killed $nzcv, debug-location !330; cg.c:247:26
4816B	  B %bb.24, debug-location !330; cg.c:247:26

4832B	bb.24.call.sqrt:
	; predecessors: %bb.23
	  successors: %bb.25(0x80000000); %bb.25(100.00%)

4848B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !330; cg.c:247:26
4864B	  $d0 = COPY %1:fpr64, debug-location !330; cg.c:247:26
4880B	  BL @sqrt, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !330; cg.c:247:26
4896B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !330; cg.c:247:26
4912B	  %387:fpr64 = COPY $d0, debug-location !330; cg.c:247:26

4960B	bb.25.for.end76.split:
	; predecessors: %bb.23, %bb.24
	  successors: %bb.26(0x80000000); %bb.26(100.00%)

4992B	  %314:fpr64 = FDIVDrr %313:fpr64, %387:fpr64, debug-location !330; cg.c:247:26
5008B	  STRDui %314:fpr64, %stack.10.norm_temp2, 0, debug-location !331 :: (store 8 into %ir.norm_temp2); cg.c:247:20
5040B	  STRWui $wzr, %stack.4.j, 0, debug-location !332 :: (store 4 into %ir.j); cg.c:252:16

5056B	bb.26.for.cond78:
	; predecessors: %bb.25, %bb.27
	  successors: %bb.27(0x7c000000), %bb.28(0x04000000); %bb.27(96.88%), %bb.28(3.12%)

5088B	  %318:gpr32 = LDRWui %34:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !337 :: (dereferenceable load 4 from @lastcol); cg.c:252:25
5104B	  %320:gpr32 = LDRWui %33:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !338 :: (dereferenceable load 4 from @firstcol); cg.c:252:35
5112B	  %316:gpr32 = LDRWui %stack.4.j, 0, debug-location !335 :: (dereferenceable load 4 from %ir.j); cg.c:252:21
5120B	  %321:gpr32common = nsw SUBWrr %318:gpr32, %320:gpr32, debug-location !339; cg.c:252:33
5136B	  %322:gpr32common = nsw ADDWri %321:gpr32common, 1, 0, debug-location !340; cg.c:252:44
5152B	  dead $wzr = SUBSWrr %316:gpr32, %322:gpr32common, implicit-def $nzcv, debug-location !342; cg.c:252:9
5168B	  Bcc 10, %bb.28, implicit killed $nzcv, debug-location !342; cg.c:252:9
5184B	  B %bb.27, debug-location !342; cg.c:252:9

5200B	bb.27.for.body82:
	; predecessors: %bb.26
	  successors: %bb.26(0x80000000); %bb.26(100.00%)

5232B	  %327:gpr64common = LDRSWui %stack.4.j, 0, debug-location !345 :: (dereferenceable load 4 from %ir.j); cg.c:253:35
5240B	  %326:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !343 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:253:20
5264B	  %329:gpr64 = UBFMXri %327:gpr64common, 61, 60, debug-location !346; cg.c:253:33
5280B	  %331:fpr64 = LDRDroX %354:gpr64common, %329:gpr64, 0, 0, debug-location !346 :: (load 8 from %ir.arrayidx84); cg.c:253:33
5328B	  %334:gpr32common = nsw ADDWri %327.sub_32:gpr64common, 1, 0, debug-location !351; cg.c:252:50
5332B	  %332:fpr64 = FMULDrr %326:fpr64, %331:fpr64, debug-location !347; cg.c:253:31
5336B	  STRDroX %332:fpr64, %360:gpr64common, %329:gpr64, 0, 0, debug-location !350 :: (store 8 into %ir.arrayidx87); cg.c:253:18
5344B	  STRWui %334:gpr32common, %stack.4.j, 0, debug-location !351 :: (store 4 into %ir.j); cg.c:252:50
5360B	  B %bb.26, debug-location !352; cg.c:252:9

5376B	bb.28.for.inc91:
	; predecessors: %bb.26
	  successors: %bb.19(0x80000000); %bb.19(100.00%)

5392B	  %324:gpr32common = LDRWui %stack.6.it, 0, debug-location !355 :: (dereferenceable load 4 from %ir.it); cg.c:228:29
5408B	  %325:gpr32common = nsw ADDWri %324:gpr32common, 1, 0, debug-location !355; cg.c:228:29
5424B	  STRWui %325:gpr32common, %stack.6.it, 0, debug-location !355 :: (store 4 into %ir.it); cg.c:228:29
5440B	  B %bb.19, debug-location !356; cg.c:228:5

5456B	bb.29.for.end93:
	; predecessors: %bb.19
	  successors: %bb.30(0x80000000); %bb.30(100.00%)

5488B	  STRWui $wzr, %stack.3.i, 0, debug-location !359 :: (store 4 into %ir.i); cg.c:260:12
5504B	  %290:gpr64 = MOVi64imm 4607182418800017408

5520B	bb.30.for.cond94:
	; predecessors: %bb.29, %bb.31
	  successors: %bb.31(0x7c000000), %bb.32(0x04000000); %bb.31(96.88%), %bb.32(3.12%)

5536B	  %96:gpr32 = LDRWui %stack.3.i, 0, debug-location !362 :: (dereferenceable load 4 from %ir.i); cg.c:260:17
5552B	  %97:gpr32common = ADDWri %0:gpr32common, 1, 0, debug-location !364; cg.c:260:19
5568B	  dead $wzr = SUBSWrr %96:gpr32, %97:gpr32common, implicit-def $nzcv, debug-location !365; cg.c:260:5
5584B	  Bcc 10, %bb.32, implicit killed $nzcv, debug-location !365; cg.c:260:5
5600B	  B %bb.31, debug-location !365; cg.c:260:5

5616B	bb.31.for.body96:
	; predecessors: %bb.30
	  successors: %bb.30(0x80000000); %bb.30(100.00%)

5632B	  %287:gpr64common = LDRSWui %stack.3.i, 0, debug-location !366 :: (dereferenceable load 4 from %ir.i); cg.c:261:11
5664B	  STRXroX %290:gpr64, %360:gpr64common, %287:gpr64common, 0, 1, debug-location !369 :: (store 8 into %ir.arrayidx98); cg.c:261:14
5680B	  %291:gpr32common = nsw ADDWri %287.sub_32:gpr64common, 1, 0, debug-location !370; cg.c:260:30
5696B	  STRWui %291:gpr32common, %stack.3.i, 0, debug-location !370 :: (store 4 into %ir.i); cg.c:260:30
5712B	  B %bb.30, debug-location !371; cg.c:260:5

5728B	bb.32.for.end101:
	; predecessors: %bb.30
	  successors: %bb.33(0x80000000); %bb.33(100.00%)

5760B	  STRXui $xzr, %stack.7.zeta, 0, debug-location !374 :: (store 8 into %ir.zeta); cg.c:264:10
5776B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !375; cg.c:266:5
5808B	  $w0 = COPY $wzr, debug-location !375; cg.c:266:5
5824B	  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !375; cg.c:266:5
5840B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !375; cg.c:266:5
5856B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !376; cg.c:268:55
5872B	  $w0 = COPY $wzr, debug-location !376; cg.c:268:55
5888B	  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !376; cg.c:268:55
5904B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !376; cg.c:268:55
5920B	  %101:fpr64 = COPY $d0, debug-location !376; cg.c:268:55
5936B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !377; cg.c:268:5
5952B	  %102:gpr64 = MOVaddr target-flags(aarch64-page) @.str.9, target-flags(aarch64-pageoff, aarch64-nc) @.str.9, debug-location !377; cg.c:268:5
5968B	  $x0 = COPY %102:gpr64, debug-location !377; cg.c:268:5
5984B	  $d0 = COPY %101:fpr64, debug-location !377; cg.c:268:5
6000B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !377; cg.c:268:5
6016B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !377; cg.c:268:5
6032B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !378; cg.c:270:5
6064B	  $w0 = MOVi32imm 1, debug-location !378; cg.c:270:5
6072B	  %104:gpr32 = MOVi32imm 1
6080B	  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !378; cg.c:270:5
6096B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !378; cg.c:270:5
6112B	  STRWui %104:gpr32, %stack.6.it, 0, debug-location !379 :: (store 4 into %ir.it); cg.c:279:13
6144B	  %214:gpr64common = ADDXri %stack.8.rnorm, 0, 0
6160B	  %215:gpr64 = MOVaddr target-flags(aarch64-page) @colidx, target-flags(aarch64-pageoff, aarch64-nc) @colidx
6176B	  %216:gpr64 = MOVaddr target-flags(aarch64-page) @rowstr, target-flags(aarch64-pageoff, aarch64-nc) @rowstr
6192B	  %219:gpr64 = MOVaddr target-flags(aarch64-page) @a, target-flags(aarch64-pageoff, aarch64-nc) @a
6208B	  %220:gpr64 = MOVaddr target-flags(aarch64-page) @p, target-flags(aarch64-pageoff, aarch64-nc) @p
6224B	  %221:gpr64 = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q
6240B	  %222:gpr64 = MOVaddr target-flags(aarch64-page) @r, target-flags(aarch64-pageoff, aarch64-nc) @r
6256B	  %241:gpr64 = MOVi64imm 4633641066610819072
6272B	  %246:gpr64 = MOVaddr target-flags(aarch64-page) @.str.10, target-flags(aarch64-pageoff, aarch64-nc) @.str.10
6288B	  %251:gpr64 = MOVaddr target-flags(aarch64-page) @.str.11, target-flags(aarch64-pageoff, aarch64-nc) @.str.11

6304B	bb.33.for.cond108:
	; predecessors: %bb.32, %bb.48
	  successors: %bb.34(0x7c000000), %bb.49(0x04000000); %bb.34(96.88%), %bb.49(3.12%)

6320B	  %105:gpr32common = LDRWui %stack.6.it, 0, debug-location !382 :: (dereferenceable load 4 from %ir.it); cg.c:279:18
6336B	  dead $wzr = SUBSWri %105:gpr32common, 75, 0, implicit-def $nzcv, debug-location !385; cg.c:279:5
6352B	  Bcc 12, %bb.49, implicit killed $nzcv, debug-location !385; cg.c:279:5
6368B	  B %bb.34, debug-location !385; cg.c:279:5

6384B	bb.34.for.body110:
	; predecessors: %bb.33
	  successors: %bb.35(0x50000000), %bb.36(0x30000000); %bb.35(62.50%), %bb.36(37.50%)

6400B	  %211:gpr32 = LDRWui %386:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !386 :: (dereferenceable load 4 from @timeron); cg.c:284:13
6416B	  CBZW %211:gpr32, %bb.36, debug-location !389; cg.c:284:13
6432B	  B %bb.35, debug-location !389; cg.c:284:13

6448B	bb.35.if.then111:
	; predecessors: %bb.34
	  successors: %bb.36(0x80000000); %bb.36(100.00%)

6464B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !390; cg.c:285:13
6480B	  $w0 = MOVi32imm 2, debug-location !390; cg.c:285:13
6496B	  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !390; cg.c:285:13
6512B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !390; cg.c:285:13

6528B	bb.36.if.end112:
	; predecessors: %bb.34, %bb.35
	  successors: %bb.37(0x50000000), %bb.38(0x30000000); %bb.37(62.50%), %bb.38(37.50%)

6544B	  ADJCALLSTACKDOWN 8, 0, implicit-def dead $sp, implicit $sp, debug-location !391; cg.c:286:9
6576B	  STRXui %214:gpr64common, $sp, 0, debug-location !391 :: (store 8 into stack); cg.c:286:9
6592B	  $x0 = COPY %215:gpr64, debug-location !391; cg.c:286:9
6608B	  $x1 = COPY %216:gpr64, debug-location !391; cg.c:286:9
6624B	  $x2 = COPY %360:gpr64common, debug-location !391; cg.c:286:9
6640B	  $x3 = COPY %354:gpr64common, debug-location !391; cg.c:286:9
6656B	  $x4 = COPY %219:gpr64, debug-location !391; cg.c:286:9
6672B	  $x5 = COPY %220:gpr64, debug-location !391; cg.c:286:9
6688B	  $x6 = COPY %221:gpr64, debug-location !391; cg.c:286:9
6704B	  $x7 = COPY %222:gpr64, debug-location !391; cg.c:286:9
6720B	  BL @conj_grad, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit $x3, implicit $x4, implicit killed $x5, implicit killed $x6, implicit killed $x7, implicit-def $sp, debug-location !391; cg.c:286:9
6736B	  ADJCALLSTACKUP 8, 0, implicit-def dead $sp, implicit $sp, debug-location !391; cg.c:286:9
6752B	  %224:gpr32 = LDRWui %386:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !392 :: (dereferenceable load 4 from @timeron); cg.c:287:13
6768B	  CBZW %224:gpr32, %bb.38, debug-location !394; cg.c:287:13
6784B	  B %bb.37, debug-location !394; cg.c:287:13

6800B	bb.37.if.then114:
	; predecessors: %bb.36
	  successors: %bb.38(0x80000000); %bb.38(100.00%)

6816B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !395; cg.c:288:13
6832B	  $w0 = MOVi32imm 2, debug-location !395; cg.c:288:13
6848B	  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !395; cg.c:288:13
6864B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !395; cg.c:288:13

6880B	bb.38.if.end115:
	; predecessors: %bb.36, %bb.37
	  successors: %bb.39(0x80000000); %bb.39(100.00%)

6912B	  STRXui $xzr, %stack.9.norm_temp1, 0, debug-location !396 :: (store 8 into %ir.norm_temp1); cg.c:297:20
6928B	  STRXui $xzr, %stack.10.norm_temp2, 0, debug-location !397 :: (store 8 into %ir.norm_temp2); cg.c:298:20
6960B	  STRWui $wzr, %stack.4.j, 0, debug-location !398 :: (store 4 into %ir.j); cg.c:299:16

6976B	bb.39.for.cond116:
	; predecessors: %bb.38, %bb.40
	  successors: %bb.40(0x7c000000), %bb.41(0x04000000); %bb.40(96.88%), %bb.41(3.12%)

7008B	  %230:gpr32 = LDRWui %34:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !403 :: (dereferenceable load 4 from @lastcol); cg.c:299:25
7024B	  %232:gpr32 = LDRWui %33:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !404 :: (dereferenceable load 4 from @firstcol); cg.c:299:35
7032B	  %228:gpr32 = LDRWui %stack.4.j, 0, debug-location !401 :: (dereferenceable load 4 from %ir.j); cg.c:299:21
7040B	  %233:gpr32common = nsw SUBWrr %230:gpr32, %232:gpr32, debug-location !405; cg.c:299:33
7056B	  %234:gpr32common = nsw ADDWri %233:gpr32common, 1, 0, debug-location !406; cg.c:299:44
7072B	  dead $wzr = SUBSWrr %228:gpr32, %234:gpr32common, implicit-def $nzcv, debug-location !408; cg.c:299:9
7088B	  Bcc 10, %bb.41, implicit killed $nzcv, debug-location !408; cg.c:299:9
7104B	  B %bb.40, debug-location !408; cg.c:299:9

7120B	bb.40.for.body120:
	; predecessors: %bb.39
	  successors: %bb.39(0x80000000); %bb.39(100.00%)

7152B	  %274:gpr64common = LDRSWui %stack.4.j, 0, debug-location !411 :: (dereferenceable load 4 from %ir.j); cg.c:300:41
7184B	  %277:gpr64 = UBFMXri %274:gpr64common, 61, 60, debug-location !420; cg.c:301:39
7200B	  %278:fpr64 = LDRDroX %360:gpr64common, %277:gpr64, 0, 0, debug-location !412 :: (load 8 from %ir.arrayidx122); cg.c:300:39
7216B	  %280:fpr64 = LDRDroX %354:gpr64common, %277:gpr64, 0, 0, debug-location !420 :: (load 8 from %ir.arrayidx130); cg.c:301:39
7224B	  %273:fpr64 = LDRDui %stack.9.norm_temp1, 0, debug-location !409 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:300:26
7280B	  %283:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !418 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:301:26
7344B	  %286:gpr32common = nsw ADDWri %274.sub_32:gpr64common, 1, 0, debug-location !426; cg.c:299:50
7348B	  %281:fpr64 = FMULDrr %278:fpr64, %280:fpr64, debug-location !415; cg.c:300:44
7352B	  %284:fpr64 = FMULDrr %280:fpr64, %280:fpr64, debug-location !423; cg.c:301:44
7360B	  %282:fpr64 = FADDDrr %273:fpr64, %281:fpr64, debug-location !416; cg.c:300:37
7368B	  %285:fpr64 = FADDDrr %283:fpr64, %284:fpr64, debug-location !424; cg.c:301:37
7376B	  STRDui %282:fpr64, %stack.9.norm_temp1, 0, debug-location !417 :: (store 8 into %ir.norm_temp1); cg.c:300:24
7384B	  STRDui %285:fpr64, %stack.10.norm_temp2, 0, debug-location !425 :: (store 8 into %ir.norm_temp2); cg.c:301:24
7392B	  STRWui %286:gpr32common, %stack.4.j, 0, debug-location !426 :: (store 4 into %ir.j); cg.c:299:50
7400B	  B %bb.39, debug-location !427; cg.c:299:9

7408B	bb.41.for.end135:
	; predecessors: %bb.39
	  successors: %bb.43(0x50000000), %bb.42(0x30000000); %bb.43(62.50%), %bb.42(37.50%)

7416B	  %5:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !430 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:304:33
7424B	  %388:fpr64 = FSQRTDr %5:fpr64, debug-location !431; cg.c:304:28
7440B	  FCMPDrr %388:fpr64, %388:fpr64, implicit-def $nzcv, debug-location !432; cg.c:304:26
7472B	  Bcc 7, %bb.43, implicit killed $nzcv, debug-location !432; cg.c:304:26
7488B	  B %bb.42, debug-location !432; cg.c:304:26

7504B	bb.42.call.sqrt4:
	; predecessors: %bb.41
	  successors: %bb.43(0x80000000); %bb.43(100.00%)

7520B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !432; cg.c:304:26
7536B	  $d0 = COPY %5:fpr64, debug-location !432; cg.c:304:26
7552B	  BL @sqrt, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !432; cg.c:304:26
7568B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !432; cg.c:304:26
7584B	  %388:fpr64 = COPY $d0, debug-location !432; cg.c:304:26

7632B	bb.43.for.end135.split:
	; predecessors: %bb.41, %bb.42
	  successors: %bb.44(0x40000000), %bb.45(0x40000000); %bb.44(50.00%), %bb.45(50.00%)

7696B	  %239:fpr64 = LDRDui %stack.9.norm_temp1, 0, debug-location !434 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:306:30
7704B	  %238:fpr64 = FDIVDrr %313:fpr64, %388:fpr64, debug-location !432; cg.c:304:26
7728B	  %242:fpr64 = COPY %241:gpr64
7776B	  %244:gpr32common = LDRWui %stack.6.it, 0, debug-location !438 :: (dereferenceable load 4 from %ir.it); cg.c:307:13
7784B	  STRDui %238:fpr64, %stack.10.norm_temp2, 0, debug-location !433 :: (store 8 into %ir.norm_temp2); cg.c:304:20
7792B	  %240:fpr64 = FDIVDrr %313:fpr64, %239:fpr64, debug-location !435; cg.c:306:28
7800B	  %243:fpr64 = FADDDrr %240:fpr64, %242:fpr64, debug-location !436; cg.c:306:22
7808B	  dead $wzr = SUBSWri %244:gpr32common, 1, 0, implicit-def $nzcv, debug-location !441; cg.c:307:13
7816B	  STRDui %243:fpr64, %stack.7.zeta, 0, debug-location !437 :: (store 8 into %ir.zeta); cg.c:306:14
7824B	  Bcc 1, %bb.45, implicit killed $nzcv, debug-location !441; cg.c:307:13
7832B	  B %bb.44, debug-location !441; cg.c:307:13

7840B	bb.44.if.then141:
	; predecessors: %bb.43
	  successors: %bb.45(0x80000000); %bb.45(100.00%)

7856B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !442; cg.c:308:13
7872B	  $x0 = COPY %246:gpr64, debug-location !442; cg.c:308:13
7888B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !442; cg.c:308:13
7904B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !442; cg.c:308:13

7920B	bb.45.if.end143:
	; predecessors: %bb.43, %bb.44
	  successors: %bb.46(0x80000000); %bb.46(100.00%)

7936B	  %248:gpr32 = LDRWui %stack.6.it, 0, debug-location !443 :: (dereferenceable load 4 from %ir.it); cg.c:309:50
7952B	  %249:fpr64 = LDRDui %stack.8.rnorm, 0, debug-location !444 :: (dereferenceable load 8 from %ir.rnorm); cg.c:309:54
7968B	  %250:fpr64 = LDRDui %stack.7.zeta, 0, debug-location !445 :: (dereferenceable load 8 from %ir.zeta); cg.c:309:61
7984B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !446; cg.c:309:9
8000B	  $x0 = COPY %251:gpr64, debug-location !446; cg.c:309:9
8016B	  $w1 = COPY %248:gpr32, debug-location !446; cg.c:309:9
8032B	  $d0 = COPY %249:fpr64, debug-location !446; cg.c:309:9
8048B	  $d1 = COPY %250:fpr64, debug-location !446; cg.c:309:9
8064B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0, debug-location !446; cg.c:309:9
8080B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !446; cg.c:309:9
8112B	  STRWui $wzr, %stack.4.j, 0, debug-location !447 :: (store 4 into %ir.j); cg.c:314:16

8128B	bb.46.for.cond145:
	; predecessors: %bb.45, %bb.47
	  successors: %bb.47(0x7c000000), %bb.48(0x04000000); %bb.47(96.88%), %bb.48(3.12%)

8160B	  %256:gpr32 = LDRWui %34:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !452 :: (dereferenceable load 4 from @lastcol); cg.c:314:25
8176B	  %258:gpr32 = LDRWui %33:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !453 :: (dereferenceable load 4 from @firstcol); cg.c:314:35
8184B	  %254:gpr32 = LDRWui %stack.4.j, 0, debug-location !450 :: (dereferenceable load 4 from %ir.j); cg.c:314:21
8192B	  %259:gpr32common = nsw SUBWrr %256:gpr32, %258:gpr32, debug-location !454; cg.c:314:33
8208B	  %260:gpr32common = nsw ADDWri %259:gpr32common, 1, 0, debug-location !455; cg.c:314:44
8224B	  dead $wzr = SUBSWrr %254:gpr32, %260:gpr32common, implicit-def $nzcv, debug-location !457; cg.c:314:9
8240B	  Bcc 10, %bb.48, implicit killed $nzcv, debug-location !457; cg.c:314:9
8256B	  B %bb.47, debug-location !457; cg.c:314:9

8272B	bb.47.for.body149:
	; predecessors: %bb.46
	  successors: %bb.46(0x80000000); %bb.46(100.00%)

8304B	  %265:gpr64common = LDRSWui %stack.4.j, 0, debug-location !460 :: (dereferenceable load 4 from %ir.j); cg.c:315:35
8312B	  %264:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !458 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:315:20
8336B	  %267:gpr64 = UBFMXri %265:gpr64common, 61, 60, debug-location !461; cg.c:315:33
8352B	  %269:fpr64 = LDRDroX %354:gpr64common, %267:gpr64, 0, 0, debug-location !461 :: (load 8 from %ir.arrayidx151); cg.c:315:33
8400B	  %272:gpr32common = nsw ADDWri %265.sub_32:gpr64common, 1, 0, debug-location !466; cg.c:314:50
8404B	  %270:fpr64 = FMULDrr %264:fpr64, %269:fpr64, debug-location !462; cg.c:315:31
8408B	  STRDroX %270:fpr64, %360:gpr64common, %267:gpr64, 0, 0, debug-location !465 :: (store 8 into %ir.arrayidx154); cg.c:315:18
8416B	  STRWui %272:gpr32common, %stack.4.j, 0, debug-location !466 :: (store 4 into %ir.j); cg.c:314:50
8432B	  B %bb.46, debug-location !467; cg.c:314:9

8448B	bb.48.for.inc158:
	; predecessors: %bb.46
	  successors: %bb.33(0x80000000); %bb.33(100.00%)

8464B	  %262:gpr32common = LDRWui %stack.6.it, 0, debug-location !470 :: (dereferenceable load 4 from %ir.it); cg.c:279:33
8480B	  %263:gpr32common = nsw ADDWri %262:gpr32common, 1, 0, debug-location !470; cg.c:279:33
8496B	  STRWui %263:gpr32common, %stack.6.it, 0, debug-location !470 :: (store 4 into %ir.it); cg.c:279:33
8512B	  B %bb.33, debug-location !471; cg.c:279:5

8528B	bb.49.do.end164:
	; predecessors: %bb.33
	  successors: %bb.50(0x40000000), %bb.53(0x40000000); %bb.50(50.00%), %bb.53(50.00%)

8544B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !474; cg.c:321:5
8576B	  $w0 = MOVi32imm 1, debug-location !474; cg.c:321:5
8592B	  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !474; cg.c:321:5
8608B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !474; cg.c:321:5
8624B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !475; cg.c:327:9
8640B	  $w0 = MOVi32imm 1, debug-location !475; cg.c:327:9
8656B	  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !475; cg.c:327:9
8672B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !475; cg.c:327:9
8688B	  %108:fpr64 = COPY $d0, debug-location !475; cg.c:327:9
8704B	  STRDui %108:fpr64, %stack.11.t, 0, debug-location !476 :: (store 8 into %ir.t); cg.c:327:7
8720B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !477; cg.c:329:5
8736B	  %109:gpr64 = MOVaddr target-flags(aarch64-page) @.str.12, target-flags(aarch64-pageoff, aarch64-nc) @.str.12, debug-location !477; cg.c:329:5
8752B	  $x0 = COPY %109:gpr64, debug-location !477; cg.c:329:5
8768B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !477; cg.c:329:5
8784B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !477; cg.c:329:5
8832B	  %112:gpr32common = LDRSBWui %stack.14.Class, 0, debug-location !479 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:332:9
8840B	  %111:gpr64 = MOVi64imm 4457293557087583675
8848B	  dead $wzr = SUBSWri %112:gpr32common, 85, 0, implicit-def $nzcv, debug-location !482; cg.c:332:9
8856B	  STRXui %111:gpr64, %stack.17.epsilon, 0, debug-location !478 :: (store 8 into %ir.epsilon); cg.c:331:13
8864B	  Bcc 0, %bb.53, implicit killed $nzcv, debug-location !482; cg.c:332:9
8880B	  B %bb.50, debug-location !482; cg.c:332:9

8896B	bb.50.if.then169:
	; predecessors: %bb.49
	  successors: %bb.51(0x40000000), %bb.52(0x40000000); %bb.51(50.00%), %bb.52(50.00%)

8912B	  %119:fpr64 = LDRDui %stack.7.zeta, 0, debug-location !483 :: (dereferenceable load 8 from %ir.zeta); cg.c:333:20
8928B	  %120:fpr64 = LDRDui %stack.16.zeta_verify_value, 0, debug-location !485 :: (dereferenceable load 8 from %ir.zeta_verify_value); cg.c:333:27
8992B	  %123:fpr64 = LDRDui %stack.17.epsilon, 0, debug-location !493 :: (dereferenceable load 8 from %ir.epsilon); cg.c:334:20
8996B	  %121:fpr64 = FABD64 %119:fpr64, %120:fpr64, debug-location !487; cg.c:333:15
9000B	  %122:fpr64 = FDIVDrr %121:fpr64, %120:fpr64, debug-location !489; cg.c:333:46
9008B	  FCMPDrr %122:fpr64, %123:fpr64, implicit-def $nzcv, debug-location !495; cg.c:334:13
9016B	  STRDui %122:fpr64, %stack.18.err, 0, debug-location !490 :: (store 8 into %ir.err); cg.c:333:13
9024B	  Bcc 8, %bb.52, implicit killed $nzcv, debug-location !495; cg.c:334:13
9040B	  B %bb.51, debug-location !495; cg.c:334:13

9056B	bb.51.if.then174:
	; predecessors: %bb.50
	  successors: %bb.54(0x80000000); %bb.54(100.00%)

9072B	  %133:gpr32 = MOVi32imm 1
9088B	  STRWui %133:gpr32, %stack.15.verified, 0, debug-location !496 :: (store 4 into %ir.verified); cg.c:335:22
9104B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !498; cg.c:336:13
9120B	  %134:gpr64 = MOVaddr target-flags(aarch64-page) @.str.13, target-flags(aarch64-pageoff, aarch64-nc) @.str.13, debug-location !498; cg.c:336:13
9136B	  $x0 = COPY %134:gpr64, debug-location !498; cg.c:336:13
9152B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !498; cg.c:336:13
9168B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !498; cg.c:336:13
9184B	  %136:fpr64 = LDRDui %stack.7.zeta, 0, debug-location !499 :: (dereferenceable load 8 from %ir.zeta); cg.c:337:45
9200B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !500; cg.c:337:13
9216B	  %137:gpr64 = MOVaddr target-flags(aarch64-page) @.str.14, target-flags(aarch64-pageoff, aarch64-nc) @.str.14, debug-location !500; cg.c:337:13
9232B	  $x0 = COPY %137:gpr64, debug-location !500; cg.c:337:13
9248B	  $d0 = COPY %136:fpr64, debug-location !500; cg.c:337:13
9264B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !500; cg.c:337:13
9280B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !500; cg.c:337:13
9296B	  %139:fpr64 = LDRDui %stack.18.err, 0, debug-location !501 :: (dereferenceable load 8 from %ir.err); cg.c:338:45
9312B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !502; cg.c:338:13
9328B	  %140:gpr64 = MOVaddr target-flags(aarch64-page) @.str.15, target-flags(aarch64-pageoff, aarch64-nc) @.str.15, debug-location !502; cg.c:338:13
9344B	  $x0 = COPY %140:gpr64, debug-location !502; cg.c:338:13
9360B	  $d0 = COPY %139:fpr64, debug-location !502; cg.c:338:13
9376B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !502; cg.c:338:13
9392B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !502; cg.c:338:13
9408B	  B %bb.54, debug-location !503; cg.c:339:9

9424B	bb.52.if.else178:
	; predecessors: %bb.50
	  successors: %bb.54(0x80000000); %bb.54(100.00%)

9456B	  STRWui $wzr, %stack.15.verified, 0, debug-location !504 :: (store 4 into %ir.verified); cg.c:341:22
9472B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !506; cg.c:342:13
9488B	  %125:gpr64 = MOVaddr target-flags(aarch64-page) @.str.16, target-flags(aarch64-pageoff, aarch64-nc) @.str.16, debug-location !506; cg.c:342:13
9504B	  $x0 = COPY %125:gpr64, debug-location !506; cg.c:342:13
9520B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !506; cg.c:342:13
9536B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !506; cg.c:342:13
9552B	  %127:fpr64 = LDRDui %stack.7.zeta, 0, debug-location !507 :: (dereferenceable load 8 from %ir.zeta); cg.c:343:54
9568B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !508; cg.c:343:13
9584B	  %128:gpr64 = MOVaddr target-flags(aarch64-page) @.str.17, target-flags(aarch64-pageoff, aarch64-nc) @.str.17, debug-location !508; cg.c:343:13
9600B	  $x0 = COPY %128:gpr64, debug-location !508; cg.c:343:13
9616B	  $d0 = COPY %127:fpr64, debug-location !508; cg.c:343:13
9632B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !508; cg.c:343:13
9648B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !508; cg.c:343:13
9664B	  %130:fpr64 = LDRDui %stack.16.zeta_verify_value, 0, debug-location !509 :: (dereferenceable load 8 from %ir.zeta_verify_value); cg.c:344:54
9680B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !510; cg.c:344:13
9696B	  %131:gpr64 = MOVaddr target-flags(aarch64-page) @.str.18, target-flags(aarch64-pageoff, aarch64-nc) @.str.18, debug-location !510; cg.c:344:13
9712B	  $x0 = COPY %131:gpr64, debug-location !510; cg.c:344:13
9728B	  $d0 = COPY %130:fpr64, debug-location !510; cg.c:344:13
9744B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !510; cg.c:344:13
9760B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !510; cg.c:344:13
9776B	  B %bb.54

9792B	bb.53.if.else183:
	; predecessors: %bb.49
	  successors: %bb.54(0x80000000); %bb.54(100.00%)

9824B	  STRWui $wzr, %stack.15.verified, 0, debug-location !511 :: (store 4 into %ir.verified); cg.c:348:18
9840B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !513; cg.c:349:9
9856B	  %115:gpr64 = MOVaddr target-flags(aarch64-page) @.str.19, target-flags(aarch64-pageoff, aarch64-nc) @.str.19, debug-location !513; cg.c:349:9
9872B	  $x0 = COPY %115:gpr64, debug-location !513; cg.c:349:9
9888B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !513; cg.c:349:9
9904B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !513; cg.c:349:9
9920B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !514; cg.c:350:9
9936B	  %117:gpr64 = MOVaddr target-flags(aarch64-page) @.str.20, target-flags(aarch64-pageoff, aarch64-nc) @.str.20, debug-location !514; cg.c:350:9
9952B	  $x0 = COPY %117:gpr64, debug-location !514; cg.c:350:9
9968B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !514; cg.c:350:9
9984B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !514; cg.c:350:9

10000B	bb.54.if.end186:
	; predecessors: %bb.53, %bb.52, %bb.51
	  successors: %bb.55(0x50000000), %bb.56(0x30000000); %bb.55(62.50%), %bb.56(37.50%)

10016B	  %142:fpr64 = LDRDui %stack.11.t, 0, debug-location !515 :: (dereferenceable load 8 from %ir.t); cg.c:353:9
10032B	  FCMPDri %142:fpr64, implicit-def $nzcv, debug-location !518; cg.c:353:9
10048B	  Bcc 0, %bb.56, implicit killed $nzcv, debug-location !518; cg.c:353:9
10064B	  B %bb.55, debug-location !518; cg.c:353:9

10080B	bb.55.if.then189:
	; predecessors: %bb.54
	  successors: %bb.57(0x80000000); %bb.57(100.00%)

10096B	  %144:fpr64 = LDRDui %stack.11.t, 0, debug-location !519 :: (dereferenceable load 8 from %ir.t); cg.c:357:18
10112B	  %145:gpr64common = ADRP target-flags(aarch64-page) %const.1
10128B	  %146:fpr64 = LDRDui %145:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
10160B	  %148:gpr64 = MOVi64imm 4696837146684686336
10168B	  %147:fpr64 = FDIVDrr %146:fpr64, %144:fpr64, debug-location !521; cg.c:356:73
10176B	  %149:fpr64 = COPY %148:gpr64
10192B	  %150:fpr64 = FDIVDrr %147:fpr64, %149:fpr64, debug-location !522; cg.c:357:20
10208B	  STRDui %150:fpr64, %stack.12.mflops, 0, debug-location !523 :: (store 8 into %ir.mflops); cg.c:354:16
10224B	  B %bb.57, debug-location !524; cg.c:358:5

10240B	bb.56.if.else192:
	; predecessors: %bb.54
	  successors: %bb.57(0x80000000); %bb.57(100.00%)

10272B	  STRXui $xzr, %stack.12.mflops, 0, debug-location !525 :: (store 8 into %ir.mflops); cg.c:360:16

10288B	bb.57.if.end193:
	; predecessors: %bb.56, %bb.55
	  successors: %bb.58(0x50000000), %bb.67(0x30000000); %bb.58(62.50%), %bb.67(37.50%)

10304B	  %151:gpr32 = LDRSBWui %stack.14.Class, 0, debug-location !527 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:363:25
10320B	  %152:fpr64 = LDRDui %stack.11.t, 0, debug-location !528 :: (dereferenceable load 8 from %ir.t); cg.c:363:49
10336B	  %153:fpr64 = LDRDui %stack.12.mflops, 0, debug-location !529 :: (dereferenceable load 8 from %ir.mflops); cg.c:363:52
10352B	  %154:gpr32 = LDRWui %stack.15.verified, 0, debug-location !530 :: (dereferenceable load 4 from %ir.verified); cg.c:364:47
10368B	  ADJCALLSTACKDOWN 72, 0, implicit-def dead $sp, implicit $sp, debug-location !531; cg.c:363:5
10384B	  %155:gpr64 = MOVaddr target-flags(aarch64-page) @.str.31, target-flags(aarch64-pageoff, aarch64-nc) @.str.31, debug-location !531; cg.c:363:5
10432B	  %157:gpr64 = MOVaddr target-flags(aarch64-page) @.str.30, target-flags(aarch64-pageoff, aarch64-nc) @.str.30, debug-location !531; cg.c:363:5
10464B	  %158:gpr64 = MOVaddr target-flags(aarch64-page) @.str.29, target-flags(aarch64-pageoff, aarch64-nc) @.str.29, debug-location !531; cg.c:363:5
10496B	  %159:gpr64 = MOVaddr target-flags(aarch64-page) @.str.28, target-flags(aarch64-pageoff, aarch64-nc) @.str.28, debug-location !531; cg.c:363:5
10528B	  %160:gpr64 = MOVaddr target-flags(aarch64-page) @.str.27, target-flags(aarch64-pageoff, aarch64-nc) @.str.27, debug-location !531; cg.c:363:5
10560B	  %161:gpr64 = MOVaddr target-flags(aarch64-page) @.str.26, target-flags(aarch64-pageoff, aarch64-nc) @.str.26, debug-location !531; cg.c:363:5
10592B	  %162:gpr64 = MOVaddr target-flags(aarch64-page) @.str.25, target-flags(aarch64-pageoff, aarch64-nc) @.str.25, debug-location !531; cg.c:363:5
10624B	  %163:gpr64 = MOVaddr target-flags(aarch64-page) @.str.24, target-flags(aarch64-pageoff, aarch64-nc) @.str.24, debug-location !531; cg.c:363:5
10632B	  STRXui %155:gpr64, $sp, 8, debug-location !531 :: (store 8 into stack + 64); cg.c:363:5
10656B	  %164:gpr64 = MOVaddr target-flags(aarch64-page) @.str.23, target-flags(aarch64-pageoff, aarch64-nc) @.str.23, debug-location !531; cg.c:363:5
10660B	  STRXui %158:gpr64, $sp, 6, debug-location !531 :: (store 8 into stack + 48); cg.c:363:5
10664B	  STRXui %157:gpr64, $sp, 7, debug-location !531 :: (store 8 into stack + 56); cg.c:363:5
10688B	  %165:gpr64 = MOVaddr target-flags(aarch64-page) @.str.21, target-flags(aarch64-pageoff, aarch64-nc) @.str.21, debug-location !531; cg.c:363:5
10692B	  STRXui %160:gpr64, $sp, 4, debug-location !531 :: (store 8 into stack + 32); cg.c:363:5
10696B	  STRXui %159:gpr64, $sp, 5, debug-location !531 :: (store 8 into stack + 40); cg.c:363:5
10704B	  %166:gpr64 = MOVaddr target-flags(aarch64-page) @.str.22, target-flags(aarch64-pageoff, aarch64-nc) @.str.22, debug-location !531; cg.c:363:5
10712B	  STRXui %162:gpr64, $sp, 2, debug-location !531 :: (store 8 into stack + 16); cg.c:363:5
10720B	  STRXui %161:gpr64, $sp, 3, debug-location !531 :: (store 8 into stack + 24); cg.c:363:5
10728B	  STRXui %164:gpr64, $sp, 0, debug-location !531 :: (store 8 into stack); cg.c:363:5
10784B	  $w2 = MOVi32imm 75000, debug-location !531; cg.c:363:5
10832B	  $w5 = MOVi32imm 75, debug-location !531; cg.c:363:5
10840B	  STRXui %163:gpr64, $sp, 1, debug-location !531 :: (store 8 into stack + 8); cg.c:363:5
10848B	  $d0 = COPY %152:fpr64, debug-location !531; cg.c:363:5
10864B	  $d1 = COPY %153:fpr64, debug-location !531; cg.c:363:5
10868B	  $x0 = COPY %165:gpr64, debug-location !531; cg.c:363:5
10872B	  $w1 = COPY %151:gpr32, debug-location !531; cg.c:363:5
10880B	  $w3 = COPY $wzr, debug-location !531; cg.c:363:5
10888B	  $w4 = COPY $wzr, debug-location !531; cg.c:363:5
10896B	  $x6 = COPY %166:gpr64, debug-location !531; cg.c:363:5
10904B	  $w7 = COPY %154:gpr32, debug-location !531; cg.c:363:5
10912B	  BL @print_results, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit $w3, implicit $w4, implicit killed $w5, implicit $d0, implicit killed $d1, implicit killed $x6, implicit killed $w7, implicit-def $sp, debug-location !531; cg.c:363:5
10928B	  ADJCALLSTACKUP 72, 0, implicit-def dead $sp, implicit $sp, debug-location !531; cg.c:363:5
10944B	  %170:gpr32 = LDRWui %386:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !532 :: (dereferenceable load 4 from @timeron); cg.c:370:9
10960B	  CBZW %170:gpr32, %bb.67, debug-location !534; cg.c:370:9
10976B	  B %bb.58, debug-location !534; cg.c:370:9

10992B	bb.58.if.then195:
	; predecessors: %bb.57
	  successors: %bb.59(0x50000000), %bb.60(0x30000000); %bb.59(62.50%), %bb.60(37.50%)

11008B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !535; cg.c:371:16
11040B	  $w0 = MOVi32imm 1, debug-location !535; cg.c:371:16
11056B	  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !535; cg.c:371:16
11072B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !535; cg.c:371:16
11088B	  %172:fpr64 = COPY $d0, debug-location !535; cg.c:371:16
11120B	  FCMPDri %172:fpr64, implicit-def $nzcv, debug-location !541; cg.c:372:13
11128B	  STRDui %172:fpr64, %stack.13.tmax, 0, debug-location !537 :: (store 8 into %ir.tmax); cg.c:371:14
11136B	  Bcc 1, %bb.60, implicit killed $nzcv, debug-location !541; cg.c:372:13
11152B	  B %bb.59, debug-location !541; cg.c:372:13

11168B	bb.59.if.then199:
	; predecessors: %bb.58
	  successors: %bb.60(0x80000000); %bb.60(100.00%)

11184B	  %173:gpr64 = MOVi64imm 4607182418800017408
11200B	  STRXui %173:gpr64, %stack.13.tmax, 0, debug-location !542 :: (store 8 into %ir.tmax); cg.c:373:18

11216B	bb.60.if.end200:
	; predecessors: %bb.58, %bb.59
	  successors: %bb.61(0x80000000); %bb.61(100.00%)

11232B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !544; cg.c:374:9
11248B	  %174:gpr64 = MOVaddr target-flags(aarch64-page) @.str.32, target-flags(aarch64-pageoff, aarch64-nc) @.str.32, debug-location !544; cg.c:374:9
11264B	  $x0 = COPY %174:gpr64, debug-location !544; cg.c:374:9
11280B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !544; cg.c:374:9
11296B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !544; cg.c:374:9
11328B	  STRWui $wzr, %stack.3.i, 0, debug-location !545 :: (store 4 into %ir.i); cg.c:375:16
11344B	  %184:gpr64sp = ADDXri %stack.19.t_names, 0, 0
11360B	  %206:gpr64 = MOVaddr target-flags(aarch64-page) @.str.33, target-flags(aarch64-pageoff, aarch64-nc) @.str.33
11376B	  %187:gpr64 = MOVi64imm 4636737291354636288
11392B	  %192:gpr64 = MOVaddr target-flags(aarch64-page) @.str.34, target-flags(aarch64-pageoff, aarch64-nc) @.str.34
11408B	  %203:gpr64 = MOVaddr target-flags(aarch64-page) @.str.35, target-flags(aarch64-pageoff, aarch64-nc) @.str.35
11424B	  %204:gpr64 = MOVaddr target-flags(aarch64-page) @.str.36, target-flags(aarch64-pageoff, aarch64-nc) @.str.36

11440B	bb.61.for.cond202:
	; predecessors: %bb.60, %bb.66
	  successors: %bb.62(0x7c000000), %bb.67(0x04000000); %bb.62(96.88%), %bb.67(3.12%)

11456B	  %177:gpr32common = LDRWui %stack.3.i, 0, debug-location !548 :: (dereferenceable load 4 from %ir.i); cg.c:375:21
11472B	  dead $wzr = SUBSWri %177:gpr32common, 2, 0, implicit-def $nzcv, debug-location !551; cg.c:375:9
11488B	  Bcc 12, %bb.67, implicit killed $nzcv, debug-location !551; cg.c:375:9
11504B	  B %bb.62, debug-location !551; cg.c:375:9

11520B	bb.62.for.body205:
	; predecessors: %bb.61
	  successors: %bb.63(0x30000000), %bb.64(0x50000000); %bb.63(37.50%), %bb.64(62.50%)

11536B	  %180:gpr32 = LDRWui %stack.3.i, 0, debug-location !552 :: (dereferenceable load 4 from %ir.i); cg.c:376:28
11552B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !554; cg.c:376:17
11568B	  $w0 = COPY %180:gpr32, debug-location !554; cg.c:376:17
11584B	  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !554; cg.c:376:17
11600B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !554; cg.c:376:17
11648B	  %182:gpr64 = LDRSWui %stack.3.i, 0, debug-location !556 :: (dereferenceable load 4 from %ir.i); cg.c:377:17
11680B	  %9:gpr64 = LDRXroX %184:gpr64sp, %182:gpr64, 0, 1, debug-location !559 :: (load 8 from %ir.arrayidx211); cg.c:0
11684B	  %10:fpr64 = COPY $d0, debug-location !554; cg.c:376:17
11688B	  STRDui %10:fpr64, %stack.11.t, 0, debug-location !555 :: (store 8 into %ir.t); cg.c:376:15
11728B	  CBNZW %182.sub_32:gpr64, %bb.64, debug-location !560; cg.c:377:17
11744B	  B %bb.63, debug-location !560; cg.c:377:17

11760B	bb.63.if.then209:
	; predecessors: %bb.62
	  successors: %bb.66(0x80000000); %bb.66(100.00%)

11776B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !561; cg.c:378:17
11792B	  $x0 = COPY %206:gpr64, debug-location !561; cg.c:378:17
11808B	  $x1 = COPY %9:gpr64, debug-location !561; cg.c:378:17
11824B	  $d0 = COPY %10:fpr64, debug-location !561; cg.c:378:17
11840B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !561; cg.c:378:17
11856B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !561; cg.c:378:17
11872B	  B %bb.66, debug-location !563; cg.c:379:13

11888B	bb.64.if.else213:
	; predecessors: %bb.62
	  successors: %bb.65(0x40000000), %bb.66(0x40000000); %bb.65(50.00%), %bb.66(50.00%)

11904B	  %186:fpr64 = LDRDui %stack.11.t, 0, debug-location !564 :: (dereferenceable load 8 from %ir.t); cg.c:382:24
11952B	  %190:fpr64 = LDRDui %stack.13.tmax, 0, debug-location !567 :: (dereferenceable load 8 from %ir.tmax); cg.c:382:36
11956B	  %188:fpr64 = COPY %187:gpr64
11960B	  %189:fpr64 = FMULDrr %186:fpr64, %188:fpr64, debug-location !566; cg.c:382:26
11968B	  %191:fpr64 = FDIVDrr %189:fpr64, %190:fpr64, debug-location !568; cg.c:382:34
11984B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !569; cg.c:381:17
12000B	  $x0 = COPY %192:gpr64, debug-location !569; cg.c:381:17
12016B	  $x1 = COPY %9:gpr64, debug-location !569; cg.c:381:17
12032B	  $d0 = COPY %10:fpr64, debug-location !569; cg.c:381:17
12048B	  $d1 = COPY %191:fpr64, debug-location !569; cg.c:381:17
12064B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0, debug-location !569; cg.c:381:17
12080B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !569; cg.c:381:17
12096B	  %194:gpr32common = LDRWui %stack.3.i, 0, debug-location !570 :: (dereferenceable load 4 from %ir.i); cg.c:383:21
12112B	  dead $wzr = SUBSWri %194:gpr32common, 2, 0, implicit-def $nzcv, debug-location !573; cg.c:383:21
12128B	  Bcc 1, %bb.66, implicit killed $nzcv, debug-location !573; cg.c:383:21
12144B	  B %bb.65, debug-location !573; cg.c:383:21

12160B	bb.65.if.then221:
	; predecessors: %bb.64
	  successors: %bb.66(0x80000000); %bb.66(100.00%)

12176B	  %196:fpr64 = LDRDui %stack.13.tmax, 0, debug-location !574 :: (dereferenceable load 8 from %ir.tmax); cg.c:384:25
12192B	  %197:fpr64 = LDRDui %stack.11.t, 0, debug-location !576 :: (dereferenceable load 8 from %ir.t); cg.c:384:32
12240B	  %200:fpr64 = COPY %187:gpr64
12244B	  %198:fpr64 = FSUBDrr %196:fpr64, %197:fpr64, debug-location !577; cg.c:384:30
12248B	  STRDui %198:fpr64, %stack.11.t, 0, debug-location !578 :: (store 8 into %ir.t); cg.c:384:23
12256B	  %201:fpr64 = FMULDrr %198:fpr64, %200:fpr64, debug-location !581; cg.c:386:30
12272B	  %202:fpr64 = FDIVDrr %201:fpr64, %196:fpr64, debug-location !583; cg.c:386:38
12288B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !584; cg.c:385:21
12304B	  $x0 = COPY %203:gpr64, debug-location !584; cg.c:385:21
12320B	  $x1 = COPY %204:gpr64, debug-location !584; cg.c:385:21
12336B	  $d0 = COPY %198:fpr64, debug-location !584; cg.c:385:21
12352B	  $d1 = COPY %202:fpr64, debug-location !584; cg.c:385:21
12368B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0, debug-location !584; cg.c:385:21
12384B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !584; cg.c:385:21

12400B	bb.66.for.inc228:
	; predecessors: %bb.64, %bb.65, %bb.63
	  successors: %bb.61(0x80000000); %bb.61(100.00%)

12416B	  %208:gpr32common = LDRWui %stack.3.i, 0, debug-location !586 :: (dereferenceable load 4 from %ir.i); cg.c:375:34
12432B	  %209:gpr32common = nsw ADDWri %208:gpr32common, 1, 0, debug-location !586; cg.c:375:34
12448B	  STRWui %209:gpr32common, %stack.3.i, 0, debug-location !586 :: (store 4 into %ir.i); cg.c:375:34
12464B	  B %bb.61, debug-location !587; cg.c:375:9

12480B	bb.67.do.end235:
	; predecessors: %bb.57, %bb.61

12512B	  $w0 = COPY $wzr, debug-location !590; cg.c:394:5
12528B	  RET_ReallyLR implicit $w0, debug-location !590; cg.c:394:5

# End machine code for function main.

Before post-MI-sched:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-100]
  fi#1: size=4, align=4, at location [SP-104]
  fi#2: size=8, align=8, at location [SP-128]
  fi#3: size=4, align=4, at location [SP-132]
  fi#4: size=4, align=4, at location [SP-136]
  fi#5: size=4, align=4, at location [SP-140]
  fi#6: size=4, align=4, at location [SP-144]
  fi#7: size=8, align=8, at location [SP-152]
  fi#8: size=8, align=8, at location [SP-160]
  fi#9: size=8, align=8, at location [SP-168]
  fi#10: size=8, align=8, at location [SP-176]
  fi#11: size=8, align=8, at location [SP-184]
  fi#12: size=8, align=8, at location [SP-192]
  fi#13: size=8, align=8, at location [SP-200]
  fi#14: size=1, align=4, at location [SP-204]
  fi#15: size=4, align=4, at location [SP-208]
  fi#16: size=8, align=8, at location [SP-216]
  fi#17: size=8, align=8, at location [SP-224]
  fi#18: size=8, align=8, at location [SP-232]
  fi#19: size=24, align=16, at location [SP-256]
  fi#20: size=8, align=8, at location [SP-264]
  fi#21: size=8, align=8, at location [SP-120]
  fi#22: size=8, align=8, at location [SP-8]
  fi#23: size=8, align=8, at location [SP-16]
  fi#24: size=8, align=8, at location [SP-24]
  fi#25: size=8, align=8, at location [SP-32]
  fi#26: size=8, align=8, at location [SP-40]
  fi#27: size=8, align=8, at location [SP-48]
  fi#28: size=8, align=8, at location [SP-56]
  fi#29: size=8, align=8, at location [SP-64]
  fi#30: size=8, align=8, at location [SP-72]
  fi#31: size=8, align=8, at location [SP-80]
  fi#32: size=8, align=8, at location [SP-88]
  fi#33: size=8, align=8, at location [SP-96]
  fi#34: size=8, align=16, at location [SP-112]
Constant Pool:
  cp#0: 0x41D2309CE5400000, align=8
  cp#1: 0x422979CA8D600000, align=8
Function Live Ins: $w0, $x1

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $w0, $x1, $d8, $x27, $x28, $x25, $x26, $x23, $x24, $x21, $x22, $x19, $x20, $lr
  $sp = frame-setup SUBXri $sp, 336, 0
  frame-setup STRDui killed $d8, $sp, 28 :: (store 8 into %stack.34)
  frame-setup STPXi killed $x28, killed $x27, $sp, 30 :: (store 8 into %stack.33), (store 8 into %stack.32)
  frame-setup STPXi killed $x26, killed $x25, $sp, 32 :: (store 8 into %stack.31), (store 8 into %stack.30)
  frame-setup STPXi killed $x24, killed $x23, $sp, 34 :: (store 8 into %stack.29), (store 8 into %stack.28)
  frame-setup STPXi killed $x22, killed $x21, $sp, 36 :: (store 8 into %stack.27), (store 8 into %stack.26)
  frame-setup STPXi killed $x20, killed $x19, $sp, 38 :: (store 8 into %stack.25), (store 8 into %stack.24)
  frame-setup STPXi killed $fp, killed $lr, $sp, 40 :: (store 8 into %stack.23), (store 8 into %stack.22)
  $fp = frame-setup ADDXri $sp, 320, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  frame-setup CFI_INSTRUCTION offset $w19, -24
  frame-setup CFI_INSTRUCTION offset $w20, -32
  frame-setup CFI_INSTRUCTION offset $w21, -40
  frame-setup CFI_INSTRUCTION offset $w22, -48
  frame-setup CFI_INSTRUCTION offset $w23, -56
  frame-setup CFI_INSTRUCTION offset $w24, -64
  frame-setup CFI_INSTRUCTION offset $w25, -72
  frame-setup CFI_INSTRUCTION offset $w26, -80
  frame-setup CFI_INSTRUCTION offset $w27, -88
  frame-setup CFI_INSTRUCTION offset $w28, -96
  frame-setup CFI_INSTRUCTION offset $b8, -112
  STPWi renamable $w0, $wzr, $fp, -22 :: (store 4 into %ir.retval), (store 4 into %ir.argc.addr)
  STURXi killed renamable $x1, $fp, -112 :: (store 8 into %ir.argv.addr)
  STURWi $wzr, $fp, -116, debug-location !132 :: (store 4 into %ir.i); cg.c:117:12

bb.1.for.cond:
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $w8 = LDURWi $fp, -116, debug-location !135 :: (dereferenceable load 4 from %ir.i); cg.c:117:17
  dead $wzr = SUBSWri killed renamable $w8, 2, 0, implicit-def $nzcv, debug-location !138; cg.c:117:5
  Bcc 12, %bb.3, implicit $nzcv, debug-location !138; cg.c:117:5

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $w0 = LDURWi $fp, -116, debug-location !139 :: (dereferenceable load 4 from %ir.i); cg.c:118:21
  BL @timer_clear, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !141; cg.c:118:9
  renamable $w8 = LDURWi $fp, -116, debug-location !142 :: (dereferenceable load 4 from %ir.i); cg.c:117:30
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !142; cg.c:117:30
  STURWi killed renamable $w8, $fp, -116, debug-location !142 :: (store 4 into %ir.i); cg.c:117:30
  B %bb.1

bb.3.for.end:
; predecessors: %bb.1
  successors: %bb.4(0x50000000), %bb.5(0x30000000); %bb.4(62.50%), %bb.5(37.50%)

  $x0 = ADRP target-flags(aarch64-page) @.str, debug-location !152; cg.c:122:15
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str, 0, debug-location !152; cg.c:122:15
  $x1 = ADRP target-flags(aarch64-page) @.str.1, debug-location !152; cg.c:122:15
  renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1, 0, debug-location !152; cg.c:122:15
  BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0, debug-location !152; cg.c:122:15
  STRXui renamable $x0, $sp, 9, debug-location !154 :: (store 8 into %ir.fp); cg.c:122:13
  renamable $x11 = ADRP target-flags(aarch64-page) @timeron
  CBZX killed renamable $x0, %bb.5, debug-location !156; cg.c:122:9

bb.4.if.then:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $x11
  $w8 = MOVZWi 1, 0
  $x9 = ADRP target-flags(aarch64-page) @.str.2, debug-location !160; cg.c:124:25
  renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.2, 0, debug-location !160; cg.c:124:25
  $x10 = ADRP target-flags(aarch64-page) @.str.3, debug-location !162; cg.c:125:26
  renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.3, 0, debug-location !162; cg.c:125:26
  renamable $x0 = LDRXui $sp, 9, debug-location !165 :: (dereferenceable load 8 from %ir.fp); cg.c:127:16
  STRWui killed renamable $w8, killed renamable $x11, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !157 :: (store 4 into @timeron); cg.c:123:17
  STPXi renamable $x9, renamable $x10, $sp, 10, debug-location !160 :: (store 8 into %ir.arrayidx5, align 16), (store 8 into %ir.arrayidx2); cg.c:124:25
  $x8 = ADRP target-flags(aarch64-page) @.str.4, debug-location !164; cg.c:126:30
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.4, 0, debug-location !164; cg.c:126:30
  STRXui killed renamable $x8, $sp, 12, debug-location !164 :: (store 8 into %ir.arrayidx3, align 16); cg.c:126:30
  BL @fclose, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !166; cg.c:127:9
  B %bb.6

bb.5.if.else:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $x11
  STRWui $wzr, killed renamable $x11, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !168 :: (store 4 into @timeron); cg.c:130:17

bb.6.if.end:
; predecessors: %bb.5, %bb.4
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  $w23 = MOVZWi 9464, 0
  $w23 = MOVKWi $w23(tied-def 0), 1, 16
  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !171; cg.c:133:5
  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !171; cg.c:133:5
  renamable $x21 = ADRP target-flags(aarch64-page) @firstrow, debug-location !172; cg.c:135:14
  renamable $w8 = SUBWri renamable $w23, 1, 0, debug-location !173; cg.c:136:13
  renamable $x22 = ADRP target-flags(aarch64-page) @lastrow, debug-location !173; cg.c:136:13
  renamable $x27 = ADRP target-flags(aarch64-page) @firstcol, debug-location !174; cg.c:137:14
  renamable $x28 = ADRP target-flags(aarch64-page) @lastcol, debug-location !175; cg.c:138:13
  $w9 = MOVZWi 66, 0
  $x10 = MOVZXi 17818, 0
  $x10 = MOVKXi $x10(tied-def 0), 31978, 16
  $x10 = MOVKXi $x10(tied-def 0), 46710, 32
  $x10 = MOVKXi $x10(tied-def 0), 16438, 48
  STRWui $wzr, renamable $x21, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !172 :: (store 4 into @firstrow); cg.c:135:14
  STRWui renamable $w8, renamable $x22, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !173 :: (store 4 into @lastrow); cg.c:136:13
  STRWui $wzr, renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !174 :: (store 4 into @firstcol); cg.c:137:14
  STRWui killed renamable $w8, renamable $x28, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !175 :: (store 4 into @lastcol); cg.c:138:13
  STRBBui killed renamable $w9, $sp, 132, debug-location !176 :: (store 1 into %ir.Class, align 4); cg.c:153:15
  STRXui killed renamable $x10, $sp, 15, debug-location !182 :: (store 8 into %ir.zeta_verify_value); cg.c:154:27
  $x0 = ADRP target-flags(aarch64-page) @.str.5, debug-location !183; cg.c:172:5
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.5, 0, debug-location !183; cg.c:172:5
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !183; cg.c:172:5
  $x0 = ADRP target-flags(aarch64-page) @.str.6, debug-location !184; cg.c:173:5
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.6, 0, debug-location !184; cg.c:173:5
  $w1 = MOVZWi 9464, 0, debug-location !184; cg.c:173:5
  $w1 = MOVKWi $w1(tied-def 0), 1, 16, debug-location !184; cg.c:173:5
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !184; cg.c:173:5
  $x0 = ADRP target-flags(aarch64-page) @.str.7, debug-location !185; cg.c:174:5
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.7, 0, debug-location !185; cg.c:174:5
  $w1 = MOVZWi 75, 0, debug-location !185; cg.c:174:5
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !185; cg.c:174:5
  $x0 = ADRP target-flags(aarch64-page) @.str.8, debug-location !186; cg.c:175:5
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.8, 0, debug-location !186; cg.c:175:5
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !186; cg.c:175:5
  renamable $x19 = ADRP target-flags(aarch64-page) @naa, debug-location !187; cg.c:177:9
  renamable $x20 = ADRP target-flags(aarch64-page) @nzz, debug-location !188; cg.c:178:9
  $w8 = MOVZWi 19936, 0
  $w8 = MOVKWi $w8(tied-def 0), 224, 16
  $x0 = ADRP target-flags(aarch64-page) @tran, debug-location !189; cg.c:183:10
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @tran, 0, debug-location !189; cg.c:183:10
  $x9 = MOVZXi 41216, 16
  $x9 = MOVKXi $x9(tied-def 0), 47536, 32
  $x9 = MOVKXi $x9(tied-def 0), 16818, 48
  renamable $x10 = ADRP target-flags(aarch64-page) @amult, debug-location !190; cg.c:184:11
  $x11 = MOVZXi 58688, 16
  $x11 = MOVKXi $x11(tied-def 0), 12444, 32
  $x11 = MOVKXi $x11(tied-def 0), 16850, 48
  STRWui renamable $w23, renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !187 :: (store 4 into @naa); cg.c:177:9
  STRWui killed renamable $w8, renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @nzz, debug-location !188 :: (store 4 into @nzz); cg.c:178:9
  STRXui killed renamable $x9, renamable $x0, 0, debug-location !189 :: (store 8 into @tran); cg.c:183:10
  STRXui killed renamable $x11, killed renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !190 :: (store 8 into @amult); cg.c:184:11
  renamable $x8 = ADRP target-flags(aarch64-page) %const.0
  renamable $d0 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !192; cg.c:185:12
  renamable $w0 = LDRWui killed renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !194 :: (dereferenceable load 4 from @naa); cg.c:190:11
  renamable $w1 = LDRWui killed renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @nzz, debug-location !195 :: (dereferenceable load 4 from @nzz); cg.c:190:16
  renamable $w5 = LDRWui renamable $x21, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !196 :: (dereferenceable load 4 from @firstrow); cg.c:190:40
  renamable $w6 = LDRWui renamable $x22, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !197 :: (dereferenceable load 4 from @lastrow); cg.c:190:50
  renamable $w7 = LDRWui renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !198 :: (dereferenceable load 4 from @firstcol); cg.c:190:59
  renamable $w8 = LDRWui renamable $x28, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !199 :: (dereferenceable load 4 from @lastcol); cg.c:190:69
  STURDi killed renamable $d0, $fp, -136, debug-location !193 :: (store 8 into %ir.zeta); cg.c:185:10
  $x9 = ADRP target-flags(aarch64-page) @iv, debug-location !200; cg.c:190:5
  renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @iv, 0, debug-location !200; cg.c:190:5
  $x10 = ADRP target-flags(aarch64-page) @aelt, debug-location !200; cg.c:190:5
  renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @aelt, 0, debug-location !200; cg.c:190:5
  $x11 = ADRP target-flags(aarch64-page) @acol, debug-location !200; cg.c:190:5
  renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @acol, 0, debug-location !200; cg.c:190:5
  $x12 = ADRP target-flags(aarch64-page) @arow, debug-location !200; cg.c:190:5
  renamable $x12 = ADDXri $x12, target-flags(aarch64-pageoff, aarch64-nc) @arow, 0, debug-location !200; cg.c:190:5
  $x2 = ADRP target-flags(aarch64-page) @a, debug-location !200; cg.c:190:5
  renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @a, 0, debug-location !200; cg.c:190:5
  $x19 = ADRP target-flags(aarch64-page) @colidx, debug-location !200; cg.c:190:5
  renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @colidx, 0, debug-location !200; cg.c:190:5
  STPXi renamable $x10, renamable $x9, $sp, 3, debug-location !200 :: (store 8 into stack + 24), (store 8 into stack + 32); cg.c:190:5
  $x20 = ADRP target-flags(aarch64-page) @rowstr, debug-location !200; cg.c:190:5
  renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, 0, debug-location !200; cg.c:190:5
  STPXi renamable $x12, renamable $x11, $sp, 1, debug-location !200 :: (store 8 into stack + 8), (store 8 into stack + 16); cg.c:190:5
  STRWui killed renamable $w8, $sp, 0, debug-location !200 :: (store 4 into stack); cg.c:190:5
  $x3 = ORRXrs $xzr, $x19, 0, debug-location !200; cg.c:190:5
  $x4 = ORRXrs $xzr, $x20, 0, debug-location !200; cg.c:190:5
  BL @makea, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $w1, implicit $x2, implicit $x3, implicit $x4, implicit $w5, implicit $w6, implicit $w7, implicit-def $sp, debug-location !200; cg.c:190:5
  STURWi $wzr, $fp, -120, debug-location !201 :: (store 4 into %ir.j); cg.c:202:12

bb.7.for.cond10:
; predecessors: %bb.6, %bb.11
  successors: %bb.8(0x7c000000), %bb.12(0x04000000); %bb.8(96.88%), %bb.12(3.12%)
  liveins: $w23, $x19, $x20, $x21, $x22, $x27, $x28
  renamable $w8 = LDRWui renamable $x22, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !206 :: (dereferenceable load 4 from @lastrow); cg.c:202:21
  renamable $w9 = LDRWui renamable $x21, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !207 :: (dereferenceable load 4 from @firstrow); cg.c:202:31
  renamable $w10 = LDURWi $fp, -120, debug-location !204 :: (dereferenceable load 4 from %ir.j); cg.c:202:17
  $w8 = SUBWrs killed renamable $w8, killed renamable $w9, 0, debug-location !208; cg.c:202:29
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !209; cg.c:202:40
  $wzr = SUBSWrs killed renamable $w10, killed renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !211; cg.c:202:5
  Bcc 10, %bb.12, implicit $nzcv, debug-location !211; cg.c:202:5

bb.8.for.body12:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $w23, $x19, $x20, $x21, $x22, $x27, $x28
  renamable $x8 = LDURSWi $fp, -120, debug-location !212 :: (dereferenceable load 4 from %ir.j); cg.c:203:25
  renamable $w8 = LDRWroX renamable $x20, killed renamable $x8, 0, 1, debug-location !215 :: (load 4 from %ir.arrayidx13); cg.c:203:18

bb.9.for.cond14:
; predecessors: %bb.8, %bb.10
  successors: %bb.10(0x7c000000), %bb.11(0x04000000); %bb.10(96.88%), %bb.11(3.12%)
  liveins: $w23, $x19, $x20, $x21, $x22, $x27, $x28, $w8
  STURWi killed renamable $w8, $fp, -124, debug-location !DILocation(line: 0, scope: !213) :: (store 4 into %ir.k); cg.c:0
  renamable $w9, $w8 = LDPWi $fp, -31, debug-location !220 :: (dereferenceable load 4 from %ir.j), (dereferenceable load 4 from %ir.k); cg.c:203:40
  $w8 = KILL $w8, implicit-def $x8, debug-location !220; cg.c:203:40
  $x8 = SBFMXri $x8, 0, 31, debug-location !220; cg.c:203:40
  renamable $x8 = ADDXrs renamable $x20, killed renamable $x8, 2, debug-location !222; cg.c:203:33
  renamable $w8 = LDRWui killed renamable $x8, 1, debug-location !222 :: (load 4 from %ir.arrayidx17); cg.c:203:33
  $wzr = SUBSWrs killed renamable $w9, killed renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !224; cg.c:203:9
  Bcc 10, %bb.11, implicit $nzcv, debug-location !224; cg.c:203:9

bb.10.for.body19:
; predecessors: %bb.9
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $w23, $x19, $x20, $x21, $x22, $x27, $x28
  renamable $x8 = LDURSWi $fp, -124, debug-location !225 :: (dereferenceable load 4 from %ir.k); cg.c:204:32
  renamable $w9 = LDRWui renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !228 :: (dereferenceable load 4 from @firstcol); cg.c:204:37
  renamable $x10 = UBFMXri renamable $x8, 62, 61, debug-location !227; cg.c:204:25
  renamable $w11 = LDRWroX renamable $x19, renamable $x10, 0, 0, debug-location !227 :: (load 4 from %ir.arrayidx21); cg.c:204:25
  renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit killed $x8, debug-location !233; cg.c:203:49
  $w9 = SUBWrs killed renamable $w11, killed renamable $w9, 0, debug-location !229; cg.c:204:35
  STRWroX killed renamable $w9, renamable $x19, killed renamable $x10, 0, 0, debug-location !232 :: (store 4 into %ir.arrayidx24); cg.c:204:23
  B %bb.9

bb.11.for.inc28:
; predecessors: %bb.9
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $w23, $x19, $x20, $x21, $x22, $x27, $x28
  renamable $w8 = LDURWi $fp, -120, debug-location !237 :: (dereferenceable load 4 from %ir.j); cg.c:202:46
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !237; cg.c:202:46
  STURWi killed renamable $w8, $fp, -120, debug-location !237 :: (store 4 into %ir.j); cg.c:202:46
  B %bb.7

bb.12.for.end30:
; predecessors: %bb.7
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $w23, $x27, $x28
  STURWi $wzr, $fp, -116, debug-location !241 :: (store 4 into %ir.i); cg.c:211:12
  $x19 = ADRP target-flags(aarch64-page) @x
  renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @x, 0
  $x8 = MOVZXi 16368, 48

bb.13.for.cond31:
; predecessors: %bb.12, %bb.14
  successors: %bb.14(0x7c000000), %bb.15(0x04000000); %bb.14(96.88%), %bb.15(3.12%)
  liveins: $w23, $x8, $x19, $x27, $x28
  renamable $w9 = LDURWi $fp, -116, debug-location !244 :: (dereferenceable load 4 from %ir.i); cg.c:211:17
  renamable $w10 = ADDWri renamable $w23, 1, 0, debug-location !246; cg.c:211:19
  $wzr = SUBSWrs killed renamable $w9, killed renamable $w10, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !247; cg.c:211:5
  Bcc 10, %bb.15, implicit $nzcv, debug-location !247; cg.c:211:5

bb.14.for.body33:
; predecessors: %bb.13
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $w23, $x8, $x19, $x27, $x28
  renamable $x9 = LDURSWi $fp, -116, debug-location !248 :: (dereferenceable load 4 from %ir.i); cg.c:212:11
  STRXroX renamable $x8, renamable $x19, renamable $x9, 0, 1, debug-location !251 :: (store 8 into %ir.arrayidx35); cg.c:212:14
  renamable $w9 = nsw ADDWri renamable $w9, 1, 0, implicit killed $x9, debug-location !252; cg.c:211:30
  STURWi killed renamable $w9, $fp, -116, debug-location !252 :: (store 4 into %ir.i); cg.c:211:30
  B %bb.13

bb.15.for.end38:
; predecessors: %bb.13
  successors: %bb.16(0x80000000); %bb.16(100.00%)
  liveins: $x19, $x27, $x28
  STURWi $wzr, $fp, -120, debug-location !256 :: (store 4 into %ir.j); cg.c:214:12
  $x8 = ADRP target-flags(aarch64-page) @q
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @q, 0
  $x20 = ADRP target-flags(aarch64-page) @z
  renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @z, 0
  $x9 = ADRP target-flags(aarch64-page) @r
  renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @r, 0
  $x10 = ADRP target-flags(aarch64-page) @p
  renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @p, 0

bb.16.for.cond39:
; predecessors: %bb.15, %bb.17
  successors: %bb.17(0x7c000000), %bb.18(0x04000000); %bb.17(96.88%), %bb.18(3.12%)
  liveins: $x8, $x9, $x10, $x19, $x20, $x27, $x28
  renamable $w11 = LDRWui renamable $x28, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !261 :: (dereferenceable load 4 from @lastcol); cg.c:214:21
  renamable $w12 = LDRWui renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !262 :: (dereferenceable load 4 from @firstcol); cg.c:214:31
  renamable $w13 = LDURWi $fp, -120, debug-location !259 :: (dereferenceable load 4 from %ir.j); cg.c:214:17
  $w11 = SUBWrs killed renamable $w11, killed renamable $w12, 0, debug-location !263; cg.c:214:29
  renamable $w11 = nsw ADDWri killed renamable $w11, 1, 0, debug-location !264; cg.c:214:40
  $wzr = SUBSWrs killed renamable $w13, killed renamable $w11, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !266; cg.c:214:5
  Bcc 10, %bb.18, implicit $nzcv, debug-location !266; cg.c:214:5

bb.17.for.body43:
; predecessors: %bb.16
  successors: %bb.16(0x80000000); %bb.16(100.00%)
  liveins: $x8, $x9, $x10, $x19, $x20, $x27, $x28
  renamable $x11 = LDURSWi $fp, -120, debug-location !267 :: (dereferenceable load 4 from %ir.j); cg.c:215:11
  renamable $x12 = UBFMXri renamable $x11, 61, 60, debug-location !278; cg.c:218:9
  renamable $w11 = nsw ADDWri renamable $w11, 1, 0, implicit killed $x11, debug-location !280; cg.c:214:46
  STRXroX $xzr, renamable $x8, renamable $x12, 0, 0, debug-location !270 :: (store 8 into %ir.arrayidx45); cg.c:215:14
  STRXroX $xzr, renamable $x20, renamable $x12, 0, 0, debug-location !273 :: (store 8 into %ir.arrayidx47); cg.c:216:14
  STRXroX $xzr, renamable $x9, renamable $x12, 0, 0, debug-location !276 :: (store 8 into %ir.arrayidx49); cg.c:217:14
  STRXroX $xzr, renamable $x10, killed renamable $x12, 0, 0, debug-location !279 :: (store 8 into %ir.arrayidx51); cg.c:218:14
  STURWi killed renamable $w11, $fp, -120, debug-location !280 :: (store 4 into %ir.j); cg.c:214:46
  B %bb.16

bb.18.for.end54:
; predecessors: %bb.16
  successors: %bb.19(0x80000000); %bb.19(100.00%)
  liveins: $x19, $x20, $x27, $x28
  STURXi $xzr, $fp, -136, debug-location !284 :: (store 8 into %ir.zeta); cg.c:221:10
  $w8 = MOVZWi 1, 0
  $x21 = ADRP target-flags(aarch64-page) @colidx
  renamable $x21 = ADDXri $x21, target-flags(aarch64-pageoff, aarch64-nc) @colidx, 0
  $x22 = ADRP target-flags(aarch64-page) @rowstr
  renamable $x22 = ADDXri $x22, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, 0
  $x23 = ADRP target-flags(aarch64-page) @a
  renamable $x23 = ADDXri $x23, target-flags(aarch64-pageoff, aarch64-nc) @a, 0
  $x24 = ADRP target-flags(aarch64-page) @p
  renamable $x24 = ADDXri $x24, target-flags(aarch64-pageoff, aarch64-nc) @p, 0
  $x25 = ADRP target-flags(aarch64-page) @q
  renamable $x25 = ADDXri $x25, target-flags(aarch64-pageoff, aarch64-nc) @q, 0
  $x26 = ADRP target-flags(aarch64-page) @r
  renamable $x26 = ADDXri $x26, target-flags(aarch64-pageoff, aarch64-nc) @r, 0
  STURWi killed renamable $w8, $fp, -128, debug-location !285 :: (store 4 into %ir.it); cg.c:228:13
  renamable $d8 = FMOVDi 112

bb.19.for.cond55:
; predecessors: %bb.18, %bb.28
  successors: %bb.20(0x7c000000), %bb.29(0x04000000); %bb.20(96.88%), %bb.29(3.12%)
  liveins: $d8, $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w8 = LDURWi $fp, -128, debug-location !288 :: (dereferenceable load 4 from %ir.it); cg.c:228:18
  dead $wzr = SUBSWri killed renamable $w8, 1, 0, implicit-def $nzcv, debug-location !291; cg.c:228:5
  Bcc 12, %bb.29, implicit $nzcv, debug-location !291; cg.c:228:5

bb.20.for.body57:
; predecessors: %bb.19
  successors: %bb.21(0x80000000); %bb.21(100.00%)
  liveins: $d8, $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  $x8 = SUBXri $fp, 144, 0, debug-location !292; cg.c:232:9
  STRXui killed renamable $x8, $sp, 0, debug-location !292 :: (store 8 into stack); cg.c:232:9
  $x0 = ORRXrs $xzr, $x21, 0, debug-location !292; cg.c:232:9
  $x1 = ORRXrs $xzr, $x22, 0, debug-location !292; cg.c:232:9
  $x2 = ORRXrs $xzr, $x19, 0, debug-location !292; cg.c:232:9
  $x3 = ORRXrs $xzr, $x20, 0, debug-location !292; cg.c:232:9
  $x4 = ORRXrs $xzr, $x23, 0, debug-location !292; cg.c:232:9
  $x5 = ORRXrs $xzr, $x24, 0, debug-location !292; cg.c:232:9
  $x6 = ORRXrs $xzr, $x25, 0, debug-location !292; cg.c:232:9
  $x7 = ORRXrs $xzr, $x26, 0, debug-location !292; cg.c:232:9
  BL @conj_grad, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $x3, implicit $x4, implicit $x5, implicit $x6, implicit $x7, implicit-def $sp, debug-location !292; cg.c:232:9
  STURXi $xzr, $fp, -152, debug-location !294 :: (store 8 into %ir.norm_temp1); cg.c:240:20
  STRXui $xzr, $sp, 20, debug-location !295 :: (store 8 into %ir.norm_temp2); cg.c:241:20
  STURWi $wzr, $fp, -120, debug-location !296 :: (store 4 into %ir.j); cg.c:242:16

bb.21.for.cond58:
; predecessors: %bb.20, %bb.22
  successors: %bb.22(0x7c000000), %bb.23(0x04000000); %bb.22(96.88%), %bb.23(3.12%)
  liveins: $d8, $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w8 = LDRWui renamable $x28, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !301 :: (dereferenceable load 4 from @lastcol); cg.c:242:25
  renamable $w9 = LDRWui renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !302 :: (dereferenceable load 4 from @firstcol); cg.c:242:35
  renamable $w10 = LDURWi $fp, -120, debug-location !299 :: (dereferenceable load 4 from %ir.j); cg.c:242:21
  $w8 = SUBWrs killed renamable $w8, killed renamable $w9, 0, debug-location !303; cg.c:242:33
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !304; cg.c:242:44
  $wzr = SUBSWrs killed renamable $w10, killed renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !306; cg.c:242:9
  Bcc 10, %bb.23, implicit $nzcv, debug-location !306; cg.c:242:9

bb.22.for.body62:
; predecessors: %bb.21
  successors: %bb.21(0x80000000); %bb.21(100.00%)
  liveins: $d8, $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $x8 = LDURSWi $fp, -120, debug-location !309 :: (dereferenceable load 4 from %ir.j); cg.c:243:41
  renamable $x9 = UBFMXri renamable $x8, 61, 60, debug-location !318; cg.c:244:39
  renamable $d0 = LDRDroX renamable $x19, renamable $x9, 0, 0, debug-location !310 :: (load 8 from %ir.arrayidx64); cg.c:243:39
  renamable $d1 = LDRDroX renamable $x20, killed renamable $x9, 0, 0, debug-location !318 :: (load 8 from %ir.arrayidx71); cg.c:244:39
  renamable $d2 = LDURDi $fp, -152, debug-location !307 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:243:26
  renamable $d3 = LDRDui $sp, 20, debug-location !316 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:244:26
  renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit killed $x8, debug-location !324; cg.c:242:50
  renamable $d0 = FMULDrr killed renamable $d0, renamable $d1, debug-location !313; cg.c:243:44
  renamable $d1 = FMULDrr killed renamable $d1, renamable $d1, debug-location !321; cg.c:244:44
  renamable $d0 = FADDDrr killed renamable $d2, killed renamable $d0, debug-location !314; cg.c:243:37
  renamable $d1 = FADDDrr killed renamable $d3, killed renamable $d1, debug-location !322; cg.c:244:37
  STURDi killed renamable $d0, $fp, -152, debug-location !315 :: (store 8 into %ir.norm_temp1); cg.c:243:24
  STRDui killed renamable $d1, $sp, 20, debug-location !323 :: (store 8 into %ir.norm_temp2); cg.c:244:24
  STURWi killed renamable $w8, $fp, -120, debug-location !324 :: (store 4 into %ir.j); cg.c:242:50
  B %bb.21

bb.23.for.end76:
; predecessors: %bb.21
  successors: %bb.25(0x50000000), %bb.24(0x30000000); %bb.25(62.50%), %bb.24(37.50%)
  liveins: $d8, $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $d1 = LDRDui $sp, 20, debug-location !328 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:247:33
  renamable $d0 = FSQRTDr renamable $d1, debug-location !329; cg.c:247:28
  FCMPDrr renamable $d0, renamable $d0, implicit-def $nzcv, debug-location !330; cg.c:247:26
  Bcc 7, %bb.25, implicit $nzcv, debug-location !330; cg.c:247:26

bb.24.call.sqrt:
; predecessors: %bb.23
  successors: %bb.25(0x80000000); %bb.25(100.00%)
  liveins: $d1, $d8, $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  $q0 = ORRv16i8 $q1, killed $q1, debug-location !330; cg.c:247:26
  BL @sqrt, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !330; cg.c:247:26

bb.25.for.end76.split:
; predecessors: %bb.23, %bb.24
  successors: %bb.26(0x80000000); %bb.26(100.00%)
  liveins: $d0, $d8, $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $d0 = FDIVDrr renamable $d8, killed renamable $d0, debug-location !330; cg.c:247:26
  STRDui killed renamable $d0, $sp, 20, debug-location !331 :: (store 8 into %ir.norm_temp2); cg.c:247:20
  STURWi $wzr, $fp, -120, debug-location !332 :: (store 4 into %ir.j); cg.c:252:16

bb.26.for.cond78:
; predecessors: %bb.25, %bb.27
  successors: %bb.27(0x7c000000), %bb.28(0x04000000); %bb.27(96.88%), %bb.28(3.12%)
  liveins: $d8, $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w8 = LDRWui renamable $x28, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !337 :: (dereferenceable load 4 from @lastcol); cg.c:252:25
  renamable $w9 = LDRWui renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !338 :: (dereferenceable load 4 from @firstcol); cg.c:252:35
  renamable $w10 = LDURWi $fp, -120, debug-location !335 :: (dereferenceable load 4 from %ir.j); cg.c:252:21
  $w8 = SUBWrs killed renamable $w8, killed renamable $w9, 0, debug-location !339; cg.c:252:33
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !340; cg.c:252:44
  $wzr = SUBSWrs killed renamable $w10, killed renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !342; cg.c:252:9
  Bcc 10, %bb.28, implicit $nzcv, debug-location !342; cg.c:252:9

bb.27.for.body82:
; predecessors: %bb.26
  successors: %bb.26(0x80000000); %bb.26(100.00%)
  liveins: $d8, $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $x8 = LDURSWi $fp, -120, debug-location !345 :: (dereferenceable load 4 from %ir.j); cg.c:253:35
  renamable $d0 = LDRDui $sp, 20, debug-location !343 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:253:20
  renamable $x9 = UBFMXri renamable $x8, 61, 60, debug-location !346; cg.c:253:33
  renamable $d1 = LDRDroX renamable $x20, renamable $x9, 0, 0, debug-location !346 :: (load 8 from %ir.arrayidx84); cg.c:253:33
  renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit killed $x8, debug-location !351; cg.c:252:50
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1, debug-location !347; cg.c:253:31
  STRDroX killed renamable $d0, renamable $x19, killed renamable $x9, 0, 0, debug-location !350 :: (store 8 into %ir.arrayidx87); cg.c:253:18
  STURWi killed renamable $w8, $fp, -120, debug-location !351 :: (store 4 into %ir.j); cg.c:252:50
  B %bb.26

bb.28.for.inc91:
; predecessors: %bb.26
  successors: %bb.19(0x80000000); %bb.19(100.00%)
  liveins: $d8, $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w8 = LDURWi $fp, -128, debug-location !355 :: (dereferenceable load 4 from %ir.it); cg.c:228:29
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !355; cg.c:228:29
  STURWi killed renamable $w8, $fp, -128, debug-location !355 :: (store 4 into %ir.it); cg.c:228:29
  B %bb.19

bb.29.for.end93:
; predecessors: %bb.19
  successors: %bb.30(0x80000000); %bb.30(100.00%)
  liveins: $d8, $x19, $x20, $x27, $x28
  STURWi $wzr, $fp, -116, debug-location !359 :: (store 4 into %ir.i); cg.c:260:12
  $x8 = MOVZXi 16368, 48
  $w11 = MOVZWi 9464, 0
  $w11 = MOVKWi $w11(tied-def 0), 1, 16

bb.30.for.cond94:
; predecessors: %bb.29, %bb.31
  successors: %bb.31(0x7c000000), %bb.32(0x04000000); %bb.31(96.88%), %bb.32(3.12%)
  liveins: $d8, $w11, $x8, $x19, $x20, $x27, $x28
  renamable $w9 = LDURWi $fp, -116, debug-location !362 :: (dereferenceable load 4 from %ir.i); cg.c:260:17
  renamable $w10 = ADDWri renamable $w11, 1, 0, debug-location !364; cg.c:260:19
  $wzr = SUBSWrs killed renamable $w9, killed renamable $w10, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !365; cg.c:260:5
  Bcc 10, %bb.32, implicit $nzcv, debug-location !365; cg.c:260:5

bb.31.for.body96:
; predecessors: %bb.30
  successors: %bb.30(0x80000000); %bb.30(100.00%)
  liveins: $d8, $w11, $x8, $x19, $x20, $x27, $x28
  renamable $x9 = LDURSWi $fp, -116, debug-location !366 :: (dereferenceable load 4 from %ir.i); cg.c:261:11
  STRXroX renamable $x8, renamable $x19, renamable $x9, 0, 1, debug-location !369 :: (store 8 into %ir.arrayidx98); cg.c:261:14
  renamable $w9 = nsw ADDWri renamable $w9, 1, 0, implicit killed $x9, debug-location !370; cg.c:260:30
  STURWi killed renamable $w9, $fp, -116, debug-location !370 :: (store 4 into %ir.i); cg.c:260:30
  B %bb.30

bb.32.for.end101:
; predecessors: %bb.30
  successors: %bb.33(0x80000000); %bb.33(100.00%)
  liveins: $d8, $x19, $x20, $x27, $x28
  STURXi $xzr, $fp, -136, debug-location !374 :: (store 8 into %ir.zeta); cg.c:264:10
  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !375; cg.c:266:5
  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !375; cg.c:266:5
  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !376; cg.c:268:55
  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !376; cg.c:268:55
  $x0 = ADRP target-flags(aarch64-page) @.str.9, debug-location !377; cg.c:268:5
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.9, 0, debug-location !377; cg.c:268:5
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !377; cg.c:268:5
  $w0 = MOVZWi 1, 0, debug-location !378; cg.c:270:5
  $w21 = MOVZWi 1, 0
  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !378; cg.c:270:5
  STURWi killed renamable $w21, $fp, -128, debug-location !379 :: (store 4 into %ir.it); cg.c:279:13
  $x23 = ADRP target-flags(aarch64-page) @a
  renamable $x23 = ADDXri $x23, target-flags(aarch64-pageoff, aarch64-nc) @a, 0
  $x24 = ADRP target-flags(aarch64-page) @p
  renamable $x24 = ADDXri $x24, target-flags(aarch64-pageoff, aarch64-nc) @p, 0
  $x25 = ADRP target-flags(aarch64-page) @q
  renamable $x25 = ADDXri $x25, target-flags(aarch64-pageoff, aarch64-nc) @q, 0
  $x26 = ADRP target-flags(aarch64-page) @r
  renamable $x26 = ADDXri $x26, target-flags(aarch64-pageoff, aarch64-nc) @r, 0
  $x22 = MOVZXi 16462, 48
  $x21 = ADRP target-flags(aarch64-page) @.str.11
  renamable $x21 = ADDXri $x21, target-flags(aarch64-pageoff, aarch64-nc) @.str.11, 0

bb.33.for.cond108:
; predecessors: %bb.32, %bb.48
  successors: %bb.34(0x7c000000), %bb.49(0x04000000); %bb.34(96.88%), %bb.49(3.12%)
  liveins: $d8, $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w8 = LDURWi $fp, -128, debug-location !382 :: (dereferenceable load 4 from %ir.it); cg.c:279:18
  dead $wzr = SUBSWri killed renamable $w8, 75, 0, implicit-def $nzcv, debug-location !385; cg.c:279:5
  Bcc 12, %bb.49, implicit $nzcv, debug-location !385; cg.c:279:5

bb.34.for.body110:
; predecessors: %bb.33
  successors: %bb.35(0x50000000), %bb.36(0x30000000); %bb.35(62.50%), %bb.36(37.50%)
  liveins: $d8, $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $x8 = ADRP target-flags(aarch64-page) @timeron, debug-location !386; cg.c:284:13
  renamable $w8 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !386 :: (dereferenceable load 4 from @timeron); cg.c:284:13
  CBZW killed renamable $w8, %bb.36, debug-location !389; cg.c:284:13

bb.35.if.then111:
; predecessors: %bb.34
  successors: %bb.36(0x80000000); %bb.36(100.00%)
  liveins: $d8, $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  $w0 = MOVZWi 2, 0, debug-location !390; cg.c:285:13
  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !390; cg.c:285:13

bb.36.if.end112:
; predecessors: %bb.34, %bb.35
  successors: %bb.37(0x50000000), %bb.38(0x30000000); %bb.37(62.50%), %bb.38(37.50%)
  liveins: $d8, $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  $x8 = SUBXri $fp, 144, 0, debug-location !391; cg.c:286:9
  STRXui killed renamable $x8, $sp, 0, debug-location !391 :: (store 8 into stack); cg.c:286:9
  $x0 = ADRP target-flags(aarch64-page) @colidx, debug-location !391; cg.c:286:9
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @colidx, 0, debug-location !391; cg.c:286:9
  $x1 = ADRP target-flags(aarch64-page) @rowstr, debug-location !391; cg.c:286:9
  renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, 0, debug-location !391; cg.c:286:9
  $x2 = ORRXrs $xzr, $x19, 0, debug-location !391; cg.c:286:9
  $x3 = ORRXrs $xzr, $x20, 0, debug-location !391; cg.c:286:9
  $x4 = ORRXrs $xzr, $x23, 0, debug-location !391; cg.c:286:9
  $x5 = ORRXrs $xzr, $x24, 0, debug-location !391; cg.c:286:9
  $x6 = ORRXrs $xzr, $x25, 0, debug-location !391; cg.c:286:9
  $x7 = ORRXrs $xzr, $x26, 0, debug-location !391; cg.c:286:9
  BL @conj_grad, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $x3, implicit $x4, implicit $x5, implicit $x6, implicit $x7, implicit-def $sp, debug-location !391; cg.c:286:9
  renamable $x8 = ADRP target-flags(aarch64-page) @timeron, debug-location !392; cg.c:287:13
  renamable $w8 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !392 :: (dereferenceable load 4 from @timeron); cg.c:287:13
  CBZW killed renamable $w8, %bb.38, debug-location !394; cg.c:287:13

bb.37.if.then114:
; predecessors: %bb.36
  successors: %bb.38(0x80000000); %bb.38(100.00%)
  liveins: $d8, $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  $w0 = MOVZWi 2, 0, debug-location !395; cg.c:288:13
  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !395; cg.c:288:13

bb.38.if.end115:
; predecessors: %bb.36, %bb.37
  successors: %bb.39(0x80000000); %bb.39(100.00%)
  liveins: $d8, $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  STURXi $xzr, $fp, -152, debug-location !396 :: (store 8 into %ir.norm_temp1); cg.c:297:20
  STRXui $xzr, $sp, 20, debug-location !397 :: (store 8 into %ir.norm_temp2); cg.c:298:20
  STURWi $wzr, $fp, -120, debug-location !398 :: (store 4 into %ir.j); cg.c:299:16

bb.39.for.cond116:
; predecessors: %bb.38, %bb.40
  successors: %bb.40(0x7c000000), %bb.41(0x04000000); %bb.40(96.88%), %bb.41(3.12%)
  liveins: $d8, $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w8 = LDRWui renamable $x28, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !403 :: (dereferenceable load 4 from @lastcol); cg.c:299:25
  renamable $w9 = LDRWui renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !404 :: (dereferenceable load 4 from @firstcol); cg.c:299:35
  renamable $w10 = LDURWi $fp, -120, debug-location !401 :: (dereferenceable load 4 from %ir.j); cg.c:299:21
  $w8 = SUBWrs killed renamable $w8, killed renamable $w9, 0, debug-location !405; cg.c:299:33
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !406; cg.c:299:44
  $wzr = SUBSWrs killed renamable $w10, killed renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !408; cg.c:299:9
  Bcc 10, %bb.41, implicit $nzcv, debug-location !408; cg.c:299:9

bb.40.for.body120:
; predecessors: %bb.39
  successors: %bb.39(0x80000000); %bb.39(100.00%)
  liveins: $d8, $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $x8 = LDURSWi $fp, -120, debug-location !411 :: (dereferenceable load 4 from %ir.j); cg.c:300:41
  renamable $x9 = UBFMXri renamable $x8, 61, 60, debug-location !420; cg.c:301:39
  renamable $d0 = LDRDroX renamable $x19, renamable $x9, 0, 0, debug-location !412 :: (load 8 from %ir.arrayidx122); cg.c:300:39
  renamable $d1 = LDRDroX renamable $x20, killed renamable $x9, 0, 0, debug-location !420 :: (load 8 from %ir.arrayidx130); cg.c:301:39
  renamable $d2 = LDURDi $fp, -152, debug-location !409 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:300:26
  renamable $d3 = LDRDui $sp, 20, debug-location !418 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:301:26
  renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit killed $x8, debug-location !426; cg.c:299:50
  renamable $d0 = FMULDrr killed renamable $d0, renamable $d1, debug-location !415; cg.c:300:44
  renamable $d1 = FMULDrr killed renamable $d1, renamable $d1, debug-location !423; cg.c:301:44
  renamable $d0 = FADDDrr killed renamable $d2, killed renamable $d0, debug-location !416; cg.c:300:37
  renamable $d1 = FADDDrr killed renamable $d3, killed renamable $d1, debug-location !424; cg.c:301:37
  STURDi killed renamable $d0, $fp, -152, debug-location !417 :: (store 8 into %ir.norm_temp1); cg.c:300:24
  STRDui killed renamable $d1, $sp, 20, debug-location !425 :: (store 8 into %ir.norm_temp2); cg.c:301:24
  STURWi killed renamable $w8, $fp, -120, debug-location !426 :: (store 4 into %ir.j); cg.c:299:50
  B %bb.39

bb.41.for.end135:
; predecessors: %bb.39
  successors: %bb.43(0x50000000), %bb.42(0x30000000); %bb.43(62.50%), %bb.42(37.50%)
  liveins: $d8, $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $d1 = LDRDui $sp, 20, debug-location !430 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:304:33
  renamable $d0 = FSQRTDr renamable $d1, debug-location !431; cg.c:304:28
  FCMPDrr renamable $d0, renamable $d0, implicit-def $nzcv, debug-location !432; cg.c:304:26
  Bcc 7, %bb.43, implicit $nzcv, debug-location !432; cg.c:304:26

bb.42.call.sqrt4:
; predecessors: %bb.41
  successors: %bb.43(0x80000000); %bb.43(100.00%)
  liveins: $d1, $d8, $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  $q0 = ORRv16i8 $q1, killed $q1, debug-location !432; cg.c:304:26
  BL @sqrt, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !432; cg.c:304:26

bb.43.for.end135.split:
; predecessors: %bb.41, %bb.42
  successors: %bb.44(0x40000000), %bb.45(0x40000000); %bb.44(50.00%), %bb.45(50.00%)
  liveins: $d0, $d8, $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $d1 = LDURDi $fp, -152, debug-location !434 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:306:30
  renamable $d0 = FDIVDrr renamable $d8, killed renamable $d0, debug-location !432; cg.c:304:26
  $d2 = FMOVXDr $x22
  renamable $w8 = LDURWi $fp, -128, debug-location !438 :: (dereferenceable load 4 from %ir.it); cg.c:307:13
  STRDui killed renamable $d0, $sp, 20, debug-location !433 :: (store 8 into %ir.norm_temp2); cg.c:304:20
  renamable $d0 = FDIVDrr renamable $d8, killed renamable $d1, debug-location !435; cg.c:306:28
  renamable $d0 = FADDDrr killed renamable $d0, killed renamable $d2, debug-location !436; cg.c:306:22
  dead $wzr = SUBSWri killed renamable $w8, 1, 0, implicit-def $nzcv, debug-location !441; cg.c:307:13
  STURDi killed renamable $d0, $fp, -136, debug-location !437 :: (store 8 into %ir.zeta); cg.c:306:14
  Bcc 1, %bb.45, implicit $nzcv, debug-location !441; cg.c:307:13

bb.44.if.then141:
; predecessors: %bb.43
  successors: %bb.45(0x80000000); %bb.45(100.00%)
  liveins: $d8, $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  $x0 = ADRP target-flags(aarch64-page) @.str.10, debug-location !442; cg.c:308:13
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.10, 0, debug-location !442; cg.c:308:13
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !442; cg.c:308:13

bb.45.if.end143:
; predecessors: %bb.43, %bb.44
  successors: %bb.46(0x80000000); %bb.46(100.00%)
  liveins: $d8, $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w1 = LDURWi $fp, -128, debug-location !443 :: (dereferenceable load 4 from %ir.it); cg.c:309:50
  renamable $d0, renamable $d1 = LDPDi $fp, -18, debug-location !444 :: (dereferenceable load 8 from %ir.rnorm), (dereferenceable load 8 from %ir.zeta); cg.c:309:54
  $x0 = ORRXrs $xzr, $x21, 0, debug-location !446; cg.c:309:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w0, debug-location !446; cg.c:309:9
  STURWi $wzr, $fp, -120, debug-location !447 :: (store 4 into %ir.j); cg.c:314:16

bb.46.for.cond145:
; predecessors: %bb.45, %bb.47
  successors: %bb.47(0x7c000000), %bb.48(0x04000000); %bb.47(96.88%), %bb.48(3.12%)
  liveins: $d8, $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w8 = LDRWui renamable $x28, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !452 :: (dereferenceable load 4 from @lastcol); cg.c:314:25
  renamable $w9 = LDRWui renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !453 :: (dereferenceable load 4 from @firstcol); cg.c:314:35
  renamable $w10 = LDURWi $fp, -120, debug-location !450 :: (dereferenceable load 4 from %ir.j); cg.c:314:21
  $w8 = SUBWrs killed renamable $w8, killed renamable $w9, 0, debug-location !454; cg.c:314:33
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !455; cg.c:314:44
  $wzr = SUBSWrs killed renamable $w10, killed renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !457; cg.c:314:9
  Bcc 10, %bb.48, implicit $nzcv, debug-location !457; cg.c:314:9

bb.47.for.body149:
; predecessors: %bb.46
  successors: %bb.46(0x80000000); %bb.46(100.00%)
  liveins: $d8, $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $x8 = LDURSWi $fp, -120, debug-location !460 :: (dereferenceable load 4 from %ir.j); cg.c:315:35
  renamable $d0 = LDRDui $sp, 20, debug-location !458 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:315:20
  renamable $x9 = UBFMXri renamable $x8, 61, 60, debug-location !461; cg.c:315:33
  renamable $d1 = LDRDroX renamable $x20, renamable $x9, 0, 0, debug-location !461 :: (load 8 from %ir.arrayidx151); cg.c:315:33
  renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit killed $x8, debug-location !466; cg.c:314:50
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1, debug-location !462; cg.c:315:31
  STRDroX killed renamable $d0, renamable $x19, killed renamable $x9, 0, 0, debug-location !465 :: (store 8 into %ir.arrayidx154); cg.c:315:18
  STURWi killed renamable $w8, $fp, -120, debug-location !466 :: (store 4 into %ir.j); cg.c:314:50
  B %bb.46

bb.48.for.inc158:
; predecessors: %bb.46
  successors: %bb.33(0x80000000); %bb.33(100.00%)
  liveins: $d8, $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w8 = LDURWi $fp, -128, debug-location !470 :: (dereferenceable load 4 from %ir.it); cg.c:279:33
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !470; cg.c:279:33
  STURWi killed renamable $w8, $fp, -128, debug-location !470 :: (store 4 into %ir.it); cg.c:279:33
  B %bb.33

bb.49.do.end164:
; predecessors: %bb.33
  successors: %bb.50(0x40000000), %bb.53(0x40000000); %bb.50(50.00%), %bb.53(50.00%)

  $w0 = MOVZWi 1, 0, debug-location !474; cg.c:321:5
  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !474; cg.c:321:5
  $w0 = MOVZWi 1, 0, debug-location !475; cg.c:327:9
  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !475; cg.c:327:9
  STRDui killed renamable $d0, $sp, 19, debug-location !476 :: (store 8 into %ir.t); cg.c:327:7
  $x0 = ADRP target-flags(aarch64-page) @.str.12, debug-location !477; cg.c:329:5
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.12, 0, debug-location !477; cg.c:329:5
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !477; cg.c:329:5
  renamable $w8 = LDRSBWui $sp, 132, debug-location !479 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:332:9
  $x9 = MOVZXi 48571, 0
  $x9 = MOVKXi $x9(tied-def 0), 55767, 16
  $x9 = MOVKXi $x9(tied-def 0), 31967, 32
  $x9 = MOVKXi $x9(tied-def 0), 15835, 48
  dead $wzr = SUBSWri killed renamable $w8, 85, 0, implicit-def $nzcv, debug-location !482; cg.c:332:9
  STRXui killed renamable $x9, $sp, 14, debug-location !478 :: (store 8 into %ir.epsilon); cg.c:331:13
  Bcc 0, %bb.53, implicit $nzcv, debug-location !482; cg.c:332:9

bb.50.if.then169:
; predecessors: %bb.49
  successors: %bb.51(0x40000000), %bb.52(0x40000000); %bb.51(50.00%), %bb.52(50.00%)

  renamable $d0 = LDURDi $fp, -136, debug-location !483 :: (dereferenceable load 8 from %ir.zeta); cg.c:333:20
  renamable $d2, renamable $d1 = LDPDi $sp, 14, debug-location !485 :: (dereferenceable load 8 from %ir.zeta_verify_value), (dereferenceable load 8 from %ir.epsilon); cg.c:333:27
  renamable $d0 = FABD64 killed renamable $d0, renamable $d1, debug-location !487; cg.c:333:15
  renamable $d0 = FDIVDrr killed renamable $d0, killed renamable $d1, debug-location !489; cg.c:333:46
  FCMPDrr renamable $d0, killed renamable $d2, implicit-def $nzcv, debug-location !495; cg.c:334:13
  STRDui killed renamable $d0, $sp, 13, debug-location !490 :: (store 8 into %ir.err); cg.c:333:13
  renamable $x19 = ADRP target-flags(aarch64-page) @timeron
  Bcc 8, %bb.52, implicit $nzcv, debug-location !495; cg.c:334:13

bb.51.if.then174:
; predecessors: %bb.50
  successors: %bb.54(0x80000000); %bb.54(100.00%)
  liveins: $x19
  $w8 = MOVZWi 1, 0
  STRWui killed renamable $w8, $sp, 32, debug-location !496 :: (store 4 into %ir.verified); cg.c:335:22
  $x0 = ADRP target-flags(aarch64-page) @.str.13, debug-location !498; cg.c:336:13
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.13, 0, debug-location !498; cg.c:336:13
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !498; cg.c:336:13
  renamable $d0 = LDURDi $fp, -136, debug-location !499 :: (dereferenceable load 8 from %ir.zeta); cg.c:337:45
  $x0 = ADRP target-flags(aarch64-page) @.str.14, debug-location !500; cg.c:337:13
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.14, 0, debug-location !500; cg.c:337:13
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !500; cg.c:337:13
  renamable $d0 = LDRDui $sp, 13, debug-location !501 :: (dereferenceable load 8 from %ir.err); cg.c:338:45
  $x0 = ADRP target-flags(aarch64-page) @.str.15, debug-location !502; cg.c:338:13
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.15, 0, debug-location !502; cg.c:338:13
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !502; cg.c:338:13
  B %bb.54

bb.52.if.else178:
; predecessors: %bb.50
  successors: %bb.54(0x80000000); %bb.54(100.00%)
  liveins: $x19
  STRWui $wzr, $sp, 32, debug-location !504 :: (store 4 into %ir.verified); cg.c:341:22
  $x0 = ADRP target-flags(aarch64-page) @.str.16, debug-location !506; cg.c:342:13
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.16, 0, debug-location !506; cg.c:342:13
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !506; cg.c:342:13
  renamable $d0 = LDURDi $fp, -136, debug-location !507 :: (dereferenceable load 8 from %ir.zeta); cg.c:343:54
  $x0 = ADRP target-flags(aarch64-page) @.str.17, debug-location !508; cg.c:343:13
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.17, 0, debug-location !508; cg.c:343:13
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !508; cg.c:343:13
  renamable $d0 = LDRDui $sp, 15, debug-location !509 :: (dereferenceable load 8 from %ir.zeta_verify_value); cg.c:344:54
  $x0 = ADRP target-flags(aarch64-page) @.str.18, debug-location !510; cg.c:344:13
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.18, 0, debug-location !510; cg.c:344:13
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !510; cg.c:344:13
  B %bb.54

bb.53.if.else183:
; predecessors: %bb.49
  successors: %bb.54(0x80000000); %bb.54(100.00%)

  STRWui $wzr, $sp, 32, debug-location !511 :: (store 4 into %ir.verified); cg.c:348:18
  $x0 = ADRP target-flags(aarch64-page) @.str.19, debug-location !513; cg.c:349:9
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.19, 0, debug-location !513; cg.c:349:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !513; cg.c:349:9
  $x0 = ADRP target-flags(aarch64-page) @.str.20, debug-location !514; cg.c:350:9
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.20, 0, debug-location !514; cg.c:350:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !514; cg.c:350:9
  renamable $x19 = ADRP target-flags(aarch64-page) @timeron

bb.54.if.end186:
; predecessors: %bb.53, %bb.52, %bb.51
  successors: %bb.55(0x50000000), %bb.56(0x30000000); %bb.55(62.50%), %bb.56(37.50%)
  liveins: $x19
  renamable $d0 = LDRDui $sp, 19, debug-location !515 :: (dereferenceable load 8 from %ir.t); cg.c:353:9
  FCMPDri killed renamable $d0, implicit-def $nzcv, debug-location !518; cg.c:353:9
  Bcc 0, %bb.56, implicit $nzcv, debug-location !518; cg.c:353:9

bb.55.if.then189:
; predecessors: %bb.54
  successors: %bb.57(0x80000000); %bb.57(100.00%)
  liveins: $x19
  renamable $d0 = LDRDui $sp, 19, debug-location !519 :: (dereferenceable load 8 from %ir.t); cg.c:357:18
  renamable $x8 = ADRP target-flags(aarch64-page) %const.1
  renamable $d1 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  $x8 = MOVZXi 33920, 32
  $x8 = MOVKXi $x8(tied-def 0), 16686, 48
  renamable $d0 = FDIVDrr killed renamable $d1, killed renamable $d0, debug-location !521; cg.c:356:73
  $d1 = FMOVXDr killed $x8
  renamable $d0 = FDIVDrr killed renamable $d0, killed renamable $d1, debug-location !522; cg.c:357:20
  STRDui killed renamable $d0, $sp, 18, debug-location !523 :: (store 8 into %ir.mflops); cg.c:354:16
  B %bb.57

bb.56.if.else192:
; predecessors: %bb.54
  successors: %bb.57(0x80000000); %bb.57(100.00%)
  liveins: $x19
  STRXui $xzr, $sp, 18, debug-location !525 :: (store 8 into %ir.mflops); cg.c:360:16

bb.57.if.end193:
; predecessors: %bb.56, %bb.55
  successors: %bb.58(0x50000000), %bb.67(0x30000000); %bb.58(62.50%), %bb.67(37.50%)
  liveins: $x19
  renamable $w1 = LDRSBWui $sp, 132, debug-location !527 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:363:25
  renamable $d1, renamable $d0 = LDPDi $sp, 18, debug-location !528 :: (dereferenceable load 8 from %ir.t), (dereferenceable load 8 from %ir.mflops); cg.c:363:49
  renamable $w7 = LDRWui $sp, 32, debug-location !530 :: (dereferenceable load 4 from %ir.verified); cg.c:364:47
  $x8 = ADRP target-flags(aarch64-page) @.str.31, debug-location !531; cg.c:363:5
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.31, 0, debug-location !531; cg.c:363:5
  $x9 = ADRP target-flags(aarch64-page) @.str.30, debug-location !531; cg.c:363:5
  renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.30, 0, debug-location !531; cg.c:363:5
  $x10 = ADRP target-flags(aarch64-page) @.str.29, debug-location !531; cg.c:363:5
  renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.29, 0, debug-location !531; cg.c:363:5
  $x11 = ADRP target-flags(aarch64-page) @.str.28, debug-location !531; cg.c:363:5
  renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @.str.28, 0, debug-location !531; cg.c:363:5
  $x12 = ADRP target-flags(aarch64-page) @.str.27, debug-location !531; cg.c:363:5
  renamable $x12 = ADDXri $x12, target-flags(aarch64-pageoff, aarch64-nc) @.str.27, 0, debug-location !531; cg.c:363:5
  $x13 = ADRP target-flags(aarch64-page) @.str.26, debug-location !531; cg.c:363:5
  renamable $x13 = ADDXri $x13, target-flags(aarch64-pageoff, aarch64-nc) @.str.26, 0, debug-location !531; cg.c:363:5
  $x14 = ADRP target-flags(aarch64-page) @.str.25, debug-location !531; cg.c:363:5
  renamable $x14 = ADDXri $x14, target-flags(aarch64-pageoff, aarch64-nc) @.str.25, 0, debug-location !531; cg.c:363:5
  $x15 = ADRP target-flags(aarch64-page) @.str.24, debug-location !531; cg.c:363:5
  renamable $x15 = ADDXri $x15, target-flags(aarch64-pageoff, aarch64-nc) @.str.24, 0, debug-location !531; cg.c:363:5
  STPXi renamable $x9, renamable $x8, $sp, 7, debug-location !531 :: (store 8 into stack + 64), (store 8 into stack + 56); cg.c:363:5
  $x8 = ADRP target-flags(aarch64-page) @.str.23, debug-location !531; cg.c:363:5
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.23, 0, debug-location !531; cg.c:363:5
  STPXi renamable $x11, renamable $x10, $sp, 5, debug-location !531 :: (store 8 into stack + 48), (store 8 into stack + 40); cg.c:363:5
  $x0 = ADRP target-flags(aarch64-page) @.str.21, debug-location !531; cg.c:363:5
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.21, 0, debug-location !531; cg.c:363:5
  STPXi renamable $x13, renamable $x12, $sp, 3, debug-location !531 :: (store 8 into stack + 32), (store 8 into stack + 24); cg.c:363:5
  $x6 = ADRP target-flags(aarch64-page) @.str.22, debug-location !531; cg.c:363:5
  renamable $x6 = ADDXri $x6, target-flags(aarch64-pageoff, aarch64-nc) @.str.22, 0, debug-location !531; cg.c:363:5
  STPXi renamable $x15, renamable $x14, $sp, 1, debug-location !531 :: (store 8 into stack + 16), (store 8 into stack + 8); cg.c:363:5
  STRXui killed renamable $x8, $sp, 0, debug-location !531 :: (store 8 into stack); cg.c:363:5
  $w2 = MOVZWi 9464, 0, debug-location !531; cg.c:363:5
  $w2 = MOVKWi $w2(tied-def 0), 1, 16, debug-location !531; cg.c:363:5
  $w5 = MOVZWi 75, 0, debug-location !531; cg.c:363:5
  $w3 = ORRWrs $wzr, $wzr, 0, debug-location !531; cg.c:363:5
  $w4 = ORRWrs $wzr, $wzr, 0, debug-location !531; cg.c:363:5
  BL @print_results, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit $w4, implicit $w5, implicit $d0, implicit $d1, implicit $x6, implicit $w7, implicit-def $sp, debug-location !531; cg.c:363:5
  renamable $w8 = LDRWui killed renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !532 :: (dereferenceable load 4 from @timeron); cg.c:370:9
  CBZW killed renamable $w8, %bb.67, debug-location !534; cg.c:370:9

bb.58.if.then195:
; predecessors: %bb.57
  successors: %bb.59(0x50000000), %bb.60(0x30000000); %bb.59(62.50%), %bb.60(37.50%)

  $w0 = MOVZWi 1, 0, debug-location !535; cg.c:371:16
  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !535; cg.c:371:16
  FCMPDri renamable $d0, implicit-def $nzcv, debug-location !541; cg.c:372:13
  STRDui killed renamable $d0, $sp, 17, debug-location !537 :: (store 8 into %ir.tmax); cg.c:371:14
  Bcc 1, %bb.60, implicit $nzcv, debug-location !541; cg.c:372:13

bb.59.if.then199:
; predecessors: %bb.58
  successors: %bb.60(0x80000000); %bb.60(100.00%)

  $x8 = MOVZXi 16368, 48
  STRXui killed renamable $x8, $sp, 17, debug-location !542 :: (store 8 into %ir.tmax); cg.c:373:18

bb.60.if.end200:
; predecessors: %bb.58, %bb.59
  successors: %bb.61(0x80000000); %bb.61(100.00%)

  $x0 = ADRP target-flags(aarch64-page) @.str.32, debug-location !544; cg.c:374:9
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.32, 0, debug-location !544; cg.c:374:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !544; cg.c:374:9
  STURWi $wzr, $fp, -116, debug-location !545 :: (store 4 into %ir.i); cg.c:375:16
  $x23 = ADDXri $sp, 80, 0
  $x19 = ADRP target-flags(aarch64-page) @.str.33
  renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str.33, 0
  $x24 = MOVZXi 16473, 48
  $x20 = ADRP target-flags(aarch64-page) @.str.34
  renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @.str.34, 0
  $x21 = ADRP target-flags(aarch64-page) @.str.35
  renamable $x21 = ADDXri $x21, target-flags(aarch64-pageoff, aarch64-nc) @.str.35, 0
  $x22 = ADRP target-flags(aarch64-page) @.str.36
  renamable $x22 = ADDXri $x22, target-flags(aarch64-pageoff, aarch64-nc) @.str.36, 0

bb.61.for.cond202:
; predecessors: %bb.60, %bb.66
  successors: %bb.62(0x7c000000), %bb.67(0x04000000); %bb.62(96.88%), %bb.67(3.12%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24
  renamable $w8 = LDURWi $fp, -116, debug-location !548 :: (dereferenceable load 4 from %ir.i); cg.c:375:21
  dead $wzr = SUBSWri killed renamable $w8, 2, 0, implicit-def $nzcv, debug-location !551; cg.c:375:9
  Bcc 12, %bb.67, implicit $nzcv, debug-location !551; cg.c:375:9

bb.62.for.body205:
; predecessors: %bb.61
  successors: %bb.63(0x30000000), %bb.64(0x50000000); %bb.63(37.50%), %bb.64(62.50%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24
  renamable $w0 = LDURWi $fp, -116, debug-location !552 :: (dereferenceable load 4 from %ir.i); cg.c:376:28
  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !554; cg.c:376:17
  renamable $x8 = LDURSWi $fp, -116, debug-location !556 :: (dereferenceable load 4 from %ir.i); cg.c:377:17
  renamable $x1 = LDRXroX renamable $x23, renamable $x8, 0, 1, debug-location !559 :: (load 8 from %ir.arrayidx211); cg.c:0
  STRDui renamable $d0, $sp, 19, debug-location !555 :: (store 8 into %ir.t); cg.c:376:15
  CBNZW renamable $w8, %bb.64, debug-location !560; cg.c:377:17

bb.63.if.then209:
; predecessors: %bb.62
  successors: %bb.66(0x80000000); %bb.66(100.00%)
  liveins: $d0, $x1, $x19, $x20, $x21, $x22, $x23, $x24
  $x0 = ORRXrs $xzr, $x19, 0, debug-location !561; cg.c:378:17
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !561; cg.c:378:17
  B %bb.66

bb.64.if.else213:
; predecessors: %bb.62
  successors: %bb.65(0x40000000), %bb.66(0x40000000); %bb.65(50.00%), %bb.66(50.00%)
  liveins: $d0, $x1, $x19, $x20, $x21, $x22, $x23, $x24
  renamable $d1 = LDRDui $sp, 19, debug-location !564 :: (dereferenceable load 8 from %ir.t); cg.c:382:24
  renamable $d2 = LDRDui $sp, 17, debug-location !567 :: (dereferenceable load 8 from %ir.tmax); cg.c:382:36
  $d3 = FMOVXDr $x24
  renamable $d1 = FMULDrr killed renamable $d1, killed renamable $d3, debug-location !566; cg.c:382:26
  renamable $d1 = FDIVDrr killed renamable $d1, killed renamable $d2, debug-location !568; cg.c:382:34
  $x0 = ORRXrs $xzr, $x20, 0, debug-location !569; cg.c:381:17
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w0, debug-location !569; cg.c:381:17
  renamable $w8 = LDURWi $fp, -116, debug-location !570 :: (dereferenceable load 4 from %ir.i); cg.c:383:21
  dead $wzr = SUBSWri killed renamable $w8, 2, 0, implicit-def $nzcv, debug-location !573; cg.c:383:21
  Bcc 1, %bb.66, implicit $nzcv, debug-location !573; cg.c:383:21

bb.65.if.then221:
; predecessors: %bb.64
  successors: %bb.66(0x80000000); %bb.66(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24
  renamable $d1 = LDRDui $sp, 17, debug-location !574 :: (dereferenceable load 8 from %ir.tmax); cg.c:384:25
  renamable $d0 = LDRDui $sp, 19, debug-location !576 :: (dereferenceable load 8 from %ir.t); cg.c:384:32
  $d2 = FMOVXDr $x24
  renamable $d0 = FSUBDrr renamable $d1, killed renamable $d0, debug-location !577; cg.c:384:30
  STRDui renamable $d0, $sp, 19, debug-location !578 :: (store 8 into %ir.t); cg.c:384:23
  renamable $d2 = FMULDrr renamable $d0, killed renamable $d2, debug-location !581; cg.c:386:30
  renamable $d1 = FDIVDrr killed renamable $d2, killed renamable $d1, debug-location !583; cg.c:386:38
  $x0 = ORRXrs $xzr, $x21, 0, debug-location !584; cg.c:385:21
  $x1 = ORRXrs $xzr, $x22, 0, debug-location !584; cg.c:385:21
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w0, debug-location !584; cg.c:385:21

bb.66.for.inc228:
; predecessors: %bb.64, %bb.65, %bb.63
  successors: %bb.61(0x80000000); %bb.61(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24
  renamable $w8 = LDURWi $fp, -116, debug-location !586 :: (dereferenceable load 4 from %ir.i); cg.c:375:34
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !586; cg.c:375:34
  STURWi killed renamable $w8, $fp, -116, debug-location !586 :: (store 4 into %ir.i); cg.c:375:34
  B %bb.61

bb.67.do.end235:
; predecessors: %bb.57, %bb.61

  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !590; cg.c:394:5
  $fp, $lr = frame-destroy LDPXi $sp, 40, debug-location !590 :: (load 8 from %stack.23), (load 8 from %stack.22); cg.c:394:5
  $x20, $x19 = frame-destroy LDPXi $sp, 38, debug-location !590 :: (load 8 from %stack.25), (load 8 from %stack.24); cg.c:394:5
  $x22, $x21 = frame-destroy LDPXi $sp, 36, debug-location !590 :: (load 8 from %stack.27), (load 8 from %stack.26); cg.c:394:5
  $x24, $x23 = frame-destroy LDPXi $sp, 34, debug-location !590 :: (load 8 from %stack.29), (load 8 from %stack.28); cg.c:394:5
  $x26, $x25 = frame-destroy LDPXi $sp, 32, debug-location !590 :: (load 8 from %stack.31), (load 8 from %stack.30); cg.c:394:5
  $x28, $x27 = frame-destroy LDPXi $sp, 30, debug-location !590 :: (load 8 from %stack.33), (load 8 from %stack.32); cg.c:394:5
  $d8 = frame-destroy LDRDui $sp, 28, debug-location !590 :: (load 8 from %stack.34); cg.c:394:5
  $sp = frame-destroy ADDXri $sp, 336, 0, debug-location !590; cg.c:394:5
  RET undef $lr, implicit $w0, debug-location !590; cg.c:394:5

# End machine code for function main.

********** MI Scheduling **********
main:%bb.0 entry
  From: STPWi renamable $w0, $wzr, $fp, -22 :: (store 4 into %ir.retval), (store 4 into %ir.argc.addr)
    To: End RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   STPWi renamable $w0, $wzr, $fp, -22 :: (store 4 into %ir.retval), (store 4 into %ir.argc.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   STURXi renamable $x1, $fp, -112 :: (store 8 into %ir.argv.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   STURWi $wzr, $fp, -116, debug-location !132 :: (store 4 into %ir.i); cg.c:117:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
Disabled scoreboard hazard recognizer
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 0
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STPWi renamable $w0, $wzr, $fp, -22 :: (store 4 into %ir.retval), (store 4 into %ir.argc.addr)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 0
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) STURXi renamable $x1, $fp, -112 :: (store 8 into %ir.argv.addr)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi $wzr, $fp, -116, debug-location !132 :: (store 4 into %ir.i); cg.c:117:12
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   STPWi renamable $w0, $wzr, $fp, -22 :: (store 4 into %ir.retval), (store 4 into %ir.argc.addr)
SU(1):   STURXi renamable $x1, $fp, -112 :: (store 8 into %ir.argv.addr)
SU(2):   STURWi $wzr, $fp, -116, debug-location !132 :: (store 4 into %ir.i); cg.c:117:12

********** MI Scheduling **********
main:%bb.0 entry
  From: frame-setup STRDui killed $d8, $sp, 28 :: (store 8 into %stack.34)
    To: frame-setup CFI_INSTRUCTION def_cfa $w29, 16
 RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   frame-setup STRDui $d8, $sp, 28 :: (store 8 into %stack.34)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   frame-setup STPXi $x28, $x27, $sp, 30 :: (store 8 into %stack.33), (store 8 into %stack.32)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   frame-setup STPXi $x26, $x25, $sp, 32 :: (store 8 into %stack.31), (store 8 into %stack.30)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(3):   frame-setup STPXi $x24, $x23, $sp, 34 :: (store 8 into %stack.29), (store 8 into %stack.28)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(4):   frame-setup STPXi $x22, $x21, $sp, 36 :: (store 8 into %stack.27), (store 8 into %stack.26)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(5):   frame-setup STPXi $x20, $x19, $sp, 38 :: (store 8 into %stack.25), (store 8 into %stack.24)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(6):   frame-setup STPXi $fp, $lr, $sp, 40 :: (store 8 into %stack.23), (store 8 into %stack.22)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Successors:
    SU(7): Anti Latency=0
SU(7):   $fp = frame-setup ADDXri $sp, 320, 0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(6): Anti Latency=0
ExitSU:   frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 
  TopQ.A RemainingLatency 0 + 0c > CritPath 0
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) frame-setup STRDui $d8, $sp, 28 :: (store 8 into %stack.34)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 1 2 3 4 5 
  TopQ.A RemainingLatency 0 + 1c > CritPath 0
  Cand SU(6) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) frame-setup STPXi $x28, $x27, $sp, 30 :: (store 8 into %stack.33), (store 8 into %stack.32)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 5 2 3 4 
  TopQ.A RemainingLatency 0 + 2c > CritPath 0
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) frame-setup STPXi $x26, $x25, $sp, 32 :: (store 8 into %stack.31), (store 8 into %stack.30)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 5 4 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 0
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) frame-setup STPXi $x24, $x23, $sp, 34 :: (store 8 into %stack.29), (store 8 into %stack.28)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 5 4 
  TopQ.A RemainingLatency 0 + 4c > CritPath 0
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) frame-setup STPXi $x22, $x21, $sp, 36 :: (store 8 into %stack.27), (store 8 into %stack.26)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 5 
  TopQ.A RemainingLatency 0 + 5c > CritPath 0
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) frame-setup STPXi $x20, $x19, $sp, 38 :: (store 8 into %stack.25), (store 8 into %stack.24)
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) frame-setup STPXi $fp, $lr, $sp, 40 :: (store 8 into %stack.23), (store 8 into %stack.22)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) $fp = frame-setup ADDXri $sp, 320, 0
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   frame-setup STRDui $d8, $sp, 28 :: (store 8 into %stack.34)
SU(1):   frame-setup STPXi $x28, $x27, $sp, 30 :: (store 8 into %stack.33), (store 8 into %stack.32)
SU(2):   frame-setup STPXi $x26, $x25, $sp, 32 :: (store 8 into %stack.31), (store 8 into %stack.30)
SU(3):   frame-setup STPXi $x24, $x23, $sp, 34 :: (store 8 into %stack.29), (store 8 into %stack.28)
SU(4):   frame-setup STPXi $x22, $x21, $sp, 36 :: (store 8 into %stack.27), (store 8 into %stack.26)
SU(5):   frame-setup STPXi $x20, $x19, $sp, 38 :: (store 8 into %stack.25), (store 8 into %stack.24)
SU(6):   frame-setup STPXi $fp, $lr, $sp, 40 :: (store 8 into %stack.23), (store 8 into %stack.22)
SU(7):   $fp = frame-setup ADDXri $sp, 320, 0

Fixup kills for %bb.0
********** MI Scheduling **********
main:%bb.1 for.cond
  From: renamable $w8 = LDURWi $fp, -116, debug-location !135 :: (dereferenceable load 4 from %ir.i); cg.c:117:17
    To: Bcc 12, %bb.3, implicit $nzcv, debug-location !138; cg.c:117:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -116, debug-location !135 :: (dereferenceable load 4 from %ir.i); cg.c:117:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 2, 0, implicit-def $nzcv, debug-location !138; cg.c:117:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.3, implicit $nzcv, debug-location !138; cg.c:117:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -116, debug-location !135 :: (dereferenceable load 4 from %ir.i); cg.c:117:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 2, 0, implicit-def $nzcv, debug-location !138; cg.c:117:5
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   renamable $w8 = LDURWi $fp, -116, debug-location !135 :: (dereferenceable load 4 from %ir.i); cg.c:117:17
SU(1):   dead $wzr = SUBSWri renamable $w8, 2, 0, implicit-def $nzcv, debug-location !138; cg.c:117:5

Fixup kills for %bb.1
********** MI Scheduling **********
main:%bb.2 for.body
  From: renamable $w8 = LDURWi $fp, -116, debug-location !142 :: (dereferenceable load 4 from %ir.i); cg.c:117:30
    To: B %bb.1
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -116, debug-location !142 :: (dereferenceable load 4 from %ir.i); cg.c:117:30
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !142; cg.c:117:30
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STURWi renamable $w8, $fp, -116, debug-location !142 :: (store 4 into %ir.i); cg.c:117:30
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -116, debug-location !142 :: (dereferenceable load 4 from %ir.i); cg.c:117:30
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !142; cg.c:117:30
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w8, $fp, -116, debug-location !142 :: (store 4 into %ir.i); cg.c:117:30
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   renamable $w8 = LDURWi $fp, -116, debug-location !142 :: (dereferenceable load 4 from %ir.i); cg.c:117:30
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !142; cg.c:117:30
SU(2):   STURWi renamable $w8, $fp, -116, debug-location !142 :: (store 4 into %ir.i); cg.c:117:30

Fixup kills for %bb.2
********** MI Scheduling **********
main:%bb.3 for.end
  From: STRXui renamable $x0, $sp, 9, debug-location !154 :: (store 8 into %ir.fp); cg.c:122:13
    To: CBZX killed renamable $x0, %bb.5, debug-location !156; cg.c:122:9
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   STRXui renamable $x0, $sp, 9, debug-location !154 :: (store 8 into %ir.fp); cg.c:122:13
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   renamable $x11 = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   CBZX killed renamable $x0, %bb.5, debug-location !156; cg.c:122:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x11 = ADRP target-flags(aarch64-page) @timeron
  Ready @0c
  TopQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STRXui renamable $x0, $sp, 9, debug-location !154 :: (store 8 into %ir.fp); cg.c:122:13
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.3 ***
SU(1):   renamable $x11 = ADRP target-flags(aarch64-page) @timeron
SU(0):   STRXui renamable $x0, $sp, 9, debug-location !154 :: (store 8 into %ir.fp); cg.c:122:13

********** MI Scheduling **********
main:%bb.3 for.end
  From: $x0 = ADRP target-flags(aarch64-page) @.str, debug-location !152; cg.c:122:15
    To: BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0, debug-location !152; cg.c:122:15
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str, debug-location !152; cg.c:122:15
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str, 0, debug-location !152; cg.c:122:15
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $x1 = ADRP target-flags(aarch64-page) @.str.1, debug-location !152; cg.c:122:15
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x1
SU(3):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1, 0, debug-location !152; cg.c:122:15
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0, debug-location !152; cg.c:122:15
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @.str, debug-location !152; cg.c:122:15
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) $x1 = ADRP target-flags(aarch64-page) @.str.1, debug-location !152; cg.c:122:15
  Ready @1c
  TopQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str, 0, debug-location !152; cg.c:122:15
  Ready @2c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1, 0, debug-location !152; cg.c:122:15
  Ready @3c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str, debug-location !152; cg.c:122:15
SU(2):   $x1 = ADRP target-flags(aarch64-page) @.str.1, debug-location !152; cg.c:122:15
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str, 0, debug-location !152; cg.c:122:15
SU(3):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1, 0, debug-location !152; cg.c:122:15

Fixup kills for %bb.3
********** MI Scheduling **********
main:%bb.4 if.then
  From: $w8 = MOVZWi 1, 0
    To: BL @fclose, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !166; cg.c:127:9
 RegionInstrs: 11
ScheduleDAGMI::schedule starting
SU(0):   $w8 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(8): Out  Latency=1
    SU(6): Data Latency=1 Reg=$w8
SU(1):   $x9 = ADRP target-flags(aarch64-page) @.str.2, debug-location !160; cg.c:124:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x9
SU(2):   renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.2, 0, debug-location !160; cg.c:124:25
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x9
  Successors:
    SU(7): Data Latency=1 Reg=$x9
SU(3):   $x10 = ADRP target-flags(aarch64-page) @.str.3, debug-location !162; cg.c:125:26
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x10
SU(4):   renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.3, 0, debug-location !162; cg.c:125:26
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x10
  Successors:
    SU(7): Data Latency=1 Reg=$x10
SU(5):   renamable $x0 = LDRXui $sp, 9, debug-location !165 :: (dereferenceable load 8 from %ir.fp); cg.c:127:16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(6):   STRWui renamable $w8, renamable $x11, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !157 :: (store 4 into @timeron); cg.c:123:17
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(0): Data Latency=1 Reg=$w8
  Successors:
    SU(8): Anti Latency=0
SU(7):   STPXi renamable $x9, renamable $x10, $sp, 10, debug-location !160 :: (store 8 into %ir.arrayidx5, align 16), (store 8 into %ir.arrayidx2); cg.c:124:25
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=$x10
    SU(2): Data Latency=1 Reg=$x9
SU(8):   $x8 = ADRP target-flags(aarch64-page) @.str.4, debug-location !164; cg.c:126:30
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(6): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x8
SU(9):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.4, 0, debug-location !164; cg.c:126:30
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x8
  Successors:
    SU(10): Data Latency=1 Reg=$x8
SU(10):   STRXui renamable $x8, $sp, 12, debug-location !164 :: (store 8 into %ir.arrayidx3, align 16); cg.c:126:30
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=$x8
ExitSU:   BL @fclose, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !166; cg.c:127:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(5) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $x0 = LDRXui $sp, 9, debug-location !165 :: (dereferenceable load 8 from %ir.fp); cg.c:127:16
  Ready @0c
  TopQ.A BotLatency SU(5) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $w8 = MOVZWi 1, 0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 1 6 
  TopQ.A RemainingLatency 0 + 2c > CritPath 4
  Cand SU(3) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) $x9 = ADRP target-flags(aarch64-page) @.str.2, debug-location !160; cg.c:124:25
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 6 2 
  TopQ.A RemainingLatency 0 + 3c > CritPath 4
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) $x10 = ADRP target-flags(aarch64-page) @.str.3, debug-location !162; cg.c:125:26
  Ready @3c
  TopQ.A BotLatency SU(3) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 6 4 
  TopQ.A RemainingLatency 0 + 4c > CritPath 4
  Cand SU(2) ORDER                              
  Cand SU(6) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) STRWui renamable $w8, renamable $x11, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !157 :: (store 4 into @timeron); cg.c:123:17
  Ready @4c
  TopQ.A TopLatency SU(6) 1c
  TopQ.A BotLatency SU(6) 2c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 4 8 
  TopQ.A RemainingLatency 0 + 5c > CritPath 4
  Cand SU(2) ORDER                              
  Cand SU(8) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) $x8 = ADRP target-flags(aarch64-page) @.str.4, debug-location !164; cg.c:126:30
  Ready @5c
  TopQ.A BotLatency SU(8) 2c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 4 9 
  TopQ.A RemainingLatency 0 + 6c > CritPath 4
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.2, 0, debug-location !160; cg.c:124:25
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 4 
  TopQ.A RemainingLatency 0 + 7c > CritPath 4
  Cand SU(9) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.3, 0, debug-location !162; cg.c:125:26
  Ready @7c
  TopQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 7 
  TopQ.A RemainingLatency 0 + 8c > CritPath 4
  Cand SU(9) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(9) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.4, 0, debug-location !164; cg.c:126:30
  Ready @8c
  TopQ.A TopLatency SU(9) 2c
  TopQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 10 
  TopQ.A RemainingLatency 0 + 9c > CritPath 4
  Cand SU(7) ORDER                              
Pick Top ORDER     
Scheduling SU(7) STPXi renamable $x9, renamable $x10, $sp, 10, debug-location !160 :: (store 8 into %ir.arrayidx5, align 16), (store 8 into %ir.arrayidx2); cg.c:124:25
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) STRXui renamable $x8, $sp, 12, debug-location !164 :: (store 8 into %ir.arrayidx3, align 16); cg.c:126:30
  Ready @10c
  TopQ.A TopLatency SU(10) 3c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.4 ***
SU(5):   renamable $x0 = LDRXui $sp, 9, debug-location !165 :: (dereferenceable load 8 from %ir.fp); cg.c:127:16
SU(0):   $w8 = MOVZWi 1, 0
SU(1):   $x9 = ADRP target-flags(aarch64-page) @.str.2, debug-location !160; cg.c:124:25
SU(3):   $x10 = ADRP target-flags(aarch64-page) @.str.3, debug-location !162; cg.c:125:26
SU(6):   STRWui renamable $w8, renamable $x11, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !157 :: (store 4 into @timeron); cg.c:123:17
SU(8):   $x8 = ADRP target-flags(aarch64-page) @.str.4, debug-location !164; cg.c:126:30
SU(2):   renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.2, 0, debug-location !160; cg.c:124:25
SU(4):   renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.3, 0, debug-location !162; cg.c:125:26
SU(9):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.4, 0, debug-location !164; cg.c:126:30
SU(7):   STPXi renamable $x9, renamable $x10, $sp, 10, debug-location !160 :: (store 8 into %ir.arrayidx5, align 16), (store 8 into %ir.arrayidx2); cg.c:124:25
SU(10):   STRXui renamable $x8, $sp, 12, debug-location !164 :: (store 8 into %ir.arrayidx3, align 16); cg.c:126:30

Fixup kills for %bb.4
Fixup kills for %bb.5
********** MI Scheduling **********
main:%bb.6 if.end
  From: renamable $w0 = LDRWui killed renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !194 :: (dereferenceable load 4 from @naa); cg.c:190:11
    To: BL @makea, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $w1, implicit $x2, implicit $x3, implicit $x4, implicit $w5, implicit $w6, implicit $w7, implicit-def $sp, debug-location !200; cg.c:190:5
 RegionInstrs: 26
ScheduleDAGMI::schedule starting
SU(0):   renamable $w0 = LDRWui renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !194 :: (dereferenceable load 4 from @naa); cg.c:190:11
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(17): Anti Latency=0
SU(1):   renamable $w1 = LDRWui renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @nzz, debug-location !195 :: (dereferenceable load 4 from @nzz); cg.c:190:16
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(20): Anti Latency=0
SU(2):   renamable $w5 = LDRWui renamable $x21, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !196 :: (dereferenceable load 4 from @firstrow); cg.c:190:40
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(3):   renamable $w6 = LDRWui renamable $x22, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !197 :: (dereferenceable load 4 from @lastrow); cg.c:190:50
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(4):   renamable $w7 = LDRWui renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !198 :: (dereferenceable load 4 from @firstcol); cg.c:190:59
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(5):   renamable $w8 = LDRWui renamable $x28, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !199 :: (dereferenceable load 4 from @lastcol); cg.c:190:69
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(23): Data Latency=4 Reg=$w8
SU(6):   STURDi renamable $d0, $fp, -136, debug-location !193 :: (store 8 into %ir.zeta); cg.c:185:10
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(7):   $x9 = ADRP target-flags(aarch64-page) @iv, debug-location !200; cg.c:190:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x9
SU(8):   renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @iv, 0, debug-location !200; cg.c:190:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x9
  Successors:
    SU(19): Data Latency=1 Reg=$x9
SU(9):   $x10 = ADRP target-flags(aarch64-page) @aelt, debug-location !200; cg.c:190:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x10
SU(10):   renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @aelt, 0, debug-location !200; cg.c:190:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x10
  Successors:
    SU(19): Data Latency=1 Reg=$x10
SU(11):   $x11 = ADRP target-flags(aarch64-page) @acol, debug-location !200; cg.c:190:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x11
SU(12):   renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @acol, 0, debug-location !200; cg.c:190:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x11
  Successors:
    SU(22): Data Latency=1 Reg=$x11
SU(13):   $x12 = ADRP target-flags(aarch64-page) @arow, debug-location !200; cg.c:190:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(14): Out  Latency=1
    SU(14): Data Latency=1 Reg=$x12
SU(14):   renamable $x12 = ADDXri $x12, target-flags(aarch64-pageoff, aarch64-nc) @arow, 0, debug-location !200; cg.c:190:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x12
  Successors:
    SU(22): Data Latency=1 Reg=$x12
SU(15):   $x2 = ADRP target-flags(aarch64-page) @a, debug-location !200; cg.c:190:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(16): Out  Latency=1
    SU(16): Data Latency=1 Reg=$x2
SU(16):   renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @a, 0, debug-location !200; cg.c:190:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(15): Out  Latency=1
    SU(15): Data Latency=1 Reg=$x2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(17):   $x19 = ADRP target-flags(aarch64-page) @colidx, debug-location !200; cg.c:190:5
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Predecessors:
    SU(0): Anti Latency=0
  Successors:
    SU(18): Out  Latency=1
    SU(18): Data Latency=1 Reg=$x19
SU(18):   renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @colidx, 0, debug-location !200; cg.c:190:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(17): Out  Latency=1
    SU(17): Data Latency=1 Reg=$x19
  Successors:
    SU(24): Data Latency=1 Reg=$x19
SU(19):   STPXi renamable $x10, renamable $x9, $sp, 3, debug-location !200 :: (store 8 into stack + 24), (store 8 into stack + 32); cg.c:190:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=$x10
    SU(8): Data Latency=1 Reg=$x9
SU(20):   $x20 = ADRP target-flags(aarch64-page) @rowstr, debug-location !200; cg.c:190:5
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Predecessors:
    SU(1): Anti Latency=0
  Successors:
    SU(21): Out  Latency=1
    SU(21): Data Latency=1 Reg=$x20
SU(21):   renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, 0, debug-location !200; cg.c:190:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(20): Out  Latency=1
    SU(20): Data Latency=1 Reg=$x20
  Successors:
    SU(25): Data Latency=1 Reg=$x20
SU(22):   STPXi renamable $x12, renamable $x11, $sp, 1, debug-location !200 :: (store 8 into stack + 8), (store 8 into stack + 16); cg.c:190:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(14): Data Latency=1 Reg=$x12
    SU(12): Data Latency=1 Reg=$x11
SU(23):   STRWui renamable $w8, $sp, 0, debug-location !200 :: (store 4 into stack); cg.c:190:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(5): Data Latency=4 Reg=$w8
SU(24):   $x3 = ORRXrs $xzr, $x19, 0, debug-location !200; cg.c:190:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(18): Data Latency=1 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(25):   $x4 = ORRXrs $xzr, $x20, 0, debug-location !200; cg.c:190:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(21): Data Latency=1 Reg=$x20
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @makea, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $w1, implicit $x2, implicit $x3, implicit $x4, implicit $w5, implicit $w6, implicit $w7, implicit-def $sp, debug-location !200; cg.c:190:5
  # preds left       : 8
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(25): Ord  Latency=1 Artificial
    SU(24): Ord  Latency=1 Artificial
    SU(16): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=4 Artificial
    SU(3): Ord  Latency=4 Artificial
    SU(2): Ord  Latency=4 Artificial
    SU(1): Ord  Latency=4 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 7 9 11 13 15 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w0 = LDRWui renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !194 :: (dereferenceable load 4 from @naa); cg.c:190:11
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 1 2 3 4 5 6 7 9 11 13 17 
  TopQ.A RemainingLatency 0 + 1c > CritPath 4
  Cand SU(15) ORDER                              
  Cand SU(1) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w1 = LDRWui renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @nzz, debug-location !195 :: (dereferenceable load 4 from @nzz); cg.c:190:16
  Ready @1c
  TopQ.A BotLatency SU(1) 4c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 17 2 3 4 5 6 7 9 11 13 20 
  TopQ.A RemainingLatency 0 + 2c > CritPath 4
  Cand SU(15) ORDER                              
  Cand SU(17) TOP-PATH                  3 cycles 
  Cand SU(2) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $w5 = LDRWui renamable $x21, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !196 :: (dereferenceable load 4 from @firstrow); cg.c:190:40
  Ready @2c
  TopQ.A BotLatency SU(2) 4c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 17 20 3 4 5 6 7 9 11 13 
  TopQ.A RemainingLatency 0 + 3c > CritPath 4
  Cand SU(15) ORDER                              
  Cand SU(17) TOP-PATH                  3 cycles 
  Cand SU(3) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $w6 = LDRWui renamable $x22, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !197 :: (dereferenceable load 4 from @lastrow); cg.c:190:50
  Ready @3c
  TopQ.A BotLatency SU(3) 4c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 17 20 13 4 5 6 7 9 11 
  TopQ.A RemainingLatency 0 + 4c > CritPath 4
  Cand SU(15) ORDER                              
  Cand SU(17) TOP-PATH                  3 cycles 
  Cand SU(4) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $w7 = LDRWui renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !198 :: (dereferenceable load 4 from @firstcol); cg.c:190:59
  Ready @4c
  TopQ.A BotLatency SU(4) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 17 20 13 11 5 6 7 9 
  TopQ.A RemainingLatency 0 + 5c > CritPath 4
  Cand SU(15) ORDER                              
  Cand SU(17) TOP-PATH                  3 cycles 
  Cand SU(5) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $w8 = LDRWui renamable $x28, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !199 :: (dereferenceable load 4 from @lastcol); cg.c:190:69
  Ready @5c
  TopQ.A BotLatency SU(5) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 23 
Queue TopQ.A: 15 17 20 13 11 9 6 7 
  TopQ.A RemainingLatency 0 + 6c > CritPath 4
  Cand SU(15) ORDER                              
  Cand SU(17) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(17) $x19 = ADRP target-flags(aarch64-page) @colidx, debug-location !200; cg.c:190:5
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 23 
Queue TopQ.A: 15 7 20 13 11 9 6 18 
  TopQ.A RemainingLatency 0 + 7c > CritPath 4
  Cand SU(15) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(20) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(20) $x20 = ADRP target-flags(aarch64-page) @rowstr, debug-location !200; cg.c:190:5
  Ready @7c
  TopQ.A BotLatency SU(20) 3c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 23 
Queue TopQ.A: 15 7 18 13 11 9 6 21 
  TopQ.A RemainingLatency 0 + 8c > CritPath 4
  Cand SU(15) ORDER                              
  Cand SU(7) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(7) $x9 = ADRP target-flags(aarch64-page) @iv, debug-location !200; cg.c:190:5
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 21 18 13 11 9 6 8 23 
  TopQ.A RemainingLatency 0 + 9c > CritPath 4
  Cand SU(15) ORDER                              
  Cand SU(13) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(9) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(9) $x10 = ADRP target-flags(aarch64-page) @aelt, debug-location !200; cg.c:190:5
  Ready @9c
  TopQ.A BotLatency SU(9) 2c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 21 18 13 11 23 6 8 10 
  TopQ.A RemainingLatency 0 + 10c > CritPath 4
  Cand SU(15) ORDER                              
  Cand SU(13) ORDER                              
  Cand SU(11) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(11) $x11 = ADRP target-flags(aarch64-page) @acol, debug-location !200; cg.c:190:5
  Ready @10c
  TopQ.A BotLatency SU(11) 2c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 21 18 13 10 23 6 8 12 
  TopQ.A RemainingLatency 0 + 11c > CritPath 4
  Cand SU(15) ORDER                              
  Cand SU(13) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(13) $x12 = ADRP target-flags(aarch64-page) @arow, debug-location !200; cg.c:190:5
  Ready @11c
  TopQ.A BotLatency SU(13) 2c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 21 18 12 10 23 6 8 14 
  TopQ.A RemainingLatency 0 + 12c > CritPath 4
  Cand SU(15) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(15) $x2 = ADRP target-flags(aarch64-page) @a, debug-location !200; cg.c:190:5
  Ready @12c
  TopQ.A BotLatency SU(15) 2c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 14 21 18 12 10 23 6 8 16 
  TopQ.A RemainingLatency 0 + 13c > CritPath 4
  Cand SU(14) ORDER                              
  Cand SU(21) TOP-PATH                  2 cycles 
  Cand SU(18) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(18) renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @colidx, 0, debug-location !200; cg.c:190:5
  Ready @13c
  TopQ.A TopLatency SU(18) 1c
  TopQ.A BotLatency SU(18) 2c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 14 21 16 12 10 23 6 8 24 
  TopQ.A RemainingLatency 0 + 14c > CritPath 4
  Cand SU(14) ORDER                              
  Cand SU(21) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(21) renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, 0, debug-location !200; cg.c:190:5
  Ready @14c
  TopQ.A BotLatency SU(21) 2c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 14 24 16 12 10 23 6 8 25 
  TopQ.A RemainingLatency 0 + 15c > CritPath 4
  Cand SU(14) ORDER                              
  Cand SU(12) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(8) ORDER                              
Pick Top ORDER     
Scheduling SU(8) renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @iv, 0, debug-location !200; cg.c:190:5
  Ready @15c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 14 24 16 12 10 23 6 25 
  TopQ.A RemainingLatency 0 + 16c > CritPath 4
  Cand SU(14) ORDER                              
  Cand SU(12) ORDER                              
  Cand SU(10) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(10) renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @aelt, 0, debug-location !200; cg.c:190:5
  Ready @16c
  TopQ.A BotLatency SU(10) 1c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 14 24 16 12 25 23 6 19 
  TopQ.A RemainingLatency 0 + 17c > CritPath 4
  Cand SU(14) ORDER                              
  Cand SU(12) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(12) renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @acol, 0, debug-location !200; cg.c:190:5
  Ready @17c
  TopQ.A BotLatency SU(12) 1c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 14 24 16 19 25 23 6 
  TopQ.A RemainingLatency 0 + 18c > CritPath 4
  Cand SU(14) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(14) renamable $x12 = ADDXri $x12, target-flags(aarch64-pageoff, aarch64-nc) @arow, 0, debug-location !200; cg.c:190:5
  Ready @18c
  TopQ.A BotLatency SU(14) 1c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 24 16 19 25 23 22 
  TopQ.A RemainingLatency 0 + 19c > CritPath 4
  Cand SU(6) ORDER                              
  Cand SU(24) TOP-PATH                  1 cycles 
  Cand SU(16) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(16) renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @a, 0, debug-location !200; cg.c:190:5
  Ready @19c
  TopQ.A BotLatency SU(16) 1c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 24 22 19 25 23 
  TopQ.A RemainingLatency 0 + 20c > CritPath 4
  Cand SU(6) ORDER                              
  Cand SU(24) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(24) $x3 = ORRXrs $xzr, $x19, 0, debug-location !200; cg.c:190:5
  Ready @20c
  TopQ.A TopLatency SU(24) 2c
  TopQ.A BotLatency SU(24) 1c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 23 22 19 25 
  TopQ.A RemainingLatency 0 + 21c > CritPath 4
  Cand SU(6) ORDER                              
  Cand SU(25) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(25) $x4 = ORRXrs $xzr, $x20, 0, debug-location !200; cg.c:190:5
  Ready @21c
  TopQ.A BotLatency SU(25) 1c
  *** Max MOps 1 at cycle 21
Cycle: 22 TopQ.A
TopQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 23 22 19 
  TopQ.A RemainingLatency 0 + 22c > CritPath 4
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) STURDi renamable $d0, $fp, -136, debug-location !193 :: (store 8 into %ir.zeta); cg.c:185:10
  Ready @22c
  *** Max MOps 1 at cycle 22
Cycle: 23 TopQ.A
TopQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 19 23 22 
  TopQ.A RemainingLatency 0 + 23c > CritPath 4
  Cand SU(19) ORDER                              
Pick Top ORDER     
Scheduling SU(19) STPXi renamable $x10, renamable $x9, $sp, 3, debug-location !200 :: (store 8 into stack + 24), (store 8 into stack + 32); cg.c:190:5
  Ready @23c
  *** Max MOps 1 at cycle 23
Cycle: 24 TopQ.A
TopQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 22 23 
  TopQ.A RemainingLatency 0 + 24c > CritPath 4
  Cand SU(22) ORDER                              
Pick Top ORDER     
Scheduling SU(22) STPXi renamable $x12, renamable $x11, $sp, 1, debug-location !200 :: (store 8 into stack + 8), (store 8 into stack + 16); cg.c:190:5
  Ready @24c
  *** Max MOps 1 at cycle 24
Cycle: 25 TopQ.A
TopQ.A @25c
  Retired: 25
  Executed: 25c
  Critical: 25c, 25 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 23 
Pick Top ONLY1     
Scheduling SU(23) STRWui renamable $w8, $sp, 0, debug-location !200 :: (store 4 into stack); cg.c:190:5
  Ready @25c
  TopQ.A TopLatency SU(23) 4c
  *** Max MOps 1 at cycle 25
Cycle: 26 TopQ.A
TopQ.A @26c
  Retired: 26
  Executed: 26c
  Critical: 26c, 26 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   renamable $w0 = LDRWui renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !194 :: (dereferenceable load 4 from @naa); cg.c:190:11
SU(1):   renamable $w1 = LDRWui renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @nzz, debug-location !195 :: (dereferenceable load 4 from @nzz); cg.c:190:16
SU(2):   renamable $w5 = LDRWui renamable $x21, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !196 :: (dereferenceable load 4 from @firstrow); cg.c:190:40
SU(3):   renamable $w6 = LDRWui renamable $x22, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !197 :: (dereferenceable load 4 from @lastrow); cg.c:190:50
SU(4):   renamable $w7 = LDRWui renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !198 :: (dereferenceable load 4 from @firstcol); cg.c:190:59
SU(5):   renamable $w8 = LDRWui renamable $x28, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !199 :: (dereferenceable load 4 from @lastcol); cg.c:190:69
SU(17):   $x19 = ADRP target-flags(aarch64-page) @colidx, debug-location !200; cg.c:190:5
SU(20):   $x20 = ADRP target-flags(aarch64-page) @rowstr, debug-location !200; cg.c:190:5
SU(7):   $x9 = ADRP target-flags(aarch64-page) @iv, debug-location !200; cg.c:190:5
SU(9):   $x10 = ADRP target-flags(aarch64-page) @aelt, debug-location !200; cg.c:190:5
SU(11):   $x11 = ADRP target-flags(aarch64-page) @acol, debug-location !200; cg.c:190:5
SU(13):   $x12 = ADRP target-flags(aarch64-page) @arow, debug-location !200; cg.c:190:5
SU(15):   $x2 = ADRP target-flags(aarch64-page) @a, debug-location !200; cg.c:190:5
SU(18):   renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @colidx, 0, debug-location !200; cg.c:190:5
SU(21):   renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, 0, debug-location !200; cg.c:190:5
SU(8):   renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @iv, 0, debug-location !200; cg.c:190:5
SU(10):   renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @aelt, 0, debug-location !200; cg.c:190:5
SU(12):   renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @acol, 0, debug-location !200; cg.c:190:5
SU(14):   renamable $x12 = ADDXri $x12, target-flags(aarch64-pageoff, aarch64-nc) @arow, 0, debug-location !200; cg.c:190:5
SU(16):   renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @a, 0, debug-location !200; cg.c:190:5
SU(24):   $x3 = ORRXrs $xzr, $x19, 0, debug-location !200; cg.c:190:5
SU(25):   $x4 = ORRXrs $xzr, $x20, 0, debug-location !200; cg.c:190:5
SU(6):   STURDi renamable $d0, $fp, -136, debug-location !193 :: (store 8 into %ir.zeta); cg.c:185:10
SU(19):   STPXi renamable $x10, renamable $x9, $sp, 3, debug-location !200 :: (store 8 into stack + 24), (store 8 into stack + 32); cg.c:190:5
SU(22):   STPXi renamable $x12, renamable $x11, $sp, 1, debug-location !200 :: (store 8 into stack + 8), (store 8 into stack + 16); cg.c:190:5
SU(23):   STRWui renamable $w8, $sp, 0, debug-location !200 :: (store 4 into stack); cg.c:190:5

********** MI Scheduling **********
main:%bb.6 if.end
  From: renamable $x19 = ADRP target-flags(aarch64-page) @naa, debug-location !187; cg.c:177:9
    To: BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !192; cg.c:185:12
 RegionInstrs: 19
ScheduleDAGMI::schedule starting
SU(0):   renamable $x19 = ADRP target-flags(aarch64-page) @naa, debug-location !187; cg.c:177:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(13): Data Latency=1 Reg=$x19
SU(1):   renamable $x20 = ADRP target-flags(aarch64-page) @nzz, debug-location !188; cg.c:178:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(14): Data Latency=1 Reg=$x20
SU(2):   $w8 = MOVZWi 19936, 0
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Out  Latency=1
    SU(17): Out  Latency=1
    SU(3): Data Latency=1 Reg=$w8
SU(3):   $w8 = MOVKWi $w8(tied-def 0), 224, 16
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 6
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$w8
  Successors:
    SU(17): Out  Latency=1
    SU(14): Data Latency=1 Reg=$w8
    SU(17): Anti Latency=0
SU(4):   $x0 = ADRP target-flags(aarch64-page) @tran, debug-location !189; cg.c:183:10
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x0
SU(5):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @tran, 0, debug-location !189; cg.c:183:10
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(15): Data Latency=1 Reg=$x0
SU(6):   $x9 = MOVZXi 41216, 16
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x9
SU(7):   $x9 = MOVKXi $x9(tied-def 0), 47536, 32
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x9
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x9
SU(8):   $x9 = MOVKXi $x9(tied-def 0), 16818, 48
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x9
  Successors:
    SU(15): Data Latency=1 Reg=$x9
SU(9):   renamable $x10 = ADRP target-flags(aarch64-page) @amult, debug-location !190; cg.c:184:11
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(16): Data Latency=1 Reg=$x10
SU(10):   $x11 = MOVZXi 58688, 16
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x11
SU(11):   $x11 = MOVKXi $x11(tied-def 0), 12444, 32
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x11
  Successors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x11
SU(12):   $x11 = MOVKXi $x11(tied-def 0), 16850, 48
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x11
  Successors:
    SU(16): Data Latency=1 Reg=$x11
SU(13):   STRWui renamable $w23, renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !187 :: (store 4 into @naa); cg.c:177:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$x19
SU(14):   STRWui renamable $w8, renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @nzz, debug-location !188 :: (store 4 into @nzz); cg.c:178:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 5
  Predecessors:
    SU(3): Data Latency=1 Reg=$w8
    SU(1): Data Latency=1 Reg=$x20
  Successors:
    SU(17): Anti Latency=0
SU(15):   STRXui renamable $x9, renamable $x0, 0, debug-location !189 :: (store 8 into @tran); cg.c:183:10
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=$x9
    SU(5): Data Latency=1 Reg=$x0
SU(16):   STRXui renamable $x11, renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !190 :: (store 8 into @amult); cg.c:184:11
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=$x11
    SU(9): Data Latency=1 Reg=$x10
SU(17):   renamable $x8 = ADRP target-flags(aarch64-page) %const.0
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 5
  Predecessors:
    SU(14): Anti Latency=0
    SU(3): Out  Latency=1
    SU(3): Anti Latency=0
    SU(2): Out  Latency=1
  Successors:
    SU(18): Data Latency=1 Reg=$x8
SU(18):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 3
  Height             : 4
  Predecessors:
    SU(17): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
ExitSU:   BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !192; cg.c:185:12
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(18): Ord  Latency=4 Artificial
    SU(5): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 4 6 9 10 
  TopQ.A RemainingLatency 0 + 0c > CritPath 7
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  6 cycles 
  Cand SU(2) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $w8 = MOVZWi 19936, 0
  Ready @0c
  TopQ.A BotLatency SU(2) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 4 6 9 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 7
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x20 = ADRP target-flags(aarch64-page) @nzz, debug-location !188; cg.c:178:9
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 10 4 6 9 
  TopQ.A RemainingLatency 0 + 2c > CritPath 7
  Cand SU(0) ORDER                              
  Cand SU(3) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) $w8 = MOVKWi $w8(tied-def 0), 224, 16
  Ready @2c
  TopQ.A TopLatency SU(3) 1c
  TopQ.A BotLatency SU(3) 6c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 9 10 4 6 14 
  TopQ.A RemainingLatency 0 + 3c > CritPath 7
  Cand SU(0) ORDER                              
  Cand SU(10) TOP-PATH                  3 cycles 
  Cand SU(6) ORDER                              
  Cand SU(14) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(14) STRWui renamable $w8, renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @nzz, debug-location !188 :: (store 4 into @nzz); cg.c:178:9
  Ready @3c
  TopQ.A TopLatency SU(14) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 9 10 4 6 17 
  TopQ.A RemainingLatency 0 + 4c > CritPath 7
  Cand SU(0) ORDER                              
  Cand SU(10) TOP-PATH                  3 cycles 
  Cand SU(6) ORDER                              
  Cand SU(17) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(17) renamable $x8 = ADRP target-flags(aarch64-page) %const.0
  Ready @4c
  TopQ.A BotLatency SU(17) 5c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 9 10 4 6 18 
  TopQ.A RemainingLatency 0 + 5c > CritPath 7
  Cand SU(0) ORDER                              
  Cand SU(10) TOP-PATH                  3 cycles 
  Cand SU(6) ORDER                              
  Cand SU(18) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(18) renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  Ready @5c
  TopQ.A TopLatency SU(18) 3c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 9 10 4 6 
  TopQ.A RemainingLatency 0 + 6c > CritPath 7
  Cand SU(0) ORDER                              
  Cand SU(10) TOP-PATH                  3 cycles 
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) $x9 = MOVZXi 41216, 16
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 9 10 4 7 
  TopQ.A RemainingLatency 0 + 7c > CritPath 7
  Cand SU(0) ORDER                              
  Cand SU(10) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(10) $x11 = MOVZXi 58688, 16
  Ready @7c
  TopQ.A BotLatency SU(10) 3c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 9 7 4 11 
  TopQ.A RemainingLatency 0 + 8c > CritPath 7
  Cand SU(0) ORDER                              
  Cand SU(7) TOP-PATH                  2 cycles 
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) $x0 = ADRP target-flags(aarch64-page) @tran, debug-location !189; cg.c:183:10
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 9 7 11 5 
  TopQ.A RemainingLatency 0 + 9c > CritPath 7
  Cand SU(0) ORDER                              
  Cand SU(7) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) $x9 = MOVKXi $x9(tied-def 0), 47536, 32
  Ready @9c
  TopQ.A BotLatency SU(7) 2c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 9 5 11 8 
  TopQ.A RemainingLatency 0 + 10c > CritPath 7
  Cand SU(0) ORDER                              
  Cand SU(11) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(11) $x11 = MOVKXi $x11(tied-def 0), 12444, 32
  Ready @10c
  TopQ.A BotLatency SU(11) 2c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 9 5 8 12 
  TopQ.A RemainingLatency 0 + 11c > CritPath 7
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x19 = ADRP target-flags(aarch64-page) @naa, debug-location !187; cg.c:177:9
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 9 5 8 13 
  TopQ.A RemainingLatency 0 + 12c > CritPath 7
  Cand SU(12) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @tran, 0, debug-location !189; cg.c:183:10
  Ready @12c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 9 13 8 
  TopQ.A RemainingLatency 0 + 13c > CritPath 7
  Cand SU(12) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(8) ORDER                              
Pick Top ORDER     
Scheduling SU(8) $x9 = MOVKXi $x9(tied-def 0), 16818, 48
  Ready @13c
  TopQ.A BotLatency SU(8) 1c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 9 13 15 
  TopQ.A RemainingLatency 0 + 14c > CritPath 7
  Cand SU(12) ORDER                              
  Cand SU(9) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(9) renamable $x10 = ADRP target-flags(aarch64-page) @amult, debug-location !190; cg.c:184:11
  Ready @14c
  TopQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 15 13 
  TopQ.A RemainingLatency 0 + 15c > CritPath 7
  Cand SU(12) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(12) $x11 = MOVKXi $x11(tied-def 0), 16850, 48
  Ready @15c
  TopQ.A BotLatency SU(12) 1c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 15 16 
  TopQ.A RemainingLatency 0 + 16c > CritPath 7
  Cand SU(13) ORDER                              
Pick Top ORDER     
Scheduling SU(13) STRWui renamable $w23, renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !187 :: (store 4 into @naa); cg.c:177:9
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 16 15 
  TopQ.A RemainingLatency 0 + 17c > CritPath 7
  Cand SU(16) ORDER                              
  Cand SU(15) ORDER                              
Pick Top ORDER     
Scheduling SU(15) STRXui renamable $x9, renamable $x0, 0, debug-location !189 :: (store 8 into @tran); cg.c:183:10
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 16 
Pick Top ONLY1     
Scheduling SU(16) STRXui renamable $x11, renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !190 :: (store 8 into @amult); cg.c:184:11
  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.6 ***
SU(2):   $w8 = MOVZWi 19936, 0
SU(1):   renamable $x20 = ADRP target-flags(aarch64-page) @nzz, debug-location !188; cg.c:178:9
SU(3):   $w8 = MOVKWi $w8(tied-def 0), 224, 16
SU(14):   STRWui renamable $w8, renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @nzz, debug-location !188 :: (store 4 into @nzz); cg.c:178:9
SU(17):   renamable $x8 = ADRP target-flags(aarch64-page) %const.0
SU(18):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
SU(6):   $x9 = MOVZXi 41216, 16
SU(10):   $x11 = MOVZXi 58688, 16
SU(4):   $x0 = ADRP target-flags(aarch64-page) @tran, debug-location !189; cg.c:183:10
SU(7):   $x9 = MOVKXi $x9(tied-def 0), 47536, 32
SU(11):   $x11 = MOVKXi $x11(tied-def 0), 12444, 32
SU(0):   renamable $x19 = ADRP target-flags(aarch64-page) @naa, debug-location !187; cg.c:177:9
SU(5):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @tran, 0, debug-location !189; cg.c:183:10
SU(8):   $x9 = MOVKXi $x9(tied-def 0), 16818, 48
SU(9):   renamable $x10 = ADRP target-flags(aarch64-page) @amult, debug-location !190; cg.c:184:11
SU(12):   $x11 = MOVKXi $x11(tied-def 0), 16850, 48
SU(13):   STRWui renamable $w23, renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !187 :: (store 4 into @naa); cg.c:177:9
SU(15):   STRXui renamable $x9, renamable $x0, 0, debug-location !189 :: (store 8 into @tran); cg.c:183:10
SU(16):   STRXui renamable $x11, renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !190 :: (store 8 into @amult); cg.c:184:11

********** MI Scheduling **********
main:%bb.6 if.end
  From: $x0 = ADRP target-flags(aarch64-page) @.str.8, debug-location !186; cg.c:175:5
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !186; cg.c:175:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.8, debug-location !186; cg.c:175:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.8, 0, debug-location !186; cg.c:175:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !186; cg.c:175:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @.str.8, debug-location !186; cg.c:175:5
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.8, 0, debug-location !186; cg.c:175:5
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.8, debug-location !186; cg.c:175:5
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.8, 0, debug-location !186; cg.c:175:5

********** MI Scheduling **********
main:%bb.6 if.end
  From: $x0 = ADRP target-flags(aarch64-page) @.str.7, debug-location !185; cg.c:174:5
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !185; cg.c:174:5
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.7, debug-location !185; cg.c:174:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.7, 0, debug-location !185; cg.c:174:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $w1 = MOVZWi 75, 0, debug-location !185; cg.c:174:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !185; cg.c:174:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @.str.7, debug-location !185; cg.c:174:5
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.7, 0, debug-location !185; cg.c:174:5
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $w1 = MOVZWi 75, 0, debug-location !185; cg.c:174:5
  Ready @2c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.7, debug-location !185; cg.c:174:5
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.7, 0, debug-location !185; cg.c:174:5
SU(2):   $w1 = MOVZWi 75, 0, debug-location !185; cg.c:174:5

********** MI Scheduling **********
main:%bb.6 if.end
  From: $x0 = ADRP target-flags(aarch64-page) @.str.6, debug-location !184; cg.c:173:5
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !184; cg.c:173:5
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.6, debug-location !184; cg.c:173:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.6, 0, debug-location !184; cg.c:173:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $w1 = MOVZWi 9464, 0, debug-location !184; cg.c:173:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$w1
SU(3):   $w1 = MOVKWi $w1(tied-def 0), 1, 16, debug-location !184; cg.c:173:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$w1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !184; cg.c:173:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @.str.6, debug-location !184; cg.c:173:5
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) $w1 = MOVZWi 9464, 0, debug-location !184; cg.c:173:5
  Ready @1c
  TopQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.6, 0, debug-location !184; cg.c:173:5
  Ready @2c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $w1 = MOVKWi $w1(tied-def 0), 1, 16, debug-location !184; cg.c:173:5
  Ready @3c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.6, debug-location !184; cg.c:173:5
SU(2):   $w1 = MOVZWi 9464, 0, debug-location !184; cg.c:173:5
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.6, 0, debug-location !184; cg.c:173:5
SU(3):   $w1 = MOVKWi $w1(tied-def 0), 1, 16, debug-location !184; cg.c:173:5

********** MI Scheduling **********
main:%bb.6 if.end
  From: renamable $x21 = ADRP target-flags(aarch64-page) @firstrow, debug-location !172; cg.c:135:14
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !183; cg.c:172:5
 RegionInstrs: 18
ScheduleDAGMI::schedule starting
SU(0):   renamable $x21 = ADRP target-flags(aarch64-page) @firstrow, debug-location !172; cg.c:135:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(10): Data Latency=1 Reg=$x21
SU(1):   renamable $w8 = SUBWri renamable $w23, 1, 0, debug-location !173; cg.c:136:13
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(13): Data Latency=1 Reg=$w8
    SU(11): Data Latency=1 Reg=$w8
SU(2):   renamable $x22 = ADRP target-flags(aarch64-page) @lastrow, debug-location !173; cg.c:136:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(11): Data Latency=1 Reg=$x22
SU(3):   renamable $x27 = ADRP target-flags(aarch64-page) @firstcol, debug-location !174; cg.c:137:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(12): Data Latency=1 Reg=$x27
SU(4):   renamable $x28 = ADRP target-flags(aarch64-page) @lastcol, debug-location !175; cg.c:138:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(13): Data Latency=1 Reg=$x28
SU(5):   $w9 = MOVZWi 66, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(14): Data Latency=1 Reg=$w9
SU(6):   $x10 = MOVZXi 17818, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x10
SU(7):   $x10 = MOVKXi $x10(tied-def 0), 31978, 16
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x10
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x10
SU(8):   $x10 = MOVKXi $x10(tied-def 0), 46710, 32
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x10
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x10
SU(9):   $x10 = MOVKXi $x10(tied-def 0), 16438, 48
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x10
  Successors:
    SU(15): Data Latency=1 Reg=$x10
SU(10):   STRWui $wzr, renamable $x21, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !172 :: (store 4 into @firstrow); cg.c:135:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$x21
SU(11):   STRWui renamable $w8, renamable $x22, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !173 :: (store 4 into @lastrow); cg.c:136:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=$x22
    SU(1): Data Latency=1 Reg=$w8
SU(12):   STRWui $wzr, renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !174 :: (store 4 into @firstcol); cg.c:137:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=$x27
SU(13):   STRWui renamable $w8, renamable $x28, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !175 :: (store 4 into @lastcol); cg.c:138:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=$x28
    SU(1): Data Latency=1 Reg=$w8
SU(14):   STRBBui renamable $w9, $sp, 132, debug-location !176 :: (store 1 into %ir.Class, align 4); cg.c:153:15
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=$w9
SU(15):   STRXui renamable $x10, $sp, 15, debug-location !182 :: (store 8 into %ir.zeta_verify_value); cg.c:154:27
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=$x10
SU(16):   $x0 = ADRP target-flags(aarch64-page) @.str.5, debug-location !183; cg.c:172:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(17): Out  Latency=1
    SU(17): Data Latency=1 Reg=$x0
SU(17):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.5, 0, debug-location !183; cg.c:172:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(16): Out  Latency=1
    SU(16): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !183; cg.c:172:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(17): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 16 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) $x10 = MOVZXi 17818, 0
  Ready @0c
  TopQ.A BotLatency SU(6) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 16 7 
  TopQ.A RemainingLatency 0 + 1c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(16) TOP-PATH                  2 cycles 
  Cand SU(7) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) $x10 = MOVKXi $x10(tied-def 0), 31978, 16
  Ready @1c
  TopQ.A TopLatency SU(7) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 16 8 
  TopQ.A RemainingLatency 0 + 2c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(16) TOP-PATH                  2 cycles 
  Cand SU(8) ORDER                              
Pick Top ORDER     
Scheduling SU(8) $x10 = MOVKXi $x10(tied-def 0), 46710, 32
  Ready @2c
  TopQ.A TopLatency SU(8) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 16 9 
  TopQ.A RemainingLatency 0 + 3c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(16) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(16) $x0 = ADRP target-flags(aarch64-page) @.str.5, debug-location !183; cg.c:172:5
  Ready @3c
  TopQ.A BotLatency SU(16) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 9 17 
  TopQ.A RemainingLatency 0 + 4c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x21 = ADRP target-flags(aarch64-page) @firstrow, debug-location !172; cg.c:135:14
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 17 1 2 3 4 5 9 10 
  TopQ.A RemainingLatency 0 + 5c > CritPath 4
  Cand SU(17) ORDER                              
  Cand SU(1) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w8 = SUBWri renamable $w23, 1, 0, debug-location !173; cg.c:136:13
  Ready @5c
  TopQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 17 10 2 3 4 5 9 
  TopQ.A RemainingLatency 0 + 6c > CritPath 4
  Cand SU(17) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) renamable $x22 = ADRP target-flags(aarch64-page) @lastrow, debug-location !173; cg.c:136:13
  Ready @6c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 17 10 9 3 4 5 11 
  TopQ.A RemainingLatency 0 + 7c > CritPath 4
  Cand SU(17) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) renamable $x27 = ADRP target-flags(aarch64-page) @firstcol, debug-location !174; cg.c:137:14
  Ready @7c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 17 10 9 11 4 5 12 
  TopQ.A RemainingLatency 0 + 8c > CritPath 4
  Cand SU(17) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) renamable $x28 = ADRP target-flags(aarch64-page) @lastcol, debug-location !175; cg.c:138:13
  Ready @8c
  TopQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 17 10 9 11 12 5 13 
  TopQ.A RemainingLatency 0 + 9c > CritPath 4
  Cand SU(17) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) $w9 = MOVZWi 66, 0
  Ready @9c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 17 10 9 11 12 13 14 
  TopQ.A RemainingLatency 0 + 10c > CritPath 4
  Cand SU(17) ORDER                              
  Cand SU(9) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(9) $x10 = MOVKXi $x10(tied-def 0), 16438, 48
  Ready @10c
  TopQ.A TopLatency SU(9) 3c
  TopQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 17 10 14 11 12 13 15 
  TopQ.A RemainingLatency 0 + 11c > CritPath 4
  Cand SU(17) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(17) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.5, 0, debug-location !183; cg.c:172:5
  Ready @11c
  TopQ.A BotLatency SU(17) 1c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 10 14 11 12 13 
  TopQ.A RemainingLatency 0 + 12c > CritPath 4
  Cand SU(15) ORDER                              
  Cand SU(10) ORDER                              
Pick Top ORDER     
Scheduling SU(10) STRWui $wzr, renamable $x21, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !172 :: (store 4 into @firstrow); cg.c:135:14
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 13 14 11 12 
  TopQ.A RemainingLatency 0 + 13c > CritPath 4
  Cand SU(15) ORDER                              
  Cand SU(13) ORDER                              
  Cand SU(11) ORDER                              
Pick Top ORDER     
Scheduling SU(11) STRWui renamable $w8, renamable $x22, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !173 :: (store 4 into @lastrow); cg.c:136:13
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 13 14 12 
  TopQ.A RemainingLatency 0 + 14c > CritPath 4
  Cand SU(15) ORDER                              
  Cand SU(13) ORDER                              
  Cand SU(12) ORDER                              
Pick Top ORDER     
Scheduling SU(12) STRWui $wzr, renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !174 :: (store 4 into @firstcol); cg.c:137:14
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 13 14 
  TopQ.A RemainingLatency 0 + 15c > CritPath 4
  Cand SU(15) ORDER                              
  Cand SU(13) ORDER                              
Pick Top ORDER     
Scheduling SU(13) STRWui renamable $w8, renamable $x28, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !175 :: (store 4 into @lastcol); cg.c:138:13
  Ready @15c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 14 
  TopQ.A RemainingLatency 0 + 16c > CritPath 4
  Cand SU(15) ORDER                              
  Cand SU(14) ORDER                              
Pick Top ORDER     
Scheduling SU(14) STRBBui renamable $w9, $sp, 132, debug-location !176 :: (store 1 into %ir.Class, align 4); cg.c:153:15
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 
Pick Top ONLY1     
Scheduling SU(15) STRXui renamable $x10, $sp, 15, debug-location !182 :: (store 8 into %ir.zeta_verify_value); cg.c:154:27
  Ready @17c
  TopQ.A TopLatency SU(15) 4c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.6 ***
SU(6):   $x10 = MOVZXi 17818, 0
SU(7):   $x10 = MOVKXi $x10(tied-def 0), 31978, 16
SU(8):   $x10 = MOVKXi $x10(tied-def 0), 46710, 32
SU(16):   $x0 = ADRP target-flags(aarch64-page) @.str.5, debug-location !183; cg.c:172:5
SU(0):   renamable $x21 = ADRP target-flags(aarch64-page) @firstrow, debug-location !172; cg.c:135:14
SU(1):   renamable $w8 = SUBWri renamable $w23, 1, 0, debug-location !173; cg.c:136:13
SU(2):   renamable $x22 = ADRP target-flags(aarch64-page) @lastrow, debug-location !173; cg.c:136:13
SU(3):   renamable $x27 = ADRP target-flags(aarch64-page) @firstcol, debug-location !174; cg.c:137:14
SU(4):   renamable $x28 = ADRP target-flags(aarch64-page) @lastcol, debug-location !175; cg.c:138:13
SU(5):   $w9 = MOVZWi 66, 0
SU(9):   $x10 = MOVKXi $x10(tied-def 0), 16438, 48
SU(17):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.5, 0, debug-location !183; cg.c:172:5
SU(10):   STRWui $wzr, renamable $x21, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !172 :: (store 4 into @firstrow); cg.c:135:14
SU(11):   STRWui renamable $w8, renamable $x22, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !173 :: (store 4 into @lastrow); cg.c:136:13
SU(12):   STRWui $wzr, renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !174 :: (store 4 into @firstcol); cg.c:137:14
SU(13):   STRWui renamable $w8, renamable $x28, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !175 :: (store 4 into @lastcol); cg.c:138:13
SU(14):   STRBBui renamable $w9, $sp, 132, debug-location !176 :: (store 1 into %ir.Class, align 4); cg.c:153:15
SU(15):   STRXui renamable $x10, $sp, 15, debug-location !182 :: (store 8 into %ir.zeta_verify_value); cg.c:154:27

********** MI Scheduling **********
main:%bb.6 if.end
  From: $w23 = MOVZWi 9464, 0
    To: BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !171; cg.c:133:5
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   $w23 = MOVZWi 9464, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$w23
SU(1):   $w23 = MOVKWi $w23(tied-def 0), 1, 16
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$w23
SU(2):   $w0 = ORRWrs $wzr, $wzr, 0, debug-location !171; cg.c:133:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !171; cg.c:133:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $w23 = MOVZWi 9464, 0
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 1
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) $w0 = ORRWrs $wzr, $wzr, 0, debug-location !171; cg.c:133:5
  Ready @1c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w23 = MOVKWi $w23(tied-def 0), 1, 16
  Ready @2c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   $w23 = MOVZWi 9464, 0
SU(2):   $w0 = ORRWrs $wzr, $wzr, 0, debug-location !171; cg.c:133:5
SU(1):   $w23 = MOVKWi $w23(tied-def 0), 1, 16

Fixup kills for %bb.6
********** MI Scheduling **********
main:%bb.7 for.cond10
  From: renamable $w8 = LDRWui renamable $x22, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !206 :: (dereferenceable load 4 from @lastrow); cg.c:202:21
    To: Bcc 10, %bb.12, implicit $nzcv, debug-location !211; cg.c:202:5
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui renamable $x22, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !206 :: (dereferenceable load 4 from @lastrow); cg.c:202:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w8
SU(1):   renamable $w9 = LDRWui renamable $x21, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !207 :: (dereferenceable load 4 from @firstrow); cg.c:202:31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=$w9
SU(2):   renamable $w10 = LDURWi $fp, -120, debug-location !204 :: (dereferenceable load 4 from %ir.j); cg.c:202:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=$w10
SU(3):   $w8 = SUBWrs renamable $w8, renamable $w9, 0, debug-location !208; cg.c:202:29
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=$w9
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$w8
SU(4):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !209; cg.c:202:40
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$w8
  Successors:
    SU(5): Data Latency=1 Reg=$w8
SU(5):   $wzr = SUBSWrs renamable $w10, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !211; cg.c:202:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=$w8
    SU(2): Data Latency=4 Reg=$w10
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.12, implicit $nzcv, debug-location !211; cg.c:202:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 7
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w8 = LDRWui renamable $x22, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !206 :: (dereferenceable load 4 from @lastrow); cg.c:202:21
  Ready @0c
  TopQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 7
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w9 = LDRWui renamable $x21, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !207 :: (dereferenceable load 4 from @firstrow); cg.c:202:31
  Ready @1c
  TopQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w10 = LDURWi $fp, -120, debug-location !204 :: (dereferenceable load 4 from %ir.j); cg.c:202:17
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $w8 = SUBWrs renamable $w8, renamable $w9, 0, debug-location !208; cg.c:202:29
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !209; cg.c:202:40
  Ready @6c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $wzr = SUBSWrs renamable $w10, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !211; cg.c:202:5
  Ready @7c
  TopQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   renamable $w8 = LDRWui renamable $x22, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !206 :: (dereferenceable load 4 from @lastrow); cg.c:202:21
SU(1):   renamable $w9 = LDRWui renamable $x21, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !207 :: (dereferenceable load 4 from @firstrow); cg.c:202:31
SU(2):   renamable $w10 = LDURWi $fp, -120, debug-location !204 :: (dereferenceable load 4 from %ir.j); cg.c:202:17
SU(3):   $w8 = SUBWrs renamable $w8, renamable $w9, 0, debug-location !208; cg.c:202:29
SU(4):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !209; cg.c:202:40
SU(5):   $wzr = SUBSWrs renamable $w10, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !211; cg.c:202:5

Fixup kills for %bb.7
********** MI Scheduling **********
main:%bb.8 for.body12
  From: renamable $x8 = LDURSWi $fp, -120, debug-location !212 :: (dereferenceable load 4 from %ir.j); cg.c:203:25
    To: End RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURSWi $fp, -120, debug-location !212 :: (dereferenceable load 4 from %ir.j); cg.c:203:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x8
SU(1):   renamable $w8 = LDRWroX renamable $x20, renamable $x8, 0, 1, debug-location !215 :: (load 4 from %ir.arrayidx13); cg.c:203:18
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 8
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = LDURSWi $fp, -120, debug-location !212 :: (dereferenceable load 4 from %ir.j); cg.c:203:25
  Ready @0c
  TopQ.A BotLatency SU(0) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = LDRWroX renamable $x20, renamable $x8, 0, 1, debug-location !215 :: (load 4 from %ir.arrayidx13); cg.c:203:18
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   renamable $x8 = LDURSWi $fp, -120, debug-location !212 :: (dereferenceable load 4 from %ir.j); cg.c:203:25
SU(1):   renamable $w8 = LDRWroX renamable $x20, renamable $x8, 0, 1, debug-location !215 :: (load 4 from %ir.arrayidx13); cg.c:203:18

Fixup kills for %bb.8
********** MI Scheduling **********
main:%bb.9 for.cond14
  From: STURWi killed renamable $w8, $fp, -124, debug-location !DILocation(line: 0, scope: !213) :: (store 4 into %ir.k); cg.c:0
    To: Bcc 10, %bb.11, implicit $nzcv, debug-location !224; cg.c:203:9
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   STURWi renamable $w8, $fp, -124, debug-location !DILocation(line: 0, scope: !213) :: (store 4 into %ir.k); cg.c:0
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 10
  Successors:
    SU(1): Anti Latency=0
    SU(2): Anti Latency=0
    SU(1): Ord  Latency=1 Memory
SU(1):   renamable $w9, $w8 = LDPWi $fp, -31, debug-location !220 :: (dereferenceable load 4 from %ir.j), (dereferenceable load 4 from %ir.k); cg.c:203:40
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 9
  Predecessors:
    SU(0): Anti Latency=0
    SU(0): Ord  Latency=1 Memory
  Successors:
    SU(6): Data Latency=4 Reg=$w9
    SU(2): Out  Latency=1
    SU(2): Data Latency=0 Reg=$w8
SU(2):   $w8 = KILL $w8, implicit-def $x8, debug-location !220; cg.c:203:40
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 8
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=0 Reg=$w8
    SU(0): Anti Latency=0
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=0 Reg=$x8
SU(3):   $x8 = SBFMXri $x8, 0, 31, debug-location !220; cg.c:203:40
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 7
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=0 Reg=$x8
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x8
SU(4):   renamable $x8 = ADDXrs renamable $x20, renamable $x8, 2, debug-location !222; cg.c:203:33
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x8
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x8
SU(5):   renamable $w8 = LDRWui renamable $x8, 1, debug-location !222 :: (load 4 from %ir.arrayidx17); cg.c:203:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x8
  Successors:
    SU(6): Data Latency=4 Reg=$w8
SU(6):   $wzr = SUBSWrs renamable $w9, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !224; cg.c:203:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(5): Data Latency=4 Reg=$w8
    SU(1): Data Latency=4 Reg=$w9
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.11, implicit $nzcv, debug-location !224; cg.c:203:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 10
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURWi renamable $w8, $fp, -124, debug-location !DILocation(line: 0, scope: !213) :: (store 4 into %ir.k); cg.c:0
  Ready @0c
  TopQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w9, $w8 = LDPWi $fp, -31, debug-location !220 :: (dereferenceable load 4 from %ir.j), (dereferenceable load 4 from %ir.k); cg.c:203:40
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $w8 = KILL $w8, implicit-def $x8, debug-location !220; cg.c:203:40
  Ready @2c
  TopQ.A TopLatency SU(2) 2c
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 3 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $x8 = SBFMXri $x8, 0, 31, debug-location !220; cg.c:203:40
  Ready @3c
  TopQ.A TopLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $x8 = ADDXrs renamable $x20, renamable $x8, 2, debug-location !222; cg.c:203:33
  Ready @4c
  TopQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $w8 = LDRWui renamable $x8, 1, debug-location !222 :: (load 4 from %ir.arrayidx17); cg.c:203:33
  Ready @5c
  TopQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 9 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) $wzr = SUBSWrs renamable $w9, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !224; cg.c:203:9
  Ready @9c
  TopQ.A TopLatency SU(6) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 6
  Executed: 10c
  Critical: 6c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   STURWi renamable $w8, $fp, -124, debug-location !DILocation(line: 0, scope: !213) :: (store 4 into %ir.k); cg.c:0
SU(1):   renamable $w9, $w8 = LDPWi $fp, -31, debug-location !220 :: (dereferenceable load 4 from %ir.j), (dereferenceable load 4 from %ir.k); cg.c:203:40
SU(2):   $w8 = KILL $w8, implicit-def $x8, debug-location !220; cg.c:203:40
SU(3):   $x8 = SBFMXri $x8, 0, 31, debug-location !220; cg.c:203:40
SU(4):   renamable $x8 = ADDXrs renamable $x20, renamable $x8, 2, debug-location !222; cg.c:203:33
SU(5):   renamable $w8 = LDRWui renamable $x8, 1, debug-location !222 :: (load 4 from %ir.arrayidx17); cg.c:203:33
SU(6):   $wzr = SUBSWrs renamable $w9, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !224; cg.c:203:9

Fixup kills for %bb.9
********** MI Scheduling **********
main:%bb.10 for.body19
  From: renamable $x8 = LDURSWi $fp, -124, debug-location !225 :: (dereferenceable load 4 from %ir.k); cg.c:204:32
    To: B %bb.9
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURSWi $fp, -124, debug-location !225 :: (dereferenceable load 4 from %ir.k); cg.c:204:32
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$w8
    SU(4): Data Latency=0 Reg=$x8
    SU(2): Data Latency=4 Reg=$x8
SU(1):   renamable $w9 = LDRWui renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !228 :: (dereferenceable load 4 from @firstcol); cg.c:204:37
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$w9
SU(2):   renamable $x10 = UBFMXri renamable $x8, 62, 61, debug-location !227; cg.c:204:25
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(6): Data Latency=1 Reg=$x10
    SU(3): Data Latency=1 Reg=$x10
    SU(4): Anti Latency=0
SU(3):   renamable $w11 = LDRWroX renamable $x19, renamable $x10, 0, 0, debug-location !227 :: (load 4 from %ir.arrayidx21); cg.c:204:25
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(2): Data Latency=1 Reg=$x10
  Successors:
    SU(5): Data Latency=4 Reg=$w11
    SU(6): Ord  Latency=0 Memory
SU(4):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8, debug-location !233; cg.c:203:49
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
    SU(0): Data Latency=0 Reg=$x8
SU(5):   $w9 = SUBWrs renamable $w11, renamable $w9, 0, debug-location !229; cg.c:204:35
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=$w11
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w9
  Successors:
    SU(6): Data Latency=1 Reg=$w9
SU(6):   STRWroX renamable $w9, renamable $x19, renamable $x10, 0, 0, debug-location !232 :: (store 4 into %ir.arrayidx24); cg.c:204:23
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=$w9
    SU(3): Ord  Latency=0 Memory
    SU(2): Data Latency=1 Reg=$x10
ExitSU:   B %bb.9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 10
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 10
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDURSWi $fp, -124, debug-location !225 :: (dereferenceable load 4 from %ir.k); cg.c:204:32
  Ready @0c
  TopQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w9 = LDRWui renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !228 :: (dereferenceable load 4 from @firstcol); cg.c:204:37
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x10 = UBFMXri renamable $x8, 62, 61, debug-location !227; cg.c:204:25
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 4 
  TopQ.A RemainingLatency 0 + 5c > CritPath 10
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) renamable $w11 = LDRWroX renamable $x19, renamable $x10, 0, 0, debug-location !227 :: (load 4 from %ir.arrayidx21); cg.c:204:25
  Ready @5c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8, debug-location !233; cg.c:203:49
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 9 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $w9 = SUBWrs renamable $w11, renamable $w9, 0, debug-location !229; cg.c:204:35
  Ready @9c
  TopQ.A TopLatency SU(5) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 6
  Executed: 10c
  Critical: 6c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) STRWroX renamable $w9, renamable $x19, renamable $x10, 0, 0, debug-location !232 :: (store 4 into %ir.arrayidx24); cg.c:204:23
  Ready @10c
  TopQ.A TopLatency SU(6) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 7
  Executed: 11c
  Critical: 7c, 7 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   renamable $x8 = LDURSWi $fp, -124, debug-location !225 :: (dereferenceable load 4 from %ir.k); cg.c:204:32
SU(1):   renamable $w9 = LDRWui renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !228 :: (dereferenceable load 4 from @firstcol); cg.c:204:37
SU(2):   renamable $x10 = UBFMXri renamable $x8, 62, 61, debug-location !227; cg.c:204:25
SU(3):   renamable $w11 = LDRWroX renamable $x19, renamable $x10, 0, 0, debug-location !227 :: (load 4 from %ir.arrayidx21); cg.c:204:25
SU(4):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8, debug-location !233; cg.c:203:49
SU(5):   $w9 = SUBWrs renamable $w11, renamable $w9, 0, debug-location !229; cg.c:204:35
SU(6):   STRWroX renamable $w9, renamable $x19, renamable $x10, 0, 0, debug-location !232 :: (store 4 into %ir.arrayidx24); cg.c:204:23

Fixup kills for %bb.10
********** MI Scheduling **********
main:%bb.11 for.inc28
  From: renamable $w8 = LDURWi $fp, -120, debug-location !237 :: (dereferenceable load 4 from %ir.j); cg.c:202:46
    To: B %bb.7
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -120, debug-location !237 :: (dereferenceable load 4 from %ir.j); cg.c:202:46
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !237; cg.c:202:46
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STURWi renamable $w8, $fp, -120, debug-location !237 :: (store 4 into %ir.j); cg.c:202:46
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.7
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -120, debug-location !237 :: (dereferenceable load 4 from %ir.j); cg.c:202:46
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !237; cg.c:202:46
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w8, $fp, -120, debug-location !237 :: (store 4 into %ir.j); cg.c:202:46
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   renamable $w8 = LDURWi $fp, -120, debug-location !237 :: (dereferenceable load 4 from %ir.j); cg.c:202:46
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !237; cg.c:202:46
SU(2):   STURWi renamable $w8, $fp, -120, debug-location !237 :: (store 4 into %ir.j); cg.c:202:46

Fixup kills for %bb.11
********** MI Scheduling **********
main:%bb.12 for.end30
  From: STURWi $wzr, $fp, -116, debug-location !241 :: (store 4 into %ir.i); cg.c:211:12
    To: End RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   STURWi $wzr, $fp, -116, debug-location !241 :: (store 4 into %ir.i); cg.c:211:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $x19 = ADRP target-flags(aarch64-page) @x
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x19
SU(2):   renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @x, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $x8 = MOVZXi 16368, 48
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $x19 = ADRP target-flags(aarch64-page) @x
  Ready @0c
  TopQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(3) TOP-PATH                  1 cycles 
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @x, 0
  Ready @1c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(3) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) $x8 = MOVZXi 16368, 48
  Ready @2c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURWi $wzr, $fp, -116, debug-location !241 :: (store 4 into %ir.i); cg.c:211:12
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.12 ***
SU(1):   $x19 = ADRP target-flags(aarch64-page) @x
SU(2):   renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @x, 0
SU(3):   $x8 = MOVZXi 16368, 48
SU(0):   STURWi $wzr, $fp, -116, debug-location !241 :: (store 4 into %ir.i); cg.c:211:12

Fixup kills for %bb.12
********** MI Scheduling **********
main:%bb.13 for.cond31
  From: renamable $w9 = LDURWi $fp, -116, debug-location !244 :: (dereferenceable load 4 from %ir.i); cg.c:211:17
    To: Bcc 10, %bb.15, implicit $nzcv, debug-location !247; cg.c:211:5
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w9 = LDURWi $fp, -116, debug-location !244 :: (dereferenceable load 4 from %ir.i); cg.c:211:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w9
SU(1):   renamable $w10 = ADDWri renamable $w23, 1, 0, debug-location !246; cg.c:211:19
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Data Latency=1 Reg=$w10
SU(2):   $wzr = SUBSWrs renamable $w9, renamable $w10, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !247; cg.c:211:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=$w10
    SU(0): Data Latency=4 Reg=$w9
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.15, implicit $nzcv, debug-location !247; cg.c:211:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w9 = LDURWi $fp, -116, debug-location !244 :: (dereferenceable load 4 from %ir.i); cg.c:211:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w10 = ADDWri renamable $w23, 1, 0, debug-location !246; cg.c:211:19
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $wzr = SUBSWrs renamable $w9, renamable $w10, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !247; cg.c:211:5
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   renamable $w9 = LDURWi $fp, -116, debug-location !244 :: (dereferenceable load 4 from %ir.i); cg.c:211:17
SU(1):   renamable $w10 = ADDWri renamable $w23, 1, 0, debug-location !246; cg.c:211:19
SU(2):   $wzr = SUBSWrs renamable $w9, renamable $w10, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !247; cg.c:211:5

Fixup kills for %bb.13
********** MI Scheduling **********
main:%bb.14 for.body33
  From: renamable $x9 = LDURSWi $fp, -116, debug-location !248 :: (dereferenceable load 4 from %ir.i); cg.c:212:11
    To: B %bb.13
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $x9 = LDURSWi $fp, -116, debug-location !248 :: (dereferenceable load 4 from %ir.i); cg.c:212:11
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$w9
    SU(2): Data Latency=0 Reg=$x9
    SU(1): Data Latency=4 Reg=$x9
    SU(3): Ord  Latency=0 Memory
SU(1):   STRXroX renamable $x8, renamable $x19, renamable $x9, 0, 1, debug-location !251 :: (store 8 into %ir.arrayidx35); cg.c:212:14
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$x9
  Successors:
    SU(2): Anti Latency=0
SU(2):   renamable $w9 = nsw ADDWri renamable $w9, 1, 0, implicit $x9, debug-location !252; cg.c:211:30
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w9
    SU(0): Data Latency=0 Reg=$x9
  Successors:
    SU(3): Data Latency=1 Reg=$w9
SU(3):   STURWi renamable $w9, $fp, -116, debug-location !252 :: (store 4 into %ir.i); cg.c:211:30
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=$w9
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.13
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x9 = LDURSWi $fp, -116, debug-location !248 :: (dereferenceable load 4 from %ir.i); cg.c:212:11
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRXroX renamable $x8, renamable $x19, renamable $x9, 0, 1, debug-location !251 :: (store 8 into %ir.arrayidx35); cg.c:212:14
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w9 = nsw ADDWri renamable $w9, 1, 0, implicit $x9, debug-location !252; cg.c:211:30
  Ready @5c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STURWi renamable $w9, $fp, -116, debug-location !252 :: (store 4 into %ir.i); cg.c:211:30
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   renamable $x9 = LDURSWi $fp, -116, debug-location !248 :: (dereferenceable load 4 from %ir.i); cg.c:212:11
SU(1):   STRXroX renamable $x8, renamable $x19, renamable $x9, 0, 1, debug-location !251 :: (store 8 into %ir.arrayidx35); cg.c:212:14
SU(2):   renamable $w9 = nsw ADDWri renamable $w9, 1, 0, implicit $x9, debug-location !252; cg.c:211:30
SU(3):   STURWi renamable $w9, $fp, -116, debug-location !252 :: (store 4 into %ir.i); cg.c:211:30

Fixup kills for %bb.14
********** MI Scheduling **********
main:%bb.15 for.end38
  From: STURWi $wzr, $fp, -120, debug-location !256 :: (store 4 into %ir.j); cg.c:214:12
    To: End RegionInstrs: 9
ScheduleDAGMI::schedule starting
SU(0):   STURWi $wzr, $fp, -120, debug-location !256 :: (store 4 into %ir.j); cg.c:214:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $x8 = ADRP target-flags(aarch64-page) @q
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x8
SU(2):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @q, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $x20 = ADRP target-flags(aarch64-page) @z
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x20
SU(4):   renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @z, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x20
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   $x9 = ADRP target-flags(aarch64-page) @r
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x9
SU(6):   renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @r, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x9
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(7):   $x10 = ADRP target-flags(aarch64-page) @p
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x10
SU(8):   renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @p, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x10
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $x8 = ADRP target-flags(aarch64-page) @q
  Ready @0c
  TopQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 7 3 5 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(7) TOP-PATH                  2 cycles 
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) $x20 = ADRP target-flags(aarch64-page) @z
  Ready @1c
  TopQ.A BotLatency SU(3) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 7 2 5 4 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(7) TOP-PATH                  2 cycles 
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) $x9 = ADRP target-flags(aarch64-page) @r
  Ready @2c
  TopQ.A BotLatency SU(5) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 7 2 4 6 
  TopQ.A RemainingLatency 0 + 3c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(7) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) $x10 = ADRP target-flags(aarch64-page) @p
  Ready @3c
  TopQ.A BotLatency SU(7) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 6 2 4 8 
  TopQ.A RemainingLatency 0 + 4c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  1 cycles 
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @q, 0
  Ready @4c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 6 8 4 
  TopQ.A RemainingLatency 0 + 5c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  1 cycles 
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @z, 0
  Ready @5c
  TopQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 6 8 
  TopQ.A RemainingLatency 0 + 6c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @r, 0
  Ready @6c
  TopQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 8 
  TopQ.A RemainingLatency 0 + 7c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(8) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @p, 0
  Ready @7c
  TopQ.A BotLatency SU(8) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURWi $wzr, $fp, -120, debug-location !256 :: (store 4 into %ir.j); cg.c:214:12
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.15 ***
SU(1):   $x8 = ADRP target-flags(aarch64-page) @q
SU(3):   $x20 = ADRP target-flags(aarch64-page) @z
SU(5):   $x9 = ADRP target-flags(aarch64-page) @r
SU(7):   $x10 = ADRP target-flags(aarch64-page) @p
SU(2):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @q, 0
SU(4):   renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @z, 0
SU(6):   renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @r, 0
SU(8):   renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @p, 0
SU(0):   STURWi $wzr, $fp, -120, debug-location !256 :: (store 4 into %ir.j); cg.c:214:12

Fixup kills for %bb.15
********** MI Scheduling **********
main:%bb.16 for.cond39
  From: renamable $w11 = LDRWui renamable $x28, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !261 :: (dereferenceable load 4 from @lastcol); cg.c:214:21
    To: Bcc 10, %bb.18, implicit $nzcv, debug-location !266; cg.c:214:5
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $w11 = LDRWui renamable $x28, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !261 :: (dereferenceable load 4 from @lastcol); cg.c:214:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w11
SU(1):   renamable $w12 = LDRWui renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !262 :: (dereferenceable load 4 from @firstcol); cg.c:214:31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=$w12
SU(2):   renamable $w13 = LDURWi $fp, -120, debug-location !259 :: (dereferenceable load 4 from %ir.j); cg.c:214:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=$w13
SU(3):   $w11 = SUBWrs renamable $w11, renamable $w12, 0, debug-location !263; cg.c:214:29
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=$w12
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w11
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$w11
SU(4):   renamable $w11 = nsw ADDWri renamable $w11, 1, 0, debug-location !264; cg.c:214:40
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$w11
  Successors:
    SU(5): Data Latency=1 Reg=$w11
SU(5):   $wzr = SUBSWrs renamable $w13, renamable $w11, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !266; cg.c:214:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=$w11
    SU(2): Data Latency=4 Reg=$w13
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.18, implicit $nzcv, debug-location !266; cg.c:214:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 7
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w11 = LDRWui renamable $x28, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !261 :: (dereferenceable load 4 from @lastcol); cg.c:214:21
  Ready @0c
  TopQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 7
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w12 = LDRWui renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !262 :: (dereferenceable load 4 from @firstcol); cg.c:214:31
  Ready @1c
  TopQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w13 = LDURWi $fp, -120, debug-location !259 :: (dereferenceable load 4 from %ir.j); cg.c:214:17
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $w11 = SUBWrs renamable $w11, renamable $w12, 0, debug-location !263; cg.c:214:29
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w11 = nsw ADDWri renamable $w11, 1, 0, debug-location !264; cg.c:214:40
  Ready @6c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $wzr = SUBSWrs renamable $w13, renamable $w11, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !266; cg.c:214:5
  Ready @7c
  TopQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.16 ***
SU(0):   renamable $w11 = LDRWui renamable $x28, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !261 :: (dereferenceable load 4 from @lastcol); cg.c:214:21
SU(1):   renamable $w12 = LDRWui renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !262 :: (dereferenceable load 4 from @firstcol); cg.c:214:31
SU(2):   renamable $w13 = LDURWi $fp, -120, debug-location !259 :: (dereferenceable load 4 from %ir.j); cg.c:214:17
SU(3):   $w11 = SUBWrs renamable $w11, renamable $w12, 0, debug-location !263; cg.c:214:29
SU(4):   renamable $w11 = nsw ADDWri renamable $w11, 1, 0, debug-location !264; cg.c:214:40
SU(5):   $wzr = SUBSWrs renamable $w13, renamable $w11, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !266; cg.c:214:5

Fixup kills for %bb.16
********** MI Scheduling **********
main:%bb.17 for.body43
  From: renamable $x11 = LDURSWi $fp, -120, debug-location !267 :: (dereferenceable load 4 from %ir.j); cg.c:215:11
    To: B %bb.16
 RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   renamable $x11 = LDURSWi $fp, -120, debug-location !267 :: (dereferenceable load 4 from %ir.j); cg.c:215:11
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$w11
    SU(2): Data Latency=0 Reg=$x11
    SU(1): Data Latency=4 Reg=$x11
    SU(7): Ord  Latency=0 Memory
SU(1):   renamable $x12 = UBFMXri renamable $x11, 61, 60, debug-location !278; cg.c:218:9
  # preds left       : 1
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$x11
  Successors:
    SU(6): Data Latency=1 Reg=$x12
    SU(5): Data Latency=1 Reg=$x12
    SU(4): Data Latency=1 Reg=$x12
    SU(3): Data Latency=1 Reg=$x12
    SU(2): Anti Latency=0
SU(2):   renamable $w11 = nsw ADDWri renamable $w11, 1, 0, implicit $x11, debug-location !280; cg.c:214:46
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w11
    SU(0): Data Latency=0 Reg=$x11
  Successors:
    SU(7): Data Latency=1 Reg=$w11
SU(3):   STRXroX $xzr, renamable $x8, renamable $x12, 0, 0, debug-location !270 :: (store 8 into %ir.arrayidx45); cg.c:215:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$x12
SU(4):   STRXroX $xzr, renamable $x20, renamable $x12, 0, 0, debug-location !273 :: (store 8 into %ir.arrayidx47); cg.c:216:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$x12
SU(5):   STRXroX $xzr, renamable $x9, renamable $x12, 0, 0, debug-location !276 :: (store 8 into %ir.arrayidx49); cg.c:217:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$x12
SU(6):   STRXroX $xzr, renamable $x10, renamable $x12, 0, 0, debug-location !279 :: (store 8 into %ir.arrayidx51); cg.c:218:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$x12
SU(7):   STURWi renamable $w11, $fp, -120, debug-location !280 :: (store 4 into %ir.j); cg.c:214:46
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=$w11
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x11 = LDURSWi $fp, -120, debug-location !267 :: (dereferenceable load 4 from %ir.j); cg.c:215:11
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x12 = UBFMXri renamable $x11, 61, 60, debug-location !278; cg.c:218:9
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 5 4 3 2 
  TopQ.A RemainingLatency 0 + 5c > CritPath 5
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $w11 = nsw ADDWri renamable $w11, 1, 0, implicit $x11, debug-location !280; cg.c:214:46
  Ready @5c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 5 4 3 7 
  TopQ.A RemainingLatency 0 + 6c > CritPath 5
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) STRXroX $xzr, renamable $x8, renamable $x12, 0, 0, debug-location !270 :: (store 8 into %ir.arrayidx45); cg.c:215:14
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 5 4 7 
  TopQ.A RemainingLatency 0 + 7c > CritPath 5
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) STRXroX $xzr, renamable $x20, renamable $x12, 0, 0, debug-location !273 :: (store 8 into %ir.arrayidx47); cg.c:216:14
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 5 7 
  TopQ.A RemainingLatency 0 + 8c > CritPath 5
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) STRXroX $xzr, renamable $x9, renamable $x12, 0, 0, debug-location !276 :: (store 8 into %ir.arrayidx49); cg.c:217:14
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 7 
  TopQ.A RemainingLatency 0 + 9c > CritPath 5
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) STRXroX $xzr, renamable $x10, renamable $x12, 0, 0, debug-location !279 :: (store 8 into %ir.arrayidx51); cg.c:218:14
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 7
  Executed: 10c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) STURWi renamable $w11, $fp, -120, debug-location !280 :: (store 4 into %ir.j); cg.c:214:46
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 8
  Executed: 11c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   renamable $x11 = LDURSWi $fp, -120, debug-location !267 :: (dereferenceable load 4 from %ir.j); cg.c:215:11
SU(1):   renamable $x12 = UBFMXri renamable $x11, 61, 60, debug-location !278; cg.c:218:9
SU(2):   renamable $w11 = nsw ADDWri renamable $w11, 1, 0, implicit $x11, debug-location !280; cg.c:214:46
SU(3):   STRXroX $xzr, renamable $x8, renamable $x12, 0, 0, debug-location !270 :: (store 8 into %ir.arrayidx45); cg.c:215:14
SU(4):   STRXroX $xzr, renamable $x20, renamable $x12, 0, 0, debug-location !273 :: (store 8 into %ir.arrayidx47); cg.c:216:14
SU(5):   STRXroX $xzr, renamable $x9, renamable $x12, 0, 0, debug-location !276 :: (store 8 into %ir.arrayidx49); cg.c:217:14
SU(6):   STRXroX $xzr, renamable $x10, renamable $x12, 0, 0, debug-location !279 :: (store 8 into %ir.arrayidx51); cg.c:218:14
SU(7):   STURWi renamable $w11, $fp, -120, debug-location !280 :: (store 4 into %ir.j); cg.c:214:46

Fixup kills for %bb.17
********** MI Scheduling **********
main:%bb.18 for.end54
  From: STURXi $xzr, $fp, -136, debug-location !284 :: (store 8 into %ir.zeta); cg.c:221:10
    To: End RegionInstrs: 16
ScheduleDAGMI::schedule starting
SU(0):   STURXi $xzr, $fp, -136, debug-location !284 :: (store 8 into %ir.zeta); cg.c:221:10
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $w8 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(14): Data Latency=1 Reg=$w8
SU(2):   $x21 = ADRP target-flags(aarch64-page) @colidx
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x21
SU(3):   renamable $x21 = ADDXri $x21, target-flags(aarch64-pageoff, aarch64-nc) @colidx, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x21
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $x22 = ADRP target-flags(aarch64-page) @rowstr
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x22
SU(5):   renamable $x22 = ADDXri $x22, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x22
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(6):   $x23 = ADRP target-flags(aarch64-page) @a
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x23
SU(7):   renamable $x23 = ADDXri $x23, target-flags(aarch64-pageoff, aarch64-nc) @a, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x23
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(8):   $x24 = ADRP target-flags(aarch64-page) @p
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x24
SU(9):   renamable $x24 = ADDXri $x24, target-flags(aarch64-pageoff, aarch64-nc) @p, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x24
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(10):   $x25 = ADRP target-flags(aarch64-page) @q
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x25
SU(11):   renamable $x25 = ADDXri $x25, target-flags(aarch64-pageoff, aarch64-nc) @q, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x25
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(12):   $x26 = ADRP target-flags(aarch64-page) @r
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x26
SU(13):   renamable $x26 = ADDXri $x26, target-flags(aarch64-pageoff, aarch64-nc) @r, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x26
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(14):   STURWi renamable $w8, $fp, -128, debug-location !285 :: (store 4 into %ir.it); cg.c:228:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
SU(15):   renamable $d8 = FMOVDi 112
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 4 6 8 10 12 15 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(2) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x21 = ADRP target-flags(aarch64-page) @colidx
  Ready @0c
  TopQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 15 4 6 8 10 12 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(4) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) $x22 = ADRP target-flags(aarch64-page) @rowstr
  Ready @1c
  TopQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 15 3 6 8 10 12 5 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(6) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) $x23 = ADRP target-flags(aarch64-page) @a
  Ready @2c
  TopQ.A BotLatency SU(6) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 15 3 5 8 10 12 7 
  TopQ.A RemainingLatency 0 + 3c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(8) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) $x24 = ADRP target-flags(aarch64-page) @p
  Ready @3c
  TopQ.A BotLatency SU(8) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 15 3 5 7 10 12 9 
  TopQ.A RemainingLatency 0 + 4c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(10) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(10) $x25 = ADRP target-flags(aarch64-page) @q
  Ready @4c
  TopQ.A BotLatency SU(10) 2c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 15 3 5 7 9 12 11 
  TopQ.A RemainingLatency 0 + 5c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(12) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(12) $x26 = ADRP target-flags(aarch64-page) @r
  Ready @5c
  TopQ.A BotLatency SU(12) 2c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 15 3 5 7 9 11 13 
  TopQ.A RemainingLatency 0 + 6c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $w8 = MOVZWi 1, 0
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 13 15 3 5 7 9 11 14 
  TopQ.A RemainingLatency 0 + 7c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(13) TOP-PATH                  1 cycles 
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) renamable $x21 = ADDXri $x21, target-flags(aarch64-pageoff, aarch64-nc) @colidx, 0
  Ready @7c
  TopQ.A TopLatency SU(3) 1c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 13 15 14 5 7 9 11 
  TopQ.A RemainingLatency 0 + 8c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(13) TOP-PATH                  1 cycles 
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $x22 = ADDXri $x22, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, 0
  Ready @8c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 13 15 14 11 7 9 
  TopQ.A RemainingLatency 0 + 9c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(13) TOP-PATH                  1 cycles 
  Cand SU(11) ORDER                              
  Cand SU(7) ORDER                              
Pick Top ORDER     
Scheduling SU(7) renamable $x23 = ADDXri $x23, target-flags(aarch64-pageoff, aarch64-nc) @a, 0
  Ready @9c
  TopQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 13 15 14 11 9 
  TopQ.A RemainingLatency 0 + 10c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(13) TOP-PATH                  1 cycles 
  Cand SU(11) ORDER                              
  Cand SU(9) ORDER                              
Pick Top ORDER     
Scheduling SU(9) renamable $x24 = ADDXri $x24, target-flags(aarch64-pageoff, aarch64-nc) @p, 0
  Ready @10c
  TopQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 13 15 14 11 
  TopQ.A RemainingLatency 0 + 11c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(13) TOP-PATH                  1 cycles 
  Cand SU(11) ORDER                              
Pick Top ORDER     
Scheduling SU(11) renamable $x25 = ADDXri $x25, target-flags(aarch64-pageoff, aarch64-nc) @q, 0
  Ready @11c
  TopQ.A BotLatency SU(11) 1c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 13 15 14 
  TopQ.A RemainingLatency 0 + 12c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(13) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(13) renamable $x26 = ADDXri $x26, target-flags(aarch64-pageoff, aarch64-nc) @r, 0
  Ready @12c
  TopQ.A BotLatency SU(13) 1c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 14 15 
  TopQ.A RemainingLatency 0 + 13c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(15) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(15) renamable $d8 = FMOVDi 112
  Ready @13c
  TopQ.A BotLatency SU(15) 1c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 14 
  TopQ.A RemainingLatency 0 + 14c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STURXi $xzr, $fp, -136, debug-location !284 :: (store 8 into %ir.zeta); cg.c:221:10
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 14 
Pick Top ONLY1     
Scheduling SU(14) STURWi renamable $w8, $fp, -128, debug-location !285 :: (store 4 into %ir.it); cg.c:228:13
  Ready @15c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.18 ***
SU(2):   $x21 = ADRP target-flags(aarch64-page) @colidx
SU(4):   $x22 = ADRP target-flags(aarch64-page) @rowstr
SU(6):   $x23 = ADRP target-flags(aarch64-page) @a
SU(8):   $x24 = ADRP target-flags(aarch64-page) @p
SU(10):   $x25 = ADRP target-flags(aarch64-page) @q
SU(12):   $x26 = ADRP target-flags(aarch64-page) @r
SU(1):   $w8 = MOVZWi 1, 0
SU(3):   renamable $x21 = ADDXri $x21, target-flags(aarch64-pageoff, aarch64-nc) @colidx, 0
SU(5):   renamable $x22 = ADDXri $x22, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, 0
SU(7):   renamable $x23 = ADDXri $x23, target-flags(aarch64-pageoff, aarch64-nc) @a, 0
SU(9):   renamable $x24 = ADDXri $x24, target-flags(aarch64-pageoff, aarch64-nc) @p, 0
SU(11):   renamable $x25 = ADDXri $x25, target-flags(aarch64-pageoff, aarch64-nc) @q, 0
SU(13):   renamable $x26 = ADDXri $x26, target-flags(aarch64-pageoff, aarch64-nc) @r, 0
SU(15):   renamable $d8 = FMOVDi 112
SU(0):   STURXi $xzr, $fp, -136, debug-location !284 :: (store 8 into %ir.zeta); cg.c:221:10
SU(14):   STURWi renamable $w8, $fp, -128, debug-location !285 :: (store 4 into %ir.it); cg.c:228:13

Fixup kills for %bb.18
********** MI Scheduling **********
main:%bb.19 for.cond55
  From: renamable $w8 = LDURWi $fp, -128, debug-location !288 :: (dereferenceable load 4 from %ir.it); cg.c:228:18
    To: Bcc 12, %bb.29, implicit $nzcv, debug-location !291; cg.c:228:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -128, debug-location !288 :: (dereferenceable load 4 from %ir.it); cg.c:228:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 1, 0, implicit-def $nzcv, debug-location !291; cg.c:228:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.29, implicit $nzcv, debug-location !291; cg.c:228:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -128, debug-location !288 :: (dereferenceable load 4 from %ir.it); cg.c:228:18
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 1, 0, implicit-def $nzcv, debug-location !291; cg.c:228:5
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   renamable $w8 = LDURWi $fp, -128, debug-location !288 :: (dereferenceable load 4 from %ir.it); cg.c:228:18
SU(1):   dead $wzr = SUBSWri renamable $w8, 1, 0, implicit-def $nzcv, debug-location !291; cg.c:228:5

Fixup kills for %bb.19
********** MI Scheduling **********
main:%bb.20 for.body57
  From: STURXi $xzr, $fp, -152, debug-location !294 :: (store 8 into %ir.norm_temp1); cg.c:240:20
    To: End RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   STURXi $xzr, $fp, -152, debug-location !294 :: (store 8 into %ir.norm_temp1); cg.c:240:20
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   STRXui $xzr, $sp, 20, debug-location !295 :: (store 8 into %ir.norm_temp2); cg.c:241:20
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   STURWi $wzr, $fp, -120, debug-location !296 :: (store 4 into %ir.j); cg.c:242:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 0
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STURXi $xzr, $fp, -152, debug-location !294 :: (store 8 into %ir.norm_temp1); cg.c:240:20
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 0
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) STRXui $xzr, $sp, 20, debug-location !295 :: (store 8 into %ir.norm_temp2); cg.c:241:20
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi $wzr, $fp, -120, debug-location !296 :: (store 4 into %ir.j); cg.c:242:16
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   STURXi $xzr, $fp, -152, debug-location !294 :: (store 8 into %ir.norm_temp1); cg.c:240:20
SU(1):   STRXui $xzr, $sp, 20, debug-location !295 :: (store 8 into %ir.norm_temp2); cg.c:241:20
SU(2):   STURWi $wzr, $fp, -120, debug-location !296 :: (store 4 into %ir.j); cg.c:242:16

********** MI Scheduling **********
main:%bb.20 for.body57
  From: $x8 = SUBXri $fp, 144, 0, debug-location !292; cg.c:232:9
    To: BL @conj_grad, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $x3, implicit $x4, implicit $x5, implicit $x6, implicit $x7, implicit-def $sp, debug-location !292; cg.c:232:9
 RegionInstrs: 10
ScheduleDAGMI::schedule starting
SU(0):   $x8 = SUBXri $fp, 144, 0, debug-location !292; cg.c:232:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=$x8
SU(1):   STRXui renamable $x8, $sp, 0, debug-location !292 :: (store 8 into stack); cg.c:232:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
SU(2):   $x0 = ORRXrs $xzr, $x21, 0, debug-location !292; cg.c:232:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $x1 = ORRXrs $xzr, $x22, 0, debug-location !292; cg.c:232:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $x2 = ORRXrs $xzr, $x19, 0, debug-location !292; cg.c:232:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   $x3 = ORRXrs $xzr, $x20, 0, debug-location !292; cg.c:232:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(6):   $x4 = ORRXrs $xzr, $x23, 0, debug-location !292; cg.c:232:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(7):   $x5 = ORRXrs $xzr, $x24, 0, debug-location !292; cg.c:232:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(8):   $x6 = ORRXrs $xzr, $x25, 0, debug-location !292; cg.c:232:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(9):   $x7 = ORRXrs $xzr, $x26, 0, debug-location !292; cg.c:232:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @conj_grad, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $x3, implicit $x4, implicit $x5, implicit $x6, implicit $x7, implicit-def $sp, debug-location !292; cg.c:232:9
  # preds left       : 8
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(9): Ord  Latency=1 Artificial
    SU(8): Ord  Latency=1 Artificial
    SU(7): Ord  Latency=1 Artificial
    SU(6): Ord  Latency=1 Artificial
    SU(5): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 7 8 9 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $x8 = SUBXri $fp, 144, 0, debug-location !292; cg.c:232:9
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 2 3 4 5 6 7 8 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 1
  Cand SU(9) ORDER                              
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) $x0 = ORRXrs $xzr, $x21, 0, debug-location !292; cg.c:232:9
  Ready @1c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 1 3 4 5 6 7 8 
  TopQ.A RemainingLatency 0 + 2c > CritPath 1
  Cand SU(9) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) $x1 = ORRXrs $xzr, $x22, 0, debug-location !292; cg.c:232:9
  Ready @2c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 1 8 4 5 6 7 
  TopQ.A RemainingLatency 0 + 3c > CritPath 1
  Cand SU(9) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) $x2 = ORRXrs $xzr, $x19, 0, debug-location !292; cg.c:232:9
  Ready @3c
  TopQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 1 8 7 5 6 
  TopQ.A RemainingLatency 0 + 4c > CritPath 1
  Cand SU(9) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) $x3 = ORRXrs $xzr, $x20, 0, debug-location !292; cg.c:232:9
  Ready @4c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 1 8 7 6 
  TopQ.A RemainingLatency 0 + 5c > CritPath 1
  Cand SU(9) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) $x4 = ORRXrs $xzr, $x23, 0, debug-location !292; cg.c:232:9
  Ready @5c
  TopQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 1 8 7 
  TopQ.A RemainingLatency 0 + 6c > CritPath 1
  Cand SU(9) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(7) ORDER                              
Pick Top ORDER     
Scheduling SU(7) $x5 = ORRXrs $xzr, $x24, 0, debug-location !292; cg.c:232:9
  Ready @6c
  TopQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 1 8 
  TopQ.A RemainingLatency 0 + 7c > CritPath 1
  Cand SU(9) ORDER                              
  Cand SU(8) ORDER                              
Pick Top ORDER     
Scheduling SU(8) $x6 = ORRXrs $xzr, $x25, 0, debug-location !292; cg.c:232:9
  Ready @7c
  TopQ.A BotLatency SU(8) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 1 
  TopQ.A RemainingLatency 0 + 8c > CritPath 1
  Cand SU(9) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(9) $x7 = ORRXrs $xzr, $x26, 0, debug-location !292; cg.c:232:9
  Ready @8c
  TopQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRXui renamable $x8, $sp, 0, debug-location !292 :: (store 8 into stack); cg.c:232:9
  Ready @9c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   $x8 = SUBXri $fp, 144, 0, debug-location !292; cg.c:232:9
SU(2):   $x0 = ORRXrs $xzr, $x21, 0, debug-location !292; cg.c:232:9
SU(3):   $x1 = ORRXrs $xzr, $x22, 0, debug-location !292; cg.c:232:9
SU(4):   $x2 = ORRXrs $xzr, $x19, 0, debug-location !292; cg.c:232:9
SU(5):   $x3 = ORRXrs $xzr, $x20, 0, debug-location !292; cg.c:232:9
SU(6):   $x4 = ORRXrs $xzr, $x23, 0, debug-location !292; cg.c:232:9
SU(7):   $x5 = ORRXrs $xzr, $x24, 0, debug-location !292; cg.c:232:9
SU(8):   $x6 = ORRXrs $xzr, $x25, 0, debug-location !292; cg.c:232:9
SU(9):   $x7 = ORRXrs $xzr, $x26, 0, debug-location !292; cg.c:232:9
SU(1):   STRXui renamable $x8, $sp, 0, debug-location !292 :: (store 8 into stack); cg.c:232:9

Fixup kills for %bb.20
********** MI Scheduling **********
main:%bb.21 for.cond58
  From: renamable $w8 = LDRWui renamable $x28, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !301 :: (dereferenceable load 4 from @lastcol); cg.c:242:25
    To: Bcc 10, %bb.23, implicit $nzcv, debug-location !306; cg.c:242:9
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui renamable $x28, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !301 :: (dereferenceable load 4 from @lastcol); cg.c:242:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w8
SU(1):   renamable $w9 = LDRWui renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !302 :: (dereferenceable load 4 from @firstcol); cg.c:242:35
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=$w9
SU(2):   renamable $w10 = LDURWi $fp, -120, debug-location !299 :: (dereferenceable load 4 from %ir.j); cg.c:242:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=$w10
SU(3):   $w8 = SUBWrs renamable $w8, renamable $w9, 0, debug-location !303; cg.c:242:33
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=$w9
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$w8
SU(4):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !304; cg.c:242:44
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$w8
  Successors:
    SU(5): Data Latency=1 Reg=$w8
SU(5):   $wzr = SUBSWrs renamable $w10, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !306; cg.c:242:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=$w8
    SU(2): Data Latency=4 Reg=$w10
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.23, implicit $nzcv, debug-location !306; cg.c:242:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 7
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w8 = LDRWui renamable $x28, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !301 :: (dereferenceable load 4 from @lastcol); cg.c:242:25
  Ready @0c
  TopQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 7
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w9 = LDRWui renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !302 :: (dereferenceable load 4 from @firstcol); cg.c:242:35
  Ready @1c
  TopQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w10 = LDURWi $fp, -120, debug-location !299 :: (dereferenceable load 4 from %ir.j); cg.c:242:21
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $w8 = SUBWrs renamable $w8, renamable $w9, 0, debug-location !303; cg.c:242:33
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !304; cg.c:242:44
  Ready @6c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $wzr = SUBSWrs renamable $w10, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !306; cg.c:242:9
  Ready @7c
  TopQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.21 ***
SU(0):   renamable $w8 = LDRWui renamable $x28, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !301 :: (dereferenceable load 4 from @lastcol); cg.c:242:25
SU(1):   renamable $w9 = LDRWui renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !302 :: (dereferenceable load 4 from @firstcol); cg.c:242:35
SU(2):   renamable $w10 = LDURWi $fp, -120, debug-location !299 :: (dereferenceable load 4 from %ir.j); cg.c:242:21
SU(3):   $w8 = SUBWrs renamable $w8, renamable $w9, 0, debug-location !303; cg.c:242:33
SU(4):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !304; cg.c:242:44
SU(5):   $wzr = SUBSWrs renamable $w10, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !306; cg.c:242:9

Fixup kills for %bb.21
********** MI Scheduling **********
main:%bb.22 for.body62
  From: renamable $x8 = LDURSWi $fp, -120, debug-location !309 :: (dereferenceable load 4 from %ir.j); cg.c:243:41
    To: B %bb.21
 RegionInstrs: 14
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURSWi $fp, -120, debug-location !309 :: (dereferenceable load 4 from %ir.j); cg.c:243:41
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$w8
    SU(6): Data Latency=0 Reg=$x8
    SU(1): Data Latency=4 Reg=$x8
    SU(13): Ord  Latency=0 Memory
SU(1):   renamable $x9 = UBFMXri renamable $x8, 61, 60, debug-location !318; cg.c:244:39
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(3): Data Latency=1 Reg=$x9
    SU(2): Data Latency=1 Reg=$x9
    SU(6): Anti Latency=0
SU(2):   renamable $d0 = LDRDroX renamable $x19, renamable $x9, 0, 0, debug-location !310 :: (load 8 from %ir.arrayidx64); cg.c:243:39
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(1): Data Latency=1 Reg=$x9
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$d0
SU(3):   renamable $d1 = LDRDroX renamable $x20, renamable $x9, 0, 0, debug-location !318 :: (load 8 from %ir.arrayidx71); cg.c:244:39
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(1): Data Latency=1 Reg=$x9
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=4 Reg=$d1
    SU(7): Data Latency=4 Reg=$d1
SU(4):   renamable $d2 = LDURDi $fp, -152, debug-location !307 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:243:26
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(9): Data Latency=4 Reg=$d2
    SU(11): Ord  Latency=0 Memory
SU(5):   renamable $d3 = LDRDui $sp, 20, debug-location !316 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:244:26
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(10): Data Latency=4 Reg=$d3
    SU(12): Ord  Latency=0 Memory
SU(6):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8, debug-location !324; cg.c:242:50
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
    SU(0): Data Latency=0 Reg=$x8
  Successors:
    SU(13): Data Latency=1 Reg=$w8
SU(7):   renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !313; cg.c:243:44
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 2
  Predecessors:
    SU(3): Data Latency=4 Reg=$d1
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d0
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$d0
    SU(8): Anti Latency=0
SU(8):   renamable $d1 = FMULDrr renamable $d1, renamable $d1, debug-location !321; cg.c:244:44
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 2
  Predecessors:
    SU(7): Anti Latency=0
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d1
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$d1
SU(9):   renamable $d0 = FADDDrr renamable $d2, renamable $d0, debug-location !314; cg.c:243:37
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$d0
    SU(4): Data Latency=4 Reg=$d2
  Successors:
    SU(11): Data Latency=1 Reg=$d0
SU(10):   renamable $d1 = FADDDrr renamable $d3, renamable $d1, debug-location !322; cg.c:244:37
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$d1
    SU(5): Data Latency=4 Reg=$d3
  Successors:
    SU(12): Data Latency=1 Reg=$d1
SU(11):   STURDi renamable $d0, $fp, -152, debug-location !315 :: (store 8 into %ir.norm_temp1); cg.c:243:24
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=$d0
    SU(4): Ord  Latency=0 Memory
SU(12):   STRDui renamable $d1, $sp, 20, debug-location !323 :: (store 8 into %ir.norm_temp2); cg.c:244:24
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=$d1
    SU(5): Ord  Latency=0 Memory
SU(13):   STURWi renamable $w8, $fp, -120, debug-location !324 :: (store 4 into %ir.j); cg.c:242:50
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.21
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 11
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 4 5 
  TopQ.A RemainingLatency 0 + 0c > CritPath 11
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDURSWi $fp, -120, debug-location !309 :: (dereferenceable load 4 from %ir.j); cg.c:243:41
  Ready @0c
  TopQ.A BotLatency SU(0) 11c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 5 4 
  TopQ.A RemainingLatency 0 + 1c > CritPath 11
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) renamable $d2 = LDURDi $fp, -152, debug-location !307 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:243:26
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $d3 = LDRDui $sp, 20, debug-location !316 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:244:26
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x9 = UBFMXri renamable $x8, 61, 60, debug-location !318; cg.c:244:39
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 2 6 
  TopQ.A RemainingLatency 0 + 5c > CritPath 11
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d0 = LDRDroX renamable $x19, renamable $x9, 0, 0, debug-location !310 :: (load 8 from %ir.arrayidx64); cg.c:243:39
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 6 
  TopQ.A RemainingLatency 0 + 6c > CritPath 11
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d1 = LDRDroX renamable $x20, renamable $x9, 0, 0, debug-location !318 :: (load 8 from %ir.arrayidx71); cg.c:244:39
  Ready @6c
  TopQ.A BotLatency SU(3) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8, debug-location !324; cg.c:242:50
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 13 
Pick Top ONLY1     
Scheduling SU(13) STURWi renamable $w8, $fp, -120, debug-location !324 :: (store 4 into %ir.j); cg.c:242:50
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 8
  Executed: 9c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 10 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !313; cg.c:243:44
  Ready @10c
  TopQ.A TopLatency SU(7) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 9
  Executed: 11c
  Critical: 9c, 9 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 8 
  TopQ.A RemainingLatency 0 + 11c > CritPath 11
  Cand SU(9) ORDER                              
  Cand SU(8) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $d1 = FMULDrr renamable $d1, renamable $d1, debug-location !321; cg.c:244:44
  Ready @11c
  TopQ.A BotLatency SU(8) 2c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 10
  Executed: 12c
  Critical: 10c, 10 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 10 
  TopQ.A RemainingLatency 0 + 12c > CritPath 11
  Cand SU(9) ORDER                              
Pick Top ORDER     
Scheduling SU(9) renamable $d0 = FADDDrr renamable $d2, renamable $d0, debug-location !314; cg.c:243:37
  Ready @12c
  TopQ.A TopLatency SU(9) 10c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 11
  Executed: 13c
  Critical: 11c, 11 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 11 
  TopQ.A RemainingLatency 0 + 13c > CritPath 11
  Cand SU(10) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(10) renamable $d1 = FADDDrr renamable $d3, renamable $d1, debug-location !322; cg.c:244:37
  Ready @13c
  TopQ.A BotLatency SU(10) 1c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 12
  Executed: 14c
  Critical: 12c, 12 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 12 
  TopQ.A RemainingLatency 0 + 14c > CritPath 11
  Cand SU(11) ORDER                              
Pick Top ORDER     
Scheduling SU(11) STURDi renamable $d0, $fp, -152, debug-location !315 :: (store 8 into %ir.norm_temp1); cg.c:243:24
  Ready @14c
  TopQ.A TopLatency SU(11) 11c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 13
  Executed: 15c
  Critical: 13c, 13 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 
Pick Top ONLY1     
Scheduling SU(12) STRDui renamable $d1, $sp, 20, debug-location !323 :: (store 8 into %ir.norm_temp2); cg.c:244:24
  Ready @15c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 14
  Executed: 16c
  Critical: 14c, 14 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.22 ***
SU(0):   renamable $x8 = LDURSWi $fp, -120, debug-location !309 :: (dereferenceable load 4 from %ir.j); cg.c:243:41
SU(4):   renamable $d2 = LDURDi $fp, -152, debug-location !307 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:243:26
SU(5):   renamable $d3 = LDRDui $sp, 20, debug-location !316 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:244:26
SU(1):   renamable $x9 = UBFMXri renamable $x8, 61, 60, debug-location !318; cg.c:244:39
SU(2):   renamable $d0 = LDRDroX renamable $x19, renamable $x9, 0, 0, debug-location !310 :: (load 8 from %ir.arrayidx64); cg.c:243:39
SU(3):   renamable $d1 = LDRDroX renamable $x20, renamable $x9, 0, 0, debug-location !318 :: (load 8 from %ir.arrayidx71); cg.c:244:39
SU(6):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8, debug-location !324; cg.c:242:50
SU(13):   STURWi renamable $w8, $fp, -120, debug-location !324 :: (store 4 into %ir.j); cg.c:242:50
SU(7):   renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !313; cg.c:243:44
SU(8):   renamable $d1 = FMULDrr renamable $d1, renamable $d1, debug-location !321; cg.c:244:44
SU(9):   renamable $d0 = FADDDrr renamable $d2, renamable $d0, debug-location !314; cg.c:243:37
SU(10):   renamable $d1 = FADDDrr renamable $d3, renamable $d1, debug-location !322; cg.c:244:37
SU(11):   STURDi renamable $d0, $fp, -152, debug-location !315 :: (store 8 into %ir.norm_temp1); cg.c:243:24
SU(12):   STRDui renamable $d1, $sp, 20, debug-location !323 :: (store 8 into %ir.norm_temp2); cg.c:244:24

Fixup kills for %bb.22
********** MI Scheduling **********
main:%bb.23 for.end76
  From: renamable $d1 = LDRDui $sp, 20, debug-location !328 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:247:33
    To: Bcc 7, %bb.25, implicit $nzcv, debug-location !330; cg.c:247:26
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $d1 = LDRDui $sp, 20, debug-location !328 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:247:33
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(1): Data Latency=4 Reg=$d1
SU(1):   renamable $d0 = FSQRTDr renamable $d1, debug-location !329; cg.c:247:28
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(0): Data Latency=4 Reg=$d1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(2): Data Latency=1 Reg=$d0
SU(2):   FCMPDrr renamable $d0, renamable $d0, implicit-def $nzcv, debug-location !330; cg.c:247:26
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=$d0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 7, %bb.25, implicit $nzcv, debug-location !330; cg.c:247:26
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $d1 = LDRDui $sp, 20, debug-location !328 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:247:33
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $d0 = FSQRTDr renamable $d1, debug-location !329; cg.c:247:28
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) FCMPDrr renamable $d0, renamable $d0, implicit-def $nzcv, debug-location !330; cg.c:247:26
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.23 ***
SU(0):   renamable $d1 = LDRDui $sp, 20, debug-location !328 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:247:33
SU(1):   renamable $d0 = FSQRTDr renamable $d1, debug-location !329; cg.c:247:28
SU(2):   FCMPDrr renamable $d0, renamable $d0, implicit-def $nzcv, debug-location !330; cg.c:247:26

Fixup kills for %bb.23
Fixup kills for %bb.24
********** MI Scheduling **********
main:%bb.25 for.end76.split
  From: renamable $d0 = FDIVDrr renamable $d8, killed renamable $d0, debug-location !330; cg.c:247:26
    To: End RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = FDIVDrr renamable $d8, renamable $d0, debug-location !330; cg.c:247:26
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=$d0
SU(1):   STRDui renamable $d0, $sp, 20, debug-location !331 :: (store 8 into %ir.norm_temp2); cg.c:247:20
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$d0
SU(2):   STURWi $wzr, $fp, -120, debug-location !332 :: (store 4 into %ir.j); cg.c:252:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0 = FDIVDrr renamable $d8, renamable $d0, debug-location !330; cg.c:247:26
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 1
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) STRDui renamable $d0, $sp, 20, debug-location !331 :: (store 8 into %ir.norm_temp2); cg.c:247:20
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi $wzr, $fp, -120, debug-location !332 :: (store 4 into %ir.j); cg.c:252:16
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   renamable $d0 = FDIVDrr renamable $d8, renamable $d0, debug-location !330; cg.c:247:26
SU(1):   STRDui renamable $d0, $sp, 20, debug-location !331 :: (store 8 into %ir.norm_temp2); cg.c:247:20
SU(2):   STURWi $wzr, $fp, -120, debug-location !332 :: (store 4 into %ir.j); cg.c:252:16

Fixup kills for %bb.25
********** MI Scheduling **********
main:%bb.26 for.cond78
  From: renamable $w8 = LDRWui renamable $x28, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !337 :: (dereferenceable load 4 from @lastcol); cg.c:252:25
    To: Bcc 10, %bb.28, implicit $nzcv, debug-location !342; cg.c:252:9
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui renamable $x28, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !337 :: (dereferenceable load 4 from @lastcol); cg.c:252:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w8
SU(1):   renamable $w9 = LDRWui renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !338 :: (dereferenceable load 4 from @firstcol); cg.c:252:35
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=$w9
SU(2):   renamable $w10 = LDURWi $fp, -120, debug-location !335 :: (dereferenceable load 4 from %ir.j); cg.c:252:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=$w10
SU(3):   $w8 = SUBWrs renamable $w8, renamable $w9, 0, debug-location !339; cg.c:252:33
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=$w9
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$w8
SU(4):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !340; cg.c:252:44
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$w8
  Successors:
    SU(5): Data Latency=1 Reg=$w8
SU(5):   $wzr = SUBSWrs renamable $w10, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !342; cg.c:252:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=$w8
    SU(2): Data Latency=4 Reg=$w10
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.28, implicit $nzcv, debug-location !342; cg.c:252:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 7
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w8 = LDRWui renamable $x28, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !337 :: (dereferenceable load 4 from @lastcol); cg.c:252:25
  Ready @0c
  TopQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 7
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w9 = LDRWui renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !338 :: (dereferenceable load 4 from @firstcol); cg.c:252:35
  Ready @1c
  TopQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w10 = LDURWi $fp, -120, debug-location !335 :: (dereferenceable load 4 from %ir.j); cg.c:252:21
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $w8 = SUBWrs renamable $w8, renamable $w9, 0, debug-location !339; cg.c:252:33
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !340; cg.c:252:44
  Ready @6c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $wzr = SUBSWrs renamable $w10, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !342; cg.c:252:9
  Ready @7c
  TopQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.26 ***
SU(0):   renamable $w8 = LDRWui renamable $x28, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !337 :: (dereferenceable load 4 from @lastcol); cg.c:252:25
SU(1):   renamable $w9 = LDRWui renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !338 :: (dereferenceable load 4 from @firstcol); cg.c:252:35
SU(2):   renamable $w10 = LDURWi $fp, -120, debug-location !335 :: (dereferenceable load 4 from %ir.j); cg.c:252:21
SU(3):   $w8 = SUBWrs renamable $w8, renamable $w9, 0, debug-location !339; cg.c:252:33
SU(4):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !340; cg.c:252:44
SU(5):   $wzr = SUBSWrs renamable $w10, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !342; cg.c:252:9

Fixup kills for %bb.26
********** MI Scheduling **********
main:%bb.27 for.body82
  From: renamable $x8 = LDURSWi $fp, -120, debug-location !345 :: (dereferenceable load 4 from %ir.j); cg.c:253:35
    To: B %bb.26
 RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURSWi $fp, -120, debug-location !345 :: (dereferenceable load 4 from %ir.j); cg.c:253:35
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$w8
    SU(4): Data Latency=0 Reg=$x8
    SU(2): Data Latency=4 Reg=$x8
    SU(7): Ord  Latency=0 Memory
SU(1):   renamable $d0 = LDRDui $sp, 20, debug-location !343 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:253:20
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$d0
SU(2):   renamable $x9 = UBFMXri renamable $x8, 61, 60, debug-location !346; cg.c:253:33
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(6): Data Latency=1 Reg=$x9
    SU(3): Data Latency=1 Reg=$x9
    SU(4): Anti Latency=0
SU(3):   renamable $d1 = LDRDroX renamable $x20, renamable $x9, 0, 0, debug-location !346 :: (load 8 from %ir.arrayidx84); cg.c:253:33
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(2): Data Latency=1 Reg=$x9
  Successors:
    SU(5): Data Latency=4 Reg=$d1
SU(4):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8, debug-location !351; cg.c:252:50
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
    SU(0): Data Latency=0 Reg=$x8
  Successors:
    SU(7): Data Latency=1 Reg=$w8
SU(5):   renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !347; cg.c:253:31
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=$d1
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$d0
  Successors:
    SU(6): Data Latency=1 Reg=$d0
SU(6):   STRDroX renamable $d0, renamable $x19, renamable $x9, 0, 0, debug-location !350 :: (store 8 into %ir.arrayidx87); cg.c:253:18
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=$d0
    SU(2): Data Latency=1 Reg=$x9
SU(7):   STURWi renamable $w8, $fp, -120, debug-location !351 :: (store 4 into %ir.j); cg.c:252:50
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.26
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 10
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 10
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDURSWi $fp, -120, debug-location !345 :: (dereferenceable load 4 from %ir.j); cg.c:253:35
  Ready @0c
  TopQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $d0 = LDRDui $sp, 20, debug-location !343 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:253:20
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x9 = UBFMXri renamable $x8, 61, 60, debug-location !346; cg.c:253:33
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 4 
  TopQ.A RemainingLatency 0 + 5c > CritPath 10
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d1 = LDRDroX renamable $x20, renamable $x9, 0, 0, debug-location !346 :: (load 8 from %ir.arrayidx84); cg.c:253:33
  Ready @5c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8, debug-location !351; cg.c:252:50
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) STURWi renamable $w8, $fp, -120, debug-location !351 :: (store 4 into %ir.j); cg.c:252:50
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 9 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !347; cg.c:253:31
  Ready @9c
  TopQ.A TopLatency SU(5) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 7
  Executed: 10c
  Critical: 7c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) STRDroX renamable $d0, renamable $x19, renamable $x9, 0, 0, debug-location !350 :: (store 8 into %ir.arrayidx87); cg.c:253:18
  Ready @10c
  TopQ.A TopLatency SU(6) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 8
  Executed: 11c
  Critical: 8c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   renamable $x8 = LDURSWi $fp, -120, debug-location !345 :: (dereferenceable load 4 from %ir.j); cg.c:253:35
SU(1):   renamable $d0 = LDRDui $sp, 20, debug-location !343 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:253:20
SU(2):   renamable $x9 = UBFMXri renamable $x8, 61, 60, debug-location !346; cg.c:253:33
SU(3):   renamable $d1 = LDRDroX renamable $x20, renamable $x9, 0, 0, debug-location !346 :: (load 8 from %ir.arrayidx84); cg.c:253:33
SU(4):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8, debug-location !351; cg.c:252:50
SU(7):   STURWi renamable $w8, $fp, -120, debug-location !351 :: (store 4 into %ir.j); cg.c:252:50
SU(5):   renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !347; cg.c:253:31
SU(6):   STRDroX renamable $d0, renamable $x19, renamable $x9, 0, 0, debug-location !350 :: (store 8 into %ir.arrayidx87); cg.c:253:18

Fixup kills for %bb.27
********** MI Scheduling **********
main:%bb.28 for.inc91
  From: renamable $w8 = LDURWi $fp, -128, debug-location !355 :: (dereferenceable load 4 from %ir.it); cg.c:228:29
    To: B %bb.19
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -128, debug-location !355 :: (dereferenceable load 4 from %ir.it); cg.c:228:29
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !355; cg.c:228:29
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STURWi renamable $w8, $fp, -128, debug-location !355 :: (store 4 into %ir.it); cg.c:228:29
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.19
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -128, debug-location !355 :: (dereferenceable load 4 from %ir.it); cg.c:228:29
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !355; cg.c:228:29
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w8, $fp, -128, debug-location !355 :: (store 4 into %ir.it); cg.c:228:29
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.28 ***
SU(0):   renamable $w8 = LDURWi $fp, -128, debug-location !355 :: (dereferenceable load 4 from %ir.it); cg.c:228:29
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !355; cg.c:228:29
SU(2):   STURWi renamable $w8, $fp, -128, debug-location !355 :: (store 4 into %ir.it); cg.c:228:29

Fixup kills for %bb.28
********** MI Scheduling **********
main:%bb.29 for.end93
  From: STURWi $wzr, $fp, -116, debug-location !359 :: (store 4 into %ir.i); cg.c:260:12
    To: End RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   STURWi $wzr, $fp, -116, debug-location !359 :: (store 4 into %ir.i); cg.c:260:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $x8 = MOVZXi 16368, 48
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $w11 = MOVZWi 9464, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$w11
SU(3):   $w11 = MOVKWi $w11(tied-def 0), 1, 16
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$w11
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(2) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $w11 = MOVZWi 9464, 0
  Ready @0c
  TopQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $x8 = MOVZXi 16368, 48
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(3) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) $w11 = MOVKWi $w11(tied-def 0), 1, 16
  Ready @2c
  TopQ.A TopLatency SU(3) 1c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURWi $wzr, $fp, -116, debug-location !359 :: (store 4 into %ir.i); cg.c:260:12
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.29 ***
SU(2):   $w11 = MOVZWi 9464, 0
SU(1):   $x8 = MOVZXi 16368, 48
SU(3):   $w11 = MOVKWi $w11(tied-def 0), 1, 16
SU(0):   STURWi $wzr, $fp, -116, debug-location !359 :: (store 4 into %ir.i); cg.c:260:12

Fixup kills for %bb.29
********** MI Scheduling **********
main:%bb.30 for.cond94
  From: renamable $w9 = LDURWi $fp, -116, debug-location !362 :: (dereferenceable load 4 from %ir.i); cg.c:260:17
    To: Bcc 10, %bb.32, implicit $nzcv, debug-location !365; cg.c:260:5
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w9 = LDURWi $fp, -116, debug-location !362 :: (dereferenceable load 4 from %ir.i); cg.c:260:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w9
SU(1):   renamable $w10 = ADDWri renamable $w11, 1, 0, debug-location !364; cg.c:260:19
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Data Latency=1 Reg=$w10
SU(2):   $wzr = SUBSWrs renamable $w9, renamable $w10, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !365; cg.c:260:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=$w10
    SU(0): Data Latency=4 Reg=$w9
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.32, implicit $nzcv, debug-location !365; cg.c:260:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w9 = LDURWi $fp, -116, debug-location !362 :: (dereferenceable load 4 from %ir.i); cg.c:260:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w10 = ADDWri renamable $w11, 1, 0, debug-location !364; cg.c:260:19
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $wzr = SUBSWrs renamable $w9, renamable $w10, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !365; cg.c:260:5
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.30 ***
SU(0):   renamable $w9 = LDURWi $fp, -116, debug-location !362 :: (dereferenceable load 4 from %ir.i); cg.c:260:17
SU(1):   renamable $w10 = ADDWri renamable $w11, 1, 0, debug-location !364; cg.c:260:19
SU(2):   $wzr = SUBSWrs renamable $w9, renamable $w10, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !365; cg.c:260:5

Fixup kills for %bb.30
********** MI Scheduling **********
main:%bb.31 for.body96
  From: renamable $x9 = LDURSWi $fp, -116, debug-location !366 :: (dereferenceable load 4 from %ir.i); cg.c:261:11
    To: B %bb.30
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $x9 = LDURSWi $fp, -116, debug-location !366 :: (dereferenceable load 4 from %ir.i); cg.c:261:11
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$w9
    SU(2): Data Latency=0 Reg=$x9
    SU(1): Data Latency=4 Reg=$x9
    SU(3): Ord  Latency=0 Memory
SU(1):   STRXroX renamable $x8, renamable $x19, renamable $x9, 0, 1, debug-location !369 :: (store 8 into %ir.arrayidx98); cg.c:261:14
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$x9
  Successors:
    SU(2): Anti Latency=0
SU(2):   renamable $w9 = nsw ADDWri renamable $w9, 1, 0, implicit $x9, debug-location !370; cg.c:260:30
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w9
    SU(0): Data Latency=0 Reg=$x9
  Successors:
    SU(3): Data Latency=1 Reg=$w9
SU(3):   STURWi renamable $w9, $fp, -116, debug-location !370 :: (store 4 into %ir.i); cg.c:260:30
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=$w9
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.30
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x9 = LDURSWi $fp, -116, debug-location !366 :: (dereferenceable load 4 from %ir.i); cg.c:261:11
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRXroX renamable $x8, renamable $x19, renamable $x9, 0, 1, debug-location !369 :: (store 8 into %ir.arrayidx98); cg.c:261:14
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w9 = nsw ADDWri renamable $w9, 1, 0, implicit $x9, debug-location !370; cg.c:260:30
  Ready @5c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STURWi renamable $w9, $fp, -116, debug-location !370 :: (store 4 into %ir.i); cg.c:260:30
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.31 ***
SU(0):   renamable $x9 = LDURSWi $fp, -116, debug-location !366 :: (dereferenceable load 4 from %ir.i); cg.c:261:11
SU(1):   STRXroX renamable $x8, renamable $x19, renamable $x9, 0, 1, debug-location !369 :: (store 8 into %ir.arrayidx98); cg.c:261:14
SU(2):   renamable $w9 = nsw ADDWri renamable $w9, 1, 0, implicit $x9, debug-location !370; cg.c:260:30
SU(3):   STURWi renamable $w9, $fp, -116, debug-location !370 :: (store 4 into %ir.i); cg.c:260:30

Fixup kills for %bb.31
********** MI Scheduling **********
main:%bb.32 for.end101
  From: STURWi killed renamable $w21, $fp, -128, debug-location !379 :: (store 4 into %ir.it); cg.c:279:13
    To: End RegionInstrs: 12
ScheduleDAGMI::schedule starting
SU(0):   STURWi renamable $w21, $fp, -128, debug-location !379 :: (store 4 into %ir.it); cg.c:279:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(10): Anti Latency=0
SU(1):   $x23 = ADRP target-flags(aarch64-page) @a
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x23
SU(2):   renamable $x23 = ADDXri $x23, target-flags(aarch64-pageoff, aarch64-nc) @a, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x23
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $x24 = ADRP target-flags(aarch64-page) @p
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x24
SU(4):   renamable $x24 = ADDXri $x24, target-flags(aarch64-pageoff, aarch64-nc) @p, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x24
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   $x25 = ADRP target-flags(aarch64-page) @q
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x25
SU(6):   renamable $x25 = ADDXri $x25, target-flags(aarch64-pageoff, aarch64-nc) @q, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x25
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(7):   $x26 = ADRP target-flags(aarch64-page) @r
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x26
SU(8):   renamable $x26 = ADDXri $x26, target-flags(aarch64-pageoff, aarch64-nc) @r, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x26
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(9):   $x22 = MOVZXi 16462, 48
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(10):   $x21 = ADRP target-flags(aarch64-page) @.str.11
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Predecessors:
    SU(0): Anti Latency=0
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x21
SU(11):   renamable $x21 = ADDXri $x21, target-flags(aarch64-pageoff, aarch64-nc) @.str.11, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x21
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) STURWi renamable $w21, $fp, -128, debug-location !379 :: (store 4 into %ir.it); cg.c:279:13
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 1 3 5 7 10 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(9) ORDER                              
  Cand SU(1) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $x23 = ADRP target-flags(aarch64-page) @a
  Ready @1c
  TopQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 10 3 5 7 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(9) ORDER                              
  Cand SU(10) TOP-PATH                  2 cycles 
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) $x24 = ADRP target-flags(aarch64-page) @p
  Ready @2c
  TopQ.A BotLatency SU(3) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 10 2 5 7 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 2
  Cand SU(9) ORDER                              
  Cand SU(10) TOP-PATH                  2 cycles 
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) $x25 = ADRP target-flags(aarch64-page) @q
  Ready @3c
  TopQ.A BotLatency SU(5) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 10 2 4 7 6 
  TopQ.A RemainingLatency 0 + 4c > CritPath 2
  Cand SU(9) ORDER                              
  Cand SU(10) TOP-PATH                  2 cycles 
  Cand SU(7) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(7) $x26 = ADRP target-flags(aarch64-page) @r
  Ready @4c
  TopQ.A BotLatency SU(7) 2c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 10 2 4 6 8 
  TopQ.A RemainingLatency 0 + 5c > CritPath 2
  Cand SU(9) ORDER                              
  Cand SU(10) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(10) $x21 = ADRP target-flags(aarch64-page) @.str.11
  Ready @5c
  TopQ.A BotLatency SU(10) 2c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 8 2 4 6 11 
  TopQ.A RemainingLatency 0 + 6c > CritPath 2
  Cand SU(9) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) renamable $x23 = ADDXri $x23, target-flags(aarch64-pageoff, aarch64-nc) @a, 0
  Ready @6c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 8 11 4 6 
  TopQ.A RemainingLatency 0 + 7c > CritPath 2
  Cand SU(9) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) renamable $x24 = ADDXri $x24, target-flags(aarch64-pageoff, aarch64-nc) @p, 0
  Ready @7c
  TopQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 8 11 6 
  TopQ.A RemainingLatency 0 + 8c > CritPath 2
  Cand SU(9) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) renamable $x25 = ADDXri $x25, target-flags(aarch64-pageoff, aarch64-nc) @q, 0
  Ready @8c
  TopQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 8 11 
  TopQ.A RemainingLatency 0 + 9c > CritPath 2
  Cand SU(9) ORDER                              
  Cand SU(8) ORDER                              
Pick Top ORDER     
Scheduling SU(8) renamable $x26 = ADDXri $x26, target-flags(aarch64-pageoff, aarch64-nc) @r, 0
  Ready @9c
  TopQ.A BotLatency SU(8) 1c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 11 
  TopQ.A RemainingLatency 0 + 10c > CritPath 2
  Cand SU(9) ORDER                              
Pick Top ORDER     
Scheduling SU(9) $x22 = MOVZXi 16462, 48
  Ready @10c
  TopQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 
Pick Top ONLY1     
Scheduling SU(11) renamable $x21 = ADDXri $x21, target-flags(aarch64-pageoff, aarch64-nc) @.str.11, 0
  Ready @11c
  TopQ.A BotLatency SU(11) 1c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   STURWi renamable $w21, $fp, -128, debug-location !379 :: (store 4 into %ir.it); cg.c:279:13
SU(1):   $x23 = ADRP target-flags(aarch64-page) @a
SU(3):   $x24 = ADRP target-flags(aarch64-page) @p
SU(5):   $x25 = ADRP target-flags(aarch64-page) @q
SU(7):   $x26 = ADRP target-flags(aarch64-page) @r
SU(10):   $x21 = ADRP target-flags(aarch64-page) @.str.11
SU(2):   renamable $x23 = ADDXri $x23, target-flags(aarch64-pageoff, aarch64-nc) @a, 0
SU(4):   renamable $x24 = ADDXri $x24, target-flags(aarch64-pageoff, aarch64-nc) @p, 0
SU(6):   renamable $x25 = ADDXri $x25, target-flags(aarch64-pageoff, aarch64-nc) @q, 0
SU(8):   renamable $x26 = ADDXri $x26, target-flags(aarch64-pageoff, aarch64-nc) @r, 0
SU(9):   $x22 = MOVZXi 16462, 48
SU(11):   renamable $x21 = ADDXri $x21, target-flags(aarch64-pageoff, aarch64-nc) @.str.11, 0

********** MI Scheduling **********
main:%bb.32 for.end101
  From: $w0 = MOVZWi 1, 0, debug-location !378; cg.c:270:5
    To: BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !378; cg.c:270:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $w0 = MOVZWi 1, 0, debug-location !378; cg.c:270:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(1):   $w21 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
ExitSU:   BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !378; cg.c:270:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $w0 = MOVZWi 1, 0, debug-location !378; cg.c:270:5
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w21 = MOVZWi 1, 0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   $w0 = MOVZWi 1, 0, debug-location !378; cg.c:270:5
SU(1):   $w21 = MOVZWi 1, 0

********** MI Scheduling **********
main:%bb.32 for.end101
  From: $x0 = ADRP target-flags(aarch64-page) @.str.9, debug-location !377; cg.c:268:5
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !377; cg.c:268:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.9, debug-location !377; cg.c:268:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.9, 0, debug-location !377; cg.c:268:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !377; cg.c:268:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @.str.9, debug-location !377; cg.c:268:5
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.9, 0, debug-location !377; cg.c:268:5
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.9, debug-location !377; cg.c:268:5
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.9, 0, debug-location !377; cg.c:268:5

********** MI Scheduling **********
main:%bb.32 for.end101
  From: STURXi $xzr, $fp, -136, debug-location !374 :: (store 8 into %ir.zeta); cg.c:264:10
    To: BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !375; cg.c:266:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   STURXi $xzr, $fp, -136, debug-location !374 :: (store 8 into %ir.zeta); cg.c:264:10
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $w0 = ORRWrs $wzr, $wzr, 0, debug-location !375; cg.c:266:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !375; cg.c:266:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $w0 = ORRWrs $wzr, $wzr, 0, debug-location !375; cg.c:266:5
  Ready @0c
  TopQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURXi $xzr, $fp, -136, debug-location !374 :: (store 8 into %ir.zeta); cg.c:264:10
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.32 ***
SU(1):   $w0 = ORRWrs $wzr, $wzr, 0, debug-location !375; cg.c:266:5
SU(0):   STURXi $xzr, $fp, -136, debug-location !374 :: (store 8 into %ir.zeta); cg.c:264:10

Fixup kills for %bb.32
********** MI Scheduling **********
main:%bb.33 for.cond108
  From: renamable $w8 = LDURWi $fp, -128, debug-location !382 :: (dereferenceable load 4 from %ir.it); cg.c:279:18
    To: Bcc 12, %bb.49, implicit $nzcv, debug-location !385; cg.c:279:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -128, debug-location !382 :: (dereferenceable load 4 from %ir.it); cg.c:279:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 75, 0, implicit-def $nzcv, debug-location !385; cg.c:279:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.49, implicit $nzcv, debug-location !385; cg.c:279:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -128, debug-location !382 :: (dereferenceable load 4 from %ir.it); cg.c:279:18
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 75, 0, implicit-def $nzcv, debug-location !385; cg.c:279:5
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.33 ***
SU(0):   renamable $w8 = LDURWi $fp, -128, debug-location !382 :: (dereferenceable load 4 from %ir.it); cg.c:279:18
SU(1):   dead $wzr = SUBSWri renamable $w8, 75, 0, implicit-def $nzcv, debug-location !385; cg.c:279:5

Fixup kills for %bb.33
********** MI Scheduling **********
main:%bb.34 for.body110
  From: renamable $x8 = ADRP target-flags(aarch64-page) @timeron, debug-location !386; cg.c:284:13
    To: CBZW killed renamable $w8, %bb.36, debug-location !389; cg.c:284:13
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron, debug-location !386; cg.c:284:13
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !386 :: (dereferenceable load 4 from @timeron); cg.c:284:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
ExitSU:   CBZW killed renamable $w8, %bb.36, debug-location !389; cg.c:284:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @timeron, debug-location !386; cg.c:284:13
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !386 :: (dereferenceable load 4 from @timeron); cg.c:284:13
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.34 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron, debug-location !386; cg.c:284:13
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !386 :: (dereferenceable load 4 from @timeron); cg.c:284:13

Fixup kills for %bb.34
Fixup kills for %bb.35
********** MI Scheduling **********
main:%bb.36 if.end112
  From: renamable $x8 = ADRP target-flags(aarch64-page) @timeron, debug-location !392; cg.c:287:13
    To: CBZW killed renamable $w8, %bb.38, debug-location !394; cg.c:287:13
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron, debug-location !392; cg.c:287:13
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !392 :: (dereferenceable load 4 from @timeron); cg.c:287:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
ExitSU:   CBZW killed renamable $w8, %bb.38, debug-location !394; cg.c:287:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @timeron, debug-location !392; cg.c:287:13
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !392 :: (dereferenceable load 4 from @timeron); cg.c:287:13
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.36 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron, debug-location !392; cg.c:287:13
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !392 :: (dereferenceable load 4 from @timeron); cg.c:287:13

********** MI Scheduling **********
main:%bb.36 if.end112
  From: $x8 = SUBXri $fp, 144, 0, debug-location !391; cg.c:286:9
    To: BL @conj_grad, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $x3, implicit $x4, implicit $x5, implicit $x6, implicit $x7, implicit-def $sp, debug-location !391; cg.c:286:9
 RegionInstrs: 12
ScheduleDAGMI::schedule starting
SU(0):   $x8 = SUBXri $fp, 144, 0, debug-location !391; cg.c:286:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=$x8
SU(1):   STRXui renamable $x8, $sp, 0, debug-location !391 :: (store 8 into stack); cg.c:286:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
SU(2):   $x0 = ADRP target-flags(aarch64-page) @colidx, debug-location !391; cg.c:286:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x0
SU(3):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @colidx, 0, debug-location !391; cg.c:286:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $x1 = ADRP target-flags(aarch64-page) @rowstr, debug-location !391; cg.c:286:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x1
SU(5):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, 0, debug-location !391; cg.c:286:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(6):   $x2 = ORRXrs $xzr, $x19, 0, debug-location !391; cg.c:286:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(7):   $x3 = ORRXrs $xzr, $x20, 0, debug-location !391; cg.c:286:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(8):   $x4 = ORRXrs $xzr, $x23, 0, debug-location !391; cg.c:286:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(9):   $x5 = ORRXrs $xzr, $x24, 0, debug-location !391; cg.c:286:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(10):   $x6 = ORRXrs $xzr, $x25, 0, debug-location !391; cg.c:286:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(11):   $x7 = ORRXrs $xzr, $x26, 0, debug-location !391; cg.c:286:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @conj_grad, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $x3, implicit $x4, implicit $x5, implicit $x6, implicit $x7, implicit-def $sp, debug-location !391; cg.c:286:9
  # preds left       : 8
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(11): Ord  Latency=1 Artificial
    SU(10): Ord  Latency=1 Artificial
    SU(9): Ord  Latency=1 Artificial
    SU(8): Ord  Latency=1 Artificial
    SU(7): Ord  Latency=1 Artificial
    SU(6): Ord  Latency=1 Artificial
    SU(5): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 7 8 9 10 11 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x0 = ADRP target-flags(aarch64-page) @colidx, debug-location !391; cg.c:286:9
  Ready @0c
  TopQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 11 4 6 7 8 9 10 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(4) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) $x1 = ADRP target-flags(aarch64-page) @rowstr, debug-location !391; cg.c:286:9
  Ready @1c
  TopQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 11 3 6 7 8 9 10 5 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $x8 = SUBXri $fp, 144, 0, debug-location !391; cg.c:286:9
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 11 3 6 7 8 9 10 1 
  TopQ.A RemainingLatency 0 + 3c > CritPath 2
  Cand SU(5) ORDER                              
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @colidx, 0, debug-location !391; cg.c:286:9
  Ready @3c
  TopQ.A TopLatency SU(3) 1c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 11 1 6 7 8 9 10 
  TopQ.A RemainingLatency 0 + 4c > CritPath 2
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, 0, debug-location !391; cg.c:286:9
  Ready @4c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 11 1 6 7 8 9 
  TopQ.A RemainingLatency 0 + 5c > CritPath 2
  Cand SU(10) ORDER                              
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) $x2 = ORRXrs $xzr, $x19, 0, debug-location !391; cg.c:286:9
  Ready @5c
  TopQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 11 1 9 7 8 
  TopQ.A RemainingLatency 0 + 6c > CritPath 2
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(7) ORDER                              
Pick Top ORDER     
Scheduling SU(7) $x3 = ORRXrs $xzr, $x20, 0, debug-location !391; cg.c:286:9
  Ready @6c
  TopQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 11 1 9 8 
  TopQ.A RemainingLatency 0 + 7c > CritPath 2
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(8) ORDER                              
Pick Top ORDER     
Scheduling SU(8) $x4 = ORRXrs $xzr, $x23, 0, debug-location !391; cg.c:286:9
  Ready @7c
  TopQ.A BotLatency SU(8) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 11 1 9 
  TopQ.A RemainingLatency 0 + 8c > CritPath 2
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
Pick Top ORDER     
Scheduling SU(9) $x5 = ORRXrs $xzr, $x24, 0, debug-location !391; cg.c:286:9
  Ready @8c
  TopQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 11 1 
  TopQ.A RemainingLatency 0 + 9c > CritPath 2
  Cand SU(10) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(10) $x6 = ORRXrs $xzr, $x25, 0, debug-location !391; cg.c:286:9
  Ready @9c
  TopQ.A BotLatency SU(10) 1c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 11 
  TopQ.A RemainingLatency 0 + 10c > CritPath 2
  Cand SU(1) ORDER                              
  Cand SU(11) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(11) $x7 = ORRXrs $xzr, $x26, 0, debug-location !391; cg.c:286:9
  Ready @10c
  TopQ.A BotLatency SU(11) 1c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRXui renamable $x8, $sp, 0, debug-location !391 :: (store 8 into stack); cg.c:286:9
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.36 ***
SU(2):   $x0 = ADRP target-flags(aarch64-page) @colidx, debug-location !391; cg.c:286:9
SU(4):   $x1 = ADRP target-flags(aarch64-page) @rowstr, debug-location !391; cg.c:286:9
SU(0):   $x8 = SUBXri $fp, 144, 0, debug-location !391; cg.c:286:9
SU(3):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @colidx, 0, debug-location !391; cg.c:286:9
SU(5):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, 0, debug-location !391; cg.c:286:9
SU(6):   $x2 = ORRXrs $xzr, $x19, 0, debug-location !391; cg.c:286:9
SU(7):   $x3 = ORRXrs $xzr, $x20, 0, debug-location !391; cg.c:286:9
SU(8):   $x4 = ORRXrs $xzr, $x23, 0, debug-location !391; cg.c:286:9
SU(9):   $x5 = ORRXrs $xzr, $x24, 0, debug-location !391; cg.c:286:9
SU(10):   $x6 = ORRXrs $xzr, $x25, 0, debug-location !391; cg.c:286:9
SU(11):   $x7 = ORRXrs $xzr, $x26, 0, debug-location !391; cg.c:286:9
SU(1):   STRXui renamable $x8, $sp, 0, debug-location !391 :: (store 8 into stack); cg.c:286:9

Fixup kills for %bb.36
Fixup kills for %bb.37
********** MI Scheduling **********
main:%bb.38 if.end115
  From: STURXi $xzr, $fp, -152, debug-location !396 :: (store 8 into %ir.norm_temp1); cg.c:297:20
    To: End RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   STURXi $xzr, $fp, -152, debug-location !396 :: (store 8 into %ir.norm_temp1); cg.c:297:20
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   STRXui $xzr, $sp, 20, debug-location !397 :: (store 8 into %ir.norm_temp2); cg.c:298:20
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   STURWi $wzr, $fp, -120, debug-location !398 :: (store 4 into %ir.j); cg.c:299:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 0
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STURXi $xzr, $fp, -152, debug-location !396 :: (store 8 into %ir.norm_temp1); cg.c:297:20
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 0
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) STRXui $xzr, $sp, 20, debug-location !397 :: (store 8 into %ir.norm_temp2); cg.c:298:20
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi $wzr, $fp, -120, debug-location !398 :: (store 4 into %ir.j); cg.c:299:16
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   STURXi $xzr, $fp, -152, debug-location !396 :: (store 8 into %ir.norm_temp1); cg.c:297:20
SU(1):   STRXui $xzr, $sp, 20, debug-location !397 :: (store 8 into %ir.norm_temp2); cg.c:298:20
SU(2):   STURWi $wzr, $fp, -120, debug-location !398 :: (store 4 into %ir.j); cg.c:299:16

Fixup kills for %bb.38
********** MI Scheduling **********
main:%bb.39 for.cond116
  From: renamable $w8 = LDRWui renamable $x28, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !403 :: (dereferenceable load 4 from @lastcol); cg.c:299:25
    To: Bcc 10, %bb.41, implicit $nzcv, debug-location !408; cg.c:299:9
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui renamable $x28, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !403 :: (dereferenceable load 4 from @lastcol); cg.c:299:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w8
SU(1):   renamable $w9 = LDRWui renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !404 :: (dereferenceable load 4 from @firstcol); cg.c:299:35
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=$w9
SU(2):   renamable $w10 = LDURWi $fp, -120, debug-location !401 :: (dereferenceable load 4 from %ir.j); cg.c:299:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=$w10
SU(3):   $w8 = SUBWrs renamable $w8, renamable $w9, 0, debug-location !405; cg.c:299:33
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=$w9
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$w8
SU(4):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !406; cg.c:299:44
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$w8
  Successors:
    SU(5): Data Latency=1 Reg=$w8
SU(5):   $wzr = SUBSWrs renamable $w10, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !408; cg.c:299:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=$w8
    SU(2): Data Latency=4 Reg=$w10
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.41, implicit $nzcv, debug-location !408; cg.c:299:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 7
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w8 = LDRWui renamable $x28, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !403 :: (dereferenceable load 4 from @lastcol); cg.c:299:25
  Ready @0c
  TopQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 7
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w9 = LDRWui renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !404 :: (dereferenceable load 4 from @firstcol); cg.c:299:35
  Ready @1c
  TopQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w10 = LDURWi $fp, -120, debug-location !401 :: (dereferenceable load 4 from %ir.j); cg.c:299:21
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $w8 = SUBWrs renamable $w8, renamable $w9, 0, debug-location !405; cg.c:299:33
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !406; cg.c:299:44
  Ready @6c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $wzr = SUBSWrs renamable $w10, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !408; cg.c:299:9
  Ready @7c
  TopQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.39 ***
SU(0):   renamable $w8 = LDRWui renamable $x28, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !403 :: (dereferenceable load 4 from @lastcol); cg.c:299:25
SU(1):   renamable $w9 = LDRWui renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !404 :: (dereferenceable load 4 from @firstcol); cg.c:299:35
SU(2):   renamable $w10 = LDURWi $fp, -120, debug-location !401 :: (dereferenceable load 4 from %ir.j); cg.c:299:21
SU(3):   $w8 = SUBWrs renamable $w8, renamable $w9, 0, debug-location !405; cg.c:299:33
SU(4):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !406; cg.c:299:44
SU(5):   $wzr = SUBSWrs renamable $w10, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !408; cg.c:299:9

Fixup kills for %bb.39
********** MI Scheduling **********
main:%bb.40 for.body120
  From: renamable $x8 = LDURSWi $fp, -120, debug-location !411 :: (dereferenceable load 4 from %ir.j); cg.c:300:41
    To: B %bb.39
 RegionInstrs: 14
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURSWi $fp, -120, debug-location !411 :: (dereferenceable load 4 from %ir.j); cg.c:300:41
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$w8
    SU(6): Data Latency=0 Reg=$x8
    SU(1): Data Latency=4 Reg=$x8
    SU(13): Ord  Latency=0 Memory
SU(1):   renamable $x9 = UBFMXri renamable $x8, 61, 60, debug-location !420; cg.c:301:39
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(3): Data Latency=1 Reg=$x9
    SU(2): Data Latency=1 Reg=$x9
    SU(6): Anti Latency=0
SU(2):   renamable $d0 = LDRDroX renamable $x19, renamable $x9, 0, 0, debug-location !412 :: (load 8 from %ir.arrayidx122); cg.c:300:39
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(1): Data Latency=1 Reg=$x9
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$d0
SU(3):   renamable $d1 = LDRDroX renamable $x20, renamable $x9, 0, 0, debug-location !420 :: (load 8 from %ir.arrayidx130); cg.c:301:39
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(1): Data Latency=1 Reg=$x9
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=4 Reg=$d1
    SU(7): Data Latency=4 Reg=$d1
SU(4):   renamable $d2 = LDURDi $fp, -152, debug-location !409 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:300:26
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(9): Data Latency=4 Reg=$d2
    SU(11): Ord  Latency=0 Memory
SU(5):   renamable $d3 = LDRDui $sp, 20, debug-location !418 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:301:26
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(10): Data Latency=4 Reg=$d3
    SU(12): Ord  Latency=0 Memory
SU(6):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8, debug-location !426; cg.c:299:50
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
    SU(0): Data Latency=0 Reg=$x8
  Successors:
    SU(13): Data Latency=1 Reg=$w8
SU(7):   renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !415; cg.c:300:44
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 2
  Predecessors:
    SU(3): Data Latency=4 Reg=$d1
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d0
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$d0
    SU(8): Anti Latency=0
SU(8):   renamable $d1 = FMULDrr renamable $d1, renamable $d1, debug-location !423; cg.c:301:44
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 2
  Predecessors:
    SU(7): Anti Latency=0
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d1
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$d1
SU(9):   renamable $d0 = FADDDrr renamable $d2, renamable $d0, debug-location !416; cg.c:300:37
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$d0
    SU(4): Data Latency=4 Reg=$d2
  Successors:
    SU(11): Data Latency=1 Reg=$d0
SU(10):   renamable $d1 = FADDDrr renamable $d3, renamable $d1, debug-location !424; cg.c:301:37
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$d1
    SU(5): Data Latency=4 Reg=$d3
  Successors:
    SU(12): Data Latency=1 Reg=$d1
SU(11):   STURDi renamable $d0, $fp, -152, debug-location !417 :: (store 8 into %ir.norm_temp1); cg.c:300:24
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=$d0
    SU(4): Ord  Latency=0 Memory
SU(12):   STRDui renamable $d1, $sp, 20, debug-location !425 :: (store 8 into %ir.norm_temp2); cg.c:301:24
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=$d1
    SU(5): Ord  Latency=0 Memory
SU(13):   STURWi renamable $w8, $fp, -120, debug-location !426 :: (store 4 into %ir.j); cg.c:299:50
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.39
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 11
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 4 5 
  TopQ.A RemainingLatency 0 + 0c > CritPath 11
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDURSWi $fp, -120, debug-location !411 :: (dereferenceable load 4 from %ir.j); cg.c:300:41
  Ready @0c
  TopQ.A BotLatency SU(0) 11c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 5 4 
  TopQ.A RemainingLatency 0 + 1c > CritPath 11
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) renamable $d2 = LDURDi $fp, -152, debug-location !409 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:300:26
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $d3 = LDRDui $sp, 20, debug-location !418 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:301:26
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x9 = UBFMXri renamable $x8, 61, 60, debug-location !420; cg.c:301:39
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 2 6 
  TopQ.A RemainingLatency 0 + 5c > CritPath 11
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d0 = LDRDroX renamable $x19, renamable $x9, 0, 0, debug-location !412 :: (load 8 from %ir.arrayidx122); cg.c:300:39
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 6 
  TopQ.A RemainingLatency 0 + 6c > CritPath 11
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d1 = LDRDroX renamable $x20, renamable $x9, 0, 0, debug-location !420 :: (load 8 from %ir.arrayidx130); cg.c:301:39
  Ready @6c
  TopQ.A BotLatency SU(3) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8, debug-location !426; cg.c:299:50
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 13 
Pick Top ONLY1     
Scheduling SU(13) STURWi renamable $w8, $fp, -120, debug-location !426 :: (store 4 into %ir.j); cg.c:299:50
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 8
  Executed: 9c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 10 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !415; cg.c:300:44
  Ready @10c
  TopQ.A TopLatency SU(7) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 9
  Executed: 11c
  Critical: 9c, 9 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 8 
  TopQ.A RemainingLatency 0 + 11c > CritPath 11
  Cand SU(9) ORDER                              
  Cand SU(8) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $d1 = FMULDrr renamable $d1, renamable $d1, debug-location !423; cg.c:301:44
  Ready @11c
  TopQ.A BotLatency SU(8) 2c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 10
  Executed: 12c
  Critical: 10c, 10 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 10 
  TopQ.A RemainingLatency 0 + 12c > CritPath 11
  Cand SU(9) ORDER                              
Pick Top ORDER     
Scheduling SU(9) renamable $d0 = FADDDrr renamable $d2, renamable $d0, debug-location !416; cg.c:300:37
  Ready @12c
  TopQ.A TopLatency SU(9) 10c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 11
  Executed: 13c
  Critical: 11c, 11 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 11 
  TopQ.A RemainingLatency 0 + 13c > CritPath 11
  Cand SU(10) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(10) renamable $d1 = FADDDrr renamable $d3, renamable $d1, debug-location !424; cg.c:301:37
  Ready @13c
  TopQ.A BotLatency SU(10) 1c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 12
  Executed: 14c
  Critical: 12c, 12 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 12 
  TopQ.A RemainingLatency 0 + 14c > CritPath 11
  Cand SU(11) ORDER                              
Pick Top ORDER     
Scheduling SU(11) STURDi renamable $d0, $fp, -152, debug-location !417 :: (store 8 into %ir.norm_temp1); cg.c:300:24
  Ready @14c
  TopQ.A TopLatency SU(11) 11c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 13
  Executed: 15c
  Critical: 13c, 13 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 
Pick Top ONLY1     
Scheduling SU(12) STRDui renamable $d1, $sp, 20, debug-location !425 :: (store 8 into %ir.norm_temp2); cg.c:301:24
  Ready @15c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 14
  Executed: 16c
  Critical: 14c, 14 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.40 ***
SU(0):   renamable $x8 = LDURSWi $fp, -120, debug-location !411 :: (dereferenceable load 4 from %ir.j); cg.c:300:41
SU(4):   renamable $d2 = LDURDi $fp, -152, debug-location !409 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:300:26
SU(5):   renamable $d3 = LDRDui $sp, 20, debug-location !418 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:301:26
SU(1):   renamable $x9 = UBFMXri renamable $x8, 61, 60, debug-location !420; cg.c:301:39
SU(2):   renamable $d0 = LDRDroX renamable $x19, renamable $x9, 0, 0, debug-location !412 :: (load 8 from %ir.arrayidx122); cg.c:300:39
SU(3):   renamable $d1 = LDRDroX renamable $x20, renamable $x9, 0, 0, debug-location !420 :: (load 8 from %ir.arrayidx130); cg.c:301:39
SU(6):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8, debug-location !426; cg.c:299:50
SU(13):   STURWi renamable $w8, $fp, -120, debug-location !426 :: (store 4 into %ir.j); cg.c:299:50
SU(7):   renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !415; cg.c:300:44
SU(8):   renamable $d1 = FMULDrr renamable $d1, renamable $d1, debug-location !423; cg.c:301:44
SU(9):   renamable $d0 = FADDDrr renamable $d2, renamable $d0, debug-location !416; cg.c:300:37
SU(10):   renamable $d1 = FADDDrr renamable $d3, renamable $d1, debug-location !424; cg.c:301:37
SU(11):   STURDi renamable $d0, $fp, -152, debug-location !417 :: (store 8 into %ir.norm_temp1); cg.c:300:24
SU(12):   STRDui renamable $d1, $sp, 20, debug-location !425 :: (store 8 into %ir.norm_temp2); cg.c:301:24

Fixup kills for %bb.40
********** MI Scheduling **********
main:%bb.41 for.end135
  From: renamable $d1 = LDRDui $sp, 20, debug-location !430 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:304:33
    To: Bcc 7, %bb.43, implicit $nzcv, debug-location !432; cg.c:304:26
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $d1 = LDRDui $sp, 20, debug-location !430 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:304:33
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(1): Data Latency=4 Reg=$d1
SU(1):   renamable $d0 = FSQRTDr renamable $d1, debug-location !431; cg.c:304:28
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(0): Data Latency=4 Reg=$d1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(2): Data Latency=1 Reg=$d0
SU(2):   FCMPDrr renamable $d0, renamable $d0, implicit-def $nzcv, debug-location !432; cg.c:304:26
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=$d0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 7, %bb.43, implicit $nzcv, debug-location !432; cg.c:304:26
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $d1 = LDRDui $sp, 20, debug-location !430 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:304:33
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $d0 = FSQRTDr renamable $d1, debug-location !431; cg.c:304:28
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) FCMPDrr renamable $d0, renamable $d0, implicit-def $nzcv, debug-location !432; cg.c:304:26
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.41 ***
SU(0):   renamable $d1 = LDRDui $sp, 20, debug-location !430 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:304:33
SU(1):   renamable $d0 = FSQRTDr renamable $d1, debug-location !431; cg.c:304:28
SU(2):   FCMPDrr renamable $d0, renamable $d0, implicit-def $nzcv, debug-location !432; cg.c:304:26

Fixup kills for %bb.41
Fixup kills for %bb.42
********** MI Scheduling **********
main:%bb.43 for.end135.split
  From: renamable $d1 = LDURDi $fp, -152, debug-location !434 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:306:30
    To: Bcc 1, %bb.45, implicit $nzcv, debug-location !441; cg.c:307:13
 RegionInstrs: 9
ScheduleDAGMI::schedule starting
SU(0):   renamable $d1 = LDURDi $fp, -152, debug-location !434 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:306:30
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(5): Data Latency=4 Reg=$d1
SU(1):   renamable $d0 = FDIVDrr renamable $d8, renamable $d0, debug-location !432; cg.c:304:26
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(5): Out  Latency=1
    SU(4): Data Latency=1 Reg=$d0
SU(2):   $d2 = FMOVXDr $x22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(6): Data Latency=1 Reg=$d2
SU(3):   renamable $w8 = LDURWi $fp, -128, debug-location !438 :: (dereferenceable load 4 from %ir.it); cg.c:307:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(7): Data Latency=4 Reg=$w8
SU(4):   STRDui renamable $d0, $sp, 20, debug-location !433 :: (store 8 into %ir.norm_temp2); cg.c:304:20
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(1): Data Latency=1 Reg=$d0
  Successors:
    SU(5): Anti Latency=0
SU(5):   renamable $d0 = FDIVDrr renamable $d8, renamable $d1, debug-location !435; cg.c:306:28
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(4): Anti Latency=0
    SU(1): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d1
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$d0
SU(6):   renamable $d0 = FADDDrr renamable $d0, renamable $d2, debug-location !436; cg.c:306:22
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$d0
    SU(2): Data Latency=1 Reg=$d2
  Successors:
    SU(8): Data Latency=1 Reg=$d0
SU(7):   dead $wzr = SUBSWri renamable $w8, 1, 0, implicit-def $nzcv, debug-location !441; cg.c:307:13
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(8):   STURDi renamable $d0, $fp, -136, debug-location !437 :: (store 8 into %ir.zeta); cg.c:306:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=$d0
ExitSU:   Bcc 1, %bb.45, implicit $nzcv, debug-location !441; cg.c:307:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d1 = LDURDi $fp, -152, debug-location !434 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:306:30
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) renamable $w8 = LDURWi $fp, -128, debug-location !438 :: (dereferenceable load 4 from %ir.it); cg.c:307:13
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 2c > CritPath 6
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d0 = FDIVDrr renamable $d8, renamable $d0, debug-location !432; cg.c:304:26
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 2 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 6
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) $d2 = FMOVXDr $x22
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) STRDui renamable $d0, $sp, 20, debug-location !433 :: (store 8 into %ir.norm_temp2); cg.c:304:20
  Ready @4c
  TopQ.A TopLatency SU(4) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 7 
  TopQ.A RemainingLatency 0 + 5c > CritPath 6
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) renamable $d0 = FDIVDrr renamable $d8, renamable $d1, debug-location !435; cg.c:306:28
  Ready @5c
  TopQ.A TopLatency SU(5) 4c
  TopQ.A BotLatency SU(5) 2c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 6 
  TopQ.A RemainingLatency 0 + 6c > CritPath 6
  Cand SU(7) ORDER                              
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) renamable $d0 = FADDDrr renamable $d0, renamable $d2, debug-location !436; cg.c:306:22
  Ready @6c
  TopQ.A TopLatency SU(6) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 8 
  TopQ.A RemainingLatency 0 + 7c > CritPath 6
  Cand SU(7) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(7) dead $wzr = SUBSWri renamable $w8, 1, 0, implicit-def $nzcv, debug-location !441; cg.c:307:13
  Ready @7c
  TopQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) STURDi renamable $d0, $fp, -136, debug-location !437 :: (store 8 into %ir.zeta); cg.c:306:14
  Ready @8c
  TopQ.A TopLatency SU(8) 6c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.43 ***
SU(0):   renamable $d1 = LDURDi $fp, -152, debug-location !434 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:306:30
SU(3):   renamable $w8 = LDURWi $fp, -128, debug-location !438 :: (dereferenceable load 4 from %ir.it); cg.c:307:13
SU(1):   renamable $d0 = FDIVDrr renamable $d8, renamable $d0, debug-location !432; cg.c:304:26
SU(2):   $d2 = FMOVXDr $x22
SU(4):   STRDui renamable $d0, $sp, 20, debug-location !433 :: (store 8 into %ir.norm_temp2); cg.c:304:20
SU(5):   renamable $d0 = FDIVDrr renamable $d8, renamable $d1, debug-location !435; cg.c:306:28
SU(6):   renamable $d0 = FADDDrr renamable $d0, renamable $d2, debug-location !436; cg.c:306:22
SU(7):   dead $wzr = SUBSWri renamable $w8, 1, 0, implicit-def $nzcv, debug-location !441; cg.c:307:13
SU(8):   STURDi renamable $d0, $fp, -136, debug-location !437 :: (store 8 into %ir.zeta); cg.c:306:14

Fixup kills for %bb.43
********** MI Scheduling **********
main:%bb.44 if.then141
  From: $x0 = ADRP target-flags(aarch64-page) @.str.10, debug-location !442; cg.c:308:13
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !442; cg.c:308:13
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.10, debug-location !442; cg.c:308:13
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.10, 0, debug-location !442; cg.c:308:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !442; cg.c:308:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @.str.10, debug-location !442; cg.c:308:13
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.10, 0, debug-location !442; cg.c:308:13
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.10, debug-location !442; cg.c:308:13
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.10, 0, debug-location !442; cg.c:308:13

Fixup kills for %bb.44
********** MI Scheduling **********
main:%bb.45 if.end143
  From: renamable $w1 = LDURWi $fp, -128, debug-location !443 :: (dereferenceable load 4 from %ir.it); cg.c:309:50
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w0, debug-location !446; cg.c:309:9
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w1 = LDURWi $fp, -128, debug-location !443 :: (dereferenceable load 4 from %ir.it); cg.c:309:50
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(1):   renamable $d0, renamable $d1 = LDPDi $fp, -18, debug-location !444 :: (dereferenceable load 8 from %ir.rnorm), (dereferenceable load 8 from %ir.zeta); cg.c:309:54
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(2):   $x0 = ORRXrs $xzr, $x21, 0, debug-location !446; cg.c:309:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w0, debug-location !446; cg.c:309:9
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=4 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w1 = LDURWi $fp, -128, debug-location !443 :: (dereferenceable load 4 from %ir.it); cg.c:309:50
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 4
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d0, renamable $d1 = LDPDi $fp, -18, debug-location !444 :: (dereferenceable load 8 from %ir.rnorm), (dereferenceable load 8 from %ir.zeta); cg.c:309:54
  Ready @1c
  TopQ.A BotLatency SU(1) 4c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $x0 = ORRXrs $xzr, $x21, 0, debug-location !446; cg.c:309:9
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   renamable $w1 = LDURWi $fp, -128, debug-location !443 :: (dereferenceable load 4 from %ir.it); cg.c:309:50
SU(1):   renamable $d0, renamable $d1 = LDPDi $fp, -18, debug-location !444 :: (dereferenceable load 8 from %ir.rnorm), (dereferenceable load 8 from %ir.zeta); cg.c:309:54
SU(2):   $x0 = ORRXrs $xzr, $x21, 0, debug-location !446; cg.c:309:9

Fixup kills for %bb.45
********** MI Scheduling **********
main:%bb.46 for.cond145
  From: renamable $w8 = LDRWui renamable $x28, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !452 :: (dereferenceable load 4 from @lastcol); cg.c:314:25
    To: Bcc 10, %bb.48, implicit $nzcv, debug-location !457; cg.c:314:9
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui renamable $x28, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !452 :: (dereferenceable load 4 from @lastcol); cg.c:314:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w8
SU(1):   renamable $w9 = LDRWui renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !453 :: (dereferenceable load 4 from @firstcol); cg.c:314:35
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=$w9
SU(2):   renamable $w10 = LDURWi $fp, -120, debug-location !450 :: (dereferenceable load 4 from %ir.j); cg.c:314:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=$w10
SU(3):   $w8 = SUBWrs renamable $w8, renamable $w9, 0, debug-location !454; cg.c:314:33
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=$w9
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$w8
SU(4):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !455; cg.c:314:44
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$w8
  Successors:
    SU(5): Data Latency=1 Reg=$w8
SU(5):   $wzr = SUBSWrs renamable $w10, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !457; cg.c:314:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=$w8
    SU(2): Data Latency=4 Reg=$w10
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.48, implicit $nzcv, debug-location !457; cg.c:314:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 7
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w8 = LDRWui renamable $x28, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !452 :: (dereferenceable load 4 from @lastcol); cg.c:314:25
  Ready @0c
  TopQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 7
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w9 = LDRWui renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !453 :: (dereferenceable load 4 from @firstcol); cg.c:314:35
  Ready @1c
  TopQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w10 = LDURWi $fp, -120, debug-location !450 :: (dereferenceable load 4 from %ir.j); cg.c:314:21
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $w8 = SUBWrs renamable $w8, renamable $w9, 0, debug-location !454; cg.c:314:33
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !455; cg.c:314:44
  Ready @6c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $wzr = SUBSWrs renamable $w10, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !457; cg.c:314:9
  Ready @7c
  TopQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.46 ***
SU(0):   renamable $w8 = LDRWui renamable $x28, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !452 :: (dereferenceable load 4 from @lastcol); cg.c:314:25
SU(1):   renamable $w9 = LDRWui renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !453 :: (dereferenceable load 4 from @firstcol); cg.c:314:35
SU(2):   renamable $w10 = LDURWi $fp, -120, debug-location !450 :: (dereferenceable load 4 from %ir.j); cg.c:314:21
SU(3):   $w8 = SUBWrs renamable $w8, renamable $w9, 0, debug-location !454; cg.c:314:33
SU(4):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !455; cg.c:314:44
SU(5):   $wzr = SUBSWrs renamable $w10, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !457; cg.c:314:9

Fixup kills for %bb.46
********** MI Scheduling **********
main:%bb.47 for.body149
  From: renamable $x8 = LDURSWi $fp, -120, debug-location !460 :: (dereferenceable load 4 from %ir.j); cg.c:315:35
    To: B %bb.46
 RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURSWi $fp, -120, debug-location !460 :: (dereferenceable load 4 from %ir.j); cg.c:315:35
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$w8
    SU(4): Data Latency=0 Reg=$x8
    SU(2): Data Latency=4 Reg=$x8
    SU(7): Ord  Latency=0 Memory
SU(1):   renamable $d0 = LDRDui $sp, 20, debug-location !458 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:315:20
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$d0
SU(2):   renamable $x9 = UBFMXri renamable $x8, 61, 60, debug-location !461; cg.c:315:33
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(6): Data Latency=1 Reg=$x9
    SU(3): Data Latency=1 Reg=$x9
    SU(4): Anti Latency=0
SU(3):   renamable $d1 = LDRDroX renamable $x20, renamable $x9, 0, 0, debug-location !461 :: (load 8 from %ir.arrayidx151); cg.c:315:33
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(2): Data Latency=1 Reg=$x9
  Successors:
    SU(5): Data Latency=4 Reg=$d1
SU(4):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8, debug-location !466; cg.c:314:50
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
    SU(0): Data Latency=0 Reg=$x8
  Successors:
    SU(7): Data Latency=1 Reg=$w8
SU(5):   renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !462; cg.c:315:31
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=$d1
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$d0
  Successors:
    SU(6): Data Latency=1 Reg=$d0
SU(6):   STRDroX renamable $d0, renamable $x19, renamable $x9, 0, 0, debug-location !465 :: (store 8 into %ir.arrayidx154); cg.c:315:18
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=$d0
    SU(2): Data Latency=1 Reg=$x9
SU(7):   STURWi renamable $w8, $fp, -120, debug-location !466 :: (store 4 into %ir.j); cg.c:314:50
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.46
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 10
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 10
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDURSWi $fp, -120, debug-location !460 :: (dereferenceable load 4 from %ir.j); cg.c:315:35
  Ready @0c
  TopQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $d0 = LDRDui $sp, 20, debug-location !458 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:315:20
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x9 = UBFMXri renamable $x8, 61, 60, debug-location !461; cg.c:315:33
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 4 
  TopQ.A RemainingLatency 0 + 5c > CritPath 10
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d1 = LDRDroX renamable $x20, renamable $x9, 0, 0, debug-location !461 :: (load 8 from %ir.arrayidx151); cg.c:315:33
  Ready @5c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8, debug-location !466; cg.c:314:50
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) STURWi renamable $w8, $fp, -120, debug-location !466 :: (store 4 into %ir.j); cg.c:314:50
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 9 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !462; cg.c:315:31
  Ready @9c
  TopQ.A TopLatency SU(5) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 7
  Executed: 10c
  Critical: 7c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) STRDroX renamable $d0, renamable $x19, renamable $x9, 0, 0, debug-location !465 :: (store 8 into %ir.arrayidx154); cg.c:315:18
  Ready @10c
  TopQ.A TopLatency SU(6) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 8
  Executed: 11c
  Critical: 8c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.47 ***
SU(0):   renamable $x8 = LDURSWi $fp, -120, debug-location !460 :: (dereferenceable load 4 from %ir.j); cg.c:315:35
SU(1):   renamable $d0 = LDRDui $sp, 20, debug-location !458 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:315:20
SU(2):   renamable $x9 = UBFMXri renamable $x8, 61, 60, debug-location !461; cg.c:315:33
SU(3):   renamable $d1 = LDRDroX renamable $x20, renamable $x9, 0, 0, debug-location !461 :: (load 8 from %ir.arrayidx151); cg.c:315:33
SU(4):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8, debug-location !466; cg.c:314:50
SU(7):   STURWi renamable $w8, $fp, -120, debug-location !466 :: (store 4 into %ir.j); cg.c:314:50
SU(5):   renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !462; cg.c:315:31
SU(6):   STRDroX renamable $d0, renamable $x19, renamable $x9, 0, 0, debug-location !465 :: (store 8 into %ir.arrayidx154); cg.c:315:18

Fixup kills for %bb.47
********** MI Scheduling **********
main:%bb.48 for.inc158
  From: renamable $w8 = LDURWi $fp, -128, debug-location !470 :: (dereferenceable load 4 from %ir.it); cg.c:279:33
    To: B %bb.33
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -128, debug-location !470 :: (dereferenceable load 4 from %ir.it); cg.c:279:33
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !470; cg.c:279:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STURWi renamable $w8, $fp, -128, debug-location !470 :: (store 4 into %ir.it); cg.c:279:33
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.33
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -128, debug-location !470 :: (dereferenceable load 4 from %ir.it); cg.c:279:33
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !470; cg.c:279:33
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w8, $fp, -128, debug-location !470 :: (store 4 into %ir.it); cg.c:279:33
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.48 ***
SU(0):   renamable $w8 = LDURWi $fp, -128, debug-location !470 :: (dereferenceable load 4 from %ir.it); cg.c:279:33
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !470; cg.c:279:33
SU(2):   STURWi renamable $w8, $fp, -128, debug-location !470 :: (store 4 into %ir.it); cg.c:279:33

Fixup kills for %bb.48
********** MI Scheduling **********
main:%bb.49 do.end164
  From: renamable $w8 = LDRSBWui $sp, 132, debug-location !479 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:332:9
    To: Bcc 0, %bb.53, implicit $nzcv, debug-location !482; cg.c:332:9
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRSBWui $sp, 132, debug-location !479 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:332:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=$w8
SU(1):   $x9 = MOVZXi 48571, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x9
SU(2):   $x9 = MOVKXi $x9(tied-def 0), 55767, 16
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x9
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x9
SU(3):   $x9 = MOVKXi $x9(tied-def 0), 31967, 32
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x9
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x9
SU(4):   $x9 = MOVKXi $x9(tied-def 0), 15835, 48
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x9
  Successors:
    SU(6): Data Latency=1 Reg=$x9
SU(5):   dead $wzr = SUBSWri renamable $w8, 85, 0, implicit-def $nzcv, debug-location !482; cg.c:332:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(6):   STRXui renamable $x9, $sp, 14, debug-location !478 :: (store 8 into %ir.epsilon); cg.c:331:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=$x9
ExitSU:   Bcc 0, %bb.53, implicit $nzcv, debug-location !482; cg.c:332:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w8 = LDRSBWui $sp, 132, debug-location !479 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:332:9
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x9 = MOVZXi 48571, 0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $x9 = MOVKXi $x9(tied-def 0), 55767, 16
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $x9 = MOVKXi $x9(tied-def 0), 31967, 32
  Ready @3c
  TopQ.A TopLatency SU(3) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 5 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) $x9 = MOVKXi $x9(tied-def 0), 15835, 48
  Ready @4c
  TopQ.A TopLatency SU(4) 3c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 6 
  TopQ.A RemainingLatency 0 + 5c > CritPath 5
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) dead $wzr = SUBSWri renamable $w8, 85, 0, implicit-def $nzcv, debug-location !482; cg.c:332:9
  Ready @5c
  TopQ.A TopLatency SU(5) 4c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) STRXui renamable $x9, $sp, 14, debug-location !478 :: (store 8 into %ir.epsilon); cg.c:331:13
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.49 ***
SU(0):   renamable $w8 = LDRSBWui $sp, 132, debug-location !479 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:332:9
SU(1):   $x9 = MOVZXi 48571, 0
SU(2):   $x9 = MOVKXi $x9(tied-def 0), 55767, 16
SU(3):   $x9 = MOVKXi $x9(tied-def 0), 31967, 32
SU(4):   $x9 = MOVKXi $x9(tied-def 0), 15835, 48
SU(5):   dead $wzr = SUBSWri renamable $w8, 85, 0, implicit-def $nzcv, debug-location !482; cg.c:332:9
SU(6):   STRXui renamable $x9, $sp, 14, debug-location !478 :: (store 8 into %ir.epsilon); cg.c:331:13

********** MI Scheduling **********
main:%bb.49 do.end164
  From: STRDui killed renamable $d0, $sp, 19, debug-location !476 :: (store 8 into %ir.t); cg.c:327:7
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !477; cg.c:329:5
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   STRDui renamable $d0, $sp, 19, debug-location !476 :: (store 8 into %ir.t); cg.c:327:7
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $x0 = ADRP target-flags(aarch64-page) @.str.12, debug-location !477; cg.c:329:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
SU(2):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.12, 0, debug-location !477; cg.c:329:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !477; cg.c:329:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $x0 = ADRP target-flags(aarch64-page) @.str.12, debug-location !477; cg.c:329:5
  Ready @0c
  TopQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.12, 0, debug-location !477; cg.c:329:5
  Ready @1c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STRDui renamable $d0, $sp, 19, debug-location !476 :: (store 8 into %ir.t); cg.c:327:7
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.49 ***
SU(1):   $x0 = ADRP target-flags(aarch64-page) @.str.12, debug-location !477; cg.c:329:5
SU(2):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.12, 0, debug-location !477; cg.c:329:5
SU(0):   STRDui renamable $d0, $sp, 19, debug-location !476 :: (store 8 into %ir.t); cg.c:327:7

Fixup kills for %bb.49
********** MI Scheduling **********
main:%bb.50 if.then169
  From: renamable $d0 = LDURDi $fp, -136, debug-location !483 :: (dereferenceable load 8 from %ir.zeta); cg.c:333:20
    To: Bcc 8, %bb.52, implicit $nzcv, debug-location !495; cg.c:334:13
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDURDi $fp, -136, debug-location !483 :: (dereferenceable load 8 from %ir.zeta); cg.c:333:20
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d0
SU(1):   renamable $d2, renamable $d1 = LDPDi $sp, 14, debug-location !485 :: (dereferenceable load 8 from %ir.zeta_verify_value), (dereferenceable load 8 from %ir.epsilon); cg.c:333:27
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(4): Data Latency=4 Reg=$d2
    SU(3): Data Latency=4 Reg=$d1
    SU(2): Data Latency=4 Reg=$d1
SU(2):   renamable $d0 = FABD64 renamable $d0, renamable $d1, debug-location !487; cg.c:333:15
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=$d1
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d0
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$d0
SU(3):   renamable $d0 = FDIVDrr renamable $d0, renamable $d1, debug-location !489; cg.c:333:46
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$d0
    SU(1): Data Latency=4 Reg=$d1
  Successors:
    SU(5): Data Latency=1 Reg=$d0
    SU(4): Data Latency=1 Reg=$d0
SU(4):   FCMPDrr renamable $d0, renamable $d2, implicit-def $nzcv, debug-location !495; cg.c:334:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(3): Data Latency=1 Reg=$d0
    SU(1): Data Latency=4 Reg=$d2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   STRDui renamable $d0, $sp, 13, debug-location !490 :: (store 8 into %ir.err); cg.c:333:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=$d0
SU(6):   renamable $x19 = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 8, %bb.52, implicit $nzcv, debug-location !495; cg.c:334:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 
  TopQ.A RemainingLatency 0 + 0c > CritPath 7
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0 = LDURDi $fp, -136, debug-location !483 :: (dereferenceable load 8 from %ir.zeta); cg.c:333:20
  Ready @0c
  TopQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 7
  Cand SU(6) ORDER                              
  Cand SU(1) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d2, renamable $d1 = LDPDi $sp, 14, debug-location !485 :: (dereferenceable load 8 from %ir.zeta_verify_value), (dereferenceable load 8 from %ir.epsilon); cg.c:333:27
  Ready @1c
  TopQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $x19 = ADRP target-flags(aarch64-page) @timeron
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $d0 = FABD64 renamable $d0, renamable $d1, debug-location !487; cg.c:333:15
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $d0 = FDIVDrr renamable $d0, renamable $d1, debug-location !489; cg.c:333:46
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 
  TopQ.A RemainingLatency 0 + 7c > CritPath 7
  Cand SU(5) ORDER                              
  Cand SU(4) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) FCMPDrr renamable $d0, renamable $d2, implicit-def $nzcv, debug-location !495; cg.c:334:13
  Ready @7c
  TopQ.A TopLatency SU(4) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) STRDui renamable $d0, $sp, 13, debug-location !490 :: (store 8 into %ir.err); cg.c:333:13
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.50 ***
SU(0):   renamable $d0 = LDURDi $fp, -136, debug-location !483 :: (dereferenceable load 8 from %ir.zeta); cg.c:333:20
SU(1):   renamable $d2, renamable $d1 = LDPDi $sp, 14, debug-location !485 :: (dereferenceable load 8 from %ir.zeta_verify_value), (dereferenceable load 8 from %ir.epsilon); cg.c:333:27
SU(6):   renamable $x19 = ADRP target-flags(aarch64-page) @timeron
SU(2):   renamable $d0 = FABD64 renamable $d0, renamable $d1, debug-location !487; cg.c:333:15
SU(3):   renamable $d0 = FDIVDrr renamable $d0, renamable $d1, debug-location !489; cg.c:333:46
SU(4):   FCMPDrr renamable $d0, renamable $d2, implicit-def $nzcv, debug-location !495; cg.c:334:13
SU(5):   STRDui renamable $d0, $sp, 13, debug-location !490 :: (store 8 into %ir.err); cg.c:333:13

Fixup kills for %bb.50
********** MI Scheduling **********
main:%bb.51 if.then174
  From: renamable $d0 = LDRDui $sp, 13, debug-location !501 :: (dereferenceable load 8 from %ir.err); cg.c:338:45
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !502; cg.c:338:13
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDRDui $sp, 13, debug-location !501 :: (dereferenceable load 8 from %ir.err); cg.c:338:45
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(1):   $x0 = ADRP target-flags(aarch64-page) @.str.15, debug-location !502; cg.c:338:13
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
SU(2):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.15, 0, debug-location !502; cg.c:338:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !502; cg.c:338:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0 = LDRDui $sp, 13, debug-location !501 :: (dereferenceable load 8 from %ir.err); cg.c:338:45
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ADRP target-flags(aarch64-page) @.str.15, debug-location !502; cg.c:338:13
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.15, 0, debug-location !502; cg.c:338:13
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.51 ***
SU(0):   renamable $d0 = LDRDui $sp, 13, debug-location !501 :: (dereferenceable load 8 from %ir.err); cg.c:338:45
SU(1):   $x0 = ADRP target-flags(aarch64-page) @.str.15, debug-location !502; cg.c:338:13
SU(2):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.15, 0, debug-location !502; cg.c:338:13

********** MI Scheduling **********
main:%bb.51 if.then174
  From: renamable $d0 = LDURDi $fp, -136, debug-location !499 :: (dereferenceable load 8 from %ir.zeta); cg.c:337:45
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !500; cg.c:337:13
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDURDi $fp, -136, debug-location !499 :: (dereferenceable load 8 from %ir.zeta); cg.c:337:45
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(1):   $x0 = ADRP target-flags(aarch64-page) @.str.14, debug-location !500; cg.c:337:13
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
SU(2):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.14, 0, debug-location !500; cg.c:337:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !500; cg.c:337:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0 = LDURDi $fp, -136, debug-location !499 :: (dereferenceable load 8 from %ir.zeta); cg.c:337:45
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ADRP target-flags(aarch64-page) @.str.14, debug-location !500; cg.c:337:13
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.14, 0, debug-location !500; cg.c:337:13
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.51 ***
SU(0):   renamable $d0 = LDURDi $fp, -136, debug-location !499 :: (dereferenceable load 8 from %ir.zeta); cg.c:337:45
SU(1):   $x0 = ADRP target-flags(aarch64-page) @.str.14, debug-location !500; cg.c:337:13
SU(2):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.14, 0, debug-location !500; cg.c:337:13

********** MI Scheduling **********
main:%bb.51 if.then174
  From: $w8 = MOVZWi 1, 0
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !498; cg.c:336:13
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   $w8 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=$w8
SU(1):   STRWui renamable $w8, $sp, 32, debug-location !496 :: (store 4 into %ir.verified); cg.c:335:22
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$w8
SU(2):   $x0 = ADRP target-flags(aarch64-page) @.str.13, debug-location !498; cg.c:336:13
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x0
SU(3):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.13, 0, debug-location !498; cg.c:336:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !498; cg.c:336:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x0 = ADRP target-flags(aarch64-page) @.str.13, debug-location !498; cg.c:336:13
  Ready @0c
  TopQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $w8 = MOVZWi 1, 0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 1 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.13, 0, debug-location !498; cg.c:336:13
  Ready @2c
  TopQ.A TopLatency SU(3) 1c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRWui renamable $w8, $sp, 32, debug-location !496 :: (store 4 into %ir.verified); cg.c:335:22
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.51 ***
SU(2):   $x0 = ADRP target-flags(aarch64-page) @.str.13, debug-location !498; cg.c:336:13
SU(0):   $w8 = MOVZWi 1, 0
SU(3):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.13, 0, debug-location !498; cg.c:336:13
SU(1):   STRWui renamable $w8, $sp, 32, debug-location !496 :: (store 4 into %ir.verified); cg.c:335:22

Fixup kills for %bb.51
********** MI Scheduling **********
main:%bb.52 if.else178
  From: renamable $d0 = LDRDui $sp, 15, debug-location !509 :: (dereferenceable load 8 from %ir.zeta_verify_value); cg.c:344:54
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !510; cg.c:344:13
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDRDui $sp, 15, debug-location !509 :: (dereferenceable load 8 from %ir.zeta_verify_value); cg.c:344:54
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(1):   $x0 = ADRP target-flags(aarch64-page) @.str.18, debug-location !510; cg.c:344:13
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
SU(2):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.18, 0, debug-location !510; cg.c:344:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !510; cg.c:344:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0 = LDRDui $sp, 15, debug-location !509 :: (dereferenceable load 8 from %ir.zeta_verify_value); cg.c:344:54
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ADRP target-flags(aarch64-page) @.str.18, debug-location !510; cg.c:344:13
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.18, 0, debug-location !510; cg.c:344:13
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.52 ***
SU(0):   renamable $d0 = LDRDui $sp, 15, debug-location !509 :: (dereferenceable load 8 from %ir.zeta_verify_value); cg.c:344:54
SU(1):   $x0 = ADRP target-flags(aarch64-page) @.str.18, debug-location !510; cg.c:344:13
SU(2):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.18, 0, debug-location !510; cg.c:344:13

********** MI Scheduling **********
main:%bb.52 if.else178
  From: renamable $d0 = LDURDi $fp, -136, debug-location !507 :: (dereferenceable load 8 from %ir.zeta); cg.c:343:54
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !508; cg.c:343:13
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDURDi $fp, -136, debug-location !507 :: (dereferenceable load 8 from %ir.zeta); cg.c:343:54
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(1):   $x0 = ADRP target-flags(aarch64-page) @.str.17, debug-location !508; cg.c:343:13
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
SU(2):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.17, 0, debug-location !508; cg.c:343:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !508; cg.c:343:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0 = LDURDi $fp, -136, debug-location !507 :: (dereferenceable load 8 from %ir.zeta); cg.c:343:54
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ADRP target-flags(aarch64-page) @.str.17, debug-location !508; cg.c:343:13
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.17, 0, debug-location !508; cg.c:343:13
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.52 ***
SU(0):   renamable $d0 = LDURDi $fp, -136, debug-location !507 :: (dereferenceable load 8 from %ir.zeta); cg.c:343:54
SU(1):   $x0 = ADRP target-flags(aarch64-page) @.str.17, debug-location !508; cg.c:343:13
SU(2):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.17, 0, debug-location !508; cg.c:343:13

********** MI Scheduling **********
main:%bb.52 if.else178
  From: STRWui $wzr, $sp, 32, debug-location !504 :: (store 4 into %ir.verified); cg.c:341:22
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !506; cg.c:342:13
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   STRWui $wzr, $sp, 32, debug-location !504 :: (store 4 into %ir.verified); cg.c:341:22
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $x0 = ADRP target-flags(aarch64-page) @.str.16, debug-location !506; cg.c:342:13
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
SU(2):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.16, 0, debug-location !506; cg.c:342:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !506; cg.c:342:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $x0 = ADRP target-flags(aarch64-page) @.str.16, debug-location !506; cg.c:342:13
  Ready @0c
  TopQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.16, 0, debug-location !506; cg.c:342:13
  Ready @1c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STRWui $wzr, $sp, 32, debug-location !504 :: (store 4 into %ir.verified); cg.c:341:22
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.52 ***
SU(1):   $x0 = ADRP target-flags(aarch64-page) @.str.16, debug-location !506; cg.c:342:13
SU(2):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.16, 0, debug-location !506; cg.c:342:13
SU(0):   STRWui $wzr, $sp, 32, debug-location !504 :: (store 4 into %ir.verified); cg.c:341:22

Fixup kills for %bb.52
********** MI Scheduling **********
main:%bb.53 if.else183
  From: $x0 = ADRP target-flags(aarch64-page) @.str.20, debug-location !514; cg.c:350:9
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !514; cg.c:350:9
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.20, debug-location !514; cg.c:350:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.20, 0, debug-location !514; cg.c:350:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !514; cg.c:350:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @.str.20, debug-location !514; cg.c:350:9
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.20, 0, debug-location !514; cg.c:350:9
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.53 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.20, debug-location !514; cg.c:350:9
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.20, 0, debug-location !514; cg.c:350:9

********** MI Scheduling **********
main:%bb.53 if.else183
  From: STRWui $wzr, $sp, 32, debug-location !511 :: (store 4 into %ir.verified); cg.c:348:18
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !513; cg.c:349:9
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   STRWui $wzr, $sp, 32, debug-location !511 :: (store 4 into %ir.verified); cg.c:348:18
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $x0 = ADRP target-flags(aarch64-page) @.str.19, debug-location !513; cg.c:349:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
SU(2):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.19, 0, debug-location !513; cg.c:349:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !513; cg.c:349:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $x0 = ADRP target-flags(aarch64-page) @.str.19, debug-location !513; cg.c:349:9
  Ready @0c
  TopQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.19, 0, debug-location !513; cg.c:349:9
  Ready @1c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STRWui $wzr, $sp, 32, debug-location !511 :: (store 4 into %ir.verified); cg.c:348:18
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.53 ***
SU(1):   $x0 = ADRP target-flags(aarch64-page) @.str.19, debug-location !513; cg.c:349:9
SU(2):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.19, 0, debug-location !513; cg.c:349:9
SU(0):   STRWui $wzr, $sp, 32, debug-location !511 :: (store 4 into %ir.verified); cg.c:348:18

Fixup kills for %bb.53
********** MI Scheduling **********
main:%bb.54 if.end186
  From: renamable $d0 = LDRDui $sp, 19, debug-location !515 :: (dereferenceable load 8 from %ir.t); cg.c:353:9
    To: Bcc 0, %bb.56, implicit $nzcv, debug-location !518; cg.c:353:9
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDRDui $sp, 19, debug-location !515 :: (dereferenceable load 8 from %ir.t); cg.c:353:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$d0
SU(1):   FCMPDri renamable $d0, implicit-def $nzcv, debug-location !518; cg.c:353:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$d0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 0, %bb.56, implicit $nzcv, debug-location !518; cg.c:353:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $d0 = LDRDui $sp, 19, debug-location !515 :: (dereferenceable load 8 from %ir.t); cg.c:353:9
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) FCMPDri renamable $d0, implicit-def $nzcv, debug-location !518; cg.c:353:9
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.54 ***
SU(0):   renamable $d0 = LDRDui $sp, 19, debug-location !515 :: (dereferenceable load 8 from %ir.t); cg.c:353:9
SU(1):   FCMPDri renamable $d0, implicit-def $nzcv, debug-location !518; cg.c:353:9

Fixup kills for %bb.54
********** MI Scheduling **********
main:%bb.55 if.then189
  From: renamable $d0 = LDRDui $sp, 19, debug-location !519 :: (dereferenceable load 8 from %ir.t); cg.c:357:18
    To: B %bb.57
 RegionInstrs: 9
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDRDui $sp, 19, debug-location !519 :: (dereferenceable load 8 from %ir.t); cg.c:357:18
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$d0
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) %const.1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x8
SU(2):   renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 6
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    SU(6): Out  Latency=1
    SU(5): Data Latency=4 Reg=$d1
    SU(3): Anti Latency=0
SU(3):   $x8 = MOVZXi 33920, 32
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(2): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x8
SU(4):   $x8 = MOVKXi $x8(tied-def 0), 16686, 48
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 3
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x8
  Successors:
    SU(6): Data Latency=1 Reg=$x8
SU(5):   renamable $d0 = FDIVDrr renamable $d1, renamable $d0, debug-location !521; cg.c:356:73
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(2): Data Latency=4 Reg=$d1
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d0
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$d0
    SU(6): Anti Latency=0
SU(6):   $d1 = FMOVXDr $x8
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(5): Anti Latency=0
    SU(4): Data Latency=1 Reg=$x8
    SU(2): Out  Latency=1
  Successors:
    SU(7): Data Latency=1 Reg=$d1
SU(7):   renamable $d0 = FDIVDrr renamable $d0, renamable $d1, debug-location !522; cg.c:357:20
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(6): Data Latency=1 Reg=$d1
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$d0
  Successors:
    SU(8): Data Latency=1 Reg=$d0
SU(8):   STRDui renamable $d0, $sp, 18, debug-location !523 :: (store 8 into %ir.mflops); cg.c:354:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=$d0
ExitSU:   B %bb.57
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 7
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x8 = ADRP target-flags(aarch64-page) %const.1
  Ready @0c
  TopQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 7
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $d0 = LDRDui $sp, 19, debug-location !519 :: (dereferenceable load 8 from %ir.t); cg.c:357:18
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  TopQ.A BotLatency SU(2) 6c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $x8 = MOVZXi 33920, 32
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $x8 = MOVKXi $x8(tied-def 0), 16686, 48
  Ready @4c
  TopQ.A TopLatency SU(4) 2c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 6 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $d0 = FDIVDrr renamable $d1, renamable $d0, debug-location !521; cg.c:356:73
  Ready @6c
  TopQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) $d1 = FMOVXDr $x8
  Ready @7c
  TopQ.A BotLatency SU(6) 2c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $d0 = FDIVDrr renamable $d0, renamable $d1, debug-location !522; cg.c:357:20
  Ready @8c
  TopQ.A TopLatency SU(7) 6c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 8
  Executed: 9c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) STRDui renamable $d0, $sp, 18, debug-location !523 :: (store 8 into %ir.mflops); cg.c:354:16
  Ready @9c
  TopQ.A TopLatency SU(8) 7c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 9
  Executed: 10c
  Critical: 9c, 9 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.55 ***
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) %const.1
SU(0):   renamable $d0 = LDRDui $sp, 19, debug-location !519 :: (dereferenceable load 8 from %ir.t); cg.c:357:18
SU(2):   renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
SU(3):   $x8 = MOVZXi 33920, 32
SU(4):   $x8 = MOVKXi $x8(tied-def 0), 16686, 48
SU(5):   renamable $d0 = FDIVDrr renamable $d1, renamable $d0, debug-location !521; cg.c:356:73
SU(6):   $d1 = FMOVXDr $x8
SU(7):   renamable $d0 = FDIVDrr renamable $d0, renamable $d1, debug-location !522; cg.c:357:20
SU(8):   STRDui renamable $d0, $sp, 18, debug-location !523 :: (store 8 into %ir.mflops); cg.c:354:16

Fixup kills for %bb.55
Fixup kills for %bb.56
********** MI Scheduling **********
main:%bb.57 if.end193
  From: renamable $w1 = LDRSBWui $sp, 132, debug-location !527 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:363:25
    To: BL @print_results, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit $w4, implicit $w5, implicit $d0, implicit $d1, implicit $x6, implicit $w7, implicit-def $sp, debug-location !531; cg.c:363:5
 RegionInstrs: 35
ScheduleDAGMI::schedule starting
SU(0):   renamable $w1 = LDRSBWui $sp, 132, debug-location !527 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:363:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(1):   renamable $d1, renamable $d0 = LDPDi $sp, 18, debug-location !528 :: (dereferenceable load 8 from %ir.t), (dereferenceable load 8 from %ir.mflops); cg.c:363:49
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(2):   renamable $w7 = LDRWui $sp, 32, debug-location !530 :: (dereferenceable load 4 from %ir.verified); cg.c:364:47
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(3):   $x8 = ADRP target-flags(aarch64-page) @.str.31, debug-location !531; cg.c:363:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x8
SU(4):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.31, 0, debug-location !531; cg.c:363:5
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x8
  Successors:
    SU(20): Out  Latency=1
    SU(19): Data Latency=1 Reg=$x8
SU(5):   $x9 = ADRP target-flags(aarch64-page) @.str.30, debug-location !531; cg.c:363:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x9
SU(6):   renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.30, 0, debug-location !531; cg.c:363:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x9
  Successors:
    SU(19): Data Latency=1 Reg=$x9
SU(7):   $x10 = ADRP target-flags(aarch64-page) @.str.29, debug-location !531; cg.c:363:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x10
SU(8):   renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.29, 0, debug-location !531; cg.c:363:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x10
  Successors:
    SU(22): Data Latency=1 Reg=$x10
SU(9):   $x11 = ADRP target-flags(aarch64-page) @.str.28, debug-location !531; cg.c:363:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x11
SU(10):   renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @.str.28, 0, debug-location !531; cg.c:363:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x11
  Successors:
    SU(22): Data Latency=1 Reg=$x11
SU(11):   $x12 = ADRP target-flags(aarch64-page) @.str.27, debug-location !531; cg.c:363:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x12
SU(12):   renamable $x12 = ADDXri $x12, target-flags(aarch64-pageoff, aarch64-nc) @.str.27, 0, debug-location !531; cg.c:363:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x12
  Successors:
    SU(25): Data Latency=1 Reg=$x12
SU(13):   $x13 = ADRP target-flags(aarch64-page) @.str.26, debug-location !531; cg.c:363:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(14): Out  Latency=1
    SU(14): Data Latency=1 Reg=$x13
SU(14):   renamable $x13 = ADDXri $x13, target-flags(aarch64-pageoff, aarch64-nc) @.str.26, 0, debug-location !531; cg.c:363:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x13
  Successors:
    SU(25): Data Latency=1 Reg=$x13
SU(15):   $x14 = ADRP target-flags(aarch64-page) @.str.25, debug-location !531; cg.c:363:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(16): Out  Latency=1
    SU(16): Data Latency=1 Reg=$x14
SU(16):   renamable $x14 = ADDXri $x14, target-flags(aarch64-pageoff, aarch64-nc) @.str.25, 0, debug-location !531; cg.c:363:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(15): Out  Latency=1
    SU(15): Data Latency=1 Reg=$x14
  Successors:
    SU(28): Data Latency=1 Reg=$x14
SU(17):   $x15 = ADRP target-flags(aarch64-page) @.str.24, debug-location !531; cg.c:363:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(18): Out  Latency=1
    SU(18): Data Latency=1 Reg=$x15
SU(18):   renamable $x15 = ADDXri $x15, target-flags(aarch64-pageoff, aarch64-nc) @.str.24, 0, debug-location !531; cg.c:363:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(17): Out  Latency=1
    SU(17): Data Latency=1 Reg=$x15
  Successors:
    SU(28): Data Latency=1 Reg=$x15
SU(19):   STPXi renamable $x9, renamable $x8, $sp, 7, debug-location !531 :: (store 8 into stack + 64), (store 8 into stack + 56); cg.c:363:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(6): Data Latency=1 Reg=$x9
    SU(4): Data Latency=1 Reg=$x8
  Successors:
    SU(20): Anti Latency=0
SU(20):   $x8 = ADRP target-flags(aarch64-page) @.str.23, debug-location !531; cg.c:363:5
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(19): Anti Latency=0
    SU(4): Out  Latency=1
  Successors:
    SU(21): Out  Latency=1
    SU(21): Data Latency=1 Reg=$x8
SU(21):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.23, 0, debug-location !531; cg.c:363:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
    SU(20): Out  Latency=1
    SU(20): Data Latency=1 Reg=$x8
  Successors:
    SU(29): Data Latency=1 Reg=$x8
SU(22):   STPXi renamable $x11, renamable $x10, $sp, 5, debug-location !531 :: (store 8 into stack + 48), (store 8 into stack + 40); cg.c:363:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=$x11
    SU(8): Data Latency=1 Reg=$x10
SU(23):   $x0 = ADRP target-flags(aarch64-page) @.str.21, debug-location !531; cg.c:363:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(24): Out  Latency=1
    SU(24): Data Latency=1 Reg=$x0
SU(24):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.21, 0, debug-location !531; cg.c:363:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(23): Out  Latency=1
    SU(23): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(25):   STPXi renamable $x13, renamable $x12, $sp, 3, debug-location !531 :: (store 8 into stack + 32), (store 8 into stack + 24); cg.c:363:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(14): Data Latency=1 Reg=$x13
    SU(12): Data Latency=1 Reg=$x12
SU(26):   $x6 = ADRP target-flags(aarch64-page) @.str.22, debug-location !531; cg.c:363:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(27): Out  Latency=1
    SU(27): Data Latency=1 Reg=$x6
SU(27):   renamable $x6 = ADDXri $x6, target-flags(aarch64-pageoff, aarch64-nc) @.str.22, 0, debug-location !531; cg.c:363:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(26): Out  Latency=1
    SU(26): Data Latency=1 Reg=$x6
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(28):   STPXi renamable $x15, renamable $x14, $sp, 1, debug-location !531 :: (store 8 into stack + 16), (store 8 into stack + 8); cg.c:363:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(18): Data Latency=1 Reg=$x15
    SU(16): Data Latency=1 Reg=$x14
SU(29):   STRXui renamable $x8, $sp, 0, debug-location !531 :: (store 8 into stack); cg.c:363:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(21): Data Latency=1 Reg=$x8
SU(30):   $w2 = MOVZWi 9464, 0, debug-location !531; cg.c:363:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(31): Out  Latency=1
    SU(31): Data Latency=1 Reg=$w2
SU(31):   $w2 = MOVKWi $w2(tied-def 0), 1, 16, debug-location !531; cg.c:363:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(30): Out  Latency=1
    SU(30): Data Latency=1 Reg=$w2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(32):   $w5 = MOVZWi 75, 0, debug-location !531; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(33):   $w3 = ORRWrs $wzr, $wzr, 0, debug-location !531; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(34):   $w4 = ORRWrs $wzr, $wzr, 0, debug-location !531; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @print_results, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit $w4, implicit $w5, implicit $d0, implicit $d1, implicit $x6, implicit $w7, implicit-def $sp, debug-location !531; cg.c:363:5
  # preds left       : 9
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(34): Ord  Latency=1 Artificial
    SU(33): Ord  Latency=1 Artificial
    SU(32): Ord  Latency=1 Artificial
    SU(31): Ord  Latency=1 Artificial
    SU(27): Ord  Latency=1 Artificial
    SU(24): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=4 Artificial
    SU(1): Ord  Latency=4 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 5 7 9 11 13 15 17 23 26 30 32 33 34 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w1 = LDRSBWui $sp, 132, debug-location !527 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:363:25
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 1 2 3 5 7 9 11 13 15 17 23 26 30 32 33 
  TopQ.A RemainingLatency 0 + 1c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(1) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d1, renamable $d0 = LDPDi $sp, 18, debug-location !528 :: (dereferenceable load 8 from %ir.t), (dereferenceable load 8 from %ir.mflops); cg.c:363:49
  Ready @1c
  TopQ.A BotLatency SU(1) 4c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 2 3 5 7 9 11 13 15 17 23 26 30 32 
  TopQ.A RemainingLatency 0 + 2c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(2) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $w7 = LDRWui $sp, 32, debug-location !530 :: (dereferenceable load 4 from %ir.verified); cg.c:364:47
  Ready @2c
  TopQ.A BotLatency SU(2) 4c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 3 5 7 9 11 13 15 17 23 26 30 
  TopQ.A RemainingLatency 0 + 3c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(3) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) $x8 = ADRP target-flags(aarch64-page) @.str.31, debug-location !531; cg.c:363:5
  Ready @3c
  TopQ.A BotLatency SU(3) 4c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 30 5 7 9 11 13 15 17 23 26 4 
  TopQ.A RemainingLatency 0 + 4c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(30) TOP-PATH                  2 cycles 
  Cand SU(5) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) $x9 = ADRP target-flags(aarch64-page) @.str.30, debug-location !531; cg.c:363:5
  Ready @4c
  TopQ.A BotLatency SU(5) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 30 4 7 9 11 13 15 17 23 26 6 
  TopQ.A RemainingLatency 0 + 5c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(30) TOP-PATH                  2 cycles 
  Cand SU(4) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.31, 0, debug-location !531; cg.c:363:5
  Ready @5c
  TopQ.A TopLatency SU(4) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 30 6 7 9 11 13 15 17 23 26 
  TopQ.A RemainingLatency 0 + 6c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(30) TOP-PATH                  2 cycles 
  Cand SU(6) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.30, 0, debug-location !531; cg.c:363:5
  Ready @6c
  TopQ.A BotLatency SU(6) 3c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 30 26 7 9 11 13 15 17 23 19 
  TopQ.A RemainingLatency 0 + 7c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(30) TOP-PATH                  2 cycles 
  Cand SU(26) ORDER                              
  Cand SU(7) ORDER                              
Pick Top ORDER     
Scheduling SU(7) $x10 = ADRP target-flags(aarch64-page) @.str.29, debug-location !531; cg.c:363:5
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 30 26 19 9 11 13 15 17 23 8 
  TopQ.A RemainingLatency 0 + 8c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(30) TOP-PATH                  2 cycles 
  Cand SU(26) ORDER                              
  Cand SU(19) ORDER                              
  Cand SU(9) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(9) $x11 = ADRP target-flags(aarch64-page) @.str.28, debug-location !531; cg.c:363:5
  Ready @8c
  TopQ.A BotLatency SU(9) 2c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 30 26 19 8 11 13 15 17 23 10 
  TopQ.A RemainingLatency 0 + 9c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(30) TOP-PATH                  2 cycles 
  Cand SU(26) ORDER                              
  Cand SU(19) ORDER                              
  Cand SU(11) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(11) $x12 = ADRP target-flags(aarch64-page) @.str.27, debug-location !531; cg.c:363:5
  Ready @9c
  TopQ.A BotLatency SU(11) 2c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 30 26 19 8 10 13 15 17 23 12 
  TopQ.A RemainingLatency 0 + 10c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(30) TOP-PATH                  2 cycles 
  Cand SU(26) ORDER                              
  Cand SU(19) ORDER                              
  Cand SU(13) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(13) $x13 = ADRP target-flags(aarch64-page) @.str.26, debug-location !531; cg.c:363:5
  Ready @10c
  TopQ.A BotLatency SU(13) 2c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 30 26 19 8 10 12 15 17 23 14 
  TopQ.A RemainingLatency 0 + 11c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(30) TOP-PATH                  2 cycles 
  Cand SU(26) ORDER                              
  Cand SU(19) ORDER                              
  Cand SU(15) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(15) $x14 = ADRP target-flags(aarch64-page) @.str.25, debug-location !531; cg.c:363:5
  Ready @11c
  TopQ.A BotLatency SU(15) 2c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 30 26 19 8 10 12 14 17 23 16 
  TopQ.A RemainingLatency 0 + 12c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(30) TOP-PATH                  2 cycles 
  Cand SU(26) ORDER                              
  Cand SU(19) ORDER                              
  Cand SU(17) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(17) $x15 = ADRP target-flags(aarch64-page) @.str.24, debug-location !531; cg.c:363:5
  Ready @12c
  TopQ.A BotLatency SU(17) 2c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 30 26 19 8 10 12 14 16 23 18 
  TopQ.A RemainingLatency 0 + 13c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(30) TOP-PATH                  2 cycles 
  Cand SU(26) ORDER                              
  Cand SU(19) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(19) STPXi renamable $x9, renamable $x8, $sp, 7, debug-location !531 :: (store 8 into stack + 64), (store 8 into stack + 56); cg.c:363:5
  Ready @13c
  TopQ.A TopLatency SU(19) 2c
  TopQ.A BotLatency SU(19) 2c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 30 26 18 8 10 12 14 16 23 20 
  TopQ.A RemainingLatency 0 + 14c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(30) TOP-PATH                  2 cycles 
  Cand SU(26) ORDER                              
  Cand SU(23) ORDER                              
  Cand SU(20) ORDER                              
Pick Top ORDER     
Scheduling SU(20) $x8 = ADRP target-flags(aarch64-page) @.str.23, debug-location !531; cg.c:363:5
  Ready @14c
  TopQ.A BotLatency SU(20) 2c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 30 26 18 8 10 12 14 16 23 21 
  TopQ.A RemainingLatency 0 + 15c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(30) TOP-PATH                  2 cycles 
  Cand SU(26) ORDER                              
  Cand SU(23) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(23) $x0 = ADRP target-flags(aarch64-page) @.str.21, debug-location !531; cg.c:363:5
  Ready @15c
  TopQ.A BotLatency SU(23) 2c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 30 26 18 8 10 12 14 16 21 24 
  TopQ.A RemainingLatency 0 + 16c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(30) TOP-PATH                  2 cycles 
  Cand SU(26) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(26) $x6 = ADRP target-flags(aarch64-page) @.str.22, debug-location !531; cg.c:363:5
  Ready @16c
  TopQ.A BotLatency SU(26) 2c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 30 24 18 8 10 12 14 16 21 27 
  TopQ.A RemainingLatency 0 + 17c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(30) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(30) $w2 = MOVZWi 9464, 0, debug-location !531; cg.c:363:5
  Ready @17c
  TopQ.A BotLatency SU(30) 2c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 27 24 18 8 10 12 14 16 21 31 
  TopQ.A RemainingLatency 0 + 18c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(27) ORDER                              
  Cand SU(24) ORDER                              
  Cand SU(18) ORDER                              
  Cand SU(8) ORDER                              
Pick Top ORDER     
Scheduling SU(8) renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.29, 0, debug-location !531; cg.c:363:5
  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 27 24 18 31 10 12 14 16 21 
  TopQ.A RemainingLatency 0 + 19c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(27) ORDER                              
  Cand SU(24) ORDER                              
  Cand SU(18) ORDER                              
  Cand SU(10) ORDER                              
Pick Top ORDER     
Scheduling SU(10) renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @.str.28, 0, debug-location !531; cg.c:363:5
  Ready @19c
  TopQ.A BotLatency SU(10) 1c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 27 24 18 31 21 12 14 16 22 
  TopQ.A RemainingLatency 0 + 20c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(27) ORDER                              
  Cand SU(24) ORDER                              
  Cand SU(18) ORDER                              
  Cand SU(12) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(12) renamable $x12 = ADDXri $x12, target-flags(aarch64-pageoff, aarch64-nc) @.str.27, 0, debug-location !531; cg.c:363:5
  Ready @20c
  TopQ.A BotLatency SU(12) 1c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 27 24 18 31 21 22 14 16 
  TopQ.A RemainingLatency 0 + 21c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(27) ORDER                              
  Cand SU(24) ORDER                              
  Cand SU(18) ORDER                              
  Cand SU(14) ORDER                              
Pick Top ORDER     
Scheduling SU(14) renamable $x13 = ADDXri $x13, target-flags(aarch64-pageoff, aarch64-nc) @.str.26, 0, debug-location !531; cg.c:363:5
  Ready @21c
  TopQ.A BotLatency SU(14) 1c
  *** Max MOps 1 at cycle 21
Cycle: 22 TopQ.A
TopQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 27 24 18 31 21 22 16 25 
  TopQ.A RemainingLatency 0 + 22c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(27) ORDER                              
  Cand SU(24) ORDER                              
  Cand SU(18) ORDER                              
  Cand SU(16) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(16) renamable $x14 = ADDXri $x14, target-flags(aarch64-pageoff, aarch64-nc) @.str.25, 0, debug-location !531; cg.c:363:5
  Ready @22c
  TopQ.A BotLatency SU(16) 1c
  *** Max MOps 1 at cycle 22
Cycle: 23 TopQ.A
TopQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 27 24 18 31 21 22 25 
  TopQ.A RemainingLatency 0 + 23c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(27) ORDER                              
  Cand SU(24) ORDER                              
  Cand SU(18) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(18) renamable $x15 = ADDXri $x15, target-flags(aarch64-pageoff, aarch64-nc) @.str.24, 0, debug-location !531; cg.c:363:5
  Ready @23c
  TopQ.A BotLatency SU(18) 1c
  *** Max MOps 1 at cycle 23
Cycle: 24 TopQ.A
TopQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 27 24 25 31 21 22 28 
  TopQ.A RemainingLatency 0 + 24c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(27) ORDER                              
  Cand SU(24) ORDER                              
  Cand SU(21) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(21) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.23, 0, debug-location !531; cg.c:363:5
  Ready @24c
  TopQ.A TopLatency SU(21) 3c
  TopQ.A BotLatency SU(21) 1c
  *** Max MOps 1 at cycle 24
Cycle: 25 TopQ.A
TopQ.A @25c
  Retired: 25
  Executed: 25c
  Critical: 25c, 25 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 27 24 25 31 28 22 29 
  TopQ.A RemainingLatency 0 + 25c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(27) ORDER                              
  Cand SU(24) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(24) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.21, 0, debug-location !531; cg.c:363:5
  Ready @25c
  TopQ.A BotLatency SU(24) 1c
  *** Max MOps 1 at cycle 25
Cycle: 26 TopQ.A
TopQ.A @26c
  Retired: 26
  Executed: 26c
  Critical: 26c, 26 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 27 29 25 31 28 22 
  TopQ.A RemainingLatency 0 + 26c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(27) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(27) renamable $x6 = ADDXri $x6, target-flags(aarch64-pageoff, aarch64-nc) @.str.22, 0, debug-location !531; cg.c:363:5
  Ready @26c
  TopQ.A BotLatency SU(27) 1c
  *** Max MOps 1 at cycle 26
Cycle: 27 TopQ.A
TopQ.A @27c
  Retired: 27
  Executed: 27c
  Critical: 27c, 27 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 22 29 25 31 28 
  TopQ.A RemainingLatency 0 + 27c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(31) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(31) $w2 = MOVKWi $w2(tied-def 0), 1, 16, debug-location !531; cg.c:363:5
  Ready @27c
  TopQ.A BotLatency SU(31) 1c
  *** Max MOps 1 at cycle 27
Cycle: 28 TopQ.A
TopQ.A @28c
  Retired: 28
  Executed: 28c
  Critical: 28c, 28 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 22 29 25 28 
  TopQ.A RemainingLatency 0 + 28c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(32) $w5 = MOVZWi 75, 0, debug-location !531; cg.c:363:5
  Ready @28c
  TopQ.A BotLatency SU(32) 1c
  *** Max MOps 1 at cycle 28
Cycle: 29 TopQ.A
TopQ.A @29c
  Retired: 29
  Executed: 29c
  Critical: 29c, 29 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 28 22 29 25 
  TopQ.A RemainingLatency 0 + 29c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(33) $w3 = ORRWrs $wzr, $wzr, 0, debug-location !531; cg.c:363:5
  Ready @29c
  TopQ.A BotLatency SU(33) 1c
  *** Max MOps 1 at cycle 29
Cycle: 30 TopQ.A
TopQ.A @30c
  Retired: 30
  Executed: 30c
  Critical: 30c, 30 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 25 28 22 29 
  TopQ.A RemainingLatency 0 + 30c > CritPath 4
  Cand SU(34) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(34) $w4 = ORRWrs $wzr, $wzr, 0, debug-location !531; cg.c:363:5
  Ready @30c
  TopQ.A BotLatency SU(34) 1c
  *** Max MOps 1 at cycle 30
Cycle: 31 TopQ.A
TopQ.A @31c
  Retired: 31
  Executed: 31c
  Critical: 31c, 31 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 29 25 28 22 
  TopQ.A RemainingLatency 0 + 31c > CritPath 4
  Cand SU(29) ORDER                              
  Cand SU(25) ORDER                              
  Cand SU(22) ORDER                              
Pick Top ORDER     
Scheduling SU(22) STPXi renamable $x11, renamable $x10, $sp, 5, debug-location !531 :: (store 8 into stack + 48), (store 8 into stack + 40); cg.c:363:5
  Ready @31c
  *** Max MOps 1 at cycle 31
Cycle: 32 TopQ.A
TopQ.A @32c
  Retired: 32
  Executed: 32c
  Critical: 32c, 32 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 29 25 28 
  TopQ.A RemainingLatency 0 + 32c > CritPath 4
  Cand SU(29) ORDER                              
  Cand SU(25) ORDER                              
Pick Top ORDER     
Scheduling SU(25) STPXi renamable $x13, renamable $x12, $sp, 3, debug-location !531 :: (store 8 into stack + 32), (store 8 into stack + 24); cg.c:363:5
  Ready @32c
  *** Max MOps 1 at cycle 32
Cycle: 33 TopQ.A
TopQ.A @33c
  Retired: 33
  Executed: 33c
  Critical: 33c, 33 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 29 28 
  TopQ.A RemainingLatency 0 + 33c > CritPath 4
  Cand SU(29) ORDER                              
  Cand SU(28) ORDER                              
Pick Top ORDER     
Scheduling SU(28) STPXi renamable $x15, renamable $x14, $sp, 1, debug-location !531 :: (store 8 into stack + 16), (store 8 into stack + 8); cg.c:363:5
  Ready @33c
  *** Max MOps 1 at cycle 33
Cycle: 34 TopQ.A
TopQ.A @34c
  Retired: 34
  Executed: 34c
  Critical: 34c, 34 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 29 
Pick Top ONLY1     
Scheduling SU(29) STRXui renamable $x8, $sp, 0, debug-location !531 :: (store 8 into stack); cg.c:363:5
  Ready @34c
  TopQ.A TopLatency SU(29) 4c
  *** Max MOps 1 at cycle 34
Cycle: 35 TopQ.A
TopQ.A @35c
  Retired: 35
  Executed: 35c
  Critical: 35c, 35 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.57 ***
SU(0):   renamable $w1 = LDRSBWui $sp, 132, debug-location !527 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:363:25
SU(1):   renamable $d1, renamable $d0 = LDPDi $sp, 18, debug-location !528 :: (dereferenceable load 8 from %ir.t), (dereferenceable load 8 from %ir.mflops); cg.c:363:49
SU(2):   renamable $w7 = LDRWui $sp, 32, debug-location !530 :: (dereferenceable load 4 from %ir.verified); cg.c:364:47
SU(3):   $x8 = ADRP target-flags(aarch64-page) @.str.31, debug-location !531; cg.c:363:5
SU(5):   $x9 = ADRP target-flags(aarch64-page) @.str.30, debug-location !531; cg.c:363:5
SU(4):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.31, 0, debug-location !531; cg.c:363:5
SU(6):   renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.30, 0, debug-location !531; cg.c:363:5
SU(7):   $x10 = ADRP target-flags(aarch64-page) @.str.29, debug-location !531; cg.c:363:5
SU(9):   $x11 = ADRP target-flags(aarch64-page) @.str.28, debug-location !531; cg.c:363:5
SU(11):   $x12 = ADRP target-flags(aarch64-page) @.str.27, debug-location !531; cg.c:363:5
SU(13):   $x13 = ADRP target-flags(aarch64-page) @.str.26, debug-location !531; cg.c:363:5
SU(15):   $x14 = ADRP target-flags(aarch64-page) @.str.25, debug-location !531; cg.c:363:5
SU(17):   $x15 = ADRP target-flags(aarch64-page) @.str.24, debug-location !531; cg.c:363:5
SU(19):   STPXi renamable $x9, renamable $x8, $sp, 7, debug-location !531 :: (store 8 into stack + 64), (store 8 into stack + 56); cg.c:363:5
SU(20):   $x8 = ADRP target-flags(aarch64-page) @.str.23, debug-location !531; cg.c:363:5
SU(23):   $x0 = ADRP target-flags(aarch64-page) @.str.21, debug-location !531; cg.c:363:5
SU(26):   $x6 = ADRP target-flags(aarch64-page) @.str.22, debug-location !531; cg.c:363:5
SU(30):   $w2 = MOVZWi 9464, 0, debug-location !531; cg.c:363:5
SU(8):   renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.29, 0, debug-location !531; cg.c:363:5
SU(10):   renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @.str.28, 0, debug-location !531; cg.c:363:5
SU(12):   renamable $x12 = ADDXri $x12, target-flags(aarch64-pageoff, aarch64-nc) @.str.27, 0, debug-location !531; cg.c:363:5
SU(14):   renamable $x13 = ADDXri $x13, target-flags(aarch64-pageoff, aarch64-nc) @.str.26, 0, debug-location !531; cg.c:363:5
SU(16):   renamable $x14 = ADDXri $x14, target-flags(aarch64-pageoff, aarch64-nc) @.str.25, 0, debug-location !531; cg.c:363:5
SU(18):   renamable $x15 = ADDXri $x15, target-flags(aarch64-pageoff, aarch64-nc) @.str.24, 0, debug-location !531; cg.c:363:5
SU(21):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.23, 0, debug-location !531; cg.c:363:5
SU(24):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.21, 0, debug-location !531; cg.c:363:5
SU(27):   renamable $x6 = ADDXri $x6, target-flags(aarch64-pageoff, aarch64-nc) @.str.22, 0, debug-location !531; cg.c:363:5
SU(31):   $w2 = MOVKWi $w2(tied-def 0), 1, 16, debug-location !531; cg.c:363:5
SU(32):   $w5 = MOVZWi 75, 0, debug-location !531; cg.c:363:5
SU(33):   $w3 = ORRWrs $wzr, $wzr, 0, debug-location !531; cg.c:363:5
SU(34):   $w4 = ORRWrs $wzr, $wzr, 0, debug-location !531; cg.c:363:5
SU(22):   STPXi renamable $x11, renamable $x10, $sp, 5, debug-location !531 :: (store 8 into stack + 48), (store 8 into stack + 40); cg.c:363:5
SU(25):   STPXi renamable $x13, renamable $x12, $sp, 3, debug-location !531 :: (store 8 into stack + 32), (store 8 into stack + 24); cg.c:363:5
SU(28):   STPXi renamable $x15, renamable $x14, $sp, 1, debug-location !531 :: (store 8 into stack + 16), (store 8 into stack + 8); cg.c:363:5
SU(29):   STRXui renamable $x8, $sp, 0, debug-location !531 :: (store 8 into stack); cg.c:363:5

Fixup kills for %bb.57
********** MI Scheduling **********
main:%bb.58 if.then195
  From: FCMPDri renamable $d0, implicit-def $nzcv, debug-location !541; cg.c:372:13
    To: Bcc 1, %bb.60, implicit $nzcv, debug-location !541; cg.c:372:13
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   FCMPDri renamable $d0, implicit-def $nzcv, debug-location !541; cg.c:372:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(1):   STRDui renamable $d0, $sp, 17, debug-location !537 :: (store 8 into %ir.tmax); cg.c:371:14
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
ExitSU:   Bcc 1, %bb.60, implicit $nzcv, debug-location !541; cg.c:372:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) FCMPDri renamable $d0, implicit-def $nzcv, debug-location !541; cg.c:372:13
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRDui renamable $d0, $sp, 17, debug-location !537 :: (store 8 into %ir.tmax); cg.c:371:14
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.58 ***
SU(0):   FCMPDri renamable $d0, implicit-def $nzcv, debug-location !541; cg.c:372:13
SU(1):   STRDui renamable $d0, $sp, 17, debug-location !537 :: (store 8 into %ir.tmax); cg.c:371:14

Fixup kills for %bb.58
********** MI Scheduling **********
main:%bb.59 if.then199
  From: $x8 = MOVZXi 16368, 48
    To: End RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x8 = MOVZXi 16368, 48
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=$x8
SU(1):   STRXui renamable $x8, $sp, 17, debug-location !542 :: (store 8 into %ir.tmax); cg.c:373:18
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x8 = MOVZXi 16368, 48
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRXui renamable $x8, $sp, 17, debug-location !542 :: (store 8 into %ir.tmax); cg.c:373:18
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.59 ***
SU(0):   $x8 = MOVZXi 16368, 48
SU(1):   STRXui renamable $x8, $sp, 17, debug-location !542 :: (store 8 into %ir.tmax); cg.c:373:18

Fixup kills for %bb.59
********** MI Scheduling **********
main:%bb.60 if.end200
  From: STURWi $wzr, $fp, -116, debug-location !545 :: (store 4 into %ir.i); cg.c:375:16
    To: End RegionInstrs: 11
ScheduleDAGMI::schedule starting
SU(0):   STURWi $wzr, $fp, -116, debug-location !545 :: (store 4 into %ir.i); cg.c:375:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $x23 = ADDXri $sp, 80, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $x19 = ADRP target-flags(aarch64-page) @.str.33
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x19
SU(3):   renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str.33, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $x24 = MOVZXi 16473, 48
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   $x20 = ADRP target-flags(aarch64-page) @.str.34
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x20
SU(6):   renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @.str.34, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x20
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(7):   $x21 = ADRP target-flags(aarch64-page) @.str.35
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x21
SU(8):   renamable $x21 = ADDXri $x21, target-flags(aarch64-pageoff, aarch64-nc) @.str.35, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x21
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(9):   $x22 = ADRP target-flags(aarch64-page) @.str.36
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x22
SU(10):   renamable $x22 = ADDXri $x22, target-flags(aarch64-pageoff, aarch64-nc) @.str.36, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x22
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 4 5 7 9 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(2) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x19 = ADRP target-flags(aarch64-page) @.str.33
  Ready @0c
  TopQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 9 4 5 7 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(9) TOP-PATH                  2 cycles 
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) $x20 = ADRP target-flags(aarch64-page) @.str.34
  Ready @1c
  TopQ.A BotLatency SU(5) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 9 4 3 7 6 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(9) TOP-PATH                  2 cycles 
  Cand SU(7) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(7) $x21 = ADRP target-flags(aarch64-page) @.str.35
  Ready @2c
  TopQ.A BotLatency SU(7) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 9 4 3 6 8 
  TopQ.A RemainingLatency 0 + 3c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(9) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(9) $x22 = ADRP target-flags(aarch64-page) @.str.36
  Ready @3c
  TopQ.A BotLatency SU(9) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 8 4 3 6 10 
  TopQ.A RemainingLatency 0 + 4c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $x23 = ADDXri $sp, 80, 0
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 10 8 4 3 6 
  TopQ.A RemainingLatency 0 + 5c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(10) TOP-PATH                  1 cycles 
  Cand SU(8) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str.33, 0
  Ready @5c
  TopQ.A TopLatency SU(3) 1c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 10 8 4 6 
  TopQ.A RemainingLatency 0 + 6c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(10) TOP-PATH                  1 cycles 
  Cand SU(8) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) $x24 = MOVZXi 16473, 48
  Ready @6c
  TopQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 10 8 6 
  TopQ.A RemainingLatency 0 + 7c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(10) TOP-PATH                  1 cycles 
  Cand SU(8) ORDER                              
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @.str.34, 0
  Ready @7c
  TopQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 10 8 
  TopQ.A RemainingLatency 0 + 8c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(10) TOP-PATH                  1 cycles 
  Cand SU(8) ORDER                              
Pick Top ORDER     
Scheduling SU(8) renamable $x21 = ADDXri $x21, target-flags(aarch64-pageoff, aarch64-nc) @.str.35, 0
  Ready @8c
  TopQ.A BotLatency SU(8) 1c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 10 
  TopQ.A RemainingLatency 0 + 9c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(10) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(10) renamable $x22 = ADDXri $x22, target-flags(aarch64-pageoff, aarch64-nc) @.str.36, 0
  Ready @9c
  TopQ.A BotLatency SU(10) 1c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURWi $wzr, $fp, -116, debug-location !545 :: (store 4 into %ir.i); cg.c:375:16
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.60 ***
SU(2):   $x19 = ADRP target-flags(aarch64-page) @.str.33
SU(5):   $x20 = ADRP target-flags(aarch64-page) @.str.34
SU(7):   $x21 = ADRP target-flags(aarch64-page) @.str.35
SU(9):   $x22 = ADRP target-flags(aarch64-page) @.str.36
SU(1):   $x23 = ADDXri $sp, 80, 0
SU(3):   renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str.33, 0
SU(4):   $x24 = MOVZXi 16473, 48
SU(6):   renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @.str.34, 0
SU(8):   renamable $x21 = ADDXri $x21, target-flags(aarch64-pageoff, aarch64-nc) @.str.35, 0
SU(10):   renamable $x22 = ADDXri $x22, target-flags(aarch64-pageoff, aarch64-nc) @.str.36, 0
SU(0):   STURWi $wzr, $fp, -116, debug-location !545 :: (store 4 into %ir.i); cg.c:375:16

********** MI Scheduling **********
main:%bb.60 if.end200
  From: $x0 = ADRP target-flags(aarch64-page) @.str.32, debug-location !544; cg.c:374:9
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !544; cg.c:374:9
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.32, debug-location !544; cg.c:374:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.32, 0, debug-location !544; cg.c:374:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !544; cg.c:374:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @.str.32, debug-location !544; cg.c:374:9
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.32, 0, debug-location !544; cg.c:374:9
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.60 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.32, debug-location !544; cg.c:374:9
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.32, 0, debug-location !544; cg.c:374:9

Fixup kills for %bb.60
********** MI Scheduling **********
main:%bb.61 for.cond202
  From: renamable $w8 = LDURWi $fp, -116, debug-location !548 :: (dereferenceable load 4 from %ir.i); cg.c:375:21
    To: Bcc 12, %bb.67, implicit $nzcv, debug-location !551; cg.c:375:9
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -116, debug-location !548 :: (dereferenceable load 4 from %ir.i); cg.c:375:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 2, 0, implicit-def $nzcv, debug-location !551; cg.c:375:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.67, implicit $nzcv, debug-location !551; cg.c:375:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -116, debug-location !548 :: (dereferenceable load 4 from %ir.i); cg.c:375:21
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 2, 0, implicit-def $nzcv, debug-location !551; cg.c:375:9
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.61 ***
SU(0):   renamable $w8 = LDURWi $fp, -116, debug-location !548 :: (dereferenceable load 4 from %ir.i); cg.c:375:21
SU(1):   dead $wzr = SUBSWri renamable $w8, 2, 0, implicit-def $nzcv, debug-location !551; cg.c:375:9

Fixup kills for %bb.61
********** MI Scheduling **********
main:%bb.62 for.body205
  From: renamable $x8 = LDURSWi $fp, -116, debug-location !556 :: (dereferenceable load 4 from %ir.i); cg.c:377:17
    To: CBNZW renamable $w8, %bb.64, debug-location !560; cg.c:377:17
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURSWi $fp, -116, debug-location !556 :: (dereferenceable load 4 from %ir.i); cg.c:377:17
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(1): Data Latency=4 Reg=$x8
SU(1):   renamable $x1 = LDRXroX renamable $x23, renamable $x8, 0, 1, debug-location !559 :: (load 8 from %ir.arrayidx211); cg.c:0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(2):   STRDui renamable $d0, $sp, 19, debug-location !555 :: (store 8 into %ir.t); cg.c:376:15
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
ExitSU:   CBNZW renamable $w8, %bb.64, debug-location !560; cg.c:377:17
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 8
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 8
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDURSWi $fp, -116, debug-location !556 :: (dereferenceable load 4 from %ir.i); cg.c:377:17
  Ready @0c
  TopQ.A BotLatency SU(0) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRDui renamable $d0, $sp, 19, debug-location !555 :: (store 8 into %ir.t); cg.c:376:15
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x1 = LDRXroX renamable $x23, renamable $x8, 0, 1, debug-location !559 :: (load 8 from %ir.arrayidx211); cg.c:0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.62 ***
SU(0):   renamable $x8 = LDURSWi $fp, -116, debug-location !556 :: (dereferenceable load 4 from %ir.i); cg.c:377:17
SU(2):   STRDui renamable $d0, $sp, 19, debug-location !555 :: (store 8 into %ir.t); cg.c:376:15
SU(1):   renamable $x1 = LDRXroX renamable $x23, renamable $x8, 0, 1, debug-location !559 :: (load 8 from %ir.arrayidx211); cg.c:0

Fixup kills for %bb.62
Fixup kills for %bb.63
********** MI Scheduling **********
main:%bb.64 if.else213
  From: renamable $w8 = LDURWi $fp, -116, debug-location !570 :: (dereferenceable load 4 from %ir.i); cg.c:383:21
    To: Bcc 1, %bb.66, implicit $nzcv, debug-location !573; cg.c:383:21
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -116, debug-location !570 :: (dereferenceable load 4 from %ir.i); cg.c:383:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 2, 0, implicit-def $nzcv, debug-location !573; cg.c:383:21
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 1, %bb.66, implicit $nzcv, debug-location !573; cg.c:383:21
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -116, debug-location !570 :: (dereferenceable load 4 from %ir.i); cg.c:383:21
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 2, 0, implicit-def $nzcv, debug-location !573; cg.c:383:21
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.64 ***
SU(0):   renamable $w8 = LDURWi $fp, -116, debug-location !570 :: (dereferenceable load 4 from %ir.i); cg.c:383:21
SU(1):   dead $wzr = SUBSWri renamable $w8, 2, 0, implicit-def $nzcv, debug-location !573; cg.c:383:21

********** MI Scheduling **********
main:%bb.64 if.else213
  From: renamable $d1 = LDRDui $sp, 19, debug-location !564 :: (dereferenceable load 8 from %ir.t); cg.c:382:24
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w0, debug-location !569; cg.c:381:17
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $d1 = LDRDui $sp, 19, debug-location !564 :: (dereferenceable load 8 from %ir.t); cg.c:382:24
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d1
SU(1):   renamable $d2 = LDRDui $sp, 17, debug-location !567 :: (dereferenceable load 8 from %ir.tmax); cg.c:382:36
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=$d2
SU(2):   $d3 = FMOVXDr $x24
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(3): Data Latency=1 Reg=$d3
SU(3):   renamable $d1 = FMULDrr renamable $d1, renamable $d3, debug-location !566; cg.c:382:26
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(2): Data Latency=1 Reg=$d3
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d1
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$d1
SU(4):   renamable $d1 = FDIVDrr renamable $d1, renamable $d2, debug-location !568; cg.c:382:34
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$d1
    SU(1): Data Latency=4 Reg=$d2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   $x0 = ORRXrs $xzr, $x20, 0, debug-location !569; cg.c:381:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w0, debug-location !569; cg.c:381:17
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 5 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d1 = LDRDui $sp, 19, debug-location !564 :: (dereferenceable load 8 from %ir.t); cg.c:382:24
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(5) ORDER                              
  Cand SU(1) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d2 = LDRDui $sp, 17, debug-location !567 :: (dereferenceable load 8 from %ir.tmax); cg.c:382:36
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 6
  Cand SU(5) ORDER                              
  Cand SU(2) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $d3 = FMOVXDr $x24
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $x0 = ORRXrs $xzr, $x20, 0, debug-location !569; cg.c:381:17
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $d1 = FMULDrr renamable $d1, renamable $d3, debug-location !566; cg.c:382:26
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $d1 = FDIVDrr renamable $d1, renamable $d2, debug-location !568; cg.c:382:34
  Ready @5c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.64 ***
SU(0):   renamable $d1 = LDRDui $sp, 19, debug-location !564 :: (dereferenceable load 8 from %ir.t); cg.c:382:24
SU(1):   renamable $d2 = LDRDui $sp, 17, debug-location !567 :: (dereferenceable load 8 from %ir.tmax); cg.c:382:36
SU(2):   $d3 = FMOVXDr $x24
SU(5):   $x0 = ORRXrs $xzr, $x20, 0, debug-location !569; cg.c:381:17
SU(3):   renamable $d1 = FMULDrr renamable $d1, renamable $d3, debug-location !566; cg.c:382:26
SU(4):   renamable $d1 = FDIVDrr renamable $d1, renamable $d2, debug-location !568; cg.c:382:34

Fixup kills for %bb.64
********** MI Scheduling **********
main:%bb.65 if.then221
  From: renamable $d1 = LDRDui $sp, 17, debug-location !574 :: (dereferenceable load 8 from %ir.tmax); cg.c:384:25
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w0, debug-location !584; cg.c:385:21
 RegionInstrs: 9
ScheduleDAGMI::schedule starting
SU(0):   renamable $d1 = LDRDui $sp, 17, debug-location !574 :: (dereferenceable load 8 from %ir.tmax); cg.c:384:25
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$d1
    SU(3): Data Latency=4 Reg=$d1
SU(1):   renamable $d0 = LDRDui $sp, 19, debug-location !576 :: (dereferenceable load 8 from %ir.t); cg.c:384:32
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d0
    SU(4): Ord  Latency=0 Memory
SU(2):   $d2 = FMOVXDr $x24
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$d2
SU(3):   renamable $d0 = FSUBDrr renamable $d1, renamable $d0, debug-location !577; cg.c:384:30
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$d0
    SU(0): Data Latency=4 Reg=$d1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(5): Data Latency=1 Reg=$d0
    SU(4): Data Latency=1 Reg=$d0
    SU(6): Anti Latency=0
SU(4):   STRDui renamable $d0, $sp, 19, debug-location !578 :: (store 8 into %ir.t); cg.c:384:23
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=$d0
    SU(1): Ord  Latency=0 Memory
SU(5):   renamable $d2 = FMULDrr renamable $d0, renamable $d2, debug-location !581; cg.c:386:30
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1 Reg=$d0
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$d2
  Successors:
    SU(6): Data Latency=1 Reg=$d2
SU(6):   renamable $d1 = FDIVDrr renamable $d2, renamable $d1, debug-location !583; cg.c:386:38
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(5): Data Latency=1 Reg=$d2
    SU(3): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(7):   $x0 = ORRXrs $xzr, $x21, 0, debug-location !584; cg.c:385:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(8):   $x1 = ORRXrs $xzr, $x22, 0, debug-location !584; cg.c:385:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w0, debug-location !584; cg.c:385:21
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=1 Artificial
    SU(7): Ord  Latency=1 Artificial
    SU(6): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 7 8 
  TopQ.A RemainingLatency 0 + 0c > CritPath 7
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d1 = LDRDui $sp, 17, debug-location !574 :: (dereferenceable load 8 from %ir.tmax); cg.c:384:25
  Ready @0c
  TopQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 1 2 7 
  TopQ.A RemainingLatency 0 + 1c > CritPath 7
  Cand SU(8) ORDER                              
  Cand SU(1) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d0 = LDRDui $sp, 19, debug-location !576 :: (dereferenceable load 8 from %ir.t); cg.c:384:32
  Ready @1c
  TopQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 8 7 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 7
  Cand SU(8) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(2) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $d2 = FMOVXDr $x24
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 8 7 
  TopQ.A RemainingLatency 0 + 3c > CritPath 7
  Cand SU(8) ORDER                              
  Cand SU(7) ORDER                              
Pick Top ORDER     
Scheduling SU(7) $x0 = ORRXrs $xzr, $x21, 0, debug-location !584; cg.c:385:21
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) $x1 = ORRXrs $xzr, $x22, 0, debug-location !584; cg.c:385:21
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $d0 = FSUBDrr renamable $d1, renamable $d0, debug-location !577; cg.c:384:30
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 
  TopQ.A RemainingLatency 0 + 6c > CritPath 7
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) renamable $d2 = FMULDrr renamable $d0, renamable $d2, debug-location !581; cg.c:386:30
  Ready @6c
  TopQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 6 
  TopQ.A RemainingLatency 0 + 7c > CritPath 7
  Cand SU(4) ORDER                              
  Cand SU(6) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) renamable $d1 = FDIVDrr renamable $d2, renamable $d1, debug-location !583; cg.c:386:38
  Ready @7c
  TopQ.A TopLatency SU(6) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) STRDui renamable $d0, $sp, 19, debug-location !578 :: (store 8 into %ir.t); cg.c:384:23
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.65 ***
SU(0):   renamable $d1 = LDRDui $sp, 17, debug-location !574 :: (dereferenceable load 8 from %ir.tmax); cg.c:384:25
SU(1):   renamable $d0 = LDRDui $sp, 19, debug-location !576 :: (dereferenceable load 8 from %ir.t); cg.c:384:32
SU(2):   $d2 = FMOVXDr $x24
SU(7):   $x0 = ORRXrs $xzr, $x21, 0, debug-location !584; cg.c:385:21
SU(8):   $x1 = ORRXrs $xzr, $x22, 0, debug-location !584; cg.c:385:21
SU(3):   renamable $d0 = FSUBDrr renamable $d1, renamable $d0, debug-location !577; cg.c:384:30
SU(5):   renamable $d2 = FMULDrr renamable $d0, renamable $d2, debug-location !581; cg.c:386:30
SU(6):   renamable $d1 = FDIVDrr renamable $d2, renamable $d1, debug-location !583; cg.c:386:38
SU(4):   STRDui renamable $d0, $sp, 19, debug-location !578 :: (store 8 into %ir.t); cg.c:384:23

Fixup kills for %bb.65
********** MI Scheduling **********
main:%bb.66 for.inc228
  From: renamable $w8 = LDURWi $fp, -116, debug-location !586 :: (dereferenceable load 4 from %ir.i); cg.c:375:34
    To: B %bb.61
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -116, debug-location !586 :: (dereferenceable load 4 from %ir.i); cg.c:375:34
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !586; cg.c:375:34
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STURWi renamable $w8, $fp, -116, debug-location !586 :: (store 4 into %ir.i); cg.c:375:34
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.61
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -116, debug-location !586 :: (dereferenceable load 4 from %ir.i); cg.c:375:34
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !586; cg.c:375:34
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w8, $fp, -116, debug-location !586 :: (store 4 into %ir.i); cg.c:375:34
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.66 ***
SU(0):   renamable $w8 = LDURWi $fp, -116, debug-location !586 :: (dereferenceable load 4 from %ir.i); cg.c:375:34
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !586; cg.c:375:34
SU(2):   STURWi renamable $w8, $fp, -116, debug-location !586 :: (store 4 into %ir.i); cg.c:375:34

Fixup kills for %bb.66
********** MI Scheduling **********
main:%bb.67 do.end235
  From: $w0 = ORRWrs $wzr, $wzr, 0, debug-location !590; cg.c:394:5
    To: $sp = frame-destroy ADDXri $sp, 336, 0, debug-location !590; cg.c:394:5
 RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   $w0 = ORRWrs $wzr, $wzr, 0, debug-location !590; cg.c:394:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $fp, $lr = frame-destroy LDPXi $sp, 40, debug-location !590 :: (load 8 from %stack.23), (load 8 from %stack.22); cg.c:394:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(2):   $x20, $x19 = frame-destroy LDPXi $sp, 38, debug-location !590 :: (load 8 from %stack.25), (load 8 from %stack.24); cg.c:394:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(3):   $x22, $x21 = frame-destroy LDPXi $sp, 36, debug-location !590 :: (load 8 from %stack.27), (load 8 from %stack.26); cg.c:394:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(4):   $x24, $x23 = frame-destroy LDPXi $sp, 34, debug-location !590 :: (load 8 from %stack.29), (load 8 from %stack.28); cg.c:394:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(5):   $x26, $x25 = frame-destroy LDPXi $sp, 32, debug-location !590 :: (load 8 from %stack.31), (load 8 from %stack.30); cg.c:394:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(6):   $x28, $x27 = frame-destroy LDPXi $sp, 30, debug-location !590 :: (load 8 from %stack.33), (load 8 from %stack.32); cg.c:394:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(7):   $d8 = frame-destroy LDRDui $sp, 28, debug-location !590 :: (load 8 from %stack.34); cg.c:394:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
ExitSU:   $sp = frame-destroy ADDXri $sp, 336, 0, debug-location !590; cg.c:394:5
  # preds left       : 7
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=3 Artificial
    SU(6): Ord  Latency=3 Artificial
    SU(5): Ord  Latency=3 Artificial
    SU(4): Ord  Latency=3 Artificial
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
Critical Path: (PGS-RR) 3
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 7 
  TopQ.A RemainingLatency 0 + 0c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $fp, $lr = frame-destroy LDPXi $sp, 40, debug-location !590 :: (load 8 from %stack.23), (load 8 from %stack.22); cg.c:394:5
  Ready @0c
  TopQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 7 2 3 4 5 6 
  TopQ.A RemainingLatency 0 + 1c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(7) TOP-PATH                  3 cycles 
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) $x20, $x19 = frame-destroy LDPXi $sp, 38, debug-location !590 :: (load 8 from %stack.25), (load 8 from %stack.24); cg.c:394:5
  Ready @1c
  TopQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 7 6 3 4 5 
  TopQ.A RemainingLatency 0 + 2c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(7) TOP-PATH                  3 cycles 
  Cand SU(6) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) $x22, $x21 = frame-destroy LDPXi $sp, 36, debug-location !590 :: (load 8 from %stack.27), (load 8 from %stack.26); cg.c:394:5
  Ready @2c
  TopQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 7 6 5 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(7) TOP-PATH                  3 cycles 
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) $x24, $x23 = frame-destroy LDPXi $sp, 34, debug-location !590 :: (load 8 from %stack.29), (load 8 from %stack.28); cg.c:394:5
  Ready @3c
  TopQ.A BotLatency SU(4) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 7 6 5 
  TopQ.A RemainingLatency 0 + 4c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(7) TOP-PATH                  3 cycles 
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) $x26, $x25 = frame-destroy LDPXi $sp, 32, debug-location !590 :: (load 8 from %stack.31), (load 8 from %stack.30); cg.c:394:5
  Ready @4c
  TopQ.A BotLatency SU(5) 3c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 7 6 
  TopQ.A RemainingLatency 0 + 5c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(7) TOP-PATH                  3 cycles 
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) $x28, $x27 = frame-destroy LDPXi $sp, 30, debug-location !590 :: (load 8 from %stack.33), (load 8 from %stack.32); cg.c:394:5
  Ready @5c
  TopQ.A BotLatency SU(6) 3c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 7 
  TopQ.A RemainingLatency 0 + 6c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(7) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) $d8 = frame-destroy LDRDui $sp, 28, debug-location !590 :: (load 8 from %stack.34); cg.c:394:5
  Ready @6c
  TopQ.A BotLatency SU(7) 3c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $w0 = ORRWrs $wzr, $wzr, 0, debug-location !590; cg.c:394:5
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.67 ***
SU(1):   $fp, $lr = frame-destroy LDPXi $sp, 40, debug-location !590 :: (load 8 from %stack.23), (load 8 from %stack.22); cg.c:394:5
SU(2):   $x20, $x19 = frame-destroy LDPXi $sp, 38, debug-location !590 :: (load 8 from %stack.25), (load 8 from %stack.24); cg.c:394:5
SU(3):   $x22, $x21 = frame-destroy LDPXi $sp, 36, debug-location !590 :: (load 8 from %stack.27), (load 8 from %stack.26); cg.c:394:5
SU(4):   $x24, $x23 = frame-destroy LDPXi $sp, 34, debug-location !590 :: (load 8 from %stack.29), (load 8 from %stack.28); cg.c:394:5
SU(5):   $x26, $x25 = frame-destroy LDPXi $sp, 32, debug-location !590 :: (load 8 from %stack.31), (load 8 from %stack.30); cg.c:394:5
SU(6):   $x28, $x27 = frame-destroy LDPXi $sp, 30, debug-location !590 :: (load 8 from %stack.33), (load 8 from %stack.32); cg.c:394:5
SU(7):   $d8 = frame-destroy LDRDui $sp, 28, debug-location !590 :: (load 8 from %stack.34); cg.c:394:5
SU(0):   $w0 = ORRWrs $wzr, $wzr, 0, debug-location !590; cg.c:394:5

Fixup kills for %bb.67
Before MISched:
# Machine code for function makea: NoPHIs, TracksLiveness
Frame Objects:
  fi#-5: size=8, align=16, fixed, at location [SP+32]
  fi#-4: size=8, align=8, fixed, at location [SP+24]
  fi#-3: size=8, align=16, fixed, at location [SP+16]
  fi#-2: size=8, align=8, fixed, at location [SP+8]
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=8, align=8, at location [SP]
  fi#4: size=8, align=8, at location [SP]
  fi#5: size=4, align=4, at location [SP]
  fi#6: size=4, align=4, at location [SP]
  fi#7: size=4, align=4, at location [SP]
  fi#8: dead
  fi#9: dead
  fi#10: dead
  fi#11: dead
  fi#12: dead
  fi#13: size=4, align=4, at location [SP]
  fi#14: size=4, align=4, at location [SP]
  fi#15: size=4, align=4, at location [SP]
  fi#16: size=4, align=4, at location [SP]
  fi#17: size=56, align=16, at location [SP]
  fi#18: size=112, align=16, at location [SP]
Constant Pool:
  cp#0: 1.000000e-01, align=8
Function Live Ins: $w0 in %0, $w1 in %1, $x2 in %2, $x3 in %3, $x4 in %4, $w5 in %5, $w6 in %6, $w7 in %7

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $w0, $w1, $x2, $x3, $x4, $w5, $w6, $w7
  %7:gpr32 = COPY $w7
  %6:gpr32 = COPY $w6
  %5:gpr32 = COPY $w5
  %4:gpr64 = COPY $x4
  %3:gpr64 = COPY $x3
  %2:gpr64 = COPY $x2
  %1:gpr32 = COPY $w1
  %0:gpr32 = COPY $w0
  STRWui %0:gpr32, %stack.0.n.addr, 0 :: (store 4 into %ir.n.addr)
  STRWui %1:gpr32, %stack.1.nz.addr, 0 :: (store 4 into %ir.nz.addr)
  STRXui %2:gpr64, %stack.2.a.addr, 0 :: (store 8 into %ir.a.addr)
  STRXui %3:gpr64, %stack.3.colidx.addr, 0 :: (store 8 into %ir.colidx.addr)
  STRXui %4:gpr64, %stack.4.rowstr.addr, 0 :: (store 8 into %ir.rowstr.addr)
  STRWui %5:gpr32, %stack.5.firstrow.addr, 0 :: (store 4 into %ir.firstrow.addr)
  STRWui %6:gpr32, %stack.6.lastrow.addr, 0 :: (store 4 into %ir.lastrow.addr)
  STRWui %7:gpr32, %stack.7.firstcol.addr, 0 :: (store 4 into %ir.firstcol.addr)
  %8:gpr32 = MOVi32imm 1
  STRWui %8:gpr32, %stack.16.nn1, 0, debug-location !634 :: (store 4 into %ir.nn1); cg.c:609:9

bb.1.do.body:
; predecessors: %bb.0, %bb.1
  successors: %bb.1(0x7c000000), %bb.2(0x04000000); %bb.1(96.88%), %bb.2(3.12%)

  %9:gpr32 = LDRWui %stack.16.nn1, 0, debug-location !636 :: (dereferenceable load 4 from %ir.nn1); cg.c:611:19
  %10:gpr32 = UBFMWri %9:gpr32, 31, 30, debug-location !638; cg.c:611:17
  STRWui %10:gpr32, %stack.16.nn1, 0, debug-location !639 :: (store 4 into %ir.nn1); cg.c:611:13
  %11:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !641 :: (dereferenceable load 4 from %ir.n.addr); cg.c:612:20
  dead $wzr = SUBSWrr %10:gpr32, %11:gpr32, implicit-def $nzcv, debug-location !643; cg.c:612:5
  Bcc 11, %bb.1, implicit killed $nzcv, debug-location !643; cg.c:612:5
  B %bb.2, debug-location !643; cg.c:612:5

bb.2.do.end:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  STRWui $wzr, %stack.13.iouter, 0, debug-location !646 :: (store 4 into %ir.iouter); cg.c:617:17
  %34:gpr32 = MOVi32imm 13
  %37:gpr64sp = ADDXri %stack.18.vc, 0, 0
  %38:gpr64sp = ADDXri %stack.17.ivc, 0, 0
  %43:fpr64 = FMOVDi 96
  undef %61.sub_32:gpr64 = MOVi32imm 56
  undef %71.sub_32:gpr64 = MOVi32imm 112

bb.3.for.cond:
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %14:gpr32 = LDRWui %stack.13.iouter, 0, debug-location !649 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:22
  %15:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !651 :: (dereferenceable load 4 from %ir.n.addr); cg.c:617:31
  dead $wzr = SUBSWrr %14:gpr32, %15:gpr32, implicit-def $nzcv, debug-location !653; cg.c:617:5
  Bcc 10, %bb.8, implicit killed $nzcv, debug-location !653; cg.c:617:5
  B %bb.4, debug-location !653; cg.c:617:5

bb.4.for.body:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  STRWui %34:gpr32, %stack.15.nzv, 0, debug-location !654 :: (store 4 into %ir.nzv); cg.c:618:13
  %35:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !656 :: (dereferenceable load 4 from %ir.n.addr); cg.c:619:16
  %36:gpr32 = LDRWui %stack.16.nn1, 0, debug-location !658 :: (dereferenceable load 4 from %ir.nn1); cg.c:619:24
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !661; cg.c:619:9
  $w0 = COPY %35:gpr32, debug-location !661; cg.c:619:9
  $w1 = MOVi32imm 13, debug-location !661; cg.c:619:9
  $w2 = COPY %36:gpr32, debug-location !661; cg.c:619:9
  $x3 = ADDXri %stack.18.vc, 0, 0, debug-location !661; cg.c:619:9
  $x4 = ADDXri %stack.17.ivc, 0, 0, debug-location !661; cg.c:619:9
  BL @sprnvc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $w1, implicit $w2, implicit $x3, implicit $x4, implicit-def $sp, debug-location !661; cg.c:619:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !661; cg.c:619:9
  %39:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !662 :: (dereferenceable load 4 from %ir.n.addr); cg.c:620:16
  %40:gpr32common = LDRWui %stack.13.iouter, 0, debug-location !665 :: (dereferenceable load 4 from %ir.iouter); cg.c:620:34
  %41:gpr32sp = nsw ADDWri %40:gpr32common, 1, 0, debug-location !666; cg.c:620:41
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !667; cg.c:620:9
  $w0 = COPY %39:gpr32, debug-location !667; cg.c:620:9
  $x1 = ADDXri %stack.18.vc, 0, 0, debug-location !667; cg.c:620:9
  $x2 = ADDXri %stack.17.ivc, 0, 0, debug-location !667; cg.c:620:9
  $x3 = ADDXri %stack.15.nzv, 0, 0, debug-location !667; cg.c:620:9
  $w4 = COPY %41:gpr32sp, debug-location !667; cg.c:620:9
  $d0 = COPY %43:fpr64, debug-location !667; cg.c:620:9
  BL @vecset, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit $x2, implicit $x3, implicit $w4, implicit killed $d0, implicit-def $sp, debug-location !667; cg.c:620:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !667; cg.c:620:9
  %44:gpr32 = LDRWui %stack.15.nzv, 0, debug-location !668 :: (dereferenceable load 4 from %ir.nzv); cg.c:621:24
  %45:gpr64common = LDRXui %fixed-stack.3, 0, debug-location !669 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:621:9
  %46:gpr64 = LDRSWui %stack.13.iouter, 0, debug-location !670 :: (dereferenceable load 4 from %ir.iouter); cg.c:621:14
  STRWroX %44:gpr32, %45:gpr64common, %46:gpr64, 0, 1, debug-location !671 :: (store 4 into %ir.arrayidx); cg.c:621:22
  STRWui $wzr, %stack.14.ivelt, 0, debug-location !672 :: (store 4 into %ir.ivelt); cg.c:623:20

bb.5.for.cond5:
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %48:gpr32 = LDRWui %stack.14.ivelt, 0, debug-location !675 :: (dereferenceable load 4 from %ir.ivelt); cg.c:623:25
  %49:gpr32 = LDRWui %stack.15.nzv, 0, debug-location !677 :: (dereferenceable load 4 from %ir.nzv); cg.c:623:33
  dead $wzr = SUBSWrr %48:gpr32, %49:gpr32, implicit-def $nzcv, debug-location !679; cg.c:623:9
  Bcc 10, %bb.7, implicit killed $nzcv, debug-location !679; cg.c:623:9
  B %bb.6, debug-location !679; cg.c:623:9

bb.6.for.body7:
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %53:gpr64 = LDRSWui %stack.14.ivelt, 0, debug-location !680 :: (dereferenceable load 4 from %ir.ivelt); cg.c:624:39
  %54:gpr64 = UBFMXri %53:gpr64, 62, 61, debug-location !682; cg.c:624:35
  %56:gpr32common = LDRWroX %38:gpr64sp, %54:gpr64, 0, 0, debug-location !682 :: (load 4 from %ir.arrayidx9); cg.c:624:35
  %57:gpr32common = SUBWri %56:gpr32common, 1, 0, debug-location !683; cg.c:624:46
  %58:gpr64 = LDRXui %fixed-stack.2, 0, debug-location !684 :: (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:624:13
  %59:gpr64 = LDRSWui %stack.13.iouter, 0, debug-location !685 :: (dereferenceable load 4 from %ir.iouter); cg.c:624:18
  %63:gpr64common = MADDXrrr %59:gpr64, %61:gpr64, %58:gpr64, debug-location !684; cg.c:624:13
  STRWroX %57:gpr32common, %63:gpr64common, %54:gpr64, 0, 0, debug-location !687 :: (store 4 into %ir.arrayidx13); cg.c:624:33
  %64:gpr64 = LDRSWui %stack.14.ivelt, 0, debug-location !688 :: (dereferenceable load 4 from %ir.ivelt); cg.c:625:38
  %65:gpr64 = UBFMXri %64:gpr64, 61, 60, debug-location !689; cg.c:625:35
  %67:fpr64 = LDRDroX %37:gpr64sp, %65:gpr64, 0, 0, debug-location !689 :: (load 8 from %ir.arrayidx15); cg.c:625:35
  %68:gpr64 = LDRXui %fixed-stack.1, 0, debug-location !690 :: (dereferenceable load 8 from %ir.aelt.addr); cg.c:625:13
  %69:gpr64 = LDRSWui %stack.13.iouter, 0, debug-location !691 :: (dereferenceable load 4 from %ir.iouter); cg.c:625:18
  %73:gpr64common = MADDXrrr %69:gpr64, %71:gpr64, %68:gpr64, debug-location !690; cg.c:625:13
  STRDroX %67:fpr64, %73:gpr64common, %65:gpr64, 0, 0, debug-location !693 :: (store 8 into %ir.arrayidx19); cg.c:625:33
  %74:gpr32common = LDRWui %stack.14.ivelt, 0, debug-location !694 :: (dereferenceable load 4 from %ir.ivelt); cg.c:623:43
  %75:gpr32common = nsw ADDWri %74:gpr32common, 1, 0, debug-location !694; cg.c:623:43
  STRWui %75:gpr32common, %stack.14.ivelt, 0, debug-location !694 :: (store 4 into %ir.ivelt); cg.c:623:43
  B %bb.5, debug-location !695; cg.c:623:9

bb.7.for.inc20:
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %51:gpr32common = LDRWui %stack.13.iouter, 0, debug-location !698 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:40
  %52:gpr32common = nsw ADDWri %51:gpr32common, 1, 0, debug-location !698; cg.c:617:40
  STRWui %52:gpr32common, %stack.13.iouter, 0, debug-location !698 :: (store 4 into %ir.iouter); cg.c:617:40
  B %bb.3, debug-location !699; cg.c:617:5

bb.8.for.end22:
; predecessors: %bb.3

  %17:gpr64 = LDRXui %stack.2.a.addr, 0, debug-location !702 :: (dereferenceable load 8 from %ir.a.addr); cg.c:633:12
  %18:gpr64 = LDRXui %stack.3.colidx.addr, 0, debug-location !703 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:633:15
  %19:gpr64 = LDRXui %stack.4.rowstr.addr, 0, debug-location !704 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:633:23
  %20:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !705 :: (dereferenceable load 4 from %ir.n.addr); cg.c:633:31
  %21:gpr32 = LDRWui %stack.1.nz.addr, 0, debug-location !706 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:633:34
  %22:gpr64 = LDRXui %fixed-stack.3, 0, debug-location !707 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:633:46
  %23:gpr64 = LDRXui %fixed-stack.2, 0, debug-location !708 :: (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:633:52
  %24:gpr64 = LDRXui %fixed-stack.1, 0, debug-location !709 :: (dereferenceable load 8 from %ir.aelt.addr); cg.c:633:58
  %25:gpr32 = LDRWui %stack.5.firstrow.addr, 0, debug-location !710 :: (dereferenceable load 4 from %ir.firstrow.addr); cg.c:633:64
  %26:gpr32 = LDRWui %stack.6.lastrow.addr, 0, debug-location !711 :: (dereferenceable load 4 from %ir.lastrow.addr); cg.c:634:12
  %27:gpr64 = LDRXui %fixed-stack.0, 0, debug-location !712 :: (dereferenceable load 8 from %ir.iv.addr, align 16); cg.c:634:21
  ADJCALLSTACKDOWN 32, 0, implicit-def dead $sp, implicit $sp, debug-location !713; cg.c:633:5
  STRXui %27:gpr64, $sp, 3, debug-location !713 :: (store 8 into stack + 24); cg.c:633:5
  STRWui %26:gpr32, $sp, 4, debug-location !713 :: (store 4 into stack + 16); cg.c:633:5
  STRWui %25:gpr32, $sp, 2, debug-location !713 :: (store 4 into stack + 8); cg.c:633:5
  STRXui %24:gpr64, $sp, 0, debug-location !713 :: (store 8 into stack); cg.c:633:5
  %29:gpr64common = ADRP target-flags(aarch64-page) %const.0
  %30:fpr64 = LDRDui %29:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  %31:gpr64 = MOVi64imm 4633641066610819072
  %32:fpr64 = COPY %31:gpr64
  $x0 = COPY %17:gpr64, debug-location !713; cg.c:633:5
  $x1 = COPY %18:gpr64, debug-location !713; cg.c:633:5
  $x2 = COPY %19:gpr64, debug-location !713; cg.c:633:5
  $w3 = COPY %20:gpr32, debug-location !713; cg.c:633:5
  $w4 = COPY %21:gpr32, debug-location !713; cg.c:633:5
  $w5 = MOVi32imm 13, debug-location !713; cg.c:633:5
  $x6 = COPY %22:gpr64, debug-location !713; cg.c:633:5
  $x7 = COPY %23:gpr64, debug-location !713; cg.c:633:5
  $d0 = COPY %30:fpr64, debug-location !713; cg.c:633:5
  $d1 = COPY %32:fpr64, debug-location !713; cg.c:633:5
  BL @sparse, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $w3, implicit $w4, implicit $w5, implicit $x6, implicit $x7, implicit killed $d0, implicit killed $d1, implicit-def $sp, debug-location !713; cg.c:633:5
  ADJCALLSTACKUP 32, 0, implicit-def dead $sp, implicit $sp, debug-location !713; cg.c:633:5
  RET_ReallyLR debug-location !714; cg.c:635:1

# End machine code for function makea.

********** MI Scheduling **********
makea:%bb.0 entry
  From: %7:gpr32 = COPY $w7
    To: End RegionInstrs: 18
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR32arg=8
tcGPR64=8
GPR32=8
Live In: W0 W1 W2 W3 W4 W5 W6 W7 
Live Out: 
Live Thru: 
Top Pressure:
GPR32arg=8
tcGPR64=8
GPR32=8
Bottom Pressure:

Excess PSets: 
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %7:gpr32 = COPY $w7
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(15): Data Latency=0 Reg=%7
  Pressure Diff      : GPR32arg 1    tcGPR64 1
  Single Issue       : false;
SU(1):   %6:gpr32 = COPY $w6
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(14): Data Latency=0 Reg=%6
  Pressure Diff      : GPR32arg 1    tcGPR64 1
  Single Issue       : false;
SU(2):   %5:gpr32 = COPY $w5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(13): Data Latency=0 Reg=%5
  Pressure Diff      : GPR32arg 1    tcGPR64 1
  Single Issue       : false;
SU(3):   %4:gpr64 = COPY $x4
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(12): Data Latency=0 Reg=%4
  Pressure Diff      : GPR32arg 1    tcGPR64 1
  Single Issue       : false;
SU(4):   %3:gpr64 = COPY $x3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(11): Data Latency=0 Reg=%3
  Pressure Diff      : GPR32arg 1    tcGPR64 1
  Single Issue       : false;
SU(5):   %2:gpr64 = COPY $x2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(10): Data Latency=0 Reg=%2
  Pressure Diff      : GPR32arg 1    tcGPR64 1
  Single Issue       : false;
SU(6):   %1:gpr32 = COPY $w1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(9): Data Latency=0 Reg=%1
  Pressure Diff      : GPR32arg 1    tcGPR64 1
  Single Issue       : false;
SU(7):   %0:gpr32 = COPY $w0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(8): Data Latency=0 Reg=%0
  Pressure Diff      : GPR32arg 1    tcGPR64 1
  Single Issue       : false;
SU(8):   STRWui %0:gpr32, %stack.0.n.addr, 0 :: (store 4 into %ir.n.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(7): Data Latency=0 Reg=%0
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(9):   STRWui %1:gpr32, %stack.1.nz.addr, 0 :: (store 4 into %ir.nz.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(6): Data Latency=0 Reg=%1
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(10):   STRXui %2:gpr64, %stack.2.a.addr, 0 :: (store 8 into %ir.a.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(5): Data Latency=0 Reg=%2
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(11):   STRXui %3:gpr64, %stack.3.colidx.addr, 0 :: (store 8 into %ir.colidx.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(4): Data Latency=0 Reg=%3
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(12):   STRXui %4:gpr64, %stack.4.rowstr.addr, 0 :: (store 8 into %ir.rowstr.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Data Latency=0 Reg=%4
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(13):   STRWui %5:gpr32, %stack.5.firstrow.addr, 0 :: (store 4 into %ir.firstrow.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Data Latency=0 Reg=%5
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(14):   STRWui %6:gpr32, %stack.6.lastrow.addr, 0 :: (store 4 into %ir.lastrow.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%6
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(15):   STRWui %7:gpr32, %stack.7.firstcol.addr, 0 :: (store 4 into %ir.firstcol.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%7
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(16):   %8:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(17): Data Latency=1 Reg=%8
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(17):   STRWui %8:gpr32, %stack.16.nn1, 0, debug-location !634 :: (store 4 into %ir.nn1); cg.c:609:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(16): Data Latency=1 Reg=%8
  Pressure Diff      : GPR32 1
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 15 14 13 12 11 10 9 8 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 7 16 
Picking from Bot:
  Cand SU(17) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %7:gpr32 = COPY $w7
Top Pressure:
GPR32arg=7
tcGPR64=7
GPR32=8
  GPR32arg: 8 <= 8(+ 0 livethru)
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 15 14 13 12 11 10 9 8 
Queue TopQ.P: 
Queue TopQ.A: 16 1 2 3 4 5 6 7 15 
Picking from Bot:
  Cand SU(17) ORDER                              
Picking from Top:
  Cand SU(16) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(1) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(1) %6:gpr32 = COPY $w6
Top Pressure:
GPR32arg=6
tcGPR64=6
GPR32=8
  GPR32arg: 8 <= 8(+ 0 livethru)
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 15 14 13 12 11 10 9 8 
Queue TopQ.P: 
Queue TopQ.A: 16 15 2 3 4 5 6 7 14 
Picking from Bot:
  Cand SU(17) ORDER                              
Picking from Top:
  Cand SU(16) ORDER                              
  Cand SU(15) REG-MAX                            
  Cand SU(2) PHYS-REG                           
  Cand SU(2) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(2) %5:gpr32 = COPY $w5
Top Pressure:
GPR32arg=5
tcGPR64=5
GPR32=8
  GPR32arg: 8 <= 8(+ 0 livethru)
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 15 14 13 12 11 10 9 8 
Queue TopQ.P: 
Queue TopQ.A: 16 15 14 3 4 5 6 7 13 
Picking from Bot:
  Cand SU(17) ORDER                              
Picking from Top:
  Cand SU(16) ORDER                              
  Cand SU(15) REG-MAX                            
  Cand SU(14) ORDER                              
  Cand SU(3) PHYS-REG                           
  Cand SU(3) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(3) %4:gpr64 = COPY $x4
Top Pressure:
GPR32arg=4
tcGPR64=4
GPR32=8
  GPR32arg: 8 <= 8(+ 0 livethru)
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 15 14 13 12 11 10 9 8 
Queue TopQ.P: 
Queue TopQ.A: 16 15 14 13 4 5 6 7 12 
Picking from Bot:
  Cand SU(17) ORDER                              
Picking from Top:
  Cand SU(16) ORDER                              
  Cand SU(15) REG-MAX                            
  Cand SU(14) ORDER                              
  Cand SU(13) ORDER                              
  Cand SU(4) PHYS-REG                           
  Cand SU(4) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(4) %3:gpr64 = COPY $x3
Top Pressure:
GPR32arg=3
tcGPR64=3
GPR32=8
  GPR32arg: 8 <= 8(+ 0 livethru)
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 15 14 13 12 11 10 9 8 
Queue TopQ.P: 
Queue TopQ.A: 16 15 14 13 12 5 6 7 11 
Picking from Bot:
  Cand SU(17) ORDER                              
Picking from Top:
  Cand SU(16) ORDER                              
  Cand SU(15) REG-MAX                            
  Cand SU(14) ORDER                              
  Cand SU(13) ORDER                              
  Cand SU(12) ORDER                              
  Cand SU(5) PHYS-REG                           
  Cand SU(5) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(5) %2:gpr64 = COPY $x2
Top Pressure:
GPR32arg=2
tcGPR64=2
GPR32=8
  GPR32arg: 8 <= 8(+ 0 livethru)
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 15 14 13 12 11 10 9 8 
Queue TopQ.P: 
Queue TopQ.A: 16 15 14 13 12 11 6 7 10 
Picking from Bot:
  Cand SU(17) ORDER                              
Picking from Top:
  Cand SU(16) ORDER                              
  Cand SU(15) REG-MAX                            
  Cand SU(14) ORDER                              
  Cand SU(13) ORDER                              
  Cand SU(12) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(6) PHYS-REG                           
  Cand SU(6) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(6) %1:gpr32 = COPY $w1
Top Pressure:
GPR32arg=1
tcGPR64=1
GPR32=8
  GPR32arg: 8 <= 8(+ 0 livethru)
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 15 14 13 12 11 10 9 8 
Queue TopQ.P: 
Queue TopQ.A: 16 15 14 13 12 11 10 7 9 
Picking from Bot:
  Cand SU(17) ORDER                              
Picking from Top:
  Cand SU(16) ORDER                              
  Cand SU(15) REG-MAX                            
  Cand SU(14) ORDER                              
  Cand SU(13) ORDER                              
  Cand SU(12) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(7) PHYS-REG                           
  Cand SU(7) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(7) %0:gpr32 = COPY $w0
Top Pressure:
GPR32=8
  GPR32arg: 8 <= 8(+ 0 livethru)
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 15 14 13 12 11 10 9 8 
Queue TopQ.P: 
Queue TopQ.A: 16 15 14 13 12 11 10 9 8 
Picking from Bot:
  Cand SU(17) ORDER                              
Picking from Top:
  Cand SU(16) ORDER                              
  Cand SU(15) REG-MAX                            
  Cand SU(14) ORDER                              
  Cand SU(13) ORDER                              
  Cand SU(12) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(17) STRWui %8:gpr32, %stack.16.nn1, 0, debug-location !634 :: (store 4 into %ir.nn1); cg.c:609:9
Bottom Pressure:
GPR32=1
  LiveReg: %8
  UpdateRegP: SU(17) STRWui %8:gpr32, %stack.16.nn1, 0, debug-location !634 :: (store 4 into %ir.nn1); cg.c:609:9
              to 
  Ready @0c
  BotQ.A TopLatency SU(17) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 15 14 13 12 11 10 9 16 
Queue TopQ.P: 
Queue TopQ.A: 16 15 14 13 12 11 10 9 8 
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(16) ORDER                              
Picking from Top:
  Cand SU(8) NOCAND                             
Pick Bot ORDER     
Scheduling SU(16) %8:gpr32 = MOVi32imm 1
Bottom Pressure:

  Ready @1c
  BotQ.A BotLatency SU(16) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 15 14 13 12 11 10 9 
Queue TopQ.P: 
Queue TopQ.A: 8 15 14 13 12 11 10 9 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(15) ORDER                              
Picking from Top:
  Cand SU(8) NOCAND                             
Pick Bot ORDER     
Scheduling SU(15) STRWui %7:gpr32, %stack.7.firstcol.addr, 0 :: (store 4 into %ir.firstcol.addr)
Bottom Pressure:
GPR32=1
  LiveReg: %7
  UpdateRegP: SU(15) STRWui %7:gpr32, %stack.7.firstcol.addr, 0 :: (store 4 into %ir.firstcol.addr)
              to 
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 14 13 12 11 10 
Queue TopQ.P: 
Queue TopQ.A: 8 9 14 13 12 11 10 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(8) NOCAND                             
Pick Bot ORDER     
Scheduling SU(14) STRWui %6:gpr32, %stack.6.lastrow.addr, 0 :: (store 4 into %ir.lastrow.addr)
Bottom Pressure:
GPR32=2
  LiveReg: %6
  UpdateRegP: SU(14) STRWui %6:gpr32, %stack.6.lastrow.addr, 0 :: (store 4 into %ir.lastrow.addr)
              to 
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 10 13 12 11 
Queue TopQ.P: 
Queue TopQ.A: 8 9 10 13 12 11 
  BotQ.A RemainingLatency 0 + 4c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(8) NOCAND                             
Pick Bot ORDER     
Scheduling SU(13) STRWui %5:gpr32, %stack.5.firstrow.addr, 0 :: (store 4 into %ir.firstrow.addr)
Bottom Pressure:
GPR32=3
  LiveReg: %5
  UpdateRegP: SU(13) STRWui %5:gpr32, %stack.5.firstrow.addr, 0 :: (store 4 into %ir.firstrow.addr)
              to 
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 10 11 12 
Queue TopQ.P: 
Queue TopQ.A: 8 9 10 11 12 
  BotQ.A RemainingLatency 0 + 5c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(8) NOCAND                             
Pick Bot ORDER     
Scheduling SU(12) STRXui %4:gpr64, %stack.4.rowstr.addr, 0 :: (store 8 into %ir.rowstr.addr)
Bottom Pressure:
GPR32=4
  LiveReg: %4
  UpdateRegP: SU(12) STRXui %4:gpr64, %stack.4.rowstr.addr, 0 :: (store 8 into %ir.rowstr.addr)
              to 
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 10 11 
Queue TopQ.P: 
Queue TopQ.A: 8 9 10 11 
  BotQ.A RemainingLatency 0 + 6c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(8) NOCAND                             
Pick Bot ORDER     
Scheduling SU(11) STRXui %3:gpr64, %stack.3.colidx.addr, 0 :: (store 8 into %ir.colidx.addr)
Bottom Pressure:
GPR32=5
  LiveReg: %3
  UpdateRegP: SU(11) STRXui %3:gpr64, %stack.3.colidx.addr, 0 :: (store 8 into %ir.colidx.addr)
              to 
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 10 
Queue TopQ.P: 
Queue TopQ.A: 8 9 10 
  BotQ.A RemainingLatency 0 + 7c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(8) NOCAND                             
Pick Bot ORDER     
Scheduling SU(10) STRXui %2:gpr64, %stack.2.a.addr, 0 :: (store 8 into %ir.a.addr)
Bottom Pressure:
GPR32=6
  LiveReg: %2
  UpdateRegP: SU(10) STRXui %2:gpr64, %stack.2.a.addr, 0 :: (store 8 into %ir.a.addr)
              to 
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 
Queue TopQ.P: 
Queue TopQ.A: 8 9 
  BotQ.A RemainingLatency 0 + 8c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(8) NOCAND                             
Pick Bot ORDER     
Scheduling SU(9) STRWui %1:gpr32, %stack.1.nz.addr, 0 :: (store 4 into %ir.nz.addr)
Bottom Pressure:
GPR32=7
  LiveReg: %1
  UpdateRegP: SU(9) STRWui %1:gpr32, %stack.1.nz.addr, 0 :: (store 4 into %ir.nz.addr)
              to 
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Pick Bot ONLY1     
Scheduling SU(8) STRWui %0:gpr32, %stack.0.n.addr, 0 :: (store 4 into %ir.n.addr)
Bottom Pressure:
GPR32=8
  LiveReg: %0
  UpdateRegP: SU(8) STRWui %0:gpr32, %stack.0.n.addr, 0 :: (store 4 into %ir.n.addr)
              to 
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %7:gpr32 = COPY $w7
SU(1):   %6:gpr32 = COPY $w6
SU(2):   %5:gpr32 = COPY $w5
SU(3):   %4:gpr64 = COPY $x4
SU(4):   %3:gpr64 = COPY $x3
SU(5):   %2:gpr64 = COPY $x2
SU(6):   %1:gpr32 = COPY $w1
SU(7):   %0:gpr32 = COPY $w0
SU(8):   STRWui %0:gpr32, %stack.0.n.addr, 0 :: (store 4 into %ir.n.addr)
SU(9):   STRWui %1:gpr32, %stack.1.nz.addr, 0 :: (store 4 into %ir.nz.addr)
SU(10):   STRXui %2:gpr64, %stack.2.a.addr, 0 :: (store 8 into %ir.a.addr)
SU(11):   STRXui %3:gpr64, %stack.3.colidx.addr, 0 :: (store 8 into %ir.colidx.addr)
SU(12):   STRXui %4:gpr64, %stack.4.rowstr.addr, 0 :: (store 8 into %ir.rowstr.addr)
SU(13):   STRWui %5:gpr32, %stack.5.firstrow.addr, 0 :: (store 4 into %ir.firstrow.addr)
SU(14):   STRWui %6:gpr32, %stack.6.lastrow.addr, 0 :: (store 4 into %ir.lastrow.addr)
SU(15):   STRWui %7:gpr32, %stack.7.firstcol.addr, 0 :: (store 4 into %ir.firstcol.addr)
SU(16):   %8:gpr32 = MOVi32imm 1
SU(17):   STRWui %8:gpr32, %stack.16.nn1, 0, debug-location !634 :: (store 4 into %ir.nn1); cg.c:609:9

********** MI Scheduling **********
makea:%bb.1 do.body
  From: %9:gpr32 = LDRWui %stack.16.nn1, 0, debug-location !636 :: (dereferenceable load 4 from %ir.nn1); cg.c:611:19
    To: Bcc 11, %bb.1, implicit killed $nzcv, debug-location !643; cg.c:612:5
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %9:gpr32 = LDRWui %stack.16.nn1, 0, debug-location !636 :: (dereferenceable load 4 from %ir.nn1); cg.c:611:19
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(1): Data Latency=4 Reg=%9
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %10:gpr32 = UBFMWri %9:gpr32, 31, 30, debug-location !638; cg.c:611:17
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(0): Data Latency=4 Reg=%9
  Successors:
    SU(4): Data Latency=1 Reg=%10
    SU(2): Data Latency=1 Reg=%10
  Single Issue       : false;
SU(2):   STRWui %10:gpr32, %stack.16.nn1, 0, debug-location !639 :: (store 4 into %ir.nn1); cg.c:611:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%10
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   %11:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !641 :: (dereferenceable load 4 from %ir.n.addr); cg.c:612:20
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=%11
  Single Issue       : false;
SU(4):   dead $wzr = SUBSWrr %10:gpr32, %11:gpr32, implicit-def $nzcv, debug-location !643; cg.c:612:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=%10
    SU(3): Data Latency=4 Reg=%11
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 11, %bb.1, implicit killed $nzcv, debug-location !643; cg.c:612:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %10:gpr32, %stack.16.nn1, 0, debug-location !639 :: (store 4 into %ir.nn1); cg.c:611:13
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) dead $wzr = SUBSWrr %10:gpr32, %11:gpr32, implicit-def $nzcv, debug-location !643; cg.c:612:5
  Ready @1c
  BotQ.A TopLatency SU(4) 5c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %10:gpr32 = UBFMWri %9:gpr32, 31, 30, debug-location !638; cg.c:611:17
  Ready @2c
  BotQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 0 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %11:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !641 :: (dereferenceable load 4 from %ir.n.addr); cg.c:612:20
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %9:gpr32 = LDRWui %stack.16.nn1, 0, debug-location !636 :: (dereferenceable load 4 from %ir.nn1); cg.c:611:19
  Ready @6c
  BotQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   %9:gpr32 = LDRWui %stack.16.nn1, 0, debug-location !636 :: (dereferenceable load 4 from %ir.nn1); cg.c:611:19
SU(3):   %11:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !641 :: (dereferenceable load 4 from %ir.n.addr); cg.c:612:20
SU(1):   %10:gpr32 = UBFMWri %9:gpr32, 31, 30, debug-location !638; cg.c:611:17
SU(4):   dead $wzr = SUBSWrr %10:gpr32, %11:gpr32, implicit-def $nzcv, debug-location !643; cg.c:612:5
SU(2):   STRWui %10:gpr32, %stack.16.nn1, 0, debug-location !639 :: (store 4 into %ir.nn1); cg.c:611:13

********** MI Scheduling **********
makea:%bb.2 do.end
  From: STRWui $wzr, %stack.13.iouter, 0, debug-location !646 :: (store 4 into %ir.iouter); cg.c:617:17
    To: End RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui $wzr, %stack.13.iouter, 0, debug-location !646 :: (store 4 into %ir.iouter); cg.c:617:17
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %34:gpr32 = MOVi32imm 13
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   %37:gpr64sp = ADDXri %stack.18.vc, 0, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %38:gpr64sp = ADDXri %stack.17.ivc, 0, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   %43:fpr64 = FMOVDi 96
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   undef %61.sub_32:gpr64 = MOVi32imm 56
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(6):   undef %71.sub_32:gpr64 = MOVi32imm 112
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 5 4 3 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) undef %71.sub_32:gpr64 = MOVi32imm 112
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 5 4 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) undef %61.sub_32:gpr64 = MOVi32imm 56
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 
  BotQ.A RemainingLatency 0 + 2c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %43:fpr64 = FMOVDi 96
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  BotQ.A RemainingLatency 0 + 3c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %38:gpr64sp = ADDXri %stack.17.ivc, 0, 0
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  BotQ.A RemainingLatency 0 + 4c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %37:gpr64sp = ADDXri %stack.18.vc, 0, 0
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 5c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %34:gpr32 = MOVi32imm 13
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.13.iouter, 0, debug-location !646 :: (store 4 into %ir.iouter); cg.c:617:17
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   STRWui $wzr, %stack.13.iouter, 0, debug-location !646 :: (store 4 into %ir.iouter); cg.c:617:17
SU(1):   %34:gpr32 = MOVi32imm 13
SU(2):   %37:gpr64sp = ADDXri %stack.18.vc, 0, 0
SU(3):   %38:gpr64sp = ADDXri %stack.17.ivc, 0, 0
SU(4):   %43:fpr64 = FMOVDi 96
SU(5):   undef %61.sub_32:gpr64 = MOVi32imm 56
SU(6):   undef %71.sub_32:gpr64 = MOVi32imm 112

********** MI Scheduling **********
makea:%bb.3 for.cond
  From: %14:gpr32 = LDRWui %stack.13.iouter, 0, debug-location !649 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:22
    To: Bcc 10, %bb.8, implicit killed $nzcv, debug-location !653; cg.c:617:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %14:gpr32 = LDRWui %stack.13.iouter, 0, debug-location !649 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%14
  Single Issue       : false;
SU(1):   %15:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !651 :: (dereferenceable load 4 from %ir.n.addr); cg.c:617:31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%15
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %14:gpr32, %15:gpr32, implicit-def $nzcv, debug-location !653; cg.c:617:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%15
    SU(0): Data Latency=4 Reg=%14
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.8, implicit killed $nzcv, debug-location !653; cg.c:617:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %14:gpr32, %15:gpr32, implicit-def $nzcv, debug-location !653; cg.c:617:5
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %15:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !651 :: (dereferenceable load 4 from %ir.n.addr); cg.c:617:31
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %14:gpr32 = LDRWui %stack.13.iouter, 0, debug-location !649 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:22
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %14:gpr32 = LDRWui %stack.13.iouter, 0, debug-location !649 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:22
SU(1):   %15:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !651 :: (dereferenceable load 4 from %ir.n.addr); cg.c:617:31
SU(2):   dead $wzr = SUBSWrr %14:gpr32, %15:gpr32, implicit-def $nzcv, debug-location !653; cg.c:617:5

********** MI Scheduling **********
makea:%bb.4 for.body
  From: %44:gpr32 = LDRWui %stack.15.nzv, 0, debug-location !668 :: (dereferenceable load 4 from %ir.nzv); cg.c:621:24
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %44:gpr32 = LDRWui %stack.15.nzv, 0, debug-location !668 :: (dereferenceable load 4 from %ir.nzv); cg.c:621:24
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%44
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %45:gpr64common = LDRXui %fixed-stack.3, 0, debug-location !669 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:621:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%45
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %46:gpr64 = LDRSWui %stack.13.iouter, 0, debug-location !670 :: (dereferenceable load 4 from %ir.iouter); cg.c:621:14
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%46
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   STRWroX %44:gpr32, %45:gpr64common, %46:gpr64, 0, 1, debug-location !671 :: (store 4 into %ir.arrayidx); cg.c:621:22
  # preds left       : 6
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%46
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%45
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%44
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   STRWui $wzr, %stack.14.ivelt, 0, debug-location !672 :: (store 4 into %ir.ivelt); cg.c:623:20
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) STRWui $wzr, %stack.14.ivelt, 0, debug-location !672 :: (store 4 into %ir.ivelt); cg.c:623:20
  Ready @0c
  BotQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) STRWroX %44:gpr32, %45:gpr64common, %46:gpr64, 0, 1, debug-location !671 :: (store 4 into %ir.arrayidx); cg.c:621:22
  Ready @1c
  BotQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  BotQ.A RemainingLatency 0 + 5c > CritPath 4
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %46:gpr64 = LDRSWui %stack.13.iouter, 0, debug-location !670 :: (dereferenceable load 4 from %ir.iouter); cg.c:621:14
  Ready @5c
  BotQ.A BotLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 6c > CritPath 4
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %45:gpr64common = LDRXui %fixed-stack.3, 0, debug-location !669 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:621:9
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %44:gpr32 = LDRWui %stack.15.nzv, 0, debug-location !668 :: (dereferenceable load 4 from %ir.nzv); cg.c:621:24
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %44:gpr32 = LDRWui %stack.15.nzv, 0, debug-location !668 :: (dereferenceable load 4 from %ir.nzv); cg.c:621:24
SU(1):   %45:gpr64common = LDRXui %fixed-stack.3, 0, debug-location !669 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:621:9
SU(2):   %46:gpr64 = LDRSWui %stack.13.iouter, 0, debug-location !670 :: (dereferenceable load 4 from %ir.iouter); cg.c:621:14
SU(3):   STRWroX %44:gpr32, %45:gpr64common, %46:gpr64, 0, 1, debug-location !671 :: (store 4 into %ir.arrayidx); cg.c:621:22
SU(4):   STRWui $wzr, %stack.14.ivelt, 0, debug-location !672 :: (store 4 into %ir.ivelt); cg.c:623:20

********** MI Scheduling **********
makea:%bb.4 for.body
  From: $w0 = COPY %39:gpr32, debug-location !667; cg.c:620:9
    To: BL @vecset, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit $x2, implicit $x3, implicit $w4, implicit killed $d0, implicit-def $sp, debug-location !667; cg.c:620:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $w0 = COPY %39:gpr32, debug-location !667; cg.c:620:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $x1 = ADDXri %stack.18.vc, 0, 0, debug-location !667; cg.c:620:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $x2 = ADDXri %stack.17.ivc, 0, 0, debug-location !667; cg.c:620:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(3):   $x3 = ADDXri %stack.15.nzv, 0, 0, debug-location !667; cg.c:620:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(4):   $w4 = COPY %41:gpr32sp, debug-location !667; cg.c:620:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(5):   $d0 = COPY %43:fpr64, debug-location !667; cg.c:620:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @vecset, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit $x2, implicit $x3, implicit $w4, implicit killed $d0, implicit-def $sp, debug-location !667; cg.c:620:9
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=0 Artificial
    SU(4): Ord  Latency=0 Artificial
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 2 1 
Queue BotQ.A: 5 4 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(5) $d0 = COPY %43:fpr64, debug-location !667; cg.c:620:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 2 1 
Queue BotQ.A: 0 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(4) $w4 = COPY %41:gpr32sp, debug-location !667; cg.c:620:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 2 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $w0 = COPY %39:gpr32, debug-location !667; cg.c:620:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 1 2 
Queue TopQ.P: 
Queue TopQ.A: 3 1 2 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) $x3 = ADDXri %stack.15.nzv, 0, 0, debug-location !667; cg.c:620:9
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) $x2 = ADDXri %stack.17.ivc, 0, 0, debug-location !667; cg.c:620:9
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x1 = ADDXri %stack.18.vc, 0, 0, debug-location !667; cg.c:620:9
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(1):   $x1 = ADDXri %stack.18.vc, 0, 0, debug-location !667; cg.c:620:9
SU(2):   $x2 = ADDXri %stack.17.ivc, 0, 0, debug-location !667; cg.c:620:9
SU(3):   $x3 = ADDXri %stack.15.nzv, 0, 0, debug-location !667; cg.c:620:9
SU(0):   $w0 = COPY %39:gpr32, debug-location !667; cg.c:620:9
SU(4):   $w4 = COPY %41:gpr32sp, debug-location !667; cg.c:620:9
SU(5):   $d0 = COPY %43:fpr64, debug-location !667; cg.c:620:9

********** MI Scheduling **********
makea:%bb.4 for.body
  From: %39:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !662 :: (dereferenceable load 4 from %ir.n.addr); cg.c:620:16
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !667; cg.c:620:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %39:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !662 :: (dereferenceable load 4 from %ir.n.addr); cg.c:620:16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %40:gpr32common = LDRWui %stack.13.iouter, 0, debug-location !665 :: (dereferenceable load 4 from %ir.iouter); cg.c:620:34
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(2): Data Latency=4 Reg=%40
  Single Issue       : false;
SU(2):   %41:gpr32sp = nsw ADDWri %40:gpr32common, 1, 0, debug-location !666; cg.c:620:41
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%40
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !667; cg.c:620:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %41:gpr32sp = nsw ADDWri %40:gpr32common, 1, 0, debug-location !666; cg.c:620:41
  Ready @0c
  BotQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %39:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !662 :: (dereferenceable load 4 from %ir.n.addr); cg.c:620:16
  Ready @3c
  BotQ.A BotLatency SU(0) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 2
  Executed: 4c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %40:gpr32common = LDRWui %stack.13.iouter, 0, debug-location !665 :: (dereferenceable load 4 from %ir.iouter); cg.c:620:34
  Ready @4c
  BotQ.A BotLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(1):   %40:gpr32common = LDRWui %stack.13.iouter, 0, debug-location !665 :: (dereferenceable load 4 from %ir.iouter); cg.c:620:34
SU(0):   %39:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !662 :: (dereferenceable load 4 from %ir.n.addr); cg.c:620:16
SU(2):   %41:gpr32sp = nsw ADDWri %40:gpr32common, 1, 0, debug-location !666; cg.c:620:41

********** MI Scheduling **********
makea:%bb.4 for.body
  From: $w0 = COPY %35:gpr32, debug-location !661; cg.c:619:9
    To: BL @sprnvc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $w1, implicit $w2, implicit $x3, implicit $x4, implicit-def $sp, debug-location !661; cg.c:619:9
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $w0 = COPY %35:gpr32, debug-location !661; cg.c:619:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $w1 = MOVi32imm 13, debug-location !661; cg.c:619:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $w2 = COPY %36:gpr32, debug-location !661; cg.c:619:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $x3 = ADDXri %stack.18.vc, 0, 0, debug-location !661; cg.c:619:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(4):   $x4 = ADDXri %stack.17.ivc, 0, 0, debug-location !661; cg.c:619:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @sprnvc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $w1, implicit $w2, implicit $x3, implicit $x4, implicit-def $sp, debug-location !661; cg.c:619:9
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 3 1 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(3) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $w2 = COPY %36:gpr32, debug-location !661; cg.c:619:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 3 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $w0 = COPY %35:gpr32, debug-location !661; cg.c:619:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 4 1 3 
Queue TopQ.P: 
Queue TopQ.A: 3 1 4 
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(1) PHYS-REG                           
Picking from Top:
  Cand SU(3) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(1) $w1 = MOVi32imm 13, debug-location !661; cg.c:619:9
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 
Queue TopQ.P: 
Queue TopQ.A: 3 4 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(3) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) $x4 = ADDXri %stack.17.ivc, 0, 0, debug-location !661; cg.c:619:9
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) $x3 = ADDXri %stack.18.vc, 0, 0, debug-location !661; cg.c:619:9
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(3):   $x3 = ADDXri %stack.18.vc, 0, 0, debug-location !661; cg.c:619:9
SU(4):   $x4 = ADDXri %stack.17.ivc, 0, 0, debug-location !661; cg.c:619:9
SU(1):   $w1 = MOVi32imm 13, debug-location !661; cg.c:619:9
SU(0):   $w0 = COPY %35:gpr32, debug-location !661; cg.c:619:9
SU(2):   $w2 = COPY %36:gpr32, debug-location !661; cg.c:619:9

********** MI Scheduling **********
makea:%bb.4 for.body
  From: STRWui %34:gpr32, %stack.15.nzv, 0, debug-location !654 :: (store 4 into %ir.nzv); cg.c:618:13
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !661; cg.c:619:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui %34:gpr32, %stack.15.nzv, 0, debug-location !654 :: (store 4 into %ir.nzv); cg.c:618:13
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %35:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !656 :: (dereferenceable load 4 from %ir.n.addr); cg.c:619:16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %36:gpr32 = LDRWui %stack.16.nn1, 0, debug-location !658 :: (dereferenceable load 4 from %ir.nn1); cg.c:619:24
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !661; cg.c:619:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui %34:gpr32, %stack.15.nzv, 0, debug-location !654 :: (store 4 into %ir.nzv); cg.c:618:13
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %36:gpr32 = LDRWui %stack.16.nn1, 0, debug-location !658 :: (dereferenceable load 4 from %ir.nn1); cg.c:619:24
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 2
  Executed: 4c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %35:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !656 :: (dereferenceable load 4 from %ir.n.addr); cg.c:619:16
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(1):   %35:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !656 :: (dereferenceable load 4 from %ir.n.addr); cg.c:619:16
SU(2):   %36:gpr32 = LDRWui %stack.16.nn1, 0, debug-location !658 :: (dereferenceable load 4 from %ir.nn1); cg.c:619:24
SU(0):   STRWui %34:gpr32, %stack.15.nzv, 0, debug-location !654 :: (store 4 into %ir.nzv); cg.c:618:13

********** MI Scheduling **********
makea:%bb.5 for.cond5
  From: %48:gpr32 = LDRWui %stack.14.ivelt, 0, debug-location !675 :: (dereferenceable load 4 from %ir.ivelt); cg.c:623:25
    To: Bcc 10, %bb.7, implicit killed $nzcv, debug-location !679; cg.c:623:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %48:gpr32 = LDRWui %stack.14.ivelt, 0, debug-location !675 :: (dereferenceable load 4 from %ir.ivelt); cg.c:623:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%48
  Single Issue       : false;
SU(1):   %49:gpr32 = LDRWui %stack.15.nzv, 0, debug-location !677 :: (dereferenceable load 4 from %ir.nzv); cg.c:623:33
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%49
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %48:gpr32, %49:gpr32, implicit-def $nzcv, debug-location !679; cg.c:623:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%49
    SU(0): Data Latency=4 Reg=%48
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.7, implicit killed $nzcv, debug-location !679; cg.c:623:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %48:gpr32, %49:gpr32, implicit-def $nzcv, debug-location !679; cg.c:623:9
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %49:gpr32 = LDRWui %stack.15.nzv, 0, debug-location !677 :: (dereferenceable load 4 from %ir.nzv); cg.c:623:33
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %48:gpr32 = LDRWui %stack.14.ivelt, 0, debug-location !675 :: (dereferenceable load 4 from %ir.ivelt); cg.c:623:25
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %48:gpr32 = LDRWui %stack.14.ivelt, 0, debug-location !675 :: (dereferenceable load 4 from %ir.ivelt); cg.c:623:25
SU(1):   %49:gpr32 = LDRWui %stack.15.nzv, 0, debug-location !677 :: (dereferenceable load 4 from %ir.nzv); cg.c:623:33
SU(2):   dead $wzr = SUBSWrr %48:gpr32, %49:gpr32, implicit-def $nzcv, debug-location !679; cg.c:623:9

********** MI Scheduling **********
makea:%bb.6 for.body7
  From: %53:gpr64 = LDRSWui %stack.14.ivelt, 0, debug-location !680 :: (dereferenceable load 4 from %ir.ivelt); cg.c:624:39
    To: B %bb.5, debug-location !695; cg.c:623:9
 RegionInstrs: 18
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=1
GPR32=8
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
Live In: %71 %37 %61 %38 
Live Out: %71 %37 %61 %38 
Live Thru: GPR32=4
  LiveReg: %71
  UpdateRegP: SU(13) %73:gpr64common = MADDXrrr %69:gpr64, %71:gpr64, %68:gpr64, debug-location !690; cg.c:625:13
              to GPR32 1
  LiveReg: %37
  UpdateRegP: SU(10) %67:fpr64 = LDRDroX %37:gpr64sp, %65:gpr64, 0, 0, debug-location !689 :: (load 8 from %ir.arrayidx15); cg.c:625:35
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  LiveReg: %61
  UpdateRegP: SU(6) %63:gpr64common = MADDXrrr %59:gpr64, %61:gpr64, %58:gpr64, debug-location !684; cg.c:624:13
              to GPR32 1
  LiveReg: %38
  UpdateRegP: SU(2) %56:gpr32common = LDRWroX %38:gpr64sp, %54:gpr64, 0, 0, debug-location !682 :: (load 4 from %ir.arrayidx9); cg.c:624:35
              to 
Top Pressure:
GPR32=4
Bottom Pressure:
GPR32=4
Excess PSets: 
SU(0):   %53:gpr64 = LDRSWui %stack.14.ivelt, 0, debug-location !680 :: (dereferenceable load 4 from %ir.ivelt); cg.c:624:39
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 26
  Successors:
    SU(1): Data Latency=4 Reg=%53
    SU(17): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %54:gpr64 = UBFMXri %53:gpr64, 62, 61, debug-location !682; cg.c:624:35
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 22
  Predecessors:
    SU(0): Data Latency=4 Reg=%53
  Successors:
    SU(7): Data Latency=1 Reg=%54
    SU(2): Data Latency=1 Reg=%54
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %56:gpr32common = LDRWroX %38:gpr64sp, %54:gpr64, 0, 0, debug-location !682 :: (load 4 from %ir.arrayidx9); cg.c:624:35
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 21
  Predecessors:
    SU(1): Data Latency=1 Reg=%54
  Successors:
    SU(3): Data Latency=4 Reg=%56
    SU(14): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %57:gpr32common = SUBWri %56:gpr32common, 1, 0, debug-location !683; cg.c:624:46
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 17
  Predecessors:
    SU(2): Data Latency=4 Reg=%56
  Successors:
    SU(7): Data Latency=1 Reg=%57
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %58:gpr64 = LDRXui %fixed-stack.2, 0, debug-location !684 :: (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:624:13
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 21
  Successors:
    SU(6): Data Latency=4 Reg=%58
    SU(14): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(5):   %59:gpr64 = LDRSWui %stack.13.iouter, 0, debug-location !685 :: (dereferenceable load 4 from %ir.iouter); cg.c:624:18
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 21
  Successors:
    SU(6): Data Latency=4 Reg=%59
    SU(14): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(6):   %63:gpr64common = MADDXrrr %59:gpr64, %61:gpr64, %58:gpr64, debug-location !684; cg.c:624:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 17
  Predecessors:
    SU(5): Data Latency=4 Reg=%59
    SU(4): Data Latency=4 Reg=%58
  Successors:
    SU(7): Data Latency=1 Reg=%63
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(7):   STRWroX %57:gpr32common, %63:gpr64common, %54:gpr64, 0, 0, debug-location !687 :: (store 4 into %ir.arrayidx13); cg.c:624:33
  # preds left       : 7
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 16
  Predecessors:
    SU(3): Data Latency=1 Reg=%57
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(6): Data Latency=1 Reg=%63
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=1 Reg=%54
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(17): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(15): Ord  Latency=1 Memory
    SU(8): Ord  Latency=1 Memory
    SU(12): Ord  Latency=1 Memory
    SU(11): Ord  Latency=1 Memory
    SU(10): Ord  Latency=1 Memory
  Pressure Diff      : GPR32 3
  Single Issue       : false;
SU(8):   %64:gpr64 = LDRSWui %stack.14.ivelt, 0, debug-location !688 :: (dereferenceable load 4 from %ir.ivelt); cg.c:625:38
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 15
  Predecessors:
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(9): Data Latency=4 Reg=%64
    SU(17): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(9):   %65:gpr64 = UBFMXri %64:gpr64, 61, 60, debug-location !689; cg.c:625:35
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 11
  Predecessors:
    SU(8): Data Latency=4 Reg=%64
  Successors:
    SU(14): Data Latency=1 Reg=%65
    SU(10): Data Latency=1 Reg=%65
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   %67:fpr64 = LDRDroX %37:gpr64sp, %65:gpr64, 0, 0, debug-location !689 :: (load 8 from %ir.arrayidx15); cg.c:625:35
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 16
  Height             : 10
  Predecessors:
    SU(9): Data Latency=1 Reg=%65
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(14): Data Latency=4 Reg=%67
    SU(14): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(11):   %68:gpr64 = LDRXui %fixed-stack.1, 0, debug-location !690 :: (dereferenceable load 8 from %ir.aelt.addr); cg.c:625:13
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 11
  Predecessors:
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(13): Data Latency=4 Reg=%68
    SU(14): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(12):   %69:gpr64 = LDRSWui %stack.13.iouter, 0, debug-location !691 :: (dereferenceable load 4 from %ir.iouter); cg.c:625:18
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 11
  Predecessors:
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(13): Data Latency=4 Reg=%69
    SU(14): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(13):   %73:gpr64common = MADDXrrr %69:gpr64, %71:gpr64, %68:gpr64, debug-location !690; cg.c:625:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 7
  Predecessors:
    SU(12): Data Latency=4 Reg=%69
    SU(11): Data Latency=4 Reg=%68
  Successors:
    SU(14): Data Latency=1 Reg=%73
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(14):   STRDroX %67:fpr64, %73:gpr64common, %65:gpr64, 0, 0, debug-location !693 :: (store 8 into %ir.arrayidx19); cg.c:625:33
  # preds left       : 12
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 20
  Height             : 6
  Predecessors:
    SU(10): Data Latency=4 Reg=%67
    SU(12): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(13): Data Latency=1 Reg=%73
    SU(10): Ord  Latency=0 Memory
    SU(9): Data Latency=1 Reg=%65
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=1 Memory
  Pressure Diff      : FPR8 1    GPR32 2    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(15):   %74:gpr32common = LDRWui %stack.14.ivelt, 0, debug-location !694 :: (dereferenceable load 4 from %ir.ivelt); cg.c:623:43
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 21
  Height             : 5
  Predecessors:
    SU(14): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(16): Data Latency=4 Reg=%74
    SU(17): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(16):   %75:gpr32common = nsw ADDWri %74:gpr32common, 1, 0, debug-location !694; cg.c:623:43
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 25
  Height             : 1
  Predecessors:
    SU(15): Data Latency=4 Reg=%74
  Successors:
    SU(17): Data Latency=1 Reg=%75
  Pressure Diff      : 
  Single Issue       : false;
SU(17):   STRWui %75:gpr32common, %stack.14.ivelt, 0, debug-location !694 :: (store 4 into %ir.ivelt); cg.c:623:43
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 26
  Height             : 0
  Predecessors:
    SU(16): Data Latency=1 Reg=%75
    SU(15): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.5, debug-location !695; cg.c:623:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 26
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 
Pick Bot ONLY1     
Scheduling SU(17) STRWui %75:gpr32common, %stack.14.ivelt, 0, debug-location !694 :: (store 4 into %ir.ivelt); cg.c:623:43
Bottom Pressure:
GPR32=5
  LiveReg: %75
  UpdateRegP: SU(17) STRWui %75:gpr32common, %stack.14.ivelt, 0, debug-location !694 :: (store 4 into %ir.ivelt); cg.c:623:43
              to 
  Ready @0c
  BotQ.A TopLatency SU(17) 26c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 16 
Pick Bot ONLY1     
Scheduling SU(16) %75:gpr32common = nsw ADDWri %74:gpr32common, 1, 0, debug-location !694; cg.c:623:43
Bottom Pressure:
GPR32=5
  LiveReg: %74
  UpdateRegP: SU(16) %75:gpr32common = nsw ADDWri %74:gpr32common, 1, 0, debug-location !694; cg.c:623:43
              to GPR32 -1
  Ready @1c
  BotQ.A BotLatency SU(16) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 15 
Pick Bot ONLY1     
Scheduling SU(15) %74:gpr32common = LDRWui %stack.14.ivelt, 0, debug-location !694 :: (dereferenceable load 4 from %ir.ivelt); cg.c:623:43
Bottom Pressure:
GPR32=4
  Ready @5c
  BotQ.A BotLatency SU(15) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 
Pick Bot ONLY1     
Scheduling SU(14) STRDroX %67:fpr64, %73:gpr64common, %65:gpr64, 0, 0, debug-location !693 :: (store 8 into %ir.arrayidx19); cg.c:625:33
Bottom Pressure:
FPR8=1
GPR32=6
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %67
  UpdateRegP: SU(14) STRDroX %67:fpr64, %73:gpr64common, %65:gpr64, 0, 0, debug-location !693 :: (store 8 into %ir.arrayidx19); cg.c:625:33
              to GPR32 2
  LiveReg: %73
  UpdateRegP: SU(14) STRDroX %67:fpr64, %73:gpr64common, %65:gpr64, 0, 0, debug-location !693 :: (store 8 into %ir.arrayidx19); cg.c:625:33
              to GPR32 1
  LiveReg: %65
  UpdateRegP: SU(10) %67:fpr64 = LDRDroX %37:gpr64sp, %65:gpr64, 0, 0, debug-location !689 :: (load 8 from %ir.arrayidx15); cg.c:625:35
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(14) STRDroX %67:fpr64, %73:gpr64common, %65:gpr64, 0, 0, debug-location !693 :: (store 8 into %ir.arrayidx19); cg.c:625:33
              to 
  Ready @6c
  BotQ.A BotLatency SU(14) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 
Queue BotQ.A: 13 
Pick Bot ONLY1     
Scheduling SU(13) %73:gpr64common = MADDXrrr %69:gpr64, %71:gpr64, %68:gpr64, debug-location !690; cg.c:625:13
Bottom Pressure:
FPR8=1
GPR32=7
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %69
  UpdateRegP: SU(13) %73:gpr64common = MADDXrrr %69:gpr64, %71:gpr64, %68:gpr64, debug-location !690; cg.c:625:13
              to 
  LiveReg: %68
  UpdateRegP: SU(13) %73:gpr64common = MADDXrrr %69:gpr64, %71:gpr64, %68:gpr64, debug-location !690; cg.c:625:13
              to GPR32 -1
  Ready @7c
  BotQ.A BotLatency SU(13) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 11 12 
Queue BotQ.A: 10 
Pick Bot ONLY1     
Scheduling SU(10) %67:fpr64 = LDRDroX %37:gpr64sp, %65:gpr64, 0, 0, debug-location !689 :: (load 8 from %ir.arrayidx15); cg.c:625:35
Bottom Pressure:
GPR32=7
  Ready @10c
  BotQ.A BotLatency SU(10) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 6
  Executed: 11c
  Critical: 6c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 11 12 
Queue TopQ.P: 
Queue TopQ.A: 0 4 5 
BotQ.A RemLatency SU(9) 15c
Picking from Bot:
  Cand SU(9) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %69:gpr64 = LDRSWui %stack.13.iouter, 0, debug-location !691 :: (dereferenceable load 4 from %ir.iouter); cg.c:625:18
Bottom Pressure:
GPR32=6
  Ready @11c
  BotQ.A BotLatency SU(12) 11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 7
  Executed: 12c
  Critical: 7c, 7 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 11 
Queue TopQ.P: 
Queue TopQ.A: 0 4 5 
BotQ.A RemLatency SU(9) 15c
  BotQ.A RemainingLatency 15 + 12c > CritPath 26
Picking from Bot:
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(9) %65:gpr64 = UBFMXri %64:gpr64, 61, 60, debug-location !689; cg.c:625:35
Bottom Pressure:
GPR32=6
  LiveReg: %64
  UpdateRegP: SU(9) %65:gpr64 = UBFMXri %64:gpr64, 61, 60, debug-location !689; cg.c:625:35
              to GPR32 -1
  Ready @12c
  BotQ.A TopLatency SU(9) 15c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 8
  Executed: 13c
  Critical: 8c, 8 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 8 
Queue BotQ.A: 11 
Pick Bot ONLY1     
Scheduling SU(11) %68:gpr64 = LDRXui %fixed-stack.1, 0, debug-location !690 :: (dereferenceable load 8 from %ir.aelt.addr); cg.c:625:13
Bottom Pressure:
GPR32=5
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 9
  Executed: 14c
  Critical: 9c, 9 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 16 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 8 
Pick Bot ONLY1     
Scheduling SU(8) %64:gpr64 = LDRSWui %stack.14.ivelt, 0, debug-location !688 :: (dereferenceable load 4 from %ir.ivelt); cg.c:625:38
Bottom Pressure:
GPR32=4
  Ready @16c
  BotQ.A BotLatency SU(8) 15c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 10
  Executed: 17c
  Critical: 10c, 10 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) STRWroX %57:gpr32common, %63:gpr64common, %54:gpr64, 0, 0, debug-location !687 :: (store 4 into %ir.arrayidx13); cg.c:624:33
Bottom Pressure:
GPR32=7
  LiveReg: %57
  UpdateRegP: SU(7) STRWroX %57:gpr32common, %63:gpr64common, %54:gpr64, 0, 0, debug-location !687 :: (store 4 into %ir.arrayidx13); cg.c:624:33
              to GPR32 2
  LiveReg: %63
  UpdateRegP: SU(7) STRWroX %57:gpr32common, %63:gpr64common, %54:gpr64, 0, 0, debug-location !687 :: (store 4 into %ir.arrayidx13); cg.c:624:33
              to GPR32 1
  LiveReg: %54
  UpdateRegP: SU(2) %56:gpr32common = LDRWroX %38:gpr64sp, %54:gpr64, 0, 0, debug-location !682 :: (load 4 from %ir.arrayidx9); cg.c:624:35
              to GPR32 -1
  UpdateRegP: SU(7) STRWroX %57:gpr32common, %63:gpr64common, %54:gpr64, 0, 0, debug-location !687 :: (store 4 into %ir.arrayidx13); cg.c:624:33
              to 
  Ready @17c
  BotQ.A BotLatency SU(7) 16c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 11
  Executed: 18c
  Critical: 11c, 11 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 6 
Queue TopQ.P: 
Queue TopQ.A: 0 4 5 
BotQ.A RemLatency SU(3) 9c
  BotQ.A RemainingLatency 9 + 18c > CritPath 26
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(3) %57:gpr32common = SUBWri %56:gpr32common, 1, 0, debug-location !683; cg.c:624:46
Bottom Pressure:
GPR32=7
  LiveReg: %56
  UpdateRegP: SU(3) %57:gpr32common = SUBWri %56:gpr32common, 1, 0, debug-location !683; cg.c:624:46
              to GPR32 -1
  Ready @18c
  BotQ.A BotLatency SU(3) 17c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 12
  Executed: 19c
  Critical: 12c, 12 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %63:gpr64common = MADDXrrr %59:gpr64, %61:gpr64, %58:gpr64, debug-location !684; cg.c:624:13
Bottom Pressure:
GPR32=8
  LiveReg: %59
  UpdateRegP: SU(6) %63:gpr64common = MADDXrrr %59:gpr64, %61:gpr64, %58:gpr64, debug-location !684; cg.c:624:13
              to 
  LiveReg: %58
  UpdateRegP: SU(6) %63:gpr64common = MADDXrrr %59:gpr64, %61:gpr64, %58:gpr64, debug-location !684; cg.c:624:13
              to GPR32 -1
  Ready @19c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 13
  Executed: 20c
  Critical: 13c, 13 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 22 BotQ.A
Queue BotQ.P: 4 5 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %56:gpr32common = LDRWroX %38:gpr64sp, %54:gpr64, 0, 0, debug-location !682 :: (load 4 from %ir.arrayidx9); cg.c:624:35
Bottom Pressure:
GPR32=7
  Ready @22c
  BotQ.A BotLatency SU(2) 21c
  *** Max MOps 1 at cycle 22
Cycle: 23 BotQ.A
BotQ.A @23c
  Retired: 14
  Executed: 23c
  Critical: 14c, 14 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 5 
Queue TopQ.P: 
Queue TopQ.A: 0 4 5 
BotQ.A RemLatency SU(1) 4c
  BotQ.A RemainingLatency 4 + 23c > CritPath 26
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) %54:gpr64 = UBFMXri %53:gpr64, 62, 61, debug-location !682; cg.c:624:35
Bottom Pressure:
GPR32=7
  LiveReg: %53
  UpdateRegP: SU(1) %54:gpr64 = UBFMXri %53:gpr64, 62, 61, debug-location !682; cg.c:624:35
              to GPR32 -1
  Ready @23c
  BotQ.A BotLatency SU(1) 22c
  *** Max MOps 1 at cycle 23
Cycle: 24 BotQ.A
BotQ.A @24c
  Retired: 15
  Executed: 24c
  Critical: 15c, 15 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 5 4 
Queue TopQ.P: 
Queue TopQ.A: 0 4 5 
  BotQ.A RemainingLatency 3 + 24c > CritPath 26
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %59:gpr64 = LDRSWui %stack.13.iouter, 0, debug-location !685 :: (dereferenceable load 4 from %ir.iouter); cg.c:624:18
Bottom Pressure:
GPR32=6
  Ready @24c
  *** Max MOps 1 at cycle 24
Cycle: 25 BotQ.A
BotQ.A @25c
  Retired: 16
  Executed: 25c
  Critical: 16c, 16 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %58:gpr64 = LDRXui %fixed-stack.2, 0, debug-location !684 :: (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:624:13
Bottom Pressure:
GPR32=5
  Ready @25c
  *** Max MOps 1 at cycle 25
Cycle: 26 BotQ.A
BotQ.A @26c
  Retired: 17
  Executed: 26c
  Critical: 17c, 17 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 27 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %53:gpr64 = LDRSWui %stack.14.ivelt, 0, debug-location !680 :: (dereferenceable load 4 from %ir.ivelt); cg.c:624:39
Bottom Pressure:
GPR32=4
  Ready @27c
  BotQ.A BotLatency SU(0) 26c
  *** Max MOps 1 at cycle 27
Cycle: 28 BotQ.A
BotQ.A @28c
  Retired: 18
  Executed: 28c
  Critical: 18c, 18 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %53:gpr64 = LDRSWui %stack.14.ivelt, 0, debug-location !680 :: (dereferenceable load 4 from %ir.ivelt); cg.c:624:39
SU(4):   %58:gpr64 = LDRXui %fixed-stack.2, 0, debug-location !684 :: (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:624:13
SU(5):   %59:gpr64 = LDRSWui %stack.13.iouter, 0, debug-location !685 :: (dereferenceable load 4 from %ir.iouter); cg.c:624:18
SU(1):   %54:gpr64 = UBFMXri %53:gpr64, 62, 61, debug-location !682; cg.c:624:35
SU(2):   %56:gpr32common = LDRWroX %38:gpr64sp, %54:gpr64, 0, 0, debug-location !682 :: (load 4 from %ir.arrayidx9); cg.c:624:35
SU(6):   %63:gpr64common = MADDXrrr %59:gpr64, %61:gpr64, %58:gpr64, debug-location !684; cg.c:624:13
SU(3):   %57:gpr32common = SUBWri %56:gpr32common, 1, 0, debug-location !683; cg.c:624:46
SU(7):   STRWroX %57:gpr32common, %63:gpr64common, %54:gpr64, 0, 0, debug-location !687 :: (store 4 into %ir.arrayidx13); cg.c:624:33
SU(8):   %64:gpr64 = LDRSWui %stack.14.ivelt, 0, debug-location !688 :: (dereferenceable load 4 from %ir.ivelt); cg.c:625:38
SU(11):   %68:gpr64 = LDRXui %fixed-stack.1, 0, debug-location !690 :: (dereferenceable load 8 from %ir.aelt.addr); cg.c:625:13
SU(9):   %65:gpr64 = UBFMXri %64:gpr64, 61, 60, debug-location !689; cg.c:625:35
SU(12):   %69:gpr64 = LDRSWui %stack.13.iouter, 0, debug-location !691 :: (dereferenceable load 4 from %ir.iouter); cg.c:625:18
SU(10):   %67:fpr64 = LDRDroX %37:gpr64sp, %65:gpr64, 0, 0, debug-location !689 :: (load 8 from %ir.arrayidx15); cg.c:625:35
SU(13):   %73:gpr64common = MADDXrrr %69:gpr64, %71:gpr64, %68:gpr64, debug-location !690; cg.c:625:13
SU(14):   STRDroX %67:fpr64, %73:gpr64common, %65:gpr64, 0, 0, debug-location !693 :: (store 8 into %ir.arrayidx19); cg.c:625:33
SU(15):   %74:gpr32common = LDRWui %stack.14.ivelt, 0, debug-location !694 :: (dereferenceable load 4 from %ir.ivelt); cg.c:623:43
SU(16):   %75:gpr32common = nsw ADDWri %74:gpr32common, 1, 0, debug-location !694; cg.c:623:43
SU(17):   STRWui %75:gpr32common, %stack.14.ivelt, 0, debug-location !694 :: (store 4 into %ir.ivelt); cg.c:623:43

********** MI Scheduling **********
makea:%bb.7 for.inc20
  From: %51:gpr32common = LDRWui %stack.13.iouter, 0, debug-location !698 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:40
    To: B %bb.3, debug-location !699; cg.c:617:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %51:gpr32common = LDRWui %stack.13.iouter, 0, debug-location !698 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:40
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%51
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %52:gpr32common = nsw ADDWri %51:gpr32common, 1, 0, debug-location !698; cg.c:617:40
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%51
  Successors:
    SU(2): Data Latency=1 Reg=%52
  Single Issue       : false;
SU(2):   STRWui %52:gpr32common, %stack.13.iouter, 0, debug-location !698 :: (store 4 into %ir.iouter); cg.c:617:40
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%52
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.3, debug-location !699; cg.c:617:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %52:gpr32common, %stack.13.iouter, 0, debug-location !698 :: (store 4 into %ir.iouter); cg.c:617:40
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %52:gpr32common = nsw ADDWri %51:gpr32common, 1, 0, debug-location !698; cg.c:617:40
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %51:gpr32common = LDRWui %stack.13.iouter, 0, debug-location !698 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:40
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %51:gpr32common = LDRWui %stack.13.iouter, 0, debug-location !698 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:40
SU(1):   %52:gpr32common = nsw ADDWri %51:gpr32common, 1, 0, debug-location !698; cg.c:617:40
SU(2):   STRWui %52:gpr32common, %stack.13.iouter, 0, debug-location !698 :: (store 4 into %ir.iouter); cg.c:617:40

********** MI Scheduling **********
makea:%bb.8 for.end22
  From: STRXui %27:gpr64, $sp, 3, debug-location !713 :: (store 8 into stack + 24); cg.c:633:5
    To: BL @sparse, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $w3, implicit $w4, implicit $w5, implicit $x6, implicit $x7, implicit killed $d0, implicit killed $d1, implicit-def $sp, debug-location !713; cg.c:633:5
 RegionInstrs: 18
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR32arg=8
tcGPR64=8
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=11
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
Live In: %23 %22 %21 %20 %19 %18 %17 %24 %25 %26 %27 
Live Out: 
Live Thru: 
Top Pressure:
GPR32=11
Bottom Pressure:
GPR32arg=8
tcGPR64=8
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=8
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
Excess PSets: 
Constraining copy SU(7)
SU(0):   STRXui %27:gpr64, $sp, 3, debug-location !713 :: (store 8 into stack + 24); cg.c:633:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(1):   STRWui %26:gpr32, $sp, 4, debug-location !713 :: (store 4 into stack + 16); cg.c:633:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(2):   STRWui %25:gpr32, $sp, 2, debug-location !713 :: (store 4 into stack + 8); cg.c:633:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(3):   STRXui %24:gpr64, $sp, 0, debug-location !713 :: (store 8 into stack); cg.c:633:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(4):   %29:gpr64common = ADRP target-flags(aarch64-page) %const.0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=1 Reg=%29
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(5):   %30:fpr64 = LDRDui %29:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(4): Data Latency=1 Reg=%29
  Successors:
    SU(16): Data Latency=4 Reg=%30
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(6):   %31:gpr64 = MOVi64imm 4633641066610819072
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%31
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   %32:fpr64 = COPY %31:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%31
  Successors:
    SU(17): Data Latency=0 Reg=%32
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(8):   $x0 = COPY %17:gpr64, debug-location !713; cg.c:633:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1
  Single Issue       : false;
SU(9):   $x1 = COPY %18:gpr64, debug-location !713; cg.c:633:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1
  Single Issue       : false;
SU(10):   $x2 = COPY %19:gpr64, debug-location !713; cg.c:633:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1
  Single Issue       : false;
SU(11):   $w3 = COPY %20:gpr32, debug-location !713; cg.c:633:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1
  Single Issue       : false;
SU(12):   $w4 = COPY %21:gpr32, debug-location !713; cg.c:633:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1
  Single Issue       : false;
SU(13):   $w5 = MOVi32imm 13, debug-location !713; cg.c:633:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1    GPR32 -1
  Single Issue       : false;
SU(14):   $x6 = COPY %22:gpr64, debug-location !713; cg.c:633:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1
  Single Issue       : false;
SU(15):   $x7 = COPY %23:gpr64, debug-location !713; cg.c:633:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1
  Single Issue       : false;
SU(16):   $d0 = COPY %30:fpr64, debug-location !713; cg.c:633:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Data Latency=4 Reg=%30
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : FPR128_lo -1    ZPR_3b -1    FPR128_lo+ZPR_3b -1    QQ_with_qsub1_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR4_with_zsub3_in_ZPR_4b -1    ZPR4_with_zsub_in_FPR128_lo -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1
  Single Issue       : false;
SU(17):   $d1 = COPY %32:fpr64, debug-location !713; cg.c:633:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(7): Data Latency=0 Reg=%32
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : FPR128_lo -1    ZPR_3b -1    FPR128_lo+ZPR_3b -1    QQ_with_qsub1_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR4_with_zsub3_in_ZPR_4b -1    ZPR4_with_zsub_in_FPR128_lo -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1
  Single Issue       : false;
ExitSU:   BL @sparse, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $w3, implicit $w4, implicit $w5, implicit $x6, implicit $x7, implicit killed $d0, implicit killed $d1, implicit-def $sp, debug-location !713; cg.c:633:5
  # preds left       : 10
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(17): Ord  Latency=0 Artificial
    SU(16): Ord  Latency=0 Artificial
    SU(15): Ord  Latency=0 Artificial
    SU(14): Ord  Latency=0 Artificial
    SU(13): Ord  Latency=1 Artificial
    SU(12): Ord  Latency=0 Artificial
    SU(11): Ord  Latency=0 Artificial
    SU(10): Ord  Latency=0 Artificial
    SU(9): Ord  Latency=0 Artificial
    SU(8): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 13 
Queue BotQ.A: 3 2 1 0 17 16 15 14 12 11 10 9 8 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 6 8 9 10 11 12 13 14 15 
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(17) PHYS-REG                           
  Cand SU(15) REG-MAX                            
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(15) $x7 = COPY %23:gpr64, debug-location !713; cg.c:633:5
Bottom Pressure:
GPR32arg=7
tcGPR64=7
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=8
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  LiveReg: %23
  UpdateRegP: SU(15) $x7 = COPY %23:gpr64, debug-location !713; cg.c:633:5
              to GPR32arg -1    tcGPR64 -1    GPR32 -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 13 
Queue BotQ.A: 3 2 1 0 17 16 8 14 12 11 10 9 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 6 8 9 10 11 12 13 14 
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(17) PHYS-REG                           
  Cand SU(8) REG-MAX                            
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(14) $x6 = COPY %22:gpr64, debug-location !713; cg.c:633:5
Bottom Pressure:
GPR32arg=6
tcGPR64=6
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=8
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  LiveReg: %22
  UpdateRegP: SU(14) $x6 = COPY %22:gpr64, debug-location !713; cg.c:633:5
              to GPR32arg -1    tcGPR64 -1    GPR32 -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 13 
Queue BotQ.A: 3 2 1 0 17 16 8 9 12 11 10 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 6 8 9 10 11 12 13 
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(17) PHYS-REG                           
  Cand SU(8) REG-MAX                            
  Cand SU(9) ORDER                              
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(12) $w4 = COPY %21:gpr32, debug-location !713; cg.c:633:5
Bottom Pressure:
GPR32arg=5
tcGPR64=5
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=8
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  LiveReg: %21
  UpdateRegP: SU(12) $w4 = COPY %21:gpr32, debug-location !713; cg.c:633:5
              to GPR32arg -1    tcGPR64 -1    GPR32 -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 13 
Queue BotQ.A: 3 2 1 0 17 16 8 9 10 11 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 6 8 9 10 11 13 
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(17) PHYS-REG                           
  Cand SU(8) REG-MAX                            
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(11) $w3 = COPY %20:gpr32, debug-location !713; cg.c:633:5
Bottom Pressure:
GPR32arg=4
tcGPR64=4
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=8
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  LiveReg: %20
  UpdateRegP: SU(11) $w3 = COPY %20:gpr32, debug-location !713; cg.c:633:5
              to GPR32arg -1    tcGPR64 -1    GPR32 -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 13 
Queue BotQ.A: 3 2 1 0 17 16 8 9 10 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 6 8 9 10 13 
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(17) PHYS-REG                           
  Cand SU(8) REG-MAX                            
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(10) $x2 = COPY %19:gpr64, debug-location !713; cg.c:633:5
Bottom Pressure:
GPR32arg=3
tcGPR64=3
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=8
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  LiveReg: %19
  UpdateRegP: SU(10) $x2 = COPY %19:gpr64, debug-location !713; cg.c:633:5
              to GPR32arg -1    tcGPR64 -1    GPR32 -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 13 
Queue BotQ.A: 3 2 1 0 17 16 8 9 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 6 8 9 13 
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(17) PHYS-REG                           
  Cand SU(8) REG-MAX                            
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(9) $x1 = COPY %18:gpr64, debug-location !713; cg.c:633:5
Bottom Pressure:
GPR32arg=2
tcGPR64=2
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=8
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  LiveReg: %18
  UpdateRegP: SU(9) $x1 = COPY %18:gpr64, debug-location !713; cg.c:633:5
              to GPR32arg -1    tcGPR64 -1    GPR32 -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 13 
Queue BotQ.A: 3 2 1 0 17 16 8 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 6 8 13 
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(17) PHYS-REG                           
  Cand SU(8) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(8) $x0 = COPY %17:gpr64, debug-location !713; cg.c:633:5
Bottom Pressure:
GPR32arg=1
tcGPR64=1
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=8
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  LiveReg: %17
  UpdateRegP: SU(8) $x0 = COPY %17:gpr64, debug-location !713; cg.c:633:5
              to GPR32arg -1    tcGPR64 -1    GPR32 -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 13 
Queue BotQ.A: 3 2 1 0 17 16 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 6 13 
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(17) PHYS-REG                           
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(17) $d1 = COPY %32:fpr64, debug-location !713; cg.c:633:5
Bottom Pressure:
GPR32arg=1
tcGPR64=1
FPR128_lo=1
ZPR_3b=1
FPR128_lo+ZPR_3b=1
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=1
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=1
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=1
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=1
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=1
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=1
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=1
GPR32=8
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR4_with_zsub3_in_ZPR_4b=1
ZPR4_with_zsub_in_FPR128_lo=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=1
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %32
  UpdateRegP: SU(17) $d1 = COPY %32:fpr64, debug-location !713; cg.c:633:5
              to FPR128_lo -1    ZPR_3b -1    FPR128_lo+ZPR_3b -1    QQ_with_qsub1_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8 -1    FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR4_with_zsub3_in_ZPR_4b -1    ZPR4_with_zsub_in_FPR128_lo -1    FPR8+ZPR_3b -1
  Ready @0c
  BotQ.A TopLatency SU(17) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 13 
Queue BotQ.A: 3 2 1 0 16 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 6 13 
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(16) PHYS-REG                           
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(16) $d0 = COPY %30:fpr64, debug-location !713; cg.c:633:5
Bottom Pressure:
GPR32arg=1
tcGPR64=1
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %30
  UpdateRegP: SU(16) $d0 = COPY %30:fpr64, debug-location !713; cg.c:633:5
              to FPR128_lo -1    ZPR_3b -1    FPR128_lo+ZPR_3b -1    QQ_with_qsub1_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8 -1    FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR4_with_zsub3_in_ZPR_4b -1    ZPR4_with_zsub_in_FPR128_lo -1    FPR8+ZPR_3b -1
  Ready @0c
  BotQ.A TopLatency SU(16) 5c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 13 5 
Queue BotQ.A: 3 2 1 0 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 6 13 
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %32:fpr64 = COPY %31:gpr64
Bottom Pressure:
GPR32arg=1
tcGPR64=1
FPR8=1
GPR32=9
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %31
  UpdateRegP: SU(7) %32:fpr64 = COPY %31:gpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 13 5 6 
Queue BotQ.A: 3 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 6 13 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) STRXui %24:gpr64, $sp, 0, debug-location !713 :: (store 8 into stack); cg.c:633:5
Bottom Pressure:
GPR32arg=1
tcGPR64=1
FPR8=1
GPR32=10
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %24
  UpdateRegP: SU(3) STRXui %24:gpr64, $sp, 0, debug-location !713 :: (store 8 into stack); cg.c:633:5
              to 
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 0 2 1 13 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 13 4 6 
BotQ.A RemLatency SU(5) 1c
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(13) PHYS-REG                           
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(13) $w5 = MOVi32imm 13, debug-location !713; cg.c:633:5
Bottom Pressure:
FPR8=1
GPR32=9
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  GPR32arg: 8 <= 8(+ 0 livethru)
  Ready @1c
  BotQ.A BotLatency SU(13) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 0 2 1 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 6 4 
BotQ.A RemLatency SU(5) 1c
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %31:gpr64 = MOVi64imm 4633641066610819072
Bottom Pressure:
FPR8=1
GPR32=8
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 0 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 4 
BotQ.A RemLatency SU(5) 1c
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) STRWui %25:gpr32, $sp, 2, debug-location !713 :: (store 4 into stack + 8); cg.c:633:5
Bottom Pressure:
FPR8=1
GPR32=9
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %25
  UpdateRegP: SU(2) STRWui %25:gpr32, $sp, 2, debug-location !713 :: (store 4 into stack + 8); cg.c:633:5
              to 
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 
BotQ.A RemLatency SU(5) 1c
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %30:fpr64 = LDRDui %29:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
Bottom Pressure:
GPR32=10
  LiveReg: %29
  UpdateRegP: SU(5) %30:fpr64 = LDRDui %29:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @4c
  BotQ.A BotLatency SU(5) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %29:gpr64common = ADRP target-flags(aarch64-page) %const.0
Bottom Pressure:
GPR32=9
  Ready @5c
  BotQ.A BotLatency SU(4) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 6c > CritPath 5
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) STRWui %26:gpr32, $sp, 4, debug-location !713 :: (store 4 into stack + 16); cg.c:633:5
Bottom Pressure:
GPR32=10
  LiveReg: %26
  UpdateRegP: SU(1) STRWui %26:gpr32, $sp, 4, debug-location !713 :: (store 4 into stack + 16); cg.c:633:5
              to 
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRXui %27:gpr64, $sp, 3, debug-location !713 :: (store 8 into stack + 24); cg.c:633:5
Bottom Pressure:
GPR32=11
  LiveReg: %27
  UpdateRegP: SU(0) STRXui %27:gpr64, $sp, 3, debug-location !713 :: (store 8 into stack + 24); cg.c:633:5
              to 
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   STRXui %27:gpr64, $sp, 3, debug-location !713 :: (store 8 into stack + 24); cg.c:633:5
SU(1):   STRWui %26:gpr32, $sp, 4, debug-location !713 :: (store 4 into stack + 16); cg.c:633:5
SU(4):   %29:gpr64common = ADRP target-flags(aarch64-page) %const.0
SU(5):   %30:fpr64 = LDRDui %29:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
SU(2):   STRWui %25:gpr32, $sp, 2, debug-location !713 :: (store 4 into stack + 8); cg.c:633:5
SU(6):   %31:gpr64 = MOVi64imm 4633641066610819072
SU(13):   $w5 = MOVi32imm 13, debug-location !713; cg.c:633:5
SU(3):   STRXui %24:gpr64, $sp, 0, debug-location !713 :: (store 8 into stack); cg.c:633:5
SU(7):   %32:fpr64 = COPY %31:gpr64
SU(16):   $d0 = COPY %30:fpr64, debug-location !713; cg.c:633:5
SU(17):   $d1 = COPY %32:fpr64, debug-location !713; cg.c:633:5
SU(8):   $x0 = COPY %17:gpr64, debug-location !713; cg.c:633:5
SU(9):   $x1 = COPY %18:gpr64, debug-location !713; cg.c:633:5
SU(10):   $x2 = COPY %19:gpr64, debug-location !713; cg.c:633:5
SU(11):   $w3 = COPY %20:gpr32, debug-location !713; cg.c:633:5
SU(12):   $w4 = COPY %21:gpr32, debug-location !713; cg.c:633:5
SU(14):   $x6 = COPY %22:gpr64, debug-location !713; cg.c:633:5
SU(15):   $x7 = COPY %23:gpr64, debug-location !713; cg.c:633:5

********** MI Scheduling **********
makea:%bb.8 for.end22
  From: %17:gpr64 = LDRXui %stack.2.a.addr, 0, debug-location !702 :: (dereferenceable load 8 from %ir.a.addr); cg.c:633:12
    To: ADJCALLSTACKDOWN 32, 0, implicit-def dead $sp, implicit $sp, debug-location !713; cg.c:633:5
 RegionInstrs: 11
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %17:gpr64 = LDRXui %stack.2.a.addr, 0, debug-location !702 :: (dereferenceable load 8 from %ir.a.addr); cg.c:633:12
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %18:gpr64 = LDRXui %stack.3.colidx.addr, 0, debug-location !703 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:633:15
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %19:gpr64 = LDRXui %stack.4.rowstr.addr, 0, debug-location !704 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:633:23
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %20:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !705 :: (dereferenceable load 4 from %ir.n.addr); cg.c:633:31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(4):   %21:gpr32 = LDRWui %stack.1.nz.addr, 0, debug-location !706 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:633:34
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(5):   %22:gpr64 = LDRXui %fixed-stack.3, 0, debug-location !707 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:633:46
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(6):   %23:gpr64 = LDRXui %fixed-stack.2, 0, debug-location !708 :: (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:633:52
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(7):   %24:gpr64 = LDRXui %fixed-stack.1, 0, debug-location !709 :: (dereferenceable load 8 from %ir.aelt.addr); cg.c:633:58
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(8):   %25:gpr32 = LDRWui %stack.5.firstrow.addr, 0, debug-location !710 :: (dereferenceable load 4 from %ir.firstrow.addr); cg.c:633:64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(9):   %26:gpr32 = LDRWui %stack.6.lastrow.addr, 0, debug-location !711 :: (dereferenceable load 4 from %ir.lastrow.addr); cg.c:634:12
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(10):   %27:gpr64 = LDRXui %fixed-stack.0, 0, debug-location !712 :: (dereferenceable load 8 from %ir.iv.addr, align 16); cg.c:634:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 32, 0, implicit-def dead $sp, implicit $sp, debug-location !713; cg.c:633:5
  # preds left       : 11
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(10): Ord  Latency=3 Artificial
    SU(9): Ord  Latency=3 Artificial
    SU(8): Ord  Latency=3 Artificial
    SU(7): Ord  Latency=3 Artificial
    SU(6): Ord  Latency=3 Artificial
    SU(5): Ord  Latency=3 Artificial
    SU(4): Ord  Latency=3 Artificial
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 10 0 1 2 3 4 5 6 7 8 9 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 7 8 9 10 
Picking from Bot:
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %27:gpr64 = LDRXui %fixed-stack.0, 0, debug-location !712 :: (dereferenceable load 8 from %ir.iv.addr, align 16); cg.c:634:21
  Ready @3c
  BotQ.A BotLatency SU(10) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 1
  Executed: 4c
  Critical: 1c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 0 1 2 3 4 5 6 7 8 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 7 8 9 
  BotQ.A RemainingLatency 0 + 4c > CritPath 3
Picking from Bot:
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(9) %26:gpr32 = LDRWui %stack.6.lastrow.addr, 0, debug-location !711 :: (dereferenceable load 4 from %ir.lastrow.addr); cg.c:634:12
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 0 1 2 3 4 5 6 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 7 8 
  BotQ.A RemainingLatency 0 + 5c > CritPath 3
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %25:gpr32 = LDRWui %stack.5.firstrow.addr, 0, debug-location !710 :: (dereferenceable load 4 from %ir.firstrow.addr); cg.c:633:64
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 0 1 2 3 4 5 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 7 
  BotQ.A RemainingLatency 0 + 6c > CritPath 3
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %24:gpr64 = LDRXui %fixed-stack.1, 0, debug-location !709 :: (dereferenceable load 8 from %ir.aelt.addr); cg.c:633:58
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 0 1 2 3 4 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 
  BotQ.A RemainingLatency 0 + 7c > CritPath 3
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %23:gpr64 = LDRXui %fixed-stack.2, 0, debug-location !708 :: (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:633:52
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 0 1 2 3 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 
  BotQ.A RemainingLatency 0 + 8c > CritPath 3
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %22:gpr64 = LDRXui %fixed-stack.3, 0, debug-location !707 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:633:46
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 0 1 2 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 
  BotQ.A RemainingLatency 0 + 9c > CritPath 3
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %21:gpr32 = LDRWui %stack.1.nz.addr, 0, debug-location !706 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:633:34
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 7
  Executed: 10c
  Critical: 7c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 0 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  BotQ.A RemainingLatency 0 + 10c > CritPath 3
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %20:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !705 :: (dereferenceable load 4 from %ir.n.addr); cg.c:633:31
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 8
  Executed: 11c
  Critical: 8c, 8 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  BotQ.A RemainingLatency 0 + 11c > CritPath 3
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %19:gpr64 = LDRXui %stack.4.rowstr.addr, 0, debug-location !704 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:633:23
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 9
  Executed: 12c
  Critical: 9c, 9 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 12c > CritPath 3
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %18:gpr64 = LDRXui %stack.3.colidx.addr, 0, debug-location !703 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:633:15
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 10
  Executed: 13c
  Critical: 10c, 10 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %17:gpr64 = LDRXui %stack.2.a.addr, 0, debug-location !702 :: (dereferenceable load 8 from %ir.a.addr); cg.c:633:12
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 11
  Executed: 14c
  Critical: 11c, 11 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   %17:gpr64 = LDRXui %stack.2.a.addr, 0, debug-location !702 :: (dereferenceable load 8 from %ir.a.addr); cg.c:633:12
SU(1):   %18:gpr64 = LDRXui %stack.3.colidx.addr, 0, debug-location !703 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:633:15
SU(2):   %19:gpr64 = LDRXui %stack.4.rowstr.addr, 0, debug-location !704 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:633:23
SU(3):   %20:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !705 :: (dereferenceable load 4 from %ir.n.addr); cg.c:633:31
SU(4):   %21:gpr32 = LDRWui %stack.1.nz.addr, 0, debug-location !706 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:633:34
SU(5):   %22:gpr64 = LDRXui %fixed-stack.3, 0, debug-location !707 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:633:46
SU(6):   %23:gpr64 = LDRXui %fixed-stack.2, 0, debug-location !708 :: (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:633:52
SU(7):   %24:gpr64 = LDRXui %fixed-stack.1, 0, debug-location !709 :: (dereferenceable load 8 from %ir.aelt.addr); cg.c:633:58
SU(8):   %25:gpr32 = LDRWui %stack.5.firstrow.addr, 0, debug-location !710 :: (dereferenceable load 4 from %ir.firstrow.addr); cg.c:633:64
SU(9):   %26:gpr32 = LDRWui %stack.6.lastrow.addr, 0, debug-location !711 :: (dereferenceable load 4 from %ir.lastrow.addr); cg.c:634:12
SU(10):   %27:gpr64 = LDRXui %fixed-stack.0, 0, debug-location !712 :: (dereferenceable load 8 from %ir.iv.addr, align 16); cg.c:634:21

********** INTERVALS **********
WSP [784r,784d:5)[896r,896d:4)[904r,904d:3)[960r,960d:2)[1072r,1072d:1)[1088r,1088d:0)[1888r,1888d:8)[2272r,2272d:7)[2280r,2280d:6)  0@1088r 1@1072r 2@960r 3@904r 4@896r 5@784r 6@2280r 7@2272r 8@1888r
W0 [0B,128r:0)[880r,896r:2)[1032r,1072r:1)[2216r,2272r:3)  0@0B-phi 1@1032r 2@880r 3@2216r
W1 [0B,112r:0)[872r,896r:1)[992r,1072r:2)[2224r,2272r:3)  0@0B-phi 1@872r 2@992r 3@2224r
W2 [0B,96r:0)[888r,896r:1)[1008r,1072r:2)[2232r,2272r:3)  0@0B-phi 1@888r 2@1008r 3@2232r
W3 [0B,80r:0)[848r,896r:3)[1024r,1072r:2)[2240r,2272r:1)  0@0B-phi 1@2240r 2@1024r 3@848r
W4 [0B,64r:0)[864r,896r:3)[1040r,1072r:1)[2248r,2272r:2)  0@0B-phi 1@1040r 2@2248r 3@864r
W5 [0B,48r:0)[2144r,2272r:1)  0@0B-phi 1@2144r
W6 [0B,32r:0)[2256r,2272r:1)  0@0B-phi 1@2256r
W7 [0B,16r:0)[2264r,2272r:1)  0@0B-phi 1@2264r
%0 [128r,144r:0)  0@128r weight:0.000000e+00
%1 [112r,160r:0)  0@112r weight:0.000000e+00
%2 [96r,176r:0)  0@96r weight:0.000000e+00
%3 [80r,192r:0)  0@80r weight:0.000000e+00
%4 [64r,208r:0)  0@64r weight:0.000000e+00
%5 [48r,224r:0)  0@48r weight:0.000000e+00
%6 [32r,240r:0)  0@32r weight:0.000000e+00
%7 [16r,256r:0)  0@16r weight:0.000000e+00
%8 [272r,288r:0)  0@272r weight:0.000000e+00
%9 [320r,376r:0)  0@320r weight:0.000000e+00
%10 [376r,392r:0)  0@376r weight:0.000000e+00
%11 [368r,384r:0)  0@368r weight:0.000000e+00
%14 [640r,672r:0)  0@640r weight:0.000000e+00
%15 [656r,672r:0)  0@656r weight:0.000000e+00
%17 [1712r,2216r:0)  0@1712r weight:0.000000e+00
%18 [1728r,2224r:0)  0@1728r weight:0.000000e+00
%19 [1744r,2232r:0)  0@1744r weight:0.000000e+00
%20 [1760r,2240r:0)  0@1760r weight:0.000000e+00
%21 [1776r,2248r:0)  0@1776r weight:0.000000e+00
%22 [1792r,2256r:0)  0@1792r weight:0.000000e+00
%23 [1808r,2264r:0)  0@1808r weight:0.000000e+00
%24 [1824r,2148r:0)  0@1824r weight:0.000000e+00
%25 [1840r,2008r:0)  0@1840r weight:0.000000e+00
%26 [1856r,1936r:0)  0@1856r weight:0.000000e+00
%27 [1872r,1920r:0)  0@1872r weight:0.000000e+00
%29 [1984r,2000r:0)  0@1984r weight:0.000000e+00
%30 [2000r,2192r:0)  0@2000r weight:0.000000e+00
%31 [2016r,2152r:0)  0@2016r weight:0.000000e+00
%32 [2152r,2208r:0)  0@2152r weight:0.000000e+00
%34 [480r,1696B:0)  0@480r weight:0.000000e+00
%35 [752r,880r:0)  0@752r weight:0.000000e+00
%36 [768r,888r:0)  0@768r weight:0.000000e+00
%37 [496r,1696B:0)  0@496r weight:0.000000e+00
%38 [512r,1696B:0)  0@512r weight:0.000000e+00
%39 [936r,1032r:0)  0@936r weight:0.000000e+00
%40 [928r,944r:0)  0@928r weight:0.000000e+00
%41 [944r,1040r:0)  0@944r weight:0.000000e+00
%43 [544r,1696B:0)  0@544r weight:0.000000e+00
%44 [1104r,1152r:0)  0@1104r weight:0.000000e+00
%45 [1120r,1152r:0)  0@1120r weight:0.000000e+00
%46 [1136r,1152r:0)  0@1136r weight:0.000000e+00
%48 [1216r,1248r:0)  0@1216r weight:0.000000e+00
%49 [1232r,1248r:0)  0@1232r weight:0.000000e+00
%51 [1632r,1648r:0)  0@1632r weight:0.000000e+00
%52 [1648r,1664r:0)  0@1648r weight:0.000000e+00
%53 [1312r,1396r:0)  0@1312r weight:0.000000e+00
%54 [1396r,1424r:0)  0@1396r weight:0.000000e+00
%56 [1400r,1416r:0)  0@1400r weight:0.000000e+00
%57 [1416r,1424r:0)  0@1416r weight:0.000000e+00
%58 [1376r,1408r:0)  0@1376r weight:0.000000e+00
%59 [1392r,1408r:0)  0@1392r weight:0.000000e+00
%61 [560r,1696B:0)  0@560r weight:0.000000e+00
%63 [1408r,1424r:0)  0@1408r weight:0.000000e+00
%64 [1440r,1496r:0)  0@1440r weight:0.000000e+00
%65 [1496r,1536r:0)  0@1496r weight:0.000000e+00
%67 [1512r,1536r:0)  0@1512r weight:0.000000e+00
%68 [1488r,1520r:0)  0@1488r weight:0.000000e+00
%69 [1504r,1520r:0)  0@1504r weight:0.000000e+00
%71 [592r,1696B:0)  0@592r weight:0.000000e+00
%73 [1520r,1536r:0)  0@1520r weight:0.000000e+00
%74 [1552r,1568r:0)  0@1552r weight:0.000000e+00
%75 [1568r,1584r:0)  0@1568r weight:0.000000e+00
RegMasks: 896r 1072r 2272r
********** MACHINEINSTRS **********
# Machine code for function makea: NoPHIs, TracksLiveness
Frame Objects:
  fi#-5: size=8, align=16, fixed, at location [SP+32]
  fi#-4: size=8, align=8, fixed, at location [SP+24]
  fi#-3: size=8, align=16, fixed, at location [SP+16]
  fi#-2: size=8, align=8, fixed, at location [SP+8]
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=8, align=8, at location [SP]
  fi#4: size=8, align=8, at location [SP]
  fi#5: size=4, align=4, at location [SP]
  fi#6: size=4, align=4, at location [SP]
  fi#7: size=4, align=4, at location [SP]
  fi#8: dead
  fi#9: dead
  fi#10: dead
  fi#11: dead
  fi#12: dead
  fi#13: size=4, align=4, at location [SP]
  fi#14: size=4, align=4, at location [SP]
  fi#15: size=4, align=4, at location [SP]
  fi#16: size=4, align=4, at location [SP]
  fi#17: size=56, align=16, at location [SP]
  fi#18: size=112, align=16, at location [SP]
Constant Pool:
  cp#0: 1.000000e-01, align=8
Function Live Ins: $w0 in %0, $w1 in %1, $x2 in %2, $x3 in %3, $x4 in %4, $w5 in %5, $w6 in %6, $w7 in %7

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $w0, $w1, $x2, $x3, $x4, $w5, $w6, $w7
16B	  %7:gpr32 = COPY $w7
32B	  %6:gpr32 = COPY $w6
48B	  %5:gpr32 = COPY $w5
64B	  %4:gpr64 = COPY $x4
80B	  %3:gpr64 = COPY $x3
96B	  %2:gpr64 = COPY $x2
112B	  %1:gpr32 = COPY $w1
128B	  %0:gpr32 = COPY $w0
144B	  STRWui %0:gpr32, %stack.0.n.addr, 0 :: (store 4 into %ir.n.addr)
160B	  STRWui %1:gpr32, %stack.1.nz.addr, 0 :: (store 4 into %ir.nz.addr)
176B	  STRXui %2:gpr64, %stack.2.a.addr, 0 :: (store 8 into %ir.a.addr)
192B	  STRXui %3:gpr64, %stack.3.colidx.addr, 0 :: (store 8 into %ir.colidx.addr)
208B	  STRXui %4:gpr64, %stack.4.rowstr.addr, 0 :: (store 8 into %ir.rowstr.addr)
224B	  STRWui %5:gpr32, %stack.5.firstrow.addr, 0 :: (store 4 into %ir.firstrow.addr)
240B	  STRWui %6:gpr32, %stack.6.lastrow.addr, 0 :: (store 4 into %ir.lastrow.addr)
256B	  STRWui %7:gpr32, %stack.7.firstcol.addr, 0 :: (store 4 into %ir.firstcol.addr)
272B	  %8:gpr32 = MOVi32imm 1
288B	  STRWui %8:gpr32, %stack.16.nn1, 0, debug-location !634 :: (store 4 into %ir.nn1); cg.c:609:9

304B	bb.1.do.body:
	; predecessors: %bb.0, %bb.1
	  successors: %bb.1(0x7c000000), %bb.2(0x04000000); %bb.1(96.88%), %bb.2(3.12%)

320B	  %9:gpr32 = LDRWui %stack.16.nn1, 0, debug-location !636 :: (dereferenceable load 4 from %ir.nn1); cg.c:611:19
368B	  %11:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !641 :: (dereferenceable load 4 from %ir.n.addr); cg.c:612:20
376B	  %10:gpr32 = UBFMWri %9:gpr32, 31, 30, debug-location !638; cg.c:611:17
384B	  dead $wzr = SUBSWrr %10:gpr32, %11:gpr32, implicit-def $nzcv, debug-location !643; cg.c:612:5
392B	  STRWui %10:gpr32, %stack.16.nn1, 0, debug-location !639 :: (store 4 into %ir.nn1); cg.c:611:13
400B	  Bcc 11, %bb.1, implicit killed $nzcv, debug-location !643; cg.c:612:5
416B	  B %bb.2, debug-location !643; cg.c:612:5

432B	bb.2.do.end:
	; predecessors: %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

464B	  STRWui $wzr, %stack.13.iouter, 0, debug-location !646 :: (store 4 into %ir.iouter); cg.c:617:17
480B	  %34:gpr32 = MOVi32imm 13
496B	  %37:gpr64sp = ADDXri %stack.18.vc, 0, 0
512B	  %38:gpr64sp = ADDXri %stack.17.ivc, 0, 0
544B	  %43:fpr64 = FMOVDi 96
560B	  undef %61.sub_32:gpr64 = MOVi32imm 56
592B	  undef %71.sub_32:gpr64 = MOVi32imm 112

624B	bb.3.for.cond:
	; predecessors: %bb.2, %bb.7
	  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

640B	  %14:gpr32 = LDRWui %stack.13.iouter, 0, debug-location !649 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:22
656B	  %15:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !651 :: (dereferenceable load 4 from %ir.n.addr); cg.c:617:31
672B	  dead $wzr = SUBSWrr %14:gpr32, %15:gpr32, implicit-def $nzcv, debug-location !653; cg.c:617:5
688B	  Bcc 10, %bb.8, implicit killed $nzcv, debug-location !653; cg.c:617:5
704B	  B %bb.4, debug-location !653; cg.c:617:5

720B	bb.4.for.body:
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

752B	  %35:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !656 :: (dereferenceable load 4 from %ir.n.addr); cg.c:619:16
768B	  %36:gpr32 = LDRWui %stack.16.nn1, 0, debug-location !658 :: (dereferenceable load 4 from %ir.nn1); cg.c:619:24
776B	  STRWui %34:gpr32, %stack.15.nzv, 0, debug-location !654 :: (store 4 into %ir.nzv); cg.c:618:13
784B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !661; cg.c:619:9
848B	  $x3 = ADDXri %stack.18.vc, 0, 0, debug-location !661; cg.c:619:9
864B	  $x4 = ADDXri %stack.17.ivc, 0, 0, debug-location !661; cg.c:619:9
872B	  $w1 = MOVi32imm 13, debug-location !661; cg.c:619:9
880B	  $w0 = COPY %35:gpr32, debug-location !661; cg.c:619:9
888B	  $w2 = COPY %36:gpr32, debug-location !661; cg.c:619:9
896B	  BL @sprnvc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $w1, implicit $w2, implicit $x3, implicit $x4, implicit-def $sp, debug-location !661; cg.c:619:9
904B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !661; cg.c:619:9
928B	  %40:gpr32common = LDRWui %stack.13.iouter, 0, debug-location !665 :: (dereferenceable load 4 from %ir.iouter); cg.c:620:34
936B	  %39:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !662 :: (dereferenceable load 4 from %ir.n.addr); cg.c:620:16
944B	  %41:gpr32sp = nsw ADDWri %40:gpr32common, 1, 0, debug-location !666; cg.c:620:41
960B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !667; cg.c:620:9
992B	  $x1 = ADDXri %stack.18.vc, 0, 0, debug-location !667; cg.c:620:9
1008B	  $x2 = ADDXri %stack.17.ivc, 0, 0, debug-location !667; cg.c:620:9
1024B	  $x3 = ADDXri %stack.15.nzv, 0, 0, debug-location !667; cg.c:620:9
1032B	  $w0 = COPY %39:gpr32, debug-location !667; cg.c:620:9
1040B	  $w4 = COPY %41:gpr32sp, debug-location !667; cg.c:620:9
1056B	  $d0 = COPY %43:fpr64, debug-location !667; cg.c:620:9
1072B	  BL @vecset, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit $x2, implicit $x3, implicit $w4, implicit killed $d0, implicit-def $sp, debug-location !667; cg.c:620:9
1088B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !667; cg.c:620:9
1104B	  %44:gpr32 = LDRWui %stack.15.nzv, 0, debug-location !668 :: (dereferenceable load 4 from %ir.nzv); cg.c:621:24
1120B	  %45:gpr64common = LDRXui %fixed-stack.3, 0, debug-location !669 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:621:9
1136B	  %46:gpr64 = LDRSWui %stack.13.iouter, 0, debug-location !670 :: (dereferenceable load 4 from %ir.iouter); cg.c:621:14
1152B	  STRWroX %44:gpr32, %45:gpr64common, %46:gpr64, 0, 1, debug-location !671 :: (store 4 into %ir.arrayidx); cg.c:621:22
1184B	  STRWui $wzr, %stack.14.ivelt, 0, debug-location !672 :: (store 4 into %ir.ivelt); cg.c:623:20

1200B	bb.5.for.cond5:
	; predecessors: %bb.4, %bb.6
	  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

1216B	  %48:gpr32 = LDRWui %stack.14.ivelt, 0, debug-location !675 :: (dereferenceable load 4 from %ir.ivelt); cg.c:623:25
1232B	  %49:gpr32 = LDRWui %stack.15.nzv, 0, debug-location !677 :: (dereferenceable load 4 from %ir.nzv); cg.c:623:33
1248B	  dead $wzr = SUBSWrr %48:gpr32, %49:gpr32, implicit-def $nzcv, debug-location !679; cg.c:623:9
1264B	  Bcc 10, %bb.7, implicit killed $nzcv, debug-location !679; cg.c:623:9
1280B	  B %bb.6, debug-location !679; cg.c:623:9

1296B	bb.6.for.body7:
	; predecessors: %bb.5
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

1312B	  %53:gpr64 = LDRSWui %stack.14.ivelt, 0, debug-location !680 :: (dereferenceable load 4 from %ir.ivelt); cg.c:624:39
1376B	  %58:gpr64 = LDRXui %fixed-stack.2, 0, debug-location !684 :: (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:624:13
1392B	  %59:gpr64 = LDRSWui %stack.13.iouter, 0, debug-location !685 :: (dereferenceable load 4 from %ir.iouter); cg.c:624:18
1396B	  %54:gpr64 = UBFMXri %53:gpr64, 62, 61, debug-location !682; cg.c:624:35
1400B	  %56:gpr32common = LDRWroX %38:gpr64sp, %54:gpr64, 0, 0, debug-location !682 :: (load 4 from %ir.arrayidx9); cg.c:624:35
1408B	  %63:gpr64common = MADDXrrr %59:gpr64, %61:gpr64, %58:gpr64, debug-location !684; cg.c:624:13
1416B	  %57:gpr32common = SUBWri %56:gpr32common, 1, 0, debug-location !683; cg.c:624:46
1424B	  STRWroX %57:gpr32common, %63:gpr64common, %54:gpr64, 0, 0, debug-location !687 :: (store 4 into %ir.arrayidx13); cg.c:624:33
1440B	  %64:gpr64 = LDRSWui %stack.14.ivelt, 0, debug-location !688 :: (dereferenceable load 4 from %ir.ivelt); cg.c:625:38
1488B	  %68:gpr64 = LDRXui %fixed-stack.1, 0, debug-location !690 :: (dereferenceable load 8 from %ir.aelt.addr); cg.c:625:13
1496B	  %65:gpr64 = UBFMXri %64:gpr64, 61, 60, debug-location !689; cg.c:625:35
1504B	  %69:gpr64 = LDRSWui %stack.13.iouter, 0, debug-location !691 :: (dereferenceable load 4 from %ir.iouter); cg.c:625:18
1512B	  %67:fpr64 = LDRDroX %37:gpr64sp, %65:gpr64, 0, 0, debug-location !689 :: (load 8 from %ir.arrayidx15); cg.c:625:35
1520B	  %73:gpr64common = MADDXrrr %69:gpr64, %71:gpr64, %68:gpr64, debug-location !690; cg.c:625:13
1536B	  STRDroX %67:fpr64, %73:gpr64common, %65:gpr64, 0, 0, debug-location !693 :: (store 8 into %ir.arrayidx19); cg.c:625:33
1552B	  %74:gpr32common = LDRWui %stack.14.ivelt, 0, debug-location !694 :: (dereferenceable load 4 from %ir.ivelt); cg.c:623:43
1568B	  %75:gpr32common = nsw ADDWri %74:gpr32common, 1, 0, debug-location !694; cg.c:623:43
1584B	  STRWui %75:gpr32common, %stack.14.ivelt, 0, debug-location !694 :: (store 4 into %ir.ivelt); cg.c:623:43
1600B	  B %bb.5, debug-location !695; cg.c:623:9

1616B	bb.7.for.inc20:
	; predecessors: %bb.5
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

1632B	  %51:gpr32common = LDRWui %stack.13.iouter, 0, debug-location !698 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:40
1648B	  %52:gpr32common = nsw ADDWri %51:gpr32common, 1, 0, debug-location !698; cg.c:617:40
1664B	  STRWui %52:gpr32common, %stack.13.iouter, 0, debug-location !698 :: (store 4 into %ir.iouter); cg.c:617:40
1680B	  B %bb.3, debug-location !699; cg.c:617:5

1696B	bb.8.for.end22:
	; predecessors: %bb.3

1712B	  %17:gpr64 = LDRXui %stack.2.a.addr, 0, debug-location !702 :: (dereferenceable load 8 from %ir.a.addr); cg.c:633:12
1728B	  %18:gpr64 = LDRXui %stack.3.colidx.addr, 0, debug-location !703 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:633:15
1744B	  %19:gpr64 = LDRXui %stack.4.rowstr.addr, 0, debug-location !704 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:633:23
1760B	  %20:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !705 :: (dereferenceable load 4 from %ir.n.addr); cg.c:633:31
1776B	  %21:gpr32 = LDRWui %stack.1.nz.addr, 0, debug-location !706 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:633:34
1792B	  %22:gpr64 = LDRXui %fixed-stack.3, 0, debug-location !707 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:633:46
1808B	  %23:gpr64 = LDRXui %fixed-stack.2, 0, debug-location !708 :: (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:633:52
1824B	  %24:gpr64 = LDRXui %fixed-stack.1, 0, debug-location !709 :: (dereferenceable load 8 from %ir.aelt.addr); cg.c:633:58
1840B	  %25:gpr32 = LDRWui %stack.5.firstrow.addr, 0, debug-location !710 :: (dereferenceable load 4 from %ir.firstrow.addr); cg.c:633:64
1856B	  %26:gpr32 = LDRWui %stack.6.lastrow.addr, 0, debug-location !711 :: (dereferenceable load 4 from %ir.lastrow.addr); cg.c:634:12
1872B	  %27:gpr64 = LDRXui %fixed-stack.0, 0, debug-location !712 :: (dereferenceable load 8 from %ir.iv.addr, align 16); cg.c:634:21
1888B	  ADJCALLSTACKDOWN 32, 0, implicit-def dead $sp, implicit $sp, debug-location !713; cg.c:633:5
1920B	  STRXui %27:gpr64, $sp, 3, debug-location !713 :: (store 8 into stack + 24); cg.c:633:5
1936B	  STRWui %26:gpr32, $sp, 4, debug-location !713 :: (store 4 into stack + 16); cg.c:633:5
1984B	  %29:gpr64common = ADRP target-flags(aarch64-page) %const.0
2000B	  %30:fpr64 = LDRDui %29:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
2008B	  STRWui %25:gpr32, $sp, 2, debug-location !713 :: (store 4 into stack + 8); cg.c:633:5
2016B	  %31:gpr64 = MOVi64imm 4633641066610819072
2144B	  $w5 = MOVi32imm 13, debug-location !713; cg.c:633:5
2148B	  STRXui %24:gpr64, $sp, 0, debug-location !713 :: (store 8 into stack); cg.c:633:5
2152B	  %32:fpr64 = COPY %31:gpr64
2192B	  $d0 = COPY %30:fpr64, debug-location !713; cg.c:633:5
2208B	  $d1 = COPY %32:fpr64, debug-location !713; cg.c:633:5
2216B	  $x0 = COPY %17:gpr64, debug-location !713; cg.c:633:5
2224B	  $x1 = COPY %18:gpr64, debug-location !713; cg.c:633:5
2232B	  $x2 = COPY %19:gpr64, debug-location !713; cg.c:633:5
2240B	  $w3 = COPY %20:gpr32, debug-location !713; cg.c:633:5
2248B	  $w4 = COPY %21:gpr32, debug-location !713; cg.c:633:5
2256B	  $x6 = COPY %22:gpr64, debug-location !713; cg.c:633:5
2264B	  $x7 = COPY %23:gpr64, debug-location !713; cg.c:633:5
2272B	  BL @sparse, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $w3, implicit $w4, implicit $w5, implicit $x6, implicit $x7, implicit killed $d0, implicit killed $d1, implicit-def $sp, debug-location !713; cg.c:633:5
2280B	  ADJCALLSTACKUP 32, 0, implicit-def dead $sp, implicit $sp, debug-location !713; cg.c:633:5
2288B	  RET_ReallyLR debug-location !714; cg.c:635:1

# End machine code for function makea.

Before post-MI-sched:
# Machine code for function makea: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-5: size=8, align=16, fixed, at location [SP+32]
  fi#-4: size=8, align=8, fixed, at location [SP+24]
  fi#-3: size=8, align=16, fixed, at location [SP+16]
  fi#-2: size=8, align=8, fixed, at location [SP+8]
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP-68]
  fi#1: size=4, align=4, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-88]
  fi#3: size=8, align=8, at location [SP-96]
  fi#4: size=8, align=8, at location [SP-104]
  fi#5: size=4, align=4, at location [SP-108]
  fi#6: size=4, align=4, at location [SP-112]
  fi#7: size=4, align=4, at location [SP-116]
  fi#8: dead
  fi#9: dead
  fi#10: dead
  fi#11: dead
  fi#12: dead
  fi#13: size=4, align=4, at location [SP-120]
  fi#14: size=4, align=4, at location [SP-124]
  fi#15: size=4, align=4, at location [SP-128]
  fi#16: size=4, align=4, at location [SP-132]
  fi#17: size=56, align=16, at location [SP-192]
  fi#18: size=112, align=16, at location [SP-304]
  fi#19: size=8, align=8, at location [SP-8]
  fi#20: size=8, align=8, at location [SP-16]
  fi#21: size=8, align=8, at location [SP-24]
  fi#22: size=8, align=8, at location [SP-32]
  fi#23: size=8, align=8, at location [SP-40]
  fi#24: size=8, align=8, at location [SP-48]
  fi#25: size=8, align=8, at location [SP-56]
  fi#26: size=8, align=8, at location [SP-64]
  fi#27: size=8, align=16, at location [SP-80]
Constant Pool:
  cp#0: 1.000000e-01, align=8
Function Live Ins: $w0, $w1, $x2, $x3, $x4, $w5, $w6, $w7

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $w0, $w1, $w5, $w6, $w7, $x2, $x3, $x4, $d8, $x23, $x28, $x21, $x22, $x19, $x20, $lr
  $sp = frame-setup SUBXri $sp, 336, 0
  frame-setup STRDui killed $d8, $sp, 32 :: (store 8 into %stack.27)
  frame-setup STPXi killed $x28, killed $x23, $sp, 34 :: (store 8 into %stack.26), (store 8 into %stack.25)
  frame-setup STPXi killed $x22, killed $x21, $sp, 36 :: (store 8 into %stack.24), (store 8 into %stack.23)
  frame-setup STPXi killed $x20, killed $x19, $sp, 38 :: (store 8 into %stack.22), (store 8 into %stack.21)
  frame-setup STPXi killed $fp, killed $lr, $sp, 40 :: (store 8 into %stack.20), (store 8 into %stack.19)
  $fp = frame-setup ADDXri $sp, 320, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  frame-setup CFI_INSTRUCTION offset $w19, -24
  frame-setup CFI_INSTRUCTION offset $w20, -32
  frame-setup CFI_INSTRUCTION offset $w21, -40
  frame-setup CFI_INSTRUCTION offset $w22, -48
  frame-setup CFI_INSTRUCTION offset $w23, -56
  frame-setup CFI_INSTRUCTION offset $w28, -64
  frame-setup CFI_INSTRUCTION offset $b8, -80
  STPWi renamable $w1, renamable $w0, $fp, -14 :: (store 4 into %ir.n.addr), (store 4 into %ir.nz.addr)
  STPXi renamable $x3, renamable $x2, $fp, -10 :: (store 8 into %ir.a.addr), (store 8 into %ir.colidx.addr)
  STURXi killed renamable $x4, $fp, -88 :: (store 8 into %ir.rowstr.addr)
  STPWi renamable $w6, renamable $w5, $fp, -24 :: (store 4 into %ir.firstrow.addr), (store 4 into %ir.lastrow.addr)
  STURWi killed renamable $w7, $fp, -100 :: (store 4 into %ir.firstcol.addr)
  $w8 = MOVZWi 1, 0
  STURWi killed renamable $w8, $fp, -116, debug-location !634 :: (store 4 into %ir.nn1); cg.c:609:9

bb.1.do.body:
; predecessors: %bb.0, %bb.1
  successors: %bb.1(0x7c000000), %bb.2(0x04000000); %bb.1(96.88%), %bb.2(3.12%)

  renamable $w8 = LDURWi $fp, -116, debug-location !636 :: (dereferenceable load 4 from %ir.nn1); cg.c:611:19
  renamable $w9 = LDURWi $fp, -52, debug-location !641 :: (dereferenceable load 4 from %ir.n.addr); cg.c:612:20
  renamable $w8 = UBFMWri killed renamable $w8, 31, 30, debug-location !638; cg.c:611:17
  $wzr = SUBSWrs renamable $w8, killed renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !643; cg.c:612:5
  STURWi killed renamable $w8, $fp, -116, debug-location !639 :: (store 4 into %ir.nn1); cg.c:611:13
  Bcc 11, %bb.1, implicit $nzcv, debug-location !643; cg.c:612:5

bb.2.do.end:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  STURWi $wzr, $fp, -104, debug-location !646 :: (store 4 into %ir.iouter); cg.c:617:17
  $w19 = MOVZWi 13, 0
  $x20 = ADDXri $sp, 32, 0
  $x21 = ADDXri $sp, 144, 0
  renamable $d8 = FMOVDi 96
  $w22 = MOVZWi 56, 0, implicit-def $x22
  $w23 = MOVZWi 112, 0, implicit-def $x23

bb.3.for.cond:
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)
  liveins: $d8, $w19, $x20, $x21, $x22, $x23
  renamable $w8 = LDURWi $fp, -104, debug-location !649 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:22
  renamable $w9 = LDURWi $fp, -52, debug-location !651 :: (dereferenceable load 4 from %ir.n.addr); cg.c:617:31
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !653; cg.c:617:5
  Bcc 10, %bb.8, implicit $nzcv, debug-location !653; cg.c:617:5

bb.4.for.body:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)
  liveins: $d8, $w19, $x20, $x21, $x22, $x23
  renamable $w0 = LDURWi $fp, -52, debug-location !656 :: (dereferenceable load 4 from %ir.n.addr); cg.c:619:16
  renamable $w2 = LDURWi $fp, -116, debug-location !658 :: (dereferenceable load 4 from %ir.nn1); cg.c:619:24
  STURWi renamable $w19, $fp, -112, debug-location !654 :: (store 4 into %ir.nzv); cg.c:618:13
  $x3 = ADDXri $sp, 32, 0, debug-location !661; cg.c:619:9
  $x4 = ADDXri $sp, 144, 0, debug-location !661; cg.c:619:9
  $w1 = MOVZWi 13, 0, debug-location !661; cg.c:619:9
  BL @sprnvc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $w1, implicit $w2, implicit $x3, implicit $x4, implicit-def $sp, debug-location !661; cg.c:619:9
  renamable $w8 = LDURWi $fp, -104, debug-location !665 :: (dereferenceable load 4 from %ir.iouter); cg.c:620:34
  renamable $w0 = LDURWi $fp, -52, debug-location !662 :: (dereferenceable load 4 from %ir.n.addr); cg.c:620:16
  renamable $w4 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !666; cg.c:620:41
  $x1 = ADDXri $sp, 32, 0, debug-location !667; cg.c:620:9
  $x2 = ADDXri $sp, 144, 0, debug-location !667; cg.c:620:9
  $x3 = SUBXri $fp, 112, 0, debug-location !667; cg.c:620:9
  $q0 = ORRv16i8 $q8, $q8, debug-location !667; cg.c:620:9
  BL @vecset, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit $x2, implicit $x3, implicit $w4, implicit $d0, implicit-def $sp, debug-location !667; cg.c:620:9
  renamable $w8 = LDURWi $fp, -112, debug-location !668 :: (dereferenceable load 4 from %ir.nzv); cg.c:621:24
  renamable $x9 = LDRXui $fp, 3, debug-location !669 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:621:9
  renamable $x10 = LDURSWi $fp, -104, debug-location !670 :: (dereferenceable load 4 from %ir.iouter); cg.c:621:14
  STRWroX killed renamable $w8, killed renamable $x9, killed renamable $x10, 0, 1, debug-location !671 :: (store 4 into %ir.arrayidx); cg.c:621:22
  STURWi $wzr, $fp, -108, debug-location !672 :: (store 4 into %ir.ivelt); cg.c:623:20

bb.5.for.cond5:
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)
  liveins: $d8, $w19, $x20, $x21, $x22, $x23
  renamable $w9, renamable $w8 = LDPWi $fp, -28, debug-location !675 :: (dereferenceable load 4 from %ir.ivelt), (dereferenceable load 4 from %ir.nzv); cg.c:623:25
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !679; cg.c:623:9
  Bcc 10, %bb.7, implicit $nzcv, debug-location !679; cg.c:623:9

bb.6.for.body7:
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)
  liveins: $d8, $w19, $x20, $x21, $x22, $x23
  renamable $x8, renamable $x10 = LDPSWi $fp, -27, debug-location !680 :: (dereferenceable load 4 from %ir.ivelt), (dereferenceable load 4 from %ir.iouter); cg.c:624:39
  renamable $x9 = LDRXui $fp, 4, debug-location !684 :: (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:624:13
  renamable $x8 = UBFMXri killed renamable $x8, 62, 61, debug-location !682; cg.c:624:35
  renamable $w11 = LDRWroX renamable $x21, renamable $x8, 0, 0, debug-location !682 :: (load 4 from %ir.arrayidx9); cg.c:624:35
  renamable $x9 = MADDXrrr killed renamable $x10, renamable $x22, killed renamable $x9, debug-location !684; cg.c:624:13
  renamable $w10 = SUBWri killed renamable $w11, 1, 0, debug-location !683; cg.c:624:46
  STRWroX killed renamable $w10, killed renamable $x9, killed renamable $x8, 0, 0, debug-location !687 :: (store 4 into %ir.arrayidx13); cg.c:624:33
  renamable $x8, renamable $x10 = LDPSWi $fp, -27, debug-location !688 :: (dereferenceable load 4 from %ir.ivelt), (dereferenceable load 4 from %ir.iouter); cg.c:625:38
  renamable $x9 = LDRXui $fp, 5, debug-location !690 :: (dereferenceable load 8 from %ir.aelt.addr); cg.c:625:13
  renamable $x8 = UBFMXri killed renamable $x8, 61, 60, debug-location !689; cg.c:625:35
  renamable $d0 = LDRDroX renamable $x20, renamable $x8, 0, 0, debug-location !689 :: (load 8 from %ir.arrayidx15); cg.c:625:35
  renamable $x9 = MADDXrrr killed renamable $x10, renamable $x23, killed renamable $x9, debug-location !690; cg.c:625:13
  STRDroX killed renamable $d0, killed renamable $x9, killed renamable $x8, 0, 0, debug-location !693 :: (store 8 into %ir.arrayidx19); cg.c:625:33
  renamable $w8 = LDURWi $fp, -108, debug-location !694 :: (dereferenceable load 4 from %ir.ivelt); cg.c:623:43
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !694; cg.c:623:43
  STURWi killed renamable $w8, $fp, -108, debug-location !694 :: (store 4 into %ir.ivelt); cg.c:623:43
  B %bb.5

bb.7.for.inc20:
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $d8, $w19, $x20, $x21, $x22, $x23
  renamable $w8 = LDURWi $fp, -104, debug-location !698 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:40
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !698; cg.c:617:40
  STURWi killed renamable $w8, $fp, -104, debug-location !698 :: (store 4 into %ir.iouter); cg.c:617:40
  B %bb.3

bb.8.for.end22:
; predecessors: %bb.3

  renamable $x1, renamable $x0 = LDPXi $fp, -10, debug-location !702 :: (dereferenceable load 8 from %ir.a.addr), (dereferenceable load 8 from %ir.colidx.addr); cg.c:633:12
  renamable $x2 = LDURXi $fp, -88, debug-location !704 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:633:23
  renamable $w4, renamable $w3 = LDPWi $fp, -14, debug-location !705 :: (dereferenceable load 4 from %ir.n.addr), (dereferenceable load 4 from %ir.nz.addr); cg.c:633:31
  renamable $x6, renamable $x7 = LDPXi $fp, 3, debug-location !707 :: (dereferenceable load 8 from %ir.arow.addr), (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:633:46
  renamable $x8, renamable $x11 = LDPXi $fp, 5, debug-location !709 :: (dereferenceable load 8 from %ir.aelt.addr), (dereferenceable load 8 from %ir.iv.addr, align 16); cg.c:633:58
  renamable $w10, renamable $w9 = LDPWi $fp, -24, debug-location !710 :: (dereferenceable load 4 from %ir.firstrow.addr), (dereferenceable load 4 from %ir.lastrow.addr); cg.c:633:64
  STRXui killed renamable $x11, $sp, 3, debug-location !713 :: (store 8 into stack + 24); cg.c:633:5
  STRWui killed renamable $w10, $sp, 4, debug-location !713 :: (store 4 into stack + 16); cg.c:633:5
  renamable $x10 = ADRP target-flags(aarch64-page) %const.0
  renamable $d0 = LDRDui killed renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  STRWui killed renamable $w9, $sp, 2, debug-location !713 :: (store 4 into stack + 8); cg.c:633:5
  $x9 = MOVZXi 16462, 48
  $w5 = MOVZWi 13, 0, debug-location !713; cg.c:633:5
  STRXui killed renamable $x8, $sp, 0, debug-location !713 :: (store 8 into stack); cg.c:633:5
  $d1 = FMOVXDr killed $x9
  BL @sparse, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $w3, implicit $w4, implicit $w5, implicit $x6, implicit $x7, implicit $d0, implicit $d1, implicit-def $sp, debug-location !713; cg.c:633:5
  $fp, $lr = frame-destroy LDPXi $sp, 40, debug-location !714 :: (load 8 from %stack.20), (load 8 from %stack.19); cg.c:635:1
  $x20, $x19 = frame-destroy LDPXi $sp, 38, debug-location !714 :: (load 8 from %stack.22), (load 8 from %stack.21); cg.c:635:1
  $x22, $x21 = frame-destroy LDPXi $sp, 36, debug-location !714 :: (load 8 from %stack.24), (load 8 from %stack.23); cg.c:635:1
  $x28, $x23 = frame-destroy LDPXi $sp, 34, debug-location !714 :: (load 8 from %stack.26), (load 8 from %stack.25); cg.c:635:1
  $d8 = frame-destroy LDRDui $sp, 32, debug-location !714 :: (load 8 from %stack.27); cg.c:635:1
  $sp = frame-destroy ADDXri $sp, 336, 0, debug-location !714; cg.c:635:1
  RET undef $lr, debug-location !714; cg.c:635:1

# End machine code for function makea.

********** MI Scheduling **********
makea:%bb.0 entry
  From: STPWi renamable $w1, renamable $w0, $fp, -14 :: (store 4 into %ir.n.addr), (store 4 into %ir.nz.addr)
    To: End RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   STPWi renamable $w1, renamable $w0, $fp, -14 :: (store 4 into %ir.n.addr), (store 4 into %ir.nz.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   STPXi renamable $x3, renamable $x2, $fp, -10 :: (store 8 into %ir.a.addr), (store 8 into %ir.colidx.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   STURXi renamable $x4, $fp, -88 :: (store 8 into %ir.rowstr.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(3):   STPWi renamable $w6, renamable $w5, $fp, -24 :: (store 4 into %ir.firstrow.addr), (store 4 into %ir.lastrow.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(4):   STURWi renamable $w7, $fp, -100 :: (store 4 into %ir.firstcol.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(5):   $w8 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(6): Data Latency=1 Reg=$w8
SU(6):   STURWi renamable $w8, $fp, -116, debug-location !634 :: (store 4 into %ir.nn1); cg.c:609:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=$w8
Disabled scoreboard hazard recognizer
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(5) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) $w8 = MOVZWi 1, 0
  Ready @0c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 6 
  TopQ.A RemainingLatency 0 + 1c > CritPath 1
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STPWi renamable $w1, renamable $w0, $fp, -14 :: (store 4 into %ir.n.addr), (store 4 into %ir.nz.addr)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 1 2 3 4 
  TopQ.A RemainingLatency 0 + 2c > CritPath 1
  Cand SU(6) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) STPXi renamable $x3, renamable $x2, $fp, -10 :: (store 8 into %ir.a.addr), (store 8 into %ir.colidx.addr)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 4 2 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 1
  Cand SU(6) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) STURXi renamable $x4, $fp, -88 :: (store 8 into %ir.rowstr.addr)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 4 3 
  TopQ.A RemainingLatency 0 + 4c > CritPath 1
  Cand SU(6) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) STPWi renamable $w6, renamable $w5, $fp, -24 :: (store 4 into %ir.firstrow.addr), (store 4 into %ir.lastrow.addr)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 4 
  TopQ.A RemainingLatency 0 + 5c > CritPath 1
  Cand SU(6) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) STURWi renamable $w7, $fp, -100 :: (store 4 into %ir.firstcol.addr)
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) STURWi renamable $w8, $fp, -116, debug-location !634 :: (store 4 into %ir.nn1); cg.c:609:9
  Ready @6c
  TopQ.A TopLatency SU(6) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(5):   $w8 = MOVZWi 1, 0
SU(0):   STPWi renamable $w1, renamable $w0, $fp, -14 :: (store 4 into %ir.n.addr), (store 4 into %ir.nz.addr)
SU(1):   STPXi renamable $x3, renamable $x2, $fp, -10 :: (store 8 into %ir.a.addr), (store 8 into %ir.colidx.addr)
SU(2):   STURXi renamable $x4, $fp, -88 :: (store 8 into %ir.rowstr.addr)
SU(3):   STPWi renamable $w6, renamable $w5, $fp, -24 :: (store 4 into %ir.firstrow.addr), (store 4 into %ir.lastrow.addr)
SU(4):   STURWi renamable $w7, $fp, -100 :: (store 4 into %ir.firstcol.addr)
SU(6):   STURWi renamable $w8, $fp, -116, debug-location !634 :: (store 4 into %ir.nn1); cg.c:609:9

********** MI Scheduling **********
makea:%bb.0 entry
  From: frame-setup STRDui killed $d8, $sp, 32 :: (store 8 into %stack.27)
    To: frame-setup CFI_INSTRUCTION def_cfa $w29, 16
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   frame-setup STRDui $d8, $sp, 32 :: (store 8 into %stack.27)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   frame-setup STPXi $x28, $x23, $sp, 34 :: (store 8 into %stack.26), (store 8 into %stack.25)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   frame-setup STPXi $x22, $x21, $sp, 36 :: (store 8 into %stack.24), (store 8 into %stack.23)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(3):   frame-setup STPXi $x20, $x19, $sp, 38 :: (store 8 into %stack.22), (store 8 into %stack.21)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(4):   frame-setup STPXi $fp, $lr, $sp, 40 :: (store 8 into %stack.20), (store 8 into %stack.19)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Successors:
    SU(5): Anti Latency=0
SU(5):   $fp = frame-setup ADDXri $sp, 320, 0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(4): Anti Latency=0
ExitSU:   frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 0
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) frame-setup STRDui $d8, $sp, 32 :: (store 8 into %stack.27)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 1 2 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 0
  Cand SU(4) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) frame-setup STPXi $x28, $x23, $sp, 34 :: (store 8 into %stack.26), (store 8 into %stack.25)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 0
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) frame-setup STPXi $x22, $x21, $sp, 36 :: (store 8 into %stack.24), (store 8 into %stack.23)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 0
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) frame-setup STPXi $x20, $x19, $sp, 38 :: (store 8 into %stack.22), (store 8 into %stack.21)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) frame-setup STPXi $fp, $lr, $sp, 40 :: (store 8 into %stack.20), (store 8 into %stack.19)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $fp = frame-setup ADDXri $sp, 320, 0
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   frame-setup STRDui $d8, $sp, 32 :: (store 8 into %stack.27)
SU(1):   frame-setup STPXi $x28, $x23, $sp, 34 :: (store 8 into %stack.26), (store 8 into %stack.25)
SU(2):   frame-setup STPXi $x22, $x21, $sp, 36 :: (store 8 into %stack.24), (store 8 into %stack.23)
SU(3):   frame-setup STPXi $x20, $x19, $sp, 38 :: (store 8 into %stack.22), (store 8 into %stack.21)
SU(4):   frame-setup STPXi $fp, $lr, $sp, 40 :: (store 8 into %stack.20), (store 8 into %stack.19)
SU(5):   $fp = frame-setup ADDXri $sp, 320, 0

Fixup kills for %bb.0
********** MI Scheduling **********
makea:%bb.1 do.body
  From: renamable $w8 = LDURWi $fp, -116, debug-location !636 :: (dereferenceable load 4 from %ir.nn1); cg.c:611:19
    To: Bcc 11, %bb.1, implicit $nzcv, debug-location !643; cg.c:612:5
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -116, debug-location !636 :: (dereferenceable load 4 from %ir.nn1); cg.c:611:19
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$w8
    SU(4): Ord  Latency=0 Memory
SU(1):   renamable $w9 = LDURWi $fp, -52, debug-location !641 :: (dereferenceable load 4 from %ir.n.addr); cg.c:612:20
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=$w9
SU(2):   renamable $w8 = UBFMWri renamable $w8, 31, 30, debug-location !638; cg.c:611:17
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(4): Data Latency=1 Reg=$w8
    SU(3): Data Latency=1 Reg=$w8
SU(3):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !643; cg.c:612:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=$w8
    SU(1): Data Latency=4 Reg=$w9
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   STURWi renamable $w8, $fp, -116, debug-location !639 :: (store 4 into %ir.nn1); cg.c:611:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   Bcc 11, %bb.1, implicit $nzcv, debug-location !643; cg.c:612:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w8 = LDURWi $fp, -116, debug-location !636 :: (dereferenceable load 4 from %ir.nn1); cg.c:611:19
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w9 = LDURWi $fp, -52, debug-location !641 :: (dereferenceable load 4 from %ir.n.addr); cg.c:612:20
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w8 = UBFMWri renamable $w8, 31, 30, debug-location !638; cg.c:611:17
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 3 
  TopQ.A RemainingLatency 0 + 5c > CritPath 6
  Cand SU(4) ORDER                              
  Cand SU(3) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !643; cg.c:612:5
  Ready @5c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) STURWi renamable $w8, $fp, -116, debug-location !639 :: (store 4 into %ir.nn1); cg.c:611:13
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   renamable $w8 = LDURWi $fp, -116, debug-location !636 :: (dereferenceable load 4 from %ir.nn1); cg.c:611:19
SU(1):   renamable $w9 = LDURWi $fp, -52, debug-location !641 :: (dereferenceable load 4 from %ir.n.addr); cg.c:612:20
SU(2):   renamable $w8 = UBFMWri renamable $w8, 31, 30, debug-location !638; cg.c:611:17
SU(3):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !643; cg.c:612:5
SU(4):   STURWi renamable $w8, $fp, -116, debug-location !639 :: (store 4 into %ir.nn1); cg.c:611:13

Fixup kills for %bb.1
********** MI Scheduling **********
makea:%bb.2 do.end
  From: STURWi $wzr, $fp, -104, debug-location !646 :: (store 4 into %ir.iouter); cg.c:617:17
    To: End RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   STURWi $wzr, $fp, -104, debug-location !646 :: (store 4 into %ir.iouter); cg.c:617:17
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $w19 = MOVZWi 13, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $x20 = ADDXri $sp, 32, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $x21 = ADDXri $sp, 144, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   renamable $d8 = FMOVDi 96
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   $w22 = MOVZWi 56, 0, implicit-def $x22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(6):   $w23 = MOVZWi 112, 0, implicit-def $x23
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $w19 = MOVZWi 13, 0
  Ready @0c
  TopQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 6 2 3 4 5 
  TopQ.A RemainingLatency 0 + 1c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  1 cycles 
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) $x20 = ADDXri $sp, 32, 0
  Ready @1c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 6 5 3 4 
  TopQ.A RemainingLatency 0 + 2c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  1 cycles 
  Cand SU(5) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) $x21 = ADDXri $sp, 144, 0
  Ready @2c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 6 5 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  1 cycles 
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) renamable $d8 = FMOVDi 96
  Ready @3c
  TopQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 6 5 
  TopQ.A RemainingLatency 0 + 4c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  1 cycles 
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) $w22 = MOVZWi 56, 0, implicit-def $x22
  Ready @4c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 6 
  TopQ.A RemainingLatency 0 + 5c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) $w23 = MOVZWi 112, 0, implicit-def $x23
  Ready @5c
  TopQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURWi $wzr, $fp, -104, debug-location !646 :: (store 4 into %ir.iouter); cg.c:617:17
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.2 ***
SU(1):   $w19 = MOVZWi 13, 0
SU(2):   $x20 = ADDXri $sp, 32, 0
SU(3):   $x21 = ADDXri $sp, 144, 0
SU(4):   renamable $d8 = FMOVDi 96
SU(5):   $w22 = MOVZWi 56, 0, implicit-def $x22
SU(6):   $w23 = MOVZWi 112, 0, implicit-def $x23
SU(0):   STURWi $wzr, $fp, -104, debug-location !646 :: (store 4 into %ir.iouter); cg.c:617:17

Fixup kills for %bb.2
********** MI Scheduling **********
makea:%bb.3 for.cond
  From: renamable $w8 = LDURWi $fp, -104, debug-location !649 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:22
    To: Bcc 10, %bb.8, implicit $nzcv, debug-location !653; cg.c:617:5
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -104, debug-location !649 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w8
SU(1):   renamable $w9 = LDURWi $fp, -52, debug-location !651 :: (dereferenceable load 4 from %ir.n.addr); cg.c:617:31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w9
SU(2):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !653; cg.c:617:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=$w9
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.8, implicit $nzcv, debug-location !653; cg.c:617:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -104, debug-location !649 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:22
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w9 = LDURWi $fp, -52, debug-location !651 :: (dereferenceable load 4 from %ir.n.addr); cg.c:617:31
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !653; cg.c:617:5
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   renamable $w8 = LDURWi $fp, -104, debug-location !649 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:22
SU(1):   renamable $w9 = LDURWi $fp, -52, debug-location !651 :: (dereferenceable load 4 from %ir.n.addr); cg.c:617:31
SU(2):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !653; cg.c:617:5

Fixup kills for %bb.3
********** MI Scheduling **********
makea:%bb.4 for.body
  From: renamable $w8 = LDURWi $fp, -112, debug-location !668 :: (dereferenceable load 4 from %ir.nzv); cg.c:621:24
    To: End RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -112, debug-location !668 :: (dereferenceable load 4 from %ir.nzv); cg.c:621:24
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=$w8
    SU(3): Ord  Latency=0 Memory
SU(1):   renamable $x9 = LDRXui $fp, 3, debug-location !669 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:621:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=$x9
    SU(3): Ord  Latency=0 Memory
SU(2):   renamable $x10 = LDURSWi $fp, -104, debug-location !670 :: (dereferenceable load 4 from %ir.iouter); cg.c:621:14
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=$x10
    SU(3): Ord  Latency=0 Memory
SU(3):   STRWroX renamable $w8, renamable $x9, renamable $x10, 0, 1, debug-location !671 :: (store 4 into %ir.arrayidx); cg.c:621:22
  # preds left       : 6
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=$x10
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=$x9
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=$w8
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(4): Ord  Latency=0 Memory
SU(4):   STURWi $wzr, $fp, -108, debug-location !672 :: (store 4 into %ir.ivelt); cg.c:623:20
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Memory
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -112, debug-location !668 :: (dereferenceable load 4 from %ir.nzv); cg.c:621:24
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 4
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) renamable $x9 = LDRXui $fp, 3, debug-location !669 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:621:9
  Ready @1c
  TopQ.A BotLatency SU(1) 4c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x10 = LDURSWi $fp, -104, debug-location !670 :: (dereferenceable load 4 from %ir.iouter); cg.c:621:14
  Ready @2c
  TopQ.A BotLatency SU(2) 4c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 6 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STRWroX renamable $w8, renamable $x9, renamable $x10, 0, 1, debug-location !671 :: (store 4 into %ir.arrayidx); cg.c:621:22
  Ready @6c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) STURWi $wzr, $fp, -108, debug-location !672 :: (store 4 into %ir.ivelt); cg.c:623:20
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   renamable $w8 = LDURWi $fp, -112, debug-location !668 :: (dereferenceable load 4 from %ir.nzv); cg.c:621:24
SU(1):   renamable $x9 = LDRXui $fp, 3, debug-location !669 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:621:9
SU(2):   renamable $x10 = LDURSWi $fp, -104, debug-location !670 :: (dereferenceable load 4 from %ir.iouter); cg.c:621:14
SU(3):   STRWroX renamable $w8, renamable $x9, renamable $x10, 0, 1, debug-location !671 :: (store 4 into %ir.arrayidx); cg.c:621:22
SU(4):   STURWi $wzr, $fp, -108, debug-location !672 :: (store 4 into %ir.ivelt); cg.c:623:20

********** MI Scheduling **********
makea:%bb.4 for.body
  From: renamable $w8 = LDURWi $fp, -104, debug-location !665 :: (dereferenceable load 4 from %ir.iouter); cg.c:620:34
    To: BL @vecset, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit $x2, implicit $x3, implicit $w4, implicit $d0, implicit-def $sp, debug-location !667; cg.c:620:9
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -104, debug-location !665 :: (dereferenceable load 4 from %ir.iouter); cg.c:620:34
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w8
SU(1):   renamable $w0 = LDURWi $fp, -52, debug-location !662 :: (dereferenceable load 4 from %ir.n.addr); cg.c:620:16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(2):   renamable $w4 = nsw ADDWri renamable $w8, 1, 0, debug-location !666; cg.c:620:41
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $x1 = ADDXri $sp, 32, 0, debug-location !667; cg.c:620:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $x2 = ADDXri $sp, 144, 0, debug-location !667; cg.c:620:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   $x3 = SUBXri $fp, 112, 0, debug-location !667; cg.c:620:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(6):   $q0 = ORRv16i8 $q8, $q8, debug-location !667; cg.c:620:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @vecset, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit $x2, implicit $x3, implicit $w4, implicit $d0, implicit-def $sp, debug-location !667; cg.c:620:9
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=1 Artificial
    SU(5): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 5 6 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w8 = LDURWi $fp, -104, debug-location !665 :: (dereferenceable load 4 from %ir.iouter); cg.c:620:34
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 6 1 3 4 5 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(6) ORDER                              
  Cand SU(1) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w0 = LDURWi $fp, -52, debug-location !662 :: (dereferenceable load 4 from %ir.n.addr); cg.c:620:16
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 6 5 3 4 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) $x1 = ADDXri $sp, 32, 0, debug-location !667; cg.c:620:9
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 6 5 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) $x2 = ADDXri $sp, 144, 0, debug-location !667; cg.c:620:9
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 5 2 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) renamable $w4 = nsw ADDWri renamable $w8, 1, 0, debug-location !666; cg.c:620:41
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 5 
  TopQ.A RemainingLatency 0 + 5c > CritPath 5
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) $x3 = SUBXri $fp, 112, 0, debug-location !667; cg.c:620:9
  Ready @5c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) $q0 = ORRv16i8 $q8, $q8, debug-location !667; cg.c:620:9
  Ready @6c
  TopQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   renamable $w8 = LDURWi $fp, -104, debug-location !665 :: (dereferenceable load 4 from %ir.iouter); cg.c:620:34
SU(1):   renamable $w0 = LDURWi $fp, -52, debug-location !662 :: (dereferenceable load 4 from %ir.n.addr); cg.c:620:16
SU(3):   $x1 = ADDXri $sp, 32, 0, debug-location !667; cg.c:620:9
SU(4):   $x2 = ADDXri $sp, 144, 0, debug-location !667; cg.c:620:9
SU(2):   renamable $w4 = nsw ADDWri renamable $w8, 1, 0, debug-location !666; cg.c:620:41
SU(5):   $x3 = SUBXri $fp, 112, 0, debug-location !667; cg.c:620:9
SU(6):   $q0 = ORRv16i8 $q8, $q8, debug-location !667; cg.c:620:9

********** MI Scheduling **********
makea:%bb.4 for.body
  From: renamable $w0 = LDURWi $fp, -52, debug-location !656 :: (dereferenceable load 4 from %ir.n.addr); cg.c:619:16
    To: BL @sprnvc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $w1, implicit $w2, implicit $x3, implicit $x4, implicit-def $sp, debug-location !661; cg.c:619:9
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $w0 = LDURWi $fp, -52, debug-location !656 :: (dereferenceable load 4 from %ir.n.addr); cg.c:619:16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(1):   renamable $w2 = LDURWi $fp, -116, debug-location !658 :: (dereferenceable load 4 from %ir.nn1); cg.c:619:24
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(2):   STURWi renamable $w19, $fp, -112, debug-location !654 :: (store 4 into %ir.nzv); cg.c:618:13
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(3):   $x3 = ADDXri $sp, 32, 0, debug-location !661; cg.c:619:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $x4 = ADDXri $sp, 144, 0, debug-location !661; cg.c:619:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   $w1 = MOVZWi 13, 0, debug-location !661; cg.c:619:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @sprnvc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $w1, implicit $w2, implicit $x3, implicit $x4, implicit-def $sp, debug-location !661; cg.c:619:9
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=4 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w0 = LDURWi $fp, -52, debug-location !656 :: (dereferenceable load 4 from %ir.n.addr); cg.c:619:16
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 1 2 3 4 
  TopQ.A RemainingLatency 0 + 1c > CritPath 4
  Cand SU(5) ORDER                              
  Cand SU(1) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w2 = LDURWi $fp, -116, debug-location !658 :: (dereferenceable load 4 from %ir.nn1); cg.c:619:24
  Ready @1c
  TopQ.A BotLatency SU(1) 4c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 2 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 4
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) $x3 = ADDXri $sp, 32, 0, debug-location !661; cg.c:619:9
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 2 
  TopQ.A RemainingLatency 0 + 3c > CritPath 4
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) $x4 = ADDXri $sp, 144, 0, debug-location !661; cg.c:619:9
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 2 
  TopQ.A RemainingLatency 0 + 4c > CritPath 4
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) $w1 = MOVZWi 13, 0, debug-location !661; cg.c:619:9
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w19, $fp, -112, debug-location !654 :: (store 4 into %ir.nzv); cg.c:618:13
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   renamable $w0 = LDURWi $fp, -52, debug-location !656 :: (dereferenceable load 4 from %ir.n.addr); cg.c:619:16
SU(1):   renamable $w2 = LDURWi $fp, -116, debug-location !658 :: (dereferenceable load 4 from %ir.nn1); cg.c:619:24
SU(3):   $x3 = ADDXri $sp, 32, 0, debug-location !661; cg.c:619:9
SU(4):   $x4 = ADDXri $sp, 144, 0, debug-location !661; cg.c:619:9
SU(5):   $w1 = MOVZWi 13, 0, debug-location !661; cg.c:619:9
SU(2):   STURWi renamable $w19, $fp, -112, debug-location !654 :: (store 4 into %ir.nzv); cg.c:618:13

Fixup kills for %bb.4
********** MI Scheduling **********
makea:%bb.5 for.cond5
  From: renamable $w9, renamable $w8 = LDPWi $fp, -28, debug-location !675 :: (dereferenceable load 4 from %ir.ivelt), (dereferenceable load 4 from %ir.nzv); cg.c:623:25
    To: Bcc 10, %bb.7, implicit $nzcv, debug-location !679; cg.c:623:9
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w9, renamable $w8 = LDPWi $fp, -28, debug-location !675 :: (dereferenceable load 4 from %ir.ivelt), (dereferenceable load 4 from %ir.nzv); cg.c:623:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w9
    SU(1): Data Latency=4 Reg=$w8
SU(1):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !679; cg.c:623:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w9
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.7, implicit $nzcv, debug-location !679; cg.c:623:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w9, renamable $w8 = LDPWi $fp, -28, debug-location !675 :: (dereferenceable load 4 from %ir.ivelt), (dereferenceable load 4 from %ir.nzv); cg.c:623:25
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !679; cg.c:623:9
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   renamable $w9, renamable $w8 = LDPWi $fp, -28, debug-location !675 :: (dereferenceable load 4 from %ir.ivelt), (dereferenceable load 4 from %ir.nzv); cg.c:623:25
SU(1):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !679; cg.c:623:9

Fixup kills for %bb.5
********** MI Scheduling **********
makea:%bb.6 for.body7
  From: renamable $x8, renamable $x10 = LDPSWi $fp, -27, debug-location !680 :: (dereferenceable load 4 from %ir.ivelt), (dereferenceable load 4 from %ir.iouter); cg.c:624:39
    To: B %bb.5
 RegionInstrs: 16
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8, renamable $x10 = LDPSWi $fp, -27, debug-location !680 :: (dereferenceable load 4 from %ir.ivelt), (dereferenceable load 4 from %ir.iouter); cg.c:624:39
  # preds left       : 0
  # succs left       : 8
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 26
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x8
    SU(5): Out  Latency=1
    SU(7): Out  Latency=1
    SU(4): Data Latency=4 Reg=$x10
    SU(15): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
SU(1):   renamable $x9 = LDRXui $fp, 4, debug-location !684 :: (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:624:13
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 21
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$x9
    SU(12): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
SU(2):   renamable $x8 = UBFMXri renamable $x8, 62, 61, debug-location !682; cg.c:624:35
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 22
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(7): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x8
    SU(3): Data Latency=1 Reg=$x8
SU(3):   renamable $w11 = LDRWroX renamable $x21, renamable $x8, 0, 0, debug-location !682 :: (load 4 from %ir.arrayidx9); cg.c:624:35
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 21
  Predecessors:
    SU(2): Data Latency=1 Reg=$x8
  Successors:
    SU(5): Data Latency=4 Reg=$w11
    SU(7): Anti Latency=0
    SU(12): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
SU(4):   renamable $x9 = MADDXrrr renamable $x10, renamable $x22, renamable $x9, debug-location !684; cg.c:624:13
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 17
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x9
    SU(0): Data Latency=4 Reg=$x10
  Successors:
    SU(8): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x9
    SU(5): Anti Latency=0
    SU(7): Anti Latency=0
SU(5):   renamable $w10 = SUBWri renamable $w11, 1, 0, debug-location !683; cg.c:624:46
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 17
  Predecessors:
    SU(4): Anti Latency=0
    SU(3): Data Latency=4 Reg=$w11
    SU(0): Out  Latency=1
  Successors:
    SU(7): Out  Latency=1
    SU(6): Data Latency=1 Reg=$w10
SU(6):   STRWroX renamable $w10, renamable $x9, renamable $x8, 0, 0, debug-location !687 :: (store 4 into %ir.arrayidx13); cg.c:624:33
  # preds left       : 6
  # succs left       : 9
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 16
  Predecessors:
    SU(5): Data Latency=1 Reg=$w10
    SU(4): Data Latency=1 Reg=$x9
    SU(3): Ord  Latency=0 Memory
    SU(2): Data Latency=1 Reg=$x8
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(7): Anti Latency=0
    SU(8): Anti Latency=0
    SU(7): Anti Latency=0
    SU(15): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
    SU(10): Ord  Latency=1 Memory
    SU(8): Ord  Latency=1 Memory
SU(7):   renamable $x8, renamable $x10 = LDPSWi $fp, -27, debug-location !688 :: (dereferenceable load 4 from %ir.ivelt), (dereferenceable load 4 from %ir.iouter); cg.c:625:38
  # preds left       : 8
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 15
  Predecessors:
    SU(6): Anti Latency=0
    SU(6): Anti Latency=0
    SU(6): Ord  Latency=1 Memory
    SU(5): Out  Latency=1
    SU(4): Anti Latency=0
    SU(3): Anti Latency=0
    SU(2): Out  Latency=1
    SU(0): Out  Latency=1
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=4 Reg=$x8
    SU(11): Data Latency=4 Reg=$x10
    SU(15): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
SU(8):   renamable $x9 = LDRXui $fp, 5, debug-location !690 :: (dereferenceable load 8 from %ir.aelt.addr); cg.c:625:13
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 11
  Predecessors:
    SU(6): Anti Latency=0
    SU(6): Ord  Latency=1 Memory
    SU(4): Out  Latency=1
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=4 Reg=$x9
    SU(12): Ord  Latency=0 Memory
SU(9):   renamable $x8 = UBFMXri renamable $x8, 61, 60, debug-location !689; cg.c:625:35
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 11
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$x8
  Successors:
    SU(13): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x8
    SU(10): Data Latency=1 Reg=$x8
SU(10):   renamable $d0 = LDRDroX renamable $x20, renamable $x8, 0, 0, debug-location !689 :: (load 8 from %ir.arrayidx15); cg.c:625:35
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 16
  Height             : 10
  Predecessors:
    SU(9): Data Latency=1 Reg=$x8
    SU(6): Ord  Latency=1 Memory
  Successors:
    SU(12): Data Latency=4 Reg=$d0
    SU(13): Anti Latency=0
    SU(12): Ord  Latency=0 Memory
SU(11):   renamable $x9 = MADDXrrr renamable $x10, renamable $x23, renamable $x9, debug-location !690; cg.c:625:13
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 7
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=4 Reg=$x9
    SU(7): Data Latency=4 Reg=$x10
  Successors:
    SU(12): Data Latency=1 Reg=$x9
SU(12):   STRDroX renamable $d0, renamable $x9, renamable $x8, 0, 0, debug-location !693 :: (store 8 into %ir.arrayidx19); cg.c:625:33
  # preds left       : 10
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 20
  Height             : 6
  Predecessors:
    SU(10): Data Latency=4 Reg=$d0
    SU(11): Data Latency=1 Reg=$x9
    SU(10): Ord  Latency=0 Memory
    SU(9): Data Latency=1 Reg=$x8
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(13): Anti Latency=0
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=1 Memory
SU(13):   renamable $w8 = LDURWi $fp, -108, debug-location !694 :: (dereferenceable load 4 from %ir.ivelt); cg.c:623:43
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 21
  Height             : 5
  Predecessors:
    SU(12): Anti Latency=0
    SU(12): Ord  Latency=1 Memory
    SU(10): Anti Latency=0
    SU(9): Out  Latency=1
    SU(6): Ord  Latency=1 Memory
  Successors:
    SU(14): Out  Latency=1
    SU(14): Data Latency=4 Reg=$w8
    SU(15): Ord  Latency=0 Memory
SU(14):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !694; cg.c:623:43
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 25
  Height             : 1
  Predecessors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=4 Reg=$w8
  Successors:
    SU(15): Data Latency=1 Reg=$w8
SU(15):   STURWi renamable $w8, $fp, -108, debug-location !694 :: (store 4 into %ir.ivelt); cg.c:623:43
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 26
  Height             : 0
  Predecessors:
    SU(14): Data Latency=1 Reg=$w8
    SU(13): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 26
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 26
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8, renamable $x10 = LDPSWi $fp, -27, debug-location !680 :: (dereferenceable load 4 from %ir.ivelt), (dereferenceable load 4 from %ir.iouter); cg.c:624:39
  Ready @0c
  TopQ.A BotLatency SU(0) 26c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x9 = LDRXui $fp, 4, debug-location !684 :: (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:624:13
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 4 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x8 = UBFMXri renamable $x8, 62, 61, debug-location !682; cg.c:624:35
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 4 
  TopQ.A RemainingLatency 0 + 5c > CritPath 26
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) renamable $w11 = LDRWroX renamable $x21, renamable $x8, 0, 0, debug-location !682 :: (load 4 from %ir.arrayidx9); cg.c:624:35
  Ready @5c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $x9 = MADDXrrr renamable $x10, renamable $x22, renamable $x9, debug-location !684; cg.c:624:13
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 9 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $w10 = SUBWri renamable $w11, 1, 0, debug-location !683; cg.c:624:46
  Ready @9c
  TopQ.A TopLatency SU(5) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 6
  Executed: 10c
  Critical: 6c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) STRWroX renamable $w10, renamable $x9, renamable $x8, 0, 0, debug-location !687 :: (store 4 into %ir.arrayidx13); cg.c:624:33
  Ready @10c
  TopQ.A TopLatency SU(6) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 7
  Executed: 11c
  Critical: 7c, 7 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 8 
  TopQ.A RemainingLatency 0 + 11c > CritPath 26
  Cand SU(7) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(7) renamable $x8, renamable $x10 = LDPSWi $fp, -27, debug-location !688 :: (dereferenceable load 4 from %ir.ivelt), (dereferenceable load 4 from %ir.iouter); cg.c:625:38
  Ready @11c
  TopQ.A TopLatency SU(7) 11c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 8
  Executed: 12c
  Critical: 8c, 8 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 9 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) renamable $x9 = LDRXui $fp, 5, debug-location !690 :: (dereferenceable load 8 from %ir.aelt.addr); cg.c:625:13
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 9
  Executed: 13c
  Critical: 9c, 9 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 15 TopQ.A
Queue TopQ.P: 11 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) renamable $x8 = UBFMXri renamable $x8, 61, 60, debug-location !689; cg.c:625:35
  Ready @15c
  TopQ.A TopLatency SU(9) 15c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 10
  Executed: 16c
  Critical: 10c, 10 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 11 
  TopQ.A RemainingLatency 0 + 16c > CritPath 26
  Cand SU(10) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(10) renamable $d0 = LDRDroX renamable $x20, renamable $x8, 0, 0, debug-location !689 :: (load 8 from %ir.arrayidx15); cg.c:625:35
  Ready @16c
  TopQ.A TopLatency SU(10) 16c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 11
  Executed: 17c
  Critical: 11c, 11 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 
Pick Top ONLY1     
Scheduling SU(11) renamable $x9 = MADDXrrr renamable $x10, renamable $x23, renamable $x9, debug-location !690; cg.c:625:13
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 12
  Executed: 18c
  Critical: 12c, 12 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 20 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 12 
Pick Top ONLY1     
Scheduling SU(12) STRDroX renamable $d0, renamable $x9, renamable $x8, 0, 0, debug-location !693 :: (store 8 into %ir.arrayidx19); cg.c:625:33
  Ready @20c
  TopQ.A TopLatency SU(12) 20c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 13
  Executed: 21c
  Critical: 13c, 13 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 
Pick Top ONLY1     
Scheduling SU(13) renamable $w8 = LDURWi $fp, -108, debug-location !694 :: (dereferenceable load 4 from %ir.ivelt); cg.c:623:43
  Ready @21c
  TopQ.A TopLatency SU(13) 21c
  *** Max MOps 1 at cycle 21
Cycle: 22 TopQ.A
TopQ.A @22c
  Retired: 14
  Executed: 22c
  Critical: 14c, 14 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 25 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 14 
Pick Top ONLY1     
Scheduling SU(14) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !694; cg.c:623:43
  Ready @25c
  TopQ.A TopLatency SU(14) 25c
  *** Max MOps 1 at cycle 25
Cycle: 26 TopQ.A
TopQ.A @26c
  Retired: 15
  Executed: 26c
  Critical: 15c, 15 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 
Pick Top ONLY1     
Scheduling SU(15) STURWi renamable $w8, $fp, -108, debug-location !694 :: (store 4 into %ir.ivelt); cg.c:623:43
  Ready @26c
  TopQ.A TopLatency SU(15) 26c
  *** Max MOps 1 at cycle 26
Cycle: 27 TopQ.A
TopQ.A @27c
  Retired: 16
  Executed: 27c
  Critical: 16c, 16 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   renamable $x8, renamable $x10 = LDPSWi $fp, -27, debug-location !680 :: (dereferenceable load 4 from %ir.ivelt), (dereferenceable load 4 from %ir.iouter); cg.c:624:39
SU(1):   renamable $x9 = LDRXui $fp, 4, debug-location !684 :: (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:624:13
SU(2):   renamable $x8 = UBFMXri renamable $x8, 62, 61, debug-location !682; cg.c:624:35
SU(3):   renamable $w11 = LDRWroX renamable $x21, renamable $x8, 0, 0, debug-location !682 :: (load 4 from %ir.arrayidx9); cg.c:624:35
SU(4):   renamable $x9 = MADDXrrr renamable $x10, renamable $x22, renamable $x9, debug-location !684; cg.c:624:13
SU(5):   renamable $w10 = SUBWri renamable $w11, 1, 0, debug-location !683; cg.c:624:46
SU(6):   STRWroX renamable $w10, renamable $x9, renamable $x8, 0, 0, debug-location !687 :: (store 4 into %ir.arrayidx13); cg.c:624:33
SU(7):   renamable $x8, renamable $x10 = LDPSWi $fp, -27, debug-location !688 :: (dereferenceable load 4 from %ir.ivelt), (dereferenceable load 4 from %ir.iouter); cg.c:625:38
SU(8):   renamable $x9 = LDRXui $fp, 5, debug-location !690 :: (dereferenceable load 8 from %ir.aelt.addr); cg.c:625:13
SU(9):   renamable $x8 = UBFMXri renamable $x8, 61, 60, debug-location !689; cg.c:625:35
SU(10):   renamable $d0 = LDRDroX renamable $x20, renamable $x8, 0, 0, debug-location !689 :: (load 8 from %ir.arrayidx15); cg.c:625:35
SU(11):   renamable $x9 = MADDXrrr renamable $x10, renamable $x23, renamable $x9, debug-location !690; cg.c:625:13
SU(12):   STRDroX renamable $d0, renamable $x9, renamable $x8, 0, 0, debug-location !693 :: (store 8 into %ir.arrayidx19); cg.c:625:33
SU(13):   renamable $w8 = LDURWi $fp, -108, debug-location !694 :: (dereferenceable load 4 from %ir.ivelt); cg.c:623:43
SU(14):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !694; cg.c:623:43
SU(15):   STURWi renamable $w8, $fp, -108, debug-location !694 :: (store 4 into %ir.ivelt); cg.c:623:43

Fixup kills for %bb.6
********** MI Scheduling **********
makea:%bb.7 for.inc20
  From: renamable $w8 = LDURWi $fp, -104, debug-location !698 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:40
    To: B %bb.3
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -104, debug-location !698 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:40
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !698; cg.c:617:40
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STURWi renamable $w8, $fp, -104, debug-location !698 :: (store 4 into %ir.iouter); cg.c:617:40
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.3
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -104, debug-location !698 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:40
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !698; cg.c:617:40
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w8, $fp, -104, debug-location !698 :: (store 4 into %ir.iouter); cg.c:617:40
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   renamable $w8 = LDURWi $fp, -104, debug-location !698 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:40
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !698; cg.c:617:40
SU(2):   STURWi renamable $w8, $fp, -104, debug-location !698 :: (store 4 into %ir.iouter); cg.c:617:40

Fixup kills for %bb.7
********** MI Scheduling **********
makea:%bb.8 for.end22
  From: $fp, $lr = frame-destroy LDPXi $sp, 40, debug-location !714 :: (load 8 from %stack.20), (load 8 from %stack.19); cg.c:635:1
    To: $sp = frame-destroy ADDXri $sp, 336, 0, debug-location !714; cg.c:635:1
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   $fp, $lr = frame-destroy LDPXi $sp, 40, debug-location !714 :: (load 8 from %stack.20), (load 8 from %stack.19); cg.c:635:1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(1):   $x20, $x19 = frame-destroy LDPXi $sp, 38, debug-location !714 :: (load 8 from %stack.22), (load 8 from %stack.21); cg.c:635:1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(2):   $x22, $x21 = frame-destroy LDPXi $sp, 36, debug-location !714 :: (load 8 from %stack.24), (load 8 from %stack.23); cg.c:635:1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(3):   $x28, $x23 = frame-destroy LDPXi $sp, 34, debug-location !714 :: (load 8 from %stack.26), (load 8 from %stack.25); cg.c:635:1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(4):   $d8 = frame-destroy LDRDui $sp, 32, debug-location !714 :: (load 8 from %stack.27); cg.c:635:1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
ExitSU:   $sp = frame-destroy ADDXri $sp, 336, 0, debug-location !714; cg.c:635:1
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=3 Artificial
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path: (PGS-RR) 3
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 3
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $fp, $lr = frame-destroy LDPXi $sp, 40, debug-location !714 :: (load 8 from %stack.20), (load 8 from %stack.19); cg.c:635:1
  Ready @0c
  TopQ.A BotLatency SU(0) 3c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 1 2 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 3
  Cand SU(4) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) $x20, $x19 = frame-destroy LDPXi $sp, 38, debug-location !714 :: (load 8 from %stack.22), (load 8 from %stack.21); cg.c:635:1
  Ready @1c
  TopQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 3
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) $x22, $x21 = frame-destroy LDPXi $sp, 36, debug-location !714 :: (load 8 from %stack.24), (load 8 from %stack.23); cg.c:635:1
  Ready @2c
  TopQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 3
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) $x28, $x23 = frame-destroy LDPXi $sp, 34, debug-location !714 :: (load 8 from %stack.26), (load 8 from %stack.25); cg.c:635:1
  Ready @3c
  TopQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $d8 = frame-destroy LDRDui $sp, 32, debug-location !714 :: (load 8 from %stack.27); cg.c:635:1
  Ready @4c
  TopQ.A BotLatency SU(4) 3c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   $fp, $lr = frame-destroy LDPXi $sp, 40, debug-location !714 :: (load 8 from %stack.20), (load 8 from %stack.19); cg.c:635:1
SU(1):   $x20, $x19 = frame-destroy LDPXi $sp, 38, debug-location !714 :: (load 8 from %stack.22), (load 8 from %stack.21); cg.c:635:1
SU(2):   $x22, $x21 = frame-destroy LDPXi $sp, 36, debug-location !714 :: (load 8 from %stack.24), (load 8 from %stack.23); cg.c:635:1
SU(3):   $x28, $x23 = frame-destroy LDPXi $sp, 34, debug-location !714 :: (load 8 from %stack.26), (load 8 from %stack.25); cg.c:635:1
SU(4):   $d8 = frame-destroy LDRDui $sp, 32, debug-location !714 :: (load 8 from %stack.27); cg.c:635:1

********** MI Scheduling **********
makea:%bb.8 for.end22
  From: renamable $x1, renamable $x0 = LDPXi $fp, -10, debug-location !702 :: (dereferenceable load 8 from %ir.a.addr), (dereferenceable load 8 from %ir.colidx.addr); cg.c:633:12
    To: BL @sparse, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $w3, implicit $w4, implicit $w5, implicit $x6, implicit $x7, implicit $d0, implicit $d1, implicit-def $sp, debug-location !713; cg.c:633:5
 RegionInstrs: 15
ScheduleDAGMI::schedule starting
SU(0):   renamable $x1, renamable $x0 = LDPXi $fp, -10, debug-location !702 :: (dereferenceable load 8 from %ir.a.addr), (dereferenceable load 8 from %ir.colidx.addr); cg.c:633:12
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(1):   renamable $x2 = LDURXi $fp, -88, debug-location !704 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:633:23
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(2):   renamable $w4, renamable $w3 = LDPWi $fp, -14, debug-location !705 :: (dereferenceable load 4 from %ir.n.addr), (dereferenceable load 4 from %ir.nz.addr); cg.c:633:31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(3):   renamable $x6, renamable $x7 = LDPXi $fp, 3, debug-location !707 :: (dereferenceable load 8 from %ir.arow.addr), (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:633:46
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(4):   renamable $x8, renamable $x11 = LDPXi $fp, 5, debug-location !709 :: (dereferenceable load 8 from %ir.aelt.addr), (dereferenceable load 8 from %ir.iv.addr, align 16); cg.c:633:58
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(13): Data Latency=4 Reg=$x8
    SU(6): Data Latency=4 Reg=$x11
SU(5):   renamable $w10, renamable $w9 = LDPWi $fp, -24, debug-location !710 :: (dereferenceable load 4 from %ir.firstrow.addr), (dereferenceable load 4 from %ir.lastrow.addr); cg.c:633:64
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(8): Out  Latency=1
    SU(7): Data Latency=4 Reg=$w10
    SU(11): Out  Latency=1
    SU(10): Data Latency=4 Reg=$w9
SU(6):   STRXui renamable $x11, $sp, 3, debug-location !713 :: (store 8 into stack + 24); cg.c:633:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(4): Data Latency=4 Reg=$x11
SU(7):   STRWui renamable $w10, $sp, 4, debug-location !713 :: (store 4 into stack + 16); cg.c:633:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(5): Data Latency=4 Reg=$w10
  Successors:
    SU(8): Anti Latency=0
SU(8):   renamable $x10 = ADRP target-flags(aarch64-page) %const.0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(7): Anti Latency=0
    SU(5): Out  Latency=1
  Successors:
    SU(9): Data Latency=1 Reg=$x10
SU(9):   renamable $d0 = LDRDui renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(8): Data Latency=1 Reg=$x10
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(10):   STRWui renamable $w9, $sp, 2, debug-location !713 :: (store 4 into stack + 8); cg.c:633:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(5): Data Latency=4 Reg=$w9
  Successors:
    SU(11): Anti Latency=0
SU(11):   $x9 = MOVZXi 16462, 48
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(10): Anti Latency=0
    SU(5): Out  Latency=1
  Successors:
    SU(14): Data Latency=1 Reg=$x9
SU(12):   $w5 = MOVZWi 13, 0, debug-location !713; cg.c:633:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(13):   STRXui renamable $x8, $sp, 0, debug-location !713 :: (store 8 into stack); cg.c:633:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(4): Data Latency=4 Reg=$x8
SU(14):   $d1 = FMOVXDr $x9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(11): Data Latency=1 Reg=$x9
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @sparse, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $w3, implicit $w4, implicit $w5, implicit $x6, implicit $x7, implicit $d0, implicit $d1, implicit-def $sp, debug-location !713; cg.c:633:5
  # preds left       : 7
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(14): Ord  Latency=1 Artificial
    SU(12): Ord  Latency=1 Artificial
    SU(9): Ord  Latency=4 Artificial
    SU(3): Ord  Latency=4 Artificial
    SU(2): Ord  Latency=4 Artificial
    SU(1): Ord  Latency=4 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 9
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 12 
  TopQ.A RemainingLatency 0 + 0c > CritPath 9
  Cand SU(0) ORDER                              
  Cand SU(5) TOP-PATH                  9 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $w10, renamable $w9 = LDPWi $fp, -24, debug-location !710 :: (dereferenceable load 4 from %ir.firstrow.addr), (dereferenceable load 4 from %ir.lastrow.addr); cg.c:633:64
  Ready @0c
  TopQ.A BotLatency SU(5) 9c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 10 
Queue TopQ.A: 0 1 2 3 4 12 
  TopQ.A RemainingLatency 0 + 1c > CritPath 9
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x1, renamable $x0 = LDPXi $fp, -10, debug-location !702 :: (dereferenceable load 8 from %ir.a.addr), (dereferenceable load 8 from %ir.colidx.addr); cg.c:633:12
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 10 
Queue TopQ.A: 12 1 2 3 4 
  TopQ.A RemainingLatency 0 + 2c > CritPath 9
  Cand SU(12) ORDER                              
  Cand SU(1) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x2 = LDURXi $fp, -88, debug-location !704 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:633:23
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 10 
Queue TopQ.A: 12 4 2 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 9
  Cand SU(12) ORDER                              
  Cand SU(4) TOP-PATH                  4 cycles 
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) renamable $w4, renamable $w3 = LDPWi $fp, -14, debug-location !705 :: (dereferenceable load 4 from %ir.n.addr), (dereferenceable load 4 from %ir.nz.addr); cg.c:633:31
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 4 3 7 10 
  TopQ.A RemainingLatency 0 + 4c > CritPath 9
  Cand SU(12) ORDER                              
  Cand SU(4) TOP-PATH                  4 cycles 
  Cand SU(3) ORDER                              
  Cand SU(7) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) STRWui renamable $w10, $sp, 4, debug-location !713 :: (store 4 into stack + 16); cg.c:633:5
  Ready @4c
  TopQ.A TopLatency SU(7) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 4 3 10 8 
  TopQ.A RemainingLatency 0 + 5c > CritPath 9
  Cand SU(12) ORDER                              
  Cand SU(4) TOP-PATH                  4 cycles 
  Cand SU(3) ORDER                              
  Cand SU(8) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $x10 = ADRP target-flags(aarch64-page) %const.0
  Ready @5c
  TopQ.A BotLatency SU(8) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 4 3 10 9 
  TopQ.A RemainingLatency 0 + 6c > CritPath 9
  Cand SU(12) ORDER                              
  Cand SU(4) TOP-PATH                  4 cycles 
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) renamable $x6, renamable $x7 = LDPXi $fp, 3, debug-location !707 :: (dereferenceable load 8 from %ir.arow.addr), (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:633:46
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 4 9 10 
  TopQ.A RemainingLatency 0 + 7c > CritPath 9
  Cand SU(12) ORDER                              
  Cand SU(4) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $x8, renamable $x11 = LDPXi $fp, 5, debug-location !709 :: (dereferenceable load 8 from %ir.aelt.addr), (dereferenceable load 8 from %ir.iv.addr, align 16); cg.c:633:58
  Ready @7c
  TopQ.A BotLatency SU(4) 4c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 13 6 
Queue TopQ.A: 12 10 9 
  TopQ.A RemainingLatency 0 + 8c > CritPath 9
  Cand SU(12) ORDER                              
  Cand SU(10) TOP-PATH                  2 cycles 
  Cand SU(9) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(9) renamable $d0 = LDRDui renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  Ready @8c
  TopQ.A TopLatency SU(9) 5c
  TopQ.A BotLatency SU(9) 4c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 13 6 
Queue TopQ.A: 12 10 
  TopQ.A RemainingLatency 0 + 9c > CritPath 9
  Cand SU(12) ORDER                              
  Cand SU(10) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(10) STRWui renamable $w9, $sp, 2, debug-location !713 :: (store 4 into stack + 8); cg.c:633:5
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 13 6 
Queue TopQ.A: 12 11 
  TopQ.A RemainingLatency 0 + 10c > CritPath 9
  Cand SU(12) ORDER                              
  Cand SU(11) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(11) $x9 = MOVZXi 16462, 48
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 14 13 6 
  TopQ.A RemainingLatency 0 + 11c > CritPath 9
  Cand SU(12) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(12) $w5 = MOVZWi 13, 0, debug-location !713; cg.c:633:5
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 14 13 
  TopQ.A RemainingLatency 0 + 12c > CritPath 9
  Cand SU(6) ORDER                              
  Cand SU(14) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(14) $d1 = FMOVXDr $x9
  Ready @12c
  TopQ.A BotLatency SU(14) 1c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 13 
  TopQ.A RemainingLatency 0 + 13c > CritPath 9
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) STRXui renamable $x11, $sp, 3, debug-location !713 :: (store 8 into stack + 24); cg.c:633:5
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 
Pick Top ONLY1     
Scheduling SU(13) STRXui renamable $x8, $sp, 0, debug-location !713 :: (store 8 into stack); cg.c:633:5
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.8 ***
SU(5):   renamable $w10, renamable $w9 = LDPWi $fp, -24, debug-location !710 :: (dereferenceable load 4 from %ir.firstrow.addr), (dereferenceable load 4 from %ir.lastrow.addr); cg.c:633:64
SU(0):   renamable $x1, renamable $x0 = LDPXi $fp, -10, debug-location !702 :: (dereferenceable load 8 from %ir.a.addr), (dereferenceable load 8 from %ir.colidx.addr); cg.c:633:12
SU(1):   renamable $x2 = LDURXi $fp, -88, debug-location !704 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:633:23
SU(2):   renamable $w4, renamable $w3 = LDPWi $fp, -14, debug-location !705 :: (dereferenceable load 4 from %ir.n.addr), (dereferenceable load 4 from %ir.nz.addr); cg.c:633:31
SU(7):   STRWui renamable $w10, $sp, 4, debug-location !713 :: (store 4 into stack + 16); cg.c:633:5
SU(8):   renamable $x10 = ADRP target-flags(aarch64-page) %const.0
SU(3):   renamable $x6, renamable $x7 = LDPXi $fp, 3, debug-location !707 :: (dereferenceable load 8 from %ir.arow.addr), (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:633:46
SU(4):   renamable $x8, renamable $x11 = LDPXi $fp, 5, debug-location !709 :: (dereferenceable load 8 from %ir.aelt.addr), (dereferenceable load 8 from %ir.iv.addr, align 16); cg.c:633:58
SU(9):   renamable $d0 = LDRDui renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
SU(10):   STRWui renamable $w9, $sp, 2, debug-location !713 :: (store 4 into stack + 8); cg.c:633:5
SU(11):   $x9 = MOVZXi 16462, 48
SU(12):   $w5 = MOVZWi 13, 0, debug-location !713; cg.c:633:5
SU(14):   $d1 = FMOVXDr $x9
SU(6):   STRXui renamable $x11, $sp, 3, debug-location !713 :: (store 8 into stack + 24); cg.c:633:5
SU(13):   STRXui renamable $x8, $sp, 0, debug-location !713 :: (store 8 into stack); cg.c:633:5

Fixup kills for %bb.8
Before MISched:
# Machine code for function conj_grad: NoPHIs, TracksLiveness
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP]
  fi#0: size=8, align=8, at location [SP]
  fi#1: size=8, align=8, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=8, align=8, at location [SP]
  fi#4: size=8, align=8, at location [SP]
  fi#5: size=8, align=8, at location [SP]
  fi#6: size=8, align=8, at location [SP]
  fi#7: size=8, align=8, at location [SP]
  fi#8: dead
  fi#9: size=4, align=4, at location [SP]
  fi#10: size=4, align=4, at location [SP]
  fi#11: size=4, align=4, at location [SP]
  fi#12: size=4, align=4, at location [SP]
  fi#13: size=8, align=8, at location [SP]
  fi#14: size=8, align=8, at location [SP]
  fi#15: size=8, align=8, at location [SP]
  fi#16: size=8, align=8, at location [SP]
  fi#17: size=8, align=8, at location [SP]
  fi#18: size=8, align=8, at location [SP]
Function Live Ins: $x0 in %7, $x1 in %8, $x2 in %9, $x3 in %10, $x4 in %11, $x5 in %12, $x6 in %13, $x7 in %14

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $x0, $x1, $x2, $x3, $x4, $x5, $x6, $x7
  %14:gpr64 = COPY $x7
  %13:gpr64 = COPY $x6
  %12:gpr64 = COPY $x5
  %11:gpr64 = COPY $x4
  %10:gpr64 = COPY $x3
  %9:gpr64 = COPY $x2
  %8:gpr64 = COPY $x1
  %7:gpr64 = COPY $x0
  STRXui %7:gpr64, %stack.0.colidx.addr, 0 :: (store 8 into %ir.colidx.addr)
  STRXui %8:gpr64, %stack.1.rowstr.addr, 0 :: (store 8 into %ir.rowstr.addr)
  STRXui %9:gpr64, %stack.2.x.addr, 0 :: (store 8 into %ir.x.addr)
  STRXui %10:gpr64, %stack.3.z.addr, 0 :: (store 8 into %ir.z.addr)
  STRXui %11:gpr64, %stack.4.a.addr, 0 :: (store 8 into %ir.a.addr)
  STRXui %12:gpr64, %stack.5.p.addr, 0 :: (store 8 into %ir.p.addr)
  STRXui %13:gpr64, %stack.6.q.addr, 0 :: (store 8 into %ir.q.addr)
  STRXui %14:gpr64, %stack.7.r.addr, 0 :: (store 8 into %ir.r.addr)
  %15:gpr32 = MOVi32imm 25
  STRWui %15:gpr32, %stack.12.cgitmax, 0, debug-location !743 :: (store 4 into %ir.cgitmax); cg.c:406:15
  STRXui $xzr, %stack.15.rho, 0, debug-location !756 :: (store 8 into %ir.rho); cg.c:409:9
  STRWui $wzr, %stack.9.j, 0, debug-location !757 :: (store 4 into %ir.j); cg.c:414:12
  %19:gpr64common = ADRP target-flags(aarch64-page) @naa

bb.1.for.cond:
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %18:gpr32 = LDRWui %stack.9.j, 0, debug-location !760 :: (dereferenceable load 4 from %ir.j); cg.c:414:17
  %20:gpr32common = LDRWui %19:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !762 :: (dereferenceable load 4 from @naa); cg.c:414:21
  %21:gpr32common = nsw ADDWri %20:gpr32common, 1, 0, debug-location !763; cg.c:414:25
  dead $wzr = SUBSWrr %18:gpr32, %21:gpr32common, implicit-def $nzcv, debug-location !765; cg.c:414:5
  Bcc 10, %bb.3, implicit killed $nzcv, debug-location !765; cg.c:414:5
  B %bb.2, debug-location !765; cg.c:414:5

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %230:gpr64common = LDRXui %stack.6.q.addr, 0, debug-location !766 :: (dereferenceable load 8 from %ir.q.addr); cg.c:415:9
  %231:gpr64 = LDRSWui %stack.9.j, 0, debug-location !768 :: (dereferenceable load 4 from %ir.j); cg.c:415:11
  STRXroX $xzr, %230:gpr64common, %231:gpr64, 0, 1, debug-location !769 :: (store 8 into %ir.arrayidx); cg.c:415:14
  %233:gpr64common = LDRXui %stack.3.z.addr, 0, debug-location !770 :: (dereferenceable load 8 from %ir.z.addr); cg.c:416:9
  %234:gpr64 = LDRSWui %stack.9.j, 0, debug-location !771 :: (dereferenceable load 4 from %ir.j); cg.c:416:11
  STRXroX $xzr, %233:gpr64common, %234:gpr64, 0, 1, debug-location !772 :: (store 8 into %ir.arrayidx2); cg.c:416:14
  %235:gpr64common = LDRXui %stack.2.x.addr, 0, debug-location !773 :: (dereferenceable load 8 from %ir.x.addr); cg.c:417:16
  %236:gpr64 = LDRSWui %stack.9.j, 0, debug-location !774 :: (dereferenceable load 4 from %ir.j); cg.c:417:18
  %237:gpr64 = UBFMXri %236:gpr64, 61, 60, debug-location !773; cg.c:417:16
  %238:fpr64 = LDRDroX %235:gpr64common, %237:gpr64, 0, 0, debug-location !773 :: (load 8 from %ir.arrayidx4); cg.c:417:16
  %239:gpr64common = LDRXui %stack.7.r.addr, 0, debug-location !775 :: (dereferenceable load 8 from %ir.r.addr); cg.c:417:9
  STRDroX %238:fpr64, %239:gpr64common, %237:gpr64, 0, 0, debug-location !777 :: (store 8 into %ir.arrayidx6); cg.c:417:14
  %240:gpr64common = LDRXui %stack.7.r.addr, 0, debug-location !778 :: (dereferenceable load 8 from %ir.r.addr); cg.c:418:16
  %241:gpr64 = LDRSWui %stack.9.j, 0, debug-location !779 :: (dereferenceable load 4 from %ir.j); cg.c:418:18
  %242:gpr64 = UBFMXri %241:gpr64, 61, 60, debug-location !778; cg.c:418:16
  %243:fpr64 = LDRDroX %240:gpr64common, %242:gpr64, 0, 0, debug-location !778 :: (load 8 from %ir.arrayidx8); cg.c:418:16
  %244:gpr64common = LDRXui %stack.5.p.addr, 0, debug-location !780 :: (dereferenceable load 8 from %ir.p.addr); cg.c:418:9
  STRDroX %243:fpr64, %244:gpr64common, %242:gpr64, 0, 0, debug-location !782 :: (store 8 into %ir.arrayidx10); cg.c:418:14
  %245:gpr32common = LDRWui %stack.9.j, 0, debug-location !783 :: (dereferenceable load 4 from %ir.j); cg.c:414:31
  %246:gpr32common = nsw ADDWri %245:gpr32common, 1, 0, debug-location !783; cg.c:414:31
  STRWui %246:gpr32common, %stack.9.j, 0, debug-location !783 :: (store 4 into %ir.j); cg.c:414:31
  B %bb.1, debug-location !784; cg.c:414:5

bb.3.for.end:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  STRWui $wzr, %stack.9.j, 0, debug-location !787 :: (store 4 into %ir.j); cg.c:425:12
  %25:gpr64common = ADRP target-flags(aarch64-page) @lastcol
  %27:gpr64common = ADRP target-flags(aarch64-page) @firstcol

bb.4.for.cond11:
; predecessors: %bb.3, %bb.5
  successors: %bb.5(0x7c000000), %bb.6(0x04000000); %bb.5(96.88%), %bb.6(3.12%)

  %24:gpr32 = LDRWui %stack.9.j, 0, debug-location !790 :: (dereferenceable load 4 from %ir.j); cg.c:425:17
  %26:gpr32 = LDRWui %25:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !792 :: (dereferenceable load 4 from @lastcol); cg.c:425:21
  %28:gpr32 = LDRWui %27:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !793 :: (dereferenceable load 4 from @firstcol); cg.c:425:31
  %29:gpr32common = nsw SUBWrr %26:gpr32, %28:gpr32, debug-location !794; cg.c:425:29
  %30:gpr32common = nsw ADDWri %29:gpr32common, 1, 0, debug-location !795; cg.c:425:40
  dead $wzr = SUBSWrr %24:gpr32, %30:gpr32common, implicit-def $nzcv, debug-location !797; cg.c:425:5
  Bcc 10, %bb.6, implicit killed $nzcv, debug-location !797; cg.c:425:5
  B %bb.5, debug-location !797; cg.c:425:5

bb.5.for.body14:
; predecessors: %bb.4
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %222:fpr64 = LDRDui %stack.15.rho, 0, debug-location !798 :: (dereferenceable load 8 from %ir.rho); cg.c:426:15
  %223:gpr64common = LDRXui %stack.7.r.addr, 0, debug-location !800 :: (dereferenceable load 8 from %ir.r.addr); cg.c:426:21
  %224:gpr64common = LDRSWui %stack.9.j, 0, debug-location !801 :: (dereferenceable load 4 from %ir.j); cg.c:426:23
  %226:fpr64 = LDRDroX %223:gpr64common, %224:gpr64common, 0, 1, debug-location !800 :: (load 8 from %ir.arrayidx18); cg.c:426:21
  %227:fpr64 = FMULDrr %226:fpr64, %226:fpr64, debug-location !804; cg.c:426:26
  %228:fpr64 = FADDDrr %222:fpr64, %227:fpr64, debug-location !805; cg.c:426:19
  STRDui %228:fpr64, %stack.15.rho, 0, debug-location !806 :: (store 8 into %ir.rho); cg.c:426:13
  %229:gpr32common = nsw ADDWri %224.sub_32:gpr64common, 1, 0, debug-location !807; cg.c:425:46
  STRWui %229:gpr32common, %stack.9.j, 0, debug-location !807 :: (store 4 into %ir.j); cg.c:425:46
  B %bb.4, debug-location !808; cg.c:425:5

bb.6.for.end22:
; predecessors: %bb.4
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %32:gpr32 = MOVi32imm 1
  STRWui %32:gpr32, %stack.11.cgit, 0, debug-location !811 :: (store 4 into %ir.cgit); cg.c:434:15
  %96:gpr64common = ADRP target-flags(aarch64-page) @lastrow
  %98:gpr64common = ADRP target-flags(aarch64-page) @firstrow

bb.7.for.cond23:
; predecessors: %bb.6, %bb.26
  successors: %bb.8(0x7c000000), %bb.27(0x04000000); %bb.8(96.88%), %bb.27(3.12%)

  %33:gpr32 = LDRWui %stack.11.cgit, 0, debug-location !814 :: (dereferenceable load 4 from %ir.cgit); cg.c:434:20
  %34:gpr32 = LDRWui %stack.12.cgitmax, 0, debug-location !816 :: (dereferenceable load 4 from %ir.cgitmax); cg.c:434:28
  dead $wzr = SUBSWrr %33:gpr32, %34:gpr32, implicit-def $nzcv, debug-location !818; cg.c:434:5
  Bcc 12, %bb.27, implicit killed $nzcv, debug-location !818; cg.c:434:5
  B %bb.8, debug-location !818; cg.c:434:5

bb.8.for.body25:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  STRWui $wzr, %stack.9.j, 0, debug-location !819 :: (store 4 into %ir.j); cg.c:447:16

bb.9.for.cond26:
; predecessors: %bb.8, %bb.13
  successors: %bb.10(0x7c000000), %bb.14(0x04000000); %bb.10(96.88%), %bb.14(3.12%)

  %95:gpr32 = LDRWui %stack.9.j, 0, debug-location !823 :: (dereferenceable load 4 from %ir.j); cg.c:447:21
  %97:gpr32 = LDRWui %96:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !825 :: (dereferenceable load 4 from @lastrow); cg.c:447:25
  %99:gpr32 = LDRWui %98:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !826 :: (dereferenceable load 4 from @firstrow); cg.c:447:35
  %100:gpr32common = nsw SUBWrr %97:gpr32, %99:gpr32, debug-location !827; cg.c:447:33
  %101:gpr32common = nsw ADDWri %100:gpr32common, 1, 0, debug-location !828; cg.c:447:44
  dead $wzr = SUBSWrr %95:gpr32, %101:gpr32common, implicit-def $nzcv, debug-location !830; cg.c:447:9
  Bcc 10, %bb.14, implicit killed $nzcv, debug-location !830; cg.c:447:9
  B %bb.10, debug-location !830; cg.c:447:9

bb.10.for.body30:
; predecessors: %bb.9
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  STRXui $xzr, %stack.14.sum, 0, debug-location !831 :: (store 8 into %ir.sum); cg.c:448:17
  %198:gpr64common = LDRXui %stack.1.rowstr.addr, 0, debug-location !833 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:22
  %199:gpr64 = LDRSWui %stack.9.j, 0, debug-location !835 :: (dereferenceable load 4 from %ir.j); cg.c:449:29
  %200:gpr32 = LDRWroX %198:gpr64common, %199:gpr64, 0, 1, debug-location !833 :: (load 4 from %ir.arrayidx32); cg.c:449:22
  STRWui %200:gpr32, %stack.10.k, 0, debug-location !836 :: (store 4 into %ir.k); cg.c:449:20

bb.11.for.cond33:
; predecessors: %bb.10, %bb.12
  successors: %bb.12(0x7c000000), %bb.13(0x04000000); %bb.12(96.88%), %bb.13(3.12%)

  %201:gpr32 = LDRWui %stack.10.k, 0, debug-location !838 :: (dereferenceable load 4 from %ir.k); cg.c:449:33
  %202:gpr64 = LDRXui %stack.1.rowstr.addr, 0, debug-location !840 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:37
  %203:gpr64 = LDRSWui %stack.9.j, 0, debug-location !841 :: (dereferenceable load 4 from %ir.j); cg.c:449:44
  %204:gpr64common = ADDXrs %202:gpr64, %203:gpr64, 2, debug-location !840; cg.c:449:37
  %205:gpr32 = LDRWui %204:gpr64common, 1, debug-location !840 :: (load 4 from %ir.arrayidx36); cg.c:449:37
  %0:fpr64 = LDRDui %stack.14.sum, 0, debug-location !844 :: (dereferenceable load 8 from %ir.sum); cg.c:0
  dead $wzr = SUBSWrr %201:gpr32, %205:gpr32, implicit-def $nzcv, debug-location !845; cg.c:449:13
  Bcc 10, %bb.13, implicit killed $nzcv, debug-location !845; cg.c:449:13
  B %bb.12, debug-location !845; cg.c:449:13

bb.12.for.body38:
; predecessors: %bb.11
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  %211:gpr64common = LDRXui %stack.4.a.addr, 0, debug-location !846 :: (dereferenceable load 8 from %ir.a.addr); cg.c:450:29
  %212:gpr64common = LDRSWui %stack.10.k, 0, debug-location !848 :: (dereferenceable load 4 from %ir.k); cg.c:450:31
  %214:fpr64 = LDRDroX %211:gpr64common, %212:gpr64common, 0, 1, debug-location !846 :: (load 8 from %ir.arrayidx40); cg.c:450:29
  %215:gpr64common = LDRXui %stack.5.p.addr, 0, debug-location !849 :: (dereferenceable load 8 from %ir.p.addr); cg.c:450:36
  %216:gpr64common = LDRXui %stack.0.colidx.addr, 0, debug-location !850 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:450:38
  %217:gpr64 = LDRSWroX %216:gpr64common, %212:gpr64common, 0, 1, debug-location !850 :: (load 4 from %ir.arrayidx42); cg.c:450:38
  %218:fpr64 = LDRDroX %215:gpr64common, %217:gpr64, 0, 1, debug-location !849 :: (load 8 from %ir.arrayidx44); cg.c:450:36
  %219:fpr64 = FMULDrr %214:fpr64, %218:fpr64, debug-location !852; cg.c:450:34
  %220:fpr64 = FADDDrr %0:fpr64, %219:fpr64, debug-location !853; cg.c:450:27
  STRDui %220:fpr64, %stack.14.sum, 0, debug-location !854 :: (store 8 into %ir.sum); cg.c:450:21
  %221:gpr32common = nsw ADDWri %212.sub_32:gpr64common, 1, 0, debug-location !855; cg.c:449:53
  STRWui %221:gpr32common, %stack.10.k, 0, debug-location !855 :: (store 4 into %ir.k); cg.c:449:53
  B %bb.11, debug-location !856; cg.c:449:13

bb.13.for.end49:
; predecessors: %bb.11
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %207:gpr64common = LDRXui %stack.6.q.addr, 0, debug-location !859 :: (dereferenceable load 8 from %ir.q.addr); cg.c:452:13
  %208:gpr64 = LDRSWui %stack.9.j, 0, debug-location !860 :: (dereferenceable load 4 from %ir.j); cg.c:452:15
  STRDroX %0:fpr64, %207:gpr64common, %208:gpr64, 0, 1, debug-location !861 :: (store 8 into %ir.arrayidx51); cg.c:452:18
  %209:gpr32common = LDRWui %stack.9.j, 0, debug-location !862 :: (dereferenceable load 4 from %ir.j); cg.c:447:50
  %210:gpr32common = nsw ADDWri %209:gpr32common, 1, 0, debug-location !862; cg.c:447:50
  STRWui %210:gpr32common, %stack.9.j, 0, debug-location !862 :: (store 4 into %ir.j); cg.c:447:50
  B %bb.9, debug-location !863; cg.c:447:9

bb.14.for.end54:
; predecessors: %bb.9
  successors: %bb.15(0x80000000); %bb.15(100.00%)

  STRXui $xzr, %stack.13.d, 0, debug-location !866 :: (store 8 into %ir.d); cg.c:496:11
  STRWui $wzr, %stack.9.j, 0, debug-location !867 :: (store 4 into %ir.j); cg.c:497:16

bb.15.for.cond55:
; predecessors: %bb.14, %bb.16
  successors: %bb.16(0x7c000000), %bb.17(0x04000000); %bb.16(96.88%), %bb.17(3.12%)

  %105:gpr32 = LDRWui %stack.9.j, 0, debug-location !870 :: (dereferenceable load 4 from %ir.j); cg.c:497:21
  %107:gpr32 = LDRWui %25:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !872 :: (dereferenceable load 4 from @lastcol); cg.c:497:25
  %109:gpr32 = LDRWui %27:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !873 :: (dereferenceable load 4 from @firstcol); cg.c:497:35
  %110:gpr32common = nsw SUBWrr %107:gpr32, %109:gpr32, debug-location !874; cg.c:497:33
  %111:gpr32common = nsw ADDWri %110:gpr32common, 1, 0, debug-location !875; cg.c:497:44
  dead $wzr = SUBSWrr %105:gpr32, %111:gpr32common, implicit-def $nzcv, debug-location !877; cg.c:497:9
  Bcc 10, %bb.17, implicit killed $nzcv, debug-location !877; cg.c:497:9
  B %bb.16, debug-location !877; cg.c:497:9

bb.16.for.body59:
; predecessors: %bb.15
  successors: %bb.15(0x80000000); %bb.15(100.00%)

  %186:fpr64 = LDRDui %stack.13.d, 0, debug-location !878 :: (dereferenceable load 8 from %ir.d); cg.c:498:17
  %187:gpr64common = LDRXui %stack.5.p.addr, 0, debug-location !880 :: (dereferenceable load 8 from %ir.p.addr); cg.c:498:21
  %188:gpr64common = LDRSWui %stack.9.j, 0, debug-location !881 :: (dereferenceable load 4 from %ir.j); cg.c:498:23
  %190:gpr64 = UBFMXri %188:gpr64common, 61, 60, debug-location !880; cg.c:498:21
  %191:fpr64 = LDRDroX %187:gpr64common, %190:gpr64, 0, 0, debug-location !880 :: (load 8 from %ir.arrayidx61); cg.c:498:21
  %192:gpr64common = LDRXui %stack.6.q.addr, 0, debug-location !882 :: (dereferenceable load 8 from %ir.q.addr); cg.c:498:28
  %193:fpr64 = LDRDroX %192:gpr64common, %190:gpr64, 0, 0, debug-location !882 :: (load 8 from %ir.arrayidx63); cg.c:498:28
  %194:fpr64 = FMULDrr %191:fpr64, %193:fpr64, debug-location !884; cg.c:498:26
  %195:fpr64 = FADDDrr %186:fpr64, %194:fpr64, debug-location !885; cg.c:498:19
  STRDui %195:fpr64, %stack.13.d, 0, debug-location !886 :: (store 8 into %ir.d); cg.c:498:15
  %196:gpr32common = nsw ADDWri %188.sub_32:gpr64common, 1, 0, debug-location !887; cg.c:497:50
  STRWui %196:gpr32common, %stack.9.j, 0, debug-location !887 :: (store 4 into %ir.j); cg.c:497:50
  B %bb.15, debug-location !888; cg.c:497:9

bb.17.for.end68:
; predecessors: %bb.15
  successors: %bb.18(0x80000000); %bb.18(100.00%)

  %113:fpr64 = LDRDui %stack.15.rho, 0, debug-location !891 :: (dereferenceable load 8 from %ir.rho); cg.c:504:17
  %114:fpr64 = LDRDui %stack.13.d, 0, debug-location !892 :: (dereferenceable load 8 from %ir.d); cg.c:504:23
  %115:fpr64 = FDIVDrr %113:fpr64, %114:fpr64, debug-location !893; cg.c:504:21
  STRDui %115:fpr64, %stack.17.alpha, 0, debug-location !894 :: (store 8 into %ir.alpha); cg.c:504:15
  STRDui %113:fpr64, %stack.16.rho0, 0, debug-location !896 :: (store 8 into %ir.rho0); cg.c:509:14
  STRXui $xzr, %stack.15.rho, 0, debug-location !897 :: (store 8 into %ir.rho); cg.c:515:13
  STRWui $wzr, %stack.9.j, 0, debug-location !898 :: (store 4 into %ir.j); cg.c:516:16

bb.18.for.cond69:
; predecessors: %bb.17, %bb.19
  successors: %bb.19(0x7c000000), %bb.20(0x04000000); %bb.19(96.88%), %bb.20(3.12%)

  %118:gpr32 = LDRWui %stack.9.j, 0, debug-location !901 :: (dereferenceable load 4 from %ir.j); cg.c:516:21
  %120:gpr32 = LDRWui %25:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !903 :: (dereferenceable load 4 from @lastcol); cg.c:516:25
  %122:gpr32 = LDRWui %27:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !904 :: (dereferenceable load 4 from @firstcol); cg.c:516:35
  %123:gpr32common = nsw SUBWrr %120:gpr32, %122:gpr32, debug-location !905; cg.c:516:33
  %124:gpr32common = nsw ADDWri %123:gpr32common, 1, 0, debug-location !906; cg.c:516:44
  dead $wzr = SUBSWrr %118:gpr32, %124:gpr32common, implicit-def $nzcv, debug-location !908; cg.c:516:9
  Bcc 10, %bb.20, implicit killed $nzcv, debug-location !908; cg.c:516:9
  B %bb.19, debug-location !908; cg.c:516:9

bb.19.for.body73:
; predecessors: %bb.18
  successors: %bb.18(0x80000000); %bb.18(100.00%)

  %166:gpr64common = LDRXui %stack.3.z.addr, 0, debug-location !909 :: (dereferenceable load 8 from %ir.z.addr); cg.c:517:20
  %167:gpr64 = LDRSWui %stack.9.j, 0, debug-location !911 :: (dereferenceable load 4 from %ir.j); cg.c:517:22
  %168:gpr64 = UBFMXri %167:gpr64, 61, 60, debug-location !909; cg.c:517:20
  %169:fpr64 = LDRDroX %166:gpr64common, %168:gpr64, 0, 0, debug-location !909 :: (load 8 from %ir.arrayidx75); cg.c:517:20
  %170:fpr64 = LDRDui %stack.17.alpha, 0, debug-location !912 :: (dereferenceable load 8 from %ir.alpha); cg.c:517:27
  %171:gpr64common = LDRXui %stack.5.p.addr, 0, debug-location !913 :: (dereferenceable load 8 from %ir.p.addr); cg.c:517:35
  %172:fpr64 = LDRDroX %171:gpr64common, %168:gpr64, 0, 0, debug-location !913 :: (load 8 from %ir.arrayidx77); cg.c:517:35
  %173:fpr64 = FMULDrr %170:fpr64, %172:fpr64, debug-location !915; cg.c:517:33
  %174:fpr64 = FADDDrr %169:fpr64, %173:fpr64, debug-location !916; cg.c:517:25
  STRDroX %174:fpr64, %166:gpr64common, %168:gpr64, 0, 0, debug-location !919 :: (store 8 into %ir.arrayidx81); cg.c:517:18
  %175:gpr64common = LDRXui %stack.7.r.addr, 0, debug-location !920 :: (dereferenceable load 8 from %ir.r.addr); cg.c:518:20
  %176:gpr64 = LDRSWui %stack.9.j, 0, debug-location !921 :: (dereferenceable load 4 from %ir.j); cg.c:518:22
  %177:gpr64 = UBFMXri %176:gpr64, 61, 60, debug-location !920; cg.c:518:20
  %178:fpr64 = LDRDroX %175:gpr64common, %177:gpr64, 0, 0, debug-location !920 :: (load 8 from %ir.arrayidx83); cg.c:518:20
  %179:fpr64 = LDRDui %stack.17.alpha, 0, debug-location !922 :: (dereferenceable load 8 from %ir.alpha); cg.c:518:27
  %180:gpr64common = LDRXui %stack.6.q.addr, 0, debug-location !923 :: (dereferenceable load 8 from %ir.q.addr); cg.c:518:35
  %181:fpr64 = LDRDroX %180:gpr64common, %177:gpr64, 0, 0, debug-location !923 :: (load 8 from %ir.arrayidx85); cg.c:518:35
  %182:fpr64 = FMULDrr %179:fpr64, %181:fpr64, debug-location !925; cg.c:518:33
  %183:fpr64 = FSUBDrr %178:fpr64, %182:fpr64, debug-location !926; cg.c:518:25
  STRDroX %183:fpr64, %175:gpr64common, %177:gpr64, 0, 0, debug-location !929 :: (store 8 into %ir.arrayidx89); cg.c:518:18
  %184:gpr32common = LDRWui %stack.9.j, 0, debug-location !930 :: (dereferenceable load 4 from %ir.j); cg.c:516:50
  %185:gpr32common = nsw ADDWri %184:gpr32common, 1, 0, debug-location !930; cg.c:516:50
  STRWui %185:gpr32common, %stack.9.j, 0, debug-location !930 :: (store 4 into %ir.j); cg.c:516:50
  B %bb.18, debug-location !931; cg.c:516:9

bb.20.for.end92:
; predecessors: %bb.18
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  STRWui $wzr, %stack.9.j, 0, debug-location !934 :: (store 4 into %ir.j); cg.c:526:16

bb.21.for.cond93:
; predecessors: %bb.20, %bb.22
  successors: %bb.22(0x7c000000), %bb.23(0x04000000); %bb.22(96.88%), %bb.23(3.12%)

  %127:gpr32 = LDRWui %stack.9.j, 0, debug-location !937 :: (dereferenceable load 4 from %ir.j); cg.c:526:21
  %129:gpr32 = LDRWui %25:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !939 :: (dereferenceable load 4 from @lastcol); cg.c:526:25
  %131:gpr32 = LDRWui %27:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !940 :: (dereferenceable load 4 from @firstcol); cg.c:526:35
  %132:gpr32common = nsw SUBWrr %129:gpr32, %131:gpr32, debug-location !941; cg.c:526:33
  %133:gpr32common = nsw ADDWri %132:gpr32common, 1, 0, debug-location !942; cg.c:526:44
  %1:fpr64 = LDRDui %stack.15.rho, 0, debug-location !944 :: (dereferenceable load 8 from %ir.rho); cg.c:0
  dead $wzr = SUBSWrr %127:gpr32, %133:gpr32common, implicit-def $nzcv, debug-location !945; cg.c:526:9
  Bcc 10, %bb.23, implicit killed $nzcv, debug-location !945; cg.c:526:9
  B %bb.22, debug-location !945; cg.c:526:9

bb.22.for.body97:
; predecessors: %bb.21
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  %159:gpr64common = LDRXui %stack.7.r.addr, 0, debug-location !946 :: (dereferenceable load 8 from %ir.r.addr); cg.c:527:25
  %160:gpr64common = LDRSWui %stack.9.j, 0, debug-location !948 :: (dereferenceable load 4 from %ir.j); cg.c:527:27
  %162:fpr64 = LDRDroX %159:gpr64common, %160:gpr64common, 0, 1, debug-location !946 :: (load 8 from %ir.arrayidx101); cg.c:527:25
  %163:fpr64 = FMULDrr %162:fpr64, %162:fpr64, debug-location !951; cg.c:527:30
  %164:fpr64 = FADDDrr %1:fpr64, %163:fpr64, debug-location !952; cg.c:527:23
  STRDui %164:fpr64, %stack.15.rho, 0, debug-location !953 :: (store 8 into %ir.rho); cg.c:527:17
  %165:gpr32common = nsw ADDWri %160.sub_32:gpr64common, 1, 0, debug-location !954; cg.c:526:50
  STRWui %165:gpr32common, %stack.9.j, 0, debug-location !954 :: (store 4 into %ir.j); cg.c:526:50
  B %bb.21, debug-location !955; cg.c:526:9

bb.23.for.end106:
; predecessors: %bb.21
  successors: %bb.24(0x80000000); %bb.24(100.00%)

  %135:fpr64 = LDRDui %stack.16.rho0, 0, debug-location !958 :: (dereferenceable load 8 from %ir.rho0); cg.c:533:22
  %136:fpr64 = FDIVDrr %1:fpr64, %135:fpr64, debug-location !959; cg.c:533:20
  STRDui %136:fpr64, %stack.18.beta, 0, debug-location !960 :: (store 8 into %ir.beta); cg.c:533:14
  STRWui $wzr, %stack.9.j, 0, debug-location !961 :: (store 4 into %ir.j); cg.c:538:16

bb.24.for.cond108:
; predecessors: %bb.23, %bb.25
  successors: %bb.25(0x7c000000), %bb.26(0x04000000); %bb.25(96.88%), %bb.26(3.12%)

  %138:gpr32 = LDRWui %stack.9.j, 0, debug-location !964 :: (dereferenceable load 4 from %ir.j); cg.c:538:21
  %140:gpr32 = LDRWui %25:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !966 :: (dereferenceable load 4 from @lastcol); cg.c:538:25
  %142:gpr32 = LDRWui %27:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !967 :: (dereferenceable load 4 from @firstcol); cg.c:538:35
  %143:gpr32common = nsw SUBWrr %140:gpr32, %142:gpr32, debug-location !968; cg.c:538:33
  %144:gpr32common = nsw ADDWri %143:gpr32common, 1, 0, debug-location !969; cg.c:538:44
  dead $wzr = SUBSWrr %138:gpr32, %144:gpr32common, implicit-def $nzcv, debug-location !971; cg.c:538:9
  Bcc 10, %bb.26, implicit killed $nzcv, debug-location !971; cg.c:538:9
  B %bb.25, debug-location !971; cg.c:538:9

bb.25.for.body112:
; predecessors: %bb.24
  successors: %bb.24(0x80000000); %bb.24(100.00%)

  %148:gpr64common = LDRXui %stack.7.r.addr, 0, debug-location !972 :: (dereferenceable load 8 from %ir.r.addr); cg.c:539:20
  %149:gpr64 = LDRSWui %stack.9.j, 0, debug-location !974 :: (dereferenceable load 4 from %ir.j); cg.c:539:22
  %150:gpr64 = UBFMXri %149:gpr64, 61, 60, debug-location !972; cg.c:539:20
  %151:fpr64 = LDRDroX %148:gpr64common, %150:gpr64, 0, 0, debug-location !972 :: (load 8 from %ir.arrayidx114); cg.c:539:20
  %152:fpr64 = LDRDui %stack.18.beta, 0, debug-location !975 :: (dereferenceable load 8 from %ir.beta); cg.c:539:27
  %153:gpr64common = LDRXui %stack.5.p.addr, 0, debug-location !976 :: (dereferenceable load 8 from %ir.p.addr); cg.c:539:34
  %154:fpr64 = LDRDroX %153:gpr64common, %150:gpr64, 0, 0, debug-location !976 :: (load 8 from %ir.arrayidx116); cg.c:539:34
  %155:fpr64 = FMULDrr %152:fpr64, %154:fpr64, debug-location !978; cg.c:539:32
  %156:fpr64 = FADDDrr %151:fpr64, %155:fpr64, debug-location !979; cg.c:539:25
  STRDroX %156:fpr64, %153:gpr64common, %150:gpr64, 0, 0, debug-location !982 :: (store 8 into %ir.arrayidx120); cg.c:539:18
  %157:gpr32common = LDRWui %stack.9.j, 0, debug-location !983 :: (dereferenceable load 4 from %ir.j); cg.c:538:50
  %158:gpr32common = nsw ADDWri %157:gpr32common, 1, 0, debug-location !983; cg.c:538:50
  STRWui %158:gpr32common, %stack.9.j, 0, debug-location !983 :: (store 4 into %ir.j); cg.c:538:50
  B %bb.24, debug-location !984; cg.c:538:9

bb.26.for.inc124:
; predecessors: %bb.24
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %146:gpr32common = LDRWui %stack.11.cgit, 0, debug-location !987 :: (dereferenceable load 4 from %ir.cgit); cg.c:434:41
  %147:gpr32common = nsw ADDWri %146:gpr32common, 1, 0, debug-location !987; cg.c:434:41
  STRWui %147:gpr32common, %stack.11.cgit, 0, debug-location !987 :: (store 4 into %ir.cgit); cg.c:434:41
  B %bb.7, debug-location !988; cg.c:434:5

bb.27.for.end126:
; predecessors: %bb.7
  successors: %bb.28(0x80000000); %bb.28(100.00%)

  STRXui $xzr, %stack.14.sum, 0, debug-location !991 :: (store 8 into %ir.sum); cg.c:548:9
  STRWui $wzr, %stack.9.j, 0, debug-location !992 :: (store 4 into %ir.j); cg.c:549:12

bb.28.for.cond127:
; predecessors: %bb.27, %bb.32
  successors: %bb.29(0x7c000000), %bb.33(0x04000000); %bb.29(96.88%), %bb.33(3.12%)

  %38:gpr32 = LDRWui %stack.9.j, 0, debug-location !995 :: (dereferenceable load 4 from %ir.j); cg.c:549:17
  %40:gpr32 = LDRWui %96:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !997 :: (dereferenceable load 4 from @lastrow); cg.c:549:21
  %42:gpr32 = LDRWui %98:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !998 :: (dereferenceable load 4 from @firstrow); cg.c:549:31
  %43:gpr32common = nsw SUBWrr %40:gpr32, %42:gpr32, debug-location !999; cg.c:549:29
  %44:gpr32common = nsw ADDWri %43:gpr32common, 1, 0, debug-location !1000; cg.c:549:40
  dead $wzr = SUBSWrr %38:gpr32, %44:gpr32common, implicit-def $nzcv, debug-location !1002; cg.c:549:5
  Bcc 10, %bb.33, implicit killed $nzcv, debug-location !1002; cg.c:549:5
  B %bb.29, debug-location !1002; cg.c:549:5

bb.29.for.body131:
; predecessors: %bb.28
  successors: %bb.30(0x80000000); %bb.30(100.00%)

  STRXui $xzr, %stack.13.d, 0, debug-location !1003 :: (store 8 into %ir.d); cg.c:550:11
  %70:gpr64common = LDRXui %stack.1.rowstr.addr, 0, debug-location !1005 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:18
  %71:gpr64 = LDRSWui %stack.9.j, 0, debug-location !1007 :: (dereferenceable load 4 from %ir.j); cg.c:551:25
  %72:gpr32 = LDRWroX %70:gpr64common, %71:gpr64, 0, 1, debug-location !1005 :: (load 4 from %ir.arrayidx133); cg.c:551:18
  STRWui %72:gpr32, %stack.10.k, 0, debug-location !1008 :: (store 4 into %ir.k); cg.c:551:16

bb.30.for.cond134:
; predecessors: %bb.29, %bb.31
  successors: %bb.31(0x7c000000), %bb.32(0x04000000); %bb.31(96.88%), %bb.32(3.12%)

  %73:gpr32 = LDRWui %stack.10.k, 0, debug-location !1010 :: (dereferenceable load 4 from %ir.k); cg.c:551:29
  %74:gpr64 = LDRXui %stack.1.rowstr.addr, 0, debug-location !1012 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:33
  %75:gpr64 = LDRSWui %stack.9.j, 0, debug-location !1013 :: (dereferenceable load 4 from %ir.j); cg.c:551:40
  %76:gpr64common = ADDXrs %74:gpr64, %75:gpr64, 2, debug-location !1012; cg.c:551:33
  %77:gpr32 = LDRWui %76:gpr64common, 1, debug-location !1012 :: (load 4 from %ir.arrayidx137); cg.c:551:33
  %2:fpr64 = LDRDui %stack.13.d, 0, debug-location !1016 :: (dereferenceable load 8 from %ir.d); cg.c:0
  dead $wzr = SUBSWrr %73:gpr32, %77:gpr32, implicit-def $nzcv, debug-location !1017; cg.c:551:9
  Bcc 10, %bb.32, implicit killed $nzcv, debug-location !1017; cg.c:551:9
  B %bb.31, debug-location !1017; cg.c:551:9

bb.31.for.body139:
; predecessors: %bb.30
  successors: %bb.30(0x80000000); %bb.30(100.00%)

  %83:gpr64common = LDRXui %stack.4.a.addr, 0, debug-location !1018 :: (dereferenceable load 8 from %ir.a.addr); cg.c:552:21
  %84:gpr64common = LDRSWui %stack.10.k, 0, debug-location !1020 :: (dereferenceable load 4 from %ir.k); cg.c:552:23
  %86:fpr64 = LDRDroX %83:gpr64common, %84:gpr64common, 0, 1, debug-location !1018 :: (load 8 from %ir.arrayidx141); cg.c:552:21
  %87:gpr64common = LDRXui %stack.3.z.addr, 0, debug-location !1021 :: (dereferenceable load 8 from %ir.z.addr); cg.c:552:28
  %88:gpr64common = LDRXui %stack.0.colidx.addr, 0, debug-location !1022 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:552:30
  %89:gpr64 = LDRSWroX %88:gpr64common, %84:gpr64common, 0, 1, debug-location !1022 :: (load 4 from %ir.arrayidx143); cg.c:552:30
  %90:fpr64 = LDRDroX %87:gpr64common, %89:gpr64, 0, 1, debug-location !1021 :: (load 8 from %ir.arrayidx145); cg.c:552:28
  %91:fpr64 = FMULDrr %86:fpr64, %90:fpr64, debug-location !1024; cg.c:552:26
  %92:fpr64 = FADDDrr %2:fpr64, %91:fpr64, debug-location !1025; cg.c:552:19
  STRDui %92:fpr64, %stack.13.d, 0, debug-location !1026 :: (store 8 into %ir.d); cg.c:552:15
  %93:gpr32common = nsw ADDWri %84.sub_32:gpr64common, 1, 0, debug-location !1027; cg.c:551:49
  STRWui %93:gpr32common, %stack.10.k, 0, debug-location !1027 :: (store 4 into %ir.k); cg.c:551:49
  B %bb.30, debug-location !1028; cg.c:551:9

bb.32.for.end150:
; predecessors: %bb.30
  successors: %bb.28(0x80000000); %bb.28(100.00%)

  %79:gpr64common = LDRXui %stack.7.r.addr, 0, debug-location !1031 :: (dereferenceable load 8 from %ir.r.addr); cg.c:554:9
  %80:gpr64 = LDRSWui %stack.9.j, 0, debug-location !1032 :: (dereferenceable load 4 from %ir.j); cg.c:554:11
  STRDroX %2:fpr64, %79:gpr64common, %80:gpr64, 0, 1, debug-location !1033 :: (store 8 into %ir.arrayidx152); cg.c:554:14
  %81:gpr32common = LDRWui %stack.9.j, 0, debug-location !1034 :: (dereferenceable load 4 from %ir.j); cg.c:549:46
  %82:gpr32common = nsw ADDWri %81:gpr32common, 1, 0, debug-location !1034; cg.c:549:46
  STRWui %82:gpr32common, %stack.9.j, 0, debug-location !1034 :: (store 4 into %ir.j); cg.c:549:46
  B %bb.28, debug-location !1035; cg.c:549:5

bb.33.for.end155:
; predecessors: %bb.28
  successors: %bb.34(0x80000000); %bb.34(100.00%)

  STRWui $wzr, %stack.9.j, 0, debug-location !1038 :: (store 4 into %ir.j); cg.c:560:12

bb.34.for.cond156:
; predecessors: %bb.33, %bb.35
  successors: %bb.35(0x7c000000), %bb.36(0x04000000); %bb.35(96.88%), %bb.36(3.12%)

  %47:gpr32 = LDRWui %stack.9.j, 0, debug-location !1041 :: (dereferenceable load 4 from %ir.j); cg.c:560:17
  %49:gpr32 = LDRWui %25:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !1043 :: (dereferenceable load 4 from @lastcol); cg.c:560:21
  %51:gpr32 = LDRWui %27:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !1044 :: (dereferenceable load 4 from @firstcol); cg.c:560:31
  %52:gpr32common = nsw SUBWrr %49:gpr32, %51:gpr32, debug-location !1045; cg.c:560:29
  %53:gpr32common = nsw ADDWri %52:gpr32common, 1, 0, debug-location !1046; cg.c:560:40
  dead $wzr = SUBSWrr %47:gpr32, %53:gpr32common, implicit-def $nzcv, debug-location !1048; cg.c:560:5
  Bcc 10, %bb.36, implicit killed $nzcv, debug-location !1048; cg.c:560:5
  B %bb.35, debug-location !1048; cg.c:560:5

bb.35.for.body160:
; predecessors: %bb.34
  successors: %bb.34(0x80000000); %bb.34(100.00%)

  %57:gpr64common = LDRXui %stack.2.x.addr, 0, debug-location !1049 :: (dereferenceable load 8 from %ir.x.addr); cg.c:561:13
  %58:gpr64common = LDRSWui %stack.9.j, 0, debug-location !1051 :: (dereferenceable load 4 from %ir.j); cg.c:561:15
  %60:gpr64 = UBFMXri %58:gpr64common, 61, 60, debug-location !1049; cg.c:561:13
  %61:fpr64 = LDRDroX %57:gpr64common, %60:gpr64, 0, 0, debug-location !1049 :: (load 8 from %ir.arrayidx162); cg.c:561:13
  %62:gpr64common = LDRXui %stack.7.r.addr, 0, debug-location !1052 :: (dereferenceable load 8 from %ir.r.addr); cg.c:561:20
  %63:fpr64 = LDRDroX %62:gpr64common, %60:gpr64, 0, 0, debug-location !1052 :: (load 8 from %ir.arrayidx164); cg.c:561:20
  %64:fpr64 = FSUBDrr %61:fpr64, %63:fpr64, debug-location !1054; cg.c:561:18
  STRDui %64:fpr64, %stack.13.d, 0, debug-location !1055 :: (store 8 into %ir.d); cg.c:561:11
  %65:fpr64 = LDRDui %stack.14.sum, 0, debug-location !1056 :: (dereferenceable load 8 from %ir.sum); cg.c:562:15
  %66:fpr64 = FMULDrr %64:fpr64, %64:fpr64, debug-location !1059; cg.c:562:23
  %67:fpr64 = FADDDrr %65:fpr64, %66:fpr64, debug-location !1060; cg.c:562:19
  STRDui %67:fpr64, %stack.14.sum, 0, debug-location !1061 :: (store 8 into %ir.sum); cg.c:562:13
  %68:gpr32common = nsw ADDWri %58.sub_32:gpr64common, 1, 0, debug-location !1062; cg.c:560:46
  STRWui %68:gpr32common, %stack.9.j, 0, debug-location !1062 :: (store 4 into %ir.j); cg.c:560:46
  B %bb.34, debug-location !1063; cg.c:560:5

bb.36.for.end170:
; predecessors: %bb.34
  successors: %bb.38(0x50000000), %bb.37(0x30000000); %bb.38(62.50%), %bb.37(37.50%)

  %3:fpr64 = LDRDui %stack.14.sum, 0, debug-location !1066 :: (dereferenceable load 8 from %ir.sum); cg.c:565:19
  %247:fpr64 = FSQRTDr %3:fpr64, debug-location !1067; cg.c:565:14
  FCMPDrr %247:fpr64, %247:fpr64, implicit-def $nzcv, debug-location !1068; cg.c:565:6
  Bcc 7, %bb.38, implicit killed $nzcv, debug-location !1068; cg.c:565:6
  B %bb.37, debug-location !1068; cg.c:565:6

bb.37.call.sqrt:
; predecessors: %bb.36
  successors: %bb.38(0x80000000); %bb.38(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1068; cg.c:565:6
  $d0 = COPY %3:fpr64, debug-location !1068; cg.c:565:6
  BL @sqrt, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $d0, implicit-def $sp, implicit-def $d0, debug-location !1068; cg.c:565:6
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1068; cg.c:565:6
  %247:fpr64 = COPY killed $d0, debug-location !1068; cg.c:565:6

bb.38.for.end170.split:
; predecessors: %bb.36, %bb.37

  %56:gpr64common = LDRXui %fixed-stack.0, 0, debug-location !1068 :: (dereferenceable load 8 from %ir.rnorm.addr, align 16); cg.c:565:6
  STRDui %247:fpr64, %56:gpr64common, 0, debug-location !1069 :: (store 8 into %ir.155); cg.c:565:12
  RET_ReallyLR debug-location !1070; cg.c:566:1

# End machine code for function conj_grad.

********** MI Scheduling **********
conj_grad:%bb.0 entry
  From: %14:gpr64 = COPY $x7
    To: End RegionInstrs: 21
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR32arg=8
tcGPR64=8
GPR32=8
Live In: W0 W1 W2 W3 W4 W5 W6 W7 
Live Out: %19 
Live Thru: 
  LiveReg: %19
Top Pressure:
GPR32arg=8
tcGPR64=8
GPR32=8
Bottom Pressure:
GPR32=1
Excess PSets: 
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %14:gpr64 = COPY $x7
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(15): Data Latency=0 Reg=%14
  Pressure Diff      : GPR32arg 1    tcGPR64 1
  Single Issue       : false;
SU(1):   %13:gpr64 = COPY $x6
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(14): Data Latency=0 Reg=%13
  Pressure Diff      : GPR32arg 1    tcGPR64 1
  Single Issue       : false;
SU(2):   %12:gpr64 = COPY $x5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(13): Data Latency=0 Reg=%12
  Pressure Diff      : GPR32arg 1    tcGPR64 1
  Single Issue       : false;
SU(3):   %11:gpr64 = COPY $x4
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(12): Data Latency=0 Reg=%11
  Pressure Diff      : GPR32arg 1    tcGPR64 1
  Single Issue       : false;
SU(4):   %10:gpr64 = COPY $x3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(11): Data Latency=0 Reg=%10
  Pressure Diff      : GPR32arg 1    tcGPR64 1
  Single Issue       : false;
SU(5):   %9:gpr64 = COPY $x2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(10): Data Latency=0 Reg=%9
  Pressure Diff      : GPR32arg 1    tcGPR64 1
  Single Issue       : false;
SU(6):   %8:gpr64 = COPY $x1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(9): Data Latency=0 Reg=%8
  Pressure Diff      : GPR32arg 1    tcGPR64 1
  Single Issue       : false;
SU(7):   %7:gpr64 = COPY $x0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(8): Data Latency=0 Reg=%7
  Pressure Diff      : GPR32arg 1    tcGPR64 1
  Single Issue       : false;
SU(8):   STRXui %7:gpr64, %stack.0.colidx.addr, 0 :: (store 8 into %ir.colidx.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(7): Data Latency=0 Reg=%7
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(9):   STRXui %8:gpr64, %stack.1.rowstr.addr, 0 :: (store 8 into %ir.rowstr.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(6): Data Latency=0 Reg=%8
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(10):   STRXui %9:gpr64, %stack.2.x.addr, 0 :: (store 8 into %ir.x.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(5): Data Latency=0 Reg=%9
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(11):   STRXui %10:gpr64, %stack.3.z.addr, 0 :: (store 8 into %ir.z.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(4): Data Latency=0 Reg=%10
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(12):   STRXui %11:gpr64, %stack.4.a.addr, 0 :: (store 8 into %ir.a.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Data Latency=0 Reg=%11
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(13):   STRXui %12:gpr64, %stack.5.p.addr, 0 :: (store 8 into %ir.p.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Data Latency=0 Reg=%12
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(14):   STRXui %13:gpr64, %stack.6.q.addr, 0 :: (store 8 into %ir.q.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%13
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(15):   STRXui %14:gpr64, %stack.7.r.addr, 0 :: (store 8 into %ir.r.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%14
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(16):   %15:gpr32 = MOVi32imm 25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(17): Data Latency=1 Reg=%15
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(17):   STRWui %15:gpr32, %stack.12.cgitmax, 0, debug-location !743 :: (store 4 into %ir.cgitmax); cg.c:406:15
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(16): Data Latency=1 Reg=%15
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(18):   STRXui $xzr, %stack.15.rho, 0, debug-location !756 :: (store 8 into %ir.rho); cg.c:409:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(19):   STRWui $wzr, %stack.9.j, 0, debug-location !757 :: (store 4 into %ir.j); cg.c:414:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(20):   %19:gpr64common = ADRP target-flags(aarch64-page) @naa
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 19 18 17 15 14 13 12 11 10 9 8 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 7 16 18 19 20 
Picking from Bot:
  Cand SU(20) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %14:gpr64 = COPY $x7
Top Pressure:
GPR32arg=7
tcGPR64=7
GPR32=8
  GPR32arg: 8 <= 8(+ 0 livethru)
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 19 18 17 15 14 13 12 11 10 9 8 
Queue TopQ.P: 
Queue TopQ.A: 20 1 2 3 4 5 6 7 16 18 19 15 
Picking from Bot:
  Cand SU(20) ORDER                              
Picking from Top:
  Cand SU(20) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(1) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(1) %13:gpr64 = COPY $x6
Top Pressure:
GPR32arg=6
tcGPR64=6
GPR32=8
  GPR32arg: 8 <= 8(+ 0 livethru)
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 19 18 17 15 14 13 12 11 10 9 8 
Queue TopQ.P: 
Queue TopQ.A: 20 15 2 3 4 5 6 7 16 18 19 14 
Picking from Bot:
  Cand SU(20) ORDER                              
Picking from Top:
  Cand SU(20) ORDER                              
  Cand SU(15) REG-MAX                            
  Cand SU(2) PHYS-REG                           
  Cand SU(2) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(2) %12:gpr64 = COPY $x5
Top Pressure:
GPR32arg=5
tcGPR64=5
GPR32=8
  GPR32arg: 8 <= 8(+ 0 livethru)
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 19 18 17 15 14 13 12 11 10 9 8 
Queue TopQ.P: 
Queue TopQ.A: 20 15 14 3 4 5 6 7 16 18 19 13 
Picking from Bot:
  Cand SU(20) ORDER                              
Picking from Top:
  Cand SU(20) ORDER                              
  Cand SU(15) REG-MAX                            
  Cand SU(14) ORDER                              
  Cand SU(3) PHYS-REG                           
  Cand SU(3) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(3) %11:gpr64 = COPY $x4
Top Pressure:
GPR32arg=4
tcGPR64=4
GPR32=8
  GPR32arg: 8 <= 8(+ 0 livethru)
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 19 18 17 15 14 13 12 11 10 9 8 
Queue TopQ.P: 
Queue TopQ.A: 20 15 14 13 4 5 6 7 16 18 19 12 
Picking from Bot:
  Cand SU(20) ORDER                              
Picking from Top:
  Cand SU(20) ORDER                              
  Cand SU(15) REG-MAX                            
  Cand SU(14) ORDER                              
  Cand SU(13) ORDER                              
  Cand SU(4) PHYS-REG                           
  Cand SU(4) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(4) %10:gpr64 = COPY $x3
Top Pressure:
GPR32arg=3
tcGPR64=3
GPR32=8
  GPR32arg: 8 <= 8(+ 0 livethru)
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 19 18 17 15 14 13 12 11 10 9 8 
Queue TopQ.P: 
Queue TopQ.A: 20 15 14 13 12 5 6 7 16 18 19 11 
Picking from Bot:
  Cand SU(20) ORDER                              
Picking from Top:
  Cand SU(20) ORDER                              
  Cand SU(15) REG-MAX                            
  Cand SU(14) ORDER                              
  Cand SU(13) ORDER                              
  Cand SU(12) ORDER                              
  Cand SU(5) PHYS-REG                           
  Cand SU(5) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(5) %9:gpr64 = COPY $x2
Top Pressure:
GPR32arg=2
tcGPR64=2
GPR32=8
  GPR32arg: 8 <= 8(+ 0 livethru)
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 19 18 17 15 14 13 12 11 10 9 8 
Queue TopQ.P: 
Queue TopQ.A: 20 15 14 13 12 11 6 7 16 18 19 10 
Picking from Bot:
  Cand SU(20) ORDER                              
Picking from Top:
  Cand SU(20) ORDER                              
  Cand SU(15) REG-MAX                            
  Cand SU(14) ORDER                              
  Cand SU(13) ORDER                              
  Cand SU(12) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(6) PHYS-REG                           
  Cand SU(6) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(6) %8:gpr64 = COPY $x1
Top Pressure:
GPR32arg=1
tcGPR64=1
GPR32=8
  GPR32arg: 8 <= 8(+ 0 livethru)
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 19 18 17 15 14 13 12 11 10 9 8 
Queue TopQ.P: 
Queue TopQ.A: 20 15 14 13 12 11 10 7 16 18 19 9 
Picking from Bot:
  Cand SU(20) ORDER                              
Picking from Top:
  Cand SU(20) ORDER                              
  Cand SU(15) REG-MAX                            
  Cand SU(14) ORDER                              
  Cand SU(13) ORDER                              
  Cand SU(12) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(7) PHYS-REG                           
  Cand SU(7) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(7) %7:gpr64 = COPY $x0
Top Pressure:
GPR32=8
  GPR32arg: 8 <= 8(+ 0 livethru)
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 19 18 17 15 14 13 12 11 10 9 8 
Queue TopQ.P: 
Queue TopQ.A: 20 15 14 13 12 11 10 9 16 18 19 8 
Picking from Bot:
  Cand SU(20) ORDER                              
Picking from Top:
  Cand SU(20) ORDER                              
  Cand SU(15) REG-MAX                            
  Cand SU(14) ORDER                              
  Cand SU(13) ORDER                              
  Cand SU(12) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(20) %19:gpr64common = ADRP target-flags(aarch64-page) @naa
Bottom Pressure:

  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 19 18 17 15 14 13 12 11 10 9 
Queue TopQ.P: 
Queue TopQ.A: 8 15 14 13 12 11 10 9 16 18 19 
BotQ.A RemLatency SU(17) 1c
  BotQ.A RemainingLatency 1 + 1c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(19) ORDER                              
  Cand SU(17) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(8) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(17) STRWui %15:gpr32, %stack.12.cgitmax, 0, debug-location !743 :: (store 4 into %ir.cgitmax); cg.c:406:15
Bottom Pressure:
GPR32=1
  LiveReg: %15
  UpdateRegP: SU(17) STRWui %15:gpr32, %stack.12.cgitmax, 0, debug-location !743 :: (store 4 into %ir.cgitmax); cg.c:406:15
              to 
  Ready @1c
  BotQ.A TopLatency SU(17) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 19 18 9 15 14 13 12 11 10 16 
Queue TopQ.P: 
Queue TopQ.A: 8 15 14 13 12 11 10 9 16 18 19 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(19) ORDER                              
Picking from Top:
  Cand SU(8) NOCAND                             
Pick Bot ORDER     
Scheduling SU(19) STRWui $wzr, %stack.9.j, 0, debug-location !757 :: (store 4 into %ir.j); cg.c:414:12
Bottom Pressure:
GPR32=1
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 16 18 9 15 14 13 12 11 10 
Queue TopQ.P: 
Queue TopQ.A: 8 15 14 13 12 11 10 9 16 18 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(18) ORDER                              
Picking from Top:
  Cand SU(8) NOCAND                             
Pick Bot ORDER     
Scheduling SU(18) STRXui $xzr, %stack.15.rho, 0, debug-location !756 :: (store 8 into %ir.rho); cg.c:409:9
Bottom Pressure:
GPR32=1
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 16 10 9 15 14 13 12 11 
Queue TopQ.P: 
Queue TopQ.A: 8 15 14 13 12 11 10 9 16 
  BotQ.A RemainingLatency 0 + 4c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(16) ORDER                              
Picking from Top:
  Cand SU(8) NOCAND                             
Pick Bot ORDER     
Scheduling SU(16) %15:gpr32 = MOVi32imm 25
Bottom Pressure:

  Ready @4c
  BotQ.A BotLatency SU(16) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 11 10 9 15 14 13 12 
Queue TopQ.P: 
Queue TopQ.A: 8 15 14 13 12 11 10 9 
  BotQ.A RemainingLatency 0 + 5c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(15) ORDER                              
Picking from Top:
  Cand SU(8) NOCAND                             
Pick Bot ORDER     
Scheduling SU(15) STRXui %14:gpr64, %stack.7.r.addr, 0 :: (store 8 into %ir.r.addr)
Bottom Pressure:
GPR32=1
  LiveReg: %14
  UpdateRegP: SU(15) STRXui %14:gpr64, %stack.7.r.addr, 0 :: (store 8 into %ir.r.addr)
              to 
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 11 10 9 12 14 13 
Queue TopQ.P: 
Queue TopQ.A: 8 9 14 13 12 11 10 
  BotQ.A RemainingLatency 0 + 6c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(12) ORDER                              
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(8) NOCAND                             
Pick Bot ORDER     
Scheduling SU(14) STRXui %13:gpr64, %stack.6.q.addr, 0 :: (store 8 into %ir.q.addr)
Bottom Pressure:
GPR32=2
  LiveReg: %13
  UpdateRegP: SU(14) STRXui %13:gpr64, %stack.6.q.addr, 0 :: (store 8 into %ir.q.addr)
              to 
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 11 10 9 12 13 
Queue TopQ.P: 
Queue TopQ.A: 8 9 10 13 12 11 
  BotQ.A RemainingLatency 0 + 7c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(12) ORDER                              
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(8) NOCAND                             
Pick Bot ORDER     
Scheduling SU(13) STRXui %12:gpr64, %stack.5.p.addr, 0 :: (store 8 into %ir.p.addr)
Bottom Pressure:
GPR32=3
  LiveReg: %12
  UpdateRegP: SU(13) STRXui %12:gpr64, %stack.5.p.addr, 0 :: (store 8 into %ir.p.addr)
              to 
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 11 10 9 12 
Queue TopQ.P: 
Queue TopQ.A: 8 9 10 11 12 
  BotQ.A RemainingLatency 0 + 8c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(8) NOCAND                             
Pick Bot ORDER     
Scheduling SU(12) STRXui %11:gpr64, %stack.4.a.addr, 0 :: (store 8 into %ir.a.addr)
Bottom Pressure:
GPR32=4
  LiveReg: %11
  UpdateRegP: SU(12) STRXui %11:gpr64, %stack.4.a.addr, 0 :: (store 8 into %ir.a.addr)
              to 
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 11 10 9 
Queue TopQ.P: 
Queue TopQ.A: 8 9 10 11 
  BotQ.A RemainingLatency 0 + 9c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(8) NOCAND                             
Pick Bot ORDER     
Scheduling SU(11) STRXui %10:gpr64, %stack.3.z.addr, 0 :: (store 8 into %ir.z.addr)
Bottom Pressure:
GPR32=5
  LiveReg: %10
  UpdateRegP: SU(11) STRXui %10:gpr64, %stack.3.z.addr, 0 :: (store 8 into %ir.z.addr)
              to 
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 10 
Queue TopQ.P: 
Queue TopQ.A: 8 9 10 
  BotQ.A RemainingLatency 0 + 10c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(8) NOCAND                             
Pick Bot ORDER     
Scheduling SU(10) STRXui %9:gpr64, %stack.2.x.addr, 0 :: (store 8 into %ir.x.addr)
Bottom Pressure:
GPR32=6
  LiveReg: %9
  UpdateRegP: SU(10) STRXui %9:gpr64, %stack.2.x.addr, 0 :: (store 8 into %ir.x.addr)
              to 
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 
Queue TopQ.P: 
Queue TopQ.A: 8 9 
  BotQ.A RemainingLatency 0 + 11c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(8) NOCAND                             
Pick Bot ORDER     
Scheduling SU(9) STRXui %8:gpr64, %stack.1.rowstr.addr, 0 :: (store 8 into %ir.rowstr.addr)
Bottom Pressure:
GPR32=7
  LiveReg: %8
  UpdateRegP: SU(9) STRXui %8:gpr64, %stack.1.rowstr.addr, 0 :: (store 8 into %ir.rowstr.addr)
              to 
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Pick Bot ONLY1     
Scheduling SU(8) STRXui %7:gpr64, %stack.0.colidx.addr, 0 :: (store 8 into %ir.colidx.addr)
Bottom Pressure:
GPR32=8
  LiveReg: %7
  UpdateRegP: SU(8) STRXui %7:gpr64, %stack.0.colidx.addr, 0 :: (store 8 into %ir.colidx.addr)
              to 
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %14:gpr64 = COPY $x7
SU(1):   %13:gpr64 = COPY $x6
SU(2):   %12:gpr64 = COPY $x5
SU(3):   %11:gpr64 = COPY $x4
SU(4):   %10:gpr64 = COPY $x3
SU(5):   %9:gpr64 = COPY $x2
SU(6):   %8:gpr64 = COPY $x1
SU(7):   %7:gpr64 = COPY $x0
SU(8):   STRXui %7:gpr64, %stack.0.colidx.addr, 0 :: (store 8 into %ir.colidx.addr)
SU(9):   STRXui %8:gpr64, %stack.1.rowstr.addr, 0 :: (store 8 into %ir.rowstr.addr)
SU(10):   STRXui %9:gpr64, %stack.2.x.addr, 0 :: (store 8 into %ir.x.addr)
SU(11):   STRXui %10:gpr64, %stack.3.z.addr, 0 :: (store 8 into %ir.z.addr)
SU(12):   STRXui %11:gpr64, %stack.4.a.addr, 0 :: (store 8 into %ir.a.addr)
SU(13):   STRXui %12:gpr64, %stack.5.p.addr, 0 :: (store 8 into %ir.p.addr)
SU(14):   STRXui %13:gpr64, %stack.6.q.addr, 0 :: (store 8 into %ir.q.addr)
SU(15):   STRXui %14:gpr64, %stack.7.r.addr, 0 :: (store 8 into %ir.r.addr)
SU(16):   %15:gpr32 = MOVi32imm 25
SU(18):   STRXui $xzr, %stack.15.rho, 0, debug-location !756 :: (store 8 into %ir.rho); cg.c:409:9
SU(19):   STRWui $wzr, %stack.9.j, 0, debug-location !757 :: (store 4 into %ir.j); cg.c:414:12
SU(17):   STRWui %15:gpr32, %stack.12.cgitmax, 0, debug-location !743 :: (store 4 into %ir.cgitmax); cg.c:406:15
SU(20):   %19:gpr64common = ADRP target-flags(aarch64-page) @naa

********** MI Scheduling **********
conj_grad:%bb.1 for.cond
  From: %18:gpr32 = LDRWui %stack.9.j, 0, debug-location !760 :: (dereferenceable load 4 from %ir.j); cg.c:414:17
    To: Bcc 10, %bb.3, implicit killed $nzcv, debug-location !765; cg.c:414:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %18:gpr32 = LDRWui %stack.9.j, 0, debug-location !760 :: (dereferenceable load 4 from %ir.j); cg.c:414:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=%18
  Single Issue       : false;
SU(1):   %20:gpr32common = LDRWui %19:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !762 :: (dereferenceable load 4 from @naa); cg.c:414:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Data Latency=4 Reg=%20
  Single Issue       : false;
SU(2):   %21:gpr32common = nsw ADDWri %20:gpr32common, 1, 0, debug-location !763; cg.c:414:25
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(1): Data Latency=4 Reg=%20
  Successors:
    SU(3): Data Latency=1 Reg=%21
  Single Issue       : false;
SU(3):   dead $wzr = SUBSWrr %18:gpr32, %21:gpr32common, implicit-def $nzcv, debug-location !765; cg.c:414:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=%21
    SU(0): Data Latency=4 Reg=%18
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.3, implicit killed $nzcv, debug-location !765; cg.c:414:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) dead $wzr = SUBSWrr %18:gpr32, %21:gpr32common, implicit-def $nzcv, debug-location !765; cg.c:414:5
  Ready @1c
  BotQ.A TopLatency SU(3) 5c
  BotQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %21:gpr32common = nsw ADDWri %20:gpr32common, 1, 0, debug-location !763; cg.c:414:25
  Ready @2c
  BotQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %18:gpr32 = LDRWui %stack.9.j, 0, debug-location !760 :: (dereferenceable load 4 from %ir.j); cg.c:414:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %20:gpr32common = LDRWui %19:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !762 :: (dereferenceable load 4 from @naa); cg.c:414:21
  Ready @6c
  BotQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(1):   %20:gpr32common = LDRWui %19:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !762 :: (dereferenceable load 4 from @naa); cg.c:414:21
SU(0):   %18:gpr32 = LDRWui %stack.9.j, 0, debug-location !760 :: (dereferenceable load 4 from %ir.j); cg.c:414:17
SU(2):   %21:gpr32common = nsw ADDWri %20:gpr32common, 1, 0, debug-location !763; cg.c:414:25
SU(3):   dead $wzr = SUBSWrr %18:gpr32, %21:gpr32common, implicit-def $nzcv, debug-location !765; cg.c:414:5

********** MI Scheduling **********
conj_grad:%bb.2 for.body
  From: %230:gpr64common = LDRXui %stack.6.q.addr, 0, debug-location !766 :: (dereferenceable load 8 from %ir.q.addr); cg.c:415:9
    To: B %bb.1, debug-location !784; cg.c:414:5
 RegionInstrs: 21
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=1
GPR32=2
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %230:gpr64common = LDRXui %stack.6.q.addr, 0, debug-location !766 :: (dereferenceable load 8 from %ir.q.addr); cg.c:415:9
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 35
  Successors:
    SU(2): Data Latency=4 Reg=%230
    SU(17): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %231:gpr64 = LDRSWui %stack.9.j, 0, debug-location !768 :: (dereferenceable load 4 from %ir.j); cg.c:415:11
  # preds left       : 0
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 35
  Successors:
    SU(2): Data Latency=4 Reg=%231
    SU(20): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   STRXroX $xzr, %230:gpr64common, %231:gpr64, 0, 1, debug-location !769 :: (store 8 into %ir.arrayidx); cg.c:415:14
  # preds left       : 4
  # succs left       : 15
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 31
  Predecessors:
    SU(1): Data Latency=4 Reg=%231
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%230
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(20): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(18): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
    SU(4): Ord  Latency=1 Memory
    SU(16): Ord  Latency=1 Memory
    SU(15): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
    SU(12): Ord  Latency=1 Memory
    SU(10): Ord  Latency=1 Memory
    SU(6): Ord  Latency=1 Memory
    SU(3): Ord  Latency=1 Memory
  Pressure Diff      : GPR32 2
  Single Issue       : false;
SU(3):   %233:gpr64common = LDRXui %stack.3.z.addr, 0, debug-location !770 :: (dereferenceable load 8 from %ir.z.addr); cg.c:416:9
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 30
  Predecessors:
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(5): Data Latency=4 Reg=%233
    SU(17): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(4):   %234:gpr64 = LDRSWui %stack.9.j, 0, debug-location !771 :: (dereferenceable load 4 from %ir.j); cg.c:416:11
  # preds left       : 1
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 30
  Predecessors:
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(5): Data Latency=4 Reg=%234
    SU(20): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(5):   STRXroX $xzr, %233:gpr64common, %234:gpr64, 0, 1, debug-location !772 :: (store 8 into %ir.arrayidx2); cg.c:416:14
  # preds left       : 7
  # succs left       : 12
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 26
  Predecessors:
    SU(4): Data Latency=4 Reg=%234
    SU(4): Ord  Latency=0 Memory
    SU(3): Data Latency=4 Reg=%233
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(20): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(18): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
    SU(16): Ord  Latency=1 Memory
    SU(15): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
    SU(12): Ord  Latency=1 Memory
    SU(10): Ord  Latency=1 Memory
    SU(6): Ord  Latency=1 Memory
  Pressure Diff      : GPR32 2
  Single Issue       : false;
SU(6):   %235:gpr64common = LDRXui %stack.2.x.addr, 0, debug-location !773 :: (dereferenceable load 8 from %ir.x.addr); cg.c:417:16
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 24
  Predecessors:
    SU(5): Ord  Latency=1 Memory
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(9): Data Latency=4 Reg=%235
    SU(17): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   %236:gpr64 = LDRSWui %stack.9.j, 0, debug-location !774 :: (dereferenceable load 4 from %ir.j); cg.c:417:18
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 25
  Predecessors:
    SU(5): Ord  Latency=1 Memory
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(8): Data Latency=4 Reg=%236
    SU(20): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(8):   %237:gpr64 = UBFMXri %236:gpr64, 61, 60, debug-location !773; cg.c:417:16
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 21
  Predecessors:
    SU(7): Data Latency=4 Reg=%236
  Successors:
    SU(11): Data Latency=1 Reg=%237
    SU(9): Data Latency=1 Reg=%237
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   %238:fpr64 = LDRDroX %235:gpr64common, %237:gpr64, 0, 0, debug-location !773 :: (load 8 from %ir.arrayidx4); cg.c:417:16
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 15
  Height             : 20
  Predecessors:
    SU(8): Data Latency=1 Reg=%237
    SU(6): Data Latency=4 Reg=%235
    SU(5): Ord  Latency=1 Memory
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(11): Data Latency=4 Reg=%238
    SU(20): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(10):   %239:gpr64common = LDRXui %stack.7.r.addr, 0, debug-location !775 :: (dereferenceable load 8 from %ir.r.addr); cg.c:417:9
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 20
  Predecessors:
    SU(5): Ord  Latency=1 Memory
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(11): Data Latency=4 Reg=%239
    SU(17): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(11):   STRDroX %238:fpr64, %239:gpr64common, %237:gpr64, 0, 0, debug-location !777 :: (store 8 into %ir.arrayidx6); cg.c:417:14
  # preds left       : 13
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 1
  Depth              : 19
  Height             : 16
  Predecessors:
    SU(8): Data Latency=1 Reg=%237
    SU(10): Ord  Latency=0 Memory
    SU(9): Data Latency=4 Reg=%238
    SU(9): Ord  Latency=0 Memory
    SU(10): Data Latency=4 Reg=%239
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(20): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(18): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(16): Ord  Latency=1 Memory
    SU(15): Ord  Latency=1 Memory
    SU(12): Ord  Latency=1 Memory
  Pressure Diff      : FPR8 1    GPR32 2    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(12):   %240:gpr64common = LDRXui %stack.7.r.addr, 0, debug-location !778 :: (dereferenceable load 8 from %ir.r.addr); cg.c:418:16
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 20
  Height             : 14
  Predecessors:
    SU(11): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(15): Data Latency=4 Reg=%240
    SU(17): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(13):   %241:gpr64 = LDRSWui %stack.9.j, 0, debug-location !779 :: (dereferenceable load 4 from %ir.j); cg.c:418:18
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 20
  Height             : 15
  Predecessors:
    SU(11): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(14): Data Latency=4 Reg=%241
    SU(20): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(14):   %242:gpr64 = UBFMXri %241:gpr64, 61, 60, debug-location !778; cg.c:418:16
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 24
  Height             : 11
  Predecessors:
    SU(13): Data Latency=4 Reg=%241
  Successors:
    SU(17): Data Latency=1 Reg=%242
    SU(15): Data Latency=1 Reg=%242
  Pressure Diff      : 
  Single Issue       : false;
SU(15):   %243:fpr64 = LDRDroX %240:gpr64common, %242:gpr64, 0, 0, debug-location !778 :: (load 8 from %ir.arrayidx8); cg.c:418:16
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 10
  Predecessors:
    SU(14): Data Latency=1 Reg=%242
    SU(12): Data Latency=4 Reg=%240
    SU(11): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(17): Data Latency=4 Reg=%243
    SU(20): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(16):   %244:gpr64common = LDRXui %stack.5.p.addr, 0, debug-location !780 :: (dereferenceable load 8 from %ir.p.addr); cg.c:418:9
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 20
  Height             : 10
  Predecessors:
    SU(11): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(17): Data Latency=4 Reg=%244
    SU(17): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(17):   STRDroX %243:fpr64, %244:gpr64common, %242:gpr64, 0, 0, debug-location !782 :: (store 8 into %ir.arrayidx10); cg.c:418:14
  # preds left       : 18
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 29
  Height             : 6
  Predecessors:
    SU(14): Data Latency=1 Reg=%242
    SU(16): Ord  Latency=0 Memory
    SU(15): Data Latency=4 Reg=%243
    SU(15): Ord  Latency=0 Memory
    SU(16): Data Latency=4 Reg=%244
    SU(13): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(20): Ord  Latency=0 Memory
    SU(18): Ord  Latency=1 Memory
  Pressure Diff      : FPR8 1    GPR32 2    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(18):   %245:gpr32common = LDRWui %stack.9.j, 0, debug-location !783 :: (dereferenceable load 4 from %ir.j); cg.c:414:31
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 30
  Height             : 5
  Predecessors:
    SU(17): Ord  Latency=1 Memory
    SU(11): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(19): Data Latency=4 Reg=%245
    SU(20): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(19):   %246:gpr32common = nsw ADDWri %245:gpr32common, 1, 0, debug-location !783; cg.c:414:31
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 34
  Height             : 1
  Predecessors:
    SU(18): Data Latency=4 Reg=%245
  Successors:
    SU(20): Data Latency=1 Reg=%246
  Pressure Diff      : 
  Single Issue       : false;
SU(20):   STRWui %246:gpr32common, %stack.9.j, 0, debug-location !783 :: (store 4 into %ir.j); cg.c:414:31
  # preds left       : 12
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 35
  Height             : 0
  Predecessors:
    SU(19): Data Latency=1 Reg=%246
    SU(18): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.1, debug-location !784; cg.c:414:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 35
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 
Pick Bot ONLY1     
Scheduling SU(20) STRWui %246:gpr32common, %stack.9.j, 0, debug-location !783 :: (store 4 into %ir.j); cg.c:414:31
Bottom Pressure:
GPR32=1
  LiveReg: %246
  UpdateRegP: SU(20) STRWui %246:gpr32common, %stack.9.j, 0, debug-location !783 :: (store 4 into %ir.j); cg.c:414:31
              to 
  Ready @0c
  BotQ.A TopLatency SU(20) 35c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 19 
Pick Bot ONLY1     
Scheduling SU(19) %246:gpr32common = nsw ADDWri %245:gpr32common, 1, 0, debug-location !783; cg.c:414:31
Bottom Pressure:
GPR32=1
  LiveReg: %245
  UpdateRegP: SU(19) %246:gpr32common = nsw ADDWri %245:gpr32common, 1, 0, debug-location !783; cg.c:414:31
              to GPR32 -1
  Ready @1c
  BotQ.A BotLatency SU(19) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 18 
Pick Bot ONLY1     
Scheduling SU(18) %245:gpr32common = LDRWui %stack.9.j, 0, debug-location !783 :: (dereferenceable load 4 from %ir.j); cg.c:414:31
Bottom Pressure:

  Ready @5c
  BotQ.A BotLatency SU(18) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 
Pick Bot ONLY1     
Scheduling SU(17) STRDroX %243:fpr64, %244:gpr64common, %242:gpr64, 0, 0, debug-location !782 :: (store 8 into %ir.arrayidx10); cg.c:418:14
Bottom Pressure:
FPR8=1
GPR32=2
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %243
  UpdateRegP: SU(17) STRDroX %243:fpr64, %244:gpr64common, %242:gpr64, 0, 0, debug-location !782 :: (store 8 into %ir.arrayidx10); cg.c:418:14
              to GPR32 2
  LiveReg: %244
  UpdateRegP: SU(17) STRDroX %243:fpr64, %244:gpr64common, %242:gpr64, 0, 0, debug-location !782 :: (store 8 into %ir.arrayidx10); cg.c:418:14
              to GPR32 1
  LiveReg: %242
  UpdateRegP: SU(15) %243:fpr64 = LDRDroX %240:gpr64common, %242:gpr64, 0, 0, debug-location !778 :: (load 8 from %ir.arrayidx8); cg.c:418:16
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(17) STRDroX %243:fpr64, %244:gpr64common, %242:gpr64, 0, 0, debug-location !782 :: (store 8 into %ir.arrayidx10); cg.c:418:14
              to 
  Ready @6c
  BotQ.A BotLatency SU(17) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 15 16 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(15) 25c
Picking from Bot:
  Cand SU(15) ORDER                              
  Cand SU(16) REG-MAX                            
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(16) %244:gpr64common = LDRXui %stack.5.p.addr, 0, debug-location !780 :: (dereferenceable load 8 from %ir.p.addr); cg.c:418:9
Bottom Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  Ready @10c
  BotQ.A BotLatency SU(16) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 
Pick Bot ONLY1     
Scheduling SU(15) %243:fpr64 = LDRDroX %240:gpr64common, %242:gpr64, 0, 0, debug-location !778 :: (load 8 from %ir.arrayidx8); cg.c:418:16
Bottom Pressure:
GPR32=2
  LiveReg: %240
  UpdateRegP: SU(15) %243:fpr64 = LDRDroX %240:gpr64common, %242:gpr64, 0, 0, debug-location !778 :: (load 8 from %ir.arrayidx8); cg.c:418:16
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @11c
  BotQ.A TopLatency SU(15) 25c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 12 
Queue BotQ.A: 14 
Pick Bot ONLY1     
Scheduling SU(14) %242:gpr64 = UBFMXri %241:gpr64, 61, 60, debug-location !778; cg.c:418:16
Bottom Pressure:
GPR32=2
  LiveReg: %241
  UpdateRegP: SU(14) %242:gpr64 = UBFMXri %241:gpr64, 61, 60, debug-location !778; cg.c:418:16
              to GPR32 -1
  Ready @12c
  BotQ.A BotLatency SU(14) 11c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 7
  Executed: 13c
  Critical: 7c, 7 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 15 BotQ.A
Queue BotQ.P: 13 
Queue BotQ.A: 12 
Pick Bot ONLY1     
Scheduling SU(12) %240:gpr64common = LDRXui %stack.7.r.addr, 0, debug-location !778 :: (dereferenceable load 8 from %ir.r.addr); cg.c:418:16
Bottom Pressure:
GPR32=1
  Ready @15c
  BotQ.A BotLatency SU(12) 14c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 8
  Executed: 16c
  Critical: 8c, 8 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 
Pick Bot ONLY1     
Scheduling SU(13) %241:gpr64 = LDRSWui %stack.9.j, 0, debug-location !779 :: (dereferenceable load 4 from %ir.j); cg.c:418:18
Bottom Pressure:

  Ready @16c
  BotQ.A BotLatency SU(13) 15c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 9
  Executed: 17c
  Critical: 9c, 9 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 
Pick Bot ONLY1     
Scheduling SU(11) STRDroX %238:fpr64, %239:gpr64common, %237:gpr64, 0, 0, debug-location !777 :: (store 8 into %ir.arrayidx6); cg.c:417:14
Bottom Pressure:
FPR8=1
GPR32=2
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %238
  UpdateRegP: SU(11) STRDroX %238:fpr64, %239:gpr64common, %237:gpr64, 0, 0, debug-location !777 :: (store 8 into %ir.arrayidx6); cg.c:417:14
              to GPR32 2
  LiveReg: %239
  UpdateRegP: SU(11) STRDroX %238:fpr64, %239:gpr64common, %237:gpr64, 0, 0, debug-location !777 :: (store 8 into %ir.arrayidx6); cg.c:417:14
              to GPR32 1
  LiveReg: %237
  UpdateRegP: SU(9) %238:fpr64 = LDRDroX %235:gpr64common, %237:gpr64, 0, 0, debug-location !773 :: (load 8 from %ir.arrayidx4); cg.c:417:16
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(11) STRDroX %238:fpr64, %239:gpr64common, %237:gpr64, 0, 0, debug-location !777 :: (store 8 into %ir.arrayidx6); cg.c:417:14
              to 
  Ready @17c
  BotQ.A BotLatency SU(11) 16c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 10
  Executed: 18c
  Critical: 10c, 10 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 21 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 9 10 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(9) 15c
  BotQ.A RemainingLatency 15 + 21c > CritPath 35
Picking from Bot:
  Cand SU(9) ORDER                              
  Cand SU(10) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(10) %239:gpr64common = LDRXui %stack.7.r.addr, 0, debug-location !775 :: (dereferenceable load 8 from %ir.r.addr); cg.c:417:9
Bottom Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  Ready @21c
  BotQ.A BotLatency SU(10) 20c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 11
  Executed: 22c
  Critical: 11c, 11 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Pick Bot ONLY1     
Scheduling SU(9) %238:fpr64 = LDRDroX %235:gpr64common, %237:gpr64, 0, 0, debug-location !773 :: (load 8 from %ir.arrayidx4); cg.c:417:16
Bottom Pressure:
GPR32=2
  LiveReg: %235
  UpdateRegP: SU(9) %238:fpr64 = LDRDroX %235:gpr64common, %237:gpr64, 0, 0, debug-location !773 :: (load 8 from %ir.arrayidx4); cg.c:417:16
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @22c
  BotQ.A TopLatency SU(9) 15c
  *** Max MOps 1 at cycle 22
Cycle: 23 BotQ.A
BotQ.A @23c
  Retired: 12
  Executed: 23c
  Critical: 12c, 12 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 8 
Pick Bot ONLY1     
Scheduling SU(8) %237:gpr64 = UBFMXri %236:gpr64, 61, 60, debug-location !773; cg.c:417:16
Bottom Pressure:
GPR32=2
  LiveReg: %236
  UpdateRegP: SU(8) %237:gpr64 = UBFMXri %236:gpr64, 61, 60, debug-location !773; cg.c:417:16
              to GPR32 -1
  Ready @23c
  BotQ.A BotLatency SU(8) 21c
  *** Max MOps 1 at cycle 23
Cycle: 24 BotQ.A
BotQ.A @24c
  Retired: 13
  Executed: 24c
  Critical: 13c, 13 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 26 BotQ.A
Queue BotQ.P: 7 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %235:gpr64common = LDRXui %stack.2.x.addr, 0, debug-location !773 :: (dereferenceable load 8 from %ir.x.addr); cg.c:417:16
Bottom Pressure:
GPR32=1
  Ready @26c
  BotQ.A BotLatency SU(6) 24c
  *** Max MOps 1 at cycle 26
Cycle: 27 BotQ.A
BotQ.A @27c
  Retired: 14
  Executed: 27c
  Critical: 14c, 14 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) %236:gpr64 = LDRSWui %stack.9.j, 0, debug-location !774 :: (dereferenceable load 4 from %ir.j); cg.c:417:18
Bottom Pressure:

  Ready @27c
  BotQ.A BotLatency SU(7) 25c
  *** Max MOps 1 at cycle 27
Cycle: 28 BotQ.A
BotQ.A @28c
  Retired: 15
  Executed: 28c
  Critical: 15c, 15 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) STRXroX $xzr, %233:gpr64common, %234:gpr64, 0, 1, debug-location !772 :: (store 8 into %ir.arrayidx2); cg.c:416:14
Bottom Pressure:
GPR32=2
  LiveReg: %233
  UpdateRegP: SU(5) STRXroX $xzr, %233:gpr64common, %234:gpr64, 0, 1, debug-location !772 :: (store 8 into %ir.arrayidx2); cg.c:416:14
              to GPR32 1
  LiveReg: %234
  UpdateRegP: SU(5) STRXroX $xzr, %233:gpr64common, %234:gpr64, 0, 1, debug-location !772 :: (store 8 into %ir.arrayidx2); cg.c:416:14
              to 
  Ready @28c
  BotQ.A BotLatency SU(5) 26c
  *** Max MOps 1 at cycle 28
Cycle: 29 BotQ.A
BotQ.A @29c
  Retired: 16
  Executed: 29c
  Critical: 16c, 16 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 32 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(4) 5c
  BotQ.A RemainingLatency 5 + 32c > CritPath 35
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %234:gpr64 = LDRSWui %stack.9.j, 0, debug-location !771 :: (dereferenceable load 4 from %ir.j); cg.c:416:11
Bottom Pressure:
GPR32=1
  Ready @32c
  BotQ.A BotLatency SU(4) 30c
  *** Max MOps 1 at cycle 32
Cycle: 33 BotQ.A
BotQ.A @33c
  Retired: 17
  Executed: 33c
  Critical: 17c, 17 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %233:gpr64common = LDRXui %stack.3.z.addr, 0, debug-location !770 :: (dereferenceable load 8 from %ir.z.addr); cg.c:416:9
Bottom Pressure:

  Ready @33c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 33
Cycle: 34 BotQ.A
BotQ.A @34c
  Retired: 18
  Executed: 34c
  Critical: 18c, 18 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRXroX $xzr, %230:gpr64common, %231:gpr64, 0, 1, debug-location !769 :: (store 8 into %ir.arrayidx); cg.c:415:14
Bottom Pressure:
GPR32=2
  LiveReg: %230
  UpdateRegP: SU(2) STRXroX $xzr, %230:gpr64common, %231:gpr64, 0, 1, debug-location !769 :: (store 8 into %ir.arrayidx); cg.c:415:14
              to GPR32 1
  LiveReg: %231
  UpdateRegP: SU(2) STRXroX $xzr, %230:gpr64common, %231:gpr64, 0, 1, debug-location !769 :: (store 8 into %ir.arrayidx); cg.c:415:14
              to 
  Ready @34c
  BotQ.A BotLatency SU(2) 31c
  *** Max MOps 1 at cycle 34
Cycle: 35 BotQ.A
BotQ.A @35c
  Retired: 19
  Executed: 35c
  Critical: 19c, 19 MOps
  ExpectedLatency: 31c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 38 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 38c > CritPath 35
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %231:gpr64 = LDRSWui %stack.9.j, 0, debug-location !768 :: (dereferenceable load 4 from %ir.j); cg.c:415:11
Bottom Pressure:
GPR32=1
  Ready @38c
  BotQ.A BotLatency SU(1) 35c
  *** Max MOps 1 at cycle 38
Cycle: 39 BotQ.A
BotQ.A @39c
  Retired: 20
  Executed: 39c
  Critical: 20c, 20 MOps
  ExpectedLatency: 35c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %230:gpr64common = LDRXui %stack.6.q.addr, 0, debug-location !766 :: (dereferenceable load 8 from %ir.q.addr); cg.c:415:9
Bottom Pressure:

  Ready @39c
  *** Max MOps 1 at cycle 39
Cycle: 40 BotQ.A
BotQ.A @40c
  Retired: 21
  Executed: 40c
  Critical: 21c, 21 MOps
  ExpectedLatency: 35c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %230:gpr64common = LDRXui %stack.6.q.addr, 0, debug-location !766 :: (dereferenceable load 8 from %ir.q.addr); cg.c:415:9
SU(1):   %231:gpr64 = LDRSWui %stack.9.j, 0, debug-location !768 :: (dereferenceable load 4 from %ir.j); cg.c:415:11
SU(2):   STRXroX $xzr, %230:gpr64common, %231:gpr64, 0, 1, debug-location !769 :: (store 8 into %ir.arrayidx); cg.c:415:14
SU(3):   %233:gpr64common = LDRXui %stack.3.z.addr, 0, debug-location !770 :: (dereferenceable load 8 from %ir.z.addr); cg.c:416:9
SU(4):   %234:gpr64 = LDRSWui %stack.9.j, 0, debug-location !771 :: (dereferenceable load 4 from %ir.j); cg.c:416:11
SU(5):   STRXroX $xzr, %233:gpr64common, %234:gpr64, 0, 1, debug-location !772 :: (store 8 into %ir.arrayidx2); cg.c:416:14
SU(7):   %236:gpr64 = LDRSWui %stack.9.j, 0, debug-location !774 :: (dereferenceable load 4 from %ir.j); cg.c:417:18
SU(6):   %235:gpr64common = LDRXui %stack.2.x.addr, 0, debug-location !773 :: (dereferenceable load 8 from %ir.x.addr); cg.c:417:16
SU(8):   %237:gpr64 = UBFMXri %236:gpr64, 61, 60, debug-location !773; cg.c:417:16
SU(9):   %238:fpr64 = LDRDroX %235:gpr64common, %237:gpr64, 0, 0, debug-location !773 :: (load 8 from %ir.arrayidx4); cg.c:417:16
SU(10):   %239:gpr64common = LDRXui %stack.7.r.addr, 0, debug-location !775 :: (dereferenceable load 8 from %ir.r.addr); cg.c:417:9
SU(11):   STRDroX %238:fpr64, %239:gpr64common, %237:gpr64, 0, 0, debug-location !777 :: (store 8 into %ir.arrayidx6); cg.c:417:14
SU(13):   %241:gpr64 = LDRSWui %stack.9.j, 0, debug-location !779 :: (dereferenceable load 4 from %ir.j); cg.c:418:18
SU(12):   %240:gpr64common = LDRXui %stack.7.r.addr, 0, debug-location !778 :: (dereferenceable load 8 from %ir.r.addr); cg.c:418:16
SU(14):   %242:gpr64 = UBFMXri %241:gpr64, 61, 60, debug-location !778; cg.c:418:16
SU(15):   %243:fpr64 = LDRDroX %240:gpr64common, %242:gpr64, 0, 0, debug-location !778 :: (load 8 from %ir.arrayidx8); cg.c:418:16
SU(16):   %244:gpr64common = LDRXui %stack.5.p.addr, 0, debug-location !780 :: (dereferenceable load 8 from %ir.p.addr); cg.c:418:9
SU(17):   STRDroX %243:fpr64, %244:gpr64common, %242:gpr64, 0, 0, debug-location !782 :: (store 8 into %ir.arrayidx10); cg.c:418:14
SU(18):   %245:gpr32common = LDRWui %stack.9.j, 0, debug-location !783 :: (dereferenceable load 4 from %ir.j); cg.c:414:31
SU(19):   %246:gpr32common = nsw ADDWri %245:gpr32common, 1, 0, debug-location !783; cg.c:414:31
SU(20):   STRWui %246:gpr32common, %stack.9.j, 0, debug-location !783 :: (store 4 into %ir.j); cg.c:414:31

********** MI Scheduling **********
conj_grad:%bb.3 for.end
  From: STRWui $wzr, %stack.9.j, 0, debug-location !787 :: (store 4 into %ir.j); cg.c:425:12
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui $wzr, %stack.9.j, 0, debug-location !787 :: (store 4 into %ir.j); cg.c:425:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %25:gpr64common = ADRP target-flags(aarch64-page) @lastcol
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   %27:gpr64common = ADRP target-flags(aarch64-page) @firstcol
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %27:gpr64common = ADRP target-flags(aarch64-page) @firstcol
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %25:gpr64common = ADRP target-flags(aarch64-page) @lastcol
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.9.j, 0, debug-location !787 :: (store 4 into %ir.j); cg.c:425:12
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   STRWui $wzr, %stack.9.j, 0, debug-location !787 :: (store 4 into %ir.j); cg.c:425:12
SU(1):   %25:gpr64common = ADRP target-flags(aarch64-page) @lastcol
SU(2):   %27:gpr64common = ADRP target-flags(aarch64-page) @firstcol

********** MI Scheduling **********
conj_grad:%bb.4 for.cond11
  From: %24:gpr32 = LDRWui %stack.9.j, 0, debug-location !790 :: (dereferenceable load 4 from %ir.j); cg.c:425:17
    To: Bcc 10, %bb.6, implicit killed $nzcv, debug-location !797; cg.c:425:5
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %24:gpr32 = LDRWui %stack.9.j, 0, debug-location !790 :: (dereferenceable load 4 from %ir.j); cg.c:425:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=%24
  Single Issue       : false;
SU(1):   %26:gpr32 = LDRWui %25:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !792 :: (dereferenceable load 4 from @lastcol); cg.c:425:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%26
  Single Issue       : false;
SU(2):   %28:gpr32 = LDRWui %27:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !793 :: (dereferenceable load 4 from @firstcol); cg.c:425:31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%28
  Single Issue       : false;
SU(3):   %29:gpr32common = nsw SUBWrr %26:gpr32, %28:gpr32, debug-location !794; cg.c:425:29
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(2): Data Latency=4 Reg=%28
    SU(1): Data Latency=4 Reg=%26
  Successors:
    SU(4): Data Latency=1 Reg=%29
  Single Issue       : false;
SU(4):   %30:gpr32common = nsw ADDWri %29:gpr32common, 1, 0, debug-location !795; cg.c:425:40
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1 Reg=%29
  Successors:
    SU(5): Data Latency=1 Reg=%30
  Single Issue       : false;
SU(5):   dead $wzr = SUBSWrr %24:gpr32, %30:gpr32common, implicit-def $nzcv, debug-location !797; cg.c:425:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%30
    SU(0): Data Latency=4 Reg=%24
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.6, implicit killed $nzcv, debug-location !797; cg.c:425:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) dead $wzr = SUBSWrr %24:gpr32, %30:gpr32common, implicit-def $nzcv, debug-location !797; cg.c:425:5
  Ready @1c
  BotQ.A TopLatency SU(5) 6c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %30:gpr32common = nsw ADDWri %29:gpr32common, 1, 0, debug-location !795; cg.c:425:40
  Ready @2c
  BotQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %29:gpr32common = nsw SUBWrr %26:gpr32, %28:gpr32, debug-location !794; cg.c:425:29
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 1 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %24:gpr32 = LDRWui %stack.9.j, 0, debug-location !790 :: (dereferenceable load 4 from %ir.j); cg.c:425:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %28:gpr32 = LDRWui %27:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !793 :: (dereferenceable load 4 from @firstcol); cg.c:425:31
  Ready @7c
  BotQ.A BotLatency SU(2) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %26:gpr32 = LDRWui %25:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !792 :: (dereferenceable load 4 from @lastcol); cg.c:425:21
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(1):   %26:gpr32 = LDRWui %25:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !792 :: (dereferenceable load 4 from @lastcol); cg.c:425:21
SU(2):   %28:gpr32 = LDRWui %27:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !793 :: (dereferenceable load 4 from @firstcol); cg.c:425:31
SU(0):   %24:gpr32 = LDRWui %stack.9.j, 0, debug-location !790 :: (dereferenceable load 4 from %ir.j); cg.c:425:17
SU(3):   %29:gpr32common = nsw SUBWrr %26:gpr32, %28:gpr32, debug-location !794; cg.c:425:29
SU(4):   %30:gpr32common = nsw ADDWri %29:gpr32common, 1, 0, debug-location !795; cg.c:425:40
SU(5):   dead $wzr = SUBSWrr %24:gpr32, %30:gpr32common, implicit-def $nzcv, debug-location !797; cg.c:425:5

********** MI Scheduling **********
conj_grad:%bb.5 for.body14
  From: %222:fpr64 = LDRDui %stack.15.rho, 0, debug-location !798 :: (dereferenceable load 8 from %ir.rho); cg.c:426:15
    To: B %bb.4, debug-location !808; cg.c:425:5
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %222:fpr64 = LDRDui %stack.15.rho, 0, debug-location !798 :: (dereferenceable load 8 from %ir.rho); cg.c:426:15
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=%222
    SU(6): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %223:gpr64common = LDRXui %stack.7.r.addr, 0, debug-location !800 :: (dereferenceable load 8 from %ir.r.addr); cg.c:426:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(3): Data Latency=4 Reg=%223
  Single Issue       : false;
SU(2):   %224:gpr64common = LDRSWui %stack.9.j, 0, debug-location !801 :: (dereferenceable load 4 from %ir.j); cg.c:426:23
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(7): Data Latency=4 Reg=%224
    SU(3): Data Latency=4 Reg=%224
    SU(8): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   %226:fpr64 = LDRDroX %223:gpr64common, %224:gpr64common, 0, 1, debug-location !800 :: (load 8 from %ir.arrayidx18); cg.c:426:21
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(2): Data Latency=4 Reg=%224
    SU(1): Data Latency=4 Reg=%223
  Successors:
    SU(4): Data Latency=4 Reg=%226
    SU(8): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   %227:fpr64 = FMULDrr %226:fpr64, %226:fpr64, debug-location !804; cg.c:426:26
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 2
  Predecessors:
    SU(3): Data Latency=4 Reg=%226
  Successors:
    SU(5): Data Latency=1 Reg=%227
  Single Issue       : false;
SU(5):   %228:fpr64 = FADDDrr %222:fpr64, %227:fpr64, debug-location !805; cg.c:426:19
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%227
    SU(0): Data Latency=4 Reg=%222
  Successors:
    SU(6): Data Latency=1 Reg=%228
  Single Issue       : false;
SU(6):   STRDui %228:fpr64, %stack.15.rho, 0, debug-location !806 :: (store 8 into %ir.rho); cg.c:426:13
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%228
    SU(3): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
SU(7):   %229:gpr32common = nsw ADDWri %224.sub_32:gpr64common, 1, 0, debug-location !807; cg.c:425:46
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=%224
  Successors:
    SU(8): Data Latency=1 Reg=%229
  Single Issue       : false;
SU(8):   STRWui %229:gpr32common, %stack.9.j, 0, debug-location !807 :: (store 4 into %ir.j); cg.c:425:46
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=%229
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.4, debug-location !808; cg.c:425:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) STRWui %229:gpr32common, %stack.9.j, 0, debug-location !807 :: (store 4 into %ir.j); cg.c:425:46
  Ready @0c
  BotQ.A TopLatency SU(8) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
BotQ.A RemLatency SU(6) 10c
  BotQ.A RemainingLatency 10 + 1c > CritPath 10
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(6) STRDui %228:fpr64, %stack.15.rho, 0, debug-location !806 :: (store 8 into %ir.rho); cg.c:426:13
  Ready @1c
  BotQ.A TopLatency SU(6) 10c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
BotQ.A RemLatency SU(5) 9c
  BotQ.A RemainingLatency 9 + 2c > CritPath 10
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(5) BOT-PATH                  9 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) %228:fpr64 = FADDDrr %222:fpr64, %227:fpr64, debug-location !805; cg.c:426:19
  Ready @2c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 7 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
BotQ.A RemLatency SU(4) 8c
  BotQ.A RemainingLatency 8 + 3c > CritPath 10
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(4) BOT-PATH                  8 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) %227:fpr64 = FMULDrr %226:fpr64, %226:fpr64, debug-location !804; cg.c:426:26
  Ready @3c
  BotQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 3 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) %229:gpr32common = nsw ADDWri %224.sub_32:gpr64common, 1, 0, debug-location !807; cg.c:425:46
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 3 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %222:fpr64 = LDRDui %stack.15.rho, 0, debug-location !798 :: (dereferenceable load 8 from %ir.rho); cg.c:426:15
  Ready @6c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %226:fpr64 = LDRDroX %223:gpr64common, %224:gpr64common, 0, 1, debug-location !800 :: (load 8 from %ir.arrayidx18); cg.c:426:21
  Ready @7c
  BotQ.A BotLatency SU(3) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  BotQ.A RemainingLatency 0 + 11c > CritPath 10
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %224:gpr64common = LDRSWui %stack.9.j, 0, debug-location !801 :: (dereferenceable load 4 from %ir.j); cg.c:426:23
  Ready @11c
  BotQ.A BotLatency SU(2) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 8
  Executed: 12c
  Critical: 8c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %223:gpr64common = LDRXui %stack.7.r.addr, 0, debug-location !800 :: (dereferenceable load 8 from %ir.r.addr); cg.c:426:21
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 9
  Executed: 13c
  Critical: 9c, 9 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(1):   %223:gpr64common = LDRXui %stack.7.r.addr, 0, debug-location !800 :: (dereferenceable load 8 from %ir.r.addr); cg.c:426:21
SU(2):   %224:gpr64common = LDRSWui %stack.9.j, 0, debug-location !801 :: (dereferenceable load 4 from %ir.j); cg.c:426:23
SU(3):   %226:fpr64 = LDRDroX %223:gpr64common, %224:gpr64common, 0, 1, debug-location !800 :: (load 8 from %ir.arrayidx18); cg.c:426:21
SU(0):   %222:fpr64 = LDRDui %stack.15.rho, 0, debug-location !798 :: (dereferenceable load 8 from %ir.rho); cg.c:426:15
SU(7):   %229:gpr32common = nsw ADDWri %224.sub_32:gpr64common, 1, 0, debug-location !807; cg.c:425:46
SU(4):   %227:fpr64 = FMULDrr %226:fpr64, %226:fpr64, debug-location !804; cg.c:426:26
SU(5):   %228:fpr64 = FADDDrr %222:fpr64, %227:fpr64, debug-location !805; cg.c:426:19
SU(6):   STRDui %228:fpr64, %stack.15.rho, 0, debug-location !806 :: (store 8 into %ir.rho); cg.c:426:13
SU(8):   STRWui %229:gpr32common, %stack.9.j, 0, debug-location !807 :: (store 4 into %ir.j); cg.c:425:46

********** MI Scheduling **********
conj_grad:%bb.6 for.end22
  From: %32:gpr32 = MOVi32imm 1
    To: End RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %32:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%32
  Single Issue       : false;
SU(1):   STRWui %32:gpr32, %stack.11.cgit, 0, debug-location !811 :: (store 4 into %ir.cgit); cg.c:434:15
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%32
  Single Issue       : false;
SU(2):   %96:gpr64common = ADRP target-flags(aarch64-page) @lastrow
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %98:gpr64common = ADRP target-flags(aarch64-page) @firstrow
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %98:gpr64common = ADRP target-flags(aarch64-page) @firstrow
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
BotQ.A RemLatency SU(1) 1c
  BotQ.A RemainingLatency 1 + 1c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) STRWui %32:gpr32, %stack.11.cgit, 0, debug-location !811 :: (store 4 into %ir.cgit); cg.c:434:15
  Ready @1c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %96:gpr64common = ADRP target-flags(aarch64-page) @lastrow
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %32:gpr32 = MOVi32imm 1
  Ready @3c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %32:gpr32 = MOVi32imm 1
SU(2):   %96:gpr64common = ADRP target-flags(aarch64-page) @lastrow
SU(1):   STRWui %32:gpr32, %stack.11.cgit, 0, debug-location !811 :: (store 4 into %ir.cgit); cg.c:434:15
SU(3):   %98:gpr64common = ADRP target-flags(aarch64-page) @firstrow

********** MI Scheduling **********
conj_grad:%bb.7 for.cond23
  From: %33:gpr32 = LDRWui %stack.11.cgit, 0, debug-location !814 :: (dereferenceable load 4 from %ir.cgit); cg.c:434:20
    To: Bcc 12, %bb.27, implicit killed $nzcv, debug-location !818; cg.c:434:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %33:gpr32 = LDRWui %stack.11.cgit, 0, debug-location !814 :: (dereferenceable load 4 from %ir.cgit); cg.c:434:20
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%33
  Single Issue       : false;
SU(1):   %34:gpr32 = LDRWui %stack.12.cgitmax, 0, debug-location !816 :: (dereferenceable load 4 from %ir.cgitmax); cg.c:434:28
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%34
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %33:gpr32, %34:gpr32, implicit-def $nzcv, debug-location !818; cg.c:434:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%34
    SU(0): Data Latency=4 Reg=%33
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.27, implicit killed $nzcv, debug-location !818; cg.c:434:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %33:gpr32, %34:gpr32, implicit-def $nzcv, debug-location !818; cg.c:434:5
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %34:gpr32 = LDRWui %stack.12.cgitmax, 0, debug-location !816 :: (dereferenceable load 4 from %ir.cgitmax); cg.c:434:28
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %33:gpr32 = LDRWui %stack.11.cgit, 0, debug-location !814 :: (dereferenceable load 4 from %ir.cgit); cg.c:434:20
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %33:gpr32 = LDRWui %stack.11.cgit, 0, debug-location !814 :: (dereferenceable load 4 from %ir.cgit); cg.c:434:20
SU(1):   %34:gpr32 = LDRWui %stack.12.cgitmax, 0, debug-location !816 :: (dereferenceable load 4 from %ir.cgitmax); cg.c:434:28
SU(2):   dead $wzr = SUBSWrr %33:gpr32, %34:gpr32, implicit-def $nzcv, debug-location !818; cg.c:434:5

********** MI Scheduling **********
conj_grad:%bb.9 for.cond26
  From: %95:gpr32 = LDRWui %stack.9.j, 0, debug-location !823 :: (dereferenceable load 4 from %ir.j); cg.c:447:21
    To: Bcc 10, %bb.14, implicit killed $nzcv, debug-location !830; cg.c:447:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %95:gpr32 = LDRWui %stack.9.j, 0, debug-location !823 :: (dereferenceable load 4 from %ir.j); cg.c:447:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=%95
  Single Issue       : false;
SU(1):   %97:gpr32 = LDRWui %96:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !825 :: (dereferenceable load 4 from @lastrow); cg.c:447:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%97
  Single Issue       : false;
SU(2):   %99:gpr32 = LDRWui %98:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !826 :: (dereferenceable load 4 from @firstrow); cg.c:447:35
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%99
  Single Issue       : false;
SU(3):   %100:gpr32common = nsw SUBWrr %97:gpr32, %99:gpr32, debug-location !827; cg.c:447:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(2): Data Latency=4 Reg=%99
    SU(1): Data Latency=4 Reg=%97
  Successors:
    SU(4): Data Latency=1 Reg=%100
  Single Issue       : false;
SU(4):   %101:gpr32common = nsw ADDWri %100:gpr32common, 1, 0, debug-location !828; cg.c:447:44
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1 Reg=%100
  Successors:
    SU(5): Data Latency=1 Reg=%101
  Single Issue       : false;
SU(5):   dead $wzr = SUBSWrr %95:gpr32, %101:gpr32common, implicit-def $nzcv, debug-location !830; cg.c:447:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%101
    SU(0): Data Latency=4 Reg=%95
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.14, implicit killed $nzcv, debug-location !830; cg.c:447:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) dead $wzr = SUBSWrr %95:gpr32, %101:gpr32common, implicit-def $nzcv, debug-location !830; cg.c:447:9
  Ready @1c
  BotQ.A TopLatency SU(5) 6c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %101:gpr32common = nsw ADDWri %100:gpr32common, 1, 0, debug-location !828; cg.c:447:44
  Ready @2c
  BotQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %100:gpr32common = nsw SUBWrr %97:gpr32, %99:gpr32, debug-location !827; cg.c:447:33
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 1 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %95:gpr32 = LDRWui %stack.9.j, 0, debug-location !823 :: (dereferenceable load 4 from %ir.j); cg.c:447:21
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %99:gpr32 = LDRWui %98:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !826 :: (dereferenceable load 4 from @firstrow); cg.c:447:35
  Ready @7c
  BotQ.A BotLatency SU(2) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %97:gpr32 = LDRWui %96:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !825 :: (dereferenceable load 4 from @lastrow); cg.c:447:25
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(1):   %97:gpr32 = LDRWui %96:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !825 :: (dereferenceable load 4 from @lastrow); cg.c:447:25
SU(2):   %99:gpr32 = LDRWui %98:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !826 :: (dereferenceable load 4 from @firstrow); cg.c:447:35
SU(0):   %95:gpr32 = LDRWui %stack.9.j, 0, debug-location !823 :: (dereferenceable load 4 from %ir.j); cg.c:447:21
SU(3):   %100:gpr32common = nsw SUBWrr %97:gpr32, %99:gpr32, debug-location !827; cg.c:447:33
SU(4):   %101:gpr32common = nsw ADDWri %100:gpr32common, 1, 0, debug-location !828; cg.c:447:44
SU(5):   dead $wzr = SUBSWrr %95:gpr32, %101:gpr32common, implicit-def $nzcv, debug-location !830; cg.c:447:9

********** MI Scheduling **********
conj_grad:%bb.10 for.body30
  From: STRXui $xzr, %stack.14.sum, 0, debug-location !831 :: (store 8 into %ir.sum); cg.c:448:17
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRXui $xzr, %stack.14.sum, 0, debug-location !831 :: (store 8 into %ir.sum); cg.c:448:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Ord  Latency=1 Memory
  Single Issue       : false;
SU(1):   %198:gpr64common = LDRXui %stack.1.rowstr.addr, 0, debug-location !833 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%198
  Single Issue       : false;
SU(2):   %199:gpr64 = LDRSWui %stack.9.j, 0, debug-location !835 :: (dereferenceable load 4 from %ir.j); cg.c:449:29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%199
  Single Issue       : false;
SU(3):   %200:gpr32 = LDRWroX %198:gpr64common, %199:gpr64, 0, 1, debug-location !833 :: (load 4 from %ir.arrayidx32); cg.c:449:22
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%199
    SU(1): Data Latency=4 Reg=%198
    SU(0): Ord  Latency=1 Memory
  Successors:
    SU(4): Data Latency=4 Reg=%200
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   STRWui %200:gpr32, %stack.10.k, 0, debug-location !836 :: (store 4 into %ir.k); cg.c:449:20
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(3): Data Latency=4 Reg=%200
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) STRWui %200:gpr32, %stack.10.k, 0, debug-location !836 :: (store 4 into %ir.k); cg.c:449:20
  Ready @0c
  BotQ.A TopLatency SU(4) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %200:gpr32 = LDRWroX %198:gpr64common, %199:gpr64, 0, 1, debug-location !833 :: (load 4 from %ir.arrayidx32); cg.c:449:22
  Ready @4c
  BotQ.A BotLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRXui $xzr, %stack.14.sum, 0, debug-location !831 :: (store 8 into %ir.sum); cg.c:448:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 8 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %199:gpr64 = LDRSWui %stack.9.j, 0, debug-location !835 :: (dereferenceable load 4 from %ir.j); cg.c:449:29
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 4
  Executed: 9c
  Critical: 4c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %198:gpr64common = LDRXui %stack.1.rowstr.addr, 0, debug-location !833 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:22
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 5
  Executed: 10c
  Critical: 5c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(1):   %198:gpr64common = LDRXui %stack.1.rowstr.addr, 0, debug-location !833 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:22
SU(2):   %199:gpr64 = LDRSWui %stack.9.j, 0, debug-location !835 :: (dereferenceable load 4 from %ir.j); cg.c:449:29
SU(0):   STRXui $xzr, %stack.14.sum, 0, debug-location !831 :: (store 8 into %ir.sum); cg.c:448:17
SU(3):   %200:gpr32 = LDRWroX %198:gpr64common, %199:gpr64, 0, 1, debug-location !833 :: (load 4 from %ir.arrayidx32); cg.c:449:22
SU(4):   STRWui %200:gpr32, %stack.10.k, 0, debug-location !836 :: (store 4 into %ir.k); cg.c:449:20

********** MI Scheduling **********
conj_grad:%bb.11 for.cond33
  From: %201:gpr32 = LDRWui %stack.10.k, 0, debug-location !838 :: (dereferenceable load 4 from %ir.k); cg.c:449:33
    To: Bcc 10, %bb.13, implicit killed $nzcv, debug-location !845; cg.c:449:13
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %201:gpr32 = LDRWui %stack.10.k, 0, debug-location !838 :: (dereferenceable load 4 from %ir.k); cg.c:449:33
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(6): Data Latency=4 Reg=%201
  Single Issue       : false;
SU(1):   %202:gpr64 = LDRXui %stack.1.rowstr.addr, 0, debug-location !840 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:37
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(3): Data Latency=4 Reg=%202
  Single Issue       : false;
SU(2):   %203:gpr64 = LDRSWui %stack.9.j, 0, debug-location !841 :: (dereferenceable load 4 from %ir.j); cg.c:449:44
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(3): Data Latency=4 Reg=%203
  Single Issue       : false;
SU(3):   %204:gpr64common = ADDXrs %202:gpr64, %203:gpr64, 2, debug-location !840; cg.c:449:37
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(2): Data Latency=4 Reg=%203
    SU(1): Data Latency=4 Reg=%202
  Successors:
    SU(4): Data Latency=1 Reg=%204
  Single Issue       : false;
SU(4):   %205:gpr32 = LDRWui %204:gpr64common, 1, debug-location !840 :: (load 4 from %ir.arrayidx36); cg.c:449:37
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(3): Data Latency=1 Reg=%204
  Successors:
    SU(6): Data Latency=4 Reg=%205
  Single Issue       : false;
SU(5):   %0:fpr64 = LDRDui %stack.14.sum, 0, debug-location !844 :: (dereferenceable load 8 from %ir.sum); cg.c:0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(6):   dead $wzr = SUBSWrr %201:gpr32, %205:gpr32, implicit-def $nzcv, debug-location !845; cg.c:449:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(4): Data Latency=4 Reg=%205
    SU(0): Data Latency=4 Reg=%201
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.13, implicit killed $nzcv, debug-location !845; cg.c:449:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=1 Artificial
    SU(5): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 5 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) dead $wzr = SUBSWrr %201:gpr32, %205:gpr32, implicit-def $nzcv, debug-location !845; cg.c:449:13
  Ready @1c
  BotQ.A TopLatency SU(6) 9c
  BotQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 0 4 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %0:fpr64 = LDRDui %stack.14.sum, 0, debug-location !844 :: (dereferenceable load 8 from %ir.sum); cg.c:0
  Ready @3c
  BotQ.A BotLatency SU(5) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 2
  Executed: 4c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
BotQ.A RemLatency SU(4) 5c
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %205:gpr32 = LDRWui %204:gpr64common, 1, debug-location !840 :: (load 4 from %ir.arrayidx36); cg.c:449:37
  Ready @5c
  BotQ.A BotLatency SU(4) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
BotQ.A RemLatency SU(3) 4c
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %204:gpr64common = ADDXrs %202:gpr64, %203:gpr64, 2, debug-location !840; cg.c:449:37
  Ready @6c
  BotQ.A BotLatency SU(3) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %201:gpr32 = LDRWui %stack.10.k, 0, debug-location !838 :: (dereferenceable load 4 from %ir.k); cg.c:449:33
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %203:gpr64 = LDRSWui %stack.9.j, 0, debug-location !841 :: (dereferenceable load 4 from %ir.j); cg.c:449:44
  Ready @10c
  BotQ.A BotLatency SU(2) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 6
  Executed: 11c
  Critical: 6c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %202:gpr64 = LDRXui %stack.1.rowstr.addr, 0, debug-location !840 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:37
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 7
  Executed: 12c
  Critical: 7c, 7 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(1):   %202:gpr64 = LDRXui %stack.1.rowstr.addr, 0, debug-location !840 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:37
SU(2):   %203:gpr64 = LDRSWui %stack.9.j, 0, debug-location !841 :: (dereferenceable load 4 from %ir.j); cg.c:449:44
SU(0):   %201:gpr32 = LDRWui %stack.10.k, 0, debug-location !838 :: (dereferenceable load 4 from %ir.k); cg.c:449:33
SU(3):   %204:gpr64common = ADDXrs %202:gpr64, %203:gpr64, 2, debug-location !840; cg.c:449:37
SU(4):   %205:gpr32 = LDRWui %204:gpr64common, 1, debug-location !840 :: (load 4 from %ir.arrayidx36); cg.c:449:37
SU(5):   %0:fpr64 = LDRDui %stack.14.sum, 0, debug-location !844 :: (dereferenceable load 8 from %ir.sum); cg.c:0
SU(6):   dead $wzr = SUBSWrr %201:gpr32, %205:gpr32, implicit-def $nzcv, debug-location !845; cg.c:449:13

********** MI Scheduling **********
conj_grad:%bb.12 for.body38
  From: %211:gpr64common = LDRXui %stack.4.a.addr, 0, debug-location !846 :: (dereferenceable load 8 from %ir.a.addr); cg.c:450:29
    To: B %bb.11, debug-location !856; cg.c:449:13
 RegionInstrs: 12
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %211:gpr64common = LDRXui %stack.4.a.addr, 0, debug-location !846 :: (dereferenceable load 8 from %ir.a.addr); cg.c:450:29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(2): Data Latency=4 Reg=%211
  Single Issue       : false;
SU(1):   %212:gpr64common = LDRSWui %stack.10.k, 0, debug-location !848 :: (dereferenceable load 4 from %ir.k); cg.c:450:31
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(10): Data Latency=4 Reg=%212
    SU(5): Data Latency=4 Reg=%212
    SU(2): Data Latency=4 Reg=%212
    SU(11): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %214:fpr64 = LDRDroX %211:gpr64common, %212:gpr64common, 0, 1, debug-location !846 :: (load 8 from %ir.arrayidx40); cg.c:450:29
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(1): Data Latency=4 Reg=%212
    SU(0): Data Latency=4 Reg=%211
  Successors:
    SU(7): Data Latency=4 Reg=%214
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   %215:gpr64common = LDRXui %stack.5.p.addr, 0, debug-location !849 :: (dereferenceable load 8 from %ir.p.addr); cg.c:450:36
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(6): Data Latency=4 Reg=%215
  Single Issue       : false;
SU(4):   %216:gpr64common = LDRXui %stack.0.colidx.addr, 0, debug-location !850 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:450:38
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(5): Data Latency=4 Reg=%216
  Single Issue       : false;
SU(5):   %217:gpr64 = LDRSWroX %216:gpr64common, %212:gpr64common, 0, 1, debug-location !850 :: (load 4 from %ir.arrayidx42); cg.c:450:38
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 10
  Predecessors:
    SU(4): Data Latency=4 Reg=%216
    SU(1): Data Latency=4 Reg=%212
  Successors:
    SU(6): Data Latency=4 Reg=%217
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Single Issue       : false;
SU(6):   %218:fpr64 = LDRDroX %215:gpr64common, %217:gpr64, 0, 1, debug-location !849 :: (load 8 from %ir.arrayidx44); cg.c:450:36
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 6
  Predecessors:
    SU(5): Data Latency=4 Reg=%217
    SU(3): Data Latency=4 Reg=%215
  Successors:
    SU(7): Data Latency=4 Reg=%218
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Single Issue       : false;
SU(7):   %219:fpr64 = FMULDrr %214:fpr64, %218:fpr64, debug-location !852; cg.c:450:34
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 2
  Predecessors:
    SU(6): Data Latency=4 Reg=%218
    SU(2): Data Latency=4 Reg=%214
  Successors:
    SU(8): Data Latency=1 Reg=%219
  Single Issue       : false;
SU(8):   %220:fpr64 = FADDDrr %0:fpr64, %219:fpr64, debug-location !853; cg.c:450:27
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 1
  Predecessors:
    SU(7): Data Latency=1 Reg=%219
  Successors:
    SU(9): Data Latency=1 Reg=%220
  Single Issue       : false;
SU(9):   STRDui %220:fpr64, %stack.14.sum, 0, debug-location !854 :: (store 8 into %ir.sum); cg.c:450:21
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%220
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(10):   %221:gpr32common = nsw ADDWri %212.sub_32:gpr64common, 1, 0, debug-location !855; cg.c:449:53
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%212
  Successors:
    SU(11): Data Latency=1 Reg=%221
  Single Issue       : false;
SU(11):   STRWui %221:gpr32common, %stack.10.k, 0, debug-location !855 :: (store 4 into %ir.k); cg.c:449:53
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%221
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.11, debug-location !856; cg.c:449:13
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 14
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 9 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 
Picking from Bot:
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) STRWui %221:gpr32common, %stack.10.k, 0, debug-location !855 :: (store 4 into %ir.k); cg.c:449:53
  Ready @0c
  BotQ.A TopLatency SU(11) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 10 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 
BotQ.A RemLatency SU(9) 14c
  BotQ.A RemainingLatency 14 + 1c > CritPath 14
Picking from Bot:
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(9) STRDui %220:fpr64, %stack.14.sum, 0, debug-location !854 :: (store 8 into %ir.sum); cg.c:450:21
  Ready @1c
  BotQ.A TopLatency SU(9) 14c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 8 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 
BotQ.A RemLatency SU(8) 13c
  BotQ.A RemainingLatency 13 + 2c > CritPath 14
Picking from Bot:
  Cand SU(10) ORDER                              
  Cand SU(8) BOT-PATH                  13 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(8) %220:fpr64 = FADDDrr %0:fpr64, %219:fpr64, debug-location !853; cg.c:450:27
  Ready @2c
  BotQ.A BotLatency SU(8) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 
BotQ.A RemLatency SU(7) 12c
  BotQ.A RemainingLatency 12 + 3c > CritPath 14
Picking from Bot:
  Cand SU(10) ORDER                              
  Cand SU(7) BOT-PATH                  12 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(7) %219:fpr64 = FMULDrr %214:fpr64, %218:fpr64, debug-location !852; cg.c:450:34
  Ready @3c
  BotQ.A BotLatency SU(7) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 2 
Queue BotQ.A: 10 
Pick Bot ONLY1     
Scheduling SU(10) %221:gpr32common = nsw ADDWri %212.sub_32:gpr64common, 1, 0, debug-location !855; cg.c:449:53
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 6 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 
BotQ.A RemLatency SU(6) 8c
  BotQ.A RemainingLatency 8 + 7c > CritPath 14
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(6) %218:fpr64 = LDRDroX %215:gpr64common, %217:gpr64, 0, 1, debug-location !849 :: (load 8 from %ir.arrayidx44); cg.c:450:36
  Ready @7c
  BotQ.A BotLatency SU(6) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 3 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %214:fpr64 = LDRDroX %211:gpr64common, %212:gpr64common, 0, 1, debug-location !846 :: (load 8 from %ir.arrayidx40); cg.c:450:29
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 0 
Queue BotQ.A: 5 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 
BotQ.A RemLatency SU(5) 4c
  BotQ.A RemainingLatency 4 + 11c > CritPath 14
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) %217:gpr64 = LDRSWroX %216:gpr64common, %212:gpr64common, 0, 1, debug-location !850 :: (load 4 from %ir.arrayidx42); cg.c:450:38
  Ready @11c
  BotQ.A BotLatency SU(5) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 8
  Executed: 12c
  Critical: 8c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 4 
Queue BotQ.A: 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 
  BotQ.A RemainingLatency 3 + 12c > CritPath 14
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %215:gpr64common = LDRXui %stack.5.p.addr, 0, debug-location !849 :: (dereferenceable load 8 from %ir.p.addr); cg.c:450:36
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 9
  Executed: 13c
  Critical: 9c, 9 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 4 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %211:gpr64common = LDRXui %stack.4.a.addr, 0, debug-location !846 :: (dereferenceable load 8 from %ir.a.addr); cg.c:450:29
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 10
  Executed: 14c
  Critical: 10c, 10 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 15 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 4 
Queue TopQ.P: 
Queue TopQ.A: 4 1 
  BotQ.A RemainingLatency 0 + 15c > CritPath 14
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(4) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %216:gpr64common = LDRXui %stack.0.colidx.addr, 0, debug-location !850 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:450:38
  Ready @15c
  BotQ.A BotLatency SU(4) 14c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 11
  Executed: 16c
  Critical: 11c, 11 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %212:gpr64common = LDRSWui %stack.10.k, 0, debug-location !848 :: (dereferenceable load 4 from %ir.k); cg.c:450:31
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 12
  Executed: 17c
  Critical: 12c, 12 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(1):   %212:gpr64common = LDRSWui %stack.10.k, 0, debug-location !848 :: (dereferenceable load 4 from %ir.k); cg.c:450:31
SU(4):   %216:gpr64common = LDRXui %stack.0.colidx.addr, 0, debug-location !850 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:450:38
SU(0):   %211:gpr64common = LDRXui %stack.4.a.addr, 0, debug-location !846 :: (dereferenceable load 8 from %ir.a.addr); cg.c:450:29
SU(3):   %215:gpr64common = LDRXui %stack.5.p.addr, 0, debug-location !849 :: (dereferenceable load 8 from %ir.p.addr); cg.c:450:36
SU(5):   %217:gpr64 = LDRSWroX %216:gpr64common, %212:gpr64common, 0, 1, debug-location !850 :: (load 4 from %ir.arrayidx42); cg.c:450:38
SU(2):   %214:fpr64 = LDRDroX %211:gpr64common, %212:gpr64common, 0, 1, debug-location !846 :: (load 8 from %ir.arrayidx40); cg.c:450:29
SU(6):   %218:fpr64 = LDRDroX %215:gpr64common, %217:gpr64, 0, 1, debug-location !849 :: (load 8 from %ir.arrayidx44); cg.c:450:36
SU(10):   %221:gpr32common = nsw ADDWri %212.sub_32:gpr64common, 1, 0, debug-location !855; cg.c:449:53
SU(7):   %219:fpr64 = FMULDrr %214:fpr64, %218:fpr64, debug-location !852; cg.c:450:34
SU(8):   %220:fpr64 = FADDDrr %0:fpr64, %219:fpr64, debug-location !853; cg.c:450:27
SU(9):   STRDui %220:fpr64, %stack.14.sum, 0, debug-location !854 :: (store 8 into %ir.sum); cg.c:450:21
SU(11):   STRWui %221:gpr32common, %stack.10.k, 0, debug-location !855 :: (store 4 into %ir.k); cg.c:449:53

********** MI Scheduling **********
conj_grad:%bb.13 for.end49
  From: %207:gpr64common = LDRXui %stack.6.q.addr, 0, debug-location !859 :: (dereferenceable load 8 from %ir.q.addr); cg.c:452:13
    To: B %bb.9, debug-location !863; cg.c:447:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %207:gpr64common = LDRXui %stack.6.q.addr, 0, debug-location !859 :: (dereferenceable load 8 from %ir.q.addr); cg.c:452:13
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(2): Data Latency=4 Reg=%207
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %208:gpr64 = LDRSWui %stack.9.j, 0, debug-location !860 :: (dereferenceable load 4 from %ir.j); cg.c:452:15
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(2): Data Latency=4 Reg=%208
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   STRDroX %0:fpr64, %207:gpr64common, %208:gpr64, 0, 1, debug-location !861 :: (store 8 into %ir.arrayidx51); cg.c:452:18
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(1): Data Latency=4 Reg=%208
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%207
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=1 Memory
  Single Issue       : false;
SU(3):   %209:gpr32common = LDRWui %stack.9.j, 0, debug-location !862 :: (dereferenceable load 4 from %ir.j); cg.c:447:50
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(4): Data Latency=4 Reg=%209
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   %210:gpr32common = nsw ADDWri %209:gpr32common, 1, 0, debug-location !862; cg.c:447:50
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%209
  Successors:
    SU(5): Data Latency=1 Reg=%210
  Single Issue       : false;
SU(5):   STRWui %210:gpr32common, %stack.9.j, 0, debug-location !862 :: (store 4 into %ir.j); cg.c:447:50
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%210
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.9, debug-location !863; cg.c:447:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) STRWui %210:gpr32common, %stack.9.j, 0, debug-location !862 :: (store 4 into %ir.j); cg.c:447:50
  Ready @0c
  BotQ.A TopLatency SU(5) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %210:gpr32common = nsw ADDWri %209:gpr32common, 1, 0, debug-location !862; cg.c:447:50
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %209:gpr32common = LDRWui %stack.9.j, 0, debug-location !862 :: (dereferenceable load 4 from %ir.j); cg.c:447:50
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRDroX %0:fpr64, %207:gpr64common, %208:gpr64, 0, 1, debug-location !861 :: (store 8 into %ir.arrayidx51); cg.c:452:18
  Ready @6c
  BotQ.A BotLatency SU(2) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %208:gpr64 = LDRSWui %stack.9.j, 0, debug-location !860 :: (dereferenceable load 4 from %ir.j); cg.c:452:15
  Ready @10c
  BotQ.A BotLatency SU(1) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %207:gpr64common = LDRXui %stack.6.q.addr, 0, debug-location !859 :: (dereferenceable load 8 from %ir.q.addr); cg.c:452:13
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   %207:gpr64common = LDRXui %stack.6.q.addr, 0, debug-location !859 :: (dereferenceable load 8 from %ir.q.addr); cg.c:452:13
SU(1):   %208:gpr64 = LDRSWui %stack.9.j, 0, debug-location !860 :: (dereferenceable load 4 from %ir.j); cg.c:452:15
SU(2):   STRDroX %0:fpr64, %207:gpr64common, %208:gpr64, 0, 1, debug-location !861 :: (store 8 into %ir.arrayidx51); cg.c:452:18
SU(3):   %209:gpr32common = LDRWui %stack.9.j, 0, debug-location !862 :: (dereferenceable load 4 from %ir.j); cg.c:447:50
SU(4):   %210:gpr32common = nsw ADDWri %209:gpr32common, 1, 0, debug-location !862; cg.c:447:50
SU(5):   STRWui %210:gpr32common, %stack.9.j, 0, debug-location !862 :: (store 4 into %ir.j); cg.c:447:50

********** MI Scheduling **********
conj_grad:%bb.14 for.end54
  From: STRXui $xzr, %stack.13.d, 0, debug-location !866 :: (store 8 into %ir.d); cg.c:496:11
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRXui $xzr, %stack.13.d, 0, debug-location !866 :: (store 8 into %ir.d); cg.c:496:11
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   STRWui $wzr, %stack.9.j, 0, debug-location !867 :: (store 4 into %ir.j); cg.c:497:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) STRWui $wzr, %stack.9.j, 0, debug-location !867 :: (store 4 into %ir.j); cg.c:497:16
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRXui $xzr, %stack.13.d, 0, debug-location !866 :: (store 8 into %ir.d); cg.c:496:11
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   STRXui $xzr, %stack.13.d, 0, debug-location !866 :: (store 8 into %ir.d); cg.c:496:11
SU(1):   STRWui $wzr, %stack.9.j, 0, debug-location !867 :: (store 4 into %ir.j); cg.c:497:16

********** MI Scheduling **********
conj_grad:%bb.15 for.cond55
  From: %105:gpr32 = LDRWui %stack.9.j, 0, debug-location !870 :: (dereferenceable load 4 from %ir.j); cg.c:497:21
    To: Bcc 10, %bb.17, implicit killed $nzcv, debug-location !877; cg.c:497:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %105:gpr32 = LDRWui %stack.9.j, 0, debug-location !870 :: (dereferenceable load 4 from %ir.j); cg.c:497:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=%105
  Single Issue       : false;
SU(1):   %107:gpr32 = LDRWui %25:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !872 :: (dereferenceable load 4 from @lastcol); cg.c:497:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%107
  Single Issue       : false;
SU(2):   %109:gpr32 = LDRWui %27:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !873 :: (dereferenceable load 4 from @firstcol); cg.c:497:35
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%109
  Single Issue       : false;
SU(3):   %110:gpr32common = nsw SUBWrr %107:gpr32, %109:gpr32, debug-location !874; cg.c:497:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(2): Data Latency=4 Reg=%109
    SU(1): Data Latency=4 Reg=%107
  Successors:
    SU(4): Data Latency=1 Reg=%110
  Single Issue       : false;
SU(4):   %111:gpr32common = nsw ADDWri %110:gpr32common, 1, 0, debug-location !875; cg.c:497:44
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1 Reg=%110
  Successors:
    SU(5): Data Latency=1 Reg=%111
  Single Issue       : false;
SU(5):   dead $wzr = SUBSWrr %105:gpr32, %111:gpr32common, implicit-def $nzcv, debug-location !877; cg.c:497:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%111
    SU(0): Data Latency=4 Reg=%105
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.17, implicit killed $nzcv, debug-location !877; cg.c:497:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) dead $wzr = SUBSWrr %105:gpr32, %111:gpr32common, implicit-def $nzcv, debug-location !877; cg.c:497:9
  Ready @1c
  BotQ.A TopLatency SU(5) 6c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %111:gpr32common = nsw ADDWri %110:gpr32common, 1, 0, debug-location !875; cg.c:497:44
  Ready @2c
  BotQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %110:gpr32common = nsw SUBWrr %107:gpr32, %109:gpr32, debug-location !874; cg.c:497:33
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 1 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %105:gpr32 = LDRWui %stack.9.j, 0, debug-location !870 :: (dereferenceable load 4 from %ir.j); cg.c:497:21
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %109:gpr32 = LDRWui %27:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !873 :: (dereferenceable load 4 from @firstcol); cg.c:497:35
  Ready @7c
  BotQ.A BotLatency SU(2) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %107:gpr32 = LDRWui %25:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !872 :: (dereferenceable load 4 from @lastcol); cg.c:497:25
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.15 ***
SU(1):   %107:gpr32 = LDRWui %25:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !872 :: (dereferenceable load 4 from @lastcol); cg.c:497:25
SU(2):   %109:gpr32 = LDRWui %27:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !873 :: (dereferenceable load 4 from @firstcol); cg.c:497:35
SU(0):   %105:gpr32 = LDRWui %stack.9.j, 0, debug-location !870 :: (dereferenceable load 4 from %ir.j); cg.c:497:21
SU(3):   %110:gpr32common = nsw SUBWrr %107:gpr32, %109:gpr32, debug-location !874; cg.c:497:33
SU(4):   %111:gpr32common = nsw ADDWri %110:gpr32common, 1, 0, debug-location !875; cg.c:497:44
SU(5):   dead $wzr = SUBSWrr %105:gpr32, %111:gpr32common, implicit-def $nzcv, debug-location !877; cg.c:497:9

********** MI Scheduling **********
conj_grad:%bb.16 for.body59
  From: %186:fpr64 = LDRDui %stack.13.d, 0, debug-location !878 :: (dereferenceable load 8 from %ir.d); cg.c:498:17
    To: B %bb.15, debug-location !888; cg.c:497:9
 RegionInstrs: 12
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %186:fpr64 = LDRDui %stack.13.d, 0, debug-location !878 :: (dereferenceable load 8 from %ir.d); cg.c:498:17
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(8): Data Latency=4 Reg=%186
    SU(9): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %187:gpr64common = LDRXui %stack.5.p.addr, 0, debug-location !880 :: (dereferenceable load 8 from %ir.p.addr); cg.c:498:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(4): Data Latency=4 Reg=%187
  Single Issue       : false;
SU(2):   %188:gpr64common = LDRSWui %stack.9.j, 0, debug-location !881 :: (dereferenceable load 4 from %ir.j); cg.c:498:23
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(10): Data Latency=4 Reg=%188
    SU(3): Data Latency=4 Reg=%188
    SU(11): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   %190:gpr64 = UBFMXri %188:gpr64common, 61, 60, debug-location !880; cg.c:498:21
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(2): Data Latency=4 Reg=%188
  Successors:
    SU(6): Data Latency=1 Reg=%190
    SU(4): Data Latency=1 Reg=%190
  Single Issue       : false;
SU(4):   %191:fpr64 = LDRDroX %187:gpr64common, %190:gpr64, 0, 0, debug-location !880 :: (load 8 from %ir.arrayidx61); cg.c:498:21
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(3): Data Latency=1 Reg=%190
    SU(1): Data Latency=4 Reg=%187
  Successors:
    SU(7): Data Latency=4 Reg=%191
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Single Issue       : false;
SU(5):   %192:gpr64common = LDRXui %stack.6.q.addr, 0, debug-location !882 :: (dereferenceable load 8 from %ir.q.addr); cg.c:498:28
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(6): Data Latency=4 Reg=%192
  Single Issue       : false;
SU(6):   %193:fpr64 = LDRDroX %192:gpr64common, %190:gpr64, 0, 0, debug-location !882 :: (load 8 from %ir.arrayidx63); cg.c:498:28
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(3): Data Latency=1 Reg=%190
    SU(5): Data Latency=4 Reg=%192
  Successors:
    SU(7): Data Latency=4 Reg=%193
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Single Issue       : false;
SU(7):   %194:fpr64 = FMULDrr %191:fpr64, %193:fpr64, debug-location !884; cg.c:498:26
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 2
  Predecessors:
    SU(6): Data Latency=4 Reg=%193
    SU(4): Data Latency=4 Reg=%191
  Successors:
    SU(8): Data Latency=1 Reg=%194
  Single Issue       : false;
SU(8):   %195:fpr64 = FADDDrr %186:fpr64, %194:fpr64, debug-location !885; cg.c:498:19
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(7): Data Latency=1 Reg=%194
    SU(0): Data Latency=4 Reg=%186
  Successors:
    SU(9): Data Latency=1 Reg=%195
  Single Issue       : false;
SU(9):   STRDui %195:fpr64, %stack.13.d, 0, debug-location !886 :: (store 8 into %ir.d); cg.c:498:15
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%195
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
SU(10):   %196:gpr32common = nsw ADDWri %188.sub_32:gpr64common, 1, 0, debug-location !887; cg.c:497:50
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=%188
  Successors:
    SU(11): Data Latency=1 Reg=%196
  Single Issue       : false;
SU(11):   STRWui %196:gpr32common, %stack.9.j, 0, debug-location !887 :: (store 4 into %ir.j); cg.c:497:50
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%196
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.15, debug-location !888; cg.c:497:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 11
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 9 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 5 
Picking from Bot:
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) STRWui %196:gpr32common, %stack.9.j, 0, debug-location !887 :: (store 4 into %ir.j); cg.c:497:50
  Ready @0c
  BotQ.A TopLatency SU(11) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 10 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 5 
BotQ.A RemLatency SU(9) 11c
  BotQ.A RemainingLatency 11 + 1c > CritPath 11
Picking from Bot:
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(9) STRDui %195:fpr64, %stack.13.d, 0, debug-location !886 :: (store 8 into %ir.d); cg.c:498:15
  Ready @1c
  BotQ.A TopLatency SU(9) 11c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 8 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 5 
BotQ.A RemLatency SU(8) 10c
  BotQ.A RemainingLatency 10 + 2c > CritPath 11
Picking from Bot:
  Cand SU(10) ORDER                              
  Cand SU(8) BOT-PATH                  10 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(8) %195:fpr64 = FADDDrr %186:fpr64, %194:fpr64, debug-location !885; cg.c:498:19
  Ready @2c
  BotQ.A BotLatency SU(8) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 10 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 5 
BotQ.A RemLatency SU(7) 9c
  BotQ.A RemainingLatency 9 + 3c > CritPath 11
Picking from Bot:
  Cand SU(10) ORDER                              
  Cand SU(7) BOT-PATH                  9 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(7) %194:fpr64 = FMULDrr %191:fpr64, %193:fpr64, debug-location !884; cg.c:498:26
  Ready @3c
  BotQ.A BotLatency SU(7) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 6 4 
Queue BotQ.A: 10 
Pick Bot ONLY1     
Scheduling SU(10) %196:gpr32common = nsw ADDWri %188.sub_32:gpr64common, 1, 0, debug-location !887; cg.c:497:50
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 4 6 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %186:fpr64 = LDRDui %stack.13.d, 0, debug-location !878 :: (dereferenceable load 8 from %ir.d); cg.c:498:17
  Ready @6c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 6 
Queue TopQ.P: 
Queue TopQ.A: 5 1 2 
BotQ.A RemLatency SU(4) 5c
  BotQ.A RemainingLatency 5 + 7c > CritPath 11
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(5) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %193:fpr64 = LDRDroX %192:gpr64common, %190:gpr64, 0, 0, debug-location !882 :: (load 8 from %ir.arrayidx63); cg.c:498:28
  Ready @7c
  BotQ.A BotLatency SU(6) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %191:fpr64 = LDRDroX %187:gpr64common, %190:gpr64, 0, 0, debug-location !880 :: (load 8 from %ir.arrayidx61); cg.c:498:21
  Ready @8c
  BotQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 8
  Executed: 9c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 1 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %190:gpr64 = UBFMXri %188:gpr64common, 61, 60, debug-location !880; cg.c:498:21
  Ready @9c
  BotQ.A BotLatency SU(3) 7c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 9
  Executed: 10c
  Critical: 9c, 9 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 2 1 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %192:gpr64common = LDRXui %stack.6.q.addr, 0, debug-location !882 :: (dereferenceable load 8 from %ir.q.addr); cg.c:498:28
  Ready @11c
  BotQ.A BotLatency SU(5) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 10
  Executed: 12c
  Critical: 10c, 10 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %187:gpr64common = LDRXui %stack.5.p.addr, 0, debug-location !880 :: (dereferenceable load 8 from %ir.p.addr); cg.c:498:21
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 11
  Executed: 13c
  Critical: 11c, 11 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %188:gpr64common = LDRSWui %stack.9.j, 0, debug-location !881 :: (dereferenceable load 4 from %ir.j); cg.c:498:23
  Ready @13c
  BotQ.A BotLatency SU(2) 11c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 12
  Executed: 14c
  Critical: 12c, 12 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.16 ***
SU(2):   %188:gpr64common = LDRSWui %stack.9.j, 0, debug-location !881 :: (dereferenceable load 4 from %ir.j); cg.c:498:23
SU(1):   %187:gpr64common = LDRXui %stack.5.p.addr, 0, debug-location !880 :: (dereferenceable load 8 from %ir.p.addr); cg.c:498:21
SU(5):   %192:gpr64common = LDRXui %stack.6.q.addr, 0, debug-location !882 :: (dereferenceable load 8 from %ir.q.addr); cg.c:498:28
SU(3):   %190:gpr64 = UBFMXri %188:gpr64common, 61, 60, debug-location !880; cg.c:498:21
SU(4):   %191:fpr64 = LDRDroX %187:gpr64common, %190:gpr64, 0, 0, debug-location !880 :: (load 8 from %ir.arrayidx61); cg.c:498:21
SU(6):   %193:fpr64 = LDRDroX %192:gpr64common, %190:gpr64, 0, 0, debug-location !882 :: (load 8 from %ir.arrayidx63); cg.c:498:28
SU(0):   %186:fpr64 = LDRDui %stack.13.d, 0, debug-location !878 :: (dereferenceable load 8 from %ir.d); cg.c:498:17
SU(10):   %196:gpr32common = nsw ADDWri %188.sub_32:gpr64common, 1, 0, debug-location !887; cg.c:497:50
SU(7):   %194:fpr64 = FMULDrr %191:fpr64, %193:fpr64, debug-location !884; cg.c:498:26
SU(8):   %195:fpr64 = FADDDrr %186:fpr64, %194:fpr64, debug-location !885; cg.c:498:19
SU(9):   STRDui %195:fpr64, %stack.13.d, 0, debug-location !886 :: (store 8 into %ir.d); cg.c:498:15
SU(11):   STRWui %196:gpr32common, %stack.9.j, 0, debug-location !887 :: (store 4 into %ir.j); cg.c:497:50

********** MI Scheduling **********
conj_grad:%bb.17 for.end68
  From: %113:fpr64 = LDRDui %stack.15.rho, 0, debug-location !891 :: (dereferenceable load 8 from %ir.rho); cg.c:504:17
    To: End RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %113:fpr64 = LDRDui %stack.15.rho, 0, debug-location !891 :: (dereferenceable load 8 from %ir.rho); cg.c:504:17
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=%113
    SU(2): Data Latency=4 Reg=%113
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %114:fpr64 = LDRDui %stack.13.d, 0, debug-location !892 :: (dereferenceable load 8 from %ir.d); cg.c:504:23
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%114
  Single Issue       : false;
SU(2):   %115:fpr64 = FDIVDrr %113:fpr64, %114:fpr64, debug-location !893; cg.c:504:21
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%114
    SU(0): Data Latency=4 Reg=%113
  Successors:
    SU(3): Data Latency=1 Reg=%115
  Single Issue       : false;
SU(3):   STRDui %115:fpr64, %stack.17.alpha, 0, debug-location !894 :: (store 8 into %ir.alpha); cg.c:504:15
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%115
  Single Issue       : false;
SU(4):   STRDui %113:fpr64, %stack.16.rho0, 0, debug-location !896 :: (store 8 into %ir.rho0); cg.c:509:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%113
  Single Issue       : false;
SU(5):   STRXui $xzr, %stack.15.rho, 0, debug-location !897 :: (store 8 into %ir.rho); cg.c:515:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
SU(6):   STRWui $wzr, %stack.9.j, 0, debug-location !898 :: (store 4 into %ir.j); cg.c:516:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 5 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) STRWui $wzr, %stack.9.j, 0, debug-location !898 :: (store 4 into %ir.j); cg.c:516:16
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(3) 5c
  BotQ.A RemainingLatency 5 + 1c > CritPath 5
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(3) STRDui %115:fpr64, %stack.17.alpha, 0, debug-location !894 :: (store 8 into %ir.alpha); cg.c:504:15
  Ready @1c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 5 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(4) 4c
  BotQ.A RemainingLatency 4 + 2c > CritPath 5
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) STRDui %113:fpr64, %stack.16.rho0, 0, debug-location !896 :: (store 8 into %ir.rho0); cg.c:509:14
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(2) 4c
  BotQ.A RemainingLatency 4 + 3c > CritPath 5
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) %115:fpr64 = FDIVDrr %113:fpr64, %114:fpr64, debug-location !893; cg.c:504:21
  Ready @3c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) STRXui $xzr, %stack.15.rho, 0, debug-location !897 :: (store 8 into %ir.rho); cg.c:515:13
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 7c > CritPath 5
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %114:fpr64 = LDRDui %stack.13.d, 0, debug-location !892 :: (dereferenceable load 8 from %ir.d); cg.c:504:23
  Ready @7c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %113:fpr64 = LDRDui %stack.15.rho, 0, debug-location !891 :: (dereferenceable load 8 from %ir.rho); cg.c:504:17
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   %113:fpr64 = LDRDui %stack.15.rho, 0, debug-location !891 :: (dereferenceable load 8 from %ir.rho); cg.c:504:17
SU(1):   %114:fpr64 = LDRDui %stack.13.d, 0, debug-location !892 :: (dereferenceable load 8 from %ir.d); cg.c:504:23
SU(5):   STRXui $xzr, %stack.15.rho, 0, debug-location !897 :: (store 8 into %ir.rho); cg.c:515:13
SU(2):   %115:fpr64 = FDIVDrr %113:fpr64, %114:fpr64, debug-location !893; cg.c:504:21
SU(4):   STRDui %113:fpr64, %stack.16.rho0, 0, debug-location !896 :: (store 8 into %ir.rho0); cg.c:509:14
SU(3):   STRDui %115:fpr64, %stack.17.alpha, 0, debug-location !894 :: (store 8 into %ir.alpha); cg.c:504:15
SU(6):   STRWui $wzr, %stack.9.j, 0, debug-location !898 :: (store 4 into %ir.j); cg.c:516:16

********** MI Scheduling **********
conj_grad:%bb.18 for.cond69
  From: %118:gpr32 = LDRWui %stack.9.j, 0, debug-location !901 :: (dereferenceable load 4 from %ir.j); cg.c:516:21
    To: Bcc 10, %bb.20, implicit killed $nzcv, debug-location !908; cg.c:516:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %118:gpr32 = LDRWui %stack.9.j, 0, debug-location !901 :: (dereferenceable load 4 from %ir.j); cg.c:516:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=%118
  Single Issue       : false;
SU(1):   %120:gpr32 = LDRWui %25:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !903 :: (dereferenceable load 4 from @lastcol); cg.c:516:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%120
  Single Issue       : false;
SU(2):   %122:gpr32 = LDRWui %27:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !904 :: (dereferenceable load 4 from @firstcol); cg.c:516:35
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%122
  Single Issue       : false;
SU(3):   %123:gpr32common = nsw SUBWrr %120:gpr32, %122:gpr32, debug-location !905; cg.c:516:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(2): Data Latency=4 Reg=%122
    SU(1): Data Latency=4 Reg=%120
  Successors:
    SU(4): Data Latency=1 Reg=%123
  Single Issue       : false;
SU(4):   %124:gpr32common = nsw ADDWri %123:gpr32common, 1, 0, debug-location !906; cg.c:516:44
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1 Reg=%123
  Successors:
    SU(5): Data Latency=1 Reg=%124
  Single Issue       : false;
SU(5):   dead $wzr = SUBSWrr %118:gpr32, %124:gpr32common, implicit-def $nzcv, debug-location !908; cg.c:516:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%124
    SU(0): Data Latency=4 Reg=%118
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.20, implicit killed $nzcv, debug-location !908; cg.c:516:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) dead $wzr = SUBSWrr %118:gpr32, %124:gpr32common, implicit-def $nzcv, debug-location !908; cg.c:516:9
  Ready @1c
  BotQ.A TopLatency SU(5) 6c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %124:gpr32common = nsw ADDWri %123:gpr32common, 1, 0, debug-location !906; cg.c:516:44
  Ready @2c
  BotQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %123:gpr32common = nsw SUBWrr %120:gpr32, %122:gpr32, debug-location !905; cg.c:516:33
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 1 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %118:gpr32 = LDRWui %stack.9.j, 0, debug-location !901 :: (dereferenceable load 4 from %ir.j); cg.c:516:21
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %122:gpr32 = LDRWui %27:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !904 :: (dereferenceable load 4 from @firstcol); cg.c:516:35
  Ready @7c
  BotQ.A BotLatency SU(2) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %120:gpr32 = LDRWui %25:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !903 :: (dereferenceable load 4 from @lastcol); cg.c:516:25
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.18 ***
SU(1):   %120:gpr32 = LDRWui %25:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !903 :: (dereferenceable load 4 from @lastcol); cg.c:516:25
SU(2):   %122:gpr32 = LDRWui %27:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !904 :: (dereferenceable load 4 from @firstcol); cg.c:516:35
SU(0):   %118:gpr32 = LDRWui %stack.9.j, 0, debug-location !901 :: (dereferenceable load 4 from %ir.j); cg.c:516:21
SU(3):   %123:gpr32common = nsw SUBWrr %120:gpr32, %122:gpr32, debug-location !905; cg.c:516:33
SU(4):   %124:gpr32common = nsw ADDWri %123:gpr32common, 1, 0, debug-location !906; cg.c:516:44
SU(5):   dead $wzr = SUBSWrr %118:gpr32, %124:gpr32common, implicit-def $nzcv, debug-location !908; cg.c:516:9

********** MI Scheduling **********
conj_grad:%bb.19 for.body73
  From: %166:gpr64common = LDRXui %stack.3.z.addr, 0, debug-location !909 :: (dereferenceable load 8 from %ir.z.addr); cg.c:517:20
    To: B %bb.18, debug-location !931; cg.c:516:9
 RegionInstrs: 23
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=3
GPR32=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %166:gpr64common = LDRXui %stack.3.z.addr, 0, debug-location !909 :: (dereferenceable load 8 from %ir.z.addr); cg.c:517:20
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 27
  Successors:
    SU(9): Data Latency=4 Reg=%166
    SU(3): Data Latency=4 Reg=%166
    SU(19): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %167:gpr64 = LDRSWui %stack.9.j, 0, debug-location !911 :: (dereferenceable load 4 from %ir.j); cg.c:517:22
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 29
  Successors:
    SU(2): Data Latency=4 Reg=%167
    SU(22): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   %168:gpr64 = UBFMXri %167:gpr64, 61, 60, debug-location !909; cg.c:517:20
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 25
  Predecessors:
    SU(1): Data Latency=4 Reg=%167
  Successors:
    SU(9): Data Latency=1 Reg=%168
    SU(6): Data Latency=1 Reg=%168
    SU(3): Data Latency=1 Reg=%168
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %169:fpr64 = LDRDroX %166:gpr64common, %168:gpr64, 0, 0, debug-location !909 :: (load 8 from %ir.arrayidx75); cg.c:517:20
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 23
  Predecessors:
    SU(2): Data Latency=1 Reg=%168
    SU(0): Data Latency=4 Reg=%166
  Successors:
    SU(8): Data Latency=4 Reg=%169
    SU(22): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(4):   %170:fpr64 = LDRDui %stack.17.alpha, 0, debug-location !912 :: (dereferenceable load 8 from %ir.alpha); cg.c:517:27
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 24
  Successors:
    SU(7): Data Latency=4 Reg=%170
    SU(19): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(5):   %171:gpr64common = LDRXui %stack.5.p.addr, 0, debug-location !913 :: (dereferenceable load 8 from %ir.p.addr); cg.c:517:35
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 28
  Successors:
    SU(6): Data Latency=4 Reg=%171
    SU(19): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(6):   %172:fpr64 = LDRDroX %171:gpr64common, %168:gpr64, 0, 0, debug-location !913 :: (load 8 from %ir.arrayidx77); cg.c:517:35
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 24
  Predecessors:
    SU(2): Data Latency=1 Reg=%168
    SU(5): Data Latency=4 Reg=%171
  Successors:
    SU(7): Data Latency=4 Reg=%172
    SU(22): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(7):   %173:fpr64 = FMULDrr %170:fpr64, %172:fpr64, debug-location !915; cg.c:517:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 20
  Predecessors:
    SU(6): Data Latency=4 Reg=%172
    SU(4): Data Latency=4 Reg=%170
  Successors:
    SU(8): Data Latency=1 Reg=%173
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(8):   %174:fpr64 = FADDDrr %169:fpr64, %173:fpr64, debug-location !916; cg.c:517:25
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 19
  Predecessors:
    SU(7): Data Latency=1 Reg=%173
    SU(3): Data Latency=4 Reg=%169
  Successors:
    SU(9): Data Latency=1 Reg=%174
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(9):   STRDroX %174:fpr64, %166:gpr64common, %168:gpr64, 0, 0, debug-location !919 :: (store 8 into %ir.arrayidx81); cg.c:517:18
  # preds left       : 9
  # succs left       : 9
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 18
  Predecessors:
    SU(8): Data Latency=1 Reg=%174
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Data Latency=1 Reg=%168
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%166
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(22): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(20): Ord  Latency=1 Memory
    SU(11): Ord  Latency=1 Memory
    SU(16): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(15): Ord  Latency=1 Memory
    SU(14): Ord  Latency=1 Memory
    SU(10): Ord  Latency=1 Memory
  Pressure Diff      : FPR8 1    GPR32 2    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(10):   %175:gpr64common = LDRXui %stack.7.r.addr, 0, debug-location !920 :: (dereferenceable load 8 from %ir.r.addr); cg.c:518:20
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 15
  Predecessors:
    SU(9): Ord  Latency=1 Memory
  Successors:
    SU(19): Data Latency=4 Reg=%175
    SU(13): Data Latency=4 Reg=%175
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(11):   %176:gpr64 = LDRSWui %stack.9.j, 0, debug-location !921 :: (dereferenceable load 4 from %ir.j); cg.c:518:22
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 17
  Predecessors:
    SU(9): Ord  Latency=1 Memory
  Successors:
    SU(12): Data Latency=4 Reg=%176
    SU(22): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(12):   %177:gpr64 = UBFMXri %176:gpr64, 61, 60, debug-location !920; cg.c:518:20
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 13
  Predecessors:
    SU(11): Data Latency=4 Reg=%176
  Successors:
    SU(19): Data Latency=1 Reg=%177
    SU(16): Data Latency=1 Reg=%177
    SU(13): Data Latency=1 Reg=%177
  Pressure Diff      : 
  Single Issue       : false;
SU(13):   %178:fpr64 = LDRDroX %175:gpr64common, %177:gpr64, 0, 0, debug-location !920 :: (load 8 from %ir.arrayidx83); cg.c:518:20
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 17
  Height             : 11
  Predecessors:
    SU(12): Data Latency=1 Reg=%177
    SU(10): Data Latency=4 Reg=%175
    SU(9): Ord  Latency=1 Memory
  Successors:
    SU(18): Data Latency=4 Reg=%178
    SU(22): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(14):   %179:fpr64 = LDRDui %stack.17.alpha, 0, debug-location !922 :: (dereferenceable load 8 from %ir.alpha); cg.c:518:27
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 12
  Predecessors:
    SU(9): Ord  Latency=1 Memory
  Successors:
    SU(17): Data Latency=4 Reg=%179
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(15):   %180:gpr64common = LDRXui %stack.6.q.addr, 0, debug-location !923 :: (dereferenceable load 8 from %ir.q.addr); cg.c:518:35
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 16
  Predecessors:
    SU(9): Ord  Latency=1 Memory
  Successors:
    SU(16): Data Latency=4 Reg=%180
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(16):   %181:fpr64 = LDRDroX %180:gpr64common, %177:gpr64, 0, 0, debug-location !923 :: (load 8 from %ir.arrayidx85); cg.c:518:35
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 17
  Height             : 12
  Predecessors:
    SU(12): Data Latency=1 Reg=%177
    SU(15): Data Latency=4 Reg=%180
    SU(9): Ord  Latency=1 Memory
  Successors:
    SU(17): Data Latency=4 Reg=%181
    SU(22): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(17):   %182:fpr64 = FMULDrr %179:fpr64, %181:fpr64, debug-location !925; cg.c:518:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 21
  Height             : 8
  Predecessors:
    SU(16): Data Latency=4 Reg=%181
    SU(14): Data Latency=4 Reg=%179
  Successors:
    SU(18): Data Latency=1 Reg=%182
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(18):   %183:fpr64 = FSUBDrr %178:fpr64, %182:fpr64, debug-location !926; cg.c:518:25
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 7
  Predecessors:
    SU(17): Data Latency=1 Reg=%182
    SU(13): Data Latency=4 Reg=%178
  Successors:
    SU(19): Data Latency=1 Reg=%183
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(19):   STRDroX %183:fpr64, %175:gpr64common, %177:gpr64, 0, 0, debug-location !929 :: (store 8 into %ir.arrayidx89); cg.c:518:18
  # preds left       : 16
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 23
  Height             : 6
  Predecessors:
    SU(18): Data Latency=1 Reg=%183
    SU(16): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(12): Data Latency=1 Reg=%177
    SU(11): Ord  Latency=0 Memory
    SU(10): Data Latency=4 Reg=%175
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(22): Ord  Latency=0 Memory
    SU(20): Ord  Latency=1 Memory
  Pressure Diff      : FPR8 1    GPR32 2    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(20):   %184:gpr32common = LDRWui %stack.9.j, 0, debug-location !930 :: (dereferenceable load 4 from %ir.j); cg.c:516:50
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 24
  Height             : 5
  Predecessors:
    SU(19): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
  Successors:
    SU(21): Data Latency=4 Reg=%184
    SU(22): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(21):   %185:gpr32common = nsw ADDWri %184:gpr32common, 1, 0, debug-location !930; cg.c:516:50
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 28
  Height             : 1
  Predecessors:
    SU(20): Data Latency=4 Reg=%184
  Successors:
    SU(22): Data Latency=1 Reg=%185
  Pressure Diff      : 
  Single Issue       : false;
SU(22):   STRWui %185:gpr32common, %stack.9.j, 0, debug-location !930 :: (store 4 into %ir.j); cg.c:516:50
  # preds left       : 10
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 29
  Height             : 0
  Predecessors:
    SU(21): Data Latency=1 Reg=%185
    SU(20): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(16): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.18, debug-location !931; cg.c:516:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 29
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 22 
Pick Bot ONLY1     
Scheduling SU(22) STRWui %185:gpr32common, %stack.9.j, 0, debug-location !930 :: (store 4 into %ir.j); cg.c:516:50
Bottom Pressure:
GPR32=1
  LiveReg: %185
  UpdateRegP: SU(22) STRWui %185:gpr32common, %stack.9.j, 0, debug-location !930 :: (store 4 into %ir.j); cg.c:516:50
              to 
  Ready @0c
  BotQ.A TopLatency SU(22) 29c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 
Pick Bot ONLY1     
Scheduling SU(21) %185:gpr32common = nsw ADDWri %184:gpr32common, 1, 0, debug-location !930; cg.c:516:50
Bottom Pressure:
GPR32=1
  LiveReg: %184
  UpdateRegP: SU(21) %185:gpr32common = nsw ADDWri %184:gpr32common, 1, 0, debug-location !930; cg.c:516:50
              to GPR32 -1
  Ready @1c
  BotQ.A BotLatency SU(21) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 20 
Pick Bot ONLY1     
Scheduling SU(20) %184:gpr32common = LDRWui %stack.9.j, 0, debug-location !930 :: (dereferenceable load 4 from %ir.j); cg.c:516:50
Bottom Pressure:

  Ready @5c
  BotQ.A BotLatency SU(20) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 19 
Pick Bot ONLY1     
Scheduling SU(19) STRDroX %183:fpr64, %175:gpr64common, %177:gpr64, 0, 0, debug-location !929 :: (store 8 into %ir.arrayidx89); cg.c:518:18
Bottom Pressure:
FPR8=1
GPR32=2
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %183
  UpdateRegP: SU(19) STRDroX %183:fpr64, %175:gpr64common, %177:gpr64, 0, 0, debug-location !929 :: (store 8 into %ir.arrayidx89); cg.c:518:18
              to GPR32 2
  LiveReg: %175
  UpdateRegP: SU(13) %178:fpr64 = LDRDroX %175:gpr64common, %177:gpr64, 0, 0, debug-location !920 :: (load 8 from %ir.arrayidx83); cg.c:518:20
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(19) STRDroX %183:fpr64, %175:gpr64common, %177:gpr64, 0, 0, debug-location !929 :: (store 8 into %ir.arrayidx89); cg.c:518:18
              to GPR32 1
  LiveReg: %177
  UpdateRegP: SU(13) %178:fpr64 = LDRDroX %175:gpr64common, %177:gpr64, 0, 0, debug-location !920 :: (load 8 from %ir.arrayidx83); cg.c:518:20
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(16) %181:fpr64 = LDRDroX %180:gpr64common, %177:gpr64, 0, 0, debug-location !923 :: (load 8 from %ir.arrayidx85); cg.c:518:35
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(19) STRDroX %183:fpr64, %175:gpr64common, %177:gpr64, 0, 0, debug-location !929 :: (store 8 into %ir.arrayidx89); cg.c:518:18
              to 
  Ready @6c
  BotQ.A BotLatency SU(19) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 
Pick Bot ONLY1     
Scheduling SU(18) %183:fpr64 = FSUBDrr %178:fpr64, %182:fpr64, debug-location !926; cg.c:518:25
Bottom Pressure:
FPR8=2
GPR32=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %178
  UpdateRegP: SU(18) %183:fpr64 = FSUBDrr %178:fpr64, %182:fpr64, debug-location !926; cg.c:518:25
              to 
  LiveReg: %182
  UpdateRegP: SU(18) %183:fpr64 = FSUBDrr %178:fpr64, %182:fpr64, debug-location !926; cg.c:518:25
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @7c
  BotQ.A BotLatency SU(18) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 13 
Queue BotQ.A: 17 
Pick Bot ONLY1     
Scheduling SU(17) %182:fpr64 = FMULDrr %179:fpr64, %181:fpr64, debug-location !925; cg.c:518:33
Bottom Pressure:
FPR8=3
GPR32=2
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  LiveReg: %179
  UpdateRegP: SU(17) %182:fpr64 = FMULDrr %179:fpr64, %181:fpr64, debug-location !925; cg.c:518:33
              to 
  LiveReg: %181
  UpdateRegP: SU(17) %182:fpr64 = FMULDrr %179:fpr64, %181:fpr64, debug-location !925; cg.c:518:33
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @8c
  BotQ.A BotLatency SU(17) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 14 16 
Queue BotQ.A: 13 
Pick Bot ONLY1     
Scheduling SU(13) %178:fpr64 = LDRDroX %175:gpr64common, %177:gpr64, 0, 0, debug-location !920 :: (load 8 from %ir.arrayidx83); cg.c:518:20
Bottom Pressure:
FPR8=2
GPR32=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @11c
  BotQ.A BotLatency SU(13) 11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 7
  Executed: 12c
  Critical: 7c, 7 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 
Queue BotQ.A: 14 16 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 5 
BotQ.A RemLatency SU(16) 17c
BotQ.A RemLatency SU(10) 12c
Picking from Bot:
  Cand SU(14) ORDER                              
  Cand SU(16) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) %181:fpr64 = LDRDroX %180:gpr64common, %177:gpr64, 0, 0, debug-location !923 :: (load 8 from %ir.arrayidx85); cg.c:518:35
Bottom Pressure:
FPR8=1
GPR32=3
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %180
  UpdateRegP: SU(16) %181:fpr64 = LDRDroX %180:gpr64common, %177:gpr64, 0, 0, debug-location !923 :: (load 8 from %ir.arrayidx85); cg.c:518:35
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @12c
  BotQ.A BotLatency SU(16) 12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 8
  Executed: 13c
  Critical: 8c, 8 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 15 
Queue BotQ.A: 14 12 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 5 
BotQ.A RemLatency SU(12) 16c
BotQ.A RemLatency SU(10) 12c
Picking from Bot:
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(14) %179:fpr64 = LDRDui %stack.17.alpha, 0, debug-location !922 :: (dereferenceable load 8 from %ir.alpha); cg.c:518:27
Bottom Pressure:
GPR32=3
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 9
  Executed: 14c
  Critical: 9c, 9 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 15 
Queue BotQ.A: 12 
Pick Bot ONLY1     
Scheduling SU(12) %177:gpr64 = UBFMXri %176:gpr64, 61, 60, debug-location !920; cg.c:518:20
Bottom Pressure:
GPR32=3
  LiveReg: %176
  UpdateRegP: SU(12) %177:gpr64 = UBFMXri %176:gpr64, 61, 60, debug-location !920; cg.c:518:20
              to GPR32 -1
  Ready @14c
  BotQ.A TopLatency SU(12) 16c
  BotQ.A BotLatency SU(12) 13c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 10
  Executed: 15c
  Critical: 10c, 10 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 11 15 
Queue BotQ.A: 10 
Pick Bot ONLY1     
Scheduling SU(10) %175:gpr64common = LDRXui %stack.7.r.addr, 0, debug-location !920 :: (dereferenceable load 8 from %ir.r.addr); cg.c:518:20
Bottom Pressure:
GPR32=2
  Ready @15c
  BotQ.A BotLatency SU(10) 15c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 11
  Executed: 16c
  Critical: 11c, 11 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 11 
Queue BotQ.A: 15 
Pick Bot ONLY1     
Scheduling SU(15) %180:gpr64common = LDRXui %stack.6.q.addr, 0, debug-location !923 :: (dereferenceable load 8 from %ir.q.addr); cg.c:518:35
Bottom Pressure:
GPR32=1
  Ready @16c
  BotQ.A BotLatency SU(15) 16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 12
  Executed: 17c
  Critical: 12c, 12 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 18 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 11 
Pick Bot ONLY1     
Scheduling SU(11) %176:gpr64 = LDRSWui %stack.9.j, 0, debug-location !921 :: (dereferenceable load 4 from %ir.j); cg.c:518:22
Bottom Pressure:

  Ready @18c
  BotQ.A BotLatency SU(11) 17c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 13
  Executed: 19c
  Critical: 13c, 13 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Pick Bot ONLY1     
Scheduling SU(9) STRDroX %174:fpr64, %166:gpr64common, %168:gpr64, 0, 0, debug-location !919 :: (store 8 into %ir.arrayidx81); cg.c:517:18
Bottom Pressure:
FPR8=1
GPR32=2
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %174
  UpdateRegP: SU(9) STRDroX %174:fpr64, %166:gpr64common, %168:gpr64, 0, 0, debug-location !919 :: (store 8 into %ir.arrayidx81); cg.c:517:18
              to GPR32 2
  LiveReg: %166
  UpdateRegP: SU(3) %169:fpr64 = LDRDroX %166:gpr64common, %168:gpr64, 0, 0, debug-location !909 :: (load 8 from %ir.arrayidx75); cg.c:517:20
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(9) STRDroX %174:fpr64, %166:gpr64common, %168:gpr64, 0, 0, debug-location !919 :: (store 8 into %ir.arrayidx81); cg.c:517:18
              to GPR32 1
  LiveReg: %168
  UpdateRegP: SU(3) %169:fpr64 = LDRDroX %166:gpr64common, %168:gpr64, 0, 0, debug-location !909 :: (load 8 from %ir.arrayidx75); cg.c:517:20
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(6) %172:fpr64 = LDRDroX %171:gpr64common, %168:gpr64, 0, 0, debug-location !913 :: (load 8 from %ir.arrayidx77); cg.c:517:35
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(9) STRDroX %174:fpr64, %166:gpr64common, %168:gpr64, 0, 0, debug-location !919 :: (store 8 into %ir.arrayidx81); cg.c:517:18
              to 
  Ready @19c
  BotQ.A BotLatency SU(9) 18c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 14
  Executed: 20c
  Critical: 14c, 14 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Pick Bot ONLY1     
Scheduling SU(8) %174:fpr64 = FADDDrr %169:fpr64, %173:fpr64, debug-location !916; cg.c:517:25
Bottom Pressure:
FPR8=2
GPR32=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %169
  UpdateRegP: SU(8) %174:fpr64 = FADDDrr %169:fpr64, %173:fpr64, debug-location !916; cg.c:517:25
              to 
  LiveReg: %173
  UpdateRegP: SU(8) %174:fpr64 = FADDDrr %169:fpr64, %173:fpr64, debug-location !916; cg.c:517:25
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @20c
  BotQ.A BotLatency SU(8) 19c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 15
  Executed: 21c
  Critical: 15c, 15 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) %173:fpr64 = FMULDrr %170:fpr64, %172:fpr64, debug-location !915; cg.c:517:33
Bottom Pressure:
FPR8=3
GPR32=2
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  LiveReg: %170
  UpdateRegP: SU(7) %173:fpr64 = FMULDrr %170:fpr64, %172:fpr64, debug-location !915; cg.c:517:33
              to 
  LiveReg: %172
  UpdateRegP: SU(7) %173:fpr64 = FMULDrr %170:fpr64, %172:fpr64, debug-location !915; cg.c:517:33
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @21c
  BotQ.A BotLatency SU(7) 20c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 16
  Executed: 22c
  Critical: 16c, 16 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 24 BotQ.A
Queue BotQ.P: 4 6 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %169:fpr64 = LDRDroX %166:gpr64common, %168:gpr64, 0, 0, debug-location !909 :: (load 8 from %ir.arrayidx75); cg.c:517:20
Bottom Pressure:
FPR8=2
GPR32=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @24c
  BotQ.A BotLatency SU(3) 23c
  *** Max MOps 1 at cycle 24
Cycle: 25 BotQ.A
BotQ.A @25c
  Retired: 17
  Executed: 25c
  Critical: 17c, 17 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 4 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 5 
BotQ.A RemLatency SU(6) 5c
  BotQ.A RemainingLatency 5 + 25c > CritPath 29
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(6) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(6) %172:fpr64 = LDRDroX %171:gpr64common, %168:gpr64, 0, 0, debug-location !913 :: (load 8 from %ir.arrayidx77); cg.c:517:35
Bottom Pressure:
FPR8=1
GPR32=3
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %171
  UpdateRegP: SU(6) %172:fpr64 = LDRDroX %171:gpr64common, %168:gpr64, 0, 0, debug-location !913 :: (load 8 from %ir.arrayidx77); cg.c:517:35
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @25c
  BotQ.A BotLatency SU(6) 24c
  *** Max MOps 1 at cycle 25
Cycle: 26 BotQ.A
BotQ.A @26c
  Retired: 18
  Executed: 26c
  Critical: 18c, 18 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 5 
Queue BotQ.A: 4 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 5 
BotQ.A RemLatency SU(2) 4c
  BotQ.A RemainingLatency 4 + 26c > CritPath 29
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(2) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) %168:gpr64 = UBFMXri %167:gpr64, 61, 60, debug-location !909; cg.c:517:20
Bottom Pressure:
FPR8=1
GPR32=3
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %167
  UpdateRegP: SU(2) %168:gpr64 = UBFMXri %167:gpr64, 61, 60, debug-location !909; cg.c:517:20
              to GPR32 -1
  Ready @26c
  BotQ.A BotLatency SU(2) 25c
  *** Max MOps 1 at cycle 26
Cycle: 27 BotQ.A
BotQ.A @27c
  Retired: 19
  Executed: 27c
  Critical: 19c, 19 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 5 1 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %170:fpr64 = LDRDui %stack.17.alpha, 0, debug-location !912 :: (dereferenceable load 8 from %ir.alpha); cg.c:517:27
Bottom Pressure:
GPR32=3
  Ready @27c
  *** Max MOps 1 at cycle 27
Cycle: 28 BotQ.A
BotQ.A @28c
  Retired: 20
  Executed: 28c
  Critical: 20c, 20 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 5 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %166:gpr64common = LDRXui %stack.3.z.addr, 0, debug-location !909 :: (dereferenceable load 8 from %ir.z.addr); cg.c:517:20
Bottom Pressure:
GPR32=2
  Ready @28c
  BotQ.A BotLatency SU(0) 27c
  *** Max MOps 1 at cycle 28
Cycle: 29 BotQ.A
BotQ.A @29c
  Retired: 21
  Executed: 29c
  Critical: 21c, 21 MOps
  ExpectedLatency: 27c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %171:gpr64common = LDRXui %stack.5.p.addr, 0, debug-location !913 :: (dereferenceable load 8 from %ir.p.addr); cg.c:517:35
Bottom Pressure:
GPR32=1
  Ready @29c
  BotQ.A BotLatency SU(5) 28c
  *** Max MOps 1 at cycle 29
Cycle: 30 BotQ.A
BotQ.A @30c
  Retired: 22
  Executed: 30c
  Critical: 22c, 22 MOps
  ExpectedLatency: 28c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %167:gpr64 = LDRSWui %stack.9.j, 0, debug-location !911 :: (dereferenceable load 4 from %ir.j); cg.c:517:22
Bottom Pressure:

  Ready @30c
  BotQ.A BotLatency SU(1) 29c
  *** Max MOps 1 at cycle 30
Cycle: 31 BotQ.A
BotQ.A @31c
  Retired: 23
  Executed: 31c
  Critical: 23c, 23 MOps
  ExpectedLatency: 29c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.19 ***
SU(1):   %167:gpr64 = LDRSWui %stack.9.j, 0, debug-location !911 :: (dereferenceable load 4 from %ir.j); cg.c:517:22
SU(5):   %171:gpr64common = LDRXui %stack.5.p.addr, 0, debug-location !913 :: (dereferenceable load 8 from %ir.p.addr); cg.c:517:35
SU(0):   %166:gpr64common = LDRXui %stack.3.z.addr, 0, debug-location !909 :: (dereferenceable load 8 from %ir.z.addr); cg.c:517:20
SU(4):   %170:fpr64 = LDRDui %stack.17.alpha, 0, debug-location !912 :: (dereferenceable load 8 from %ir.alpha); cg.c:517:27
SU(2):   %168:gpr64 = UBFMXri %167:gpr64, 61, 60, debug-location !909; cg.c:517:20
SU(6):   %172:fpr64 = LDRDroX %171:gpr64common, %168:gpr64, 0, 0, debug-location !913 :: (load 8 from %ir.arrayidx77); cg.c:517:35
SU(3):   %169:fpr64 = LDRDroX %166:gpr64common, %168:gpr64, 0, 0, debug-location !909 :: (load 8 from %ir.arrayidx75); cg.c:517:20
SU(7):   %173:fpr64 = FMULDrr %170:fpr64, %172:fpr64, debug-location !915; cg.c:517:33
SU(8):   %174:fpr64 = FADDDrr %169:fpr64, %173:fpr64, debug-location !916; cg.c:517:25
SU(9):   STRDroX %174:fpr64, %166:gpr64common, %168:gpr64, 0, 0, debug-location !919 :: (store 8 into %ir.arrayidx81); cg.c:517:18
SU(11):   %176:gpr64 = LDRSWui %stack.9.j, 0, debug-location !921 :: (dereferenceable load 4 from %ir.j); cg.c:518:22
SU(15):   %180:gpr64common = LDRXui %stack.6.q.addr, 0, debug-location !923 :: (dereferenceable load 8 from %ir.q.addr); cg.c:518:35
SU(10):   %175:gpr64common = LDRXui %stack.7.r.addr, 0, debug-location !920 :: (dereferenceable load 8 from %ir.r.addr); cg.c:518:20
SU(12):   %177:gpr64 = UBFMXri %176:gpr64, 61, 60, debug-location !920; cg.c:518:20
SU(14):   %179:fpr64 = LDRDui %stack.17.alpha, 0, debug-location !922 :: (dereferenceable load 8 from %ir.alpha); cg.c:518:27
SU(16):   %181:fpr64 = LDRDroX %180:gpr64common, %177:gpr64, 0, 0, debug-location !923 :: (load 8 from %ir.arrayidx85); cg.c:518:35
SU(13):   %178:fpr64 = LDRDroX %175:gpr64common, %177:gpr64, 0, 0, debug-location !920 :: (load 8 from %ir.arrayidx83); cg.c:518:20
SU(17):   %182:fpr64 = FMULDrr %179:fpr64, %181:fpr64, debug-location !925; cg.c:518:33
SU(18):   %183:fpr64 = FSUBDrr %178:fpr64, %182:fpr64, debug-location !926; cg.c:518:25
SU(19):   STRDroX %183:fpr64, %175:gpr64common, %177:gpr64, 0, 0, debug-location !929 :: (store 8 into %ir.arrayidx89); cg.c:518:18
SU(20):   %184:gpr32common = LDRWui %stack.9.j, 0, debug-location !930 :: (dereferenceable load 4 from %ir.j); cg.c:516:50
SU(21):   %185:gpr32common = nsw ADDWri %184:gpr32common, 1, 0, debug-location !930; cg.c:516:50
SU(22):   STRWui %185:gpr32common, %stack.9.j, 0, debug-location !930 :: (store 4 into %ir.j); cg.c:516:50

********** MI Scheduling **********
conj_grad:%bb.21 for.cond93
  From: %127:gpr32 = LDRWui %stack.9.j, 0, debug-location !937 :: (dereferenceable load 4 from %ir.j); cg.c:526:21
    To: Bcc 10, %bb.23, implicit killed $nzcv, debug-location !945; cg.c:526:9
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %127:gpr32 = LDRWui %stack.9.j, 0, debug-location !937 :: (dereferenceable load 4 from %ir.j); cg.c:526:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(6): Data Latency=4 Reg=%127
  Single Issue       : false;
SU(1):   %129:gpr32 = LDRWui %25:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !939 :: (dereferenceable load 4 from @lastcol); cg.c:526:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%129
  Single Issue       : false;
SU(2):   %131:gpr32 = LDRWui %27:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !940 :: (dereferenceable load 4 from @firstcol); cg.c:526:35
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%131
  Single Issue       : false;
SU(3):   %132:gpr32common = nsw SUBWrr %129:gpr32, %131:gpr32, debug-location !941; cg.c:526:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(2): Data Latency=4 Reg=%131
    SU(1): Data Latency=4 Reg=%129
  Successors:
    SU(4): Data Latency=1 Reg=%132
  Single Issue       : false;
SU(4):   %133:gpr32common = nsw ADDWri %132:gpr32common, 1, 0, debug-location !942; cg.c:526:44
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1 Reg=%132
  Successors:
    SU(6): Data Latency=1 Reg=%133
  Single Issue       : false;
SU(5):   %1:fpr64 = LDRDui %stack.15.rho, 0, debug-location !944 :: (dereferenceable load 8 from %ir.rho); cg.c:0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(6):   dead $wzr = SUBSWrr %127:gpr32, %133:gpr32common, implicit-def $nzcv, debug-location !945; cg.c:526:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%133
    SU(0): Data Latency=4 Reg=%127
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.23, implicit killed $nzcv, debug-location !945; cg.c:526:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=1 Artificial
    SU(5): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 5 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) dead $wzr = SUBSWrr %127:gpr32, %133:gpr32common, implicit-def $nzcv, debug-location !945; cg.c:526:9
  Ready @1c
  BotQ.A TopLatency SU(6) 6c
  BotQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 0 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %133:gpr32common = nsw ADDWri %132:gpr32common, 1, 0, debug-location !942; cg.c:526:44
  Ready @2c
  BotQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 3 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 5 
BotQ.A RemLatency SU(3) 4c
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %1:fpr64 = LDRDui %stack.15.rho, 0, debug-location !944 :: (dereferenceable load 8 from %ir.rho); cg.c:0
  Ready @3c
  BotQ.A BotLatency SU(5) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %132:gpr32common = nsw SUBWrr %129:gpr32, %131:gpr32, debug-location !941; cg.c:526:33
  Ready @4c
  BotQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %127:gpr32 = LDRWui %stack.9.j, 0, debug-location !937 :: (dereferenceable load 4 from %ir.j); cg.c:526:21
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 8 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  BotQ.A RemainingLatency 0 + 8c > CritPath 7
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %131:gpr32 = LDRWui %27:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !940 :: (dereferenceable load 4 from @firstcol); cg.c:526:35
  Ready @8c
  BotQ.A BotLatency SU(2) 7c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %129:gpr32 = LDRWui %25:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !939 :: (dereferenceable load 4 from @lastcol); cg.c:526:25
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 7
  Executed: 10c
  Critical: 7c, 7 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.21 ***
SU(1):   %129:gpr32 = LDRWui %25:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !939 :: (dereferenceable load 4 from @lastcol); cg.c:526:25
SU(2):   %131:gpr32 = LDRWui %27:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !940 :: (dereferenceable load 4 from @firstcol); cg.c:526:35
SU(0):   %127:gpr32 = LDRWui %stack.9.j, 0, debug-location !937 :: (dereferenceable load 4 from %ir.j); cg.c:526:21
SU(3):   %132:gpr32common = nsw SUBWrr %129:gpr32, %131:gpr32, debug-location !941; cg.c:526:33
SU(5):   %1:fpr64 = LDRDui %stack.15.rho, 0, debug-location !944 :: (dereferenceable load 8 from %ir.rho); cg.c:0
SU(4):   %133:gpr32common = nsw ADDWri %132:gpr32common, 1, 0, debug-location !942; cg.c:526:44
SU(6):   dead $wzr = SUBSWrr %127:gpr32, %133:gpr32common, implicit-def $nzcv, debug-location !945; cg.c:526:9

********** MI Scheduling **********
conj_grad:%bb.22 for.body97
  From: %159:gpr64common = LDRXui %stack.7.r.addr, 0, debug-location !946 :: (dereferenceable load 8 from %ir.r.addr); cg.c:527:25
    To: B %bb.21, debug-location !955; cg.c:526:9
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %159:gpr64common = LDRXui %stack.7.r.addr, 0, debug-location !946 :: (dereferenceable load 8 from %ir.r.addr); cg.c:527:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(2): Data Latency=4 Reg=%159
  Single Issue       : false;
SU(1):   %160:gpr64common = LDRSWui %stack.9.j, 0, debug-location !948 :: (dereferenceable load 4 from %ir.j); cg.c:527:27
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(6): Data Latency=4 Reg=%160
    SU(2): Data Latency=4 Reg=%160
    SU(7): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %162:fpr64 = LDRDroX %159:gpr64common, %160:gpr64common, 0, 1, debug-location !946 :: (load 8 from %ir.arrayidx101); cg.c:527:25
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(1): Data Latency=4 Reg=%160
    SU(0): Data Latency=4 Reg=%159
  Successors:
    SU(3): Data Latency=4 Reg=%162
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   %163:fpr64 = FMULDrr %162:fpr64, %162:fpr64, debug-location !951; cg.c:527:30
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 2
  Predecessors:
    SU(2): Data Latency=4 Reg=%162
  Successors:
    SU(4): Data Latency=1 Reg=%163
  Single Issue       : false;
SU(4):   %164:fpr64 = FADDDrr %1:fpr64, %163:fpr64, debug-location !952; cg.c:527:23
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(3): Data Latency=1 Reg=%163
  Successors:
    SU(5): Data Latency=1 Reg=%164
  Single Issue       : false;
SU(5):   STRDui %164:fpr64, %stack.15.rho, 0, debug-location !953 :: (store 8 into %ir.rho); cg.c:527:17
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%164
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(6):   %165:gpr32common = nsw ADDWri %160.sub_32:gpr64common, 1, 0, debug-location !954; cg.c:526:50
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%160
  Successors:
    SU(7): Data Latency=1 Reg=%165
  Single Issue       : false;
SU(7):   STRWui %165:gpr32common, %stack.9.j, 0, debug-location !954 :: (store 4 into %ir.j); cg.c:526:50
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%165
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.21, debug-location !955; cg.c:526:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) STRWui %165:gpr32common, %stack.9.j, 0, debug-location !954 :: (store 4 into %ir.j); cg.c:526:50
  Ready @0c
  BotQ.A TopLatency SU(7) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(5) 10c
  BotQ.A RemainingLatency 10 + 1c > CritPath 10
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) STRDui %164:fpr64, %stack.15.rho, 0, debug-location !953 :: (store 8 into %ir.rho); cg.c:527:17
  Ready @1c
  BotQ.A TopLatency SU(5) 10c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(4) 9c
  BotQ.A RemainingLatency 9 + 2c > CritPath 10
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(4) BOT-PATH                  9 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) %164:fpr64 = FADDDrr %1:fpr64, %163:fpr64, debug-location !952; cg.c:527:23
  Ready @2c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(3) 8c
  BotQ.A RemainingLatency 8 + 3c > CritPath 10
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(3) BOT-PATH                  8 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(3) %163:fpr64 = FMULDrr %162:fpr64, %162:fpr64, debug-location !951; cg.c:527:30
  Ready @3c
  BotQ.A BotLatency SU(3) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %165:gpr32common = nsw ADDWri %160.sub_32:gpr64common, 1, 0, debug-location !954; cg.c:526:50
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %162:fpr64 = LDRDroX %159:gpr64common, %160:gpr64common, 0, 1, debug-location !946 :: (load 8 from %ir.arrayidx101); cg.c:527:25
  Ready @7c
  BotQ.A BotLatency SU(2) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 11c > CritPath 10
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %160:gpr64common = LDRSWui %stack.9.j, 0, debug-location !948 :: (dereferenceable load 4 from %ir.j); cg.c:527:27
  Ready @11c
  BotQ.A BotLatency SU(1) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 7
  Executed: 12c
  Critical: 7c, 7 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %159:gpr64common = LDRXui %stack.7.r.addr, 0, debug-location !946 :: (dereferenceable load 8 from %ir.r.addr); cg.c:527:25
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 8
  Executed: 13c
  Critical: 8c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.22 ***
SU(0):   %159:gpr64common = LDRXui %stack.7.r.addr, 0, debug-location !946 :: (dereferenceable load 8 from %ir.r.addr); cg.c:527:25
SU(1):   %160:gpr64common = LDRSWui %stack.9.j, 0, debug-location !948 :: (dereferenceable load 4 from %ir.j); cg.c:527:27
SU(2):   %162:fpr64 = LDRDroX %159:gpr64common, %160:gpr64common, 0, 1, debug-location !946 :: (load 8 from %ir.arrayidx101); cg.c:527:25
SU(6):   %165:gpr32common = nsw ADDWri %160.sub_32:gpr64common, 1, 0, debug-location !954; cg.c:526:50
SU(3):   %163:fpr64 = FMULDrr %162:fpr64, %162:fpr64, debug-location !951; cg.c:527:30
SU(4):   %164:fpr64 = FADDDrr %1:fpr64, %163:fpr64, debug-location !952; cg.c:527:23
SU(5):   STRDui %164:fpr64, %stack.15.rho, 0, debug-location !953 :: (store 8 into %ir.rho); cg.c:527:17
SU(7):   STRWui %165:gpr32common, %stack.9.j, 0, debug-location !954 :: (store 4 into %ir.j); cg.c:526:50

********** MI Scheduling **********
conj_grad:%bb.23 for.end106
  From: %135:fpr64 = LDRDui %stack.16.rho0, 0, debug-location !958 :: (dereferenceable load 8 from %ir.rho0); cg.c:533:22
    To: End RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %135:fpr64 = LDRDui %stack.16.rho0, 0, debug-location !958 :: (dereferenceable load 8 from %ir.rho0); cg.c:533:22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%135
  Single Issue       : false;
SU(1):   %136:fpr64 = FDIVDrr %1:fpr64, %135:fpr64, debug-location !959; cg.c:533:20
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%135
  Successors:
    SU(2): Data Latency=1 Reg=%136
  Single Issue       : false;
SU(2):   STRDui %136:fpr64, %stack.18.beta, 0, debug-location !960 :: (store 8 into %ir.beta); cg.c:533:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%136
  Single Issue       : false;
SU(3):   STRWui $wzr, %stack.9.j, 0, debug-location !961 :: (store 4 into %ir.j); cg.c:538:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) STRWui $wzr, %stack.9.j, 0, debug-location !961 :: (store 4 into %ir.j); cg.c:538:16
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRDui %136:fpr64, %stack.18.beta, 0, debug-location !960 :: (store 8 into %ir.beta); cg.c:533:14
  Ready @1c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %136:fpr64 = FDIVDrr %1:fpr64, %135:fpr64, debug-location !959; cg.c:533:20
  Ready @2c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %135:fpr64 = LDRDui %stack.16.rho0, 0, debug-location !958 :: (dereferenceable load 8 from %ir.rho0); cg.c:533:22
  Ready @6c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.23 ***
SU(0):   %135:fpr64 = LDRDui %stack.16.rho0, 0, debug-location !958 :: (dereferenceable load 8 from %ir.rho0); cg.c:533:22
SU(1):   %136:fpr64 = FDIVDrr %1:fpr64, %135:fpr64, debug-location !959; cg.c:533:20
SU(2):   STRDui %136:fpr64, %stack.18.beta, 0, debug-location !960 :: (store 8 into %ir.beta); cg.c:533:14
SU(3):   STRWui $wzr, %stack.9.j, 0, debug-location !961 :: (store 4 into %ir.j); cg.c:538:16

********** MI Scheduling **********
conj_grad:%bb.24 for.cond108
  From: %138:gpr32 = LDRWui %stack.9.j, 0, debug-location !964 :: (dereferenceable load 4 from %ir.j); cg.c:538:21
    To: Bcc 10, %bb.26, implicit killed $nzcv, debug-location !971; cg.c:538:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %138:gpr32 = LDRWui %stack.9.j, 0, debug-location !964 :: (dereferenceable load 4 from %ir.j); cg.c:538:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=%138
  Single Issue       : false;
SU(1):   %140:gpr32 = LDRWui %25:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !966 :: (dereferenceable load 4 from @lastcol); cg.c:538:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%140
  Single Issue       : false;
SU(2):   %142:gpr32 = LDRWui %27:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !967 :: (dereferenceable load 4 from @firstcol); cg.c:538:35
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%142
  Single Issue       : false;
SU(3):   %143:gpr32common = nsw SUBWrr %140:gpr32, %142:gpr32, debug-location !968; cg.c:538:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(2): Data Latency=4 Reg=%142
    SU(1): Data Latency=4 Reg=%140
  Successors:
    SU(4): Data Latency=1 Reg=%143
  Single Issue       : false;
SU(4):   %144:gpr32common = nsw ADDWri %143:gpr32common, 1, 0, debug-location !969; cg.c:538:44
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1 Reg=%143
  Successors:
    SU(5): Data Latency=1 Reg=%144
  Single Issue       : false;
SU(5):   dead $wzr = SUBSWrr %138:gpr32, %144:gpr32common, implicit-def $nzcv, debug-location !971; cg.c:538:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%144
    SU(0): Data Latency=4 Reg=%138
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.26, implicit killed $nzcv, debug-location !971; cg.c:538:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) dead $wzr = SUBSWrr %138:gpr32, %144:gpr32common, implicit-def $nzcv, debug-location !971; cg.c:538:9
  Ready @1c
  BotQ.A TopLatency SU(5) 6c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %144:gpr32common = nsw ADDWri %143:gpr32common, 1, 0, debug-location !969; cg.c:538:44
  Ready @2c
  BotQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %143:gpr32common = nsw SUBWrr %140:gpr32, %142:gpr32, debug-location !968; cg.c:538:33
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 1 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %138:gpr32 = LDRWui %stack.9.j, 0, debug-location !964 :: (dereferenceable load 4 from %ir.j); cg.c:538:21
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %142:gpr32 = LDRWui %27:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !967 :: (dereferenceable load 4 from @firstcol); cg.c:538:35
  Ready @7c
  BotQ.A BotLatency SU(2) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %140:gpr32 = LDRWui %25:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !966 :: (dereferenceable load 4 from @lastcol); cg.c:538:25
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.24 ***
SU(1):   %140:gpr32 = LDRWui %25:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !966 :: (dereferenceable load 4 from @lastcol); cg.c:538:25
SU(2):   %142:gpr32 = LDRWui %27:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !967 :: (dereferenceable load 4 from @firstcol); cg.c:538:35
SU(0):   %138:gpr32 = LDRWui %stack.9.j, 0, debug-location !964 :: (dereferenceable load 4 from %ir.j); cg.c:538:21
SU(3):   %143:gpr32common = nsw SUBWrr %140:gpr32, %142:gpr32, debug-location !968; cg.c:538:33
SU(4):   %144:gpr32common = nsw ADDWri %143:gpr32common, 1, 0, debug-location !969; cg.c:538:44
SU(5):   dead $wzr = SUBSWrr %138:gpr32, %144:gpr32common, implicit-def $nzcv, debug-location !971; cg.c:538:9

********** MI Scheduling **********
conj_grad:%bb.25 for.body112
  From: %148:gpr64common = LDRXui %stack.7.r.addr, 0, debug-location !972 :: (dereferenceable load 8 from %ir.r.addr); cg.c:539:20
    To: B %bb.24, debug-location !984; cg.c:538:9
 RegionInstrs: 13
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %148:gpr64common = LDRXui %stack.7.r.addr, 0, debug-location !972 :: (dereferenceable load 8 from %ir.r.addr); cg.c:539:20
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(3): Data Latency=4 Reg=%148
    SU(9): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %149:gpr64 = LDRSWui %stack.9.j, 0, debug-location !974 :: (dereferenceable load 4 from %ir.j); cg.c:539:22
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 17
  Successors:
    SU(2): Data Latency=4 Reg=%149
    SU(12): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %150:gpr64 = UBFMXri %149:gpr64, 61, 60, debug-location !972; cg.c:539:20
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 13
  Predecessors:
    SU(1): Data Latency=4 Reg=%149
  Successors:
    SU(9): Data Latency=1 Reg=%150
    SU(6): Data Latency=1 Reg=%150
    SU(3): Data Latency=1 Reg=%150
  Single Issue       : false;
SU(3):   %151:fpr64 = LDRDroX %148:gpr64common, %150:gpr64, 0, 0, debug-location !972 :: (load 8 from %ir.arrayidx114); cg.c:539:20
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 11
  Predecessors:
    SU(2): Data Latency=1 Reg=%150
    SU(0): Data Latency=4 Reg=%148
  Successors:
    SU(8): Data Latency=4 Reg=%151
    SU(12): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   %152:fpr64 = LDRDui %stack.18.beta, 0, debug-location !975 :: (dereferenceable load 8 from %ir.beta); cg.c:539:27
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(7): Data Latency=4 Reg=%152
    SU(9): Ord  Latency=0 Memory
  Single Issue       : false;
SU(5):   %153:gpr64common = LDRXui %stack.5.p.addr, 0, debug-location !976 :: (dereferenceable load 8 from %ir.p.addr); cg.c:539:34
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(9): Data Latency=4 Reg=%153
    SU(6): Data Latency=4 Reg=%153
    SU(9): Ord  Latency=0 Memory
  Single Issue       : false;
SU(6):   %154:fpr64 = LDRDroX %153:gpr64common, %150:gpr64, 0, 0, debug-location !976 :: (load 8 from %ir.arrayidx116); cg.c:539:34
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 12
  Predecessors:
    SU(2): Data Latency=1 Reg=%150
    SU(5): Data Latency=4 Reg=%153
  Successors:
    SU(7): Data Latency=4 Reg=%154
    SU(12): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Single Issue       : false;
SU(7):   %155:fpr64 = FMULDrr %152:fpr64, %154:fpr64, debug-location !978; cg.c:539:32
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 8
  Predecessors:
    SU(6): Data Latency=4 Reg=%154
    SU(4): Data Latency=4 Reg=%152
  Successors:
    SU(8): Data Latency=1 Reg=%155
  Single Issue       : false;
SU(8):   %156:fpr64 = FADDDrr %151:fpr64, %155:fpr64, debug-location !979; cg.c:539:25
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 7
  Predecessors:
    SU(7): Data Latency=1 Reg=%155
    SU(3): Data Latency=4 Reg=%151
  Successors:
    SU(9): Data Latency=1 Reg=%156
  Single Issue       : false;
SU(9):   STRDroX %156:fpr64, %153:gpr64common, %150:gpr64, 0, 0, debug-location !982 :: (store 8 into %ir.arrayidx120); cg.c:539:18
  # preds left       : 9
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 6
  Predecessors:
    SU(8): Data Latency=1 Reg=%156
    SU(6): Ord  Latency=0 Memory
    SU(5): Data Latency=4 Reg=%153
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Data Latency=1 Reg=%150
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(12): Ord  Latency=0 Memory
    SU(10): Ord  Latency=1 Memory
  Single Issue       : false;
SU(10):   %157:gpr32common = LDRWui %stack.9.j, 0, debug-location !983 :: (dereferenceable load 4 from %ir.j); cg.c:538:50
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 5
  Predecessors:
    SU(9): Ord  Latency=1 Memory
  Successors:
    SU(11): Data Latency=4 Reg=%157
    SU(12): Ord  Latency=0 Memory
  Single Issue       : false;
SU(11):   %158:gpr32common = nsw ADDWri %157:gpr32common, 1, 0, debug-location !983; cg.c:538:50
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 1
  Predecessors:
    SU(10): Data Latency=4 Reg=%157
  Successors:
    SU(12): Data Latency=1 Reg=%158
  Single Issue       : false;
SU(12):   STRWui %158:gpr32common, %stack.9.j, 0, debug-location !983 :: (store 4 into %ir.j); cg.c:538:50
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 0
  Predecessors:
    SU(11): Data Latency=1 Reg=%158
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.24, debug-location !984; cg.c:538:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 17
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 
Pick Bot ONLY1     
Scheduling SU(12) STRWui %158:gpr32common, %stack.9.j, 0, debug-location !983 :: (store 4 into %ir.j); cg.c:538:50
  Ready @0c
  BotQ.A TopLatency SU(12) 17c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 
Pick Bot ONLY1     
Scheduling SU(11) %158:gpr32common = nsw ADDWri %157:gpr32common, 1, 0, debug-location !983; cg.c:538:50
  Ready @1c
  BotQ.A BotLatency SU(11) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 10 
Pick Bot ONLY1     
Scheduling SU(10) %157:gpr32common = LDRWui %stack.9.j, 0, debug-location !983 :: (dereferenceable load 4 from %ir.j); cg.c:538:50
  Ready @5c
  BotQ.A BotLatency SU(10) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Pick Bot ONLY1     
Scheduling SU(9) STRDroX %156:fpr64, %153:gpr64common, %150:gpr64, 0, 0, debug-location !982 :: (store 8 into %ir.arrayidx120); cg.c:539:18
  Ready @6c
  BotQ.A BotLatency SU(9) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Pick Bot ONLY1     
Scheduling SU(8) %156:fpr64 = FADDDrr %151:fpr64, %155:fpr64, debug-location !979; cg.c:539:25
  Ready @7c
  BotQ.A BotLatency SU(8) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) %155:fpr64 = FMULDrr %152:fpr64, %154:fpr64, debug-location !978; cg.c:539:32
  Ready @8c
  BotQ.A BotLatency SU(7) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 4 6 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %151:fpr64 = LDRDroX %148:gpr64common, %150:gpr64, 0, 0, debug-location !972 :: (load 8 from %ir.arrayidx114); cg.c:539:20
  Ready @11c
  BotQ.A BotLatency SU(3) 11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 7
  Executed: 12c
  Critical: 7c, 7 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 4 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 5 
BotQ.A RemLatency SU(6) 5c
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %154:fpr64 = LDRDroX %153:gpr64common, %150:gpr64, 0, 0, debug-location !976 :: (load 8 from %ir.arrayidx116); cg.c:539:34
  Ready @12c
  BotQ.A BotLatency SU(6) 12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 8
  Executed: 13c
  Critical: 8c, 8 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 5 
Queue BotQ.A: 4 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 5 
BotQ.A RemLatency SU(2) 4c
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %152:fpr64 = LDRDui %stack.18.beta, 0, debug-location !975 :: (dereferenceable load 8 from %ir.beta); cg.c:539:27
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 9
  Executed: 14c
  Critical: 9c, 9 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 5 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %150:gpr64 = UBFMXri %149:gpr64, 61, 60, debug-location !972; cg.c:539:20
  Ready @14c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 13c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 10
  Executed: 15c
  Critical: 10c, 10 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 5 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %148:gpr64common = LDRXui %stack.7.r.addr, 0, debug-location !972 :: (dereferenceable load 8 from %ir.r.addr); cg.c:539:20
  Ready @15c
  BotQ.A BotLatency SU(0) 15c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 11
  Executed: 16c
  Critical: 11c, 11 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %153:gpr64common = LDRXui %stack.5.p.addr, 0, debug-location !976 :: (dereferenceable load 8 from %ir.p.addr); cg.c:539:34
  Ready @16c
  BotQ.A BotLatency SU(5) 16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 12
  Executed: 17c
  Critical: 12c, 12 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 18 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %149:gpr64 = LDRSWui %stack.9.j, 0, debug-location !974 :: (dereferenceable load 4 from %ir.j); cg.c:539:22
  Ready @18c
  BotQ.A BotLatency SU(1) 17c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 13
  Executed: 19c
  Critical: 13c, 13 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.25 ***
SU(1):   %149:gpr64 = LDRSWui %stack.9.j, 0, debug-location !974 :: (dereferenceable load 4 from %ir.j); cg.c:539:22
SU(5):   %153:gpr64common = LDRXui %stack.5.p.addr, 0, debug-location !976 :: (dereferenceable load 8 from %ir.p.addr); cg.c:539:34
SU(0):   %148:gpr64common = LDRXui %stack.7.r.addr, 0, debug-location !972 :: (dereferenceable load 8 from %ir.r.addr); cg.c:539:20
SU(2):   %150:gpr64 = UBFMXri %149:gpr64, 61, 60, debug-location !972; cg.c:539:20
SU(4):   %152:fpr64 = LDRDui %stack.18.beta, 0, debug-location !975 :: (dereferenceable load 8 from %ir.beta); cg.c:539:27
SU(6):   %154:fpr64 = LDRDroX %153:gpr64common, %150:gpr64, 0, 0, debug-location !976 :: (load 8 from %ir.arrayidx116); cg.c:539:34
SU(3):   %151:fpr64 = LDRDroX %148:gpr64common, %150:gpr64, 0, 0, debug-location !972 :: (load 8 from %ir.arrayidx114); cg.c:539:20
SU(7):   %155:fpr64 = FMULDrr %152:fpr64, %154:fpr64, debug-location !978; cg.c:539:32
SU(8):   %156:fpr64 = FADDDrr %151:fpr64, %155:fpr64, debug-location !979; cg.c:539:25
SU(9):   STRDroX %156:fpr64, %153:gpr64common, %150:gpr64, 0, 0, debug-location !982 :: (store 8 into %ir.arrayidx120); cg.c:539:18
SU(10):   %157:gpr32common = LDRWui %stack.9.j, 0, debug-location !983 :: (dereferenceable load 4 from %ir.j); cg.c:538:50
SU(11):   %158:gpr32common = nsw ADDWri %157:gpr32common, 1, 0, debug-location !983; cg.c:538:50
SU(12):   STRWui %158:gpr32common, %stack.9.j, 0, debug-location !983 :: (store 4 into %ir.j); cg.c:538:50

********** MI Scheduling **********
conj_grad:%bb.26 for.inc124
  From: %146:gpr32common = LDRWui %stack.11.cgit, 0, debug-location !987 :: (dereferenceable load 4 from %ir.cgit); cg.c:434:41
    To: B %bb.7, debug-location !988; cg.c:434:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %146:gpr32common = LDRWui %stack.11.cgit, 0, debug-location !987 :: (dereferenceable load 4 from %ir.cgit); cg.c:434:41
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%146
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %147:gpr32common = nsw ADDWri %146:gpr32common, 1, 0, debug-location !987; cg.c:434:41
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%146
  Successors:
    SU(2): Data Latency=1 Reg=%147
  Single Issue       : false;
SU(2):   STRWui %147:gpr32common, %stack.11.cgit, 0, debug-location !987 :: (store 4 into %ir.cgit); cg.c:434:41
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%147
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.7, debug-location !988; cg.c:434:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %147:gpr32common, %stack.11.cgit, 0, debug-location !987 :: (store 4 into %ir.cgit); cg.c:434:41
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %147:gpr32common = nsw ADDWri %146:gpr32common, 1, 0, debug-location !987; cg.c:434:41
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %146:gpr32common = LDRWui %stack.11.cgit, 0, debug-location !987 :: (dereferenceable load 4 from %ir.cgit); cg.c:434:41
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.26 ***
SU(0):   %146:gpr32common = LDRWui %stack.11.cgit, 0, debug-location !987 :: (dereferenceable load 4 from %ir.cgit); cg.c:434:41
SU(1):   %147:gpr32common = nsw ADDWri %146:gpr32common, 1, 0, debug-location !987; cg.c:434:41
SU(2):   STRWui %147:gpr32common, %stack.11.cgit, 0, debug-location !987 :: (store 4 into %ir.cgit); cg.c:434:41

********** MI Scheduling **********
conj_grad:%bb.27 for.end126
  From: STRXui $xzr, %stack.14.sum, 0, debug-location !991 :: (store 8 into %ir.sum); cg.c:548:9
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRXui $xzr, %stack.14.sum, 0, debug-location !991 :: (store 8 into %ir.sum); cg.c:548:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   STRWui $wzr, %stack.9.j, 0, debug-location !992 :: (store 4 into %ir.j); cg.c:549:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) STRWui $wzr, %stack.9.j, 0, debug-location !992 :: (store 4 into %ir.j); cg.c:549:12
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRXui $xzr, %stack.14.sum, 0, debug-location !991 :: (store 8 into %ir.sum); cg.c:548:9
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   STRXui $xzr, %stack.14.sum, 0, debug-location !991 :: (store 8 into %ir.sum); cg.c:548:9
SU(1):   STRWui $wzr, %stack.9.j, 0, debug-location !992 :: (store 4 into %ir.j); cg.c:549:12

********** MI Scheduling **********
conj_grad:%bb.28 for.cond127
  From: %38:gpr32 = LDRWui %stack.9.j, 0, debug-location !995 :: (dereferenceable load 4 from %ir.j); cg.c:549:17
    To: Bcc 10, %bb.33, implicit killed $nzcv, debug-location !1002; cg.c:549:5
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %38:gpr32 = LDRWui %stack.9.j, 0, debug-location !995 :: (dereferenceable load 4 from %ir.j); cg.c:549:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=%38
  Single Issue       : false;
SU(1):   %40:gpr32 = LDRWui %96:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !997 :: (dereferenceable load 4 from @lastrow); cg.c:549:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%40
  Single Issue       : false;
SU(2):   %42:gpr32 = LDRWui %98:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !998 :: (dereferenceable load 4 from @firstrow); cg.c:549:31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%42
  Single Issue       : false;
SU(3):   %43:gpr32common = nsw SUBWrr %40:gpr32, %42:gpr32, debug-location !999; cg.c:549:29
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(2): Data Latency=4 Reg=%42
    SU(1): Data Latency=4 Reg=%40
  Successors:
    SU(4): Data Latency=1 Reg=%43
  Single Issue       : false;
SU(4):   %44:gpr32common = nsw ADDWri %43:gpr32common, 1, 0, debug-location !1000; cg.c:549:40
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1 Reg=%43
  Successors:
    SU(5): Data Latency=1 Reg=%44
  Single Issue       : false;
SU(5):   dead $wzr = SUBSWrr %38:gpr32, %44:gpr32common, implicit-def $nzcv, debug-location !1002; cg.c:549:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%44
    SU(0): Data Latency=4 Reg=%38
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.33, implicit killed $nzcv, debug-location !1002; cg.c:549:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) dead $wzr = SUBSWrr %38:gpr32, %44:gpr32common, implicit-def $nzcv, debug-location !1002; cg.c:549:5
  Ready @1c
  BotQ.A TopLatency SU(5) 6c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %44:gpr32common = nsw ADDWri %43:gpr32common, 1, 0, debug-location !1000; cg.c:549:40
  Ready @2c
  BotQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %43:gpr32common = nsw SUBWrr %40:gpr32, %42:gpr32, debug-location !999; cg.c:549:29
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 1 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %38:gpr32 = LDRWui %stack.9.j, 0, debug-location !995 :: (dereferenceable load 4 from %ir.j); cg.c:549:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %42:gpr32 = LDRWui %98:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !998 :: (dereferenceable load 4 from @firstrow); cg.c:549:31
  Ready @7c
  BotQ.A BotLatency SU(2) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %40:gpr32 = LDRWui %96:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !997 :: (dereferenceable load 4 from @lastrow); cg.c:549:21
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.28 ***
SU(1):   %40:gpr32 = LDRWui %96:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !997 :: (dereferenceable load 4 from @lastrow); cg.c:549:21
SU(2):   %42:gpr32 = LDRWui %98:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !998 :: (dereferenceable load 4 from @firstrow); cg.c:549:31
SU(0):   %38:gpr32 = LDRWui %stack.9.j, 0, debug-location !995 :: (dereferenceable load 4 from %ir.j); cg.c:549:17
SU(3):   %43:gpr32common = nsw SUBWrr %40:gpr32, %42:gpr32, debug-location !999; cg.c:549:29
SU(4):   %44:gpr32common = nsw ADDWri %43:gpr32common, 1, 0, debug-location !1000; cg.c:549:40
SU(5):   dead $wzr = SUBSWrr %38:gpr32, %44:gpr32common, implicit-def $nzcv, debug-location !1002; cg.c:549:5

********** MI Scheduling **********
conj_grad:%bb.29 for.body131
  From: STRXui $xzr, %stack.13.d, 0, debug-location !1003 :: (store 8 into %ir.d); cg.c:550:11
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRXui $xzr, %stack.13.d, 0, debug-location !1003 :: (store 8 into %ir.d); cg.c:550:11
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Ord  Latency=1 Memory
  Single Issue       : false;
SU(1):   %70:gpr64common = LDRXui %stack.1.rowstr.addr, 0, debug-location !1005 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%70
  Single Issue       : false;
SU(2):   %71:gpr64 = LDRSWui %stack.9.j, 0, debug-location !1007 :: (dereferenceable load 4 from %ir.j); cg.c:551:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%71
  Single Issue       : false;
SU(3):   %72:gpr32 = LDRWroX %70:gpr64common, %71:gpr64, 0, 1, debug-location !1005 :: (load 4 from %ir.arrayidx133); cg.c:551:18
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%71
    SU(1): Data Latency=4 Reg=%70
    SU(0): Ord  Latency=1 Memory
  Successors:
    SU(4): Data Latency=4 Reg=%72
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   STRWui %72:gpr32, %stack.10.k, 0, debug-location !1008 :: (store 4 into %ir.k); cg.c:551:16
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(3): Data Latency=4 Reg=%72
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) STRWui %72:gpr32, %stack.10.k, 0, debug-location !1008 :: (store 4 into %ir.k); cg.c:551:16
  Ready @0c
  BotQ.A TopLatency SU(4) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %72:gpr32 = LDRWroX %70:gpr64common, %71:gpr64, 0, 1, debug-location !1005 :: (load 4 from %ir.arrayidx133); cg.c:551:18
  Ready @4c
  BotQ.A BotLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRXui $xzr, %stack.13.d, 0, debug-location !1003 :: (store 8 into %ir.d); cg.c:550:11
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 8 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %71:gpr64 = LDRSWui %stack.9.j, 0, debug-location !1007 :: (dereferenceable load 4 from %ir.j); cg.c:551:25
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 4
  Executed: 9c
  Critical: 4c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %70:gpr64common = LDRXui %stack.1.rowstr.addr, 0, debug-location !1005 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:18
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 5
  Executed: 10c
  Critical: 5c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.29 ***
SU(1):   %70:gpr64common = LDRXui %stack.1.rowstr.addr, 0, debug-location !1005 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:18
SU(2):   %71:gpr64 = LDRSWui %stack.9.j, 0, debug-location !1007 :: (dereferenceable load 4 from %ir.j); cg.c:551:25
SU(0):   STRXui $xzr, %stack.13.d, 0, debug-location !1003 :: (store 8 into %ir.d); cg.c:550:11
SU(3):   %72:gpr32 = LDRWroX %70:gpr64common, %71:gpr64, 0, 1, debug-location !1005 :: (load 4 from %ir.arrayidx133); cg.c:551:18
SU(4):   STRWui %72:gpr32, %stack.10.k, 0, debug-location !1008 :: (store 4 into %ir.k); cg.c:551:16

********** MI Scheduling **********
conj_grad:%bb.30 for.cond134
  From: %73:gpr32 = LDRWui %stack.10.k, 0, debug-location !1010 :: (dereferenceable load 4 from %ir.k); cg.c:551:29
    To: Bcc 10, %bb.32, implicit killed $nzcv, debug-location !1017; cg.c:551:9
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %73:gpr32 = LDRWui %stack.10.k, 0, debug-location !1010 :: (dereferenceable load 4 from %ir.k); cg.c:551:29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(6): Data Latency=4 Reg=%73
  Single Issue       : false;
SU(1):   %74:gpr64 = LDRXui %stack.1.rowstr.addr, 0, debug-location !1012 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:33
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(3): Data Latency=4 Reg=%74
  Single Issue       : false;
SU(2):   %75:gpr64 = LDRSWui %stack.9.j, 0, debug-location !1013 :: (dereferenceable load 4 from %ir.j); cg.c:551:40
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(3): Data Latency=4 Reg=%75
  Single Issue       : false;
SU(3):   %76:gpr64common = ADDXrs %74:gpr64, %75:gpr64, 2, debug-location !1012; cg.c:551:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(2): Data Latency=4 Reg=%75
    SU(1): Data Latency=4 Reg=%74
  Successors:
    SU(4): Data Latency=1 Reg=%76
  Single Issue       : false;
SU(4):   %77:gpr32 = LDRWui %76:gpr64common, 1, debug-location !1012 :: (load 4 from %ir.arrayidx137); cg.c:551:33
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(3): Data Latency=1 Reg=%76
  Successors:
    SU(6): Data Latency=4 Reg=%77
  Single Issue       : false;
SU(5):   %2:fpr64 = LDRDui %stack.13.d, 0, debug-location !1016 :: (dereferenceable load 8 from %ir.d); cg.c:0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(6):   dead $wzr = SUBSWrr %73:gpr32, %77:gpr32, implicit-def $nzcv, debug-location !1017; cg.c:551:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(4): Data Latency=4 Reg=%77
    SU(0): Data Latency=4 Reg=%73
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.32, implicit killed $nzcv, debug-location !1017; cg.c:551:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=1 Artificial
    SU(5): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 5 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) dead $wzr = SUBSWrr %73:gpr32, %77:gpr32, implicit-def $nzcv, debug-location !1017; cg.c:551:9
  Ready @1c
  BotQ.A TopLatency SU(6) 9c
  BotQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 0 4 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %2:fpr64 = LDRDui %stack.13.d, 0, debug-location !1016 :: (dereferenceable load 8 from %ir.d); cg.c:0
  Ready @3c
  BotQ.A BotLatency SU(5) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 2
  Executed: 4c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
BotQ.A RemLatency SU(4) 5c
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %77:gpr32 = LDRWui %76:gpr64common, 1, debug-location !1012 :: (load 4 from %ir.arrayidx137); cg.c:551:33
  Ready @5c
  BotQ.A BotLatency SU(4) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
BotQ.A RemLatency SU(3) 4c
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %76:gpr64common = ADDXrs %74:gpr64, %75:gpr64, 2, debug-location !1012; cg.c:551:33
  Ready @6c
  BotQ.A BotLatency SU(3) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %73:gpr32 = LDRWui %stack.10.k, 0, debug-location !1010 :: (dereferenceable load 4 from %ir.k); cg.c:551:29
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %75:gpr64 = LDRSWui %stack.9.j, 0, debug-location !1013 :: (dereferenceable load 4 from %ir.j); cg.c:551:40
  Ready @10c
  BotQ.A BotLatency SU(2) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 6
  Executed: 11c
  Critical: 6c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %74:gpr64 = LDRXui %stack.1.rowstr.addr, 0, debug-location !1012 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:33
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 7
  Executed: 12c
  Critical: 7c, 7 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.30 ***
SU(1):   %74:gpr64 = LDRXui %stack.1.rowstr.addr, 0, debug-location !1012 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:33
SU(2):   %75:gpr64 = LDRSWui %stack.9.j, 0, debug-location !1013 :: (dereferenceable load 4 from %ir.j); cg.c:551:40
SU(0):   %73:gpr32 = LDRWui %stack.10.k, 0, debug-location !1010 :: (dereferenceable load 4 from %ir.k); cg.c:551:29
SU(3):   %76:gpr64common = ADDXrs %74:gpr64, %75:gpr64, 2, debug-location !1012; cg.c:551:33
SU(4):   %77:gpr32 = LDRWui %76:gpr64common, 1, debug-location !1012 :: (load 4 from %ir.arrayidx137); cg.c:551:33
SU(5):   %2:fpr64 = LDRDui %stack.13.d, 0, debug-location !1016 :: (dereferenceable load 8 from %ir.d); cg.c:0
SU(6):   dead $wzr = SUBSWrr %73:gpr32, %77:gpr32, implicit-def $nzcv, debug-location !1017; cg.c:551:9

********** MI Scheduling **********
conj_grad:%bb.31 for.body139
  From: %83:gpr64common = LDRXui %stack.4.a.addr, 0, debug-location !1018 :: (dereferenceable load 8 from %ir.a.addr); cg.c:552:21
    To: B %bb.30, debug-location !1028; cg.c:551:9
 RegionInstrs: 12
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %83:gpr64common = LDRXui %stack.4.a.addr, 0, debug-location !1018 :: (dereferenceable load 8 from %ir.a.addr); cg.c:552:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(2): Data Latency=4 Reg=%83
  Single Issue       : false;
SU(1):   %84:gpr64common = LDRSWui %stack.10.k, 0, debug-location !1020 :: (dereferenceable load 4 from %ir.k); cg.c:552:23
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(10): Data Latency=4 Reg=%84
    SU(5): Data Latency=4 Reg=%84
    SU(2): Data Latency=4 Reg=%84
    SU(11): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %86:fpr64 = LDRDroX %83:gpr64common, %84:gpr64common, 0, 1, debug-location !1018 :: (load 8 from %ir.arrayidx141); cg.c:552:21
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(1): Data Latency=4 Reg=%84
    SU(0): Data Latency=4 Reg=%83
  Successors:
    SU(7): Data Latency=4 Reg=%86
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   %87:gpr64common = LDRXui %stack.3.z.addr, 0, debug-location !1021 :: (dereferenceable load 8 from %ir.z.addr); cg.c:552:28
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(6): Data Latency=4 Reg=%87
  Single Issue       : false;
SU(4):   %88:gpr64common = LDRXui %stack.0.colidx.addr, 0, debug-location !1022 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:552:30
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(5): Data Latency=4 Reg=%88
  Single Issue       : false;
SU(5):   %89:gpr64 = LDRSWroX %88:gpr64common, %84:gpr64common, 0, 1, debug-location !1022 :: (load 4 from %ir.arrayidx143); cg.c:552:30
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 10
  Predecessors:
    SU(4): Data Latency=4 Reg=%88
    SU(1): Data Latency=4 Reg=%84
  Successors:
    SU(6): Data Latency=4 Reg=%89
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Single Issue       : false;
SU(6):   %90:fpr64 = LDRDroX %87:gpr64common, %89:gpr64, 0, 1, debug-location !1021 :: (load 8 from %ir.arrayidx145); cg.c:552:28
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 6
  Predecessors:
    SU(5): Data Latency=4 Reg=%89
    SU(3): Data Latency=4 Reg=%87
  Successors:
    SU(7): Data Latency=4 Reg=%90
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Single Issue       : false;
SU(7):   %91:fpr64 = FMULDrr %86:fpr64, %90:fpr64, debug-location !1024; cg.c:552:26
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 2
  Predecessors:
    SU(6): Data Latency=4 Reg=%90
    SU(2): Data Latency=4 Reg=%86
  Successors:
    SU(8): Data Latency=1 Reg=%91
  Single Issue       : false;
SU(8):   %92:fpr64 = FADDDrr %2:fpr64, %91:fpr64, debug-location !1025; cg.c:552:19
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 1
  Predecessors:
    SU(7): Data Latency=1 Reg=%91
  Successors:
    SU(9): Data Latency=1 Reg=%92
  Single Issue       : false;
SU(9):   STRDui %92:fpr64, %stack.13.d, 0, debug-location !1026 :: (store 8 into %ir.d); cg.c:552:15
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%92
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(10):   %93:gpr32common = nsw ADDWri %84.sub_32:gpr64common, 1, 0, debug-location !1027; cg.c:551:49
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%84
  Successors:
    SU(11): Data Latency=1 Reg=%93
  Single Issue       : false;
SU(11):   STRWui %93:gpr32common, %stack.10.k, 0, debug-location !1027 :: (store 4 into %ir.k); cg.c:551:49
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%93
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.30, debug-location !1028; cg.c:551:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 14
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 9 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 
Picking from Bot:
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) STRWui %93:gpr32common, %stack.10.k, 0, debug-location !1027 :: (store 4 into %ir.k); cg.c:551:49
  Ready @0c
  BotQ.A TopLatency SU(11) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 10 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 
BotQ.A RemLatency SU(9) 14c
  BotQ.A RemainingLatency 14 + 1c > CritPath 14
Picking from Bot:
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(9) STRDui %92:fpr64, %stack.13.d, 0, debug-location !1026 :: (store 8 into %ir.d); cg.c:552:15
  Ready @1c
  BotQ.A TopLatency SU(9) 14c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 8 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 
BotQ.A RemLatency SU(8) 13c
  BotQ.A RemainingLatency 13 + 2c > CritPath 14
Picking from Bot:
  Cand SU(10) ORDER                              
  Cand SU(8) BOT-PATH                  13 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(8) %92:fpr64 = FADDDrr %2:fpr64, %91:fpr64, debug-location !1025; cg.c:552:19
  Ready @2c
  BotQ.A BotLatency SU(8) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 
BotQ.A RemLatency SU(7) 12c
  BotQ.A RemainingLatency 12 + 3c > CritPath 14
Picking from Bot:
  Cand SU(10) ORDER                              
  Cand SU(7) BOT-PATH                  12 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(7) %91:fpr64 = FMULDrr %86:fpr64, %90:fpr64, debug-location !1024; cg.c:552:26
  Ready @3c
  BotQ.A BotLatency SU(7) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 2 
Queue BotQ.A: 10 
Pick Bot ONLY1     
Scheduling SU(10) %93:gpr32common = nsw ADDWri %84.sub_32:gpr64common, 1, 0, debug-location !1027; cg.c:551:49
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 6 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 
BotQ.A RemLatency SU(6) 8c
  BotQ.A RemainingLatency 8 + 7c > CritPath 14
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(6) %90:fpr64 = LDRDroX %87:gpr64common, %89:gpr64, 0, 1, debug-location !1021 :: (load 8 from %ir.arrayidx145); cg.c:552:28
  Ready @7c
  BotQ.A BotLatency SU(6) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 3 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %86:fpr64 = LDRDroX %83:gpr64common, %84:gpr64common, 0, 1, debug-location !1018 :: (load 8 from %ir.arrayidx141); cg.c:552:21
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 0 
Queue BotQ.A: 5 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 
BotQ.A RemLatency SU(5) 4c
  BotQ.A RemainingLatency 4 + 11c > CritPath 14
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) %89:gpr64 = LDRSWroX %88:gpr64common, %84:gpr64common, 0, 1, debug-location !1022 :: (load 4 from %ir.arrayidx143); cg.c:552:30
  Ready @11c
  BotQ.A BotLatency SU(5) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 8
  Executed: 12c
  Critical: 8c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 4 
Queue BotQ.A: 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 
  BotQ.A RemainingLatency 3 + 12c > CritPath 14
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %87:gpr64common = LDRXui %stack.3.z.addr, 0, debug-location !1021 :: (dereferenceable load 8 from %ir.z.addr); cg.c:552:28
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 9
  Executed: 13c
  Critical: 9c, 9 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 4 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %83:gpr64common = LDRXui %stack.4.a.addr, 0, debug-location !1018 :: (dereferenceable load 8 from %ir.a.addr); cg.c:552:21
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 10
  Executed: 14c
  Critical: 10c, 10 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 15 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 4 
Queue TopQ.P: 
Queue TopQ.A: 4 1 
  BotQ.A RemainingLatency 0 + 15c > CritPath 14
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(4) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %88:gpr64common = LDRXui %stack.0.colidx.addr, 0, debug-location !1022 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:552:30
  Ready @15c
  BotQ.A BotLatency SU(4) 14c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 11
  Executed: 16c
  Critical: 11c, 11 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %84:gpr64common = LDRSWui %stack.10.k, 0, debug-location !1020 :: (dereferenceable load 4 from %ir.k); cg.c:552:23
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 12
  Executed: 17c
  Critical: 12c, 12 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.31 ***
SU(1):   %84:gpr64common = LDRSWui %stack.10.k, 0, debug-location !1020 :: (dereferenceable load 4 from %ir.k); cg.c:552:23
SU(4):   %88:gpr64common = LDRXui %stack.0.colidx.addr, 0, debug-location !1022 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:552:30
SU(0):   %83:gpr64common = LDRXui %stack.4.a.addr, 0, debug-location !1018 :: (dereferenceable load 8 from %ir.a.addr); cg.c:552:21
SU(3):   %87:gpr64common = LDRXui %stack.3.z.addr, 0, debug-location !1021 :: (dereferenceable load 8 from %ir.z.addr); cg.c:552:28
SU(5):   %89:gpr64 = LDRSWroX %88:gpr64common, %84:gpr64common, 0, 1, debug-location !1022 :: (load 4 from %ir.arrayidx143); cg.c:552:30
SU(2):   %86:fpr64 = LDRDroX %83:gpr64common, %84:gpr64common, 0, 1, debug-location !1018 :: (load 8 from %ir.arrayidx141); cg.c:552:21
SU(6):   %90:fpr64 = LDRDroX %87:gpr64common, %89:gpr64, 0, 1, debug-location !1021 :: (load 8 from %ir.arrayidx145); cg.c:552:28
SU(10):   %93:gpr32common = nsw ADDWri %84.sub_32:gpr64common, 1, 0, debug-location !1027; cg.c:551:49
SU(7):   %91:fpr64 = FMULDrr %86:fpr64, %90:fpr64, debug-location !1024; cg.c:552:26
SU(8):   %92:fpr64 = FADDDrr %2:fpr64, %91:fpr64, debug-location !1025; cg.c:552:19
SU(9):   STRDui %92:fpr64, %stack.13.d, 0, debug-location !1026 :: (store 8 into %ir.d); cg.c:552:15
SU(11):   STRWui %93:gpr32common, %stack.10.k, 0, debug-location !1027 :: (store 4 into %ir.k); cg.c:551:49

********** MI Scheduling **********
conj_grad:%bb.32 for.end150
  From: %79:gpr64common = LDRXui %stack.7.r.addr, 0, debug-location !1031 :: (dereferenceable load 8 from %ir.r.addr); cg.c:554:9
    To: B %bb.28, debug-location !1035; cg.c:549:5
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %79:gpr64common = LDRXui %stack.7.r.addr, 0, debug-location !1031 :: (dereferenceable load 8 from %ir.r.addr); cg.c:554:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(2): Data Latency=4 Reg=%79
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %80:gpr64 = LDRSWui %stack.9.j, 0, debug-location !1032 :: (dereferenceable load 4 from %ir.j); cg.c:554:11
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(2): Data Latency=4 Reg=%80
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   STRDroX %2:fpr64, %79:gpr64common, %80:gpr64, 0, 1, debug-location !1033 :: (store 8 into %ir.arrayidx152); cg.c:554:14
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(1): Data Latency=4 Reg=%80
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%79
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=1 Memory
  Single Issue       : false;
SU(3):   %81:gpr32common = LDRWui %stack.9.j, 0, debug-location !1034 :: (dereferenceable load 4 from %ir.j); cg.c:549:46
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(4): Data Latency=4 Reg=%81
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   %82:gpr32common = nsw ADDWri %81:gpr32common, 1, 0, debug-location !1034; cg.c:549:46
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%81
  Successors:
    SU(5): Data Latency=1 Reg=%82
  Single Issue       : false;
SU(5):   STRWui %82:gpr32common, %stack.9.j, 0, debug-location !1034 :: (store 4 into %ir.j); cg.c:549:46
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%82
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.28, debug-location !1035; cg.c:549:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) STRWui %82:gpr32common, %stack.9.j, 0, debug-location !1034 :: (store 4 into %ir.j); cg.c:549:46
  Ready @0c
  BotQ.A TopLatency SU(5) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %82:gpr32common = nsw ADDWri %81:gpr32common, 1, 0, debug-location !1034; cg.c:549:46
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %81:gpr32common = LDRWui %stack.9.j, 0, debug-location !1034 :: (dereferenceable load 4 from %ir.j); cg.c:549:46
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRDroX %2:fpr64, %79:gpr64common, %80:gpr64, 0, 1, debug-location !1033 :: (store 8 into %ir.arrayidx152); cg.c:554:14
  Ready @6c
  BotQ.A BotLatency SU(2) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %80:gpr64 = LDRSWui %stack.9.j, 0, debug-location !1032 :: (dereferenceable load 4 from %ir.j); cg.c:554:11
  Ready @10c
  BotQ.A BotLatency SU(1) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %79:gpr64common = LDRXui %stack.7.r.addr, 0, debug-location !1031 :: (dereferenceable load 8 from %ir.r.addr); cg.c:554:9
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   %79:gpr64common = LDRXui %stack.7.r.addr, 0, debug-location !1031 :: (dereferenceable load 8 from %ir.r.addr); cg.c:554:9
SU(1):   %80:gpr64 = LDRSWui %stack.9.j, 0, debug-location !1032 :: (dereferenceable load 4 from %ir.j); cg.c:554:11
SU(2):   STRDroX %2:fpr64, %79:gpr64common, %80:gpr64, 0, 1, debug-location !1033 :: (store 8 into %ir.arrayidx152); cg.c:554:14
SU(3):   %81:gpr32common = LDRWui %stack.9.j, 0, debug-location !1034 :: (dereferenceable load 4 from %ir.j); cg.c:549:46
SU(4):   %82:gpr32common = nsw ADDWri %81:gpr32common, 1, 0, debug-location !1034; cg.c:549:46
SU(5):   STRWui %82:gpr32common, %stack.9.j, 0, debug-location !1034 :: (store 4 into %ir.j); cg.c:549:46

********** MI Scheduling **********
conj_grad:%bb.34 for.cond156
  From: %47:gpr32 = LDRWui %stack.9.j, 0, debug-location !1041 :: (dereferenceable load 4 from %ir.j); cg.c:560:17
    To: Bcc 10, %bb.36, implicit killed $nzcv, debug-location !1048; cg.c:560:5
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %47:gpr32 = LDRWui %stack.9.j, 0, debug-location !1041 :: (dereferenceable load 4 from %ir.j); cg.c:560:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=%47
  Single Issue       : false;
SU(1):   %49:gpr32 = LDRWui %25:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !1043 :: (dereferenceable load 4 from @lastcol); cg.c:560:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%49
  Single Issue       : false;
SU(2):   %51:gpr32 = LDRWui %27:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !1044 :: (dereferenceable load 4 from @firstcol); cg.c:560:31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%51
  Single Issue       : false;
SU(3):   %52:gpr32common = nsw SUBWrr %49:gpr32, %51:gpr32, debug-location !1045; cg.c:560:29
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(2): Data Latency=4 Reg=%51
    SU(1): Data Latency=4 Reg=%49
  Successors:
    SU(4): Data Latency=1 Reg=%52
  Single Issue       : false;
SU(4):   %53:gpr32common = nsw ADDWri %52:gpr32common, 1, 0, debug-location !1046; cg.c:560:40
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1 Reg=%52
  Successors:
    SU(5): Data Latency=1 Reg=%53
  Single Issue       : false;
SU(5):   dead $wzr = SUBSWrr %47:gpr32, %53:gpr32common, implicit-def $nzcv, debug-location !1048; cg.c:560:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%53
    SU(0): Data Latency=4 Reg=%47
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.36, implicit killed $nzcv, debug-location !1048; cg.c:560:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) dead $wzr = SUBSWrr %47:gpr32, %53:gpr32common, implicit-def $nzcv, debug-location !1048; cg.c:560:5
  Ready @1c
  BotQ.A TopLatency SU(5) 6c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %53:gpr32common = nsw ADDWri %52:gpr32common, 1, 0, debug-location !1046; cg.c:560:40
  Ready @2c
  BotQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %52:gpr32common = nsw SUBWrr %49:gpr32, %51:gpr32, debug-location !1045; cg.c:560:29
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 1 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %47:gpr32 = LDRWui %stack.9.j, 0, debug-location !1041 :: (dereferenceable load 4 from %ir.j); cg.c:560:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %51:gpr32 = LDRWui %27:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !1044 :: (dereferenceable load 4 from @firstcol); cg.c:560:31
  Ready @7c
  BotQ.A BotLatency SU(2) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %49:gpr32 = LDRWui %25:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !1043 :: (dereferenceable load 4 from @lastcol); cg.c:560:21
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.34 ***
SU(1):   %49:gpr32 = LDRWui %25:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !1043 :: (dereferenceable load 4 from @lastcol); cg.c:560:21
SU(2):   %51:gpr32 = LDRWui %27:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !1044 :: (dereferenceable load 4 from @firstcol); cg.c:560:31
SU(0):   %47:gpr32 = LDRWui %stack.9.j, 0, debug-location !1041 :: (dereferenceable load 4 from %ir.j); cg.c:560:17
SU(3):   %52:gpr32common = nsw SUBWrr %49:gpr32, %51:gpr32, debug-location !1045; cg.c:560:29
SU(4):   %53:gpr32common = nsw ADDWri %52:gpr32common, 1, 0, debug-location !1046; cg.c:560:40
SU(5):   dead $wzr = SUBSWrr %47:gpr32, %53:gpr32common, implicit-def $nzcv, debug-location !1048; cg.c:560:5

********** MI Scheduling **********
conj_grad:%bb.35 for.body160
  From: %57:gpr64common = LDRXui %stack.2.x.addr, 0, debug-location !1049 :: (dereferenceable load 8 from %ir.x.addr); cg.c:561:13
    To: B %bb.34, debug-location !1063; cg.c:560:5
 RegionInstrs: 14
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %57:gpr64common = LDRXui %stack.2.x.addr, 0, debug-location !1049 :: (dereferenceable load 8 from %ir.x.addr); cg.c:561:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(3): Data Latency=4 Reg=%57
  Single Issue       : false;
SU(1):   %58:gpr64common = LDRSWui %stack.9.j, 0, debug-location !1051 :: (dereferenceable load 4 from %ir.j); cg.c:561:15
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(12): Data Latency=4 Reg=%58
    SU(2): Data Latency=4 Reg=%58
    SU(13): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %60:gpr64 = UBFMXri %58:gpr64common, 61, 60, debug-location !1049; cg.c:561:13
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(1): Data Latency=4 Reg=%58
  Successors:
    SU(5): Data Latency=1 Reg=%60
    SU(3): Data Latency=1 Reg=%60
  Single Issue       : false;
SU(3):   %61:fpr64 = LDRDroX %57:gpr64common, %60:gpr64, 0, 0, debug-location !1049 :: (load 8 from %ir.arrayidx162); cg.c:561:13
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 7
  Predecessors:
    SU(2): Data Latency=1 Reg=%60
    SU(0): Data Latency=4 Reg=%57
  Successors:
    SU(6): Data Latency=4 Reg=%61
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   %62:gpr64common = LDRXui %stack.7.r.addr, 0, debug-location !1052 :: (dereferenceable load 8 from %ir.r.addr); cg.c:561:20
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(5): Data Latency=4 Reg=%62
  Single Issue       : false;
SU(5):   %63:fpr64 = LDRDroX %62:gpr64common, %60:gpr64, 0, 0, debug-location !1052 :: (load 8 from %ir.arrayidx164); cg.c:561:20
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 7
  Predecessors:
    SU(2): Data Latency=1 Reg=%60
    SU(4): Data Latency=4 Reg=%62
  Successors:
    SU(6): Data Latency=4 Reg=%63
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Single Issue       : false;
SU(6):   %64:fpr64 = FSUBDrr %61:fpr64, %63:fpr64, debug-location !1054; cg.c:561:18
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 3
  Predecessors:
    SU(5): Data Latency=4 Reg=%63
    SU(3): Data Latency=4 Reg=%61
  Successors:
    SU(9): Data Latency=1 Reg=%64
    SU(7): Data Latency=1 Reg=%64
  Single Issue       : false;
SU(7):   STRDui %64:fpr64, %stack.13.d, 0, debug-location !1055 :: (store 8 into %ir.d); cg.c:561:11
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%64
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(8):   %65:fpr64 = LDRDui %stack.14.sum, 0, debug-location !1056 :: (dereferenceable load 8 from %ir.sum); cg.c:562:15
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(10): Data Latency=4 Reg=%65
    SU(11): Ord  Latency=0 Memory
  Single Issue       : false;
SU(9):   %66:fpr64 = FMULDrr %64:fpr64, %64:fpr64, debug-location !1059; cg.c:562:23
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 2
  Predecessors:
    SU(6): Data Latency=1 Reg=%64
  Successors:
    SU(10): Data Latency=1 Reg=%66
  Single Issue       : false;
SU(10):   %67:fpr64 = FADDDrr %65:fpr64, %66:fpr64, debug-location !1060; cg.c:562:19
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 1
  Predecessors:
    SU(9): Data Latency=1 Reg=%66
    SU(8): Data Latency=4 Reg=%65
  Successors:
    SU(11): Data Latency=1 Reg=%67
  Single Issue       : false;
SU(11):   STRDui %67:fpr64, %stack.14.sum, 0, debug-location !1061 :: (store 8 into %ir.sum); cg.c:562:13
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%67
    SU(8): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(12):   %68:gpr32common = nsw ADDWri %58.sub_32:gpr64common, 1, 0, debug-location !1062; cg.c:560:46
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%58
  Successors:
    SU(13): Data Latency=1 Reg=%68
  Single Issue       : false;
SU(13):   STRWui %68:gpr32common, %stack.9.j, 0, debug-location !1062 :: (store 4 into %ir.j); cg.c:560:46
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%68
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.34, debug-location !1063; cg.c:560:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 11 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 8 
Picking from Bot:
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) STRWui %68:gpr32common, %stack.9.j, 0, debug-location !1062 :: (store 4 into %ir.j); cg.c:560:46
  Ready @0c
  BotQ.A TopLatency SU(13) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 11 12 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 8 
BotQ.A RemLatency SU(11) 12c
  BotQ.A RemainingLatency 12 + 1c > CritPath 12
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(11) BOT-PATH                  12 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(11) STRDui %67:fpr64, %stack.14.sum, 0, debug-location !1061 :: (store 8 into %ir.sum); cg.c:562:13
  Ready @1c
  BotQ.A TopLatency SU(11) 12c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 12 10 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 8 
BotQ.A RemLatency SU(10) 11c
  BotQ.A RemainingLatency 11 + 2c > CritPath 12
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(10) BOT-PATH                  11 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(10) %67:fpr64 = FADDDrr %65:fpr64, %66:fpr64, debug-location !1060; cg.c:562:19
  Ready @2c
  BotQ.A BotLatency SU(10) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 8 
Queue BotQ.A: 7 12 9 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 8 
BotQ.A RemLatency SU(7) 10c
  BotQ.A RemainingLatency 10 + 3c > CritPath 12
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(9) %66:fpr64 = FMULDrr %64:fpr64, %64:fpr64, debug-location !1059; cg.c:562:23
  Ready @3c
  BotQ.A BotLatency SU(9) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 8 
Queue BotQ.A: 7 12 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 8 
BotQ.A RemLatency SU(7) 10c
  BotQ.A RemainingLatency 10 + 4c > CritPath 12
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(7) STRDui %64:fpr64, %stack.13.d, 0, debug-location !1055 :: (store 8 into %ir.d); cg.c:561:11
  Ready @4c
  BotQ.A TopLatency SU(7) 10c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 8 
Queue BotQ.A: 12 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 8 
BotQ.A RemLatency SU(6) 9c
  BotQ.A RemainingLatency 9 + 5c > CritPath 12
Picking from Bot:
  Cand SU(12) ORDER                              
  Cand SU(6) BOT-PATH                  9 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(6) %64:fpr64 = FSUBDrr %61:fpr64, %63:fpr64, debug-location !1054; cg.c:561:18
  Ready @5c
  BotQ.A BotLatency SU(6) 3c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 5 
Queue BotQ.A: 12 8 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 8 
BotQ.A RemLatency SU(12) 4c
BotQ.A RemLatency SU(3) 5c
  BotQ.A RemainingLatency 8 + 6c > CritPath 12
Picking from Bot:
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(12) %68:gpr32common = nsw ADDWri %58.sub_32:gpr64common, 1, 0, debug-location !1062; cg.c:560:46
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 5 
Queue BotQ.A: 8 
Pick Bot ONLY1     
Scheduling SU(8) %65:fpr64 = LDRDui %stack.14.sum, 0, debug-location !1056 :: (dereferenceable load 8 from %ir.sum); cg.c:562:15
  Ready @7c
  BotQ.A BotLatency SU(8) 5c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 9 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 
BotQ.A RemLatency SU(3) 5c
  BotQ.A RemainingLatency 5 + 9c > CritPath 12
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %63:fpr64 = LDRDroX %62:gpr64common, %60:gpr64, 0, 0, debug-location !1052 :: (load 8 from %ir.arrayidx164); cg.c:561:20
  Ready @9c
  BotQ.A BotLatency SU(5) 7c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 9
  Executed: 10c
  Critical: 9c, 9 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %61:fpr64 = LDRDroX %57:gpr64common, %60:gpr64, 0, 0, debug-location !1049 :: (load 8 from %ir.arrayidx162); cg.c:561:13
  Ready @10c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 10
  Executed: 11c
  Critical: 10c, 10 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %60:gpr64 = UBFMXri %58:gpr64common, 61, 60, debug-location !1049; cg.c:561:13
  Ready @11c
  BotQ.A BotLatency SU(2) 8c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 11
  Executed: 12c
  Critical: 11c, 11 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 13 BotQ.A
Queue BotQ.P: 1 0 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %62:gpr64common = LDRXui %stack.7.r.addr, 0, debug-location !1052 :: (dereferenceable load 8 from %ir.r.addr); cg.c:561:20
  Ready @13c
  BotQ.A BotLatency SU(4) 11c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 12
  Executed: 14c
  Critical: 12c, 12 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %57:gpr64common = LDRXui %stack.2.x.addr, 0, debug-location !1049 :: (dereferenceable load 8 from %ir.x.addr); cg.c:561:13
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 13
  Executed: 15c
  Critical: 13c, 13 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %58:gpr64common = LDRSWui %stack.9.j, 0, debug-location !1051 :: (dereferenceable load 4 from %ir.j); cg.c:561:15
  Ready @15c
  BotQ.A BotLatency SU(1) 12c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 14
  Executed: 16c
  Critical: 14c, 14 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.35 ***
SU(1):   %58:gpr64common = LDRSWui %stack.9.j, 0, debug-location !1051 :: (dereferenceable load 4 from %ir.j); cg.c:561:15
SU(0):   %57:gpr64common = LDRXui %stack.2.x.addr, 0, debug-location !1049 :: (dereferenceable load 8 from %ir.x.addr); cg.c:561:13
SU(4):   %62:gpr64common = LDRXui %stack.7.r.addr, 0, debug-location !1052 :: (dereferenceable load 8 from %ir.r.addr); cg.c:561:20
SU(2):   %60:gpr64 = UBFMXri %58:gpr64common, 61, 60, debug-location !1049; cg.c:561:13
SU(3):   %61:fpr64 = LDRDroX %57:gpr64common, %60:gpr64, 0, 0, debug-location !1049 :: (load 8 from %ir.arrayidx162); cg.c:561:13
SU(5):   %63:fpr64 = LDRDroX %62:gpr64common, %60:gpr64, 0, 0, debug-location !1052 :: (load 8 from %ir.arrayidx164); cg.c:561:20
SU(8):   %65:fpr64 = LDRDui %stack.14.sum, 0, debug-location !1056 :: (dereferenceable load 8 from %ir.sum); cg.c:562:15
SU(12):   %68:gpr32common = nsw ADDWri %58.sub_32:gpr64common, 1, 0, debug-location !1062; cg.c:560:46
SU(6):   %64:fpr64 = FSUBDrr %61:fpr64, %63:fpr64, debug-location !1054; cg.c:561:18
SU(7):   STRDui %64:fpr64, %stack.13.d, 0, debug-location !1055 :: (store 8 into %ir.d); cg.c:561:11
SU(9):   %66:fpr64 = FMULDrr %64:fpr64, %64:fpr64, debug-location !1059; cg.c:562:23
SU(10):   %67:fpr64 = FADDDrr %65:fpr64, %66:fpr64, debug-location !1060; cg.c:562:19
SU(11):   STRDui %67:fpr64, %stack.14.sum, 0, debug-location !1061 :: (store 8 into %ir.sum); cg.c:562:13
SU(13):   STRWui %68:gpr32common, %stack.9.j, 0, debug-location !1062 :: (store 4 into %ir.j); cg.c:560:46

********** MI Scheduling **********
conj_grad:%bb.36 for.end170
  From: %3:fpr64 = LDRDui %stack.14.sum, 0, debug-location !1066 :: (dereferenceable load 8 from %ir.sum); cg.c:565:19
    To: Bcc 7, %bb.38, implicit killed $nzcv, debug-location !1068; cg.c:565:6
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %3:fpr64 = LDRDui %stack.14.sum, 0, debug-location !1066 :: (dereferenceable load 8 from %ir.sum); cg.c:565:19
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(1): Data Latency=4 Reg=%3
  Single Issue       : false;
SU(1):   %247:fpr64 = FSQRTDr %3:fpr64, debug-location !1067; cg.c:565:14
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(0): Data Latency=4 Reg=%3
  Successors:
    SU(2): Data Latency=1 Reg=%247
  Single Issue       : false;
SU(2):   FCMPDrr %247:fpr64, %247:fpr64, implicit-def $nzcv, debug-location !1068; cg.c:565:6
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=%247
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 7, %bb.38, implicit killed $nzcv, debug-location !1068; cg.c:565:6
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) FCMPDrr %247:fpr64, %247:fpr64, implicit-def $nzcv, debug-location !1068; cg.c:565:6
  Ready @1c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %247:fpr64 = FSQRTDr %3:fpr64, debug-location !1067; cg.c:565:14
  Ready @2c
  BotQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %3:fpr64 = LDRDui %stack.14.sum, 0, debug-location !1066 :: (dereferenceable load 8 from %ir.sum); cg.c:565:19
  Ready @6c
  BotQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.36 ***
SU(0):   %3:fpr64 = LDRDui %stack.14.sum, 0, debug-location !1066 :: (dereferenceable load 8 from %ir.sum); cg.c:565:19
SU(1):   %247:fpr64 = FSQRTDr %3:fpr64, debug-location !1067; cg.c:565:14
SU(2):   FCMPDrr %247:fpr64, %247:fpr64, implicit-def $nzcv, debug-location !1068; cg.c:565:6

********** MI Scheduling **********
conj_grad:%bb.38 for.end170.split
  From: %56:gpr64common = LDRXui %fixed-stack.0, 0, debug-location !1068 :: (dereferenceable load 8 from %ir.rnorm.addr, align 16); cg.c:565:6
    To: RET_ReallyLR debug-location !1070; cg.c:566:1
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %56:gpr64common = LDRXui %fixed-stack.0, 0, debug-location !1068 :: (dereferenceable load 8 from %ir.rnorm.addr, align 16); cg.c:565:6
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=4 Reg=%56
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   STRDui %247:fpr64, %56:gpr64common, 0, debug-location !1069 :: (store 8 into %ir.155); cg.c:565:12
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%56
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   RET_ReallyLR debug-location !1070; cg.c:566:1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %247:fpr64, %56:gpr64common, 0, debug-location !1069 :: (store 8 into %ir.155); cg.c:565:12
  Ready @0c
  BotQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %56:gpr64common = LDRXui %fixed-stack.0, 0, debug-location !1068 :: (dereferenceable load 8 from %ir.rnorm.addr, align 16); cg.c:565:6
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   %56:gpr64common = LDRXui %fixed-stack.0, 0, debug-location !1068 :: (dereferenceable load 8 from %ir.rnorm.addr, align 16); cg.c:565:6
SU(1):   STRDui %247:fpr64, %56:gpr64common, 0, debug-location !1069 :: (store 8 into %ir.155); cg.c:565:12

********** INTERVALS **********
W0 [0B,128r:0)  0@0B-phi
W1 [0B,112r:0)  0@0B-phi
W2 [0B,96r:0)  0@0B-phi
W3 [0B,80r:0)  0@0B-phi
W4 [0B,64r:0)  0@0B-phi
W5 [0B,48r:0)  0@0B-phi
W6 [0B,32r:0)  0@0B-phi
W7 [0B,16r:0)  0@0B-phi
%0 [1872r,2144r:0)[2176B,2224r:0)  0@1872r weight:0.000000e+00
%1 [3616r,3824r:0)[3856B,3888r:0)  0@3616r weight:0.000000e+00
%2 [4848r,5120r:0)[5152B,5200r:0)  0@4848r weight:0.000000e+00
%3 [5768r,5888r:0)  0@5768r weight:0.000000e+00
%7 [128r,144r:0)  0@128r weight:0.000000e+00
%8 [112r,160r:0)  0@112r weight:0.000000e+00
%9 [96r,176r:0)  0@96r weight:0.000000e+00
%10 [80r,192r:0)  0@80r weight:0.000000e+00
%11 [64r,208r:0)  0@64r weight:0.000000e+00
%12 [48r,224r:0)  0@48r weight:0.000000e+00
%13 [32r,240r:0)  0@32r weight:0.000000e+00
%14 [16r,256r:0)  0@16r weight:0.000000e+00
%15 [272r,360r:0)  0@272r weight:0.000000e+00
%18 [424r,448r:0)  0@424r weight:0.000000e+00
%19 [368r,880B:0)  0@368r weight:0.000000e+00
%20 [416r,432r:0)  0@416r weight:0.000000e+00
%21 [432r,448r:0)  0@432r weight:0.000000e+00
%24 [1016r,1056r:0)  0@1016r weight:0.000000e+00
%25 [928r,5760B:0)  0@928r weight:0.000000e+00
%26 [992r,1024r:0)  0@992r weight:0.000000e+00
%27 [944r,5760B:0)  0@944r weight:0.000000e+00
%28 [1008r,1024r:0)  0@1008r weight:0.000000e+00
%29 [1024r,1040r:0)  0@1024r weight:0.000000e+00
%30 [1040r,1056r:0)  0@1040r weight:0.000000e+00
%32 [1312r,1352r:0)  0@1312r weight:0.000000e+00
%33 [1392r,1424r:0)  0@1392r weight:0.000000e+00
%34 [1408r,1424r:0)  0@1408r weight:0.000000e+00
%38 [4552r,4592r:0)  0@4552r weight:0.000000e+00
%40 [4528r,4560r:0)  0@4528r weight:0.000000e+00
%42 [4544r,4560r:0)  0@4544r weight:0.000000e+00
%43 [4560r,4576r:0)  0@4560r weight:0.000000e+00
%44 [4576r,4592r:0)  0@4576r weight:0.000000e+00
%47 [5384r,5424r:0)  0@5384r weight:0.000000e+00
%49 [5360r,5392r:0)  0@5360r weight:0.000000e+00
%51 [5376r,5392r:0)  0@5376r weight:0.000000e+00
%52 [5392r,5408r:0)  0@5392r weight:0.000000e+00
%53 [5408r,5424r:0)  0@5408r weight:0.000000e+00
%56 [6016r,6032r:0)  0@6016r weight:0.000000e+00
%57 [5512r,5576r:0)  0@5512r weight:0.000000e+00
%58 [5504r,5696r:0)  0@5504r weight:0.000000e+00
%60 [5572r,5584r:0)  0@5572r weight:0.000000e+00
%61 [5576r,5704r:0)  0@5576r weight:0.000000e+00
%62 [5568r,5584r:0)  0@5568r weight:0.000000e+00
%63 [5584r,5704r:0)  0@5584r weight:0.000000e+00
%64 [5704r,5720r:0)  0@5704r weight:0.000000e+00
%65 [5632r,5728r:0)  0@5632r weight:0.000000e+00
%66 [5720r,5728r:0)  0@5720r weight:0.000000e+00
%67 [5728r,5736r:0)  0@5728r weight:0.000000e+00
%68 [5696r,5744r:0)  0@5696r weight:0.000000e+00
%70 [4688r,4720r:0)  0@4688r weight:0.000000e+00
%71 [4704r,4720r:0)  0@4704r weight:0.000000e+00
%72 [4720r,4736r:0)  0@4720r weight:0.000000e+00
%73 [4808r,4864r:0)  0@4808r weight:0.000000e+00
%74 [4784r,4816r:0)  0@4784r weight:0.000000e+00
%75 [4800r,4816r:0)  0@4800r weight:0.000000e+00
%76 [4816r,4832r:0)  0@4816r weight:0.000000e+00
%77 [4832r,4864r:0)  0@4832r weight:0.000000e+00
%79 [5168r,5200r:0)  0@5168r weight:0.000000e+00
%80 [5184r,5200r:0)  0@5184r weight:0.000000e+00
%81 [5216r,5232r:0)  0@5216r weight:0.000000e+00
%82 [5232r,5248r:0)  0@5232r weight:0.000000e+00
%83 [5012r,5032r:0)  0@5012r weight:0.000000e+00
%84 [4944r,5104r:0)  0@4944r weight:0.000000e+00
%86 [5032r,5112r:0)  0@5032r weight:0.000000e+00
%87 [5016r,5040r:0)  0@5016r weight:0.000000e+00
%88 [5008r,5024r:0)  0@5008r weight:0.000000e+00
%89 [5024r,5040r:0)  0@5024r weight:0.000000e+00
%90 [5040r,5112r:0)  0@5040r weight:0.000000e+00
%91 [5112r,5120r:0)  0@5112r weight:0.000000e+00
%92 [5120r,5128r:0)  0@5120r weight:0.000000e+00
%93 [5104r,5136r:0)  0@5104r weight:0.000000e+00
%95 [1576r,1616r:0)  0@1576r weight:0.000000e+00
%96 [1344r,5280B:0)  0@1344r weight:0.000000e+00
%97 [1552r,1584r:0)  0@1552r weight:0.000000e+00
%98 [1360r,5280B:0)  0@1360r weight:0.000000e+00
%99 [1568r,1584r:0)  0@1568r weight:0.000000e+00
%100 [1584r,1600r:0)  0@1584r weight:0.000000e+00
%101 [1600r,1616r:0)  0@1600r weight:0.000000e+00
%105 [2440r,2480r:0)  0@2440r weight:0.000000e+00
%107 [2416r,2448r:0)  0@2416r weight:0.000000e+00
%109 [2432r,2448r:0)  0@2432r weight:0.000000e+00
%110 [2448r,2464r:0)  0@2448r weight:0.000000e+00
%111 [2464r,2480r:0)  0@2464r weight:0.000000e+00
%113 [2784r,2896r:0)  0@2784r weight:0.000000e+00
%114 [2800r,2888r:0)  0@2800r weight:0.000000e+00
%115 [2888r,2904r:0)  0@2888r weight:0.000000e+00
%118 [2984r,3024r:0)  0@2984r weight:0.000000e+00
%120 [2960r,2992r:0)  0@2960r weight:0.000000e+00
%122 [2976r,2992r:0)  0@2976r weight:0.000000e+00
%123 [2992r,3008r:0)  0@2992r weight:0.000000e+00
%124 [3008r,3024r:0)  0@3008r weight:0.000000e+00
%127 [3576r,3632r:0)  0@3576r weight:0.000000e+00
%129 [3552r,3584r:0)  0@3552r weight:0.000000e+00
%131 [3568r,3584r:0)  0@3568r weight:0.000000e+00
%132 [3584r,3624r:0)  0@3584r weight:0.000000e+00
%133 [3624r,3632r:0)  0@3624r weight:0.000000e+00
%135 [3872r,3888r:0)  0@3872r weight:0.000000e+00
%136 [3888r,3904r:0)  0@3888r weight:0.000000e+00
%138 [4008r,4048r:0)  0@4008r weight:0.000000e+00
%140 [3984r,4016r:0)  0@3984r weight:0.000000e+00
%142 [4000r,4016r:0)  0@4000r weight:0.000000e+00
%143 [4016r,4032r:0)  0@4016r weight:0.000000e+00
%144 [4032r,4048r:0)  0@4032r weight:0.000000e+00
%146 [4352r,4368r:0)  0@4352r weight:0.000000e+00
%147 [4368r,4384r:0)  0@4368r weight:0.000000e+00
%148 [4200r,4232r:0)  0@4200r weight:0.000000e+00
%149 [4128r,4208r:0)  0@4128r weight:0.000000e+00
%150 [4208r,4256r:0)  0@4208r weight:0.000000e+00
%151 [4232r,4248r:0)  0@4232r weight:0.000000e+00
%152 [4216r,4240r:0)  0@4216r weight:0.000000e+00
%153 [4192r,4256r:0)  0@4192r weight:0.000000e+00
%154 [4224r,4240r:0)  0@4224r weight:0.000000e+00
%155 [4240r,4248r:0)  0@4240r weight:0.000000e+00
%156 [4248r,4256r:0)  0@4248r weight:0.000000e+00
%157 [4272r,4288r:0)  0@4272r weight:0.000000e+00
%158 [4288r,4304r:0)  0@4288r weight:0.000000e+00
%159 [3696r,3744r:0)  0@3696r weight:0.000000e+00
%160 [3712r,3808r:0)  0@3712r weight:0.000000e+00
%162 [3744r,3816r:0)  0@3744r weight:0.000000e+00
%163 [3816r,3824r:0)  0@3816r weight:0.000000e+00
%164 [3824r,3832r:0)  0@3824r weight:0.000000e+00
%165 [3808r,3840r:0)  0@3808r weight:0.000000e+00
%166 [3176r,3232r:0)  0@3176r weight:0.000000e+00
%167 [3104r,3192r:0)  0@3104r weight:0.000000e+00
%168 [3192r,3232r:0)  0@3192r weight:0.000000e+00
%169 [3208r,3224r:0)  0@3208r weight:0.000000e+00
%170 [3184r,3216r:0)  0@3184r weight:0.000000e+00
%171 [3168r,3200r:0)  0@3168r weight:0.000000e+00
%172 [3200r,3216r:0)  0@3200r weight:0.000000e+00
%173 [3216r,3224r:0)  0@3216r weight:0.000000e+00
%174 [3224r,3232r:0)  0@3224r weight:0.000000e+00
%175 [3336r,3392r:0)  0@3336r weight:0.000000e+00
%176 [3264r,3344r:0)  0@3264r weight:0.000000e+00
%177 [3344r,3392r:0)  0@3344r weight:0.000000e+00
%178 [3368r,3384r:0)  0@3368r weight:0.000000e+00
%179 [3352r,3376r:0)  0@3352r weight:0.000000e+00
%180 [3328r,3360r:0)  0@3328r weight:0.000000e+00
%181 [3360r,3376r:0)  0@3360r weight:0.000000e+00
%182 [3376r,3384r:0)  0@3376r weight:0.000000e+00
%183 [3384r,3392r:0)  0@3384r weight:0.000000e+00
%184 [3408r,3424r:0)  0@3408r weight:0.000000e+00
%185 [3424r,3440r:0)  0@3424r weight:0.000000e+00
%186 [2664r,2736r:0)  0@2664r weight:0.000000e+00
%187 [2584r,2648r:0)  0@2584r weight:0.000000e+00
%188 [2576r,2720r:0)  0@2576r weight:0.000000e+00
%190 [2644r,2656r:0)  0@2644r weight:0.000000e+00
%191 [2648r,2728r:0)  0@2648r weight:0.000000e+00
%192 [2640r,2656r:0)  0@2640r weight:0.000000e+00
%193 [2656r,2728r:0)  0@2656r weight:0.000000e+00
%194 [2728r,2736r:0)  0@2728r weight:0.000000e+00
%195 [2736r,2744r:0)  0@2736r weight:0.000000e+00
%196 [2720r,2752r:0)  0@2720r weight:0.000000e+00
%198 [1712r,1744r:0)  0@1712r weight:0.000000e+00
%199 [1728r,1744r:0)  0@1728r weight:0.000000e+00
%200 [1744r,1760r:0)  0@1744r weight:0.000000e+00
%201 [1832r,1888r:0)  0@1832r weight:0.000000e+00
%202 [1808r,1840r:0)  0@1808r weight:0.000000e+00
%203 [1824r,1840r:0)  0@1824r weight:0.000000e+00
%204 [1840r,1856r:0)  0@1840r weight:0.000000e+00
%205 [1856r,1888r:0)  0@1856r weight:0.000000e+00
%207 [2192r,2224r:0)  0@2192r weight:0.000000e+00
%208 [2208r,2224r:0)  0@2208r weight:0.000000e+00
%209 [2240r,2256r:0)  0@2240r weight:0.000000e+00
%210 [2256r,2272r:0)  0@2256r weight:0.000000e+00
%211 [2036r,2056r:0)  0@2036r weight:0.000000e+00
%212 [1968r,2128r:0)  0@1968r weight:0.000000e+00
%214 [2056r,2136r:0)  0@2056r weight:0.000000e+00
%215 [2040r,2064r:0)  0@2040r weight:0.000000e+00
%216 [2032r,2048r:0)  0@2032r weight:0.000000e+00
%217 [2048r,2064r:0)  0@2048r weight:0.000000e+00
%218 [2064r,2136r:0)  0@2064r weight:0.000000e+00
%219 [2136r,2144r:0)  0@2136r weight:0.000000e+00
%220 [2144r,2152r:0)  0@2144r weight:0.000000e+00
%221 [2128r,2160r:0)  0@2128r weight:0.000000e+00
%222 [1192r,1264r:0)  0@1192r weight:0.000000e+00
%223 [1136r,1184r:0)  0@1136r weight:0.000000e+00
%224 [1152r,1248r:0)  0@1152r weight:0.000000e+00
%226 [1184r,1256r:0)  0@1184r weight:0.000000e+00
%227 [1256r,1264r:0)  0@1256r weight:0.000000e+00
%228 [1264r,1272r:0)  0@1264r weight:0.000000e+00
%229 [1248r,1280r:0)  0@1248r weight:0.000000e+00
%230 [512r,560r:0)  0@512r weight:0.000000e+00
%231 [528r,560r:0)  0@528r weight:0.000000e+00
%233 [576r,608r:0)  0@576r weight:0.000000e+00
%234 [592r,608r:0)  0@592r weight:0.000000e+00
%235 [648r,672r:0)  0@648r weight:0.000000e+00
%236 [640r,656r:0)  0@640r weight:0.000000e+00
%237 [656r,704r:0)  0@656r weight:0.000000e+00
%238 [672r,704r:0)  0@672r weight:0.000000e+00
%239 [688r,704r:0)  0@688r weight:0.000000e+00
%240 [744r,768r:0)  0@744r weight:0.000000e+00
%241 [736r,752r:0)  0@736r weight:0.000000e+00
%242 [752r,800r:0)  0@752r weight:0.000000e+00
%243 [768r,800r:0)  0@768r weight:0.000000e+00
%244 [784r,800r:0)  0@784r weight:0.000000e+00
%245 [816r,832r:0)  0@816r weight:0.000000e+00
%246 [832r,848r:0)  0@832r weight:0.000000e+00
%247 [5776r,5856B:0)[5936r,5984B:1)[5984B,6032r:2)  0@5776r 1@5936r 2@5984B-phi weight:0.000000e+00
RegMasks: 5904r
********** MACHINEINSTRS **********
# Machine code for function conj_grad: NoPHIs, TracksLiveness
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP]
  fi#0: size=8, align=8, at location [SP]
  fi#1: size=8, align=8, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=8, align=8, at location [SP]
  fi#4: size=8, align=8, at location [SP]
  fi#5: size=8, align=8, at location [SP]
  fi#6: size=8, align=8, at location [SP]
  fi#7: size=8, align=8, at location [SP]
  fi#8: dead
  fi#9: size=4, align=4, at location [SP]
  fi#10: size=4, align=4, at location [SP]
  fi#11: size=4, align=4, at location [SP]
  fi#12: size=4, align=4, at location [SP]
  fi#13: size=8, align=8, at location [SP]
  fi#14: size=8, align=8, at location [SP]
  fi#15: size=8, align=8, at location [SP]
  fi#16: size=8, align=8, at location [SP]
  fi#17: size=8, align=8, at location [SP]
  fi#18: size=8, align=8, at location [SP]
Function Live Ins: $x0 in %7, $x1 in %8, $x2 in %9, $x3 in %10, $x4 in %11, $x5 in %12, $x6 in %13, $x7 in %14

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $x0, $x1, $x2, $x3, $x4, $x5, $x6, $x7
16B	  %14:gpr64 = COPY $x7
32B	  %13:gpr64 = COPY $x6
48B	  %12:gpr64 = COPY $x5
64B	  %11:gpr64 = COPY $x4
80B	  %10:gpr64 = COPY $x3
96B	  %9:gpr64 = COPY $x2
112B	  %8:gpr64 = COPY $x1
128B	  %7:gpr64 = COPY $x0
144B	  STRXui %7:gpr64, %stack.0.colidx.addr, 0 :: (store 8 into %ir.colidx.addr)
160B	  STRXui %8:gpr64, %stack.1.rowstr.addr, 0 :: (store 8 into %ir.rowstr.addr)
176B	  STRXui %9:gpr64, %stack.2.x.addr, 0 :: (store 8 into %ir.x.addr)
192B	  STRXui %10:gpr64, %stack.3.z.addr, 0 :: (store 8 into %ir.z.addr)
208B	  STRXui %11:gpr64, %stack.4.a.addr, 0 :: (store 8 into %ir.a.addr)
224B	  STRXui %12:gpr64, %stack.5.p.addr, 0 :: (store 8 into %ir.p.addr)
240B	  STRXui %13:gpr64, %stack.6.q.addr, 0 :: (store 8 into %ir.q.addr)
256B	  STRXui %14:gpr64, %stack.7.r.addr, 0 :: (store 8 into %ir.r.addr)
272B	  %15:gpr32 = MOVi32imm 25
320B	  STRXui $xzr, %stack.15.rho, 0, debug-location !756 :: (store 8 into %ir.rho); cg.c:409:9
352B	  STRWui $wzr, %stack.9.j, 0, debug-location !757 :: (store 4 into %ir.j); cg.c:414:12
360B	  STRWui %15:gpr32, %stack.12.cgitmax, 0, debug-location !743 :: (store 4 into %ir.cgitmax); cg.c:406:15
368B	  %19:gpr64common = ADRP target-flags(aarch64-page) @naa

384B	bb.1.for.cond:
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

416B	  %20:gpr32common = LDRWui %19:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !762 :: (dereferenceable load 4 from @naa); cg.c:414:21
424B	  %18:gpr32 = LDRWui %stack.9.j, 0, debug-location !760 :: (dereferenceable load 4 from %ir.j); cg.c:414:17
432B	  %21:gpr32common = nsw ADDWri %20:gpr32common, 1, 0, debug-location !763; cg.c:414:25
448B	  dead $wzr = SUBSWrr %18:gpr32, %21:gpr32common, implicit-def $nzcv, debug-location !765; cg.c:414:5
464B	  Bcc 10, %bb.3, implicit killed $nzcv, debug-location !765; cg.c:414:5
480B	  B %bb.2, debug-location !765; cg.c:414:5

496B	bb.2.for.body:
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

512B	  %230:gpr64common = LDRXui %stack.6.q.addr, 0, debug-location !766 :: (dereferenceable load 8 from %ir.q.addr); cg.c:415:9
528B	  %231:gpr64 = LDRSWui %stack.9.j, 0, debug-location !768 :: (dereferenceable load 4 from %ir.j); cg.c:415:11
560B	  STRXroX $xzr, %230:gpr64common, %231:gpr64, 0, 1, debug-location !769 :: (store 8 into %ir.arrayidx); cg.c:415:14
576B	  %233:gpr64common = LDRXui %stack.3.z.addr, 0, debug-location !770 :: (dereferenceable load 8 from %ir.z.addr); cg.c:416:9
592B	  %234:gpr64 = LDRSWui %stack.9.j, 0, debug-location !771 :: (dereferenceable load 4 from %ir.j); cg.c:416:11
608B	  STRXroX $xzr, %233:gpr64common, %234:gpr64, 0, 1, debug-location !772 :: (store 8 into %ir.arrayidx2); cg.c:416:14
640B	  %236:gpr64 = LDRSWui %stack.9.j, 0, debug-location !774 :: (dereferenceable load 4 from %ir.j); cg.c:417:18
648B	  %235:gpr64common = LDRXui %stack.2.x.addr, 0, debug-location !773 :: (dereferenceable load 8 from %ir.x.addr); cg.c:417:16
656B	  %237:gpr64 = UBFMXri %236:gpr64, 61, 60, debug-location !773; cg.c:417:16
672B	  %238:fpr64 = LDRDroX %235:gpr64common, %237:gpr64, 0, 0, debug-location !773 :: (load 8 from %ir.arrayidx4); cg.c:417:16
688B	  %239:gpr64common = LDRXui %stack.7.r.addr, 0, debug-location !775 :: (dereferenceable load 8 from %ir.r.addr); cg.c:417:9
704B	  STRDroX %238:fpr64, %239:gpr64common, %237:gpr64, 0, 0, debug-location !777 :: (store 8 into %ir.arrayidx6); cg.c:417:14
736B	  %241:gpr64 = LDRSWui %stack.9.j, 0, debug-location !779 :: (dereferenceable load 4 from %ir.j); cg.c:418:18
744B	  %240:gpr64common = LDRXui %stack.7.r.addr, 0, debug-location !778 :: (dereferenceable load 8 from %ir.r.addr); cg.c:418:16
752B	  %242:gpr64 = UBFMXri %241:gpr64, 61, 60, debug-location !778; cg.c:418:16
768B	  %243:fpr64 = LDRDroX %240:gpr64common, %242:gpr64, 0, 0, debug-location !778 :: (load 8 from %ir.arrayidx8); cg.c:418:16
784B	  %244:gpr64common = LDRXui %stack.5.p.addr, 0, debug-location !780 :: (dereferenceable load 8 from %ir.p.addr); cg.c:418:9
800B	  STRDroX %243:fpr64, %244:gpr64common, %242:gpr64, 0, 0, debug-location !782 :: (store 8 into %ir.arrayidx10); cg.c:418:14
816B	  %245:gpr32common = LDRWui %stack.9.j, 0, debug-location !783 :: (dereferenceable load 4 from %ir.j); cg.c:414:31
832B	  %246:gpr32common = nsw ADDWri %245:gpr32common, 1, 0, debug-location !783; cg.c:414:31
848B	  STRWui %246:gpr32common, %stack.9.j, 0, debug-location !783 :: (store 4 into %ir.j); cg.c:414:31
864B	  B %bb.1, debug-location !784; cg.c:414:5

880B	bb.3.for.end:
	; predecessors: %bb.1
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

912B	  STRWui $wzr, %stack.9.j, 0, debug-location !787 :: (store 4 into %ir.j); cg.c:425:12
928B	  %25:gpr64common = ADRP target-flags(aarch64-page) @lastcol
944B	  %27:gpr64common = ADRP target-flags(aarch64-page) @firstcol

960B	bb.4.for.cond11:
	; predecessors: %bb.3, %bb.5
	  successors: %bb.5(0x7c000000), %bb.6(0x04000000); %bb.5(96.88%), %bb.6(3.12%)

992B	  %26:gpr32 = LDRWui %25:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !792 :: (dereferenceable load 4 from @lastcol); cg.c:425:21
1008B	  %28:gpr32 = LDRWui %27:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !793 :: (dereferenceable load 4 from @firstcol); cg.c:425:31
1016B	  %24:gpr32 = LDRWui %stack.9.j, 0, debug-location !790 :: (dereferenceable load 4 from %ir.j); cg.c:425:17
1024B	  %29:gpr32common = nsw SUBWrr %26:gpr32, %28:gpr32, debug-location !794; cg.c:425:29
1040B	  %30:gpr32common = nsw ADDWri %29:gpr32common, 1, 0, debug-location !795; cg.c:425:40
1056B	  dead $wzr = SUBSWrr %24:gpr32, %30:gpr32common, implicit-def $nzcv, debug-location !797; cg.c:425:5
1072B	  Bcc 10, %bb.6, implicit killed $nzcv, debug-location !797; cg.c:425:5
1088B	  B %bb.5, debug-location !797; cg.c:425:5

1104B	bb.5.for.body14:
	; predecessors: %bb.4
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

1136B	  %223:gpr64common = LDRXui %stack.7.r.addr, 0, debug-location !800 :: (dereferenceable load 8 from %ir.r.addr); cg.c:426:21
1152B	  %224:gpr64common = LDRSWui %stack.9.j, 0, debug-location !801 :: (dereferenceable load 4 from %ir.j); cg.c:426:23
1184B	  %226:fpr64 = LDRDroX %223:gpr64common, %224:gpr64common, 0, 1, debug-location !800 :: (load 8 from %ir.arrayidx18); cg.c:426:21
1192B	  %222:fpr64 = LDRDui %stack.15.rho, 0, debug-location !798 :: (dereferenceable load 8 from %ir.rho); cg.c:426:15
1248B	  %229:gpr32common = nsw ADDWri %224.sub_32:gpr64common, 1, 0, debug-location !807; cg.c:425:46
1256B	  %227:fpr64 = FMULDrr %226:fpr64, %226:fpr64, debug-location !804; cg.c:426:26
1264B	  %228:fpr64 = FADDDrr %222:fpr64, %227:fpr64, debug-location !805; cg.c:426:19
1272B	  STRDui %228:fpr64, %stack.15.rho, 0, debug-location !806 :: (store 8 into %ir.rho); cg.c:426:13
1280B	  STRWui %229:gpr32common, %stack.9.j, 0, debug-location !807 :: (store 4 into %ir.j); cg.c:425:46
1288B	  B %bb.4, debug-location !808; cg.c:425:5

1296B	bb.6.for.end22:
	; predecessors: %bb.4
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

1312B	  %32:gpr32 = MOVi32imm 1
1344B	  %96:gpr64common = ADRP target-flags(aarch64-page) @lastrow
1352B	  STRWui %32:gpr32, %stack.11.cgit, 0, debug-location !811 :: (store 4 into %ir.cgit); cg.c:434:15
1360B	  %98:gpr64common = ADRP target-flags(aarch64-page) @firstrow

1376B	bb.7.for.cond23:
	; predecessors: %bb.6, %bb.26
	  successors: %bb.8(0x7c000000), %bb.27(0x04000000); %bb.8(96.88%), %bb.27(3.12%)

1392B	  %33:gpr32 = LDRWui %stack.11.cgit, 0, debug-location !814 :: (dereferenceable load 4 from %ir.cgit); cg.c:434:20
1408B	  %34:gpr32 = LDRWui %stack.12.cgitmax, 0, debug-location !816 :: (dereferenceable load 4 from %ir.cgitmax); cg.c:434:28
1424B	  dead $wzr = SUBSWrr %33:gpr32, %34:gpr32, implicit-def $nzcv, debug-location !818; cg.c:434:5
1440B	  Bcc 12, %bb.27, implicit killed $nzcv, debug-location !818; cg.c:434:5
1456B	  B %bb.8, debug-location !818; cg.c:434:5

1472B	bb.8.for.body25:
	; predecessors: %bb.7
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

1504B	  STRWui $wzr, %stack.9.j, 0, debug-location !819 :: (store 4 into %ir.j); cg.c:447:16

1520B	bb.9.for.cond26:
	; predecessors: %bb.8, %bb.13
	  successors: %bb.10(0x7c000000), %bb.14(0x04000000); %bb.10(96.88%), %bb.14(3.12%)

1552B	  %97:gpr32 = LDRWui %96:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !825 :: (dereferenceable load 4 from @lastrow); cg.c:447:25
1568B	  %99:gpr32 = LDRWui %98:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !826 :: (dereferenceable load 4 from @firstrow); cg.c:447:35
1576B	  %95:gpr32 = LDRWui %stack.9.j, 0, debug-location !823 :: (dereferenceable load 4 from %ir.j); cg.c:447:21
1584B	  %100:gpr32common = nsw SUBWrr %97:gpr32, %99:gpr32, debug-location !827; cg.c:447:33
1600B	  %101:gpr32common = nsw ADDWri %100:gpr32common, 1, 0, debug-location !828; cg.c:447:44
1616B	  dead $wzr = SUBSWrr %95:gpr32, %101:gpr32common, implicit-def $nzcv, debug-location !830; cg.c:447:9
1632B	  Bcc 10, %bb.14, implicit killed $nzcv, debug-location !830; cg.c:447:9
1648B	  B %bb.10, debug-location !830; cg.c:447:9

1664B	bb.10.for.body30:
	; predecessors: %bb.9
	  successors: %bb.11(0x80000000); %bb.11(100.00%)

1712B	  %198:gpr64common = LDRXui %stack.1.rowstr.addr, 0, debug-location !833 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:22
1728B	  %199:gpr64 = LDRSWui %stack.9.j, 0, debug-location !835 :: (dereferenceable load 4 from %ir.j); cg.c:449:29
1736B	  STRXui $xzr, %stack.14.sum, 0, debug-location !831 :: (store 8 into %ir.sum); cg.c:448:17
1744B	  %200:gpr32 = LDRWroX %198:gpr64common, %199:gpr64, 0, 1, debug-location !833 :: (load 4 from %ir.arrayidx32); cg.c:449:22
1760B	  STRWui %200:gpr32, %stack.10.k, 0, debug-location !836 :: (store 4 into %ir.k); cg.c:449:20

1776B	bb.11.for.cond33:
	; predecessors: %bb.10, %bb.12
	  successors: %bb.12(0x7c000000), %bb.13(0x04000000); %bb.12(96.88%), %bb.13(3.12%)

1808B	  %202:gpr64 = LDRXui %stack.1.rowstr.addr, 0, debug-location !840 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:37
1824B	  %203:gpr64 = LDRSWui %stack.9.j, 0, debug-location !841 :: (dereferenceable load 4 from %ir.j); cg.c:449:44
1832B	  %201:gpr32 = LDRWui %stack.10.k, 0, debug-location !838 :: (dereferenceable load 4 from %ir.k); cg.c:449:33
1840B	  %204:gpr64common = ADDXrs %202:gpr64, %203:gpr64, 2, debug-location !840; cg.c:449:37
1856B	  %205:gpr32 = LDRWui %204:gpr64common, 1, debug-location !840 :: (load 4 from %ir.arrayidx36); cg.c:449:37
1872B	  %0:fpr64 = LDRDui %stack.14.sum, 0, debug-location !844 :: (dereferenceable load 8 from %ir.sum); cg.c:0
1888B	  dead $wzr = SUBSWrr %201:gpr32, %205:gpr32, implicit-def $nzcv, debug-location !845; cg.c:449:13
1904B	  Bcc 10, %bb.13, implicit killed $nzcv, debug-location !845; cg.c:449:13
1920B	  B %bb.12, debug-location !845; cg.c:449:13

1936B	bb.12.for.body38:
	; predecessors: %bb.11
	  successors: %bb.11(0x80000000); %bb.11(100.00%)

1968B	  %212:gpr64common = LDRSWui %stack.10.k, 0, debug-location !848 :: (dereferenceable load 4 from %ir.k); cg.c:450:31
2032B	  %216:gpr64common = LDRXui %stack.0.colidx.addr, 0, debug-location !850 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:450:38
2036B	  %211:gpr64common = LDRXui %stack.4.a.addr, 0, debug-location !846 :: (dereferenceable load 8 from %ir.a.addr); cg.c:450:29
2040B	  %215:gpr64common = LDRXui %stack.5.p.addr, 0, debug-location !849 :: (dereferenceable load 8 from %ir.p.addr); cg.c:450:36
2048B	  %217:gpr64 = LDRSWroX %216:gpr64common, %212:gpr64common, 0, 1, debug-location !850 :: (load 4 from %ir.arrayidx42); cg.c:450:38
2056B	  %214:fpr64 = LDRDroX %211:gpr64common, %212:gpr64common, 0, 1, debug-location !846 :: (load 8 from %ir.arrayidx40); cg.c:450:29
2064B	  %218:fpr64 = LDRDroX %215:gpr64common, %217:gpr64, 0, 1, debug-location !849 :: (load 8 from %ir.arrayidx44); cg.c:450:36
2128B	  %221:gpr32common = nsw ADDWri %212.sub_32:gpr64common, 1, 0, debug-location !855; cg.c:449:53
2136B	  %219:fpr64 = FMULDrr %214:fpr64, %218:fpr64, debug-location !852; cg.c:450:34
2144B	  %220:fpr64 = FADDDrr %0:fpr64, %219:fpr64, debug-location !853; cg.c:450:27
2152B	  STRDui %220:fpr64, %stack.14.sum, 0, debug-location !854 :: (store 8 into %ir.sum); cg.c:450:21
2160B	  STRWui %221:gpr32common, %stack.10.k, 0, debug-location !855 :: (store 4 into %ir.k); cg.c:449:53
2168B	  B %bb.11, debug-location !856; cg.c:449:13

2176B	bb.13.for.end49:
	; predecessors: %bb.11
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

2192B	  %207:gpr64common = LDRXui %stack.6.q.addr, 0, debug-location !859 :: (dereferenceable load 8 from %ir.q.addr); cg.c:452:13
2208B	  %208:gpr64 = LDRSWui %stack.9.j, 0, debug-location !860 :: (dereferenceable load 4 from %ir.j); cg.c:452:15
2224B	  STRDroX %0:fpr64, %207:gpr64common, %208:gpr64, 0, 1, debug-location !861 :: (store 8 into %ir.arrayidx51); cg.c:452:18
2240B	  %209:gpr32common = LDRWui %stack.9.j, 0, debug-location !862 :: (dereferenceable load 4 from %ir.j); cg.c:447:50
2256B	  %210:gpr32common = nsw ADDWri %209:gpr32common, 1, 0, debug-location !862; cg.c:447:50
2272B	  STRWui %210:gpr32common, %stack.9.j, 0, debug-location !862 :: (store 4 into %ir.j); cg.c:447:50
2288B	  B %bb.9, debug-location !863; cg.c:447:9

2304B	bb.14.for.end54:
	; predecessors: %bb.9
	  successors: %bb.15(0x80000000); %bb.15(100.00%)

2336B	  STRXui $xzr, %stack.13.d, 0, debug-location !866 :: (store 8 into %ir.d); cg.c:496:11
2368B	  STRWui $wzr, %stack.9.j, 0, debug-location !867 :: (store 4 into %ir.j); cg.c:497:16

2384B	bb.15.for.cond55:
	; predecessors: %bb.14, %bb.16
	  successors: %bb.16(0x7c000000), %bb.17(0x04000000); %bb.16(96.88%), %bb.17(3.12%)

2416B	  %107:gpr32 = LDRWui %25:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !872 :: (dereferenceable load 4 from @lastcol); cg.c:497:25
2432B	  %109:gpr32 = LDRWui %27:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !873 :: (dereferenceable load 4 from @firstcol); cg.c:497:35
2440B	  %105:gpr32 = LDRWui %stack.9.j, 0, debug-location !870 :: (dereferenceable load 4 from %ir.j); cg.c:497:21
2448B	  %110:gpr32common = nsw SUBWrr %107:gpr32, %109:gpr32, debug-location !874; cg.c:497:33
2464B	  %111:gpr32common = nsw ADDWri %110:gpr32common, 1, 0, debug-location !875; cg.c:497:44
2480B	  dead $wzr = SUBSWrr %105:gpr32, %111:gpr32common, implicit-def $nzcv, debug-location !877; cg.c:497:9
2496B	  Bcc 10, %bb.17, implicit killed $nzcv, debug-location !877; cg.c:497:9
2512B	  B %bb.16, debug-location !877; cg.c:497:9

2528B	bb.16.for.body59:
	; predecessors: %bb.15
	  successors: %bb.15(0x80000000); %bb.15(100.00%)

2576B	  %188:gpr64common = LDRSWui %stack.9.j, 0, debug-location !881 :: (dereferenceable load 4 from %ir.j); cg.c:498:23
2584B	  %187:gpr64common = LDRXui %stack.5.p.addr, 0, debug-location !880 :: (dereferenceable load 8 from %ir.p.addr); cg.c:498:21
2640B	  %192:gpr64common = LDRXui %stack.6.q.addr, 0, debug-location !882 :: (dereferenceable load 8 from %ir.q.addr); cg.c:498:28
2644B	  %190:gpr64 = UBFMXri %188:gpr64common, 61, 60, debug-location !880; cg.c:498:21
2648B	  %191:fpr64 = LDRDroX %187:gpr64common, %190:gpr64, 0, 0, debug-location !880 :: (load 8 from %ir.arrayidx61); cg.c:498:21
2656B	  %193:fpr64 = LDRDroX %192:gpr64common, %190:gpr64, 0, 0, debug-location !882 :: (load 8 from %ir.arrayidx63); cg.c:498:28
2664B	  %186:fpr64 = LDRDui %stack.13.d, 0, debug-location !878 :: (dereferenceable load 8 from %ir.d); cg.c:498:17
2720B	  %196:gpr32common = nsw ADDWri %188.sub_32:gpr64common, 1, 0, debug-location !887; cg.c:497:50
2728B	  %194:fpr64 = FMULDrr %191:fpr64, %193:fpr64, debug-location !884; cg.c:498:26
2736B	  %195:fpr64 = FADDDrr %186:fpr64, %194:fpr64, debug-location !885; cg.c:498:19
2744B	  STRDui %195:fpr64, %stack.13.d, 0, debug-location !886 :: (store 8 into %ir.d); cg.c:498:15
2752B	  STRWui %196:gpr32common, %stack.9.j, 0, debug-location !887 :: (store 4 into %ir.j); cg.c:497:50
2760B	  B %bb.15, debug-location !888; cg.c:497:9

2768B	bb.17.for.end68:
	; predecessors: %bb.15
	  successors: %bb.18(0x80000000); %bb.18(100.00%)

2784B	  %113:fpr64 = LDRDui %stack.15.rho, 0, debug-location !891 :: (dereferenceable load 8 from %ir.rho); cg.c:504:17
2800B	  %114:fpr64 = LDRDui %stack.13.d, 0, debug-location !892 :: (dereferenceable load 8 from %ir.d); cg.c:504:23
2880B	  STRXui $xzr, %stack.15.rho, 0, debug-location !897 :: (store 8 into %ir.rho); cg.c:515:13
2888B	  %115:fpr64 = FDIVDrr %113:fpr64, %114:fpr64, debug-location !893; cg.c:504:21
2896B	  STRDui %113:fpr64, %stack.16.rho0, 0, debug-location !896 :: (store 8 into %ir.rho0); cg.c:509:14
2904B	  STRDui %115:fpr64, %stack.17.alpha, 0, debug-location !894 :: (store 8 into %ir.alpha); cg.c:504:15
2920B	  STRWui $wzr, %stack.9.j, 0, debug-location !898 :: (store 4 into %ir.j); cg.c:516:16

2928B	bb.18.for.cond69:
	; predecessors: %bb.17, %bb.19
	  successors: %bb.19(0x7c000000), %bb.20(0x04000000); %bb.19(96.88%), %bb.20(3.12%)

2960B	  %120:gpr32 = LDRWui %25:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !903 :: (dereferenceable load 4 from @lastcol); cg.c:516:25
2976B	  %122:gpr32 = LDRWui %27:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !904 :: (dereferenceable load 4 from @firstcol); cg.c:516:35
2984B	  %118:gpr32 = LDRWui %stack.9.j, 0, debug-location !901 :: (dereferenceable load 4 from %ir.j); cg.c:516:21
2992B	  %123:gpr32common = nsw SUBWrr %120:gpr32, %122:gpr32, debug-location !905; cg.c:516:33
3008B	  %124:gpr32common = nsw ADDWri %123:gpr32common, 1, 0, debug-location !906; cg.c:516:44
3024B	  dead $wzr = SUBSWrr %118:gpr32, %124:gpr32common, implicit-def $nzcv, debug-location !908; cg.c:516:9
3040B	  Bcc 10, %bb.20, implicit killed $nzcv, debug-location !908; cg.c:516:9
3056B	  B %bb.19, debug-location !908; cg.c:516:9

3072B	bb.19.for.body73:
	; predecessors: %bb.18
	  successors: %bb.18(0x80000000); %bb.18(100.00%)

3104B	  %167:gpr64 = LDRSWui %stack.9.j, 0, debug-location !911 :: (dereferenceable load 4 from %ir.j); cg.c:517:22
3168B	  %171:gpr64common = LDRXui %stack.5.p.addr, 0, debug-location !913 :: (dereferenceable load 8 from %ir.p.addr); cg.c:517:35
3176B	  %166:gpr64common = LDRXui %stack.3.z.addr, 0, debug-location !909 :: (dereferenceable load 8 from %ir.z.addr); cg.c:517:20
3184B	  %170:fpr64 = LDRDui %stack.17.alpha, 0, debug-location !912 :: (dereferenceable load 8 from %ir.alpha); cg.c:517:27
3192B	  %168:gpr64 = UBFMXri %167:gpr64, 61, 60, debug-location !909; cg.c:517:20
3200B	  %172:fpr64 = LDRDroX %171:gpr64common, %168:gpr64, 0, 0, debug-location !913 :: (load 8 from %ir.arrayidx77); cg.c:517:35
3208B	  %169:fpr64 = LDRDroX %166:gpr64common, %168:gpr64, 0, 0, debug-location !909 :: (load 8 from %ir.arrayidx75); cg.c:517:20
3216B	  %173:fpr64 = FMULDrr %170:fpr64, %172:fpr64, debug-location !915; cg.c:517:33
3224B	  %174:fpr64 = FADDDrr %169:fpr64, %173:fpr64, debug-location !916; cg.c:517:25
3232B	  STRDroX %174:fpr64, %166:gpr64common, %168:gpr64, 0, 0, debug-location !919 :: (store 8 into %ir.arrayidx81); cg.c:517:18
3264B	  %176:gpr64 = LDRSWui %stack.9.j, 0, debug-location !921 :: (dereferenceable load 4 from %ir.j); cg.c:518:22
3328B	  %180:gpr64common = LDRXui %stack.6.q.addr, 0, debug-location !923 :: (dereferenceable load 8 from %ir.q.addr); cg.c:518:35
3336B	  %175:gpr64common = LDRXui %stack.7.r.addr, 0, debug-location !920 :: (dereferenceable load 8 from %ir.r.addr); cg.c:518:20
3344B	  %177:gpr64 = UBFMXri %176:gpr64, 61, 60, debug-location !920; cg.c:518:20
3352B	  %179:fpr64 = LDRDui %stack.17.alpha, 0, debug-location !922 :: (dereferenceable load 8 from %ir.alpha); cg.c:518:27
3360B	  %181:fpr64 = LDRDroX %180:gpr64common, %177:gpr64, 0, 0, debug-location !923 :: (load 8 from %ir.arrayidx85); cg.c:518:35
3368B	  %178:fpr64 = LDRDroX %175:gpr64common, %177:gpr64, 0, 0, debug-location !920 :: (load 8 from %ir.arrayidx83); cg.c:518:20
3376B	  %182:fpr64 = FMULDrr %179:fpr64, %181:fpr64, debug-location !925; cg.c:518:33
3384B	  %183:fpr64 = FSUBDrr %178:fpr64, %182:fpr64, debug-location !926; cg.c:518:25
3392B	  STRDroX %183:fpr64, %175:gpr64common, %177:gpr64, 0, 0, debug-location !929 :: (store 8 into %ir.arrayidx89); cg.c:518:18
3408B	  %184:gpr32common = LDRWui %stack.9.j, 0, debug-location !930 :: (dereferenceable load 4 from %ir.j); cg.c:516:50
3424B	  %185:gpr32common = nsw ADDWri %184:gpr32common, 1, 0, debug-location !930; cg.c:516:50
3440B	  STRWui %185:gpr32common, %stack.9.j, 0, debug-location !930 :: (store 4 into %ir.j); cg.c:516:50
3456B	  B %bb.18, debug-location !931; cg.c:516:9

3472B	bb.20.for.end92:
	; predecessors: %bb.18
	  successors: %bb.21(0x80000000); %bb.21(100.00%)

3504B	  STRWui $wzr, %stack.9.j, 0, debug-location !934 :: (store 4 into %ir.j); cg.c:526:16

3520B	bb.21.for.cond93:
	; predecessors: %bb.20, %bb.22
	  successors: %bb.22(0x7c000000), %bb.23(0x04000000); %bb.22(96.88%), %bb.23(3.12%)

3552B	  %129:gpr32 = LDRWui %25:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !939 :: (dereferenceable load 4 from @lastcol); cg.c:526:25
3568B	  %131:gpr32 = LDRWui %27:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !940 :: (dereferenceable load 4 from @firstcol); cg.c:526:35
3576B	  %127:gpr32 = LDRWui %stack.9.j, 0, debug-location !937 :: (dereferenceable load 4 from %ir.j); cg.c:526:21
3584B	  %132:gpr32common = nsw SUBWrr %129:gpr32, %131:gpr32, debug-location !941; cg.c:526:33
3616B	  %1:fpr64 = LDRDui %stack.15.rho, 0, debug-location !944 :: (dereferenceable load 8 from %ir.rho); cg.c:0
3624B	  %133:gpr32common = nsw ADDWri %132:gpr32common, 1, 0, debug-location !942; cg.c:526:44
3632B	  dead $wzr = SUBSWrr %127:gpr32, %133:gpr32common, implicit-def $nzcv, debug-location !945; cg.c:526:9
3648B	  Bcc 10, %bb.23, implicit killed $nzcv, debug-location !945; cg.c:526:9
3664B	  B %bb.22, debug-location !945; cg.c:526:9

3680B	bb.22.for.body97:
	; predecessors: %bb.21
	  successors: %bb.21(0x80000000); %bb.21(100.00%)

3696B	  %159:gpr64common = LDRXui %stack.7.r.addr, 0, debug-location !946 :: (dereferenceable load 8 from %ir.r.addr); cg.c:527:25
3712B	  %160:gpr64common = LDRSWui %stack.9.j, 0, debug-location !948 :: (dereferenceable load 4 from %ir.j); cg.c:527:27
3744B	  %162:fpr64 = LDRDroX %159:gpr64common, %160:gpr64common, 0, 1, debug-location !946 :: (load 8 from %ir.arrayidx101); cg.c:527:25
3808B	  %165:gpr32common = nsw ADDWri %160.sub_32:gpr64common, 1, 0, debug-location !954; cg.c:526:50
3816B	  %163:fpr64 = FMULDrr %162:fpr64, %162:fpr64, debug-location !951; cg.c:527:30
3824B	  %164:fpr64 = FADDDrr %1:fpr64, %163:fpr64, debug-location !952; cg.c:527:23
3832B	  STRDui %164:fpr64, %stack.15.rho, 0, debug-location !953 :: (store 8 into %ir.rho); cg.c:527:17
3840B	  STRWui %165:gpr32common, %stack.9.j, 0, debug-location !954 :: (store 4 into %ir.j); cg.c:526:50
3848B	  B %bb.21, debug-location !955; cg.c:526:9

3856B	bb.23.for.end106:
	; predecessors: %bb.21
	  successors: %bb.24(0x80000000); %bb.24(100.00%)

3872B	  %135:fpr64 = LDRDui %stack.16.rho0, 0, debug-location !958 :: (dereferenceable load 8 from %ir.rho0); cg.c:533:22
3888B	  %136:fpr64 = FDIVDrr %1:fpr64, %135:fpr64, debug-location !959; cg.c:533:20
3904B	  STRDui %136:fpr64, %stack.18.beta, 0, debug-location !960 :: (store 8 into %ir.beta); cg.c:533:14
3936B	  STRWui $wzr, %stack.9.j, 0, debug-location !961 :: (store 4 into %ir.j); cg.c:538:16

3952B	bb.24.for.cond108:
	; predecessors: %bb.23, %bb.25
	  successors: %bb.25(0x7c000000), %bb.26(0x04000000); %bb.25(96.88%), %bb.26(3.12%)

3984B	  %140:gpr32 = LDRWui %25:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !966 :: (dereferenceable load 4 from @lastcol); cg.c:538:25
4000B	  %142:gpr32 = LDRWui %27:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !967 :: (dereferenceable load 4 from @firstcol); cg.c:538:35
4008B	  %138:gpr32 = LDRWui %stack.9.j, 0, debug-location !964 :: (dereferenceable load 4 from %ir.j); cg.c:538:21
4016B	  %143:gpr32common = nsw SUBWrr %140:gpr32, %142:gpr32, debug-location !968; cg.c:538:33
4032B	  %144:gpr32common = nsw ADDWri %143:gpr32common, 1, 0, debug-location !969; cg.c:538:44
4048B	  dead $wzr = SUBSWrr %138:gpr32, %144:gpr32common, implicit-def $nzcv, debug-location !971; cg.c:538:9
4064B	  Bcc 10, %bb.26, implicit killed $nzcv, debug-location !971; cg.c:538:9
4080B	  B %bb.25, debug-location !971; cg.c:538:9

4096B	bb.25.for.body112:
	; predecessors: %bb.24
	  successors: %bb.24(0x80000000); %bb.24(100.00%)

4128B	  %149:gpr64 = LDRSWui %stack.9.j, 0, debug-location !974 :: (dereferenceable load 4 from %ir.j); cg.c:539:22
4192B	  %153:gpr64common = LDRXui %stack.5.p.addr, 0, debug-location !976 :: (dereferenceable load 8 from %ir.p.addr); cg.c:539:34
4200B	  %148:gpr64common = LDRXui %stack.7.r.addr, 0, debug-location !972 :: (dereferenceable load 8 from %ir.r.addr); cg.c:539:20
4208B	  %150:gpr64 = UBFMXri %149:gpr64, 61, 60, debug-location !972; cg.c:539:20
4216B	  %152:fpr64 = LDRDui %stack.18.beta, 0, debug-location !975 :: (dereferenceable load 8 from %ir.beta); cg.c:539:27
4224B	  %154:fpr64 = LDRDroX %153:gpr64common, %150:gpr64, 0, 0, debug-location !976 :: (load 8 from %ir.arrayidx116); cg.c:539:34
4232B	  %151:fpr64 = LDRDroX %148:gpr64common, %150:gpr64, 0, 0, debug-location !972 :: (load 8 from %ir.arrayidx114); cg.c:539:20
4240B	  %155:fpr64 = FMULDrr %152:fpr64, %154:fpr64, debug-location !978; cg.c:539:32
4248B	  %156:fpr64 = FADDDrr %151:fpr64, %155:fpr64, debug-location !979; cg.c:539:25
4256B	  STRDroX %156:fpr64, %153:gpr64common, %150:gpr64, 0, 0, debug-location !982 :: (store 8 into %ir.arrayidx120); cg.c:539:18
4272B	  %157:gpr32common = LDRWui %stack.9.j, 0, debug-location !983 :: (dereferenceable load 4 from %ir.j); cg.c:538:50
4288B	  %158:gpr32common = nsw ADDWri %157:gpr32common, 1, 0, debug-location !983; cg.c:538:50
4304B	  STRWui %158:gpr32common, %stack.9.j, 0, debug-location !983 :: (store 4 into %ir.j); cg.c:538:50
4320B	  B %bb.24, debug-location !984; cg.c:538:9

4336B	bb.26.for.inc124:
	; predecessors: %bb.24
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

4352B	  %146:gpr32common = LDRWui %stack.11.cgit, 0, debug-location !987 :: (dereferenceable load 4 from %ir.cgit); cg.c:434:41
4368B	  %147:gpr32common = nsw ADDWri %146:gpr32common, 1, 0, debug-location !987; cg.c:434:41
4384B	  STRWui %147:gpr32common, %stack.11.cgit, 0, debug-location !987 :: (store 4 into %ir.cgit); cg.c:434:41
4400B	  B %bb.7, debug-location !988; cg.c:434:5

4416B	bb.27.for.end126:
	; predecessors: %bb.7
	  successors: %bb.28(0x80000000); %bb.28(100.00%)

4448B	  STRXui $xzr, %stack.14.sum, 0, debug-location !991 :: (store 8 into %ir.sum); cg.c:548:9
4480B	  STRWui $wzr, %stack.9.j, 0, debug-location !992 :: (store 4 into %ir.j); cg.c:549:12

4496B	bb.28.for.cond127:
	; predecessors: %bb.27, %bb.32
	  successors: %bb.29(0x7c000000), %bb.33(0x04000000); %bb.29(96.88%), %bb.33(3.12%)

4528B	  %40:gpr32 = LDRWui %96:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !997 :: (dereferenceable load 4 from @lastrow); cg.c:549:21
4544B	  %42:gpr32 = LDRWui %98:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !998 :: (dereferenceable load 4 from @firstrow); cg.c:549:31
4552B	  %38:gpr32 = LDRWui %stack.9.j, 0, debug-location !995 :: (dereferenceable load 4 from %ir.j); cg.c:549:17
4560B	  %43:gpr32common = nsw SUBWrr %40:gpr32, %42:gpr32, debug-location !999; cg.c:549:29
4576B	  %44:gpr32common = nsw ADDWri %43:gpr32common, 1, 0, debug-location !1000; cg.c:549:40
4592B	  dead $wzr = SUBSWrr %38:gpr32, %44:gpr32common, implicit-def $nzcv, debug-location !1002; cg.c:549:5
4608B	  Bcc 10, %bb.33, implicit killed $nzcv, debug-location !1002; cg.c:549:5
4624B	  B %bb.29, debug-location !1002; cg.c:549:5

4640B	bb.29.for.body131:
	; predecessors: %bb.28
	  successors: %bb.30(0x80000000); %bb.30(100.00%)

4688B	  %70:gpr64common = LDRXui %stack.1.rowstr.addr, 0, debug-location !1005 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:18
4704B	  %71:gpr64 = LDRSWui %stack.9.j, 0, debug-location !1007 :: (dereferenceable load 4 from %ir.j); cg.c:551:25
4712B	  STRXui $xzr, %stack.13.d, 0, debug-location !1003 :: (store 8 into %ir.d); cg.c:550:11
4720B	  %72:gpr32 = LDRWroX %70:gpr64common, %71:gpr64, 0, 1, debug-location !1005 :: (load 4 from %ir.arrayidx133); cg.c:551:18
4736B	  STRWui %72:gpr32, %stack.10.k, 0, debug-location !1008 :: (store 4 into %ir.k); cg.c:551:16

4752B	bb.30.for.cond134:
	; predecessors: %bb.29, %bb.31
	  successors: %bb.31(0x7c000000), %bb.32(0x04000000); %bb.31(96.88%), %bb.32(3.12%)

4784B	  %74:gpr64 = LDRXui %stack.1.rowstr.addr, 0, debug-location !1012 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:33
4800B	  %75:gpr64 = LDRSWui %stack.9.j, 0, debug-location !1013 :: (dereferenceable load 4 from %ir.j); cg.c:551:40
4808B	  %73:gpr32 = LDRWui %stack.10.k, 0, debug-location !1010 :: (dereferenceable load 4 from %ir.k); cg.c:551:29
4816B	  %76:gpr64common = ADDXrs %74:gpr64, %75:gpr64, 2, debug-location !1012; cg.c:551:33
4832B	  %77:gpr32 = LDRWui %76:gpr64common, 1, debug-location !1012 :: (load 4 from %ir.arrayidx137); cg.c:551:33
4848B	  %2:fpr64 = LDRDui %stack.13.d, 0, debug-location !1016 :: (dereferenceable load 8 from %ir.d); cg.c:0
4864B	  dead $wzr = SUBSWrr %73:gpr32, %77:gpr32, implicit-def $nzcv, debug-location !1017; cg.c:551:9
4880B	  Bcc 10, %bb.32, implicit killed $nzcv, debug-location !1017; cg.c:551:9
4896B	  B %bb.31, debug-location !1017; cg.c:551:9

4912B	bb.31.for.body139:
	; predecessors: %bb.30
	  successors: %bb.30(0x80000000); %bb.30(100.00%)

4944B	  %84:gpr64common = LDRSWui %stack.10.k, 0, debug-location !1020 :: (dereferenceable load 4 from %ir.k); cg.c:552:23
5008B	  %88:gpr64common = LDRXui %stack.0.colidx.addr, 0, debug-location !1022 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:552:30
5012B	  %83:gpr64common = LDRXui %stack.4.a.addr, 0, debug-location !1018 :: (dereferenceable load 8 from %ir.a.addr); cg.c:552:21
5016B	  %87:gpr64common = LDRXui %stack.3.z.addr, 0, debug-location !1021 :: (dereferenceable load 8 from %ir.z.addr); cg.c:552:28
5024B	  %89:gpr64 = LDRSWroX %88:gpr64common, %84:gpr64common, 0, 1, debug-location !1022 :: (load 4 from %ir.arrayidx143); cg.c:552:30
5032B	  %86:fpr64 = LDRDroX %83:gpr64common, %84:gpr64common, 0, 1, debug-location !1018 :: (load 8 from %ir.arrayidx141); cg.c:552:21
5040B	  %90:fpr64 = LDRDroX %87:gpr64common, %89:gpr64, 0, 1, debug-location !1021 :: (load 8 from %ir.arrayidx145); cg.c:552:28
5104B	  %93:gpr32common = nsw ADDWri %84.sub_32:gpr64common, 1, 0, debug-location !1027; cg.c:551:49
5112B	  %91:fpr64 = FMULDrr %86:fpr64, %90:fpr64, debug-location !1024; cg.c:552:26
5120B	  %92:fpr64 = FADDDrr %2:fpr64, %91:fpr64, debug-location !1025; cg.c:552:19
5128B	  STRDui %92:fpr64, %stack.13.d, 0, debug-location !1026 :: (store 8 into %ir.d); cg.c:552:15
5136B	  STRWui %93:gpr32common, %stack.10.k, 0, debug-location !1027 :: (store 4 into %ir.k); cg.c:551:49
5144B	  B %bb.30, debug-location !1028; cg.c:551:9

5152B	bb.32.for.end150:
	; predecessors: %bb.30
	  successors: %bb.28(0x80000000); %bb.28(100.00%)

5168B	  %79:gpr64common = LDRXui %stack.7.r.addr, 0, debug-location !1031 :: (dereferenceable load 8 from %ir.r.addr); cg.c:554:9
5184B	  %80:gpr64 = LDRSWui %stack.9.j, 0, debug-location !1032 :: (dereferenceable load 4 from %ir.j); cg.c:554:11
5200B	  STRDroX %2:fpr64, %79:gpr64common, %80:gpr64, 0, 1, debug-location !1033 :: (store 8 into %ir.arrayidx152); cg.c:554:14
5216B	  %81:gpr32common = LDRWui %stack.9.j, 0, debug-location !1034 :: (dereferenceable load 4 from %ir.j); cg.c:549:46
5232B	  %82:gpr32common = nsw ADDWri %81:gpr32common, 1, 0, debug-location !1034; cg.c:549:46
5248B	  STRWui %82:gpr32common, %stack.9.j, 0, debug-location !1034 :: (store 4 into %ir.j); cg.c:549:46
5264B	  B %bb.28, debug-location !1035; cg.c:549:5

5280B	bb.33.for.end155:
	; predecessors: %bb.28
	  successors: %bb.34(0x80000000); %bb.34(100.00%)

5312B	  STRWui $wzr, %stack.9.j, 0, debug-location !1038 :: (store 4 into %ir.j); cg.c:560:12

5328B	bb.34.for.cond156:
	; predecessors: %bb.33, %bb.35
	  successors: %bb.35(0x7c000000), %bb.36(0x04000000); %bb.35(96.88%), %bb.36(3.12%)

5360B	  %49:gpr32 = LDRWui %25:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !1043 :: (dereferenceable load 4 from @lastcol); cg.c:560:21
5376B	  %51:gpr32 = LDRWui %27:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !1044 :: (dereferenceable load 4 from @firstcol); cg.c:560:31
5384B	  %47:gpr32 = LDRWui %stack.9.j, 0, debug-location !1041 :: (dereferenceable load 4 from %ir.j); cg.c:560:17
5392B	  %52:gpr32common = nsw SUBWrr %49:gpr32, %51:gpr32, debug-location !1045; cg.c:560:29
5408B	  %53:gpr32common = nsw ADDWri %52:gpr32common, 1, 0, debug-location !1046; cg.c:560:40
5424B	  dead $wzr = SUBSWrr %47:gpr32, %53:gpr32common, implicit-def $nzcv, debug-location !1048; cg.c:560:5
5440B	  Bcc 10, %bb.36, implicit killed $nzcv, debug-location !1048; cg.c:560:5
5456B	  B %bb.35, debug-location !1048; cg.c:560:5

5472B	bb.35.for.body160:
	; predecessors: %bb.34
	  successors: %bb.34(0x80000000); %bb.34(100.00%)

5504B	  %58:gpr64common = LDRSWui %stack.9.j, 0, debug-location !1051 :: (dereferenceable load 4 from %ir.j); cg.c:561:15
5512B	  %57:gpr64common = LDRXui %stack.2.x.addr, 0, debug-location !1049 :: (dereferenceable load 8 from %ir.x.addr); cg.c:561:13
5568B	  %62:gpr64common = LDRXui %stack.7.r.addr, 0, debug-location !1052 :: (dereferenceable load 8 from %ir.r.addr); cg.c:561:20
5572B	  %60:gpr64 = UBFMXri %58:gpr64common, 61, 60, debug-location !1049; cg.c:561:13
5576B	  %61:fpr64 = LDRDroX %57:gpr64common, %60:gpr64, 0, 0, debug-location !1049 :: (load 8 from %ir.arrayidx162); cg.c:561:13
5584B	  %63:fpr64 = LDRDroX %62:gpr64common, %60:gpr64, 0, 0, debug-location !1052 :: (load 8 from %ir.arrayidx164); cg.c:561:20
5632B	  %65:fpr64 = LDRDui %stack.14.sum, 0, debug-location !1056 :: (dereferenceable load 8 from %ir.sum); cg.c:562:15
5696B	  %68:gpr32common = nsw ADDWri %58.sub_32:gpr64common, 1, 0, debug-location !1062; cg.c:560:46
5704B	  %64:fpr64 = FSUBDrr %61:fpr64, %63:fpr64, debug-location !1054; cg.c:561:18
5712B	  STRDui %64:fpr64, %stack.13.d, 0, debug-location !1055 :: (store 8 into %ir.d); cg.c:561:11
5720B	  %66:fpr64 = FMULDrr %64:fpr64, %64:fpr64, debug-location !1059; cg.c:562:23
5728B	  %67:fpr64 = FADDDrr %65:fpr64, %66:fpr64, debug-location !1060; cg.c:562:19
5736B	  STRDui %67:fpr64, %stack.14.sum, 0, debug-location !1061 :: (store 8 into %ir.sum); cg.c:562:13
5744B	  STRWui %68:gpr32common, %stack.9.j, 0, debug-location !1062 :: (store 4 into %ir.j); cg.c:560:46
5752B	  B %bb.34, debug-location !1063; cg.c:560:5

5760B	bb.36.for.end170:
	; predecessors: %bb.34
	  successors: %bb.38(0x50000000), %bb.37(0x30000000); %bb.38(62.50%), %bb.37(37.50%)

5768B	  %3:fpr64 = LDRDui %stack.14.sum, 0, debug-location !1066 :: (dereferenceable load 8 from %ir.sum); cg.c:565:19
5776B	  %247:fpr64 = FSQRTDr %3:fpr64, debug-location !1067; cg.c:565:14
5792B	  FCMPDrr %247:fpr64, %247:fpr64, implicit-def $nzcv, debug-location !1068; cg.c:565:6
5824B	  Bcc 7, %bb.38, implicit killed $nzcv, debug-location !1068; cg.c:565:6
5840B	  B %bb.37, debug-location !1068; cg.c:565:6

5856B	bb.37.call.sqrt:
	; predecessors: %bb.36
	  successors: %bb.38(0x80000000); %bb.38(100.00%)

5872B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1068; cg.c:565:6
5888B	  $d0 = COPY %3:fpr64, debug-location !1068; cg.c:565:6
5904B	  BL @sqrt, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $d0, implicit-def $sp, implicit-def $d0, debug-location !1068; cg.c:565:6
5920B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1068; cg.c:565:6
5936B	  %247:fpr64 = COPY killed $d0, debug-location !1068; cg.c:565:6

5984B	bb.38.for.end170.split:
	; predecessors: %bb.36, %bb.37

6016B	  %56:gpr64common = LDRXui %fixed-stack.0, 0, debug-location !1068 :: (dereferenceable load 8 from %ir.rnorm.addr, align 16); cg.c:565:6
6032B	  STRDui %247:fpr64, %56:gpr64common, 0, debug-location !1069 :: (store 8 into %ir.155); cg.c:565:12
6048B	  RET_ReallyLR debug-location !1070; cg.c:566:1

# End machine code for function conj_grad.

Before post-MI-sched:
# Machine code for function conj_grad: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP]
  fi#0: size=8, align=8, at location [SP-24]
  fi#1: size=8, align=8, at location [SP-32]
  fi#2: size=8, align=8, at location [SP-40]
  fi#3: size=8, align=8, at location [SP-48]
  fi#4: size=8, align=8, at location [SP-56]
  fi#5: size=8, align=8, at location [SP-64]
  fi#6: size=8, align=8, at location [SP-72]
  fi#7: size=8, align=8, at location [SP-80]
  fi#8: dead
  fi#9: size=4, align=4, at location [SP-84]
  fi#10: size=4, align=4, at location [SP-88]
  fi#11: size=4, align=4, at location [SP-92]
  fi#12: size=4, align=4, at location [SP-96]
  fi#13: size=8, align=8, at location [SP-104]
  fi#14: size=8, align=8, at location [SP-112]
  fi#15: size=8, align=8, at location [SP-120]
  fi#16: size=8, align=8, at location [SP-128]
  fi#17: size=8, align=8, at location [SP-136]
  fi#18: size=8, align=8, at location [SP-144]
  fi#19: size=8, align=8, at location [SP-8]
  fi#20: size=8, align=8, at location [SP-16]
Function Live Ins: $x0, $x1, $x2, $x3, $x4, $x5, $x6, $x7

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $x0, $x1, $x2, $x3, $x4, $x5, $x6, $x7, $lr
  $sp = frame-setup SUBXri $sp, 144, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 16 :: (store 8 into %stack.20), (store 8 into %stack.19)
  $fp = frame-setup ADDXri $sp, 128, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STPXi renamable $x1, renamable $x0, $fp, -2 :: (store 8 into %ir.colidx.addr), (store 8 into %ir.rowstr.addr)
  STPXi renamable $x3, renamable $x2, $fp, -4 :: (store 8 into %ir.x.addr), (store 8 into %ir.z.addr)
  STPXi renamable $x5, renamable $x4, $fp, -6 :: (store 8 into %ir.a.addr), (store 8 into %ir.p.addr)
  STURXi killed renamable $x6, $fp, -56 :: (store 8 into %ir.q.addr)
  STRXui killed renamable $x7, $sp, 8 :: (store 8 into %ir.r.addr)
  $w8 = MOVZWi 25, 0
  STRXui $xzr, $sp, 3, debug-location !756 :: (store 8 into %ir.rho); cg.c:409:9
  STRWui $wzr, $sp, 15, debug-location !757 :: (store 4 into %ir.j); cg.c:414:12
  STRWui killed renamable $w8, $sp, 12, debug-location !743 :: (store 4 into %ir.cgitmax); cg.c:406:15
  renamable $x8 = ADRP target-flags(aarch64-page) @naa

bb.1.for.cond:
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $x8
  renamable $w9 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !762 :: (dereferenceable load 4 from @naa); cg.c:414:21
  renamable $w10 = LDRWui $sp, 15, debug-location !760 :: (dereferenceable load 4 from %ir.j); cg.c:414:17
  renamable $w9 = nsw ADDWri killed renamable $w9, 1, 0, debug-location !763; cg.c:414:25
  $wzr = SUBSWrs killed renamable $w10, killed renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !765; cg.c:414:5
  Bcc 10, %bb.3, implicit $nzcv, debug-location !765; cg.c:414:5

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $x8
  renamable $x9 = LDURXi $fp, -56, debug-location !766 :: (dereferenceable load 8 from %ir.q.addr); cg.c:415:9
  renamable $x10 = LDRSWui $sp, 15, debug-location !768 :: (dereferenceable load 4 from %ir.j); cg.c:415:11
  STRXroX $xzr, killed renamable $x9, killed renamable $x10, 0, 1, debug-location !769 :: (store 8 into %ir.arrayidx); cg.c:415:14
  renamable $x9 = LDURXi $fp, -32, debug-location !770 :: (dereferenceable load 8 from %ir.z.addr); cg.c:416:9
  renamable $x10 = LDRSWui $sp, 15, debug-location !771 :: (dereferenceable load 4 from %ir.j); cg.c:416:11
  STRXroX $xzr, killed renamable $x9, killed renamable $x10, 0, 1, debug-location !772 :: (store 8 into %ir.arrayidx2); cg.c:416:14
  renamable $x9 = LDRSWui $sp, 15, debug-location !774 :: (dereferenceable load 4 from %ir.j); cg.c:417:18
  renamable $x10 = LDURXi $fp, -24, debug-location !773 :: (dereferenceable load 8 from %ir.x.addr); cg.c:417:16
  renamable $x9 = UBFMXri killed renamable $x9, 61, 60, debug-location !773; cg.c:417:16
  renamable $d0 = LDRDroX killed renamable $x10, renamable $x9, 0, 0, debug-location !773 :: (load 8 from %ir.arrayidx4); cg.c:417:16
  renamable $x10 = LDRXui $sp, 8, debug-location !775 :: (dereferenceable load 8 from %ir.r.addr); cg.c:417:9
  STRDroX killed renamable $d0, killed renamable $x10, killed renamable $x9, 0, 0, debug-location !777 :: (store 8 into %ir.arrayidx6); cg.c:417:14
  renamable $x9 = LDRSWui $sp, 15, debug-location !779 :: (dereferenceable load 4 from %ir.j); cg.c:418:18
  renamable $x10 = LDRXui $sp, 8, debug-location !778 :: (dereferenceable load 8 from %ir.r.addr); cg.c:418:16
  renamable $x9 = UBFMXri killed renamable $x9, 61, 60, debug-location !778; cg.c:418:16
  renamable $d0 = LDRDroX killed renamable $x10, renamable $x9, 0, 0, debug-location !778 :: (load 8 from %ir.arrayidx8); cg.c:418:16
  renamable $x10 = LDURXi $fp, -48, debug-location !780 :: (dereferenceable load 8 from %ir.p.addr); cg.c:418:9
  STRDroX killed renamable $d0, killed renamable $x10, killed renamable $x9, 0, 0, debug-location !782 :: (store 8 into %ir.arrayidx10); cg.c:418:14
  renamable $w9 = LDRWui $sp, 15, debug-location !783 :: (dereferenceable load 4 from %ir.j); cg.c:414:31
  renamable $w9 = nsw ADDWri killed renamable $w9, 1, 0, debug-location !783; cg.c:414:31
  STRWui killed renamable $w9, $sp, 15, debug-location !783 :: (store 4 into %ir.j); cg.c:414:31
  B %bb.1

bb.3.for.end:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  STRWui $wzr, $sp, 15, debug-location !787 :: (store 4 into %ir.j); cg.c:425:12
  renamable $x8 = ADRP target-flags(aarch64-page) @lastcol
  renamable $x9 = ADRP target-flags(aarch64-page) @firstcol

bb.4.for.cond11:
; predecessors: %bb.3, %bb.5
  successors: %bb.5(0x7c000000), %bb.6(0x04000000); %bb.5(96.88%), %bb.6(3.12%)
  liveins: $x8, $x9
  renamable $w10 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !792 :: (dereferenceable load 4 from @lastcol); cg.c:425:21
  renamable $w11 = LDRWui renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !793 :: (dereferenceable load 4 from @firstcol); cg.c:425:31
  renamable $w12 = LDRWui $sp, 15, debug-location !790 :: (dereferenceable load 4 from %ir.j); cg.c:425:17
  $w10 = SUBWrs killed renamable $w10, killed renamable $w11, 0, debug-location !794; cg.c:425:29
  renamable $w10 = nsw ADDWri killed renamable $w10, 1, 0, debug-location !795; cg.c:425:40
  $wzr = SUBSWrs killed renamable $w12, killed renamable $w10, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !797; cg.c:425:5
  Bcc 10, %bb.6, implicit $nzcv, debug-location !797; cg.c:425:5

bb.5.for.body14:
; predecessors: %bb.4
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $x8, $x9
  renamable $x10 = LDRXui $sp, 8, debug-location !800 :: (dereferenceable load 8 from %ir.r.addr); cg.c:426:21
  renamable $x11 = LDRSWui $sp, 15, debug-location !801 :: (dereferenceable load 4 from %ir.j); cg.c:426:23
  renamable $d0 = LDRDroX killed renamable $x10, renamable $x11, 0, 1, debug-location !800 :: (load 8 from %ir.arrayidx18); cg.c:426:21
  renamable $d1 = LDRDui $sp, 3, debug-location !798 :: (dereferenceable load 8 from %ir.rho); cg.c:426:15
  renamable $w10 = nsw ADDWri renamable $w11, 1, 0, implicit killed $x11, debug-location !807; cg.c:425:46
  renamable $d0 = FMULDrr killed renamable $d0, renamable $d0, debug-location !804; cg.c:426:26
  renamable $d0 = FADDDrr killed renamable $d1, killed renamable $d0, debug-location !805; cg.c:426:19
  STRDui killed renamable $d0, $sp, 3, debug-location !806 :: (store 8 into %ir.rho); cg.c:426:13
  STRWui killed renamable $w10, $sp, 15, debug-location !807 :: (store 4 into %ir.j); cg.c:425:46
  B %bb.4

bb.6.for.end22:
; predecessors: %bb.4
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $x8, $x9
  $w11 = MOVZWi 1, 0
  renamable $x10 = ADRP target-flags(aarch64-page) @lastrow
  STRWui killed renamable $w11, $sp, 13, debug-location !811 :: (store 4 into %ir.cgit); cg.c:434:15
  renamable $x11 = ADRP target-flags(aarch64-page) @firstrow

bb.7.for.cond23:
; predecessors: %bb.6, %bb.26
  successors: %bb.8(0x7c000000), %bb.27(0x04000000); %bb.8(96.88%), %bb.27(3.12%)
  liveins: $x8, $x9, $x10, $x11
  renamable $w13, renamable $w12 = LDPWi $sp, 12, debug-location !814 :: (dereferenceable load 4 from %ir.cgit), (dereferenceable load 4 from %ir.cgitmax); cg.c:434:20
  $wzr = SUBSWrs killed renamable $w12, killed renamable $w13, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !818; cg.c:434:5
  Bcc 12, %bb.27, implicit $nzcv, debug-location !818; cg.c:434:5

bb.8.for.body25:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $x8, $x9, $x10, $x11
  STRWui $wzr, $sp, 15, debug-location !819 :: (store 4 into %ir.j); cg.c:447:16

bb.9.for.cond26:
; predecessors: %bb.8, %bb.13
  successors: %bb.10(0x7c000000), %bb.14(0x04000000); %bb.10(96.88%), %bb.14(3.12%)
  liveins: $x8, $x9, $x10, $x11
  renamable $w12 = LDRWui renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !825 :: (dereferenceable load 4 from @lastrow); cg.c:447:25
  renamable $w13 = LDRWui renamable $x11, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !826 :: (dereferenceable load 4 from @firstrow); cg.c:447:35
  renamable $w14 = LDRWui $sp, 15, debug-location !823 :: (dereferenceable load 4 from %ir.j); cg.c:447:21
  $w12 = SUBWrs killed renamable $w12, killed renamable $w13, 0, debug-location !827; cg.c:447:33
  renamable $w12 = nsw ADDWri killed renamable $w12, 1, 0, debug-location !828; cg.c:447:44
  $wzr = SUBSWrs killed renamable $w14, killed renamable $w12, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !830; cg.c:447:9
  Bcc 10, %bb.14, implicit $nzcv, debug-location !830; cg.c:447:9

bb.10.for.body30:
; predecessors: %bb.9
  successors: %bb.11(0x80000000); %bb.11(100.00%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x12 = LDURXi $fp, -16, debug-location !833 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:22
  renamable $x13 = LDRSWui $sp, 15, debug-location !835 :: (dereferenceable load 4 from %ir.j); cg.c:449:29
  STRXui $xzr, $sp, 4, debug-location !831 :: (store 8 into %ir.sum); cg.c:448:17
  renamable $w12 = LDRWroX killed renamable $x12, killed renamable $x13, 0, 1, debug-location !833 :: (load 4 from %ir.arrayidx32); cg.c:449:22

bb.11.for.cond33:
; predecessors: %bb.10, %bb.12
  successors: %bb.12(0x7c000000), %bb.13(0x04000000); %bb.12(96.88%), %bb.13(3.12%)
  liveins: $x8, $x9, $x10, $x11, $w12
  STRWui killed renamable $w12, $sp, 14, debug-location !DILocation(line: 0, scope: !834) :: (store 4 into %ir.k); cg.c:0
  renamable $x12 = LDURXi $fp, -16, debug-location !840 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:37
  renamable $w14, $w13 = LDPWi $sp, 14, debug-location !841 :: (dereferenceable load 4 from %ir.j), (dereferenceable load 4 from %ir.k); cg.c:449:44
  $w13 = KILL $w13, implicit-def $x13, debug-location !841; cg.c:449:44
  $x13 = SBFMXri $x13, 0, 31, debug-location !841; cg.c:449:44
  renamable $x12 = ADDXrs killed renamable $x12, killed renamable $x13, 2, debug-location !840; cg.c:449:37
  renamable $w12 = LDRWui killed renamable $x12, 1, debug-location !840 :: (load 4 from %ir.arrayidx36); cg.c:449:37
  renamable $d0 = LDRDui $sp, 4, debug-location !844 :: (dereferenceable load 8 from %ir.sum); cg.c:0
  $wzr = SUBSWrs killed renamable $w14, killed renamable $w12, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !845; cg.c:449:13
  Bcc 10, %bb.13, implicit $nzcv, debug-location !845; cg.c:449:13

bb.12.for.body38:
; predecessors: %bb.11
  successors: %bb.11(0x80000000); %bb.11(100.00%)
  liveins: $d0, $x8, $x9, $x10, $x11
  renamable $x12 = LDRSWui $sp, 14, debug-location !848 :: (dereferenceable load 4 from %ir.k); cg.c:450:31
  renamable $x13 = LDURXi $fp, -8, debug-location !850 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:450:38
  renamable $x15, renamable $x14 = LDPXi $fp, -6, debug-location !846 :: (dereferenceable load 8 from %ir.a.addr), (dereferenceable load 8 from %ir.p.addr); cg.c:450:29
  renamable $x13 = LDRSWroX killed renamable $x13, renamable $x12, 0, 1, debug-location !850 :: (load 4 from %ir.arrayidx42); cg.c:450:38
  renamable $d1 = LDRDroX killed renamable $x14, renamable $x12, 0, 1, debug-location !846 :: (load 8 from %ir.arrayidx40); cg.c:450:29
  renamable $d2 = LDRDroX killed renamable $x15, killed renamable $x13, 0, 1, debug-location !849 :: (load 8 from %ir.arrayidx44); cg.c:450:36
  renamable $w12 = nsw ADDWri renamable $w12, 1, 0, implicit killed $x12, debug-location !855; cg.c:449:53
  renamable $d1 = FMULDrr killed renamable $d1, killed renamable $d2, debug-location !852; cg.c:450:34
  renamable $d0 = FADDDrr killed renamable $d0, killed renamable $d1, debug-location !853; cg.c:450:27
  STRDui killed renamable $d0, $sp, 4, debug-location !854 :: (store 8 into %ir.sum); cg.c:450:21
  B %bb.11

bb.13.for.end49:
; predecessors: %bb.11
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $d0, $x8, $x9, $x10, $x11
  renamable $x12 = LDURXi $fp, -56, debug-location !859 :: (dereferenceable load 8 from %ir.q.addr); cg.c:452:13
  renamable $x13 = LDRSWui $sp, 15, debug-location !860 :: (dereferenceable load 4 from %ir.j); cg.c:452:15
  STRDroX killed renamable $d0, killed renamable $x12, killed renamable $x13, 0, 1, debug-location !861 :: (store 8 into %ir.arrayidx51); cg.c:452:18
  renamable $w12 = LDRWui $sp, 15, debug-location !862 :: (dereferenceable load 4 from %ir.j); cg.c:447:50
  renamable $w12 = nsw ADDWri killed renamable $w12, 1, 0, debug-location !862; cg.c:447:50
  STRWui killed renamable $w12, $sp, 15, debug-location !862 :: (store 4 into %ir.j); cg.c:447:50
  B %bb.9

bb.14.for.end54:
; predecessors: %bb.9
  successors: %bb.15(0x80000000); %bb.15(100.00%)
  liveins: $x8, $x9, $x10, $x11
  STRXui $xzr, $sp, 5, debug-location !866 :: (store 8 into %ir.d); cg.c:496:11
  STRWui $wzr, $sp, 15, debug-location !867 :: (store 4 into %ir.j); cg.c:497:16

bb.15.for.cond55:
; predecessors: %bb.14, %bb.16
  successors: %bb.16(0x7c000000), %bb.17(0x04000000); %bb.16(96.88%), %bb.17(3.12%)
  liveins: $x8, $x9, $x10, $x11
  renamable $w12 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !872 :: (dereferenceable load 4 from @lastcol); cg.c:497:25
  renamable $w13 = LDRWui renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !873 :: (dereferenceable load 4 from @firstcol); cg.c:497:35
  renamable $w14 = LDRWui $sp, 15, debug-location !870 :: (dereferenceable load 4 from %ir.j); cg.c:497:21
  $w12 = SUBWrs killed renamable $w12, killed renamable $w13, 0, debug-location !874; cg.c:497:33
  renamable $w12 = nsw ADDWri killed renamable $w12, 1, 0, debug-location !875; cg.c:497:44
  $wzr = SUBSWrs killed renamable $w14, killed renamable $w12, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !877; cg.c:497:9
  Bcc 10, %bb.17, implicit $nzcv, debug-location !877; cg.c:497:9

bb.16.for.body59:
; predecessors: %bb.15
  successors: %bb.15(0x80000000); %bb.15(100.00%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x12 = LDRSWui $sp, 15, debug-location !881 :: (dereferenceable load 4 from %ir.j); cg.c:498:23
  renamable $x14, renamable $x13 = LDPXi $fp, -7, debug-location !880 :: (dereferenceable load 8 from %ir.p.addr), (dereferenceable load 8 from %ir.q.addr); cg.c:498:21
  renamable $x15 = UBFMXri renamable $x12, 61, 60, debug-location !880; cg.c:498:21
  renamable $d0 = LDRDroX killed renamable $x13, renamable $x15, 0, 0, debug-location !880 :: (load 8 from %ir.arrayidx61); cg.c:498:21
  renamable $d1 = LDRDroX killed renamable $x14, killed renamable $x15, 0, 0, debug-location !882 :: (load 8 from %ir.arrayidx63); cg.c:498:28
  renamable $d2 = LDRDui $sp, 5, debug-location !878 :: (dereferenceable load 8 from %ir.d); cg.c:498:17
  renamable $w12 = nsw ADDWri renamable $w12, 1, 0, implicit killed $x12, debug-location !887; cg.c:497:50
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1, debug-location !884; cg.c:498:26
  renamable $d0 = FADDDrr killed renamable $d2, killed renamable $d0, debug-location !885; cg.c:498:19
  STRDui killed renamable $d0, $sp, 5, debug-location !886 :: (store 8 into %ir.d); cg.c:498:15
  STRWui killed renamable $w12, $sp, 15, debug-location !887 :: (store 4 into %ir.j); cg.c:497:50
  B %bb.15

bb.17.for.end68:
; predecessors: %bb.15
  successors: %bb.18(0x80000000); %bb.18(100.00%)
  liveins: $x8, $x9, $x10, $x11
  renamable $d0 = LDRDui $sp, 3, debug-location !891 :: (dereferenceable load 8 from %ir.rho); cg.c:504:17
  renamable $d1 = LDRDui $sp, 5, debug-location !892 :: (dereferenceable load 8 from %ir.d); cg.c:504:23
  STRXui $xzr, $sp, 3, debug-location !897 :: (store 8 into %ir.rho); cg.c:515:13
  renamable $d1 = FDIVDrr renamable $d0, killed renamable $d1, debug-location !893; cg.c:504:21
  STPDi renamable $d1, renamable $d0, $sp, 1, debug-location !896 :: (store 8 into %ir.rho0), (store 8 into %ir.alpha); cg.c:509:14
  STRWui $wzr, $sp, 15, debug-location !898 :: (store 4 into %ir.j); cg.c:516:16

bb.18.for.cond69:
; predecessors: %bb.17, %bb.19
  successors: %bb.19(0x7c000000), %bb.20(0x04000000); %bb.19(96.88%), %bb.20(3.12%)
  liveins: $x8, $x9, $x10, $x11
  renamable $w12 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !903 :: (dereferenceable load 4 from @lastcol); cg.c:516:25
  renamable $w13 = LDRWui renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !904 :: (dereferenceable load 4 from @firstcol); cg.c:516:35
  renamable $w14 = LDRWui $sp, 15, debug-location !901 :: (dereferenceable load 4 from %ir.j); cg.c:516:21
  $w12 = SUBWrs killed renamable $w12, killed renamable $w13, 0, debug-location !905; cg.c:516:33
  renamable $w12 = nsw ADDWri killed renamable $w12, 1, 0, debug-location !906; cg.c:516:44
  $wzr = SUBSWrs killed renamable $w14, killed renamable $w12, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !908; cg.c:516:9
  Bcc 10, %bb.20, implicit $nzcv, debug-location !908; cg.c:516:9

bb.19.for.body73:
; predecessors: %bb.18
  successors: %bb.18(0x80000000); %bb.18(100.00%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x12 = LDRSWui $sp, 15, debug-location !911 :: (dereferenceable load 4 from %ir.j); cg.c:517:22
  renamable $x13 = LDURXi $fp, -48, debug-location !913 :: (dereferenceable load 8 from %ir.p.addr); cg.c:517:35
  renamable $x14 = LDURXi $fp, -32, debug-location !909 :: (dereferenceable load 8 from %ir.z.addr); cg.c:517:20
  renamable $d0 = LDRDui $sp, 1, debug-location !912 :: (dereferenceable load 8 from %ir.alpha); cg.c:517:27
  renamable $x12 = UBFMXri killed renamable $x12, 61, 60, debug-location !909; cg.c:517:20
  renamable $d1 = LDRDroX killed renamable $x13, renamable $x12, 0, 0, debug-location !913 :: (load 8 from %ir.arrayidx77); cg.c:517:35
  renamable $d2 = LDRDroX renamable $x14, renamable $x12, 0, 0, debug-location !909 :: (load 8 from %ir.arrayidx75); cg.c:517:20
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1, debug-location !915; cg.c:517:33
  renamable $d0 = FADDDrr killed renamable $d2, killed renamable $d0, debug-location !916; cg.c:517:25
  STRDroX killed renamable $d0, killed renamable $x14, killed renamable $x12, 0, 0, debug-location !919 :: (store 8 into %ir.arrayidx81); cg.c:517:18
  renamable $x12 = LDRSWui $sp, 15, debug-location !921 :: (dereferenceable load 4 from %ir.j); cg.c:518:22
  renamable $x13 = LDURXi $fp, -56, debug-location !923 :: (dereferenceable load 8 from %ir.q.addr); cg.c:518:35
  renamable $x14 = LDRXui $sp, 8, debug-location !920 :: (dereferenceable load 8 from %ir.r.addr); cg.c:518:20
  renamable $x12 = UBFMXri killed renamable $x12, 61, 60, debug-location !920; cg.c:518:20
  renamable $d0 = LDRDui $sp, 1, debug-location !922 :: (dereferenceable load 8 from %ir.alpha); cg.c:518:27
  renamable $d1 = LDRDroX killed renamable $x13, renamable $x12, 0, 0, debug-location !923 :: (load 8 from %ir.arrayidx85); cg.c:518:35
  renamable $d2 = LDRDroX renamable $x14, renamable $x12, 0, 0, debug-location !920 :: (load 8 from %ir.arrayidx83); cg.c:518:20
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1, debug-location !925; cg.c:518:33
  renamable $d0 = FSUBDrr killed renamable $d2, killed renamable $d0, debug-location !926; cg.c:518:25
  STRDroX killed renamable $d0, killed renamable $x14, killed renamable $x12, 0, 0, debug-location !929 :: (store 8 into %ir.arrayidx89); cg.c:518:18
  renamable $w12 = LDRWui $sp, 15, debug-location !930 :: (dereferenceable load 4 from %ir.j); cg.c:516:50
  renamable $w12 = nsw ADDWri killed renamable $w12, 1, 0, debug-location !930; cg.c:516:50
  STRWui killed renamable $w12, $sp, 15, debug-location !930 :: (store 4 into %ir.j); cg.c:516:50
  B %bb.18

bb.20.for.end92:
; predecessors: %bb.18
  successors: %bb.21(0x80000000); %bb.21(100.00%)
  liveins: $x8, $x9, $x10, $x11
  STRWui $wzr, $sp, 15, debug-location !934 :: (store 4 into %ir.j); cg.c:526:16

bb.21.for.cond93:
; predecessors: %bb.20, %bb.22
  successors: %bb.22(0x7c000000), %bb.23(0x04000000); %bb.22(96.88%), %bb.23(3.12%)
  liveins: $x8, $x9, $x10, $x11
  renamable $w12 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !939 :: (dereferenceable load 4 from @lastcol); cg.c:526:25
  renamable $w13 = LDRWui renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !940 :: (dereferenceable load 4 from @firstcol); cg.c:526:35
  renamable $w14 = LDRWui $sp, 15, debug-location !937 :: (dereferenceable load 4 from %ir.j); cg.c:526:21
  $w12 = SUBWrs killed renamable $w12, killed renamable $w13, 0, debug-location !941; cg.c:526:33
  renamable $d0 = LDRDui $sp, 3, debug-location !944 :: (dereferenceable load 8 from %ir.rho); cg.c:0
  renamable $w12 = nsw ADDWri killed renamable $w12, 1, 0, debug-location !942; cg.c:526:44
  $wzr = SUBSWrs killed renamable $w14, killed renamable $w12, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !945; cg.c:526:9
  Bcc 10, %bb.23, implicit $nzcv, debug-location !945; cg.c:526:9

bb.22.for.body97:
; predecessors: %bb.21
  successors: %bb.21(0x80000000); %bb.21(100.00%)
  liveins: $d0, $x8, $x9, $x10, $x11
  renamable $x12 = LDRXui $sp, 8, debug-location !946 :: (dereferenceable load 8 from %ir.r.addr); cg.c:527:25
  renamable $x13 = LDRSWui $sp, 15, debug-location !948 :: (dereferenceable load 4 from %ir.j); cg.c:527:27
  renamable $d1 = LDRDroX killed renamable $x12, renamable $x13, 0, 1, debug-location !946 :: (load 8 from %ir.arrayidx101); cg.c:527:25
  renamable $w12 = nsw ADDWri renamable $w13, 1, 0, implicit killed $x13, debug-location !954; cg.c:526:50
  renamable $d1 = FMULDrr killed renamable $d1, renamable $d1, debug-location !951; cg.c:527:30
  renamable $d0 = FADDDrr killed renamable $d0, killed renamable $d1, debug-location !952; cg.c:527:23
  STRDui killed renamable $d0, $sp, 3, debug-location !953 :: (store 8 into %ir.rho); cg.c:527:17
  STRWui killed renamable $w12, $sp, 15, debug-location !954 :: (store 4 into %ir.j); cg.c:526:50
  B %bb.21

bb.23.for.end106:
; predecessors: %bb.21
  successors: %bb.24(0x80000000); %bb.24(100.00%)
  liveins: $d0, $x8, $x9, $x10, $x11
  renamable $d1 = LDRDui $sp, 2, debug-location !958 :: (dereferenceable load 8 from %ir.rho0); cg.c:533:22
  renamable $d0 = FDIVDrr killed renamable $d0, killed renamable $d1, debug-location !959; cg.c:533:20
  STRDui killed renamable $d0, $sp, 0, debug-location !960 :: (store 8 into %ir.beta); cg.c:533:14
  STRWui $wzr, $sp, 15, debug-location !961 :: (store 4 into %ir.j); cg.c:538:16

bb.24.for.cond108:
; predecessors: %bb.23, %bb.25
  successors: %bb.25(0x7c000000), %bb.26(0x04000000); %bb.25(96.88%), %bb.26(3.12%)
  liveins: $x8, $x9, $x10, $x11
  renamable $w12 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !966 :: (dereferenceable load 4 from @lastcol); cg.c:538:25
  renamable $w13 = LDRWui renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !967 :: (dereferenceable load 4 from @firstcol); cg.c:538:35
  renamable $w14 = LDRWui $sp, 15, debug-location !964 :: (dereferenceable load 4 from %ir.j); cg.c:538:21
  $w12 = SUBWrs killed renamable $w12, killed renamable $w13, 0, debug-location !968; cg.c:538:33
  renamable $w12 = nsw ADDWri killed renamable $w12, 1, 0, debug-location !969; cg.c:538:44
  $wzr = SUBSWrs killed renamable $w14, killed renamable $w12, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !971; cg.c:538:9
  Bcc 10, %bb.26, implicit $nzcv, debug-location !971; cg.c:538:9

bb.25.for.body112:
; predecessors: %bb.24
  successors: %bb.24(0x80000000); %bb.24(100.00%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x12 = LDRSWui $sp, 15, debug-location !974 :: (dereferenceable load 4 from %ir.j); cg.c:539:22
  renamable $x13 = LDURXi $fp, -48, debug-location !976 :: (dereferenceable load 8 from %ir.p.addr); cg.c:539:34
  renamable $x14 = LDRXui $sp, 8, debug-location !972 :: (dereferenceable load 8 from %ir.r.addr); cg.c:539:20
  renamable $x12 = UBFMXri killed renamable $x12, 61, 60, debug-location !972; cg.c:539:20
  renamable $d0 = LDRDui $sp, 0, debug-location !975 :: (dereferenceable load 8 from %ir.beta); cg.c:539:27
  renamable $d1 = LDRDroX renamable $x13, renamable $x12, 0, 0, debug-location !976 :: (load 8 from %ir.arrayidx116); cg.c:539:34
  renamable $d2 = LDRDroX killed renamable $x14, renamable $x12, 0, 0, debug-location !972 :: (load 8 from %ir.arrayidx114); cg.c:539:20
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1, debug-location !978; cg.c:539:32
  renamable $d0 = FADDDrr killed renamable $d2, killed renamable $d0, debug-location !979; cg.c:539:25
  STRDroX killed renamable $d0, killed renamable $x13, killed renamable $x12, 0, 0, debug-location !982 :: (store 8 into %ir.arrayidx120); cg.c:539:18
  renamable $w12 = LDRWui $sp, 15, debug-location !983 :: (dereferenceable load 4 from %ir.j); cg.c:538:50
  renamable $w12 = nsw ADDWri killed renamable $w12, 1, 0, debug-location !983; cg.c:538:50
  STRWui killed renamable $w12, $sp, 15, debug-location !983 :: (store 4 into %ir.j); cg.c:538:50
  B %bb.24

bb.26.for.inc124:
; predecessors: %bb.24
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $x8, $x9, $x10, $x11
  renamable $w12 = LDRWui $sp, 13, debug-location !987 :: (dereferenceable load 4 from %ir.cgit); cg.c:434:41
  renamable $w12 = nsw ADDWri killed renamable $w12, 1, 0, debug-location !987; cg.c:434:41
  STRWui killed renamable $w12, $sp, 13, debug-location !987 :: (store 4 into %ir.cgit); cg.c:434:41
  B %bb.7

bb.27.for.end126:
; predecessors: %bb.7
  successors: %bb.28(0x80000000); %bb.28(100.00%)
  liveins: $x8, $x9, $x10, $x11
  STRXui $xzr, $sp, 4, debug-location !991 :: (store 8 into %ir.sum); cg.c:548:9
  STRWui $wzr, $sp, 15, debug-location !992 :: (store 4 into %ir.j); cg.c:549:12

bb.28.for.cond127:
; predecessors: %bb.27, %bb.32
  successors: %bb.29(0x7c000000), %bb.33(0x04000000); %bb.29(96.88%), %bb.33(3.12%)
  liveins: $x8, $x9, $x10, $x11
  renamable $w12 = LDRWui renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !997 :: (dereferenceable load 4 from @lastrow); cg.c:549:21
  renamable $w13 = LDRWui renamable $x11, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !998 :: (dereferenceable load 4 from @firstrow); cg.c:549:31
  renamable $w14 = LDRWui $sp, 15, debug-location !995 :: (dereferenceable load 4 from %ir.j); cg.c:549:17
  $w12 = SUBWrs killed renamable $w12, killed renamable $w13, 0, debug-location !999; cg.c:549:29
  renamable $w12 = nsw ADDWri killed renamable $w12, 1, 0, debug-location !1000; cg.c:549:40
  $wzr = SUBSWrs killed renamable $w14, killed renamable $w12, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1002; cg.c:549:5
  Bcc 10, %bb.33, implicit $nzcv, debug-location !1002; cg.c:549:5

bb.29.for.body131:
; predecessors: %bb.28
  successors: %bb.30(0x80000000); %bb.30(100.00%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x12 = LDURXi $fp, -16, debug-location !1005 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:18
  renamable $x13 = LDRSWui $sp, 15, debug-location !1007 :: (dereferenceable load 4 from %ir.j); cg.c:551:25
  STRXui $xzr, $sp, 5, debug-location !1003 :: (store 8 into %ir.d); cg.c:550:11
  renamable $w12 = LDRWroX killed renamable $x12, killed renamable $x13, 0, 1, debug-location !1005 :: (load 4 from %ir.arrayidx133); cg.c:551:18

bb.30.for.cond134:
; predecessors: %bb.29, %bb.31
  successors: %bb.31(0x7c000000), %bb.32(0x04000000); %bb.31(96.88%), %bb.32(3.12%)
  liveins: $x8, $x9, $x10, $x11, $w12
  STRWui killed renamable $w12, $sp, 14, debug-location !DILocation(line: 0, scope: !1006) :: (store 4 into %ir.k); cg.c:0
  renamable $x12 = LDURXi $fp, -16, debug-location !1012 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:33
  renamable $w14, $w13 = LDPWi $sp, 14, debug-location !1013 :: (dereferenceable load 4 from %ir.j), (dereferenceable load 4 from %ir.k); cg.c:551:40
  $w13 = KILL $w13, implicit-def $x13, debug-location !1013; cg.c:551:40
  $x13 = SBFMXri $x13, 0, 31, debug-location !1013; cg.c:551:40
  renamable $x12 = ADDXrs killed renamable $x12, killed renamable $x13, 2, debug-location !1012; cg.c:551:33
  renamable $w12 = LDRWui killed renamable $x12, 1, debug-location !1012 :: (load 4 from %ir.arrayidx137); cg.c:551:33
  renamable $d0 = LDRDui $sp, 5, debug-location !1016 :: (dereferenceable load 8 from %ir.d); cg.c:0
  $wzr = SUBSWrs killed renamable $w14, killed renamable $w12, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1017; cg.c:551:9
  Bcc 10, %bb.32, implicit $nzcv, debug-location !1017; cg.c:551:9

bb.31.for.body139:
; predecessors: %bb.30
  successors: %bb.30(0x80000000); %bb.30(100.00%)
  liveins: $d0, $x8, $x9, $x10, $x11
  renamable $x12 = LDRSWui $sp, 14, debug-location !1020 :: (dereferenceable load 4 from %ir.k); cg.c:552:23
  renamable $x13 = LDURXi $fp, -8, debug-location !1022 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:552:30
  renamable $x14, renamable $x15 = LDPXi $fp, -5, debug-location !1018 :: (dereferenceable load 8 from %ir.a.addr), (dereferenceable load 8 from %ir.z.addr); cg.c:552:21
  renamable $x13 = LDRSWroX killed renamable $x13, renamable $x12, 0, 1, debug-location !1022 :: (load 4 from %ir.arrayidx143); cg.c:552:30
  renamable $d1 = LDRDroX killed renamable $x14, renamable $x12, 0, 1, debug-location !1018 :: (load 8 from %ir.arrayidx141); cg.c:552:21
  renamable $d2 = LDRDroX killed renamable $x15, killed renamable $x13, 0, 1, debug-location !1021 :: (load 8 from %ir.arrayidx145); cg.c:552:28
  renamable $w12 = nsw ADDWri renamable $w12, 1, 0, implicit killed $x12, debug-location !1027; cg.c:551:49
  renamable $d1 = FMULDrr killed renamable $d1, killed renamable $d2, debug-location !1024; cg.c:552:26
  renamable $d0 = FADDDrr killed renamable $d0, killed renamable $d1, debug-location !1025; cg.c:552:19
  STRDui killed renamable $d0, $sp, 5, debug-location !1026 :: (store 8 into %ir.d); cg.c:552:15
  B %bb.30

bb.32.for.end150:
; predecessors: %bb.30
  successors: %bb.28(0x80000000); %bb.28(100.00%)
  liveins: $d0, $x8, $x9, $x10, $x11
  renamable $x12 = LDRXui $sp, 8, debug-location !1031 :: (dereferenceable load 8 from %ir.r.addr); cg.c:554:9
  renamable $x13 = LDRSWui $sp, 15, debug-location !1032 :: (dereferenceable load 4 from %ir.j); cg.c:554:11
  STRDroX killed renamable $d0, killed renamable $x12, killed renamable $x13, 0, 1, debug-location !1033 :: (store 8 into %ir.arrayidx152); cg.c:554:14
  renamable $w12 = LDRWui $sp, 15, debug-location !1034 :: (dereferenceable load 4 from %ir.j); cg.c:549:46
  renamable $w12 = nsw ADDWri killed renamable $w12, 1, 0, debug-location !1034; cg.c:549:46
  STRWui killed renamable $w12, $sp, 15, debug-location !1034 :: (store 4 into %ir.j); cg.c:549:46
  B %bb.28

bb.33.for.end155:
; predecessors: %bb.28
  successors: %bb.34(0x80000000); %bb.34(100.00%)
  liveins: $x8, $x9
  STRWui $wzr, $sp, 15, debug-location !1038 :: (store 4 into %ir.j); cg.c:560:12

bb.34.for.cond156:
; predecessors: %bb.33, %bb.35
  successors: %bb.35(0x7c000000), %bb.36(0x04000000); %bb.35(96.88%), %bb.36(3.12%)
  liveins: $x8, $x9
  renamable $w10 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !1043 :: (dereferenceable load 4 from @lastcol); cg.c:560:21
  renamable $w11 = LDRWui renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !1044 :: (dereferenceable load 4 from @firstcol); cg.c:560:31
  renamable $w12 = LDRWui $sp, 15, debug-location !1041 :: (dereferenceable load 4 from %ir.j); cg.c:560:17
  $w10 = SUBWrs killed renamable $w10, killed renamable $w11, 0, debug-location !1045; cg.c:560:29
  renamable $w10 = nsw ADDWri killed renamable $w10, 1, 0, debug-location !1046; cg.c:560:40
  $wzr = SUBSWrs killed renamable $w12, killed renamable $w10, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1048; cg.c:560:5
  Bcc 10, %bb.36, implicit $nzcv, debug-location !1048; cg.c:560:5

bb.35.for.body160:
; predecessors: %bb.34
  successors: %bb.34(0x80000000); %bb.34(100.00%)
  liveins: $x8, $x9
  renamable $x10 = LDRSWui $sp, 15, debug-location !1051 :: (dereferenceable load 4 from %ir.j); cg.c:561:15
  renamable $x11 = LDURXi $fp, -24, debug-location !1049 :: (dereferenceable load 8 from %ir.x.addr); cg.c:561:13
  renamable $x12 = LDRXui $sp, 8, debug-location !1052 :: (dereferenceable load 8 from %ir.r.addr); cg.c:561:20
  renamable $x13 = UBFMXri renamable $x10, 61, 60, debug-location !1049; cg.c:561:13
  renamable $d0 = LDRDroX killed renamable $x11, renamable $x13, 0, 0, debug-location !1049 :: (load 8 from %ir.arrayidx162); cg.c:561:13
  renamable $d1 = LDRDroX killed renamable $x12, killed renamable $x13, 0, 0, debug-location !1052 :: (load 8 from %ir.arrayidx164); cg.c:561:20
  renamable $d2 = LDRDui $sp, 4, debug-location !1056 :: (dereferenceable load 8 from %ir.sum); cg.c:562:15
  renamable $w10 = nsw ADDWri renamable $w10, 1, 0, implicit killed $x10, debug-location !1062; cg.c:560:46
  renamable $d0 = FSUBDrr killed renamable $d0, killed renamable $d1, debug-location !1054; cg.c:561:18
  STRDui renamable $d0, $sp, 5, debug-location !1055 :: (store 8 into %ir.d); cg.c:561:11
  renamable $d0 = FMULDrr killed renamable $d0, renamable $d0, debug-location !1059; cg.c:562:23
  renamable $d0 = FADDDrr killed renamable $d2, killed renamable $d0, debug-location !1060; cg.c:562:19
  STRDui killed renamable $d0, $sp, 4, debug-location !1061 :: (store 8 into %ir.sum); cg.c:562:13
  STRWui killed renamable $w10, $sp, 15, debug-location !1062 :: (store 4 into %ir.j); cg.c:560:46
  B %bb.34

bb.36.for.end170:
; predecessors: %bb.34
  successors: %bb.38(0x50000000), %bb.37(0x30000000); %bb.38(62.50%), %bb.37(37.50%)

  renamable $d1 = LDRDui $sp, 4, debug-location !1066 :: (dereferenceable load 8 from %ir.sum); cg.c:565:19
  renamable $d0 = FSQRTDr renamable $d1, debug-location !1067; cg.c:565:14
  FCMPDrr renamable $d0, renamable $d0, implicit-def $nzcv, debug-location !1068; cg.c:565:6
  Bcc 7, %bb.38, implicit $nzcv, debug-location !1068; cg.c:565:6

bb.37.call.sqrt:
; predecessors: %bb.36
  successors: %bb.38(0x80000000); %bb.38(100.00%)
  liveins: $d1
  $q0 = ORRv16i8 $q1, killed $q1, debug-location !1068; cg.c:565:6
  BL @sqrt, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !1068; cg.c:565:6

bb.38.for.end170.split:
; predecessors: %bb.36, %bb.37
  liveins: $d0
  renamable $x8 = LDRXui $fp, 2, debug-location !1068 :: (dereferenceable load 8 from %ir.rnorm.addr, align 16); cg.c:565:6
  STRDui killed renamable $d0, killed renamable $x8, 0, debug-location !1069 :: (store 8 into %ir.155); cg.c:565:12
  $fp, $lr = frame-destroy LDPXi $sp, 16, debug-location !1070 :: (load 8 from %stack.20), (load 8 from %stack.19); cg.c:566:1
  $sp = frame-destroy ADDXri $sp, 144, 0, debug-location !1070; cg.c:566:1
  RET undef $lr, debug-location !1070; cg.c:566:1

# End machine code for function conj_grad.

********** MI Scheduling **********
conj_grad:%bb.0 entry
  From: STPXi renamable $x1, renamable $x0, $fp, -2 :: (store 8 into %ir.colidx.addr), (store 8 into %ir.rowstr.addr)
    To: End RegionInstrs: 10
ScheduleDAGMI::schedule starting
SU(0):   STPXi renamable $x1, renamable $x0, $fp, -2 :: (store 8 into %ir.colidx.addr), (store 8 into %ir.rowstr.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   STPXi renamable $x3, renamable $x2, $fp, -4 :: (store 8 into %ir.x.addr), (store 8 into %ir.z.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   STPXi renamable $x5, renamable $x4, $fp, -6 :: (store 8 into %ir.a.addr), (store 8 into %ir.p.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(3):   STURXi renamable $x6, $fp, -56 :: (store 8 into %ir.q.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(4):   STRXui renamable $x7, $sp, 8 :: (store 8 into %ir.r.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(5):   $w8 = MOVZWi 25, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(9): Out  Latency=1
    SU(8): Data Latency=1 Reg=$w8
SU(6):   STRXui $xzr, $sp, 3, debug-location !756 :: (store 8 into %ir.rho); cg.c:409:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(7):   STRWui $wzr, $sp, 15, debug-location !757 :: (store 4 into %ir.j); cg.c:414:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(8):   STRWui renamable $w8, $sp, 12, debug-location !743 :: (store 4 into %ir.cgitmax); cg.c:406:15
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(5): Data Latency=1 Reg=$w8
  Successors:
    SU(9): Anti Latency=0
SU(9):   renamable $x8 = ADRP target-flags(aarch64-page) @naa
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(8): Anti Latency=0
    SU(5): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Disabled scoreboard hazard recognizer
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 7 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(5) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) $w8 = MOVZWi 25, 0
  Ready @0c
  TopQ.A BotLatency SU(5) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 7 6 8 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(8) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) STRWui renamable $w8, $sp, 12, debug-location !743 :: (store 4 into %ir.cgitmax); cg.c:406:15
  Ready @1c
  TopQ.A TopLatency SU(8) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 7 6 9 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(9) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(9) renamable $x8 = ADRP target-flags(aarch64-page) @naa
  Ready @2c
  TopQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 7 6 
  TopQ.A RemainingLatency 0 + 3c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STPXi renamable $x1, renamable $x0, $fp, -2 :: (store 8 into %ir.colidx.addr), (store 8 into %ir.rowstr.addr)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 1 2 3 4 7 
  TopQ.A RemainingLatency 0 + 4c > CritPath 2
  Cand SU(6) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) STPXi renamable $x3, renamable $x2, $fp, -4 :: (store 8 into %ir.x.addr), (store 8 into %ir.z.addr)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 7 2 3 4 
  TopQ.A RemainingLatency 0 + 5c > CritPath 2
  Cand SU(6) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) STPXi renamable $x5, renamable $x4, $fp, -6 :: (store 8 into %ir.a.addr), (store 8 into %ir.p.addr)
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 7 4 3 
  TopQ.A RemainingLatency 0 + 6c > CritPath 2
  Cand SU(6) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) STURXi renamable $x6, $fp, -56 :: (store 8 into %ir.q.addr)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 7 4 
  TopQ.A RemainingLatency 0 + 7c > CritPath 2
  Cand SU(6) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) STRXui renamable $x7, $sp, 8 :: (store 8 into %ir.r.addr)
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 7 
  TopQ.A RemainingLatency 0 + 8c > CritPath 2
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) STRXui $xzr, $sp, 3, debug-location !756 :: (store 8 into %ir.rho); cg.c:409:9
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) STRWui $wzr, $sp, 15, debug-location !757 :: (store 4 into %ir.j); cg.c:414:12
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(5):   $w8 = MOVZWi 25, 0
SU(8):   STRWui renamable $w8, $sp, 12, debug-location !743 :: (store 4 into %ir.cgitmax); cg.c:406:15
SU(9):   renamable $x8 = ADRP target-flags(aarch64-page) @naa
SU(0):   STPXi renamable $x1, renamable $x0, $fp, -2 :: (store 8 into %ir.colidx.addr), (store 8 into %ir.rowstr.addr)
SU(1):   STPXi renamable $x3, renamable $x2, $fp, -4 :: (store 8 into %ir.x.addr), (store 8 into %ir.z.addr)
SU(2):   STPXi renamable $x5, renamable $x4, $fp, -6 :: (store 8 into %ir.a.addr), (store 8 into %ir.p.addr)
SU(3):   STURXi renamable $x6, $fp, -56 :: (store 8 into %ir.q.addr)
SU(4):   STRXui renamable $x7, $sp, 8 :: (store 8 into %ir.r.addr)
SU(6):   STRXui $xzr, $sp, 3, debug-location !756 :: (store 8 into %ir.rho); cg.c:409:9
SU(7):   STRWui $wzr, $sp, 15, debug-location !757 :: (store 4 into %ir.j); cg.c:414:12

********** MI Scheduling **********
conj_grad:%bb.0 entry
  From: frame-setup STPXi killed $fp, killed $lr, $sp, 16 :: (store 8 into %stack.20), (store 8 into %stack.19)
    To: frame-setup CFI_INSTRUCTION def_cfa $w29, 16
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   frame-setup STPXi $fp, $lr, $sp, 16 :: (store 8 into %stack.20), (store 8 into %stack.19)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Anti Latency=0
SU(1):   $fp = frame-setup ADDXri $sp, 128, 0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Anti Latency=0
ExitSU:   frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) frame-setup STPXi $fp, $lr, $sp, 16 :: (store 8 into %stack.20), (store 8 into %stack.19)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $fp = frame-setup ADDXri $sp, 128, 0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   frame-setup STPXi $fp, $lr, $sp, 16 :: (store 8 into %stack.20), (store 8 into %stack.19)
SU(1):   $fp = frame-setup ADDXri $sp, 128, 0

Fixup kills for %bb.0
********** MI Scheduling **********
conj_grad:%bb.1 for.cond
  From: renamable $w9 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !762 :: (dereferenceable load 4 from @naa); cg.c:414:21
    To: Bcc 10, %bb.3, implicit $nzcv, debug-location !765; cg.c:414:5
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $w9 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !762 :: (dereferenceable load 4 from @naa); cg.c:414:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$w9
SU(1):   renamable $w10 = LDRWui $sp, 15, debug-location !760 :: (dereferenceable load 4 from %ir.j); cg.c:414:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=$w10
SU(2):   renamable $w9 = nsw ADDWri renamable $w9, 1, 0, debug-location !763; cg.c:414:25
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w9
  Successors:
    SU(3): Data Latency=1 Reg=$w9
SU(3):   $wzr = SUBSWrs renamable $w10, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !765; cg.c:414:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=$w9
    SU(1): Data Latency=4 Reg=$w10
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.3, implicit $nzcv, debug-location !765; cg.c:414:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w9 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !762 :: (dereferenceable load 4 from @naa); cg.c:414:21
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w10 = LDRWui $sp, 15, debug-location !760 :: (dereferenceable load 4 from %ir.j); cg.c:414:17
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w9 = nsw ADDWri renamable $w9, 1, 0, debug-location !763; cg.c:414:25
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $wzr = SUBSWrs renamable $w10, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !765; cg.c:414:5
  Ready @5c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   renamable $w9 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !762 :: (dereferenceable load 4 from @naa); cg.c:414:21
SU(1):   renamable $w10 = LDRWui $sp, 15, debug-location !760 :: (dereferenceable load 4 from %ir.j); cg.c:414:17
SU(2):   renamable $w9 = nsw ADDWri renamable $w9, 1, 0, debug-location !763; cg.c:414:25
SU(3):   $wzr = SUBSWrs renamable $w10, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !765; cg.c:414:5

Fixup kills for %bb.1
********** MI Scheduling **********
conj_grad:%bb.2 for.body
  From: renamable $x9 = LDURXi $fp, -56, debug-location !766 :: (dereferenceable load 8 from %ir.q.addr); cg.c:415:9
    To: B %bb.1
 RegionInstrs: 21
ScheduleDAGMI::schedule starting
SU(0):   renamable $x9 = LDURXi $fp, -56, debug-location !766 :: (dereferenceable load 8 from %ir.q.addr); cg.c:415:9
  # preds left       : 0
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 35
  Successors:
    SU(3): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x9
    SU(17): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $x10 = LDRSWui $sp, 15, debug-location !768 :: (dereferenceable load 4 from %ir.j); cg.c:415:11
  # preds left       : 0
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 35
  Successors:
    SU(4): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x10
    SU(20): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
SU(2):   STRXroX $xzr, renamable $x9, renamable $x10, 0, 1, debug-location !769 :: (store 8 into %ir.arrayidx); cg.c:415:14
  # preds left       : 4
  # succs left       : 17
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 31
  Predecessors:
    SU(1): Data Latency=4 Reg=$x10
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=$x9
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(3): Anti Latency=0
    SU(4): Anti Latency=0
    SU(20): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(18): Ord  Latency=1 Memory
    SU(12): Ord  Latency=1 Memory
    SU(6): Ord  Latency=1 Memory
    SU(4): Ord  Latency=1 Memory
    SU(16): Ord  Latency=1 Memory
    SU(15): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(10): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
    SU(3): Ord  Latency=1 Memory
SU(3):   renamable $x9 = LDURXi $fp, -32, debug-location !770 :: (dereferenceable load 8 from %ir.z.addr); cg.c:416:9
  # preds left       : 3
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 30
  Predecessors:
    SU(2): Anti Latency=0
    SU(2): Ord  Latency=1 Memory
    SU(0): Out  Latency=1
  Successors:
    SU(6): Out  Latency=1
    SU(5): Data Latency=4 Reg=$x9
    SU(17): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
SU(4):   renamable $x10 = LDRSWui $sp, 15, debug-location !771 :: (dereferenceable load 4 from %ir.j); cg.c:416:11
  # preds left       : 3
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 30
  Predecessors:
    SU(2): Anti Latency=0
    SU(2): Ord  Latency=1 Memory
    SU(1): Out  Latency=1
  Successors:
    SU(7): Out  Latency=1
    SU(5): Data Latency=4 Reg=$x10
    SU(20): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
SU(5):   STRXroX $xzr, renamable $x9, renamable $x10, 0, 1, debug-location !772 :: (store 8 into %ir.arrayidx2); cg.c:416:14
  # preds left       : 7
  # succs left       : 14
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 26
  Predecessors:
    SU(4): Data Latency=4 Reg=$x10
    SU(4): Ord  Latency=0 Memory
    SU(3): Data Latency=4 Reg=$x9
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(6): Anti Latency=0
    SU(7): Anti Latency=0
    SU(20): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(18): Ord  Latency=1 Memory
    SU(12): Ord  Latency=1 Memory
    SU(6): Ord  Latency=1 Memory
    SU(16): Ord  Latency=1 Memory
    SU(15): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(10): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
SU(6):   renamable $x9 = LDRSWui $sp, 15, debug-location !774 :: (dereferenceable load 4 from %ir.j); cg.c:417:18
  # preds left       : 4
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 25
  Predecessors:
    SU(5): Anti Latency=0
    SU(5): Ord  Latency=1 Memory
    SU(3): Out  Latency=1
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=4 Reg=$x9
    SU(20): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
SU(7):   renamable $x10 = LDURXi $fp, -24, debug-location !773 :: (dereferenceable load 8 from %ir.x.addr); cg.c:417:16
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 24
  Predecessors:
    SU(5): Anti Latency=0
    SU(5): Ord  Latency=1 Memory
    SU(4): Out  Latency=1
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(10): Out  Latency=1
    SU(9): Data Latency=4 Reg=$x10
    SU(17): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
SU(8):   renamable $x9 = UBFMXri renamable $x9, 61, 60, debug-location !773; cg.c:417:16
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 21
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$x9
  Successors:
    SU(12): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x9
    SU(9): Data Latency=1 Reg=$x9
SU(9):   renamable $d0 = LDRDroX renamable $x10, renamable $x9, 0, 0, debug-location !773 :: (load 8 from %ir.arrayidx4); cg.c:417:16
  # preds left       : 4
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 4
  Depth              : 15
  Height             : 20
  Predecessors:
    SU(8): Data Latency=1 Reg=$x9
    SU(7): Data Latency=4 Reg=$x10
    SU(5): Ord  Latency=1 Memory
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(15): Out  Latency=1
    SU(11): Data Latency=4 Reg=$d0
    SU(10): Anti Latency=0
    SU(12): Anti Latency=0
    SU(20): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
SU(10):   renamable $x10 = LDRXui $sp, 8, debug-location !775 :: (dereferenceable load 8 from %ir.r.addr); cg.c:417:9
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 15
  Height             : 20
  Predecessors:
    SU(9): Anti Latency=0
    SU(7): Out  Latency=1
    SU(5): Ord  Latency=1 Memory
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(13): Out  Latency=1
    SU(11): Data Latency=4 Reg=$x10
    SU(17): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
SU(11):   STRDroX renamable $d0, renamable $x10, renamable $x9, 0, 0, debug-location !777 :: (store 8 into %ir.arrayidx6); cg.c:417:14
  # preds left       : 13
  # succs left       : 10
  # rdefs left       : 0
  Latency            : 1
  Depth              : 19
  Height             : 16
  Predecessors:
    SU(10): Data Latency=4 Reg=$x10
    SU(10): Ord  Latency=0 Memory
    SU(9): Data Latency=4 Reg=$d0
    SU(9): Ord  Latency=0 Memory
    SU(8): Data Latency=1 Reg=$x9
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(15): Anti Latency=0
    SU(13): Anti Latency=0
    SU(12): Anti Latency=0
    SU(20): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(18): Ord  Latency=1 Memory
    SU(12): Ord  Latency=1 Memory
    SU(16): Ord  Latency=1 Memory
    SU(15): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
SU(12):   renamable $x9 = LDRSWui $sp, 15, debug-location !779 :: (dereferenceable load 4 from %ir.j); cg.c:418:18
  # preds left       : 6
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 20
  Height             : 15
  Predecessors:
    SU(11): Anti Latency=0
    SU(11): Ord  Latency=1 Memory
    SU(9): Anti Latency=0
    SU(8): Out  Latency=1
    SU(5): Ord  Latency=1 Memory
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(14): Out  Latency=1
    SU(14): Data Latency=4 Reg=$x9
    SU(20): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
SU(13):   renamable $x10 = LDRXui $sp, 8, debug-location !778 :: (dereferenceable load 8 from %ir.r.addr); cg.c:418:16
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 20
  Height             : 14
  Predecessors:
    SU(11): Anti Latency=0
    SU(11): Ord  Latency=1 Memory
    SU(10): Out  Latency=1
    SU(5): Ord  Latency=1 Memory
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(16): Out  Latency=1
    SU(15): Data Latency=4 Reg=$x10
    SU(17): Ord  Latency=0 Memory
SU(14):   renamable $x9 = UBFMXri renamable $x9, 61, 60, debug-location !778; cg.c:418:16
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 24
  Height             : 11
  Predecessors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=4 Reg=$x9
  Successors:
    SU(18): Out  Latency=1
    SU(17): Data Latency=1 Reg=$x9
    SU(15): Data Latency=1 Reg=$x9
SU(15):   renamable $d0 = LDRDroX renamable $x10, renamable $x9, 0, 0, debug-location !778 :: (load 8 from %ir.arrayidx8); cg.c:418:16
  # preds left       : 7
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 10
  Predecessors:
    SU(14): Data Latency=1 Reg=$x9
    SU(13): Data Latency=4 Reg=$x10
    SU(11): Anti Latency=0
    SU(11): Ord  Latency=1 Memory
    SU(9): Out  Latency=1
    SU(5): Ord  Latency=1 Memory
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(17): Data Latency=4 Reg=$d0
    SU(16): Anti Latency=0
    SU(18): Anti Latency=0
    SU(20): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
SU(16):   renamable $x10 = LDURXi $fp, -48, debug-location !780 :: (dereferenceable load 8 from %ir.p.addr); cg.c:418:9
  # preds left       : 5
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 10
  Predecessors:
    SU(15): Anti Latency=0
    SU(13): Out  Latency=1
    SU(11): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(17): Data Latency=4 Reg=$x10
    SU(17): Ord  Latency=0 Memory
SU(17):   STRDroX renamable $d0, renamable $x10, renamable $x9, 0, 0, debug-location !782 :: (store 8 into %ir.arrayidx10); cg.c:418:14
  # preds left       : 18
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 29
  Height             : 6
  Predecessors:
    SU(16): Data Latency=4 Reg=$x10
    SU(16): Ord  Latency=0 Memory
    SU(15): Data Latency=4 Reg=$d0
    SU(15): Ord  Latency=0 Memory
    SU(14): Data Latency=1 Reg=$x9
    SU(13): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(18): Anti Latency=0
    SU(20): Ord  Latency=0 Memory
    SU(18): Ord  Latency=1 Memory
SU(18):   renamable $w9 = LDRWui $sp, 15, debug-location !783 :: (dereferenceable load 4 from %ir.j); cg.c:414:31
  # preds left       : 7
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 30
  Height             : 5
  Predecessors:
    SU(17): Anti Latency=0
    SU(17): Ord  Latency=1 Memory
    SU(15): Anti Latency=0
    SU(14): Out  Latency=1
    SU(11): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(19): Out  Latency=1
    SU(19): Data Latency=4 Reg=$w9
    SU(20): Ord  Latency=0 Memory
SU(19):   renamable $w9 = nsw ADDWri renamable $w9, 1, 0, debug-location !783; cg.c:414:31
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 34
  Height             : 1
  Predecessors:
    SU(18): Out  Latency=1
    SU(18): Data Latency=4 Reg=$w9
  Successors:
    SU(20): Data Latency=1 Reg=$w9
SU(20):   STRWui renamable $w9, $sp, 15, debug-location !783 :: (store 4 into %ir.j); cg.c:414:31
  # preds left       : 12
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 35
  Height             : 0
  Predecessors:
    SU(19): Data Latency=1 Reg=$w9
    SU(18): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
ExitSU:   B %bb.1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 35
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 35
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x9 = LDURXi $fp, -56, debug-location !766 :: (dereferenceable load 8 from %ir.q.addr); cg.c:415:9
  Ready @0c
  TopQ.A BotLatency SU(0) 35c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x10 = LDRSWui $sp, 15, debug-location !768 :: (dereferenceable load 4 from %ir.j); cg.c:415:11
  Ready @1c
  TopQ.A BotLatency SU(1) 35c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRXroX $xzr, renamable $x9, renamable $x10, 0, 1, debug-location !769 :: (store 8 into %ir.arrayidx); cg.c:415:14
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 3 
  TopQ.A RemainingLatency 0 + 6c > CritPath 35
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) renamable $x9 = LDURXi $fp, -32, debug-location !770 :: (dereferenceable load 8 from %ir.z.addr); cg.c:416:9
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $x10 = LDRSWui $sp, 15, debug-location !771 :: (dereferenceable load 4 from %ir.j); cg.c:416:11
  Ready @7c
  TopQ.A BotLatency SU(4) 30c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 11 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) STRXroX $xzr, renamable $x9, renamable $x10, 0, 1, debug-location !772 :: (store 8 into %ir.arrayidx2); cg.c:416:14
  Ready @11c
  TopQ.A TopLatency SU(5) 9c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 7 
  TopQ.A RemainingLatency 0 + 12c > CritPath 35
  Cand SU(6) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(6) renamable $x9 = LDRSWui $sp, 15, debug-location !774 :: (dereferenceable load 4 from %ir.j); cg.c:417:18
  Ready @12c
  TopQ.A TopLatency SU(6) 10c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 7
  Executed: 13c
  Critical: 7c, 7 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 8 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $x10 = LDURXi $fp, -24, debug-location !773 :: (dereferenceable load 8 from %ir.x.addr); cg.c:417:16
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 8
  Executed: 14c
  Critical: 8c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 16 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) renamable $x9 = UBFMXri renamable $x9, 61, 60, debug-location !773; cg.c:417:16
  Ready @16c
  TopQ.A TopLatency SU(8) 14c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 9
  Executed: 17c
  Critical: 9c, 9 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) renamable $d0 = LDRDroX renamable $x10, renamable $x9, 0, 0, debug-location !773 :: (load 8 from %ir.arrayidx4); cg.c:417:16
  Ready @17c
  TopQ.A TopLatency SU(9) 15c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 10
  Executed: 18c
  Critical: 10c, 10 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) renamable $x10 = LDRXui $sp, 8, debug-location !775 :: (dereferenceable load 8 from %ir.r.addr); cg.c:417:9
  Ready @18c
  TopQ.A BotLatency SU(10) 20c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 11
  Executed: 19c
  Critical: 11c, 11 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 22 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 11 
Pick Top ONLY1     
Scheduling SU(11) STRDroX renamable $d0, renamable $x10, renamable $x9, 0, 0, debug-location !777 :: (store 8 into %ir.arrayidx6); cg.c:417:14
  Ready @22c
  TopQ.A TopLatency SU(11) 19c
  *** Max MOps 1 at cycle 22
Cycle: 23 TopQ.A
TopQ.A @23c
  Retired: 12
  Executed: 23c
  Critical: 12c, 12 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 13 
  TopQ.A RemainingLatency 0 + 23c > CritPath 35
  Cand SU(12) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(12) renamable $x9 = LDRSWui $sp, 15, debug-location !779 :: (dereferenceable load 4 from %ir.j); cg.c:418:18
  Ready @23c
  TopQ.A TopLatency SU(12) 20c
  *** Max MOps 1 at cycle 23
Cycle: 24 TopQ.A
TopQ.A @24c
  Retired: 13
  Executed: 24c
  Critical: 13c, 13 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 14 
Queue TopQ.A: 13 
Pick Top ONLY1     
Scheduling SU(13) renamable $x10 = LDRXui $sp, 8, debug-location !778 :: (dereferenceable load 8 from %ir.r.addr); cg.c:418:16
  Ready @24c
  *** Max MOps 1 at cycle 24
Cycle: 25 TopQ.A
TopQ.A @25c
  Retired: 14
  Executed: 25c
  Critical: 14c, 14 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 27 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 14 
Pick Top ONLY1     
Scheduling SU(14) renamable $x9 = UBFMXri renamable $x9, 61, 60, debug-location !778; cg.c:418:16
  Ready @27c
  TopQ.A TopLatency SU(14) 24c
  *** Max MOps 1 at cycle 27
Cycle: 28 TopQ.A
TopQ.A @28c
  Retired: 15
  Executed: 28c
  Critical: 15c, 15 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 
Pick Top ONLY1     
Scheduling SU(15) renamable $d0 = LDRDroX renamable $x10, renamable $x9, 0, 0, debug-location !778 :: (load 8 from %ir.arrayidx8); cg.c:418:16
  Ready @28c
  TopQ.A TopLatency SU(15) 25c
  *** Max MOps 1 at cycle 28
Cycle: 29 TopQ.A
TopQ.A @29c
  Retired: 16
  Executed: 29c
  Critical: 16c, 16 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 16 
Pick Top ONLY1     
Scheduling SU(16) renamable $x10 = LDURXi $fp, -48, debug-location !780 :: (dereferenceable load 8 from %ir.p.addr); cg.c:418:9
  Ready @29c
  TopQ.A BotLatency SU(16) 10c
  *** Max MOps 1 at cycle 29
Cycle: 30 TopQ.A
TopQ.A @30c
  Retired: 17
  Executed: 30c
  Critical: 17c, 17 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 33 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 17 
Pick Top ONLY1     
Scheduling SU(17) STRDroX renamable $d0, renamable $x10, renamable $x9, 0, 0, debug-location !782 :: (store 8 into %ir.arrayidx10); cg.c:418:14
  Ready @33c
  TopQ.A TopLatency SU(17) 29c
  *** Max MOps 1 at cycle 33
Cycle: 34 TopQ.A
TopQ.A @34c
  Retired: 18
  Executed: 34c
  Critical: 18c, 18 MOps
  ExpectedLatency: 29c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 18 
Pick Top ONLY1     
Scheduling SU(18) renamable $w9 = LDRWui $sp, 15, debug-location !783 :: (dereferenceable load 4 from %ir.j); cg.c:414:31
  Ready @34c
  TopQ.A TopLatency SU(18) 30c
  *** Max MOps 1 at cycle 34
Cycle: 35 TopQ.A
TopQ.A @35c
  Retired: 19
  Executed: 35c
  Critical: 19c, 19 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 38 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 19 
Pick Top ONLY1     
Scheduling SU(19) renamable $w9 = nsw ADDWri renamable $w9, 1, 0, debug-location !783; cg.c:414:31
  Ready @38c
  TopQ.A TopLatency SU(19) 34c
  *** Max MOps 1 at cycle 38
Cycle: 39 TopQ.A
TopQ.A @39c
  Retired: 20
  Executed: 39c
  Critical: 20c, 20 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 20 
Pick Top ONLY1     
Scheduling SU(20) STRWui renamable $w9, $sp, 15, debug-location !783 :: (store 4 into %ir.j); cg.c:414:31
  Ready @39c
  TopQ.A TopLatency SU(20) 35c
  *** Max MOps 1 at cycle 39
Cycle: 40 TopQ.A
TopQ.A @40c
  Retired: 21
  Executed: 40c
  Critical: 21c, 21 MOps
  ExpectedLatency: 35c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   renamable $x9 = LDURXi $fp, -56, debug-location !766 :: (dereferenceable load 8 from %ir.q.addr); cg.c:415:9
SU(1):   renamable $x10 = LDRSWui $sp, 15, debug-location !768 :: (dereferenceable load 4 from %ir.j); cg.c:415:11
SU(2):   STRXroX $xzr, renamable $x9, renamable $x10, 0, 1, debug-location !769 :: (store 8 into %ir.arrayidx); cg.c:415:14
SU(3):   renamable $x9 = LDURXi $fp, -32, debug-location !770 :: (dereferenceable load 8 from %ir.z.addr); cg.c:416:9
SU(4):   renamable $x10 = LDRSWui $sp, 15, debug-location !771 :: (dereferenceable load 4 from %ir.j); cg.c:416:11
SU(5):   STRXroX $xzr, renamable $x9, renamable $x10, 0, 1, debug-location !772 :: (store 8 into %ir.arrayidx2); cg.c:416:14
SU(6):   renamable $x9 = LDRSWui $sp, 15, debug-location !774 :: (dereferenceable load 4 from %ir.j); cg.c:417:18
SU(7):   renamable $x10 = LDURXi $fp, -24, debug-location !773 :: (dereferenceable load 8 from %ir.x.addr); cg.c:417:16
SU(8):   renamable $x9 = UBFMXri renamable $x9, 61, 60, debug-location !773; cg.c:417:16
SU(9):   renamable $d0 = LDRDroX renamable $x10, renamable $x9, 0, 0, debug-location !773 :: (load 8 from %ir.arrayidx4); cg.c:417:16
SU(10):   renamable $x10 = LDRXui $sp, 8, debug-location !775 :: (dereferenceable load 8 from %ir.r.addr); cg.c:417:9
SU(11):   STRDroX renamable $d0, renamable $x10, renamable $x9, 0, 0, debug-location !777 :: (store 8 into %ir.arrayidx6); cg.c:417:14
SU(12):   renamable $x9 = LDRSWui $sp, 15, debug-location !779 :: (dereferenceable load 4 from %ir.j); cg.c:418:18
SU(13):   renamable $x10 = LDRXui $sp, 8, debug-location !778 :: (dereferenceable load 8 from %ir.r.addr); cg.c:418:16
SU(14):   renamable $x9 = UBFMXri renamable $x9, 61, 60, debug-location !778; cg.c:418:16
SU(15):   renamable $d0 = LDRDroX renamable $x10, renamable $x9, 0, 0, debug-location !778 :: (load 8 from %ir.arrayidx8); cg.c:418:16
SU(16):   renamable $x10 = LDURXi $fp, -48, debug-location !780 :: (dereferenceable load 8 from %ir.p.addr); cg.c:418:9
SU(17):   STRDroX renamable $d0, renamable $x10, renamable $x9, 0, 0, debug-location !782 :: (store 8 into %ir.arrayidx10); cg.c:418:14
SU(18):   renamable $w9 = LDRWui $sp, 15, debug-location !783 :: (dereferenceable load 4 from %ir.j); cg.c:414:31
SU(19):   renamable $w9 = nsw ADDWri renamable $w9, 1, 0, debug-location !783; cg.c:414:31
SU(20):   STRWui renamable $w9, $sp, 15, debug-location !783 :: (store 4 into %ir.j); cg.c:414:31

Fixup kills for %bb.2
********** MI Scheduling **********
conj_grad:%bb.3 for.end
  From: STRWui $wzr, $sp, 15, debug-location !787 :: (store 4 into %ir.j); cg.c:425:12
    To: End RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   STRWui $wzr, $sp, 15, debug-location !787 :: (store 4 into %ir.j); cg.c:425:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) @lastcol
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   renamable $x9 = ADRP target-flags(aarch64-page) @firstcol
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x8 = ADRP target-flags(aarch64-page) @lastcol
  Ready @0c
  TopQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x9 = ADRP target-flags(aarch64-page) @firstcol
  Ready @1c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STRWui $wzr, $sp, 15, debug-location !787 :: (store 4 into %ir.j); cg.c:425:12
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.3 ***
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) @lastcol
SU(2):   renamable $x9 = ADRP target-flags(aarch64-page) @firstcol
SU(0):   STRWui $wzr, $sp, 15, debug-location !787 :: (store 4 into %ir.j); cg.c:425:12

Fixup kills for %bb.3
********** MI Scheduling **********
conj_grad:%bb.4 for.cond11
  From: renamable $w10 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !792 :: (dereferenceable load 4 from @lastcol); cg.c:425:21
    To: Bcc 10, %bb.6, implicit $nzcv, debug-location !797; cg.c:425:5
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $w10 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !792 :: (dereferenceable load 4 from @lastcol); cg.c:425:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w10
SU(1):   renamable $w11 = LDRWui renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !793 :: (dereferenceable load 4 from @firstcol); cg.c:425:31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=$w11
SU(2):   renamable $w12 = LDRWui $sp, 15, debug-location !790 :: (dereferenceable load 4 from %ir.j); cg.c:425:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=$w12
SU(3):   $w10 = SUBWrs renamable $w10, renamable $w11, 0, debug-location !794; cg.c:425:29
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=$w11
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w10
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$w10
SU(4):   renamable $w10 = nsw ADDWri renamable $w10, 1, 0, debug-location !795; cg.c:425:40
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$w10
  Successors:
    SU(5): Data Latency=1 Reg=$w10
SU(5):   $wzr = SUBSWrs renamable $w12, renamable $w10, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !797; cg.c:425:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=$w10
    SU(2): Data Latency=4 Reg=$w12
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.6, implicit $nzcv, debug-location !797; cg.c:425:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 7
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w10 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !792 :: (dereferenceable load 4 from @lastcol); cg.c:425:21
  Ready @0c
  TopQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 7
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w11 = LDRWui renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !793 :: (dereferenceable load 4 from @firstcol); cg.c:425:31
  Ready @1c
  TopQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w12 = LDRWui $sp, 15, debug-location !790 :: (dereferenceable load 4 from %ir.j); cg.c:425:17
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $w10 = SUBWrs renamable $w10, renamable $w11, 0, debug-location !794; cg.c:425:29
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w10 = nsw ADDWri renamable $w10, 1, 0, debug-location !795; cg.c:425:40
  Ready @6c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $wzr = SUBSWrs renamable $w12, renamable $w10, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !797; cg.c:425:5
  Ready @7c
  TopQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   renamable $w10 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !792 :: (dereferenceable load 4 from @lastcol); cg.c:425:21
SU(1):   renamable $w11 = LDRWui renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !793 :: (dereferenceable load 4 from @firstcol); cg.c:425:31
SU(2):   renamable $w12 = LDRWui $sp, 15, debug-location !790 :: (dereferenceable load 4 from %ir.j); cg.c:425:17
SU(3):   $w10 = SUBWrs renamable $w10, renamable $w11, 0, debug-location !794; cg.c:425:29
SU(4):   renamable $w10 = nsw ADDWri renamable $w10, 1, 0, debug-location !795; cg.c:425:40
SU(5):   $wzr = SUBSWrs renamable $w12, renamable $w10, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !797; cg.c:425:5

Fixup kills for %bb.4
********** MI Scheduling **********
conj_grad:%bb.5 for.body14
  From: renamable $x10 = LDRXui $sp, 8, debug-location !800 :: (dereferenceable load 8 from %ir.r.addr); cg.c:426:21
    To: B %bb.4
 RegionInstrs: 9
ScheduleDAGMI::schedule starting
SU(0):   renamable $x10 = LDRXui $sp, 8, debug-location !800 :: (dereferenceable load 8 from %ir.r.addr); cg.c:426:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(4): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x10
SU(1):   renamable $x11 = LDRSWui $sp, 15, debug-location !801 :: (dereferenceable load 4 from %ir.j); cg.c:426:23
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(4): Data Latency=4 Reg=$w11
    SU(4): Data Latency=0 Reg=$x11
    SU(2): Data Latency=4 Reg=$x11
    SU(8): Ord  Latency=0 Memory
SU(2):   renamable $d0 = LDRDroX renamable $x10, renamable $x11, 0, 1, debug-location !800 :: (load 8 from %ir.arrayidx18); cg.c:426:21
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(1): Data Latency=4 Reg=$x11
    SU(0): Data Latency=4 Reg=$x10
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$d0
    SU(4): Anti Latency=0
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
SU(3):   renamable $d1 = LDRDui $sp, 3, debug-location !798 :: (dereferenceable load 8 from %ir.rho); cg.c:426:15
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(6): Data Latency=4 Reg=$d1
    SU(7): Ord  Latency=0 Memory
SU(4):   renamable $w10 = nsw ADDWri renamable $w11, 1, 0, implicit $x11, debug-location !807; cg.c:425:46
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Anti Latency=0
    SU(1): Data Latency=4 Reg=$w11
    SU(1): Data Latency=0 Reg=$x11
    SU(0): Out  Latency=1
  Successors:
    SU(8): Data Latency=1 Reg=$w10
SU(5):   renamable $d0 = FMULDrr renamable $d0, renamable $d0, debug-location !804; cg.c:426:26
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 2
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d0
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$d0
SU(6):   renamable $d0 = FADDDrr renamable $d1, renamable $d0, debug-location !805; cg.c:426:19
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$d0
    SU(3): Data Latency=4 Reg=$d1
  Successors:
    SU(7): Data Latency=1 Reg=$d0
SU(7):   STRDui renamable $d0, $sp, 3, debug-location !806 :: (store 8 into %ir.rho); cg.c:426:13
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=$d0
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
SU(8):   STRWui renamable $w10, $sp, 15, debug-location !807 :: (store 4 into %ir.j); cg.c:425:46
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=$w10
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
ExitSU:   B %bb.4
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 10
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 10
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x10 = LDRXui $sp, 8, debug-location !800 :: (dereferenceable load 8 from %ir.r.addr); cg.c:426:21
  Ready @0c
  TopQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 10
  Cand SU(3) ORDER                              
  Cand SU(1) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x11 = LDRSWui $sp, 15, debug-location !801 :: (dereferenceable load 4 from %ir.j); cg.c:426:23
  Ready @1c
  TopQ.A BotLatency SU(1) 10c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $d1 = LDRDui $sp, 3, debug-location !798 :: (dereferenceable load 8 from %ir.rho); cg.c:426:15
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $d0 = LDRDroX renamable $x10, renamable $x11, 0, 1, debug-location !800 :: (load 8 from %ir.arrayidx18); cg.c:426:21
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w10 = nsw ADDWri renamable $w11, 1, 0, implicit $x11, debug-location !807; cg.c:425:46
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) STRWui renamable $w10, $sp, 15, debug-location !807 :: (store 4 into %ir.j); cg.c:425:46
  Ready @7c
  TopQ.A TopLatency SU(8) 5c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 9 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $d0 = FMULDrr renamable $d0, renamable $d0, debug-location !804; cg.c:426:26
  Ready @9c
  TopQ.A TopLatency SU(5) 8c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 7
  Executed: 10c
  Critical: 7c, 7 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $d0 = FADDDrr renamable $d1, renamable $d0, debug-location !805; cg.c:426:19
  Ready @10c
  TopQ.A TopLatency SU(6) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 8
  Executed: 11c
  Critical: 8c, 8 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) STRDui renamable $d0, $sp, 3, debug-location !806 :: (store 8 into %ir.rho); cg.c:426:13
  Ready @11c
  TopQ.A TopLatency SU(7) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 9
  Executed: 12c
  Critical: 9c, 9 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   renamable $x10 = LDRXui $sp, 8, debug-location !800 :: (dereferenceable load 8 from %ir.r.addr); cg.c:426:21
SU(1):   renamable $x11 = LDRSWui $sp, 15, debug-location !801 :: (dereferenceable load 4 from %ir.j); cg.c:426:23
SU(3):   renamable $d1 = LDRDui $sp, 3, debug-location !798 :: (dereferenceable load 8 from %ir.rho); cg.c:426:15
SU(2):   renamable $d0 = LDRDroX renamable $x10, renamable $x11, 0, 1, debug-location !800 :: (load 8 from %ir.arrayidx18); cg.c:426:21
SU(4):   renamable $w10 = nsw ADDWri renamable $w11, 1, 0, implicit $x11, debug-location !807; cg.c:425:46
SU(8):   STRWui renamable $w10, $sp, 15, debug-location !807 :: (store 4 into %ir.j); cg.c:425:46
SU(5):   renamable $d0 = FMULDrr renamable $d0, renamable $d0, debug-location !804; cg.c:426:26
SU(6):   renamable $d0 = FADDDrr renamable $d1, renamable $d0, debug-location !805; cg.c:426:19
SU(7):   STRDui renamable $d0, $sp, 3, debug-location !806 :: (store 8 into %ir.rho); cg.c:426:13

Fixup kills for %bb.5
********** MI Scheduling **********
conj_grad:%bb.6 for.end22
  From: $w11 = MOVZWi 1, 0
    To: End RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   $w11 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(2): Data Latency=1 Reg=$w11
SU(1):   renamable $x10 = ADRP target-flags(aarch64-page) @lastrow
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   STRWui renamable $w11, $sp, 13, debug-location !811 :: (store 4 into %ir.cgit); cg.c:434:15
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Data Latency=1 Reg=$w11
  Successors:
    SU(3): Anti Latency=0
SU(3):   renamable $x11 = ADRP target-flags(aarch64-page) @firstrow
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $w11 = MOVZWi 1, 0
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) renamable $x10 = ADRP target-flags(aarch64-page) @lastrow
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w11, $sp, 13, debug-location !811 :: (store 4 into %ir.cgit); cg.c:434:15
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $x11 = ADRP target-flags(aarch64-page) @firstrow
  Ready @3c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   $w11 = MOVZWi 1, 0
SU(1):   renamable $x10 = ADRP target-flags(aarch64-page) @lastrow
SU(2):   STRWui renamable $w11, $sp, 13, debug-location !811 :: (store 4 into %ir.cgit); cg.c:434:15
SU(3):   renamable $x11 = ADRP target-flags(aarch64-page) @firstrow

Fixup kills for %bb.6
********** MI Scheduling **********
conj_grad:%bb.7 for.cond23
  From: renamable $w13, renamable $w12 = LDPWi $sp, 12, debug-location !814 :: (dereferenceable load 4 from %ir.cgit), (dereferenceable load 4 from %ir.cgitmax); cg.c:434:20
    To: Bcc 12, %bb.27, implicit $nzcv, debug-location !818; cg.c:434:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w13, renamable $w12 = LDPWi $sp, 12, debug-location !814 :: (dereferenceable load 4 from %ir.cgit), (dereferenceable load 4 from %ir.cgitmax); cg.c:434:20
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w13
    SU(1): Data Latency=4 Reg=$w12
SU(1):   $wzr = SUBSWrs renamable $w12, renamable $w13, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !818; cg.c:434:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w13
    SU(0): Data Latency=4 Reg=$w12
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.27, implicit $nzcv, debug-location !818; cg.c:434:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w13, renamable $w12 = LDPWi $sp, 12, debug-location !814 :: (dereferenceable load 4 from %ir.cgit), (dereferenceable load 4 from %ir.cgitmax); cg.c:434:20
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $wzr = SUBSWrs renamable $w12, renamable $w13, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !818; cg.c:434:5
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   renamable $w13, renamable $w12 = LDPWi $sp, 12, debug-location !814 :: (dereferenceable load 4 from %ir.cgit), (dereferenceable load 4 from %ir.cgitmax); cg.c:434:20
SU(1):   $wzr = SUBSWrs renamable $w12, renamable $w13, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !818; cg.c:434:5

Fixup kills for %bb.7
Fixup kills for %bb.8
********** MI Scheduling **********
conj_grad:%bb.9 for.cond26
  From: renamable $w12 = LDRWui renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !825 :: (dereferenceable load 4 from @lastrow); cg.c:447:25
    To: Bcc 10, %bb.14, implicit $nzcv, debug-location !830; cg.c:447:9
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $w12 = LDRWui renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !825 :: (dereferenceable load 4 from @lastrow); cg.c:447:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w12
SU(1):   renamable $w13 = LDRWui renamable $x11, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !826 :: (dereferenceable load 4 from @firstrow); cg.c:447:35
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=$w13
SU(2):   renamable $w14 = LDRWui $sp, 15, debug-location !823 :: (dereferenceable load 4 from %ir.j); cg.c:447:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=$w14
SU(3):   $w12 = SUBWrs renamable $w12, renamable $w13, 0, debug-location !827; cg.c:447:33
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=$w13
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w12
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$w12
SU(4):   renamable $w12 = nsw ADDWri renamable $w12, 1, 0, debug-location !828; cg.c:447:44
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$w12
  Successors:
    SU(5): Data Latency=1 Reg=$w12
SU(5):   $wzr = SUBSWrs renamable $w14, renamable $w12, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !830; cg.c:447:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=$w12
    SU(2): Data Latency=4 Reg=$w14
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.14, implicit $nzcv, debug-location !830; cg.c:447:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 7
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w12 = LDRWui renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !825 :: (dereferenceable load 4 from @lastrow); cg.c:447:25
  Ready @0c
  TopQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 7
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w13 = LDRWui renamable $x11, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !826 :: (dereferenceable load 4 from @firstrow); cg.c:447:35
  Ready @1c
  TopQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w14 = LDRWui $sp, 15, debug-location !823 :: (dereferenceable load 4 from %ir.j); cg.c:447:21
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $w12 = SUBWrs renamable $w12, renamable $w13, 0, debug-location !827; cg.c:447:33
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w12 = nsw ADDWri renamable $w12, 1, 0, debug-location !828; cg.c:447:44
  Ready @6c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $wzr = SUBSWrs renamable $w14, renamable $w12, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !830; cg.c:447:9
  Ready @7c
  TopQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   renamable $w12 = LDRWui renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !825 :: (dereferenceable load 4 from @lastrow); cg.c:447:25
SU(1):   renamable $w13 = LDRWui renamable $x11, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !826 :: (dereferenceable load 4 from @firstrow); cg.c:447:35
SU(2):   renamable $w14 = LDRWui $sp, 15, debug-location !823 :: (dereferenceable load 4 from %ir.j); cg.c:447:21
SU(3):   $w12 = SUBWrs renamable $w12, renamable $w13, 0, debug-location !827; cg.c:447:33
SU(4):   renamable $w12 = nsw ADDWri renamable $w12, 1, 0, debug-location !828; cg.c:447:44
SU(5):   $wzr = SUBSWrs renamable $w14, renamable $w12, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !830; cg.c:447:9

Fixup kills for %bb.9
********** MI Scheduling **********
conj_grad:%bb.10 for.body30
  From: renamable $x12 = LDURXi $fp, -16, debug-location !833 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:22
    To: End RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $x12 = LDURXi $fp, -16, debug-location !833 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:22
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x12
SU(1):   renamable $x13 = LDRSWui $sp, 15, debug-location !835 :: (dereferenceable load 4 from %ir.j); cg.c:449:29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=$x13
SU(2):   STRXui $xzr, $sp, 4, debug-location !831 :: (store 8 into %ir.sum); cg.c:448:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Ord  Latency=1 Memory
SU(3):   renamable $w12 = LDRWroX renamable $x12, renamable $x13, 0, 1, debug-location !833 :: (load 4 from %ir.arrayidx32); cg.c:449:22
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(2): Ord  Latency=1 Memory
    SU(1): Data Latency=4 Reg=$x13
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x12
  Successors:
    ExitSU: Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 8
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 8
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x12 = LDURXi $fp, -16, debug-location !833 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:22
  Ready @0c
  TopQ.A BotLatency SU(0) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 8
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x13 = LDRSWui $sp, 15, debug-location !835 :: (dereferenceable load 4 from %ir.j); cg.c:449:29
  Ready @1c
  TopQ.A BotLatency SU(1) 8c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRXui $xzr, $sp, 4, debug-location !831 :: (store 8 into %ir.sum); cg.c:448:17
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w12 = LDRWroX renamable $x12, renamable $x13, 0, 1, debug-location !833 :: (load 4 from %ir.arrayidx32); cg.c:449:22
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   renamable $x12 = LDURXi $fp, -16, debug-location !833 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:22
SU(1):   renamable $x13 = LDRSWui $sp, 15, debug-location !835 :: (dereferenceable load 4 from %ir.j); cg.c:449:29
SU(2):   STRXui $xzr, $sp, 4, debug-location !831 :: (store 8 into %ir.sum); cg.c:448:17
SU(3):   renamable $w12 = LDRWroX renamable $x12, renamable $x13, 0, 1, debug-location !833 :: (load 4 from %ir.arrayidx32); cg.c:449:22

Fixup kills for %bb.10
********** MI Scheduling **********
conj_grad:%bb.11 for.cond33
  From: STRWui killed renamable $w12, $sp, 14, debug-location !DILocation(line: 0, scope: !834) :: (store 4 into %ir.k); cg.c:0
    To: Bcc 10, %bb.13, implicit $nzcv, debug-location !845; cg.c:449:13
 RegionInstrs: 9
ScheduleDAGMI::schedule starting
SU(0):   STRWui renamable $w12, $sp, 14, debug-location !DILocation(line: 0, scope: !834) :: (store 4 into %ir.k); cg.c:0
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 10
  Successors:
    SU(1): Anti Latency=0
    SU(2): Ord  Latency=1 Memory
    SU(6): Ord  Latency=1 Memory
SU(1):   renamable $x12 = LDURXi $fp, -16, debug-location !840 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:37
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Predecessors:
    SU(0): Anti Latency=0
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$x12
SU(2):   renamable $w14, $w13 = LDPWi $sp, 14, debug-location !841 :: (dereferenceable load 4 from %ir.j), (dereferenceable load 4 from %ir.k); cg.c:449:44
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 9
  Predecessors:
    SU(0): Ord  Latency=1 Memory
  Successors:
    SU(8): Data Latency=4 Reg=$w14
    SU(3): Out  Latency=1
    SU(3): Data Latency=0 Reg=$w13
SU(3):   $w13 = KILL $w13, implicit-def $x13, debug-location !841; cg.c:449:44
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 8
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=0 Reg=$w13
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=0 Reg=$x13
SU(4):   $x13 = SBFMXri $x13, 0, 31, debug-location !841; cg.c:449:44
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 7
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=0 Reg=$x13
  Successors:
    SU(5): Data Latency=1 Reg=$x13
SU(5):   renamable $x12 = ADDXrs renamable $x12, renamable $x13, 2, debug-location !840; cg.c:449:37
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(4): Data Latency=1 Reg=$x13
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x12
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x12
SU(6):   renamable $w12 = LDRWui renamable $x12, 1, debug-location !840 :: (load 4 from %ir.arrayidx36); cg.c:449:37
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x12
    SU(0): Ord  Latency=1 Memory
  Successors:
    SU(8): Data Latency=4 Reg=$w12
SU(7):   renamable $d0 = LDRDui $sp, 4, debug-location !844 :: (dereferenceable load 8 from %ir.sum); cg.c:0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(8):   $wzr = SUBSWrs renamable $w14, renamable $w12, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !845; cg.c:449:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(6): Data Latency=4 Reg=$w12
    SU(2): Data Latency=4 Reg=$w14
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.13, implicit $nzcv, debug-location !845; cg.c:449:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=1 Artificial
    SU(7): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 10
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 7 
  TopQ.A RemainingLatency 0 + 0c > CritPath 10
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) STRWui renamable $w12, $sp, 14, debug-location !DILocation(line: 0, scope: !834) :: (store 4 into %ir.k); cg.c:0
  Ready @0c
  TopQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 10
  Cand SU(7) ORDER                              
  Cand SU(1) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x12 = LDURXi $fp, -16, debug-location !840 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:37
  Ready @1c
  TopQ.A BotLatency SU(1) 10c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 10
  Cand SU(7) ORDER                              
  Cand SU(2) TOP-PATH                  9 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $w14, $w13 = LDPWi $sp, 14, debug-location !841 :: (dereferenceable load 4 from %ir.j), (dereferenceable load 4 from %ir.k); cg.c:449:44
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 10
  Cand SU(7) ORDER                              
  Cand SU(3) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) $w13 = KILL $w13, implicit-def $x13, debug-location !841; cg.c:449:44
  Ready @3c
  TopQ.A TopLatency SU(3) 2c
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $d0 = LDRDui $sp, 4, debug-location !844 :: (dereferenceable load 8 from %ir.sum); cg.c:0
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $x13 = SBFMXri $x13, 0, 31, debug-location !841; cg.c:449:44
  Ready @4c
  TopQ.A TopLatency SU(4) 3c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $x12 = ADDXrs renamable $x12, renamable $x13, 2, debug-location !840; cg.c:449:37
  Ready @5c
  TopQ.A TopLatency SU(5) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $w12 = LDRWui renamable $x12, 1, debug-location !840 :: (load 4 from %ir.arrayidx36); cg.c:449:37
  Ready @6c
  TopQ.A TopLatency SU(6) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 10 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) $wzr = SUBSWrs renamable $w14, renamable $w12, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !845; cg.c:449:13
  Ready @10c
  TopQ.A TopLatency SU(8) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 8
  Executed: 11c
  Critical: 8c, 8 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   STRWui renamable $w12, $sp, 14, debug-location !DILocation(line: 0, scope: !834) :: (store 4 into %ir.k); cg.c:0
SU(1):   renamable $x12 = LDURXi $fp, -16, debug-location !840 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:37
SU(2):   renamable $w14, $w13 = LDPWi $sp, 14, debug-location !841 :: (dereferenceable load 4 from %ir.j), (dereferenceable load 4 from %ir.k); cg.c:449:44
SU(3):   $w13 = KILL $w13, implicit-def $x13, debug-location !841; cg.c:449:44
SU(7):   renamable $d0 = LDRDui $sp, 4, debug-location !844 :: (dereferenceable load 8 from %ir.sum); cg.c:0
SU(4):   $x13 = SBFMXri $x13, 0, 31, debug-location !841; cg.c:449:44
SU(5):   renamable $x12 = ADDXrs renamable $x12, renamable $x13, 2, debug-location !840; cg.c:449:37
SU(6):   renamable $w12 = LDRWui renamable $x12, 1, debug-location !840 :: (load 4 from %ir.arrayidx36); cg.c:449:37
SU(8):   $wzr = SUBSWrs renamable $w14, renamable $w12, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !845; cg.c:449:13

Fixup kills for %bb.11
********** MI Scheduling **********
conj_grad:%bb.12 for.body38
  From: renamable $x12 = LDRSWui $sp, 14, debug-location !848 :: (dereferenceable load 4 from %ir.k); cg.c:450:31
    To: B %bb.11
 RegionInstrs: 10
ScheduleDAGMI::schedule starting
SU(0):   renamable $x12 = LDRSWui $sp, 14, debug-location !848 :: (dereferenceable load 4 from %ir.k); cg.c:450:31
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$w12
    SU(6): Data Latency=0 Reg=$x12
    SU(4): Data Latency=4 Reg=$x12
    SU(3): Data Latency=4 Reg=$x12
SU(1):   renamable $x13 = LDURXi $fp, -8, debug-location !850 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:450:38
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x13
SU(2):   renamable $x15, renamable $x14 = LDPXi $fp, -6, debug-location !846 :: (dereferenceable load 8 from %ir.a.addr), (dereferenceable load 8 from %ir.p.addr); cg.c:450:29
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(5): Data Latency=4 Reg=$x15
    SU(4): Data Latency=4 Reg=$x14
SU(3):   renamable $x13 = LDRSWroX renamable $x13, renamable $x12, 0, 1, debug-location !850 :: (load 4 from %ir.arrayidx42); cg.c:450:38
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 10
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x13
    SU(0): Data Latency=4 Reg=$x12
  Successors:
    SU(5): Data Latency=4 Reg=$x13
    SU(6): Anti Latency=0
    SU(9): Ord  Latency=0 Memory
SU(4):   renamable $d1 = LDRDroX renamable $x14, renamable $x12, 0, 1, debug-location !846 :: (load 8 from %ir.arrayidx40); cg.c:450:29
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(2): Data Latency=4 Reg=$x14
    SU(0): Data Latency=4 Reg=$x12
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$d1
    SU(6): Anti Latency=0
    SU(9): Ord  Latency=0 Memory
SU(5):   renamable $d2 = LDRDroX renamable $x15, renamable $x13, 0, 1, debug-location !849 :: (load 8 from %ir.arrayidx44); cg.c:450:36
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 6
  Predecessors:
    SU(3): Data Latency=4 Reg=$x13
    SU(2): Data Latency=4 Reg=$x15
  Successors:
    SU(7): Data Latency=4 Reg=$d2
    SU(9): Ord  Latency=0 Memory
SU(6):   renamable $w12 = nsw ADDWri renamable $w12, 1, 0, implicit $x12, debug-location !855; cg.c:449:53
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(4): Anti Latency=0
    SU(3): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w12
    SU(0): Data Latency=0 Reg=$x12
SU(7):   renamable $d1 = FMULDrr renamable $d1, renamable $d2, debug-location !852; cg.c:450:34
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 2
  Predecessors:
    SU(5): Data Latency=4 Reg=$d2
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d1
  Successors:
    SU(8): Data Latency=1 Reg=$d1
SU(8):   renamable $d0 = FADDDrr renamable $d0, renamable $d1, debug-location !853; cg.c:450:27
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 1
  Predecessors:
    SU(7): Data Latency=1 Reg=$d1
  Successors:
    SU(9): Data Latency=1 Reg=$d0
SU(9):   STRDui renamable $d0, $sp, 4, debug-location !854 :: (store 8 into %ir.sum); cg.c:450:21
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=$d0
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
ExitSU:   B %bb.11
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 14
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 14
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x12 = LDRSWui $sp, 14, debug-location !848 :: (dereferenceable load 4 from %ir.k); cg.c:450:31
  Ready @0c
  TopQ.A BotLatency SU(0) 14c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 14
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  14 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x13 = LDURXi $fp, -8, debug-location !850 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:450:38
  Ready @1c
  TopQ.A BotLatency SU(1) 14c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x15, renamable $x14 = LDPXi $fp, -6, debug-location !846 :: (dereferenceable load 8 from %ir.a.addr), (dereferenceable load 8 from %ir.p.addr); cg.c:450:29
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 4 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $x13 = LDRSWroX renamable $x13, renamable $x12, 0, 1, debug-location !850 :: (load 4 from %ir.arrayidx42); cg.c:450:38
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $d1 = LDRDroX renamable $x14, renamable $x12, 0, 1, debug-location !846 :: (load 8 from %ir.arrayidx40); cg.c:450:29
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $w12 = nsw ADDWri renamable $w12, 1, 0, implicit $x12, debug-location !855; cg.c:449:53
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 9 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $d2 = LDRDroX renamable $x15, renamable $x13, 0, 1, debug-location !849 :: (load 8 from %ir.arrayidx44); cg.c:450:36
  Ready @9c
  TopQ.A TopLatency SU(5) 8c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 7
  Executed: 10c
  Critical: 7c, 7 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 13 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $d1 = FMULDrr renamable $d1, renamable $d2, debug-location !852; cg.c:450:34
  Ready @13c
  TopQ.A TopLatency SU(7) 12c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 8
  Executed: 14c
  Critical: 8c, 8 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) renamable $d0 = FADDDrr renamable $d0, renamable $d1, debug-location !853; cg.c:450:27
  Ready @14c
  TopQ.A TopLatency SU(8) 13c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 9
  Executed: 15c
  Critical: 9c, 9 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) STRDui renamable $d0, $sp, 4, debug-location !854 :: (store 8 into %ir.sum); cg.c:450:21
  Ready @15c
  TopQ.A TopLatency SU(9) 14c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 10
  Executed: 16c
  Critical: 10c, 10 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   renamable $x12 = LDRSWui $sp, 14, debug-location !848 :: (dereferenceable load 4 from %ir.k); cg.c:450:31
SU(1):   renamable $x13 = LDURXi $fp, -8, debug-location !850 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:450:38
SU(2):   renamable $x15, renamable $x14 = LDPXi $fp, -6, debug-location !846 :: (dereferenceable load 8 from %ir.a.addr), (dereferenceable load 8 from %ir.p.addr); cg.c:450:29
SU(3):   renamable $x13 = LDRSWroX renamable $x13, renamable $x12, 0, 1, debug-location !850 :: (load 4 from %ir.arrayidx42); cg.c:450:38
SU(4):   renamable $d1 = LDRDroX renamable $x14, renamable $x12, 0, 1, debug-location !846 :: (load 8 from %ir.arrayidx40); cg.c:450:29
SU(6):   renamable $w12 = nsw ADDWri renamable $w12, 1, 0, implicit $x12, debug-location !855; cg.c:449:53
SU(5):   renamable $d2 = LDRDroX renamable $x15, renamable $x13, 0, 1, debug-location !849 :: (load 8 from %ir.arrayidx44); cg.c:450:36
SU(7):   renamable $d1 = FMULDrr renamable $d1, renamable $d2, debug-location !852; cg.c:450:34
SU(8):   renamable $d0 = FADDDrr renamable $d0, renamable $d1, debug-location !853; cg.c:450:27
SU(9):   STRDui renamable $d0, $sp, 4, debug-location !854 :: (store 8 into %ir.sum); cg.c:450:21

Fixup kills for %bb.12
********** MI Scheduling **********
conj_grad:%bb.13 for.end49
  From: renamable $x12 = LDURXi $fp, -56, debug-location !859 :: (dereferenceable load 8 from %ir.q.addr); cg.c:452:13
    To: B %bb.9
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $x12 = LDURXi $fp, -56, debug-location !859 :: (dereferenceable load 8 from %ir.q.addr); cg.c:452:13
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(3): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x12
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $x13 = LDRSWui $sp, 15, debug-location !860 :: (dereferenceable load 4 from %ir.j); cg.c:452:15
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(2): Data Latency=4 Reg=$x13
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
SU(2):   STRDroX renamable $d0, renamable $x12, renamable $x13, 0, 1, debug-location !861 :: (store 8 into %ir.arrayidx51); cg.c:452:18
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(1): Data Latency=4 Reg=$x13
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=$x12
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(3): Anti Latency=0
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=1 Memory
SU(3):   renamable $w12 = LDRWui $sp, 15, debug-location !862 :: (dereferenceable load 4 from %ir.j); cg.c:447:50
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(2): Anti Latency=0
    SU(2): Ord  Latency=1 Memory
    SU(0): Out  Latency=1
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$w12
    SU(5): Ord  Latency=0 Memory
SU(4):   renamable $w12 = nsw ADDWri renamable $w12, 1, 0, debug-location !862; cg.c:447:50
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w12
  Successors:
    SU(5): Data Latency=1 Reg=$w12
SU(5):   STRWui renamable $w12, $sp, 15, debug-location !862 :: (store 4 into %ir.j); cg.c:447:50
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=$w12
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
ExitSU:   B %bb.9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 10
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 10
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x12 = LDURXi $fp, -56, debug-location !859 :: (dereferenceable load 8 from %ir.q.addr); cg.c:452:13
  Ready @0c
  TopQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x13 = LDRSWui $sp, 15, debug-location !860 :: (dereferenceable load 4 from %ir.j); cg.c:452:15
  Ready @1c
  TopQ.A BotLatency SU(1) 10c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRDroX renamable $d0, renamable $x12, renamable $x13, 0, 1, debug-location !861 :: (store 8 into %ir.arrayidx51); cg.c:452:18
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w12 = LDRWui $sp, 15, debug-location !862 :: (dereferenceable load 4 from %ir.j); cg.c:447:50
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 10 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w12 = nsw ADDWri renamable $w12, 1, 0, debug-location !862; cg.c:447:50
  Ready @10c
  TopQ.A TopLatency SU(4) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) STRWui renamable $w12, $sp, 15, debug-location !862 :: (store 4 into %ir.j); cg.c:447:50
  Ready @11c
  TopQ.A TopLatency SU(5) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   renamable $x12 = LDURXi $fp, -56, debug-location !859 :: (dereferenceable load 8 from %ir.q.addr); cg.c:452:13
SU(1):   renamable $x13 = LDRSWui $sp, 15, debug-location !860 :: (dereferenceable load 4 from %ir.j); cg.c:452:15
SU(2):   STRDroX renamable $d0, renamable $x12, renamable $x13, 0, 1, debug-location !861 :: (store 8 into %ir.arrayidx51); cg.c:452:18
SU(3):   renamable $w12 = LDRWui $sp, 15, debug-location !862 :: (dereferenceable load 4 from %ir.j); cg.c:447:50
SU(4):   renamable $w12 = nsw ADDWri renamable $w12, 1, 0, debug-location !862; cg.c:447:50
SU(5):   STRWui renamable $w12, $sp, 15, debug-location !862 :: (store 4 into %ir.j); cg.c:447:50

Fixup kills for %bb.13
********** MI Scheduling **********
conj_grad:%bb.14 for.end54
  From: STRXui $xzr, $sp, 5, debug-location !866 :: (store 8 into %ir.d); cg.c:496:11
    To: End RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   STRXui $xzr, $sp, 5, debug-location !866 :: (store 8 into %ir.d); cg.c:496:11
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   STRWui $wzr, $sp, 15, debug-location !867 :: (store 4 into %ir.j); cg.c:497:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 0
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STRXui $xzr, $sp, 5, debug-location !866 :: (store 8 into %ir.d); cg.c:496:11
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRWui $wzr, $sp, 15, debug-location !867 :: (store 4 into %ir.j); cg.c:497:16
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   STRXui $xzr, $sp, 5, debug-location !866 :: (store 8 into %ir.d); cg.c:496:11
SU(1):   STRWui $wzr, $sp, 15, debug-location !867 :: (store 4 into %ir.j); cg.c:497:16

Fixup kills for %bb.14
********** MI Scheduling **********
conj_grad:%bb.15 for.cond55
  From: renamable $w12 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !872 :: (dereferenceable load 4 from @lastcol); cg.c:497:25
    To: Bcc 10, %bb.17, implicit $nzcv, debug-location !877; cg.c:497:9
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $w12 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !872 :: (dereferenceable load 4 from @lastcol); cg.c:497:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w12
SU(1):   renamable $w13 = LDRWui renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !873 :: (dereferenceable load 4 from @firstcol); cg.c:497:35
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=$w13
SU(2):   renamable $w14 = LDRWui $sp, 15, debug-location !870 :: (dereferenceable load 4 from %ir.j); cg.c:497:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=$w14
SU(3):   $w12 = SUBWrs renamable $w12, renamable $w13, 0, debug-location !874; cg.c:497:33
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=$w13
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w12
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$w12
SU(4):   renamable $w12 = nsw ADDWri renamable $w12, 1, 0, debug-location !875; cg.c:497:44
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$w12
  Successors:
    SU(5): Data Latency=1 Reg=$w12
SU(5):   $wzr = SUBSWrs renamable $w14, renamable $w12, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !877; cg.c:497:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=$w12
    SU(2): Data Latency=4 Reg=$w14
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.17, implicit $nzcv, debug-location !877; cg.c:497:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 7
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w12 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !872 :: (dereferenceable load 4 from @lastcol); cg.c:497:25
  Ready @0c
  TopQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 7
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w13 = LDRWui renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !873 :: (dereferenceable load 4 from @firstcol); cg.c:497:35
  Ready @1c
  TopQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w14 = LDRWui $sp, 15, debug-location !870 :: (dereferenceable load 4 from %ir.j); cg.c:497:21
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $w12 = SUBWrs renamable $w12, renamable $w13, 0, debug-location !874; cg.c:497:33
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w12 = nsw ADDWri renamable $w12, 1, 0, debug-location !875; cg.c:497:44
  Ready @6c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $wzr = SUBSWrs renamable $w14, renamable $w12, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !877; cg.c:497:9
  Ready @7c
  TopQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   renamable $w12 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !872 :: (dereferenceable load 4 from @lastcol); cg.c:497:25
SU(1):   renamable $w13 = LDRWui renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !873 :: (dereferenceable load 4 from @firstcol); cg.c:497:35
SU(2):   renamable $w14 = LDRWui $sp, 15, debug-location !870 :: (dereferenceable load 4 from %ir.j); cg.c:497:21
SU(3):   $w12 = SUBWrs renamable $w12, renamable $w13, 0, debug-location !874; cg.c:497:33
SU(4):   renamable $w12 = nsw ADDWri renamable $w12, 1, 0, debug-location !875; cg.c:497:44
SU(5):   $wzr = SUBSWrs renamable $w14, renamable $w12, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !877; cg.c:497:9

Fixup kills for %bb.15
********** MI Scheduling **********
conj_grad:%bb.16 for.body59
  From: renamable $x12 = LDRSWui $sp, 15, debug-location !881 :: (dereferenceable load 4 from %ir.j); cg.c:498:23
    To: B %bb.15
 RegionInstrs: 11
ScheduleDAGMI::schedule starting
SU(0):   renamable $x12 = LDRSWui $sp, 15, debug-location !881 :: (dereferenceable load 4 from %ir.j); cg.c:498:23
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$w12
    SU(6): Data Latency=0 Reg=$x12
    SU(2): Data Latency=4 Reg=$x12
    SU(10): Ord  Latency=0 Memory
SU(1):   renamable $x14, renamable $x13 = LDPXi $fp, -7, debug-location !880 :: (dereferenceable load 8 from %ir.p.addr), (dereferenceable load 8 from %ir.q.addr); cg.c:498:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(4): Data Latency=4 Reg=$x14
    SU(3): Data Latency=4 Reg=$x13
SU(2):   renamable $x15 = UBFMXri renamable $x12, 61, 60, debug-location !880; cg.c:498:21
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(0): Data Latency=4 Reg=$x12
  Successors:
    SU(4): Data Latency=1 Reg=$x15
    SU(3): Data Latency=1 Reg=$x15
    SU(6): Anti Latency=0
SU(3):   renamable $d0 = LDRDroX renamable $x13, renamable $x15, 0, 0, debug-location !880 :: (load 8 from %ir.arrayidx61); cg.c:498:21
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(2): Data Latency=1 Reg=$x15
    SU(1): Data Latency=4 Reg=$x13
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$d0
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
SU(4):   renamable $d1 = LDRDroX renamable $x14, renamable $x15, 0, 0, debug-location !882 :: (load 8 from %ir.arrayidx63); cg.c:498:28
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(2): Data Latency=1 Reg=$x15
    SU(1): Data Latency=4 Reg=$x14
  Successors:
    SU(7): Data Latency=4 Reg=$d1
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
SU(5):   renamable $d2 = LDRDui $sp, 5, debug-location !878 :: (dereferenceable load 8 from %ir.d); cg.c:498:17
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(8): Data Latency=4 Reg=$d2
    SU(9): Ord  Latency=0 Memory
SU(6):   renamable $w12 = nsw ADDWri renamable $w12, 1, 0, implicit $x12, debug-location !887; cg.c:497:50
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w12
    SU(0): Data Latency=0 Reg=$x12
  Successors:
    SU(10): Data Latency=1 Reg=$w12
SU(7):   renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !884; cg.c:498:26
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 2
  Predecessors:
    SU(4): Data Latency=4 Reg=$d1
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d0
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$d0
SU(8):   renamable $d0 = FADDDrr renamable $d2, renamable $d0, debug-location !885; cg.c:498:19
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$d0
    SU(5): Data Latency=4 Reg=$d2
  Successors:
    SU(9): Data Latency=1 Reg=$d0
SU(9):   STRDui renamable $d0, $sp, 5, debug-location !886 :: (store 8 into %ir.d); cg.c:498:15
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=$d0
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
SU(10):   STRWui renamable $w12, $sp, 15, debug-location !887 :: (store 4 into %ir.j); cg.c:497:50
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=$w12
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.15
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 11
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 
  TopQ.A RemainingLatency 0 + 0c > CritPath 11
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x12 = LDRSWui $sp, 15, debug-location !881 :: (dereferenceable load 4 from %ir.j); cg.c:498:23
  Ready @0c
  TopQ.A BotLatency SU(0) 11c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 5 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 11
  Cand SU(5) ORDER                              
  Cand SU(1) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x14, renamable $x13 = LDPXi $fp, -7, debug-location !880 :: (dereferenceable load 8 from %ir.p.addr), (dereferenceable load 8 from %ir.q.addr); cg.c:498:21
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $d2 = LDRDui $sp, 5, debug-location !878 :: (dereferenceable load 8 from %ir.d); cg.c:498:17
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x15 = UBFMXri renamable $x12, 61, 60, debug-location !880; cg.c:498:21
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 3 6 
  TopQ.A RemainingLatency 0 + 5c > CritPath 11
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d0 = LDRDroX renamable $x13, renamable $x15, 0, 0, debug-location !880 :: (load 8 from %ir.arrayidx61); cg.c:498:21
  Ready @5c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 6 
  TopQ.A RemainingLatency 0 + 6c > CritPath 11
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) renamable $d1 = LDRDroX renamable $x14, renamable $x15, 0, 0, debug-location !882 :: (load 8 from %ir.arrayidx63); cg.c:498:28
  Ready @6c
  TopQ.A BotLatency SU(4) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $w12 = nsw ADDWri renamable $w12, 1, 0, implicit $x12, debug-location !887; cg.c:497:50
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) STRWui renamable $w12, $sp, 15, debug-location !887 :: (store 4 into %ir.j); cg.c:497:50
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 8
  Executed: 9c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 10 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !884; cg.c:498:26
  Ready @10c
  TopQ.A TopLatency SU(7) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 9
  Executed: 11c
  Critical: 9c, 9 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) renamable $d0 = FADDDrr renamable $d2, renamable $d0, debug-location !885; cg.c:498:19
  Ready @11c
  TopQ.A TopLatency SU(8) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 10
  Executed: 12c
  Critical: 10c, 10 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) STRDui renamable $d0, $sp, 5, debug-location !886 :: (store 8 into %ir.d); cg.c:498:15
  Ready @12c
  TopQ.A TopLatency SU(9) 11c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 11
  Executed: 13c
  Critical: 11c, 11 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.16 ***
SU(0):   renamable $x12 = LDRSWui $sp, 15, debug-location !881 :: (dereferenceable load 4 from %ir.j); cg.c:498:23
SU(1):   renamable $x14, renamable $x13 = LDPXi $fp, -7, debug-location !880 :: (dereferenceable load 8 from %ir.p.addr), (dereferenceable load 8 from %ir.q.addr); cg.c:498:21
SU(5):   renamable $d2 = LDRDui $sp, 5, debug-location !878 :: (dereferenceable load 8 from %ir.d); cg.c:498:17
SU(2):   renamable $x15 = UBFMXri renamable $x12, 61, 60, debug-location !880; cg.c:498:21
SU(3):   renamable $d0 = LDRDroX renamable $x13, renamable $x15, 0, 0, debug-location !880 :: (load 8 from %ir.arrayidx61); cg.c:498:21
SU(4):   renamable $d1 = LDRDroX renamable $x14, renamable $x15, 0, 0, debug-location !882 :: (load 8 from %ir.arrayidx63); cg.c:498:28
SU(6):   renamable $w12 = nsw ADDWri renamable $w12, 1, 0, implicit $x12, debug-location !887; cg.c:497:50
SU(10):   STRWui renamable $w12, $sp, 15, debug-location !887 :: (store 4 into %ir.j); cg.c:497:50
SU(7):   renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !884; cg.c:498:26
SU(8):   renamable $d0 = FADDDrr renamable $d2, renamable $d0, debug-location !885; cg.c:498:19
SU(9):   STRDui renamable $d0, $sp, 5, debug-location !886 :: (store 8 into %ir.d); cg.c:498:15

Fixup kills for %bb.16
********** MI Scheduling **********
conj_grad:%bb.17 for.end68
  From: renamable $d0 = LDRDui $sp, 3, debug-location !891 :: (dereferenceable load 8 from %ir.rho); cg.c:504:17
    To: End RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDRDui $sp, 3, debug-location !891 :: (dereferenceable load 8 from %ir.rho); cg.c:504:17
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=$d0
    SU(3): Data Latency=4 Reg=$d0
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $d1 = LDRDui $sp, 5, debug-location !892 :: (dereferenceable load 8 from %ir.d); cg.c:504:23
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d1
SU(2):   STRXui $xzr, $sp, 3, debug-location !897 :: (store 8 into %ir.rho); cg.c:515:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Ord  Latency=0 Memory
SU(3):   renamable $d1 = FDIVDrr renamable $d0, renamable $d1, debug-location !893; cg.c:504:21
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$d1
    SU(0): Data Latency=4 Reg=$d0
  Successors:
    SU(4): Data Latency=1 Reg=$d1
SU(4):   STPDi renamable $d1, renamable $d0, $sp, 1, debug-location !896 :: (store 8 into %ir.rho0), (store 8 into %ir.alpha); cg.c:509:14
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=$d1
    SU(0): Data Latency=4 Reg=$d0
SU(5):   STRWui $wzr, $sp, 15, debug-location !898 :: (store 4 into %ir.j); cg.c:516:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0 = LDRDui $sp, 3, debug-location !891 :: (dereferenceable load 8 from %ir.rho); cg.c:504:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(5) ORDER                              
  Cand SU(1) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d1 = LDRDui $sp, 5, debug-location !892 :: (dereferenceable load 8 from %ir.d); cg.c:504:23
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 5 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(5) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) STRXui $xzr, $sp, 3, debug-location !897 :: (store 8 into %ir.rho); cg.c:515:13
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) STRWui $wzr, $sp, 15, debug-location !898 :: (store 4 into %ir.j); cg.c:516:16
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $d1 = FDIVDrr renamable $d0, renamable $d1, debug-location !893; cg.c:504:21
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) STPDi renamable $d1, renamable $d0, $sp, 1, debug-location !896 :: (store 8 into %ir.rho0), (store 8 into %ir.alpha); cg.c:509:14
  Ready @6c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   renamable $d0 = LDRDui $sp, 3, debug-location !891 :: (dereferenceable load 8 from %ir.rho); cg.c:504:17
SU(1):   renamable $d1 = LDRDui $sp, 5, debug-location !892 :: (dereferenceable load 8 from %ir.d); cg.c:504:23
SU(2):   STRXui $xzr, $sp, 3, debug-location !897 :: (store 8 into %ir.rho); cg.c:515:13
SU(5):   STRWui $wzr, $sp, 15, debug-location !898 :: (store 4 into %ir.j); cg.c:516:16
SU(3):   renamable $d1 = FDIVDrr renamable $d0, renamable $d1, debug-location !893; cg.c:504:21
SU(4):   STPDi renamable $d1, renamable $d0, $sp, 1, debug-location !896 :: (store 8 into %ir.rho0), (store 8 into %ir.alpha); cg.c:509:14

Fixup kills for %bb.17
********** MI Scheduling **********
conj_grad:%bb.18 for.cond69
  From: renamable $w12 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !903 :: (dereferenceable load 4 from @lastcol); cg.c:516:25
    To: Bcc 10, %bb.20, implicit $nzcv, debug-location !908; cg.c:516:9
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $w12 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !903 :: (dereferenceable load 4 from @lastcol); cg.c:516:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w12
SU(1):   renamable $w13 = LDRWui renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !904 :: (dereferenceable load 4 from @firstcol); cg.c:516:35
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=$w13
SU(2):   renamable $w14 = LDRWui $sp, 15, debug-location !901 :: (dereferenceable load 4 from %ir.j); cg.c:516:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=$w14
SU(3):   $w12 = SUBWrs renamable $w12, renamable $w13, 0, debug-location !905; cg.c:516:33
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=$w13
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w12
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$w12
SU(4):   renamable $w12 = nsw ADDWri renamable $w12, 1, 0, debug-location !906; cg.c:516:44
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$w12
  Successors:
    SU(5): Data Latency=1 Reg=$w12
SU(5):   $wzr = SUBSWrs renamable $w14, renamable $w12, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !908; cg.c:516:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=$w12
    SU(2): Data Latency=4 Reg=$w14
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.20, implicit $nzcv, debug-location !908; cg.c:516:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 7
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w12 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !903 :: (dereferenceable load 4 from @lastcol); cg.c:516:25
  Ready @0c
  TopQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 7
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w13 = LDRWui renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !904 :: (dereferenceable load 4 from @firstcol); cg.c:516:35
  Ready @1c
  TopQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w14 = LDRWui $sp, 15, debug-location !901 :: (dereferenceable load 4 from %ir.j); cg.c:516:21
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $w12 = SUBWrs renamable $w12, renamable $w13, 0, debug-location !905; cg.c:516:33
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w12 = nsw ADDWri renamable $w12, 1, 0, debug-location !906; cg.c:516:44
  Ready @6c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $wzr = SUBSWrs renamable $w14, renamable $w12, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !908; cg.c:516:9
  Ready @7c
  TopQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.18 ***
SU(0):   renamable $w12 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !903 :: (dereferenceable load 4 from @lastcol); cg.c:516:25
SU(1):   renamable $w13 = LDRWui renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !904 :: (dereferenceable load 4 from @firstcol); cg.c:516:35
SU(2):   renamable $w14 = LDRWui $sp, 15, debug-location !901 :: (dereferenceable load 4 from %ir.j); cg.c:516:21
SU(3):   $w12 = SUBWrs renamable $w12, renamable $w13, 0, debug-location !905; cg.c:516:33
SU(4):   renamable $w12 = nsw ADDWri renamable $w12, 1, 0, debug-location !906; cg.c:516:44
SU(5):   $wzr = SUBSWrs renamable $w14, renamable $w12, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !908; cg.c:516:9

Fixup kills for %bb.18
********** MI Scheduling **********
conj_grad:%bb.19 for.body73
  From: renamable $x12 = LDRSWui $sp, 15, debug-location !911 :: (dereferenceable load 4 from %ir.j); cg.c:517:22
    To: B %bb.18
 RegionInstrs: 23
ScheduleDAGMI::schedule starting
SU(0):   renamable $x12 = LDRSWui $sp, 15, debug-location !911 :: (dereferenceable load 4 from %ir.j); cg.c:517:22
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 29
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$x12
    SU(22): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
SU(1):   renamable $x13 = LDURXi $fp, -48, debug-location !913 :: (dereferenceable load 8 from %ir.p.addr); cg.c:517:35
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 28
  Successors:
    SU(11): Out  Latency=1
    SU(5): Data Latency=4 Reg=$x13
    SU(19): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
SU(2):   renamable $x14 = LDURXi $fp, -32, debug-location !909 :: (dereferenceable load 8 from %ir.z.addr); cg.c:517:20
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 27
  Successors:
    SU(12): Out  Latency=1
    SU(9): Data Latency=4 Reg=$x14
    SU(6): Data Latency=4 Reg=$x14
    SU(19): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
SU(3):   renamable $d0 = LDRDui $sp, 1, debug-location !912 :: (dereferenceable load 8 from %ir.alpha); cg.c:517:27
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 24
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$d0
    SU(19): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
SU(4):   renamable $x12 = UBFMXri renamable $x12, 61, 60, debug-location !909; cg.c:517:20
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 25
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x12
  Successors:
    SU(10): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x12
    SU(6): Data Latency=1 Reg=$x12
    SU(5): Data Latency=1 Reg=$x12
SU(5):   renamable $d1 = LDRDroX renamable $x13, renamable $x12, 0, 0, debug-location !913 :: (load 8 from %ir.arrayidx77); cg.c:517:35
  # preds left       : 2
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 24
  Predecessors:
    SU(4): Data Latency=1 Reg=$x12
    SU(1): Data Latency=4 Reg=$x13
  Successors:
    SU(15): Out  Latency=1
    SU(7): Data Latency=4 Reg=$d1
    SU(11): Anti Latency=0
    SU(10): Anti Latency=0
    SU(22): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
SU(6):   renamable $d2 = LDRDroX renamable $x14, renamable $x12, 0, 0, debug-location !909 :: (load 8 from %ir.arrayidx75); cg.c:517:20
  # preds left       : 2
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 23
  Predecessors:
    SU(4): Data Latency=1 Reg=$x12
    SU(2): Data Latency=4 Reg=$x14
  Successors:
    SU(16): Out  Latency=1
    SU(8): Data Latency=4 Reg=$d2
    SU(12): Anti Latency=0
    SU(10): Anti Latency=0
    SU(22): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
SU(7):   renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !915; cg.c:517:33
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 20
  Predecessors:
    SU(5): Data Latency=4 Reg=$d1
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d0
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$d0
    SU(15): Anti Latency=0
SU(8):   renamable $d0 = FADDDrr renamable $d2, renamable $d0, debug-location !916; cg.c:517:25
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 19
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$d0
    SU(6): Data Latency=4 Reg=$d2
  Successors:
    SU(14): Out  Latency=1
    SU(9): Data Latency=1 Reg=$d0
    SU(16): Anti Latency=0
SU(9):   STRDroX renamable $d0, renamable $x14, renamable $x12, 0, 0, debug-location !919 :: (store 8 into %ir.arrayidx81); cg.c:517:18
  # preds left       : 9
  # succs left       : 12
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 18
  Predecessors:
    SU(8): Data Latency=1 Reg=$d0
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Data Latency=1 Reg=$x12
    SU(3): Ord  Latency=0 Memory
    SU(2): Data Latency=4 Reg=$x14
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(14): Anti Latency=0
    SU(12): Anti Latency=0
    SU(10): Anti Latency=0
    SU(22): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(20): Ord  Latency=1 Memory
    SU(10): Ord  Latency=1 Memory
    SU(16): Ord  Latency=1 Memory
    SU(15): Ord  Latency=1 Memory
    SU(14): Ord  Latency=1 Memory
    SU(12): Ord  Latency=1 Memory
    SU(11): Ord  Latency=1 Memory
SU(10):   renamable $x12 = LDRSWui $sp, 15, debug-location !921 :: (dereferenceable load 4 from %ir.j); cg.c:518:22
  # preds left       : 5
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 17
  Predecessors:
    SU(9): Anti Latency=0
    SU(9): Ord  Latency=1 Memory
    SU(6): Anti Latency=0
    SU(5): Anti Latency=0
    SU(4): Out  Latency=1
  Successors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=4 Reg=$x12
    SU(22): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
SU(11):   renamable $x13 = LDURXi $fp, -56, debug-location !923 :: (dereferenceable load 8 from %ir.q.addr); cg.c:518:35
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 16
  Predecessors:
    SU(9): Ord  Latency=1 Memory
    SU(5): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    SU(15): Data Latency=4 Reg=$x13
    SU(19): Ord  Latency=0 Memory
SU(12):   renamable $x14 = LDRXui $sp, 8, debug-location !920 :: (dereferenceable load 8 from %ir.r.addr); cg.c:518:20
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 15
  Predecessors:
    SU(9): Anti Latency=0
    SU(9): Ord  Latency=1 Memory
    SU(6): Anti Latency=0
    SU(2): Out  Latency=1
  Successors:
    SU(19): Data Latency=4 Reg=$x14
    SU(16): Data Latency=4 Reg=$x14
    SU(19): Ord  Latency=0 Memory
SU(13):   renamable $x12 = UBFMXri renamable $x12, 61, 60, debug-location !920; cg.c:518:20
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 13
  Predecessors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=4 Reg=$x12
  Successors:
    SU(20): Out  Latency=1
    SU(19): Data Latency=1 Reg=$x12
    SU(16): Data Latency=1 Reg=$x12
    SU(15): Data Latency=1 Reg=$x12
SU(14):   renamable $d0 = LDRDui $sp, 1, debug-location !922 :: (dereferenceable load 8 from %ir.alpha); cg.c:518:27
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 12
  Predecessors:
    SU(9): Anti Latency=0
    SU(9): Ord  Latency=1 Memory
    SU(8): Out  Latency=1
  Successors:
    SU(17): Out  Latency=1
    SU(17): Data Latency=4 Reg=$d0
    SU(19): Ord  Latency=0 Memory
SU(15):   renamable $d1 = LDRDroX renamable $x13, renamable $x12, 0, 0, debug-location !923 :: (load 8 from %ir.arrayidx85); cg.c:518:35
  # preds left       : 5
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 17
  Height             : 12
  Predecessors:
    SU(13): Data Latency=1 Reg=$x12
    SU(11): Data Latency=4 Reg=$x13
    SU(9): Ord  Latency=1 Memory
    SU(7): Anti Latency=0
    SU(5): Out  Latency=1
  Successors:
    SU(17): Data Latency=4 Reg=$d1
    SU(20): Anti Latency=0
    SU(22): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
SU(16):   renamable $d2 = LDRDroX renamable $x14, renamable $x12, 0, 0, debug-location !920 :: (load 8 from %ir.arrayidx83); cg.c:518:20
  # preds left       : 5
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 17
  Height             : 11
  Predecessors:
    SU(13): Data Latency=1 Reg=$x12
    SU(12): Data Latency=4 Reg=$x14
    SU(9): Ord  Latency=1 Memory
    SU(8): Anti Latency=0
    SU(6): Out  Latency=1
  Successors:
    SU(18): Data Latency=4 Reg=$d2
    SU(20): Anti Latency=0
    SU(22): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
SU(17):   renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !925; cg.c:518:33
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 21
  Height             : 8
  Predecessors:
    SU(15): Data Latency=4 Reg=$d1
    SU(14): Out  Latency=1
    SU(14): Data Latency=4 Reg=$d0
  Successors:
    SU(18): Out  Latency=1
    SU(18): Data Latency=1 Reg=$d0
SU(18):   renamable $d0 = FSUBDrr renamable $d2, renamable $d0, debug-location !926; cg.c:518:25
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 7
  Predecessors:
    SU(17): Out  Latency=1
    SU(17): Data Latency=1 Reg=$d0
    SU(16): Data Latency=4 Reg=$d2
  Successors:
    SU(19): Data Latency=1 Reg=$d0
SU(19):   STRDroX renamable $d0, renamable $x14, renamable $x12, 0, 0, debug-location !929 :: (store 8 into %ir.arrayidx89); cg.c:518:18
  # preds left       : 16
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 23
  Height             : 6
  Predecessors:
    SU(18): Data Latency=1 Reg=$d0
    SU(16): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(13): Data Latency=1 Reg=$x12
    SU(12): Data Latency=4 Reg=$x14
    SU(12): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(20): Anti Latency=0
    SU(22): Ord  Latency=0 Memory
    SU(20): Ord  Latency=1 Memory
SU(20):   renamable $w12 = LDRWui $sp, 15, debug-location !930 :: (dereferenceable load 4 from %ir.j); cg.c:516:50
  # preds left       : 6
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 24
  Height             : 5
  Predecessors:
    SU(19): Anti Latency=0
    SU(19): Ord  Latency=1 Memory
    SU(16): Anti Latency=0
    SU(15): Anti Latency=0
    SU(13): Out  Latency=1
    SU(9): Ord  Latency=1 Memory
  Successors:
    SU(21): Out  Latency=1
    SU(21): Data Latency=4 Reg=$w12
    SU(22): Ord  Latency=0 Memory
SU(21):   renamable $w12 = nsw ADDWri renamable $w12, 1, 0, debug-location !930; cg.c:516:50
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 28
  Height             : 1
  Predecessors:
    SU(20): Out  Latency=1
    SU(20): Data Latency=4 Reg=$w12
  Successors:
    SU(22): Data Latency=1 Reg=$w12
SU(22):   STRWui renamable $w12, $sp, 15, debug-location !930 :: (store 4 into %ir.j); cg.c:516:50
  # preds left       : 10
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 29
  Height             : 0
  Predecessors:
    SU(21): Data Latency=1 Reg=$w12
    SU(20): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(16): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.18
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 29
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 29
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x12 = LDRSWui $sp, 15, debug-location !911 :: (dereferenceable load 4 from %ir.j); cg.c:517:22
  Ready @0c
  TopQ.A BotLatency SU(0) 29c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 3 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 29
  Cand SU(3) ORDER                              
  Cand SU(1) TOP-PATH                  28 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x13 = LDURXi $fp, -48, debug-location !913 :: (dereferenceable load 8 from %ir.p.addr); cg.c:517:35
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 29
  Cand SU(3) ORDER                              
  Cand SU(2) TOP-PATH                  27 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x14 = LDURXi $fp, -32, debug-location !909 :: (dereferenceable load 8 from %ir.z.addr); cg.c:517:20
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $d0 = LDRDui $sp, 1, debug-location !912 :: (dereferenceable load 8 from %ir.alpha); cg.c:517:27
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $x12 = UBFMXri renamable $x12, 61, 60, debug-location !909; cg.c:517:20
  Ready @4c
  TopQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $d1 = LDRDroX renamable $x13, renamable $x12, 0, 0, debug-location !913 :: (load 8 from %ir.arrayidx77); cg.c:517:35
  Ready @5c
  TopQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $d2 = LDRDroX renamable $x14, renamable $x12, 0, 0, debug-location !909 :: (load 8 from %ir.arrayidx75); cg.c:517:20
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 9 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !915; cg.c:517:33
  Ready @9c
  TopQ.A TopLatency SU(7) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 8
  Executed: 10c
  Critical: 8c, 8 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) renamable $d0 = FADDDrr renamable $d2, renamable $d0, debug-location !916; cg.c:517:25
  Ready @10c
  TopQ.A TopLatency SU(8) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 9
  Executed: 11c
  Critical: 9c, 9 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) STRDroX renamable $d0, renamable $x14, renamable $x12, 0, 0, debug-location !919 :: (store 8 into %ir.arrayidx81); cg.c:517:18
  Ready @11c
  TopQ.A TopLatency SU(9) 11c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 10
  Executed: 12c
  Critical: 10c, 10 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 14 12 11 
  TopQ.A RemainingLatency 0 + 12c > CritPath 29
  Cand SU(10) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(10) renamable $x12 = LDRSWui $sp, 15, debug-location !921 :: (dereferenceable load 4 from %ir.j); cg.c:518:22
  Ready @12c
  TopQ.A TopLatency SU(10) 12c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 11
  Executed: 13c
  Critical: 11c, 11 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 13 
Queue TopQ.A: 11 14 12 
  TopQ.A RemainingLatency 0 + 13c > CritPath 29
  Cand SU(11) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(11) renamable $x13 = LDURXi $fp, -56, debug-location !923 :: (dereferenceable load 8 from %ir.q.addr); cg.c:518:35
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 12
  Executed: 14c
  Critical: 12c, 12 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 13 
Queue TopQ.A: 12 14 
  TopQ.A RemainingLatency 0 + 14c > CritPath 29
  Cand SU(12) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(12) renamable $x14 = LDRXui $sp, 8, debug-location !920 :: (dereferenceable load 8 from %ir.r.addr); cg.c:518:20
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 13
  Executed: 15c
  Critical: 13c, 13 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 13 
Queue TopQ.A: 14 
Pick Top ONLY1     
Scheduling SU(14) renamable $d0 = LDRDui $sp, 1, debug-location !922 :: (dereferenceable load 8 from %ir.alpha); cg.c:518:27
  Ready @15c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 14
  Executed: 16c
  Critical: 14c, 14 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 
Pick Top ONLY1     
Scheduling SU(13) renamable $x12 = UBFMXri renamable $x12, 61, 60, debug-location !920; cg.c:518:20
  Ready @16c
  TopQ.A TopLatency SU(13) 16c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 15
  Executed: 17c
  Critical: 15c, 15 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 16 
Queue TopQ.A: 15 
Pick Top ONLY1     
Scheduling SU(15) renamable $d1 = LDRDroX renamable $x13, renamable $x12, 0, 0, debug-location !923 :: (load 8 from %ir.arrayidx85); cg.c:518:35
  Ready @17c
  TopQ.A TopLatency SU(15) 17c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 16
  Executed: 18c
  Critical: 16c, 16 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 17 
Queue TopQ.A: 16 
Pick Top ONLY1     
Scheduling SU(16) renamable $d2 = LDRDroX renamable $x14, renamable $x12, 0, 0, debug-location !920 :: (load 8 from %ir.arrayidx83); cg.c:518:20
  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 17
  Executed: 19c
  Critical: 17c, 17 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 21 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 17 
Pick Top ONLY1     
Scheduling SU(17) renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !925; cg.c:518:33
  Ready @21c
  TopQ.A TopLatency SU(17) 21c
  *** Max MOps 1 at cycle 21
Cycle: 22 TopQ.A
TopQ.A @22c
  Retired: 18
  Executed: 22c
  Critical: 18c, 18 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 18 
Pick Top ONLY1     
Scheduling SU(18) renamable $d0 = FSUBDrr renamable $d2, renamable $d0, debug-location !926; cg.c:518:25
  Ready @22c
  TopQ.A TopLatency SU(18) 22c
  *** Max MOps 1 at cycle 22
Cycle: 23 TopQ.A
TopQ.A @23c
  Retired: 19
  Executed: 23c
  Critical: 19c, 19 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 19 
Pick Top ONLY1     
Scheduling SU(19) STRDroX renamable $d0, renamable $x14, renamable $x12, 0, 0, debug-location !929 :: (store 8 into %ir.arrayidx89); cg.c:518:18
  Ready @23c
  TopQ.A TopLatency SU(19) 23c
  *** Max MOps 1 at cycle 23
Cycle: 24 TopQ.A
TopQ.A @24c
  Retired: 20
  Executed: 24c
  Critical: 20c, 20 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 20 
Pick Top ONLY1     
Scheduling SU(20) renamable $w12 = LDRWui $sp, 15, debug-location !930 :: (dereferenceable load 4 from %ir.j); cg.c:516:50
  Ready @24c
  TopQ.A TopLatency SU(20) 24c
  *** Max MOps 1 at cycle 24
Cycle: 25 TopQ.A
TopQ.A @25c
  Retired: 21
  Executed: 25c
  Critical: 21c, 21 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 28 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 21 
Pick Top ONLY1     
Scheduling SU(21) renamable $w12 = nsw ADDWri renamable $w12, 1, 0, debug-location !930; cg.c:516:50
  Ready @28c
  TopQ.A TopLatency SU(21) 28c
  *** Max MOps 1 at cycle 28
Cycle: 29 TopQ.A
TopQ.A @29c
  Retired: 22
  Executed: 29c
  Critical: 22c, 22 MOps
  ExpectedLatency: 28c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 22 
Pick Top ONLY1     
Scheduling SU(22) STRWui renamable $w12, $sp, 15, debug-location !930 :: (store 4 into %ir.j); cg.c:516:50
  Ready @29c
  TopQ.A TopLatency SU(22) 29c
  *** Max MOps 1 at cycle 29
Cycle: 30 TopQ.A
TopQ.A @30c
  Retired: 23
  Executed: 30c
  Critical: 23c, 23 MOps
  ExpectedLatency: 29c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   renamable $x12 = LDRSWui $sp, 15, debug-location !911 :: (dereferenceable load 4 from %ir.j); cg.c:517:22
SU(1):   renamable $x13 = LDURXi $fp, -48, debug-location !913 :: (dereferenceable load 8 from %ir.p.addr); cg.c:517:35
SU(2):   renamable $x14 = LDURXi $fp, -32, debug-location !909 :: (dereferenceable load 8 from %ir.z.addr); cg.c:517:20
SU(3):   renamable $d0 = LDRDui $sp, 1, debug-location !912 :: (dereferenceable load 8 from %ir.alpha); cg.c:517:27
SU(4):   renamable $x12 = UBFMXri renamable $x12, 61, 60, debug-location !909; cg.c:517:20
SU(5):   renamable $d1 = LDRDroX renamable $x13, renamable $x12, 0, 0, debug-location !913 :: (load 8 from %ir.arrayidx77); cg.c:517:35
SU(6):   renamable $d2 = LDRDroX renamable $x14, renamable $x12, 0, 0, debug-location !909 :: (load 8 from %ir.arrayidx75); cg.c:517:20
SU(7):   renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !915; cg.c:517:33
SU(8):   renamable $d0 = FADDDrr renamable $d2, renamable $d0, debug-location !916; cg.c:517:25
SU(9):   STRDroX renamable $d0, renamable $x14, renamable $x12, 0, 0, debug-location !919 :: (store 8 into %ir.arrayidx81); cg.c:517:18
SU(10):   renamable $x12 = LDRSWui $sp, 15, debug-location !921 :: (dereferenceable load 4 from %ir.j); cg.c:518:22
SU(11):   renamable $x13 = LDURXi $fp, -56, debug-location !923 :: (dereferenceable load 8 from %ir.q.addr); cg.c:518:35
SU(12):   renamable $x14 = LDRXui $sp, 8, debug-location !920 :: (dereferenceable load 8 from %ir.r.addr); cg.c:518:20
SU(14):   renamable $d0 = LDRDui $sp, 1, debug-location !922 :: (dereferenceable load 8 from %ir.alpha); cg.c:518:27
SU(13):   renamable $x12 = UBFMXri renamable $x12, 61, 60, debug-location !920; cg.c:518:20
SU(15):   renamable $d1 = LDRDroX renamable $x13, renamable $x12, 0, 0, debug-location !923 :: (load 8 from %ir.arrayidx85); cg.c:518:35
SU(16):   renamable $d2 = LDRDroX renamable $x14, renamable $x12, 0, 0, debug-location !920 :: (load 8 from %ir.arrayidx83); cg.c:518:20
SU(17):   renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !925; cg.c:518:33
SU(18):   renamable $d0 = FSUBDrr renamable $d2, renamable $d0, debug-location !926; cg.c:518:25
SU(19):   STRDroX renamable $d0, renamable $x14, renamable $x12, 0, 0, debug-location !929 :: (store 8 into %ir.arrayidx89); cg.c:518:18
SU(20):   renamable $w12 = LDRWui $sp, 15, debug-location !930 :: (dereferenceable load 4 from %ir.j); cg.c:516:50
SU(21):   renamable $w12 = nsw ADDWri renamable $w12, 1, 0, debug-location !930; cg.c:516:50
SU(22):   STRWui renamable $w12, $sp, 15, debug-location !930 :: (store 4 into %ir.j); cg.c:516:50

Fixup kills for %bb.19
Fixup kills for %bb.20
********** MI Scheduling **********
conj_grad:%bb.21 for.cond93
  From: renamable $w12 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !939 :: (dereferenceable load 4 from @lastcol); cg.c:526:25
    To: Bcc 10, %bb.23, implicit $nzcv, debug-location !945; cg.c:526:9
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   renamable $w12 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !939 :: (dereferenceable load 4 from @lastcol); cg.c:526:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w12
SU(1):   renamable $w13 = LDRWui renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !940 :: (dereferenceable load 4 from @firstcol); cg.c:526:35
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=$w13
SU(2):   renamable $w14 = LDRWui $sp, 15, debug-location !937 :: (dereferenceable load 4 from %ir.j); cg.c:526:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(6): Data Latency=4 Reg=$w14
SU(3):   $w12 = SUBWrs renamable $w12, renamable $w13, 0, debug-location !941; cg.c:526:33
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=$w13
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w12
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$w12
SU(4):   renamable $d0 = LDRDui $sp, 3, debug-location !944 :: (dereferenceable load 8 from %ir.rho); cg.c:0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(5):   renamable $w12 = nsw ADDWri renamable $w12, 1, 0, debug-location !942; cg.c:526:44
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$w12
  Successors:
    SU(6): Data Latency=1 Reg=$w12
SU(6):   $wzr = SUBSWrs renamable $w14, renamable $w12, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !945; cg.c:526:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(5): Data Latency=1 Reg=$w12
    SU(2): Data Latency=4 Reg=$w14
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.23, implicit $nzcv, debug-location !945; cg.c:526:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 7
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w12 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !939 :: (dereferenceable load 4 from @lastcol); cg.c:526:25
  Ready @0c
  TopQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 7
  Cand SU(4) ORDER                              
  Cand SU(1) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w13 = LDRWui renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !940 :: (dereferenceable load 4 from @firstcol); cg.c:526:35
  Ready @1c
  TopQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 4 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 7
  Cand SU(4) ORDER                              
  Cand SU(2) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $w14 = LDRWui $sp, 15, debug-location !937 :: (dereferenceable load 4 from %ir.j); cg.c:526:21
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $d0 = LDRDui $sp, 3, debug-location !944 :: (dereferenceable load 8 from %ir.rho); cg.c:0
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $w12 = SUBWrs renamable $w12, renamable $w13, 0, debug-location !941; cg.c:526:33
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $w12 = nsw ADDWri renamable $w12, 1, 0, debug-location !942; cg.c:526:44
  Ready @6c
  TopQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) $wzr = SUBSWrs renamable $w14, renamable $w12, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !945; cg.c:526:9
  Ready @7c
  TopQ.A TopLatency SU(6) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.21 ***
SU(0):   renamable $w12 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !939 :: (dereferenceable load 4 from @lastcol); cg.c:526:25
SU(1):   renamable $w13 = LDRWui renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !940 :: (dereferenceable load 4 from @firstcol); cg.c:526:35
SU(2):   renamable $w14 = LDRWui $sp, 15, debug-location !937 :: (dereferenceable load 4 from %ir.j); cg.c:526:21
SU(4):   renamable $d0 = LDRDui $sp, 3, debug-location !944 :: (dereferenceable load 8 from %ir.rho); cg.c:0
SU(3):   $w12 = SUBWrs renamable $w12, renamable $w13, 0, debug-location !941; cg.c:526:33
SU(5):   renamable $w12 = nsw ADDWri renamable $w12, 1, 0, debug-location !942; cg.c:526:44
SU(6):   $wzr = SUBSWrs renamable $w14, renamable $w12, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !945; cg.c:526:9

Fixup kills for %bb.21
********** MI Scheduling **********
conj_grad:%bb.22 for.body97
  From: renamable $x12 = LDRXui $sp, 8, debug-location !946 :: (dereferenceable load 8 from %ir.r.addr); cg.c:527:25
    To: B %bb.21
 RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   renamable $x12 = LDRXui $sp, 8, debug-location !946 :: (dereferenceable load 8 from %ir.r.addr); cg.c:527:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(3): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x12
SU(1):   renamable $x13 = LDRSWui $sp, 15, debug-location !948 :: (dereferenceable load 4 from %ir.j); cg.c:527:27
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(3): Data Latency=4 Reg=$w13
    SU(3): Data Latency=0 Reg=$x13
    SU(2): Data Latency=4 Reg=$x13
    SU(7): Ord  Latency=0 Memory
SU(2):   renamable $d1 = LDRDroX renamable $x12, renamable $x13, 0, 1, debug-location !946 :: (load 8 from %ir.arrayidx101); cg.c:527:25
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(1): Data Latency=4 Reg=$x13
    SU(0): Data Latency=4 Reg=$x12
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d1
    SU(3): Anti Latency=0
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
SU(3):   renamable $w12 = nsw ADDWri renamable $w13, 1, 0, implicit $x13, debug-location !954; cg.c:526:50
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Anti Latency=0
    SU(1): Data Latency=4 Reg=$w13
    SU(1): Data Latency=0 Reg=$x13
    SU(0): Out  Latency=1
  Successors:
    SU(7): Data Latency=1 Reg=$w12
SU(4):   renamable $d1 = FMULDrr renamable $d1, renamable $d1, debug-location !951; cg.c:527:30
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 2
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d1
  Successors:
    SU(5): Data Latency=1 Reg=$d1
SU(5):   renamable $d0 = FADDDrr renamable $d0, renamable $d1, debug-location !952; cg.c:527:23
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=$d1
  Successors:
    SU(6): Data Latency=1 Reg=$d0
SU(6):   STRDui renamable $d0, $sp, 3, debug-location !953 :: (store 8 into %ir.rho); cg.c:527:17
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=$d0
    SU(2): Ord  Latency=0 Memory
SU(7):   STRWui renamable $w12, $sp, 15, debug-location !954 :: (store 4 into %ir.j); cg.c:526:50
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=$w12
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
ExitSU:   B %bb.21
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 10
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 10
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x12 = LDRXui $sp, 8, debug-location !946 :: (dereferenceable load 8 from %ir.r.addr); cg.c:527:25
  Ready @0c
  TopQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x13 = LDRSWui $sp, 15, debug-location !948 :: (dereferenceable load 4 from %ir.j); cg.c:527:27
  Ready @1c
  TopQ.A BotLatency SU(1) 10c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $d1 = LDRDroX renamable $x12, renamable $x13, 0, 1, debug-location !946 :: (load 8 from %ir.arrayidx101); cg.c:527:25
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w12 = nsw ADDWri renamable $w13, 1, 0, implicit $x13, debug-location !954; cg.c:526:50
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) STRWui renamable $w12, $sp, 15, debug-location !954 :: (store 4 into %ir.j); cg.c:526:50
  Ready @7c
  TopQ.A TopLatency SU(7) 5c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 9 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $d1 = FMULDrr renamable $d1, renamable $d1, debug-location !951; cg.c:527:30
  Ready @9c
  TopQ.A TopLatency SU(4) 8c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 6
  Executed: 10c
  Critical: 6c, 6 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $d0 = FADDDrr renamable $d0, renamable $d1, debug-location !952; cg.c:527:23
  Ready @10c
  TopQ.A TopLatency SU(5) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 7
  Executed: 11c
  Critical: 7c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) STRDui renamable $d0, $sp, 3, debug-location !953 :: (store 8 into %ir.rho); cg.c:527:17
  Ready @11c
  TopQ.A TopLatency SU(6) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 8
  Executed: 12c
  Critical: 8c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.22 ***
SU(0):   renamable $x12 = LDRXui $sp, 8, debug-location !946 :: (dereferenceable load 8 from %ir.r.addr); cg.c:527:25
SU(1):   renamable $x13 = LDRSWui $sp, 15, debug-location !948 :: (dereferenceable load 4 from %ir.j); cg.c:527:27
SU(2):   renamable $d1 = LDRDroX renamable $x12, renamable $x13, 0, 1, debug-location !946 :: (load 8 from %ir.arrayidx101); cg.c:527:25
SU(3):   renamable $w12 = nsw ADDWri renamable $w13, 1, 0, implicit $x13, debug-location !954; cg.c:526:50
SU(7):   STRWui renamable $w12, $sp, 15, debug-location !954 :: (store 4 into %ir.j); cg.c:526:50
SU(4):   renamable $d1 = FMULDrr renamable $d1, renamable $d1, debug-location !951; cg.c:527:30
SU(5):   renamable $d0 = FADDDrr renamable $d0, renamable $d1, debug-location !952; cg.c:527:23
SU(6):   STRDui renamable $d0, $sp, 3, debug-location !953 :: (store 8 into %ir.rho); cg.c:527:17

Fixup kills for %bb.22
********** MI Scheduling **********
conj_grad:%bb.23 for.end106
  From: renamable $d1 = LDRDui $sp, 2, debug-location !958 :: (dereferenceable load 8 from %ir.rho0); cg.c:533:22
    To: End RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $d1 = LDRDui $sp, 2, debug-location !958 :: (dereferenceable load 8 from %ir.rho0); cg.c:533:22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$d1
SU(1):   renamable $d0 = FDIVDrr renamable $d0, renamable $d1, debug-location !959; cg.c:533:20
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$d1
  Successors:
    SU(2): Data Latency=1 Reg=$d0
SU(2):   STRDui renamable $d0, $sp, 0, debug-location !960 :: (store 8 into %ir.beta); cg.c:533:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$d0
SU(3):   STRWui $wzr, $sp, 15, debug-location !961 :: (store 4 into %ir.j); cg.c:538:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d1 = LDRDui $sp, 2, debug-location !958 :: (dereferenceable load 8 from %ir.rho0); cg.c:533:22
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STRWui $wzr, $sp, 15, debug-location !961 :: (store 4 into %ir.j); cg.c:538:16
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $d0 = FDIVDrr renamable $d0, renamable $d1, debug-location !959; cg.c:533:20
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRDui renamable $d0, $sp, 0, debug-location !960 :: (store 8 into %ir.beta); cg.c:533:14
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.23 ***
SU(0):   renamable $d1 = LDRDui $sp, 2, debug-location !958 :: (dereferenceable load 8 from %ir.rho0); cg.c:533:22
SU(3):   STRWui $wzr, $sp, 15, debug-location !961 :: (store 4 into %ir.j); cg.c:538:16
SU(1):   renamable $d0 = FDIVDrr renamable $d0, renamable $d1, debug-location !959; cg.c:533:20
SU(2):   STRDui renamable $d0, $sp, 0, debug-location !960 :: (store 8 into %ir.beta); cg.c:533:14

Fixup kills for %bb.23
********** MI Scheduling **********
conj_grad:%bb.24 for.cond108
  From: renamable $w12 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !966 :: (dereferenceable load 4 from @lastcol); cg.c:538:25
    To: Bcc 10, %bb.26, implicit $nzcv, debug-location !971; cg.c:538:9
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $w12 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !966 :: (dereferenceable load 4 from @lastcol); cg.c:538:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w12
SU(1):   renamable $w13 = LDRWui renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !967 :: (dereferenceable load 4 from @firstcol); cg.c:538:35
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=$w13
SU(2):   renamable $w14 = LDRWui $sp, 15, debug-location !964 :: (dereferenceable load 4 from %ir.j); cg.c:538:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=$w14
SU(3):   $w12 = SUBWrs renamable $w12, renamable $w13, 0, debug-location !968; cg.c:538:33
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=$w13
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w12
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$w12
SU(4):   renamable $w12 = nsw ADDWri renamable $w12, 1, 0, debug-location !969; cg.c:538:44
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$w12
  Successors:
    SU(5): Data Latency=1 Reg=$w12
SU(5):   $wzr = SUBSWrs renamable $w14, renamable $w12, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !971; cg.c:538:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=$w12
    SU(2): Data Latency=4 Reg=$w14
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.26, implicit $nzcv, debug-location !971; cg.c:538:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 7
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w12 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !966 :: (dereferenceable load 4 from @lastcol); cg.c:538:25
  Ready @0c
  TopQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 7
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w13 = LDRWui renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !967 :: (dereferenceable load 4 from @firstcol); cg.c:538:35
  Ready @1c
  TopQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w14 = LDRWui $sp, 15, debug-location !964 :: (dereferenceable load 4 from %ir.j); cg.c:538:21
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $w12 = SUBWrs renamable $w12, renamable $w13, 0, debug-location !968; cg.c:538:33
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w12 = nsw ADDWri renamable $w12, 1, 0, debug-location !969; cg.c:538:44
  Ready @6c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $wzr = SUBSWrs renamable $w14, renamable $w12, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !971; cg.c:538:9
  Ready @7c
  TopQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.24 ***
SU(0):   renamable $w12 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !966 :: (dereferenceable load 4 from @lastcol); cg.c:538:25
SU(1):   renamable $w13 = LDRWui renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !967 :: (dereferenceable load 4 from @firstcol); cg.c:538:35
SU(2):   renamable $w14 = LDRWui $sp, 15, debug-location !964 :: (dereferenceable load 4 from %ir.j); cg.c:538:21
SU(3):   $w12 = SUBWrs renamable $w12, renamable $w13, 0, debug-location !968; cg.c:538:33
SU(4):   renamable $w12 = nsw ADDWri renamable $w12, 1, 0, debug-location !969; cg.c:538:44
SU(5):   $wzr = SUBSWrs renamable $w14, renamable $w12, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !971; cg.c:538:9

Fixup kills for %bb.24
********** MI Scheduling **********
conj_grad:%bb.25 for.body112
  From: renamable $x12 = LDRSWui $sp, 15, debug-location !974 :: (dereferenceable load 4 from %ir.j); cg.c:539:22
    To: B %bb.24
 RegionInstrs: 13
ScheduleDAGMI::schedule starting
SU(0):   renamable $x12 = LDRSWui $sp, 15, debug-location !974 :: (dereferenceable load 4 from %ir.j); cg.c:539:22
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 17
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x12
    SU(12): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
SU(1):   renamable $x13 = LDURXi $fp, -48, debug-location !976 :: (dereferenceable load 8 from %ir.p.addr); cg.c:539:34
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(9): Data Latency=4 Reg=$x13
    SU(5): Data Latency=4 Reg=$x13
    SU(9): Ord  Latency=0 Memory
SU(2):   renamable $x14 = LDRXui $sp, 8, debug-location !972 :: (dereferenceable load 8 from %ir.r.addr); cg.c:539:20
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(6): Data Latency=4 Reg=$x14
    SU(9): Ord  Latency=0 Memory
SU(3):   renamable $x12 = UBFMXri renamable $x12, 61, 60, debug-location !972; cg.c:539:20
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 13
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x12
  Successors:
    SU(10): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x12
    SU(6): Data Latency=1 Reg=$x12
    SU(5): Data Latency=1 Reg=$x12
SU(4):   renamable $d0 = LDRDui $sp, 0, debug-location !975 :: (dereferenceable load 8 from %ir.beta); cg.c:539:27
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$d0
    SU(9): Ord  Latency=0 Memory
SU(5):   renamable $d1 = LDRDroX renamable $x13, renamable $x12, 0, 0, debug-location !976 :: (load 8 from %ir.arrayidx116); cg.c:539:34
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 12
  Predecessors:
    SU(3): Data Latency=1 Reg=$x12
    SU(1): Data Latency=4 Reg=$x13
  Successors:
    SU(7): Data Latency=4 Reg=$d1
    SU(10): Anti Latency=0
    SU(12): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
SU(6):   renamable $d2 = LDRDroX renamable $x14, renamable $x12, 0, 0, debug-location !972 :: (load 8 from %ir.arrayidx114); cg.c:539:20
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 11
  Predecessors:
    SU(3): Data Latency=1 Reg=$x12
    SU(2): Data Latency=4 Reg=$x14
  Successors:
    SU(8): Data Latency=4 Reg=$d2
    SU(10): Anti Latency=0
    SU(12): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
SU(7):   renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !978; cg.c:539:32
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 8
  Predecessors:
    SU(5): Data Latency=4 Reg=$d1
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d0
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$d0
SU(8):   renamable $d0 = FADDDrr renamable $d2, renamable $d0, debug-location !979; cg.c:539:25
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 7
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$d0
    SU(6): Data Latency=4 Reg=$d2
  Successors:
    SU(9): Data Latency=1 Reg=$d0
SU(9):   STRDroX renamable $d0, renamable $x13, renamable $x12, 0, 0, debug-location !982 :: (store 8 into %ir.arrayidx120); cg.c:539:18
  # preds left       : 9
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 6
  Predecessors:
    SU(8): Data Latency=1 Reg=$d0
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Data Latency=1 Reg=$x12
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=$x13
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(10): Anti Latency=0
    SU(12): Ord  Latency=0 Memory
    SU(10): Ord  Latency=1 Memory
SU(10):   renamable $w12 = LDRWui $sp, 15, debug-location !983 :: (dereferenceable load 4 from %ir.j); cg.c:538:50
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 5
  Predecessors:
    SU(9): Anti Latency=0
    SU(9): Ord  Latency=1 Memory
    SU(6): Anti Latency=0
    SU(5): Anti Latency=0
    SU(3): Out  Latency=1
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=4 Reg=$w12
    SU(12): Ord  Latency=0 Memory
SU(11):   renamable $w12 = nsw ADDWri renamable $w12, 1, 0, debug-location !983; cg.c:538:50
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 1
  Predecessors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=4 Reg=$w12
  Successors:
    SU(12): Data Latency=1 Reg=$w12
SU(12):   STRWui renamable $w12, $sp, 15, debug-location !983 :: (store 4 into %ir.j); cg.c:538:50
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 0
  Predecessors:
    SU(11): Data Latency=1 Reg=$w12
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.24
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 17
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 17
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x12 = LDRSWui $sp, 15, debug-location !974 :: (dereferenceable load 4 from %ir.j); cg.c:539:22
  Ready @0c
  TopQ.A BotLatency SU(0) 17c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 4 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 17
  Cand SU(4) ORDER                              
  Cand SU(1) TOP-PATH                  16 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x13 = LDURXi $fp, -48, debug-location !976 :: (dereferenceable load 8 from %ir.p.addr); cg.c:539:34
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 4 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 17
  Cand SU(4) ORDER                              
  Cand SU(2) TOP-PATH                  15 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x14 = LDRXui $sp, 8, debug-location !972 :: (dereferenceable load 8 from %ir.r.addr); cg.c:539:20
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $d0 = LDRDui $sp, 0, debug-location !975 :: (dereferenceable load 8 from %ir.beta); cg.c:539:27
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $x12 = UBFMXri renamable $x12, 61, 60, debug-location !972; cg.c:539:20
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $d1 = LDRDroX renamable $x13, renamable $x12, 0, 0, debug-location !976 :: (load 8 from %ir.arrayidx116); cg.c:539:34
  Ready @5c
  TopQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $d2 = LDRDroX renamable $x14, renamable $x12, 0, 0, debug-location !972 :: (load 8 from %ir.arrayidx114); cg.c:539:20
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 9 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !978; cg.c:539:32
  Ready @9c
  TopQ.A TopLatency SU(7) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 8
  Executed: 10c
  Critical: 8c, 8 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) renamable $d0 = FADDDrr renamable $d2, renamable $d0, debug-location !979; cg.c:539:25
  Ready @10c
  TopQ.A TopLatency SU(8) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 9
  Executed: 11c
  Critical: 9c, 9 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) STRDroX renamable $d0, renamable $x13, renamable $x12, 0, 0, debug-location !982 :: (store 8 into %ir.arrayidx120); cg.c:539:18
  Ready @11c
  TopQ.A TopLatency SU(9) 11c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 10
  Executed: 12c
  Critical: 10c, 10 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) renamable $w12 = LDRWui $sp, 15, debug-location !983 :: (dereferenceable load 4 from %ir.j); cg.c:538:50
  Ready @12c
  TopQ.A TopLatency SU(10) 12c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 11
  Executed: 13c
  Critical: 11c, 11 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 16 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 11 
Pick Top ONLY1     
Scheduling SU(11) renamable $w12 = nsw ADDWri renamable $w12, 1, 0, debug-location !983; cg.c:538:50
  Ready @16c
  TopQ.A TopLatency SU(11) 16c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 12
  Executed: 17c
  Critical: 12c, 12 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 
Pick Top ONLY1     
Scheduling SU(12) STRWui renamable $w12, $sp, 15, debug-location !983 :: (store 4 into %ir.j); cg.c:538:50
  Ready @17c
  TopQ.A TopLatency SU(12) 17c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 13
  Executed: 18c
  Critical: 13c, 13 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   renamable $x12 = LDRSWui $sp, 15, debug-location !974 :: (dereferenceable load 4 from %ir.j); cg.c:539:22
SU(1):   renamable $x13 = LDURXi $fp, -48, debug-location !976 :: (dereferenceable load 8 from %ir.p.addr); cg.c:539:34
SU(2):   renamable $x14 = LDRXui $sp, 8, debug-location !972 :: (dereferenceable load 8 from %ir.r.addr); cg.c:539:20
SU(4):   renamable $d0 = LDRDui $sp, 0, debug-location !975 :: (dereferenceable load 8 from %ir.beta); cg.c:539:27
SU(3):   renamable $x12 = UBFMXri renamable $x12, 61, 60, debug-location !972; cg.c:539:20
SU(5):   renamable $d1 = LDRDroX renamable $x13, renamable $x12, 0, 0, debug-location !976 :: (load 8 from %ir.arrayidx116); cg.c:539:34
SU(6):   renamable $d2 = LDRDroX renamable $x14, renamable $x12, 0, 0, debug-location !972 :: (load 8 from %ir.arrayidx114); cg.c:539:20
SU(7):   renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !978; cg.c:539:32
SU(8):   renamable $d0 = FADDDrr renamable $d2, renamable $d0, debug-location !979; cg.c:539:25
SU(9):   STRDroX renamable $d0, renamable $x13, renamable $x12, 0, 0, debug-location !982 :: (store 8 into %ir.arrayidx120); cg.c:539:18
SU(10):   renamable $w12 = LDRWui $sp, 15, debug-location !983 :: (dereferenceable load 4 from %ir.j); cg.c:538:50
SU(11):   renamable $w12 = nsw ADDWri renamable $w12, 1, 0, debug-location !983; cg.c:538:50
SU(12):   STRWui renamable $w12, $sp, 15, debug-location !983 :: (store 4 into %ir.j); cg.c:538:50

Fixup kills for %bb.25
********** MI Scheduling **********
conj_grad:%bb.26 for.inc124
  From: renamable $w12 = LDRWui $sp, 13, debug-location !987 :: (dereferenceable load 4 from %ir.cgit); cg.c:434:41
    To: B %bb.7
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w12 = LDRWui $sp, 13, debug-location !987 :: (dereferenceable load 4 from %ir.cgit); cg.c:434:41
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w12
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w12 = nsw ADDWri renamable $w12, 1, 0, debug-location !987; cg.c:434:41
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w12
  Successors:
    SU(2): Data Latency=1 Reg=$w12
SU(2):   STRWui renamable $w12, $sp, 13, debug-location !987 :: (store 4 into %ir.cgit); cg.c:434:41
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w12
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.7
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w12 = LDRWui $sp, 13, debug-location !987 :: (dereferenceable load 4 from %ir.cgit); cg.c:434:41
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w12 = nsw ADDWri renamable $w12, 1, 0, debug-location !987; cg.c:434:41
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w12, $sp, 13, debug-location !987 :: (store 4 into %ir.cgit); cg.c:434:41
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.26 ***
SU(0):   renamable $w12 = LDRWui $sp, 13, debug-location !987 :: (dereferenceable load 4 from %ir.cgit); cg.c:434:41
SU(1):   renamable $w12 = nsw ADDWri renamable $w12, 1, 0, debug-location !987; cg.c:434:41
SU(2):   STRWui renamable $w12, $sp, 13, debug-location !987 :: (store 4 into %ir.cgit); cg.c:434:41

Fixup kills for %bb.26
********** MI Scheduling **********
conj_grad:%bb.27 for.end126
  From: STRXui $xzr, $sp, 4, debug-location !991 :: (store 8 into %ir.sum); cg.c:548:9
    To: End RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   STRXui $xzr, $sp, 4, debug-location !991 :: (store 8 into %ir.sum); cg.c:548:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   STRWui $wzr, $sp, 15, debug-location !992 :: (store 4 into %ir.j); cg.c:549:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 0
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STRXui $xzr, $sp, 4, debug-location !991 :: (store 8 into %ir.sum); cg.c:548:9
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRWui $wzr, $sp, 15, debug-location !992 :: (store 4 into %ir.j); cg.c:549:12
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   STRXui $xzr, $sp, 4, debug-location !991 :: (store 8 into %ir.sum); cg.c:548:9
SU(1):   STRWui $wzr, $sp, 15, debug-location !992 :: (store 4 into %ir.j); cg.c:549:12

Fixup kills for %bb.27
********** MI Scheduling **********
conj_grad:%bb.28 for.cond127
  From: renamable $w12 = LDRWui renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !997 :: (dereferenceable load 4 from @lastrow); cg.c:549:21
    To: Bcc 10, %bb.33, implicit $nzcv, debug-location !1002; cg.c:549:5
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $w12 = LDRWui renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !997 :: (dereferenceable load 4 from @lastrow); cg.c:549:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w12
SU(1):   renamable $w13 = LDRWui renamable $x11, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !998 :: (dereferenceable load 4 from @firstrow); cg.c:549:31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=$w13
SU(2):   renamable $w14 = LDRWui $sp, 15, debug-location !995 :: (dereferenceable load 4 from %ir.j); cg.c:549:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=$w14
SU(3):   $w12 = SUBWrs renamable $w12, renamable $w13, 0, debug-location !999; cg.c:549:29
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=$w13
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w12
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$w12
SU(4):   renamable $w12 = nsw ADDWri renamable $w12, 1, 0, debug-location !1000; cg.c:549:40
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$w12
  Successors:
    SU(5): Data Latency=1 Reg=$w12
SU(5):   $wzr = SUBSWrs renamable $w14, renamable $w12, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1002; cg.c:549:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=$w12
    SU(2): Data Latency=4 Reg=$w14
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.33, implicit $nzcv, debug-location !1002; cg.c:549:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 7
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w12 = LDRWui renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !997 :: (dereferenceable load 4 from @lastrow); cg.c:549:21
  Ready @0c
  TopQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 7
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w13 = LDRWui renamable $x11, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !998 :: (dereferenceable load 4 from @firstrow); cg.c:549:31
  Ready @1c
  TopQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w14 = LDRWui $sp, 15, debug-location !995 :: (dereferenceable load 4 from %ir.j); cg.c:549:17
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $w12 = SUBWrs renamable $w12, renamable $w13, 0, debug-location !999; cg.c:549:29
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w12 = nsw ADDWri renamable $w12, 1, 0, debug-location !1000; cg.c:549:40
  Ready @6c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $wzr = SUBSWrs renamable $w14, renamable $w12, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1002; cg.c:549:5
  Ready @7c
  TopQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.28 ***
SU(0):   renamable $w12 = LDRWui renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !997 :: (dereferenceable load 4 from @lastrow); cg.c:549:21
SU(1):   renamable $w13 = LDRWui renamable $x11, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !998 :: (dereferenceable load 4 from @firstrow); cg.c:549:31
SU(2):   renamable $w14 = LDRWui $sp, 15, debug-location !995 :: (dereferenceable load 4 from %ir.j); cg.c:549:17
SU(3):   $w12 = SUBWrs renamable $w12, renamable $w13, 0, debug-location !999; cg.c:549:29
SU(4):   renamable $w12 = nsw ADDWri renamable $w12, 1, 0, debug-location !1000; cg.c:549:40
SU(5):   $wzr = SUBSWrs renamable $w14, renamable $w12, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1002; cg.c:549:5

Fixup kills for %bb.28
********** MI Scheduling **********
conj_grad:%bb.29 for.body131
  From: renamable $x12 = LDURXi $fp, -16, debug-location !1005 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:18
    To: End RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $x12 = LDURXi $fp, -16, debug-location !1005 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:18
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x12
SU(1):   renamable $x13 = LDRSWui $sp, 15, debug-location !1007 :: (dereferenceable load 4 from %ir.j); cg.c:551:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=$x13
SU(2):   STRXui $xzr, $sp, 5, debug-location !1003 :: (store 8 into %ir.d); cg.c:550:11
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Ord  Latency=1 Memory
SU(3):   renamable $w12 = LDRWroX renamable $x12, renamable $x13, 0, 1, debug-location !1005 :: (load 4 from %ir.arrayidx133); cg.c:551:18
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(2): Ord  Latency=1 Memory
    SU(1): Data Latency=4 Reg=$x13
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x12
  Successors:
    ExitSU: Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 8
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 8
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x12 = LDURXi $fp, -16, debug-location !1005 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:18
  Ready @0c
  TopQ.A BotLatency SU(0) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 8
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x13 = LDRSWui $sp, 15, debug-location !1007 :: (dereferenceable load 4 from %ir.j); cg.c:551:25
  Ready @1c
  TopQ.A BotLatency SU(1) 8c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRXui $xzr, $sp, 5, debug-location !1003 :: (store 8 into %ir.d); cg.c:550:11
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w12 = LDRWroX renamable $x12, renamable $x13, 0, 1, debug-location !1005 :: (load 4 from %ir.arrayidx133); cg.c:551:18
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.29 ***
SU(0):   renamable $x12 = LDURXi $fp, -16, debug-location !1005 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:18
SU(1):   renamable $x13 = LDRSWui $sp, 15, debug-location !1007 :: (dereferenceable load 4 from %ir.j); cg.c:551:25
SU(2):   STRXui $xzr, $sp, 5, debug-location !1003 :: (store 8 into %ir.d); cg.c:550:11
SU(3):   renamable $w12 = LDRWroX renamable $x12, renamable $x13, 0, 1, debug-location !1005 :: (load 4 from %ir.arrayidx133); cg.c:551:18

Fixup kills for %bb.29
********** MI Scheduling **********
conj_grad:%bb.30 for.cond134
  From: STRWui killed renamable $w12, $sp, 14, debug-location !DILocation(line: 0, scope: !1006) :: (store 4 into %ir.k); cg.c:0
    To: Bcc 10, %bb.32, implicit $nzcv, debug-location !1017; cg.c:551:9
 RegionInstrs: 9
ScheduleDAGMI::schedule starting
SU(0):   STRWui renamable $w12, $sp, 14, debug-location !DILocation(line: 0, scope: !1006) :: (store 4 into %ir.k); cg.c:0
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 10
  Successors:
    SU(1): Anti Latency=0
    SU(2): Ord  Latency=1 Memory
    SU(6): Ord  Latency=1 Memory
SU(1):   renamable $x12 = LDURXi $fp, -16, debug-location !1012 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:33
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Predecessors:
    SU(0): Anti Latency=0
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$x12
SU(2):   renamable $w14, $w13 = LDPWi $sp, 14, debug-location !1013 :: (dereferenceable load 4 from %ir.j), (dereferenceable load 4 from %ir.k); cg.c:551:40
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 9
  Predecessors:
    SU(0): Ord  Latency=1 Memory
  Successors:
    SU(8): Data Latency=4 Reg=$w14
    SU(3): Out  Latency=1
    SU(3): Data Latency=0 Reg=$w13
SU(3):   $w13 = KILL $w13, implicit-def $x13, debug-location !1013; cg.c:551:40
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 8
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=0 Reg=$w13
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=0 Reg=$x13
SU(4):   $x13 = SBFMXri $x13, 0, 31, debug-location !1013; cg.c:551:40
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 7
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=0 Reg=$x13
  Successors:
    SU(5): Data Latency=1 Reg=$x13
SU(5):   renamable $x12 = ADDXrs renamable $x12, renamable $x13, 2, debug-location !1012; cg.c:551:33
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(4): Data Latency=1 Reg=$x13
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x12
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x12
SU(6):   renamable $w12 = LDRWui renamable $x12, 1, debug-location !1012 :: (load 4 from %ir.arrayidx137); cg.c:551:33
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x12
    SU(0): Ord  Latency=1 Memory
  Successors:
    SU(8): Data Latency=4 Reg=$w12
SU(7):   renamable $d0 = LDRDui $sp, 5, debug-location !1016 :: (dereferenceable load 8 from %ir.d); cg.c:0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(8):   $wzr = SUBSWrs renamable $w14, renamable $w12, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1017; cg.c:551:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(6): Data Latency=4 Reg=$w12
    SU(2): Data Latency=4 Reg=$w14
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.32, implicit $nzcv, debug-location !1017; cg.c:551:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=1 Artificial
    SU(7): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 10
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 7 
  TopQ.A RemainingLatency 0 + 0c > CritPath 10
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) STRWui renamable $w12, $sp, 14, debug-location !DILocation(line: 0, scope: !1006) :: (store 4 into %ir.k); cg.c:0
  Ready @0c
  TopQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 10
  Cand SU(7) ORDER                              
  Cand SU(1) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x12 = LDURXi $fp, -16, debug-location !1012 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:33
  Ready @1c
  TopQ.A BotLatency SU(1) 10c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 10
  Cand SU(7) ORDER                              
  Cand SU(2) TOP-PATH                  9 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $w14, $w13 = LDPWi $sp, 14, debug-location !1013 :: (dereferenceable load 4 from %ir.j), (dereferenceable load 4 from %ir.k); cg.c:551:40
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 10
  Cand SU(7) ORDER                              
  Cand SU(3) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) $w13 = KILL $w13, implicit-def $x13, debug-location !1013; cg.c:551:40
  Ready @3c
  TopQ.A TopLatency SU(3) 2c
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $d0 = LDRDui $sp, 5, debug-location !1016 :: (dereferenceable load 8 from %ir.d); cg.c:0
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $x13 = SBFMXri $x13, 0, 31, debug-location !1013; cg.c:551:40
  Ready @4c
  TopQ.A TopLatency SU(4) 3c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $x12 = ADDXrs renamable $x12, renamable $x13, 2, debug-location !1012; cg.c:551:33
  Ready @5c
  TopQ.A TopLatency SU(5) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $w12 = LDRWui renamable $x12, 1, debug-location !1012 :: (load 4 from %ir.arrayidx137); cg.c:551:33
  Ready @6c
  TopQ.A TopLatency SU(6) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 10 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) $wzr = SUBSWrs renamable $w14, renamable $w12, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1017; cg.c:551:9
  Ready @10c
  TopQ.A TopLatency SU(8) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 8
  Executed: 11c
  Critical: 8c, 8 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.30 ***
SU(0):   STRWui renamable $w12, $sp, 14, debug-location !DILocation(line: 0, scope: !1006) :: (store 4 into %ir.k); cg.c:0
SU(1):   renamable $x12 = LDURXi $fp, -16, debug-location !1012 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:33
SU(2):   renamable $w14, $w13 = LDPWi $sp, 14, debug-location !1013 :: (dereferenceable load 4 from %ir.j), (dereferenceable load 4 from %ir.k); cg.c:551:40
SU(3):   $w13 = KILL $w13, implicit-def $x13, debug-location !1013; cg.c:551:40
SU(7):   renamable $d0 = LDRDui $sp, 5, debug-location !1016 :: (dereferenceable load 8 from %ir.d); cg.c:0
SU(4):   $x13 = SBFMXri $x13, 0, 31, debug-location !1013; cg.c:551:40
SU(5):   renamable $x12 = ADDXrs renamable $x12, renamable $x13, 2, debug-location !1012; cg.c:551:33
SU(6):   renamable $w12 = LDRWui renamable $x12, 1, debug-location !1012 :: (load 4 from %ir.arrayidx137); cg.c:551:33
SU(8):   $wzr = SUBSWrs renamable $w14, renamable $w12, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1017; cg.c:551:9

Fixup kills for %bb.30
********** MI Scheduling **********
conj_grad:%bb.31 for.body139
  From: renamable $x12 = LDRSWui $sp, 14, debug-location !1020 :: (dereferenceable load 4 from %ir.k); cg.c:552:23
    To: B %bb.30
 RegionInstrs: 10
ScheduleDAGMI::schedule starting
SU(0):   renamable $x12 = LDRSWui $sp, 14, debug-location !1020 :: (dereferenceable load 4 from %ir.k); cg.c:552:23
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$w12
    SU(6): Data Latency=0 Reg=$x12
    SU(4): Data Latency=4 Reg=$x12
    SU(3): Data Latency=4 Reg=$x12
SU(1):   renamable $x13 = LDURXi $fp, -8, debug-location !1022 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:552:30
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x13
SU(2):   renamable $x14, renamable $x15 = LDPXi $fp, -5, debug-location !1018 :: (dereferenceable load 8 from %ir.a.addr), (dereferenceable load 8 from %ir.z.addr); cg.c:552:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(4): Data Latency=4 Reg=$x14
    SU(5): Data Latency=4 Reg=$x15
SU(3):   renamable $x13 = LDRSWroX renamable $x13, renamable $x12, 0, 1, debug-location !1022 :: (load 4 from %ir.arrayidx143); cg.c:552:30
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 10
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x13
    SU(0): Data Latency=4 Reg=$x12
  Successors:
    SU(5): Data Latency=4 Reg=$x13
    SU(6): Anti Latency=0
    SU(9): Ord  Latency=0 Memory
SU(4):   renamable $d1 = LDRDroX renamable $x14, renamable $x12, 0, 1, debug-location !1018 :: (load 8 from %ir.arrayidx141); cg.c:552:21
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(2): Data Latency=4 Reg=$x14
    SU(0): Data Latency=4 Reg=$x12
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$d1
    SU(6): Anti Latency=0
    SU(9): Ord  Latency=0 Memory
SU(5):   renamable $d2 = LDRDroX renamable $x15, renamable $x13, 0, 1, debug-location !1021 :: (load 8 from %ir.arrayidx145); cg.c:552:28
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 6
  Predecessors:
    SU(3): Data Latency=4 Reg=$x13
    SU(2): Data Latency=4 Reg=$x15
  Successors:
    SU(7): Data Latency=4 Reg=$d2
    SU(9): Ord  Latency=0 Memory
SU(6):   renamable $w12 = nsw ADDWri renamable $w12, 1, 0, implicit $x12, debug-location !1027; cg.c:551:49
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(4): Anti Latency=0
    SU(3): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w12
    SU(0): Data Latency=0 Reg=$x12
SU(7):   renamable $d1 = FMULDrr renamable $d1, renamable $d2, debug-location !1024; cg.c:552:26
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 2
  Predecessors:
    SU(5): Data Latency=4 Reg=$d2
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d1
  Successors:
    SU(8): Data Latency=1 Reg=$d1
SU(8):   renamable $d0 = FADDDrr renamable $d0, renamable $d1, debug-location !1025; cg.c:552:19
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 1
  Predecessors:
    SU(7): Data Latency=1 Reg=$d1
  Successors:
    SU(9): Data Latency=1 Reg=$d0
SU(9):   STRDui renamable $d0, $sp, 5, debug-location !1026 :: (store 8 into %ir.d); cg.c:552:15
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=$d0
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
ExitSU:   B %bb.30
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 14
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 14
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x12 = LDRSWui $sp, 14, debug-location !1020 :: (dereferenceable load 4 from %ir.k); cg.c:552:23
  Ready @0c
  TopQ.A BotLatency SU(0) 14c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 14
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  14 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x13 = LDURXi $fp, -8, debug-location !1022 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:552:30
  Ready @1c
  TopQ.A BotLatency SU(1) 14c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x14, renamable $x15 = LDPXi $fp, -5, debug-location !1018 :: (dereferenceable load 8 from %ir.a.addr), (dereferenceable load 8 from %ir.z.addr); cg.c:552:21
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 4 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $x13 = LDRSWroX renamable $x13, renamable $x12, 0, 1, debug-location !1022 :: (load 4 from %ir.arrayidx143); cg.c:552:30
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $d1 = LDRDroX renamable $x14, renamable $x12, 0, 1, debug-location !1018 :: (load 8 from %ir.arrayidx141); cg.c:552:21
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $w12 = nsw ADDWri renamable $w12, 1, 0, implicit $x12, debug-location !1027; cg.c:551:49
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 9 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $d2 = LDRDroX renamable $x15, renamable $x13, 0, 1, debug-location !1021 :: (load 8 from %ir.arrayidx145); cg.c:552:28
  Ready @9c
  TopQ.A TopLatency SU(5) 8c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 7
  Executed: 10c
  Critical: 7c, 7 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 13 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $d1 = FMULDrr renamable $d1, renamable $d2, debug-location !1024; cg.c:552:26
  Ready @13c
  TopQ.A TopLatency SU(7) 12c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 8
  Executed: 14c
  Critical: 8c, 8 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) renamable $d0 = FADDDrr renamable $d0, renamable $d1, debug-location !1025; cg.c:552:19
  Ready @14c
  TopQ.A TopLatency SU(8) 13c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 9
  Executed: 15c
  Critical: 9c, 9 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) STRDui renamable $d0, $sp, 5, debug-location !1026 :: (store 8 into %ir.d); cg.c:552:15
  Ready @15c
  TopQ.A TopLatency SU(9) 14c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 10
  Executed: 16c
  Critical: 10c, 10 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.31 ***
SU(0):   renamable $x12 = LDRSWui $sp, 14, debug-location !1020 :: (dereferenceable load 4 from %ir.k); cg.c:552:23
SU(1):   renamable $x13 = LDURXi $fp, -8, debug-location !1022 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:552:30
SU(2):   renamable $x14, renamable $x15 = LDPXi $fp, -5, debug-location !1018 :: (dereferenceable load 8 from %ir.a.addr), (dereferenceable load 8 from %ir.z.addr); cg.c:552:21
SU(3):   renamable $x13 = LDRSWroX renamable $x13, renamable $x12, 0, 1, debug-location !1022 :: (load 4 from %ir.arrayidx143); cg.c:552:30
SU(4):   renamable $d1 = LDRDroX renamable $x14, renamable $x12, 0, 1, debug-location !1018 :: (load 8 from %ir.arrayidx141); cg.c:552:21
SU(6):   renamable $w12 = nsw ADDWri renamable $w12, 1, 0, implicit $x12, debug-location !1027; cg.c:551:49
SU(5):   renamable $d2 = LDRDroX renamable $x15, renamable $x13, 0, 1, debug-location !1021 :: (load 8 from %ir.arrayidx145); cg.c:552:28
SU(7):   renamable $d1 = FMULDrr renamable $d1, renamable $d2, debug-location !1024; cg.c:552:26
SU(8):   renamable $d0 = FADDDrr renamable $d0, renamable $d1, debug-location !1025; cg.c:552:19
SU(9):   STRDui renamable $d0, $sp, 5, debug-location !1026 :: (store 8 into %ir.d); cg.c:552:15

Fixup kills for %bb.31
********** MI Scheduling **********
conj_grad:%bb.32 for.end150
  From: renamable $x12 = LDRXui $sp, 8, debug-location !1031 :: (dereferenceable load 8 from %ir.r.addr); cg.c:554:9
    To: B %bb.28
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $x12 = LDRXui $sp, 8, debug-location !1031 :: (dereferenceable load 8 from %ir.r.addr); cg.c:554:9
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(3): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x12
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $x13 = LDRSWui $sp, 15, debug-location !1032 :: (dereferenceable load 4 from %ir.j); cg.c:554:11
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(2): Data Latency=4 Reg=$x13
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
SU(2):   STRDroX renamable $d0, renamable $x12, renamable $x13, 0, 1, debug-location !1033 :: (store 8 into %ir.arrayidx152); cg.c:554:14
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(1): Data Latency=4 Reg=$x13
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=$x12
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(3): Anti Latency=0
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=1 Memory
SU(3):   renamable $w12 = LDRWui $sp, 15, debug-location !1034 :: (dereferenceable load 4 from %ir.j); cg.c:549:46
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(2): Anti Latency=0
    SU(2): Ord  Latency=1 Memory
    SU(0): Out  Latency=1
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$w12
    SU(5): Ord  Latency=0 Memory
SU(4):   renamable $w12 = nsw ADDWri renamable $w12, 1, 0, debug-location !1034; cg.c:549:46
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w12
  Successors:
    SU(5): Data Latency=1 Reg=$w12
SU(5):   STRWui renamable $w12, $sp, 15, debug-location !1034 :: (store 4 into %ir.j); cg.c:549:46
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=$w12
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
ExitSU:   B %bb.28
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 10
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 10
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x12 = LDRXui $sp, 8, debug-location !1031 :: (dereferenceable load 8 from %ir.r.addr); cg.c:554:9
  Ready @0c
  TopQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x13 = LDRSWui $sp, 15, debug-location !1032 :: (dereferenceable load 4 from %ir.j); cg.c:554:11
  Ready @1c
  TopQ.A BotLatency SU(1) 10c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRDroX renamable $d0, renamable $x12, renamable $x13, 0, 1, debug-location !1033 :: (store 8 into %ir.arrayidx152); cg.c:554:14
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w12 = LDRWui $sp, 15, debug-location !1034 :: (dereferenceable load 4 from %ir.j); cg.c:549:46
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 10 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w12 = nsw ADDWri renamable $w12, 1, 0, debug-location !1034; cg.c:549:46
  Ready @10c
  TopQ.A TopLatency SU(4) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) STRWui renamable $w12, $sp, 15, debug-location !1034 :: (store 4 into %ir.j); cg.c:549:46
  Ready @11c
  TopQ.A TopLatency SU(5) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   renamable $x12 = LDRXui $sp, 8, debug-location !1031 :: (dereferenceable load 8 from %ir.r.addr); cg.c:554:9
SU(1):   renamable $x13 = LDRSWui $sp, 15, debug-location !1032 :: (dereferenceable load 4 from %ir.j); cg.c:554:11
SU(2):   STRDroX renamable $d0, renamable $x12, renamable $x13, 0, 1, debug-location !1033 :: (store 8 into %ir.arrayidx152); cg.c:554:14
SU(3):   renamable $w12 = LDRWui $sp, 15, debug-location !1034 :: (dereferenceable load 4 from %ir.j); cg.c:549:46
SU(4):   renamable $w12 = nsw ADDWri renamable $w12, 1, 0, debug-location !1034; cg.c:549:46
SU(5):   STRWui renamable $w12, $sp, 15, debug-location !1034 :: (store 4 into %ir.j); cg.c:549:46

Fixup kills for %bb.32
Fixup kills for %bb.33
********** MI Scheduling **********
conj_grad:%bb.34 for.cond156
  From: renamable $w10 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !1043 :: (dereferenceable load 4 from @lastcol); cg.c:560:21
    To: Bcc 10, %bb.36, implicit $nzcv, debug-location !1048; cg.c:560:5
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $w10 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !1043 :: (dereferenceable load 4 from @lastcol); cg.c:560:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w10
SU(1):   renamable $w11 = LDRWui renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !1044 :: (dereferenceable load 4 from @firstcol); cg.c:560:31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=$w11
SU(2):   renamable $w12 = LDRWui $sp, 15, debug-location !1041 :: (dereferenceable load 4 from %ir.j); cg.c:560:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=$w12
SU(3):   $w10 = SUBWrs renamable $w10, renamable $w11, 0, debug-location !1045; cg.c:560:29
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=$w11
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w10
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$w10
SU(4):   renamable $w10 = nsw ADDWri renamable $w10, 1, 0, debug-location !1046; cg.c:560:40
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$w10
  Successors:
    SU(5): Data Latency=1 Reg=$w10
SU(5):   $wzr = SUBSWrs renamable $w12, renamable $w10, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1048; cg.c:560:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=$w10
    SU(2): Data Latency=4 Reg=$w12
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.36, implicit $nzcv, debug-location !1048; cg.c:560:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 7
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w10 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !1043 :: (dereferenceable load 4 from @lastcol); cg.c:560:21
  Ready @0c
  TopQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 7
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w11 = LDRWui renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !1044 :: (dereferenceable load 4 from @firstcol); cg.c:560:31
  Ready @1c
  TopQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w12 = LDRWui $sp, 15, debug-location !1041 :: (dereferenceable load 4 from %ir.j); cg.c:560:17
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $w10 = SUBWrs renamable $w10, renamable $w11, 0, debug-location !1045; cg.c:560:29
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w10 = nsw ADDWri renamable $w10, 1, 0, debug-location !1046; cg.c:560:40
  Ready @6c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $wzr = SUBSWrs renamable $w12, renamable $w10, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1048; cg.c:560:5
  Ready @7c
  TopQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.34 ***
SU(0):   renamable $w10 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !1043 :: (dereferenceable load 4 from @lastcol); cg.c:560:21
SU(1):   renamable $w11 = LDRWui renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !1044 :: (dereferenceable load 4 from @firstcol); cg.c:560:31
SU(2):   renamable $w12 = LDRWui $sp, 15, debug-location !1041 :: (dereferenceable load 4 from %ir.j); cg.c:560:17
SU(3):   $w10 = SUBWrs renamable $w10, renamable $w11, 0, debug-location !1045; cg.c:560:29
SU(4):   renamable $w10 = nsw ADDWri renamable $w10, 1, 0, debug-location !1046; cg.c:560:40
SU(5):   $wzr = SUBSWrs renamable $w12, renamable $w10, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1048; cg.c:560:5

Fixup kills for %bb.34
********** MI Scheduling **********
conj_grad:%bb.35 for.body160
  From: renamable $x10 = LDRSWui $sp, 15, debug-location !1051 :: (dereferenceable load 4 from %ir.j); cg.c:561:15
    To: B %bb.34
 RegionInstrs: 14
ScheduleDAGMI::schedule starting
SU(0):   renamable $x10 = LDRSWui $sp, 15, debug-location !1051 :: (dereferenceable load 4 from %ir.j); cg.c:561:15
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$w10
    SU(7): Data Latency=0 Reg=$x10
    SU(3): Data Latency=4 Reg=$x10
    SU(13): Ord  Latency=0 Memory
SU(1):   renamable $x11 = LDURXi $fp, -24, debug-location !1049 :: (dereferenceable load 8 from %ir.x.addr); cg.c:561:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(4): Data Latency=4 Reg=$x11
SU(2):   renamable $x12 = LDRXui $sp, 8, debug-location !1052 :: (dereferenceable load 8 from %ir.r.addr); cg.c:561:20
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(5): Data Latency=4 Reg=$x12
SU(3):   renamable $x13 = UBFMXri renamable $x10, 61, 60, debug-location !1049; cg.c:561:13
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(0): Data Latency=4 Reg=$x10
  Successors:
    SU(5): Data Latency=1 Reg=$x13
    SU(4): Data Latency=1 Reg=$x13
    SU(7): Anti Latency=0
SU(4):   renamable $d0 = LDRDroX renamable $x11, renamable $x13, 0, 0, debug-location !1049 :: (load 8 from %ir.arrayidx162); cg.c:561:13
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 7
  Predecessors:
    SU(3): Data Latency=1 Reg=$x13
    SU(1): Data Latency=4 Reg=$x11
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=4 Reg=$d0
    SU(13): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
SU(5):   renamable $d1 = LDRDroX renamable $x12, renamable $x13, 0, 0, debug-location !1052 :: (load 8 from %ir.arrayidx164); cg.c:561:20
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 7
  Predecessors:
    SU(3): Data Latency=1 Reg=$x13
    SU(2): Data Latency=4 Reg=$x12
  Successors:
    SU(8): Data Latency=4 Reg=$d1
    SU(13): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
SU(6):   renamable $d2 = LDRDui $sp, 4, debug-location !1056 :: (dereferenceable load 8 from %ir.sum); cg.c:562:15
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(11): Data Latency=4 Reg=$d2
    SU(12): Ord  Latency=0 Memory
SU(7):   renamable $w10 = nsw ADDWri renamable $w10, 1, 0, implicit $x10, debug-location !1062; cg.c:560:46
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(3): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w10
    SU(0): Data Latency=0 Reg=$x10
  Successors:
    SU(13): Data Latency=1 Reg=$w10
SU(8):   renamable $d0 = FSUBDrr renamable $d0, renamable $d1, debug-location !1054; cg.c:561:18
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 3
  Predecessors:
    SU(5): Data Latency=4 Reg=$d1
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d0
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$d0
    SU(9): Data Latency=1 Reg=$d0
SU(9):   STRDui renamable $d0, $sp, 5, debug-location !1055 :: (store 8 into %ir.d); cg.c:561:11
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 2
  Predecessors:
    SU(8): Data Latency=1 Reg=$d0
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Successors:
    SU(10): Anti Latency=0
SU(10):   renamable $d0 = FMULDrr renamable $d0, renamable $d0, debug-location !1059; cg.c:562:23
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 2
  Predecessors:
    SU(9): Anti Latency=0
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$d0
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$d0
SU(11):   renamable $d0 = FADDDrr renamable $d2, renamable $d0, debug-location !1060; cg.c:562:19
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 1
  Predecessors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$d0
    SU(6): Data Latency=4 Reg=$d2
  Successors:
    SU(12): Data Latency=1 Reg=$d0
SU(12):   STRDui renamable $d0, $sp, 4, debug-location !1061 :: (store 8 into %ir.sum); cg.c:562:13
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(11): Data Latency=1 Reg=$d0
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
SU(13):   STRWui renamable $w10, $sp, 15, debug-location !1062 :: (store 4 into %ir.j); cg.c:560:46
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=$w10
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.34
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 12
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 6 
  TopQ.A RemainingLatency 0 + 0c > CritPath 12
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x10 = LDRSWui $sp, 15, debug-location !1051 :: (dereferenceable load 4 from %ir.j); cg.c:561:15
  Ready @0c
  TopQ.A BotLatency SU(0) 12c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 6 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 12
  Cand SU(6) ORDER                              
  Cand SU(1) TOP-PATH                  11 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x11 = LDURXi $fp, -24, debug-location !1049 :: (dereferenceable load 8 from %ir.x.addr); cg.c:561:13
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 6 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 12
  Cand SU(6) ORDER                              
  Cand SU(2) TOP-PATH                  11 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x12 = LDRXui $sp, 8, debug-location !1052 :: (dereferenceable load 8 from %ir.r.addr); cg.c:561:20
  Ready @2c
  TopQ.A BotLatency SU(2) 11c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $d2 = LDRDui $sp, 4, debug-location !1056 :: (dereferenceable load 8 from %ir.sum); cg.c:562:15
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $x13 = UBFMXri renamable $x10, 61, 60, debug-location !1049; cg.c:561:13
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 4 7 
  TopQ.A RemainingLatency 0 + 5c > CritPath 12
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) renamable $d0 = LDRDroX renamable $x11, renamable $x13, 0, 0, debug-location !1049 :: (load 8 from %ir.arrayidx162); cg.c:561:13
  Ready @5c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 5 
  TopQ.A RemainingLatency 0 + 6c > CritPath 12
  Cand SU(7) ORDER                              
  Cand SU(5) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $d1 = LDRDroX renamable $x12, renamable $x13, 0, 0, debug-location !1052 :: (load 8 from %ir.arrayidx164); cg.c:561:20
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 8 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $w10 = nsw ADDWri renamable $w10, 1, 0, implicit $x10, debug-location !1062; cg.c:560:46
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 8 
Queue TopQ.A: 13 
Pick Top ONLY1     
Scheduling SU(13) STRWui renamable $w10, $sp, 15, debug-location !1062 :: (store 4 into %ir.j); cg.c:560:46
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 10 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) renamable $d0 = FSUBDrr renamable $d0, renamable $d1, debug-location !1054; cg.c:561:18
  Ready @10c
  TopQ.A TopLatency SU(8) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 10
  Executed: 11c
  Critical: 10c, 10 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) STRDui renamable $d0, $sp, 5, debug-location !1055 :: (store 8 into %ir.d); cg.c:561:11
  Ready @11c
  TopQ.A TopLatency SU(9) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 11
  Executed: 12c
  Critical: 11c, 11 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) renamable $d0 = FMULDrr renamable $d0, renamable $d0, debug-location !1059; cg.c:562:23
  Ready @12c
  TopQ.A BotLatency SU(10) 2c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 12
  Executed: 13c
  Critical: 12c, 12 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 
Pick Top ONLY1     
Scheduling SU(11) renamable $d0 = FADDDrr renamable $d2, renamable $d0, debug-location !1060; cg.c:562:19
  Ready @13c
  TopQ.A TopLatency SU(11) 11c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 13
  Executed: 14c
  Critical: 13c, 13 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 
Pick Top ONLY1     
Scheduling SU(12) STRDui renamable $d0, $sp, 4, debug-location !1061 :: (store 8 into %ir.sum); cg.c:562:13
  Ready @14c
  TopQ.A TopLatency SU(12) 12c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 14
  Executed: 15c
  Critical: 14c, 14 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.35 ***
SU(0):   renamable $x10 = LDRSWui $sp, 15, debug-location !1051 :: (dereferenceable load 4 from %ir.j); cg.c:561:15
SU(1):   renamable $x11 = LDURXi $fp, -24, debug-location !1049 :: (dereferenceable load 8 from %ir.x.addr); cg.c:561:13
SU(2):   renamable $x12 = LDRXui $sp, 8, debug-location !1052 :: (dereferenceable load 8 from %ir.r.addr); cg.c:561:20
SU(6):   renamable $d2 = LDRDui $sp, 4, debug-location !1056 :: (dereferenceable load 8 from %ir.sum); cg.c:562:15
SU(3):   renamable $x13 = UBFMXri renamable $x10, 61, 60, debug-location !1049; cg.c:561:13
SU(4):   renamable $d0 = LDRDroX renamable $x11, renamable $x13, 0, 0, debug-location !1049 :: (load 8 from %ir.arrayidx162); cg.c:561:13
SU(5):   renamable $d1 = LDRDroX renamable $x12, renamable $x13, 0, 0, debug-location !1052 :: (load 8 from %ir.arrayidx164); cg.c:561:20
SU(7):   renamable $w10 = nsw ADDWri renamable $w10, 1, 0, implicit $x10, debug-location !1062; cg.c:560:46
SU(13):   STRWui renamable $w10, $sp, 15, debug-location !1062 :: (store 4 into %ir.j); cg.c:560:46
SU(8):   renamable $d0 = FSUBDrr renamable $d0, renamable $d1, debug-location !1054; cg.c:561:18
SU(9):   STRDui renamable $d0, $sp, 5, debug-location !1055 :: (store 8 into %ir.d); cg.c:561:11
SU(10):   renamable $d0 = FMULDrr renamable $d0, renamable $d0, debug-location !1059; cg.c:562:23
SU(11):   renamable $d0 = FADDDrr renamable $d2, renamable $d0, debug-location !1060; cg.c:562:19
SU(12):   STRDui renamable $d0, $sp, 4, debug-location !1061 :: (store 8 into %ir.sum); cg.c:562:13

Fixup kills for %bb.35
********** MI Scheduling **********
conj_grad:%bb.36 for.end170
  From: renamable $d1 = LDRDui $sp, 4, debug-location !1066 :: (dereferenceable load 8 from %ir.sum); cg.c:565:19
    To: Bcc 7, %bb.38, implicit $nzcv, debug-location !1068; cg.c:565:6
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $d1 = LDRDui $sp, 4, debug-location !1066 :: (dereferenceable load 8 from %ir.sum); cg.c:565:19
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(1): Data Latency=4 Reg=$d1
SU(1):   renamable $d0 = FSQRTDr renamable $d1, debug-location !1067; cg.c:565:14
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(0): Data Latency=4 Reg=$d1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(2): Data Latency=1 Reg=$d0
SU(2):   FCMPDrr renamable $d0, renamable $d0, implicit-def $nzcv, debug-location !1068; cg.c:565:6
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=$d0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 7, %bb.38, implicit $nzcv, debug-location !1068; cg.c:565:6
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $d1 = LDRDui $sp, 4, debug-location !1066 :: (dereferenceable load 8 from %ir.sum); cg.c:565:19
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $d0 = FSQRTDr renamable $d1, debug-location !1067; cg.c:565:14
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) FCMPDrr renamable $d0, renamable $d0, implicit-def $nzcv, debug-location !1068; cg.c:565:6
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.36 ***
SU(0):   renamable $d1 = LDRDui $sp, 4, debug-location !1066 :: (dereferenceable load 8 from %ir.sum); cg.c:565:19
SU(1):   renamable $d0 = FSQRTDr renamable $d1, debug-location !1067; cg.c:565:14
SU(2):   FCMPDrr renamable $d0, renamable $d0, implicit-def $nzcv, debug-location !1068; cg.c:565:6

Fixup kills for %bb.36
Fixup kills for %bb.37
********** MI Scheduling **********
conj_grad:%bb.38 for.end170.split
  From: renamable $x8 = LDRXui $fp, 2, debug-location !1068 :: (dereferenceable load 8 from %ir.rnorm.addr, align 16); cg.c:565:6
    To: $sp = frame-destroy ADDXri $sp, 144, 0, debug-location !1070; cg.c:566:1
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRXui $fp, 2, debug-location !1068 :: (dereferenceable load 8 from %ir.rnorm.addr, align 16); cg.c:565:6
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=$x8
    SU(2): Anti Latency=0
    SU(1): Ord  Latency=0 Memory
SU(1):   STRDui renamable $d0, renamable $x8, 0, debug-location !1069 :: (store 8 into %ir.155); cg.c:565:12
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=$x8
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(2): Ord  Latency=1 Memory
SU(2):   $fp, $lr = frame-destroy LDPXi $sp, 16, debug-location !1070 :: (load 8 from %stack.20), (load 8 from %stack.19); cg.c:566:1
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(1): Ord  Latency=1 Memory
    SU(0): Anti Latency=0
  Successors:
    ExitSU: Ord  Latency=3 Artificial
ExitSU:   $sp = frame-destroy ADDXri $sp, 144, 0, debug-location !1070; cg.c:566:1
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
Critical Path: (PGS-RR) 8
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = LDRXui $fp, 2, debug-location !1068 :: (dereferenceable load 8 from %ir.rnorm.addr, align 16); cg.c:565:6
  Ready @0c
  TopQ.A BotLatency SU(0) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRDui renamable $d0, renamable $x8, 0, debug-location !1069 :: (store 8 into %ir.155); cg.c:565:12
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $fp, $lr = frame-destroy LDPXi $sp, 16, debug-location !1070 :: (load 8 from %stack.20), (load 8 from %stack.19); cg.c:566:1
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   renamable $x8 = LDRXui $fp, 2, debug-location !1068 :: (dereferenceable load 8 from %ir.rnorm.addr, align 16); cg.c:565:6
SU(1):   STRDui renamable $d0, renamable $x8, 0, debug-location !1069 :: (store 8 into %ir.155); cg.c:565:12
SU(2):   $fp, $lr = frame-destroy LDPXi $sp, 16, debug-location !1070 :: (load 8 from %stack.20), (load 8 from %stack.19); cg.c:566:1

Fixup kills for %bb.38
Before MISched:
# Machine code for function sprnvc: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=8, align=8, at location [SP]
  fi#4: size=8, align=8, at location [SP]
  fi#5: size=4, align=4, at location [SP]
  fi#6: size=4, align=4, at location [SP]
  fi#7: size=4, align=4, at location [SP]
  fi#8: size=8, align=8, at location [SP]
  fi#9: size=8, align=8, at location [SP]
  fi#10: size=4, align=4, at location [SP]
Function Live Ins: $w0 in %0, $w1 in %1, $w2 in %2, $x3 in %3, $x4 in %4

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $w0, $w1, $w2, $x3, $x4
  %4:gpr64 = COPY $x4
  %3:gpr64 = COPY $x3
  %2:gpr32 = COPY $w2
  %1:gpr32 = COPY $w1
  %0:gpr32 = COPY $w0
  STRWui %0:gpr32, %stack.0.n.addr, 0 :: (store 4 into %ir.n.addr)
  STRWui %1:gpr32, %stack.1.nz.addr, 0 :: (store 4 into %ir.nz.addr)
  STRWui %2:gpr32, %stack.2.nn1.addr, 0 :: (store 4 into %ir.nn1.addr)
  STRXui %3:gpr64, %stack.3.v.addr, 0 :: (store 8 into %ir.v.addr)
  STRXui %4:gpr64, %stack.4.iv.addr, 0 :: (store 8 into %ir.iv.addr)
  STRWui $wzr, %stack.5.nzv, 0, debug-location !1094 :: (store 4 into %ir.nzv); cg.c:809:9
  %9:gpr64common = ADRP target-flags(aarch64-page) @amult
  %11:gpr64 = MOVaddr target-flags(aarch64-page) @tran, target-flags(aarch64-pageoff, aarch64-nc) @tran
  %31:gpr32 = MOVi32imm 1

bb.1.while.cond:
; predecessors: %bb.0, %bb.2, %bb.8, %bb.9
  successors: %bb.2(0x7c000000), %bb.10(0x04000000); %bb.2(96.88%), %bb.10(3.12%)

  %6:gpr32 = LDRWui %stack.5.nzv, 0, debug-location !1096 :: (dereferenceable load 4 from %ir.nzv); cg.c:811:12
  %7:gpr32 = LDRWui %stack.1.nz.addr, 0, debug-location !1097 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:811:18
  dead $wzr = SUBSWrr %6:gpr32, %7:gpr32, implicit-def $nzcv, debug-location !1095; cg.c:811:5
  Bcc 10, %bb.10, implicit killed $nzcv, debug-location !1095; cg.c:811:5
  B %bb.2, debug-location !1095; cg.c:811:5

bb.2.while.body:
; predecessors: %bb.1
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  %10:fpr64 = LDRDui %9:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !1099 :: (dereferenceable load 8 from @amult); cg.c:812:32
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1101; cg.c:812:18
  $x0 = COPY %11:gpr64, debug-location !1101; cg.c:812:18
  $d0 = COPY %10:fpr64, debug-location !1101; cg.c:812:18
  BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $d0, implicit-def $sp, implicit-def $d0, debug-location !1101; cg.c:812:18
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1101; cg.c:812:18
  %12:fpr64 = COPY killed $d0, debug-location !1101; cg.c:812:18
  STRDui %12:fpr64, %stack.8.vecelt, 0, debug-location !1102 :: (store 8 into %ir.vecelt); cg.c:812:16
  %13:fpr64 = LDRDui %9:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !1103 :: (dereferenceable load 8 from @amult); cg.c:817:32
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1104; cg.c:817:18
  $x0 = COPY %11:gpr64, debug-location !1104; cg.c:817:18
  $d0 = COPY %13:fpr64, debug-location !1104; cg.c:817:18
  BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $d0, implicit-def $sp, implicit-def $d0, debug-location !1104; cg.c:817:18
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1104; cg.c:817:18
  %14:fpr64 = COPY killed $d0, debug-location !1104; cg.c:817:18
  STRDui %14:fpr64, %stack.9.vecloc, 0, debug-location !1105 :: (store 8 into %ir.vecloc); cg.c:817:16
  %15:gpr32 = LDRWui %stack.2.nn1.addr, 0, debug-location !1107 :: (dereferenceable load 4 from %ir.nn1.addr); cg.c:818:28
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1108; cg.c:818:13
  $d0 = COPY %14:fpr64, debug-location !1108; cg.c:818:13
  $w0 = COPY %15:gpr32, debug-location !1108; cg.c:818:13
  BL @icnvrt, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $d0, implicit $w0, implicit-def $sp, implicit-def $w0, debug-location !1108; cg.c:818:13
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1108; cg.c:818:13
  %16:gpr32sp = COPY $w0, debug-location !1108; cg.c:818:13
  %17:gpr32common = nsw ADDWri %16:gpr32sp, 1, 0, debug-location !1109; cg.c:818:33
  STRWui %17:gpr32common, %stack.7.i, 0, debug-location !1110 :: (store 4 into %ir.i); cg.c:818:11
  %18:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !1113 :: (dereferenceable load 4 from %ir.n.addr); cg.c:819:17
  dead $wzr = SUBSWrr %17:gpr32common, %18:gpr32, implicit-def $nzcv, debug-location !1115; cg.c:819:13
  Bcc 12, %bb.1, implicit killed $nzcv, debug-location !1115; cg.c:819:13
  B %bb.3, debug-location !1115; cg.c:819:13

bb.3.if.end:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  STRWui $wzr, %stack.10.was_gen, 0, debug-location !1117 :: (store 4 into %ir.was_gen); cg.c:825:17
  STRWui $wzr, %stack.6.ii, 0, debug-location !1118 :: (store 4 into %ir.ii); cg.c:826:17

bb.4.for.cond:
; predecessors: %bb.3, %bb.7
  successors: %bb.5(0x7c000000), %bb.8(0x04000000); %bb.5(96.88%), %bb.8(3.12%)

  %21:gpr32 = LDRWui %stack.6.ii, 0, debug-location !1121 :: (dereferenceable load 4 from %ir.ii); cg.c:826:22
  %22:gpr32 = LDRWui %stack.5.nzv, 0, debug-location !1123 :: (dereferenceable load 4 from %ir.nzv); cg.c:826:27
  dead $wzr = SUBSWrr %21:gpr32, %22:gpr32, implicit-def $nzcv, debug-location !1125; cg.c:826:9
  Bcc 10, %bb.8, implicit killed $nzcv, debug-location !1125; cg.c:826:9
  B %bb.5, debug-location !1125; cg.c:826:9

bb.5.for.body:
; predecessors: %bb.4
  successors: %bb.6(0x04000000), %bb.7(0x7c000000); %bb.6(3.12%), %bb.7(96.88%)

  %24:gpr64common = LDRXui %stack.4.iv.addr, 0, debug-location !1126 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:827:17
  %25:gpr64 = LDRSWui %stack.6.ii, 0, debug-location !1129 :: (dereferenceable load 4 from %ir.ii); cg.c:827:20
  %26:gpr32 = LDRWroX %24:gpr64common, %25:gpr64, 0, 1, debug-location !1126 :: (load 4 from %ir.arrayidx); cg.c:827:17
  %27:gpr32 = LDRWui %stack.7.i, 0, debug-location !1130 :: (dereferenceable load 4 from %ir.i); cg.c:827:27
  dead $wzr = SUBSWrr %26:gpr32, %27:gpr32, implicit-def $nzcv, debug-location !1132; cg.c:827:17
  Bcc 1, %bb.7, implicit killed $nzcv, debug-location !1132; cg.c:827:17
  B %bb.6, debug-location !1132; cg.c:827:17

bb.6.if.then6:
; predecessors: %bb.5
  successors: %bb.8(0x80000000); %bb.8(100.00%)

  STRWui %31:gpr32, %stack.10.was_gen, 0, debug-location !1133 :: (store 4 into %ir.was_gen); cg.c:828:25
  B %bb.8, debug-location !1135; cg.c:829:17

bb.7.for.inc:
; predecessors: %bb.5
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %29:gpr32common = LDRWui %stack.6.ii, 0, debug-location !1136 :: (dereferenceable load 4 from %ir.ii); cg.c:826:34
  %30:gpr32common = nsw ADDWri %29:gpr32common, 1, 0, debug-location !1136; cg.c:826:34
  STRWui %30:gpr32common, %stack.6.ii, 0, debug-location !1136 :: (store 4 into %ir.ii); cg.c:826:34
  B %bb.4, debug-location !1137; cg.c:826:9

bb.8.for.end:
; predecessors: %bb.4, %bb.6
  successors: %bb.1(0x40000000), %bb.9(0x40000000); %bb.1(50.00%), %bb.9(50.00%)

  %32:gpr32 = LDRWui %stack.10.was_gen, 0, debug-location !1140 :: (dereferenceable load 4 from %ir.was_gen); cg.c:832:13
  CBNZW %32:gpr32, %bb.1, debug-location !1142; cg.c:832:13
  B %bb.9, debug-location !1142; cg.c:832:13

bb.9.if.end9:
; predecessors: %bb.8
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %33:fpr64 = LDRDui %stack.8.vecelt, 0, debug-location !1143 :: (dereferenceable load 8 from %ir.vecelt); cg.c:834:18
  %34:gpr64common = LDRXui %stack.3.v.addr, 0, debug-location !1144 :: (dereferenceable load 8 from %ir.v.addr); cg.c:834:9
  %35:gpr64 = LDRSWui %stack.5.nzv, 0, debug-location !1145 :: (dereferenceable load 4 from %ir.nzv); cg.c:834:11
  STRDroX %33:fpr64, %34:gpr64common, %35:gpr64, 0, 1, debug-location !1146 :: (store 8 into %ir.arrayidx11); cg.c:834:16
  %36:gpr32 = LDRWui %stack.7.i, 0, debug-location !1147 :: (dereferenceable load 4 from %ir.i); cg.c:835:19
  %37:gpr64common = LDRXui %stack.4.iv.addr, 0, debug-location !1148 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:835:9
  %38:gpr64 = LDRSWui %stack.5.nzv, 0, debug-location !1149 :: (dereferenceable load 4 from %ir.nzv); cg.c:835:12
  STRWroX %36:gpr32, %37:gpr64common, %38:gpr64, 0, 1, debug-location !1150 :: (store 4 into %ir.arrayidx13); cg.c:835:17
  %39:gpr32common = LDRWui %stack.5.nzv, 0, debug-location !1151 :: (dereferenceable load 4 from %ir.nzv); cg.c:836:15
  %40:gpr32common = nsw ADDWri %39:gpr32common, 1, 0, debug-location !1152; cg.c:836:19
  STRWui %40:gpr32common, %stack.5.nzv, 0, debug-location !1153 :: (store 4 into %ir.nzv); cg.c:836:13
  B %bb.1, debug-location !1095; cg.c:811:5

bb.10.while.end:
; predecessors: %bb.1

  RET_ReallyLR debug-location !1154; cg.c:838:1

# End machine code for function sprnvc.

********** MI Scheduling **********
sprnvc:%bb.0 entry
  From: %4:gpr64 = COPY $x4
    To: End RegionInstrs: 14
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %4:gpr64 = COPY $x4
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(9): Data Latency=0 Reg=%4
  Single Issue       : false;
SU(1):   %3:gpr64 = COPY $x3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(8): Data Latency=0 Reg=%3
  Single Issue       : false;
SU(2):   %2:gpr32 = COPY $w2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(7): Data Latency=0 Reg=%2
  Single Issue       : false;
SU(3):   %1:gpr32 = COPY $w1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(6): Data Latency=0 Reg=%1
  Single Issue       : false;
SU(4):   %0:gpr32 = COPY $w0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(5): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(5):   STRWui %0:gpr32, %stack.0.n.addr, 0 :: (store 4 into %ir.n.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(4): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(6):   STRWui %1:gpr32, %stack.1.nz.addr, 0 :: (store 4 into %ir.nz.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Data Latency=0 Reg=%1
  Single Issue       : false;
SU(7):   STRWui %2:gpr32, %stack.2.nn1.addr, 0 :: (store 4 into %ir.nn1.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Data Latency=0 Reg=%2
  Single Issue       : false;
SU(8):   STRXui %3:gpr64, %stack.3.v.addr, 0 :: (store 8 into %ir.v.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%3
  Single Issue       : false;
SU(9):   STRXui %4:gpr64, %stack.4.iv.addr, 0 :: (store 8 into %ir.iv.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%4
  Single Issue       : false;
SU(10):   STRWui $wzr, %stack.5.nzv, 0, debug-location !1094 :: (store 4 into %ir.nzv); cg.c:809:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(11):   %9:gpr64common = ADRP target-flags(aarch64-page) @amult
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(12):   %11:gpr64 = MOVaddr target-flags(aarch64-page) @tran, target-flags(aarch64-pageoff, aarch64-nc) @tran
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(13):   %31:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 12 11 10 9 8 7 6 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 10 11 12 13 
Picking from Bot:
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %4:gpr64 = COPY $x4
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 12 11 10 9 8 7 6 5 
Queue TopQ.P: 
Queue TopQ.A: 13 1 2 3 4 10 11 12 9 
Picking from Bot:
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(13) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(1) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(1) %3:gpr64 = COPY $x3
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 12 11 10 9 8 7 6 5 
Queue TopQ.P: 
Queue TopQ.A: 13 9 2 3 4 10 11 12 8 
Picking from Bot:
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(13) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(2) PHYS-REG                           
  Cand SU(2) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(2) %2:gpr32 = COPY $w2
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 12 11 10 9 8 7 6 5 
Queue TopQ.P: 
Queue TopQ.A: 13 9 8 3 4 10 11 12 7 
Picking from Bot:
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(13) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(3) PHYS-REG                           
  Cand SU(3) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(3) %1:gpr32 = COPY $w1
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 12 11 10 9 8 7 6 5 
Queue TopQ.P: 
Queue TopQ.A: 13 9 8 7 4 10 11 12 6 
Picking from Bot:
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(13) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(4) PHYS-REG                           
  Cand SU(4) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(4) %0:gpr32 = COPY $w0
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 12 11 10 9 8 7 6 5 
Queue TopQ.P: 
Queue TopQ.A: 13 9 8 7 6 10 11 12 5 
Picking from Bot:
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(13) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) %31:gpr32 = MOVi32imm 1
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 12 11 10 9 8 7 6 
Queue TopQ.P: 
Queue TopQ.A: 5 9 8 7 6 10 11 12 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(5) NOCAND                             
Pick Bot ORDER     
Scheduling SU(12) %11:gpr64 = MOVaddr target-flags(aarch64-page) @tran, target-flags(aarch64-pageoff, aarch64-nc) @tran
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 11 10 9 8 7 
Queue TopQ.P: 
Queue TopQ.A: 5 9 8 7 6 10 11 
  BotQ.A RemainingLatency 0 + 2c > CritPath 0
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(5) NOCAND                             
Pick Bot ORDER     
Scheduling SU(11) %9:gpr64common = ADRP target-flags(aarch64-page) @amult
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 7 10 9 8 
Queue TopQ.P: 
Queue TopQ.A: 5 9 8 7 6 10 
  BotQ.A RemainingLatency 0 + 3c > CritPath 0
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(5) NOCAND                             
Pick Bot ORDER     
Scheduling SU(10) STRWui $wzr, %stack.5.nzv, 0, debug-location !1094 :: (store 4 into %ir.nzv); cg.c:809:9
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 7 8 9 
Queue TopQ.P: 
Queue TopQ.A: 5 9 8 7 6 
  BotQ.A RemainingLatency 0 + 4c > CritPath 0
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(5) NOCAND                             
Pick Bot ORDER     
Scheduling SU(9) STRXui %4:gpr64, %stack.4.iv.addr, 0 :: (store 8 into %ir.iv.addr)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 7 8 
Queue TopQ.P: 
Queue TopQ.A: 5 6 8 7 
  BotQ.A RemainingLatency 0 + 5c > CritPath 0
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(5) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) STRXui %3:gpr64, %stack.3.v.addr, 0 :: (store 8 into %ir.v.addr)
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 7 
Queue TopQ.P: 
Queue TopQ.A: 5 6 7 
  BotQ.A RemainingLatency 0 + 6c > CritPath 0
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(5) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) STRWui %2:gpr32, %stack.2.nn1.addr, 0 :: (store 4 into %ir.nn1.addr)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 
Queue TopQ.P: 
Queue TopQ.A: 5 6 
  BotQ.A RemainingLatency 0 + 7c > CritPath 0
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(5) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) STRWui %1:gpr32, %stack.1.nz.addr, 0 :: (store 4 into %ir.nz.addr)
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) STRWui %0:gpr32, %stack.0.n.addr, 0 :: (store 4 into %ir.n.addr)
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %4:gpr64 = COPY $x4
SU(1):   %3:gpr64 = COPY $x3
SU(2):   %2:gpr32 = COPY $w2
SU(3):   %1:gpr32 = COPY $w1
SU(4):   %0:gpr32 = COPY $w0
SU(5):   STRWui %0:gpr32, %stack.0.n.addr, 0 :: (store 4 into %ir.n.addr)
SU(6):   STRWui %1:gpr32, %stack.1.nz.addr, 0 :: (store 4 into %ir.nz.addr)
SU(7):   STRWui %2:gpr32, %stack.2.nn1.addr, 0 :: (store 4 into %ir.nn1.addr)
SU(8):   STRXui %3:gpr64, %stack.3.v.addr, 0 :: (store 8 into %ir.v.addr)
SU(9):   STRXui %4:gpr64, %stack.4.iv.addr, 0 :: (store 8 into %ir.iv.addr)
SU(10):   STRWui $wzr, %stack.5.nzv, 0, debug-location !1094 :: (store 4 into %ir.nzv); cg.c:809:9
SU(11):   %9:gpr64common = ADRP target-flags(aarch64-page) @amult
SU(12):   %11:gpr64 = MOVaddr target-flags(aarch64-page) @tran, target-flags(aarch64-pageoff, aarch64-nc) @tran
SU(13):   %31:gpr32 = MOVi32imm 1

********** MI Scheduling **********
sprnvc:%bb.1 while.cond
  From: %6:gpr32 = LDRWui %stack.5.nzv, 0, debug-location !1096 :: (dereferenceable load 4 from %ir.nzv); cg.c:811:12
    To: Bcc 10, %bb.10, implicit killed $nzcv, debug-location !1095; cg.c:811:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %6:gpr32 = LDRWui %stack.5.nzv, 0, debug-location !1096 :: (dereferenceable load 4 from %ir.nzv); cg.c:811:12
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%6
  Single Issue       : false;
SU(1):   %7:gpr32 = LDRWui %stack.1.nz.addr, 0, debug-location !1097 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:811:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%7
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %6:gpr32, %7:gpr32, implicit-def $nzcv, debug-location !1095; cg.c:811:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%7
    SU(0): Data Latency=4 Reg=%6
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.10, implicit killed $nzcv, debug-location !1095; cg.c:811:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %6:gpr32, %7:gpr32, implicit-def $nzcv, debug-location !1095; cg.c:811:5
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %7:gpr32 = LDRWui %stack.1.nz.addr, 0, debug-location !1097 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:811:18
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %6:gpr32 = LDRWui %stack.5.nzv, 0, debug-location !1096 :: (dereferenceable load 4 from %ir.nzv); cg.c:811:12
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   %6:gpr32 = LDRWui %stack.5.nzv, 0, debug-location !1096 :: (dereferenceable load 4 from %ir.nzv); cg.c:811:12
SU(1):   %7:gpr32 = LDRWui %stack.1.nz.addr, 0, debug-location !1097 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:811:18
SU(2):   dead $wzr = SUBSWrr %6:gpr32, %7:gpr32, implicit-def $nzcv, debug-location !1095; cg.c:811:5

********** MI Scheduling **********
sprnvc:%bb.2 while.body
  From: %16:gpr32sp = COPY $w0, debug-location !1108; cg.c:818:13
    To: Bcc 12, %bb.1, implicit killed $nzcv, debug-location !1115; cg.c:819:13
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %16:gpr32sp = COPY $w0, debug-location !1108; cg.c:818:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Data Latency=0 Reg=%16
  Single Issue       : false;
SU(1):   %17:gpr32common = nsw ADDWri %16:gpr32sp, 1, 0, debug-location !1109; cg.c:818:33
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Predecessors:
    SU(0): Data Latency=0 Reg=%16
  Successors:
    SU(4): Data Latency=1 Reg=%17
    SU(2): Data Latency=1 Reg=%17
  Single Issue       : false;
SU(2):   STRWui %17:gpr32common, %stack.7.i, 0, debug-location !1110 :: (store 4 into %ir.i); cg.c:818:11
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%17
  Single Issue       : false;
SU(3):   %18:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !1113 :: (dereferenceable load 4 from %ir.n.addr); cg.c:819:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=%18
  Single Issue       : false;
SU(4):   dead $wzr = SUBSWrr %17:gpr32common, %18:gpr32, implicit-def $nzcv, debug-location !1115; cg.c:819:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%18
    SU(1): Data Latency=1 Reg=%17
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.1, implicit killed $nzcv, debug-location !1115; cg.c:819:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %17:gpr32common, %stack.7.i, 0, debug-location !1110 :: (store 4 into %ir.i); cg.c:818:11
  Ready @0c
  BotQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) dead $wzr = SUBSWrr %17:gpr32common, %18:gpr32, implicit-def $nzcv, debug-location !1115; cg.c:819:13
  Ready @1c
  BotQ.A TopLatency SU(4) 4c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %17:gpr32common = nsw ADDWri %16:gpr32sp, 1, 0, debug-location !1109; cg.c:818:33
  Ready @2c
  BotQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %16:gpr32sp = COPY $w0, debug-location !1108; cg.c:818:13
  Ready @3c
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 4 BotQ.A
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %18:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !1113 :: (dereferenceable load 4 from %ir.n.addr); cg.c:819:17
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(3):   %18:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !1113 :: (dereferenceable load 4 from %ir.n.addr); cg.c:819:17
SU(0):   %16:gpr32sp = COPY $w0, debug-location !1108; cg.c:818:13
SU(1):   %17:gpr32common = nsw ADDWri %16:gpr32sp, 1, 0, debug-location !1109; cg.c:818:33
SU(4):   dead $wzr = SUBSWrr %17:gpr32common, %18:gpr32, implicit-def $nzcv, debug-location !1115; cg.c:819:13
SU(2):   STRWui %17:gpr32common, %stack.7.i, 0, debug-location !1110 :: (store 4 into %ir.i); cg.c:818:11

********** MI Scheduling **********
sprnvc:%bb.2 while.body
  From: $d0 = COPY %14:fpr64, debug-location !1108; cg.c:818:13
    To: BL @icnvrt, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $d0, implicit $w0, implicit-def $sp, implicit-def $w0, debug-location !1108; cg.c:818:13
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $d0 = COPY %14:fpr64, debug-location !1108; cg.c:818:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $w0 = COPY %15:gpr32, debug-location !1108; cg.c:818:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @icnvrt, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $d0, implicit $w0, implicit-def $sp, implicit-def $w0, debug-location !1108; cg.c:818:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) $w0 = COPY %15:gpr32, debug-location !1108; cg.c:818:13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $d0 = COPY %14:fpr64, debug-location !1108; cg.c:818:13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   $d0 = COPY %14:fpr64, debug-location !1108; cg.c:818:13
SU(1):   $w0 = COPY %15:gpr32, debug-location !1108; cg.c:818:13

********** MI Scheduling **********
sprnvc:%bb.2 while.body
  From: %14:fpr64 = COPY killed $d0, debug-location !1104; cg.c:817:18
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1108; cg.c:818:13
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %14:fpr64 = COPY killed $d0, debug-location !1104; cg.c:817:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%14
  Single Issue       : false;
SU(1):   STRDui %14:fpr64, %stack.9.vecloc, 0, debug-location !1105 :: (store 8 into %ir.vecloc); cg.c:817:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%14
  Single Issue       : false;
SU(2):   %15:gpr32 = LDRWui %stack.2.nn1.addr, 0, debug-location !1107 :: (dereferenceable load 4 from %ir.nn1.addr); cg.c:818:28
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1108; cg.c:818:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %14:fpr64, %stack.9.vecloc, 0, debug-location !1105 :: (store 8 into %ir.vecloc); cg.c:817:16
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %14:fpr64 = COPY killed $d0, debug-location !1104; cg.c:817:18
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 2 BotQ.A
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %15:gpr32 = LDRWui %stack.2.nn1.addr, 0, debug-location !1107 :: (dereferenceable load 4 from %ir.nn1.addr); cg.c:818:28
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 2
  Executed: 4c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(2):   %15:gpr32 = LDRWui %stack.2.nn1.addr, 0, debug-location !1107 :: (dereferenceable load 4 from %ir.nn1.addr); cg.c:818:28
SU(0):   %14:fpr64 = COPY $d0, debug-location !1104; cg.c:817:18
SU(1):   STRDui %14:fpr64, %stack.9.vecloc, 0, debug-location !1105 :: (store 8 into %ir.vecloc); cg.c:817:16

********** MI Scheduling **********
sprnvc:%bb.2 while.body
  From: $x0 = COPY %11:gpr64, debug-location !1104; cg.c:817:18
    To: BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !1104; cg.c:817:18
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %11:gpr64, debug-location !1104; cg.c:817:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $d0 = COPY %13:fpr64, debug-location !1104; cg.c:817:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !1104; cg.c:817:18
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) $d0 = COPY %13:fpr64, debug-location !1104; cg.c:817:18
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %11:gpr64, debug-location !1104; cg.c:817:18
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   $x0 = COPY %11:gpr64, debug-location !1104; cg.c:817:18
SU(1):   $d0 = COPY %13:fpr64, debug-location !1104; cg.c:817:18

********** MI Scheduling **********
sprnvc:%bb.2 while.body
  From: %12:fpr64 = COPY $d0, debug-location !1101; cg.c:812:18
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1104; cg.c:817:18
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %12:fpr64 = COPY $d0, debug-location !1101; cg.c:812:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%12
  Single Issue       : false;
SU(1):   STRDui %12:fpr64, %stack.8.vecelt, 0, debug-location !1102 :: (store 8 into %ir.vecelt); cg.c:812:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%12
  Single Issue       : false;
SU(2):   %13:fpr64 = LDRDui %9:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !1103 :: (dereferenceable load 8 from @amult); cg.c:817:32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1104; cg.c:817:18
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %12:fpr64, %stack.8.vecelt, 0, debug-location !1102 :: (store 8 into %ir.vecelt); cg.c:812:16
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %12:fpr64 = COPY $d0, debug-location !1101; cg.c:812:18
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 2 BotQ.A
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %13:fpr64 = LDRDui %9:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !1103 :: (dereferenceable load 8 from @amult); cg.c:817:32
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 2
  Executed: 4c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(2):   %13:fpr64 = LDRDui %9:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !1103 :: (dereferenceable load 8 from @amult); cg.c:817:32
SU(0):   %12:fpr64 = COPY $d0, debug-location !1101; cg.c:812:18
SU(1):   STRDui %12:fpr64, %stack.8.vecelt, 0, debug-location !1102 :: (store 8 into %ir.vecelt); cg.c:812:16

********** MI Scheduling **********
sprnvc:%bb.2 while.body
  From: $x0 = COPY %11:gpr64, debug-location !1101; cg.c:812:18
    To: BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !1101; cg.c:812:18
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %11:gpr64, debug-location !1101; cg.c:812:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $d0 = COPY %10:fpr64, debug-location !1101; cg.c:812:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !1101; cg.c:812:18
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) $d0 = COPY %10:fpr64, debug-location !1101; cg.c:812:18
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %11:gpr64, debug-location !1101; cg.c:812:18
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   $x0 = COPY %11:gpr64, debug-location !1101; cg.c:812:18
SU(1):   $d0 = COPY %10:fpr64, debug-location !1101; cg.c:812:18

********** MI Scheduling **********
sprnvc:%bb.3 if.end
  From: STRWui $wzr, %stack.10.was_gen, 0, debug-location !1117 :: (store 4 into %ir.was_gen); cg.c:825:17
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui $wzr, %stack.10.was_gen, 0, debug-location !1117 :: (store 4 into %ir.was_gen); cg.c:825:17
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   STRWui $wzr, %stack.6.ii, 0, debug-location !1118 :: (store 4 into %ir.ii); cg.c:826:17
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) STRWui $wzr, %stack.6.ii, 0, debug-location !1118 :: (store 4 into %ir.ii); cg.c:826:17
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.10.was_gen, 0, debug-location !1117 :: (store 4 into %ir.was_gen); cg.c:825:17
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   STRWui $wzr, %stack.10.was_gen, 0, debug-location !1117 :: (store 4 into %ir.was_gen); cg.c:825:17
SU(1):   STRWui $wzr, %stack.6.ii, 0, debug-location !1118 :: (store 4 into %ir.ii); cg.c:826:17

********** MI Scheduling **********
sprnvc:%bb.4 for.cond
  From: %21:gpr32 = LDRWui %stack.6.ii, 0, debug-location !1121 :: (dereferenceable load 4 from %ir.ii); cg.c:826:22
    To: Bcc 10, %bb.8, implicit killed $nzcv, debug-location !1125; cg.c:826:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %21:gpr32 = LDRWui %stack.6.ii, 0, debug-location !1121 :: (dereferenceable load 4 from %ir.ii); cg.c:826:22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%21
  Single Issue       : false;
SU(1):   %22:gpr32 = LDRWui %stack.5.nzv, 0, debug-location !1123 :: (dereferenceable load 4 from %ir.nzv); cg.c:826:27
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%22
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %21:gpr32, %22:gpr32, implicit-def $nzcv, debug-location !1125; cg.c:826:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%22
    SU(0): Data Latency=4 Reg=%21
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.8, implicit killed $nzcv, debug-location !1125; cg.c:826:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %21:gpr32, %22:gpr32, implicit-def $nzcv, debug-location !1125; cg.c:826:9
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %22:gpr32 = LDRWui %stack.5.nzv, 0, debug-location !1123 :: (dereferenceable load 4 from %ir.nzv); cg.c:826:27
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %21:gpr32 = LDRWui %stack.6.ii, 0, debug-location !1121 :: (dereferenceable load 4 from %ir.ii); cg.c:826:22
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %21:gpr32 = LDRWui %stack.6.ii, 0, debug-location !1121 :: (dereferenceable load 4 from %ir.ii); cg.c:826:22
SU(1):   %22:gpr32 = LDRWui %stack.5.nzv, 0, debug-location !1123 :: (dereferenceable load 4 from %ir.nzv); cg.c:826:27
SU(2):   dead $wzr = SUBSWrr %21:gpr32, %22:gpr32, implicit-def $nzcv, debug-location !1125; cg.c:826:9

********** MI Scheduling **********
sprnvc:%bb.5 for.body
  From: %24:gpr64common = LDRXui %stack.4.iv.addr, 0, debug-location !1126 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:827:17
    To: Bcc 1, %bb.7, implicit killed $nzcv, debug-location !1132; cg.c:827:17
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %24:gpr64common = LDRXui %stack.4.iv.addr, 0, debug-location !1126 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:827:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Data Latency=4 Reg=%24
  Single Issue       : false;
SU(1):   %25:gpr64 = LDRSWui %stack.6.ii, 0, debug-location !1129 :: (dereferenceable load 4 from %ir.ii); cg.c:827:20
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Data Latency=4 Reg=%25
  Single Issue       : false;
SU(2):   %26:gpr32 = LDRWroX %24:gpr64common, %25:gpr64, 0, 1, debug-location !1126 :: (load 4 from %ir.arrayidx); cg.c:827:17
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%25
    SU(0): Data Latency=4 Reg=%24
  Successors:
    SU(4): Data Latency=4 Reg=%26
  Single Issue       : false;
SU(3):   %27:gpr32 = LDRWui %stack.7.i, 0, debug-location !1130 :: (dereferenceable load 4 from %ir.i); cg.c:827:27
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=%27
  Single Issue       : false;
SU(4):   dead $wzr = SUBSWrr %26:gpr32, %27:gpr32, implicit-def $nzcv, debug-location !1132; cg.c:827:17
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=%26
    SU(3): Data Latency=4 Reg=%27
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.7, implicit killed $nzcv, debug-location !1132; cg.c:827:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) dead $wzr = SUBSWrr %26:gpr32, %27:gpr32, implicit-def $nzcv, debug-location !1132; cg.c:827:17
  Ready @1c
  BotQ.A TopLatency SU(4) 8c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
BotQ.A RemLatency SU(2) 4c
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %27:gpr32 = LDRWui %stack.7.i, 0, debug-location !1130 :: (dereferenceable load 4 from %ir.i); cg.c:827:27
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %26:gpr32 = LDRWroX %24:gpr64common, %25:gpr64, 0, 1, debug-location !1126 :: (load 4 from %ir.arrayidx); cg.c:827:17
  Ready @6c
  BotQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 10c > CritPath 9
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %25:gpr64 = LDRSWui %stack.6.ii, 0, debug-location !1129 :: (dereferenceable load 4 from %ir.ii); cg.c:827:20
  Ready @10c
  BotQ.A BotLatency SU(1) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 4
  Executed: 11c
  Critical: 4c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %24:gpr64common = LDRXui %stack.4.iv.addr, 0, debug-location !1126 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:827:17
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 5
  Executed: 12c
  Critical: 5c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %24:gpr64common = LDRXui %stack.4.iv.addr, 0, debug-location !1126 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:827:17
SU(1):   %25:gpr64 = LDRSWui %stack.6.ii, 0, debug-location !1129 :: (dereferenceable load 4 from %ir.ii); cg.c:827:20
SU(2):   %26:gpr32 = LDRWroX %24:gpr64common, %25:gpr64, 0, 1, debug-location !1126 :: (load 4 from %ir.arrayidx); cg.c:827:17
SU(3):   %27:gpr32 = LDRWui %stack.7.i, 0, debug-location !1130 :: (dereferenceable load 4 from %ir.i); cg.c:827:27
SU(4):   dead $wzr = SUBSWrr %26:gpr32, %27:gpr32, implicit-def $nzcv, debug-location !1132; cg.c:827:17

********** MI Scheduling **********
sprnvc:%bb.7 for.inc
  From: %29:gpr32common = LDRWui %stack.6.ii, 0, debug-location !1136 :: (dereferenceable load 4 from %ir.ii); cg.c:826:34
    To: B %bb.4, debug-location !1137; cg.c:826:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %29:gpr32common = LDRWui %stack.6.ii, 0, debug-location !1136 :: (dereferenceable load 4 from %ir.ii); cg.c:826:34
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%29
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %30:gpr32common = nsw ADDWri %29:gpr32common, 1, 0, debug-location !1136; cg.c:826:34
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%29
  Successors:
    SU(2): Data Latency=1 Reg=%30
  Single Issue       : false;
SU(2):   STRWui %30:gpr32common, %stack.6.ii, 0, debug-location !1136 :: (store 4 into %ir.ii); cg.c:826:34
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%30
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.4, debug-location !1137; cg.c:826:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %30:gpr32common, %stack.6.ii, 0, debug-location !1136 :: (store 4 into %ir.ii); cg.c:826:34
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %30:gpr32common = nsw ADDWri %29:gpr32common, 1, 0, debug-location !1136; cg.c:826:34
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %29:gpr32common = LDRWui %stack.6.ii, 0, debug-location !1136 :: (dereferenceable load 4 from %ir.ii); cg.c:826:34
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %29:gpr32common = LDRWui %stack.6.ii, 0, debug-location !1136 :: (dereferenceable load 4 from %ir.ii); cg.c:826:34
SU(1):   %30:gpr32common = nsw ADDWri %29:gpr32common, 1, 0, debug-location !1136; cg.c:826:34
SU(2):   STRWui %30:gpr32common, %stack.6.ii, 0, debug-location !1136 :: (store 4 into %ir.ii); cg.c:826:34

********** MI Scheduling **********
sprnvc:%bb.9 if.end9
  From: %33:fpr64 = LDRDui %stack.8.vecelt, 0, debug-location !1143 :: (dereferenceable load 8 from %ir.vecelt); cg.c:834:18
    To: B %bb.1, debug-location !1095; cg.c:811:5
 RegionInstrs: 11
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %33:fpr64 = LDRDui %stack.8.vecelt, 0, debug-location !1143 :: (dereferenceable load 8 from %ir.vecelt); cg.c:834:18
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(3): Data Latency=4 Reg=%33
    SU(7): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %34:gpr64common = LDRXui %stack.3.v.addr, 0, debug-location !1144 :: (dereferenceable load 8 from %ir.v.addr); cg.c:834:9
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(3): Data Latency=4 Reg=%34
    SU(7): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %35:gpr64 = LDRSWui %stack.5.nzv, 0, debug-location !1145 :: (dereferenceable load 4 from %ir.nzv); cg.c:834:11
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(3): Data Latency=4 Reg=%35
    SU(10): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   STRDroX %33:fpr64, %34:gpr64common, %35:gpr64, 0, 1, debug-location !1146 :: (store 8 into %ir.arrayidx11); cg.c:834:16
  # preds left       : 6
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(2): Data Latency=4 Reg=%35
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%34
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%33
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(10): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(8): Ord  Latency=1 Memory
    SU(6): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
    SU(4): Ord  Latency=1 Memory
  Single Issue       : false;
SU(4):   %36:gpr32 = LDRWui %stack.7.i, 0, debug-location !1147 :: (dereferenceable load 4 from %ir.i); cg.c:835:19
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(7): Data Latency=4 Reg=%36
    SU(7): Ord  Latency=0 Memory
  Single Issue       : false;
SU(5):   %37:gpr64common = LDRXui %stack.4.iv.addr, 0, debug-location !1148 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:835:9
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(7): Data Latency=4 Reg=%37
    SU(7): Ord  Latency=0 Memory
  Single Issue       : false;
SU(6):   %38:gpr64 = LDRSWui %stack.5.nzv, 0, debug-location !1149 :: (dereferenceable load 4 from %ir.nzv); cg.c:835:12
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(7): Data Latency=4 Reg=%38
    SU(10): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Single Issue       : false;
SU(7):   STRWroX %36:gpr32, %37:gpr64common, %38:gpr64, 0, 1, debug-location !1150 :: (store 4 into %ir.arrayidx13); cg.c:835:17
  # preds left       : 10
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 6
  Predecessors:
    SU(6): Data Latency=4 Reg=%38
    SU(6): Ord  Latency=0 Memory
    SU(5): Data Latency=4 Reg=%37
    SU(5): Ord  Latency=0 Memory
    SU(4): Data Latency=4 Reg=%36
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(10): Ord  Latency=0 Memory
    SU(8): Ord  Latency=1 Memory
  Single Issue       : false;
SU(8):   %39:gpr32common = LDRWui %stack.5.nzv, 0, debug-location !1151 :: (dereferenceable load 4 from %ir.nzv); cg.c:836:15
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 5
  Predecessors:
    SU(7): Ord  Latency=1 Memory
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(9): Data Latency=4 Reg=%39
    SU(10): Ord  Latency=0 Memory
  Single Issue       : false;
SU(9):   %40:gpr32common = nsw ADDWri %39:gpr32common, 1, 0, debug-location !1152; cg.c:836:19
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 1
  Predecessors:
    SU(8): Data Latency=4 Reg=%39
  Successors:
    SU(10): Data Latency=1 Reg=%40
  Single Issue       : false;
SU(10):   STRWui %40:gpr32common, %stack.5.nzv, 0, debug-location !1153 :: (store 4 into %ir.nzv); cg.c:836:13
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=%40
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.1, debug-location !1095; cg.c:811:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 15
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 
Pick Bot ONLY1     
Scheduling SU(10) STRWui %40:gpr32common, %stack.5.nzv, 0, debug-location !1153 :: (store 4 into %ir.nzv); cg.c:836:13
  Ready @0c
  BotQ.A TopLatency SU(10) 15c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Pick Bot ONLY1     
Scheduling SU(9) %40:gpr32common = nsw ADDWri %39:gpr32common, 1, 0, debug-location !1152; cg.c:836:19
  Ready @1c
  BotQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 8 
Pick Bot ONLY1     
Scheduling SU(8) %39:gpr32common = LDRWui %stack.5.nzv, 0, debug-location !1151 :: (dereferenceable load 4 from %ir.nzv); cg.c:836:15
  Ready @5c
  BotQ.A BotLatency SU(8) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) STRWroX %36:gpr32, %37:gpr64common, %38:gpr64, 0, 1, debug-location !1150 :: (store 4 into %ir.arrayidx13); cg.c:835:17
  Ready @6c
  BotQ.A BotLatency SU(7) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 6 4 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
BotQ.A RemLatency SU(6) 5c
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %38:gpr64 = LDRSWui %stack.5.nzv, 0, debug-location !1149 :: (dereferenceable load 4 from %ir.nzv); cg.c:835:12
  Ready @10c
  BotQ.A BotLatency SU(6) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
BotQ.A RemLatency SU(5) 5c
  BotQ.A RemainingLatency 5 + 11c > CritPath 15
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %37:gpr64common = LDRXui %stack.4.iv.addr, 0, debug-location !1148 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:835:9
  Ready @11c
  BotQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %36:gpr32 = LDRWui %stack.7.i, 0, debug-location !1147 :: (dereferenceable load 4 from %ir.i); cg.c:835:19
  Ready @12c
  BotQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 7
  Executed: 13c
  Critical: 7c, 7 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) STRDroX %33:fpr64, %34:gpr64common, %35:gpr64, 0, 1, debug-location !1146 :: (store 8 into %ir.arrayidx11); cg.c:834:16
  Ready @13c
  BotQ.A BotLatency SU(3) 11c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 8
  Executed: 14c
  Critical: 8c, 8 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 17 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  BotQ.A RemainingLatency 0 + 17c > CritPath 15
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %35:gpr64 = LDRSWui %stack.5.nzv, 0, debug-location !1145 :: (dereferenceable load 4 from %ir.nzv); cg.c:834:11
  Ready @17c
  BotQ.A BotLatency SU(2) 15c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 9
  Executed: 18c
  Critical: 9c, 9 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 18c > CritPath 15
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %34:gpr64common = LDRXui %stack.3.v.addr, 0, debug-location !1144 :: (dereferenceable load 8 from %ir.v.addr); cg.c:834:9
  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 10
  Executed: 19c
  Critical: 10c, 10 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %33:fpr64 = LDRDui %stack.8.vecelt, 0, debug-location !1143 :: (dereferenceable load 8 from %ir.vecelt); cg.c:834:18
  Ready @19c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 11
  Executed: 20c
  Critical: 11c, 11 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   %33:fpr64 = LDRDui %stack.8.vecelt, 0, debug-location !1143 :: (dereferenceable load 8 from %ir.vecelt); cg.c:834:18
SU(1):   %34:gpr64common = LDRXui %stack.3.v.addr, 0, debug-location !1144 :: (dereferenceable load 8 from %ir.v.addr); cg.c:834:9
SU(2):   %35:gpr64 = LDRSWui %stack.5.nzv, 0, debug-location !1145 :: (dereferenceable load 4 from %ir.nzv); cg.c:834:11
SU(3):   STRDroX %33:fpr64, %34:gpr64common, %35:gpr64, 0, 1, debug-location !1146 :: (store 8 into %ir.arrayidx11); cg.c:834:16
SU(4):   %36:gpr32 = LDRWui %stack.7.i, 0, debug-location !1147 :: (dereferenceable load 4 from %ir.i); cg.c:835:19
SU(5):   %37:gpr64common = LDRXui %stack.4.iv.addr, 0, debug-location !1148 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:835:9
SU(6):   %38:gpr64 = LDRSWui %stack.5.nzv, 0, debug-location !1149 :: (dereferenceable load 4 from %ir.nzv); cg.c:835:12
SU(7):   STRWroX %36:gpr32, %37:gpr64common, %38:gpr64, 0, 1, debug-location !1150 :: (store 4 into %ir.arrayidx13); cg.c:835:17
SU(8):   %39:gpr32common = LDRWui %stack.5.nzv, 0, debug-location !1151 :: (dereferenceable load 4 from %ir.nzv); cg.c:836:15
SU(9):   %40:gpr32common = nsw ADDWri %39:gpr32common, 1, 0, debug-location !1152; cg.c:836:19
SU(10):   STRWui %40:gpr32common, %stack.5.nzv, 0, debug-location !1153 :: (store 4 into %ir.nzv); cg.c:836:13

********** INTERVALS **********
B0 [416r,432r:4)[432r,500r:3)[544r,560r:2)[560r,628r:1)[656r,688r:0)  0@656r 1@560r 2@544r 3@432r 4@416r
W0 [0B,80r:0)[400r,432r:4)[528r,560r:3)[672r,688r:2)[688r,772r:1)  0@0B-phi 1@688r 2@672r 3@528r 4@400r
W1 [0B,64r:0)  0@0B-phi
W2 [0B,48r:0)  0@0B-phi
W3 [0B,32r:0)  0@0B-phi
W4 [0B,16r:0)  0@0B-phi
%0 [80r,96r:0)  0@80r weight:0.000000e+00
%1 [64r,112r:0)  0@64r weight:0.000000e+00
%2 [48r,128r:0)  0@48r weight:0.000000e+00
%3 [32r,144r:0)  0@32r weight:0.000000e+00
%4 [16r,160r:0)  0@16r weight:0.000000e+00
%6 [272r,304r:0)  0@272r weight:0.000000e+00
%7 [288r,304r:0)  0@288r weight:0.000000e+00
%9 [208r,1520B:0)  0@208r weight:0.000000e+00
%10 [368r,416r:0)  0@368r weight:0.000000e+00
%11 [224r,1520B:0)  0@224r weight:0.000000e+00
%12 [500r,504r:0)  0@500r weight:0.000000e+00
%13 [496r,544r:0)  0@496r weight:0.000000e+00
%14 [628r,656r:0)  0@628r weight:0.000000e+00
%15 [624r,672r:0)  0@624r weight:0.000000e+00
%16 [772r,776r:0)  0@772r weight:0.000000e+00
%17 [776r,792r:0)  0@776r weight:0.000000e+00
%18 [768r,784r:0)  0@768r weight:0.000000e+00
%21 [912r,944r:0)  0@912r weight:0.000000e+00
%22 [928r,944r:0)  0@928r weight:0.000000e+00
%24 [1008r,1040r:0)  0@1008r weight:0.000000e+00
%25 [1024r,1040r:0)  0@1024r weight:0.000000e+00
%26 [1040r,1072r:0)  0@1040r weight:0.000000e+00
%27 [1056r,1072r:0)  0@1056r weight:0.000000e+00
%29 [1184r,1200r:0)  0@1184r weight:0.000000e+00
%30 [1200r,1216r:0)  0@1200r weight:0.000000e+00
%31 [240r,1520B:0)  0@240r weight:0.000000e+00
%32 [1264r,1280r:0)  0@1264r weight:0.000000e+00
%33 [1328r,1376r:0)  0@1328r weight:0.000000e+00
%34 [1344r,1376r:0)  0@1344r weight:0.000000e+00
%35 [1360r,1376r:0)  0@1360r weight:0.000000e+00
%36 [1392r,1440r:0)  0@1392r weight:0.000000e+00
%37 [1408r,1440r:0)  0@1408r weight:0.000000e+00
%38 [1424r,1440r:0)  0@1424r weight:0.000000e+00
%39 [1456r,1472r:0)  0@1456r weight:0.000000e+00
%40 [1472r,1488r:0)  0@1472r weight:0.000000e+00
RegMasks: 432r 560r 688r
********** MACHINEINSTRS **********
# Machine code for function sprnvc: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=8, align=8, at location [SP]
  fi#4: size=8, align=8, at location [SP]
  fi#5: size=4, align=4, at location [SP]
  fi#6: size=4, align=4, at location [SP]
  fi#7: size=4, align=4, at location [SP]
  fi#8: size=8, align=8, at location [SP]
  fi#9: size=8, align=8, at location [SP]
  fi#10: size=4, align=4, at location [SP]
Function Live Ins: $w0 in %0, $w1 in %1, $w2 in %2, $x3 in %3, $x4 in %4

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $w0, $w1, $w2, $x3, $x4
16B	  %4:gpr64 = COPY $x4
32B	  %3:gpr64 = COPY $x3
48B	  %2:gpr32 = COPY $w2
64B	  %1:gpr32 = COPY $w1
80B	  %0:gpr32 = COPY $w0
96B	  STRWui %0:gpr32, %stack.0.n.addr, 0 :: (store 4 into %ir.n.addr)
112B	  STRWui %1:gpr32, %stack.1.nz.addr, 0 :: (store 4 into %ir.nz.addr)
128B	  STRWui %2:gpr32, %stack.2.nn1.addr, 0 :: (store 4 into %ir.nn1.addr)
144B	  STRXui %3:gpr64, %stack.3.v.addr, 0 :: (store 8 into %ir.v.addr)
160B	  STRXui %4:gpr64, %stack.4.iv.addr, 0 :: (store 8 into %ir.iv.addr)
192B	  STRWui $wzr, %stack.5.nzv, 0, debug-location !1094 :: (store 4 into %ir.nzv); cg.c:809:9
208B	  %9:gpr64common = ADRP target-flags(aarch64-page) @amult
224B	  %11:gpr64 = MOVaddr target-flags(aarch64-page) @tran, target-flags(aarch64-pageoff, aarch64-nc) @tran
240B	  %31:gpr32 = MOVi32imm 1

256B	bb.1.while.cond:
	; predecessors: %bb.0, %bb.2, %bb.8, %bb.9
	  successors: %bb.2(0x7c000000), %bb.10(0x04000000); %bb.2(96.88%), %bb.10(3.12%)

272B	  %6:gpr32 = LDRWui %stack.5.nzv, 0, debug-location !1096 :: (dereferenceable load 4 from %ir.nzv); cg.c:811:12
288B	  %7:gpr32 = LDRWui %stack.1.nz.addr, 0, debug-location !1097 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:811:18
304B	  dead $wzr = SUBSWrr %6:gpr32, %7:gpr32, implicit-def $nzcv, debug-location !1095; cg.c:811:5
320B	  Bcc 10, %bb.10, implicit killed $nzcv, debug-location !1095; cg.c:811:5
336B	  B %bb.2, debug-location !1095; cg.c:811:5

352B	bb.2.while.body:
	; predecessors: %bb.1
	  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

368B	  %10:fpr64 = LDRDui %9:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !1099 :: (dereferenceable load 8 from @amult); cg.c:812:32
384B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1101; cg.c:812:18
400B	  $x0 = COPY %11:gpr64, debug-location !1101; cg.c:812:18
416B	  $d0 = COPY %10:fpr64, debug-location !1101; cg.c:812:18
432B	  BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !1101; cg.c:812:18
448B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1101; cg.c:812:18
496B	  %13:fpr64 = LDRDui %9:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !1103 :: (dereferenceable load 8 from @amult); cg.c:817:32
500B	  %12:fpr64 = COPY $d0, debug-location !1101; cg.c:812:18
504B	  STRDui %12:fpr64, %stack.8.vecelt, 0, debug-location !1102 :: (store 8 into %ir.vecelt); cg.c:812:16
512B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1104; cg.c:817:18
528B	  $x0 = COPY %11:gpr64, debug-location !1104; cg.c:817:18
544B	  $d0 = COPY %13:fpr64, debug-location !1104; cg.c:817:18
560B	  BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !1104; cg.c:817:18
576B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1104; cg.c:817:18
624B	  %15:gpr32 = LDRWui %stack.2.nn1.addr, 0, debug-location !1107 :: (dereferenceable load 4 from %ir.nn1.addr); cg.c:818:28
628B	  %14:fpr64 = COPY $d0, debug-location !1104; cg.c:817:18
632B	  STRDui %14:fpr64, %stack.9.vecloc, 0, debug-location !1105 :: (store 8 into %ir.vecloc); cg.c:817:16
640B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1108; cg.c:818:13
656B	  $d0 = COPY %14:fpr64, debug-location !1108; cg.c:818:13
672B	  $w0 = COPY %15:gpr32, debug-location !1108; cg.c:818:13
688B	  BL @icnvrt, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $w0, implicit-def $sp, implicit-def $w0, debug-location !1108; cg.c:818:13
704B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1108; cg.c:818:13
768B	  %18:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !1113 :: (dereferenceable load 4 from %ir.n.addr); cg.c:819:17
772B	  %16:gpr32sp = COPY $w0, debug-location !1108; cg.c:818:13
776B	  %17:gpr32common = nsw ADDWri %16:gpr32sp, 1, 0, debug-location !1109; cg.c:818:33
784B	  dead $wzr = SUBSWrr %17:gpr32common, %18:gpr32, implicit-def $nzcv, debug-location !1115; cg.c:819:13
792B	  STRWui %17:gpr32common, %stack.7.i, 0, debug-location !1110 :: (store 4 into %ir.i); cg.c:818:11
800B	  Bcc 12, %bb.1, implicit killed $nzcv, debug-location !1115; cg.c:819:13
816B	  B %bb.3, debug-location !1115; cg.c:819:13

832B	bb.3.if.end:
	; predecessors: %bb.2
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

864B	  STRWui $wzr, %stack.10.was_gen, 0, debug-location !1117 :: (store 4 into %ir.was_gen); cg.c:825:17
880B	  STRWui $wzr, %stack.6.ii, 0, debug-location !1118 :: (store 4 into %ir.ii); cg.c:826:17

896B	bb.4.for.cond:
	; predecessors: %bb.3, %bb.7
	  successors: %bb.5(0x7c000000), %bb.8(0x04000000); %bb.5(96.88%), %bb.8(3.12%)

912B	  %21:gpr32 = LDRWui %stack.6.ii, 0, debug-location !1121 :: (dereferenceable load 4 from %ir.ii); cg.c:826:22
928B	  %22:gpr32 = LDRWui %stack.5.nzv, 0, debug-location !1123 :: (dereferenceable load 4 from %ir.nzv); cg.c:826:27
944B	  dead $wzr = SUBSWrr %21:gpr32, %22:gpr32, implicit-def $nzcv, debug-location !1125; cg.c:826:9
960B	  Bcc 10, %bb.8, implicit killed $nzcv, debug-location !1125; cg.c:826:9
976B	  B %bb.5, debug-location !1125; cg.c:826:9

992B	bb.5.for.body:
	; predecessors: %bb.4
	  successors: %bb.6(0x04000000), %bb.7(0x7c000000); %bb.6(3.12%), %bb.7(96.88%)

1008B	  %24:gpr64common = LDRXui %stack.4.iv.addr, 0, debug-location !1126 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:827:17
1024B	  %25:gpr64 = LDRSWui %stack.6.ii, 0, debug-location !1129 :: (dereferenceable load 4 from %ir.ii); cg.c:827:20
1040B	  %26:gpr32 = LDRWroX %24:gpr64common, %25:gpr64, 0, 1, debug-location !1126 :: (load 4 from %ir.arrayidx); cg.c:827:17
1056B	  %27:gpr32 = LDRWui %stack.7.i, 0, debug-location !1130 :: (dereferenceable load 4 from %ir.i); cg.c:827:27
1072B	  dead $wzr = SUBSWrr %26:gpr32, %27:gpr32, implicit-def $nzcv, debug-location !1132; cg.c:827:17
1088B	  Bcc 1, %bb.7, implicit killed $nzcv, debug-location !1132; cg.c:827:17
1104B	  B %bb.6, debug-location !1132; cg.c:827:17

1120B	bb.6.if.then6:
	; predecessors: %bb.5
	  successors: %bb.8(0x80000000); %bb.8(100.00%)

1136B	  STRWui %31:gpr32, %stack.10.was_gen, 0, debug-location !1133 :: (store 4 into %ir.was_gen); cg.c:828:25
1152B	  B %bb.8, debug-location !1135; cg.c:829:17

1168B	bb.7.for.inc:
	; predecessors: %bb.5
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

1184B	  %29:gpr32common = LDRWui %stack.6.ii, 0, debug-location !1136 :: (dereferenceable load 4 from %ir.ii); cg.c:826:34
1200B	  %30:gpr32common = nsw ADDWri %29:gpr32common, 1, 0, debug-location !1136; cg.c:826:34
1216B	  STRWui %30:gpr32common, %stack.6.ii, 0, debug-location !1136 :: (store 4 into %ir.ii); cg.c:826:34
1232B	  B %bb.4, debug-location !1137; cg.c:826:9

1248B	bb.8.for.end:
	; predecessors: %bb.4, %bb.6
	  successors: %bb.1(0x40000000), %bb.9(0x40000000); %bb.1(50.00%), %bb.9(50.00%)

1264B	  %32:gpr32 = LDRWui %stack.10.was_gen, 0, debug-location !1140 :: (dereferenceable load 4 from %ir.was_gen); cg.c:832:13
1280B	  CBNZW %32:gpr32, %bb.1, debug-location !1142; cg.c:832:13
1296B	  B %bb.9, debug-location !1142; cg.c:832:13

1312B	bb.9.if.end9:
	; predecessors: %bb.8
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

1328B	  %33:fpr64 = LDRDui %stack.8.vecelt, 0, debug-location !1143 :: (dereferenceable load 8 from %ir.vecelt); cg.c:834:18
1344B	  %34:gpr64common = LDRXui %stack.3.v.addr, 0, debug-location !1144 :: (dereferenceable load 8 from %ir.v.addr); cg.c:834:9
1360B	  %35:gpr64 = LDRSWui %stack.5.nzv, 0, debug-location !1145 :: (dereferenceable load 4 from %ir.nzv); cg.c:834:11
1376B	  STRDroX %33:fpr64, %34:gpr64common, %35:gpr64, 0, 1, debug-location !1146 :: (store 8 into %ir.arrayidx11); cg.c:834:16
1392B	  %36:gpr32 = LDRWui %stack.7.i, 0, debug-location !1147 :: (dereferenceable load 4 from %ir.i); cg.c:835:19
1408B	  %37:gpr64common = LDRXui %stack.4.iv.addr, 0, debug-location !1148 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:835:9
1424B	  %38:gpr64 = LDRSWui %stack.5.nzv, 0, debug-location !1149 :: (dereferenceable load 4 from %ir.nzv); cg.c:835:12
1440B	  STRWroX %36:gpr32, %37:gpr64common, %38:gpr64, 0, 1, debug-location !1150 :: (store 4 into %ir.arrayidx13); cg.c:835:17
1456B	  %39:gpr32common = LDRWui %stack.5.nzv, 0, debug-location !1151 :: (dereferenceable load 4 from %ir.nzv); cg.c:836:15
1472B	  %40:gpr32common = nsw ADDWri %39:gpr32common, 1, 0, debug-location !1152; cg.c:836:19
1488B	  STRWui %40:gpr32common, %stack.5.nzv, 0, debug-location !1153 :: (store 4 into %ir.nzv); cg.c:836:13
1504B	  B %bb.1, debug-location !1095; cg.c:811:5

1520B	bb.10.while.end:
	; predecessors: %bb.1

1536B	  RET_ReallyLR debug-location !1154; cg.c:838:1

# End machine code for function sprnvc.

Before post-MI-sched:
# Machine code for function sprnvc: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-36]
  fi#1: size=4, align=4, at location [SP-40]
  fi#2: size=4, align=4, at location [SP-52]
  fi#3: size=8, align=8, at location [SP-64]
  fi#4: size=8, align=8, at location [SP-72]
  fi#5: size=4, align=4, at location [SP-76]
  fi#6: size=4, align=4, at location [SP-80]
  fi#7: size=4, align=4, at location [SP-84]
  fi#8: size=8, align=8, at location [SP-96]
  fi#9: size=8, align=8, at location [SP-104]
  fi#10: size=4, align=4, at location [SP-108]
  fi#11: size=8, align=8, at location [SP-8]
  fi#12: size=8, align=8, at location [SP-16]
  fi#13: size=8, align=8, at location [SP-24]
  fi#14: size=8, align=8, at location [SP-32]
  fi#15: size=8, align=16, at location [SP-48]
Function Live Ins: $w0, $w1, $w2, $x3, $x4

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $w0, $w1, $w2, $x3, $x4, $x21, $x19, $x20, $lr
  $sp = frame-setup SUBXri $sp, 112, 0
  frame-setup STRXui killed $x21, $sp, 8 :: (store 8 into %stack.15)
  frame-setup STPXi killed $x20, killed $x19, $sp, 10 :: (store 8 into %stack.14), (store 8 into %stack.13)
  frame-setup STPXi killed $fp, killed $lr, $sp, 12 :: (store 8 into %stack.12), (store 8 into %stack.11)
  $fp = frame-setup ADDXri $sp, 96, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  frame-setup CFI_INSTRUCTION offset $w19, -24
  frame-setup CFI_INSTRUCTION offset $w20, -32
  frame-setup CFI_INSTRUCTION offset $w21, -48
  STPWi renamable $w1, renamable $w0, $fp, -6 :: (store 4 into %ir.n.addr), (store 4 into %ir.nz.addr)
  STURWi killed renamable $w2, $fp, -36 :: (store 4 into %ir.nn1.addr)
  STPXi renamable $x4, renamable $x3, $sp, 5 :: (store 8 into %ir.v.addr), (store 8 into %ir.iv.addr)
  STRWui $wzr, $sp, 9, debug-location !1094 :: (store 4 into %ir.nzv); cg.c:809:9
  renamable $x20 = ADRP target-flags(aarch64-page) @amult
  $x19 = ADRP target-flags(aarch64-page) @tran
  renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @tran, 0
  $w21 = MOVZWi 1, 0

bb.1.while.cond:
; predecessors: %bb.0, %bb.2, %bb.7, %bb.8
  successors: %bb.2(0x7c000000), %bb.9(0x04000000); %bb.2(96.88%), %bb.9(3.12%)
  liveins: $w21, $x19, $x20
  renamable $w8 = LDRWui $sp, 9, debug-location !1096 :: (dereferenceable load 4 from %ir.nzv); cg.c:811:12
  renamable $w9 = LDURWi $fp, -24, debug-location !1097 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:811:18
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1095; cg.c:811:5
  Bcc 10, %bb.9, implicit $nzcv, debug-location !1095; cg.c:811:5

bb.2.while.body:
; predecessors: %bb.1
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $w21, $x19, $x20
  renamable $d0 = LDRDui renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !1099 :: (dereferenceable load 8 from @amult); cg.c:812:32
  $x0 = ORRXrs $xzr, $x19, 0, debug-location !1101; cg.c:812:18
  BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !1101; cg.c:812:18
  renamable $d1 = LDRDui renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !1103 :: (dereferenceable load 8 from @amult); cg.c:817:32
  STRDui killed renamable $d0, $sp, 2, debug-location !1102 :: (store 8 into %ir.vecelt); cg.c:812:16
  $x0 = ORRXrs $xzr, $x19, 0, debug-location !1104; cg.c:817:18
  $q0 = ORRv16i8 $q1, killed $q1, debug-location !1104; cg.c:817:18
  BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !1104; cg.c:817:18
  renamable $w0 = LDURWi $fp, -36, debug-location !1107 :: (dereferenceable load 4 from %ir.nn1.addr); cg.c:818:28
  STRDui renamable $d0, $sp, 1, debug-location !1105 :: (store 8 into %ir.vecloc); cg.c:817:16
  BL @icnvrt, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $w0, implicit-def $sp, implicit-def $w0, debug-location !1108; cg.c:818:13
  renamable $w8 = LDURWi $fp, -20, debug-location !1113 :: (dereferenceable load 4 from %ir.n.addr); cg.c:819:17
  renamable $w9 = nsw ADDWri killed renamable $w0, 1, 0, debug-location !1109; cg.c:818:33
  $wzr = SUBSWrs renamable $w9, killed renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1115; cg.c:819:13
  STRWui killed renamable $w9, $sp, 7, debug-location !1110 :: (store 4 into %ir.i); cg.c:818:11
  Bcc 12, %bb.1, implicit $nzcv, debug-location !1115; cg.c:819:13

bb.3.if.end:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $w21, $x19, $x20
  STRWui $wzr, $sp, 1, debug-location !1117 :: (store 4 into %ir.was_gen); cg.c:825:17
  STRWui $wzr, $sp, 8, debug-location !1118 :: (store 4 into %ir.ii); cg.c:826:17

bb.4.for.cond:
; predecessors: %bb.3, %bb.10
  successors: %bb.5(0x7c000000), %bb.7(0x04000000); %bb.5(96.88%), %bb.7(3.12%)
  liveins: $w21, $x19, $x20
  renamable $w8, renamable $w9 = LDPWi $sp, 8, debug-location !1121 :: (dereferenceable load 4 from %ir.ii), (dereferenceable load 4 from %ir.nzv); cg.c:826:22
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1125; cg.c:826:9
  Bcc 10, %bb.7, implicit $nzcv, debug-location !1125; cg.c:826:9

bb.5.for.body:
; predecessors: %bb.4
  successors: %bb.6(0x04000000), %bb.10(0x7c000000); %bb.6(3.12%), %bb.10(96.88%)
  liveins: $w21, $x19, $x20
  renamable $x8 = LDRXui $sp, 5, debug-location !1126 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:827:17
  renamable $x9 = LDRSWui $sp, 8, debug-location !1129 :: (dereferenceable load 4 from %ir.ii); cg.c:827:20
  renamable $w8 = LDRWroX killed renamable $x8, killed renamable $x9, 0, 1, debug-location !1126 :: (load 4 from %ir.arrayidx); cg.c:827:17
  renamable $w9 = LDRWui $sp, 7, debug-location !1130 :: (dereferenceable load 4 from %ir.i); cg.c:827:27
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1132; cg.c:827:17
  Bcc 1, %bb.10, implicit $nzcv, debug-location !1132; cg.c:827:17

bb.6.if.then6:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $w21, $x19, $x20
  STRWui renamable $w21, $sp, 1, debug-location !1133 :: (store 4 into %ir.was_gen); cg.c:828:25

bb.7.for.end:
; predecessors: %bb.4, %bb.6
  successors: %bb.1(0x40000000), %bb.8(0x40000000); %bb.1(50.00%), %bb.8(50.00%)
  liveins: $w21, $x19, $x20
  renamable $w8 = LDRWui $sp, 1, debug-location !1140 :: (dereferenceable load 4 from %ir.was_gen); cg.c:832:13
  CBNZW killed renamable $w8, %bb.1, debug-location !1142; cg.c:832:13

bb.8.if.end9:
; predecessors: %bb.7
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $w21, $x19, $x20
  renamable $d0 = LDRDui $sp, 2, debug-location !1143 :: (dereferenceable load 8 from %ir.vecelt); cg.c:834:18
  renamable $x8 = LDRXui $sp, 6, debug-location !1144 :: (dereferenceable load 8 from %ir.v.addr); cg.c:834:9
  renamable $x9 = LDRSWui $sp, 9, debug-location !1145 :: (dereferenceable load 4 from %ir.nzv); cg.c:834:11
  STRDroX killed renamable $d0, killed renamable $x8, killed renamable $x9, 0, 1, debug-location !1146 :: (store 8 into %ir.arrayidx11); cg.c:834:16
  renamable $w8 = LDRWui $sp, 7, debug-location !1147 :: (dereferenceable load 4 from %ir.i); cg.c:835:19
  renamable $x9 = LDRXui $sp, 5, debug-location !1148 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:835:9
  renamable $x10 = LDRSWui $sp, 9, debug-location !1149 :: (dereferenceable load 4 from %ir.nzv); cg.c:835:12
  STRWroX killed renamable $w8, killed renamable $x9, killed renamable $x10, 0, 1, debug-location !1150 :: (store 4 into %ir.arrayidx13); cg.c:835:17
  renamable $w8 = LDRWui $sp, 9, debug-location !1151 :: (dereferenceable load 4 from %ir.nzv); cg.c:836:15
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !1152; cg.c:836:19
  STRWui killed renamable $w8, $sp, 9, debug-location !1153 :: (store 4 into %ir.nzv); cg.c:836:13
  B %bb.1

bb.9.while.end:
; predecessors: %bb.1

  $fp, $lr = frame-destroy LDPXi $sp, 12, debug-location !1154 :: (load 8 from %stack.12), (load 8 from %stack.11); cg.c:838:1
  $x20, $x19 = frame-destroy LDPXi $sp, 10, debug-location !1154 :: (load 8 from %stack.14), (load 8 from %stack.13); cg.c:838:1
  $x21 = frame-destroy LDRXui $sp, 8, debug-location !1154 :: (load 8 from %stack.15); cg.c:838:1
  $sp = frame-destroy ADDXri $sp, 112, 0, debug-location !1154; cg.c:838:1
  RET undef $lr, debug-location !1154; cg.c:838:1

bb.10.for.inc:
; predecessors: %bb.5
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $w21, $x19, $x20
  renamable $w8 = LDRWui $sp, 8, debug-location !1136 :: (dereferenceable load 4 from %ir.ii); cg.c:826:34
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !1136; cg.c:826:34
  STRWui killed renamable $w8, $sp, 8, debug-location !1136 :: (store 4 into %ir.ii); cg.c:826:34
  B %bb.4

# End machine code for function sprnvc.

********** MI Scheduling **********
sprnvc:%bb.0 entry
  From: STPWi renamable $w1, renamable $w0, $fp, -6 :: (store 4 into %ir.n.addr), (store 4 into %ir.nz.addr)
    To: End RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   STPWi renamable $w1, renamable $w0, $fp, -6 :: (store 4 into %ir.n.addr), (store 4 into %ir.nz.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   STURWi renamable $w2, $fp, -36 :: (store 4 into %ir.nn1.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   STPXi renamable $x4, renamable $x3, $sp, 5 :: (store 8 into %ir.v.addr), (store 8 into %ir.iv.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(3):   STRWui $wzr, $sp, 9, debug-location !1094 :: (store 4 into %ir.nzv); cg.c:809:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(4):   renamable $x20 = ADRP target-flags(aarch64-page) @amult
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   $x19 = ADRP target-flags(aarch64-page) @tran
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x19
SU(6):   renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @tran, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(7):   $w21 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Disabled scoreboard hazard recognizer
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 7 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(4) TOP-PATH                  1 cycles 
  Cand SU(5) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) $x19 = ADRP target-flags(aarch64-page) @tran
  Ready @0c
  TopQ.A BotLatency SU(5) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 7 6 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(4) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $x20 = ADRP target-flags(aarch64-page) @amult
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 6 7 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @tran, 0
  Ready @2c
  TopQ.A TopLatency SU(6) 1c
  TopQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 7 
  TopQ.A RemainingLatency 0 + 3c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(7) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) $w21 = MOVZWi 1, 0
  Ready @3c
  TopQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  TopQ.A RemainingLatency 0 + 4c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STPWi renamable $w1, renamable $w0, $fp, -6 :: (store 4 into %ir.n.addr), (store 4 into %ir.nz.addr)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 1 2 
  TopQ.A RemainingLatency 0 + 5c > CritPath 2
  Cand SU(3) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) STURWi renamable $w2, $fp, -36 :: (store 4 into %ir.nn1.addr)
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 2 
  TopQ.A RemainingLatency 0 + 6c > CritPath 2
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) STPXi renamable $x4, renamable $x3, $sp, 5 :: (store 8 into %ir.v.addr), (store 8 into %ir.iv.addr)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STRWui $wzr, $sp, 9, debug-location !1094 :: (store 4 into %ir.nzv); cg.c:809:9
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(5):   $x19 = ADRP target-flags(aarch64-page) @tran
SU(4):   renamable $x20 = ADRP target-flags(aarch64-page) @amult
SU(6):   renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @tran, 0
SU(7):   $w21 = MOVZWi 1, 0
SU(0):   STPWi renamable $w1, renamable $w0, $fp, -6 :: (store 4 into %ir.n.addr), (store 4 into %ir.nz.addr)
SU(1):   STURWi renamable $w2, $fp, -36 :: (store 4 into %ir.nn1.addr)
SU(2):   STPXi renamable $x4, renamable $x3, $sp, 5 :: (store 8 into %ir.v.addr), (store 8 into %ir.iv.addr)
SU(3):   STRWui $wzr, $sp, 9, debug-location !1094 :: (store 4 into %ir.nzv); cg.c:809:9

********** MI Scheduling **********
sprnvc:%bb.0 entry
  From: frame-setup STRXui killed $x21, $sp, 8 :: (store 8 into %stack.15)
    To: frame-setup CFI_INSTRUCTION def_cfa $w29, 16
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   frame-setup STRXui $x21, $sp, 8 :: (store 8 into %stack.15)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   frame-setup STPXi $x20, $x19, $sp, 10 :: (store 8 into %stack.14), (store 8 into %stack.13)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   frame-setup STPXi $fp, $lr, $sp, 12 :: (store 8 into %stack.12), (store 8 into %stack.11)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Successors:
    SU(3): Anti Latency=0
SU(3):   $fp = frame-setup ADDXri $sp, 96, 0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Anti Latency=0
ExitSU:   frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 0
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) frame-setup STRXui $x21, $sp, 8 :: (store 8 into %stack.15)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 0
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) frame-setup STPXi $x20, $x19, $sp, 10 :: (store 8 into %stack.14), (store 8 into %stack.13)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) frame-setup STPXi $fp, $lr, $sp, 12 :: (store 8 into %stack.12), (store 8 into %stack.11)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $fp = frame-setup ADDXri $sp, 96, 0
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   frame-setup STRXui $x21, $sp, 8 :: (store 8 into %stack.15)
SU(1):   frame-setup STPXi $x20, $x19, $sp, 10 :: (store 8 into %stack.14), (store 8 into %stack.13)
SU(2):   frame-setup STPXi $fp, $lr, $sp, 12 :: (store 8 into %stack.12), (store 8 into %stack.11)
SU(3):   $fp = frame-setup ADDXri $sp, 96, 0

Fixup kills for %bb.0
********** MI Scheduling **********
sprnvc:%bb.1 while.cond
  From: renamable $w8 = LDRWui $sp, 9, debug-location !1096 :: (dereferenceable load 4 from %ir.nzv); cg.c:811:12
    To: Bcc 10, %bb.9, implicit $nzcv, debug-location !1095; cg.c:811:5
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 9, debug-location !1096 :: (dereferenceable load 4 from %ir.nzv); cg.c:811:12
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w8
SU(1):   renamable $w9 = LDURWi $fp, -24, debug-location !1097 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:811:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w9
SU(2):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1095; cg.c:811:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=$w9
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.9, implicit $nzcv, debug-location !1095; cg.c:811:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 9, debug-location !1096 :: (dereferenceable load 4 from %ir.nzv); cg.c:811:12
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w9 = LDURWi $fp, -24, debug-location !1097 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:811:18
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1095; cg.c:811:5
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   renamable $w8 = LDRWui $sp, 9, debug-location !1096 :: (dereferenceable load 4 from %ir.nzv); cg.c:811:12
SU(1):   renamable $w9 = LDURWi $fp, -24, debug-location !1097 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:811:18
SU(2):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1095; cg.c:811:5

Fixup kills for %bb.1
********** MI Scheduling **********
sprnvc:%bb.2 while.body
  From: renamable $w8 = LDURWi $fp, -20, debug-location !1113 :: (dereferenceable load 4 from %ir.n.addr); cg.c:819:17
    To: Bcc 12, %bb.1, implicit $nzcv, debug-location !1115; cg.c:819:13
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -20, debug-location !1113 :: (dereferenceable load 4 from %ir.n.addr); cg.c:819:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w8
SU(1):   renamable $w9 = nsw ADDWri renamable $w0, 1, 0, debug-location !1109; cg.c:818:33
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Data Latency=1 Reg=$w9
    SU(2): Data Latency=1 Reg=$w9
SU(2):   $wzr = SUBSWrs renamable $w9, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1115; cg.c:819:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=$w9
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   STRWui renamable $w9, $sp, 7, debug-location !1110 :: (store 4 into %ir.i); cg.c:818:11
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w9
ExitSU:   Bcc 12, %bb.1, implicit $nzcv, debug-location !1115; cg.c:819:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w8 = LDURWi $fp, -20, debug-location !1113 :: (dereferenceable load 4 from %ir.n.addr); cg.c:819:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w9 = nsw ADDWri renamable $w0, 1, 0, debug-location !1109; cg.c:818:33
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STRWui renamable $w9, $sp, 7, debug-location !1110 :: (store 4 into %ir.i); cg.c:818:11
  Ready @2c
  TopQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $wzr = SUBSWrs renamable $w9, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1115; cg.c:819:13
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   renamable $w8 = LDURWi $fp, -20, debug-location !1113 :: (dereferenceable load 4 from %ir.n.addr); cg.c:819:17
SU(1):   renamable $w9 = nsw ADDWri renamable $w0, 1, 0, debug-location !1109; cg.c:818:33
SU(3):   STRWui renamable $w9, $sp, 7, debug-location !1110 :: (store 4 into %ir.i); cg.c:818:11
SU(2):   $wzr = SUBSWrs renamable $w9, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1115; cg.c:819:13

********** MI Scheduling **********
sprnvc:%bb.2 while.body
  From: renamable $w0 = LDURWi $fp, -36, debug-location !1107 :: (dereferenceable load 4 from %ir.nn1.addr); cg.c:818:28
    To: BL @icnvrt, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $w0, implicit-def $sp, implicit-def $w0, debug-location !1108; cg.c:818:13
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w0 = LDURWi $fp, -36, debug-location !1107 :: (dereferenceable load 4 from %ir.nn1.addr); cg.c:818:28
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(1):   STRDui renamable $d0, $sp, 1, debug-location !1105 :: (store 8 into %ir.vecloc); cg.c:817:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
ExitSU:   BL @icnvrt, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $w0, implicit-def $sp, implicit-def $w0, debug-location !1108; cg.c:818:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w0 = LDURWi $fp, -36, debug-location !1107 :: (dereferenceable load 4 from %ir.nn1.addr); cg.c:818:28
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRDui renamable $d0, $sp, 1, debug-location !1105 :: (store 8 into %ir.vecloc); cg.c:817:16
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   renamable $w0 = LDURWi $fp, -36, debug-location !1107 :: (dereferenceable load 4 from %ir.nn1.addr); cg.c:818:28
SU(1):   STRDui renamable $d0, $sp, 1, debug-location !1105 :: (store 8 into %ir.vecloc); cg.c:817:16

********** MI Scheduling **********
sprnvc:%bb.2 while.body
  From: renamable $d1 = LDRDui renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !1103 :: (dereferenceable load 8 from @amult); cg.c:817:32
    To: BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !1104; cg.c:817:18
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $d1 = LDRDui renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !1103 :: (dereferenceable load 8 from @amult); cg.c:817:32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=$q1
SU(1):   STRDui renamable $d0, $sp, 2, debug-location !1102 :: (store 8 into %ir.vecelt); cg.c:812:16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Anti Latency=0
SU(2):   $x0 = ORRXrs $xzr, $x19, 0, debug-location !1104; cg.c:817:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $q0 = ORRv16i8 $q1, $q1, debug-location !1104; cg.c:817:18
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Data Latency=4 Reg=$q1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !1104; cg.c:817:18
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d1 = LDRDui renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !1103 :: (dereferenceable load 8 from @amult); cg.c:817:32
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) STRDui renamable $d0, $sp, 2, debug-location !1102 :: (store 8 into %ir.vecelt); cg.c:812:16
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $x0 = ORRXrs $xzr, $x19, 0, debug-location !1104; cg.c:817:18
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $q0 = ORRv16i8 $q1, $q1, debug-location !1104; cg.c:817:18
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   renamable $d1 = LDRDui renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !1103 :: (dereferenceable load 8 from @amult); cg.c:817:32
SU(1):   STRDui renamable $d0, $sp, 2, debug-location !1102 :: (store 8 into %ir.vecelt); cg.c:812:16
SU(2):   $x0 = ORRXrs $xzr, $x19, 0, debug-location !1104; cg.c:817:18
SU(3):   $q0 = ORRv16i8 $q1, $q1, debug-location !1104; cg.c:817:18

********** MI Scheduling **********
sprnvc:%bb.2 while.body
  From: renamable $d0 = LDRDui renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !1099 :: (dereferenceable load 8 from @amult); cg.c:812:32
    To: BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !1101; cg.c:812:18
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDRDui renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !1099 :: (dereferenceable load 8 from @amult); cg.c:812:32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(1):   $x0 = ORRXrs $xzr, $x19, 0, debug-location !1101; cg.c:812:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !1101; cg.c:812:18
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0 = LDRDui renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !1099 :: (dereferenceable load 8 from @amult); cg.c:812:32
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ORRXrs $xzr, $x19, 0, debug-location !1101; cg.c:812:18
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   renamable $d0 = LDRDui renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !1099 :: (dereferenceable load 8 from @amult); cg.c:812:32
SU(1):   $x0 = ORRXrs $xzr, $x19, 0, debug-location !1101; cg.c:812:18

Fixup kills for %bb.2
********** MI Scheduling **********
sprnvc:%bb.3 if.end
  From: STRWui $wzr, $sp, 1, debug-location !1117 :: (store 4 into %ir.was_gen); cg.c:825:17
    To: End RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   STRWui $wzr, $sp, 1, debug-location !1117 :: (store 4 into %ir.was_gen); cg.c:825:17
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   STRWui $wzr, $sp, 8, debug-location !1118 :: (store 4 into %ir.ii); cg.c:826:17
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 0
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STRWui $wzr, $sp, 1, debug-location !1117 :: (store 4 into %ir.was_gen); cg.c:825:17
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRWui $wzr, $sp, 8, debug-location !1118 :: (store 4 into %ir.ii); cg.c:826:17
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   STRWui $wzr, $sp, 1, debug-location !1117 :: (store 4 into %ir.was_gen); cg.c:825:17
SU(1):   STRWui $wzr, $sp, 8, debug-location !1118 :: (store 4 into %ir.ii); cg.c:826:17

Fixup kills for %bb.3
********** MI Scheduling **********
sprnvc:%bb.4 for.cond
  From: renamable $w8, renamable $w9 = LDPWi $sp, 8, debug-location !1121 :: (dereferenceable load 4 from %ir.ii), (dereferenceable load 4 from %ir.nzv); cg.c:826:22
    To: Bcc 10, %bb.7, implicit $nzcv, debug-location !1125; cg.c:826:9
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8, renamable $w9 = LDPWi $sp, 8, debug-location !1121 :: (dereferenceable load 4 from %ir.ii), (dereferenceable load 4 from %ir.nzv); cg.c:826:22
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
    SU(1): Data Latency=4 Reg=$w9
SU(1):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1125; cg.c:826:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
    SU(0): Data Latency=4 Reg=$w9
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.7, implicit $nzcv, debug-location !1125; cg.c:826:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8, renamable $w9 = LDPWi $sp, 8, debug-location !1121 :: (dereferenceable load 4 from %ir.ii), (dereferenceable load 4 from %ir.nzv); cg.c:826:22
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1125; cg.c:826:9
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   renamable $w8, renamable $w9 = LDPWi $sp, 8, debug-location !1121 :: (dereferenceable load 4 from %ir.ii), (dereferenceable load 4 from %ir.nzv); cg.c:826:22
SU(1):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1125; cg.c:826:9

Fixup kills for %bb.4
********** MI Scheduling **********
sprnvc:%bb.5 for.body
  From: renamable $x8 = LDRXui $sp, 5, debug-location !1126 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:827:17
    To: Bcc 1, %bb.10, implicit $nzcv, debug-location !1132; cg.c:827:17
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRXui $sp, 5, debug-location !1126 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:827:17
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x8
SU(1):   renamable $x9 = LDRSWui $sp, 8, debug-location !1129 :: (dereferenceable load 4 from %ir.ii); cg.c:827:20
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x9
SU(2):   renamable $w8 = LDRWroX renamable $x8, renamable $x9, 0, 1, debug-location !1126 :: (load 4 from %ir.arrayidx); cg.c:827:17
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=$x9
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(4): Data Latency=4 Reg=$w8
    SU(3): Anti Latency=0
SU(3):   renamable $w9 = LDRWui $sp, 7, debug-location !1130 :: (dereferenceable load 4 from %ir.i); cg.c:827:27
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(2): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    SU(4): Data Latency=4 Reg=$w9
SU(4):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1132; cg.c:827:17
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=$w9
    SU(2): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 1, %bb.10, implicit $nzcv, debug-location !1132; cg.c:827:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 9
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 9
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x8 = LDRXui $sp, 5, debug-location !1126 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:827:17
  Ready @0c
  TopQ.A BotLatency SU(0) 9c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x9 = LDRSWui $sp, 8, debug-location !1129 :: (dereferenceable load 4 from %ir.ii); cg.c:827:20
  Ready @1c
  TopQ.A BotLatency SU(1) 9c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w8 = LDRWroX renamable $x8, renamable $x9, 0, 1, debug-location !1126 :: (load 4 from %ir.arrayidx); cg.c:827:17
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w9 = LDRWui $sp, 7, debug-location !1130 :: (dereferenceable load 4 from %ir.i); cg.c:827:27
  Ready @6c
  TopQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 10 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1132; cg.c:827:17
  Ready @10c
  TopQ.A TopLatency SU(4) 8c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   renamable $x8 = LDRXui $sp, 5, debug-location !1126 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:827:17
SU(1):   renamable $x9 = LDRSWui $sp, 8, debug-location !1129 :: (dereferenceable load 4 from %ir.ii); cg.c:827:20
SU(2):   renamable $w8 = LDRWroX renamable $x8, renamable $x9, 0, 1, debug-location !1126 :: (load 4 from %ir.arrayidx); cg.c:827:17
SU(3):   renamable $w9 = LDRWui $sp, 7, debug-location !1130 :: (dereferenceable load 4 from %ir.i); cg.c:827:27
SU(4):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1132; cg.c:827:17

Fixup kills for %bb.5
Fixup kills for %bb.6
Fixup kills for %bb.7
********** MI Scheduling **********
sprnvc:%bb.8 if.end9
  From: renamable $d0 = LDRDui $sp, 2, debug-location !1143 :: (dereferenceable load 8 from %ir.vecelt); cg.c:834:18
    To: B %bb.1
 RegionInstrs: 11
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDRDui $sp, 2, debug-location !1143 :: (dereferenceable load 8 from %ir.vecelt); cg.c:834:18
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(3): Data Latency=4 Reg=$d0
    SU(7): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
SU(1):   renamable $x8 = LDRXui $sp, 6, debug-location !1144 :: (dereferenceable load 8 from %ir.v.addr); cg.c:834:9
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(4): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x8
    SU(7): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
SU(2):   renamable $x9 = LDRSWui $sp, 9, debug-location !1145 :: (dereferenceable load 4 from %ir.nzv); cg.c:834:11
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(5): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x9
    SU(10): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
SU(3):   STRDroX renamable $d0, renamable $x8, renamable $x9, 0, 1, debug-location !1146 :: (store 8 into %ir.arrayidx11); cg.c:834:16
  # preds left       : 6
  # succs left       : 8
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(2): Data Latency=4 Reg=$x9
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=$x8
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=$d0
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(4): Anti Latency=0
    SU(5): Anti Latency=0
    SU(10): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(8): Ord  Latency=1 Memory
    SU(6): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
    SU(4): Ord  Latency=1 Memory
SU(4):   renamable $w8 = LDRWui $sp, 7, debug-location !1147 :: (dereferenceable load 4 from %ir.i); cg.c:835:19
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(3): Anti Latency=0
    SU(3): Ord  Latency=1 Memory
    SU(1): Out  Latency=1
  Successors:
    SU(8): Out  Latency=1
    SU(7): Data Latency=4 Reg=$w8
    SU(7): Ord  Latency=0 Memory
SU(5):   renamable $x9 = LDRXui $sp, 5, debug-location !1148 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:835:9
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(3): Anti Latency=0
    SU(3): Ord  Latency=1 Memory
    SU(2): Out  Latency=1
  Successors:
    SU(7): Data Latency=4 Reg=$x9
    SU(7): Ord  Latency=0 Memory
SU(6):   renamable $x10 = LDRSWui $sp, 9, debug-location !1149 :: (dereferenceable load 4 from %ir.nzv); cg.c:835:12
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(7): Data Latency=4 Reg=$x10
    SU(10): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
SU(7):   STRWroX renamable $w8, renamable $x9, renamable $x10, 0, 1, debug-location !1150 :: (store 4 into %ir.arrayidx13); cg.c:835:17
  # preds left       : 10
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 6
  Predecessors:
    SU(6): Data Latency=4 Reg=$x10
    SU(6): Ord  Latency=0 Memory
    SU(5): Data Latency=4 Reg=$x9
    SU(5): Ord  Latency=0 Memory
    SU(4): Data Latency=4 Reg=$w8
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(8): Anti Latency=0
    SU(10): Ord  Latency=0 Memory
    SU(8): Ord  Latency=1 Memory
SU(8):   renamable $w8 = LDRWui $sp, 9, debug-location !1151 :: (dereferenceable load 4 from %ir.nzv); cg.c:836:15
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 5
  Predecessors:
    SU(7): Anti Latency=0
    SU(7): Ord  Latency=1 Memory
    SU(4): Out  Latency=1
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=4 Reg=$w8
    SU(10): Ord  Latency=0 Memory
SU(9):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1152; cg.c:836:19
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 1
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=4 Reg=$w8
  Successors:
    SU(10): Data Latency=1 Reg=$w8
SU(10):   STRWui renamable $w8, $sp, 9, debug-location !1153 :: (store 4 into %ir.nzv); cg.c:836:13
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=$w8
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
ExitSU:   B %bb.1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 15
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 15
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $d0 = LDRDui $sp, 2, debug-location !1143 :: (dereferenceable load 8 from %ir.vecelt); cg.c:834:18
  Ready @0c
  TopQ.A BotLatency SU(0) 15c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 15
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) renamable $x8 = LDRXui $sp, 6, debug-location !1144 :: (dereferenceable load 8 from %ir.v.addr); cg.c:834:9
  Ready @1c
  TopQ.A BotLatency SU(1) 15c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x9 = LDRSWui $sp, 9, debug-location !1145 :: (dereferenceable load 4 from %ir.nzv); cg.c:834:11
  Ready @2c
  TopQ.A BotLatency SU(2) 15c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 6 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STRDroX renamable $d0, renamable $x8, renamable $x9, 0, 1, debug-location !1146 :: (store 8 into %ir.arrayidx11); cg.c:834:16
  Ready @6c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 5 4 
  TopQ.A RemainingLatency 0 + 7c > CritPath 15
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) renamable $w8 = LDRWui $sp, 7, debug-location !1147 :: (dereferenceable load 4 from %ir.i); cg.c:835:19
  Ready @7c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 5 
  TopQ.A RemainingLatency 0 + 8c > CritPath 15
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $x9 = LDRXui $sp, 5, debug-location !1148 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:835:9
  Ready @8c
  TopQ.A BotLatency SU(5) 10c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $x10 = LDRSWui $sp, 9, debug-location !1149 :: (dereferenceable load 4 from %ir.nzv); cg.c:835:12
  Ready @9c
  TopQ.A BotLatency SU(6) 10c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 7
  Executed: 10c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 13 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) STRWroX renamable $w8, renamable $x9, renamable $x10, 0, 1, debug-location !1150 :: (store 4 into %ir.arrayidx13); cg.c:835:17
  Ready @13c
  TopQ.A TopLatency SU(7) 9c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 8
  Executed: 14c
  Critical: 8c, 8 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) renamable $w8 = LDRWui $sp, 9, debug-location !1151 :: (dereferenceable load 4 from %ir.nzv); cg.c:836:15
  Ready @14c
  TopQ.A TopLatency SU(8) 10c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 9
  Executed: 15c
  Critical: 9c, 9 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 18 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1152; cg.c:836:19
  Ready @18c
  TopQ.A TopLatency SU(9) 14c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 10
  Executed: 19c
  Critical: 10c, 10 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) STRWui renamable $w8, $sp, 9, debug-location !1153 :: (store 4 into %ir.nzv); cg.c:836:13
  Ready @19c
  TopQ.A TopLatency SU(10) 15c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 11
  Executed: 20c
  Critical: 11c, 11 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   renamable $d0 = LDRDui $sp, 2, debug-location !1143 :: (dereferenceable load 8 from %ir.vecelt); cg.c:834:18
SU(1):   renamable $x8 = LDRXui $sp, 6, debug-location !1144 :: (dereferenceable load 8 from %ir.v.addr); cg.c:834:9
SU(2):   renamable $x9 = LDRSWui $sp, 9, debug-location !1145 :: (dereferenceable load 4 from %ir.nzv); cg.c:834:11
SU(3):   STRDroX renamable $d0, renamable $x8, renamable $x9, 0, 1, debug-location !1146 :: (store 8 into %ir.arrayidx11); cg.c:834:16
SU(4):   renamable $w8 = LDRWui $sp, 7, debug-location !1147 :: (dereferenceable load 4 from %ir.i); cg.c:835:19
SU(5):   renamable $x9 = LDRXui $sp, 5, debug-location !1148 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:835:9
SU(6):   renamable $x10 = LDRSWui $sp, 9, debug-location !1149 :: (dereferenceable load 4 from %ir.nzv); cg.c:835:12
SU(7):   STRWroX renamable $w8, renamable $x9, renamable $x10, 0, 1, debug-location !1150 :: (store 4 into %ir.arrayidx13); cg.c:835:17
SU(8):   renamable $w8 = LDRWui $sp, 9, debug-location !1151 :: (dereferenceable load 4 from %ir.nzv); cg.c:836:15
SU(9):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1152; cg.c:836:19
SU(10):   STRWui renamable $w8, $sp, 9, debug-location !1153 :: (store 4 into %ir.nzv); cg.c:836:13

Fixup kills for %bb.8
********** MI Scheduling **********
sprnvc:%bb.9 while.end
  From: $fp, $lr = frame-destroy LDPXi $sp, 12, debug-location !1154 :: (load 8 from %stack.12), (load 8 from %stack.11); cg.c:838:1
    To: $sp = frame-destroy ADDXri $sp, 112, 0, debug-location !1154; cg.c:838:1
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   $fp, $lr = frame-destroy LDPXi $sp, 12, debug-location !1154 :: (load 8 from %stack.12), (load 8 from %stack.11); cg.c:838:1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(1):   $x20, $x19 = frame-destroy LDPXi $sp, 10, debug-location !1154 :: (load 8 from %stack.14), (load 8 from %stack.13); cg.c:838:1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(2):   $x21 = frame-destroy LDRXui $sp, 8, debug-location !1154 :: (load 8 from %stack.15); cg.c:838:1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
ExitSU:   $sp = frame-destroy ADDXri $sp, 112, 0, debug-location !1154; cg.c:838:1
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path: (PGS-RR) 3
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 3
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $fp, $lr = frame-destroy LDPXi $sp, 12, debug-location !1154 :: (load 8 from %stack.12), (load 8 from %stack.11); cg.c:838:1
  Ready @0c
  TopQ.A BotLatency SU(0) 3c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 3
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) $x20, $x19 = frame-destroy LDPXi $sp, 10, debug-location !1154 :: (load 8 from %stack.14), (load 8 from %stack.13); cg.c:838:1
  Ready @1c
  TopQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $x21 = frame-destroy LDRXui $sp, 8, debug-location !1154 :: (load 8 from %stack.15); cg.c:838:1
  Ready @2c
  TopQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   $fp, $lr = frame-destroy LDPXi $sp, 12, debug-location !1154 :: (load 8 from %stack.12), (load 8 from %stack.11); cg.c:838:1
SU(1):   $x20, $x19 = frame-destroy LDPXi $sp, 10, debug-location !1154 :: (load 8 from %stack.14), (load 8 from %stack.13); cg.c:838:1
SU(2):   $x21 = frame-destroy LDRXui $sp, 8, debug-location !1154 :: (load 8 from %stack.15); cg.c:838:1

Fixup kills for %bb.9
********** MI Scheduling **********
sprnvc:%bb.10 for.inc
  From: renamable $w8 = LDRWui $sp, 8, debug-location !1136 :: (dereferenceable load 4 from %ir.ii); cg.c:826:34
    To: B %bb.4
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 8, debug-location !1136 :: (dereferenceable load 4 from %ir.ii); cg.c:826:34
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1136; cg.c:826:34
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STRWui renamable $w8, $sp, 8, debug-location !1136 :: (store 4 into %ir.ii); cg.c:826:34
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.4
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 8, debug-location !1136 :: (dereferenceable load 4 from %ir.ii); cg.c:826:34
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1136; cg.c:826:34
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w8, $sp, 8, debug-location !1136 :: (store 4 into %ir.ii); cg.c:826:34
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   renamable $w8 = LDRWui $sp, 8, debug-location !1136 :: (dereferenceable load 4 from %ir.ii); cg.c:826:34
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1136; cg.c:826:34
SU(2):   STRWui renamable $w8, $sp, 8, debug-location !1136 :: (store 4 into %ir.ii); cg.c:826:34

Fixup kills for %bb.10
Before MISched:
# Machine code for function vecset: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=8, align=8, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=8, align=8, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=8, align=8, at location [SP]
  fi#6: size=4, align=4, at location [SP]
  fi#7: size=4, align=4, at location [SP]
Function Live Ins: $w0 in %0, $x1 in %1, $x2 in %2, $x3 in %3, $w4 in %4, $d0 in %5

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $w0, $x1, $x2, $x3, $w4, $d0
  %5:fpr64 = COPY $d0
  %4:gpr32 = COPY $w4
  %3:gpr64 = COPY $x3
  %2:gpr64 = COPY $x2
  %1:gpr64 = COPY $x1
  %0:gpr32 = COPY $w0
  STRWui %0:gpr32, %stack.0.n.addr, 0 :: (store 4 into %ir.n.addr)
  STRXui %1:gpr64, %stack.1.v.addr, 0 :: (store 8 into %ir.v.addr)
  STRXui %2:gpr64, %stack.2.iv.addr, 0 :: (store 8 into %ir.iv.addr)
  STRXui %3:gpr64, %stack.3.nzv.addr, 0 :: (store 8 into %ir.nzv.addr)
  STRWui %4:gpr32, %stack.4.i.addr, 0 :: (store 4 into %ir.i.addr)
  STRDui %5:fpr64, %stack.5.val.addr, 0 :: (store 8 into %ir.val.addr)
  STRWui $wzr, %stack.7.set, 0, debug-location !1174 :: (store 4 into %ir.set); cg.c:854:9
  STRWui $wzr, %stack.6.k, 0, debug-location !1175 :: (store 4 into %ir.k); cg.c:855:12
  %31:gpr32 = MOVi32imm 1

bb.1.for.cond:
; predecessors: %bb.0, %bb.4
  successors: %bb.2(0x7c000000), %bb.5(0x04000000); %bb.2(96.88%), %bb.5(3.12%)

  %7:gpr32 = LDRWui %stack.6.k, 0, debug-location !1178 :: (dereferenceable load 4 from %ir.k); cg.c:855:17
  %8:gpr64common = LDRXui %stack.3.nzv.addr, 0, debug-location !1180 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:855:22
  %9:gpr32 = LDRWui %8:gpr64common, 0, debug-location !1181 :: (load 4 from %ir.1); cg.c:855:21
  dead $wzr = SUBSWrr %7:gpr32, %9:gpr32, implicit-def $nzcv, debug-location !1183; cg.c:855:5
  Bcc 10, %bb.5, implicit killed $nzcv, debug-location !1183; cg.c:855:5
  B %bb.2, debug-location !1183; cg.c:855:5

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.3(0x40000000), %bb.4(0x40000000); %bb.3(50.00%), %bb.4(50.00%)

  %23:gpr64common = LDRXui %stack.2.iv.addr, 0, debug-location !1184 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:856:13
  %24:gpr64 = LDRSWui %stack.6.k, 0, debug-location !1187 :: (dereferenceable load 4 from %ir.k); cg.c:856:16
  %25:gpr32 = LDRWroX %23:gpr64common, %24:gpr64, 0, 1, debug-location !1184 :: (load 4 from %ir.arrayidx); cg.c:856:13
  %26:gpr32 = LDRWui %stack.4.i.addr, 0, debug-location !1188 :: (dereferenceable load 4 from %ir.i.addr); cg.c:856:22
  dead $wzr = SUBSWrr %25:gpr32, %26:gpr32, implicit-def $nzcv, debug-location !1190; cg.c:856:13
  Bcc 1, %bb.4, implicit killed $nzcv, debug-location !1190; cg.c:856:13
  B %bb.3, debug-location !1190; cg.c:856:13

bb.3.if.then:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %28:fpr64 = LDRDui %stack.5.val.addr, 0, debug-location !1191 :: (dereferenceable load 8 from %ir.val.addr); cg.c:857:20
  %29:gpr64common = LDRXui %stack.1.v.addr, 0, debug-location !1193 :: (dereferenceable load 8 from %ir.v.addr); cg.c:857:13
  %30:gpr64 = LDRSWui %stack.6.k, 0, debug-location !1194 :: (dereferenceable load 4 from %ir.k); cg.c:857:15
  STRDroX %28:fpr64, %29:gpr64common, %30:gpr64, 0, 1, debug-location !1195 :: (store 8 into %ir.arrayidx3); cg.c:857:18
  STRWui %31:gpr32, %stack.7.set, 0, debug-location !1196 :: (store 4 into %ir.set); cg.c:858:17

bb.4.for.inc:
; predecessors: %bb.2, %bb.3
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %32:gpr32common = LDRWui %stack.6.k, 0, debug-location !1198 :: (dereferenceable load 4 from %ir.k); cg.c:855:28
  %33:gpr32common = nsw ADDWri %32:gpr32common, 1, 0, debug-location !1198; cg.c:855:28
  STRWui %33:gpr32common, %stack.6.k, 0, debug-location !1198 :: (store 4 into %ir.k); cg.c:855:28
  B %bb.1, debug-location !1199; cg.c:855:5

bb.5.for.end:
; predecessors: %bb.1
  successors: %bb.6(0x30000000), %bb.7(0x50000000); %bb.6(37.50%), %bb.7(62.50%)

  %11:gpr32 = LDRWui %stack.7.set, 0, debug-location !1202 :: (dereferenceable load 4 from %ir.set); cg.c:861:9
  CBNZW %11:gpr32, %bb.7, debug-location !1205; cg.c:861:9
  B %bb.6, debug-location !1205; cg.c:861:9

bb.6.if.then5:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %12:fpr64 = LDRDui %stack.5.val.addr, 0, debug-location !1206 :: (dereferenceable load 8 from %ir.val.addr); cg.c:862:19
  %13:gpr64common = LDRXui %stack.1.v.addr, 0, debug-location !1208 :: (dereferenceable load 8 from %ir.v.addr); cg.c:862:9
  %14:gpr64common = LDRXui %stack.3.nzv.addr, 0, debug-location !1209 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:862:12
  %15:gpr64 = LDRSWui %14:gpr64common, 0, debug-location !1210 :: (load 4 from %ir.14); cg.c:862:11
  STRDroX %12:fpr64, %13:gpr64common, %15:gpr64, 0, 1, debug-location !1211 :: (store 8 into %ir.arrayidx7); cg.c:862:17
  %16:gpr32 = LDRWui %stack.4.i.addr, 0, debug-location !1212 :: (dereferenceable load 4 from %ir.i.addr); cg.c:863:20
  %17:gpr64common = LDRXui %stack.2.iv.addr, 0, debug-location !1213 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:863:9
  %18:gpr64common = LDRXui %stack.3.nzv.addr, 0, debug-location !1214 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:863:13
  %19:gpr64 = LDRSWui %18:gpr64common, 0, debug-location !1215 :: (load 4 from %ir.18); cg.c:863:12
  STRWroX %16:gpr32, %17:gpr64common, %19:gpr64, 0, 1, debug-location !1216 :: (store 4 into %ir.arrayidx9); cg.c:863:18
  %20:gpr64common = LDRXui %stack.3.nzv.addr, 0, debug-location !1217 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:864:17
  %21:gpr32common = LDRWui %20:gpr64common, 0, debug-location !1218 :: (load 4 from %ir.20); cg.c:864:16
  %22:gpr32common = nsw ADDWri %21:gpr32common, 1, 0, debug-location !1219; cg.c:864:21
  STRWui %22:gpr32common, %20:gpr64common, 0, debug-location !1221 :: (store 4 into %ir.22); cg.c:864:14

bb.7.if.end10:
; predecessors: %bb.5, %bb.6

  RET_ReallyLR debug-location !1223; cg.c:866:1

# End machine code for function vecset.

********** MI Scheduling **********
vecset:%bb.0 entry
  From: %5:fpr64 = COPY $d0
    To: End RegionInstrs: 15
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %5:fpr64 = COPY $d0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(11): Data Latency=0 Reg=%5
  Single Issue       : false;
SU(1):   %4:gpr32 = COPY $w4
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(10): Data Latency=0 Reg=%4
  Single Issue       : false;
SU(2):   %3:gpr64 = COPY $x3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(9): Data Latency=0 Reg=%3
  Single Issue       : false;
SU(3):   %2:gpr64 = COPY $x2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(8): Data Latency=0 Reg=%2
  Single Issue       : false;
SU(4):   %1:gpr64 = COPY $x1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(7): Data Latency=0 Reg=%1
  Single Issue       : false;
SU(5):   %0:gpr32 = COPY $w0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(6): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(6):   STRWui %0:gpr32, %stack.0.n.addr, 0 :: (store 4 into %ir.n.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(5): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(7):   STRXui %1:gpr64, %stack.1.v.addr, 0 :: (store 8 into %ir.v.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(4): Data Latency=0 Reg=%1
  Single Issue       : false;
SU(8):   STRXui %2:gpr64, %stack.2.iv.addr, 0 :: (store 8 into %ir.iv.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Data Latency=0 Reg=%2
  Single Issue       : false;
SU(9):   STRXui %3:gpr64, %stack.3.nzv.addr, 0 :: (store 8 into %ir.nzv.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Data Latency=0 Reg=%3
  Single Issue       : false;
SU(10):   STRWui %4:gpr32, %stack.4.i.addr, 0 :: (store 4 into %ir.i.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%4
  Single Issue       : false;
SU(11):   STRDui %5:fpr64, %stack.5.val.addr, 0 :: (store 8 into %ir.val.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%5
  Single Issue       : false;
SU(12):   STRWui $wzr, %stack.7.set, 0, debug-location !1174 :: (store 4 into %ir.set); cg.c:854:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(13):   STRWui $wzr, %stack.6.k, 0, debug-location !1175 :: (store 4 into %ir.k); cg.c:855:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(14):   %31:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 13 12 11 10 9 8 7 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 12 13 14 
Picking from Bot:
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %5:fpr64 = COPY $d0
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 13 12 11 10 9 8 7 6 
Queue TopQ.P: 
Queue TopQ.A: 14 1 2 3 4 5 12 13 11 
Picking from Bot:
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(14) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(1) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(1) %4:gpr32 = COPY $w4
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 13 12 11 10 9 8 7 6 
Queue TopQ.P: 
Queue TopQ.A: 14 11 2 3 4 5 12 13 10 
Picking from Bot:
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(14) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(2) PHYS-REG                           
  Cand SU(2) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(2) %3:gpr64 = COPY $x3
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 13 12 11 10 9 8 7 6 
Queue TopQ.P: 
Queue TopQ.A: 14 11 10 3 4 5 12 13 9 
Picking from Bot:
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(14) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(3) PHYS-REG                           
  Cand SU(3) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(3) %2:gpr64 = COPY $x2
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 13 12 11 10 9 8 7 6 
Queue TopQ.P: 
Queue TopQ.A: 14 11 10 9 4 5 12 13 8 
Picking from Bot:
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(14) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(4) PHYS-REG                           
  Cand SU(4) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(4) %1:gpr64 = COPY $x1
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 13 12 11 10 9 8 7 6 
Queue TopQ.P: 
Queue TopQ.A: 14 11 10 9 8 5 12 13 7 
Picking from Bot:
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(14) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(5) PHYS-REG                           
  Cand SU(5) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(5) %0:gpr32 = COPY $w0
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 13 12 11 10 9 8 7 6 
Queue TopQ.P: 
Queue TopQ.A: 14 11 10 9 8 7 12 13 6 
Picking from Bot:
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(14) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) %31:gpr32 = MOVi32imm 1
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 13 12 11 10 9 8 7 
Queue TopQ.P: 
Queue TopQ.A: 6 11 10 9 8 7 12 13 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(6) NOCAND                             
Pick Bot ORDER     
Scheduling SU(13) STRWui $wzr, %stack.6.k, 0, debug-location !1175 :: (store 4 into %ir.k); cg.c:855:12
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 12 11 10 9 8 
Queue TopQ.P: 
Queue TopQ.A: 6 11 10 9 8 7 12 
  BotQ.A RemainingLatency 0 + 2c > CritPath 0
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(6) NOCAND                             
Pick Bot ORDER     
Scheduling SU(12) STRWui $wzr, %stack.7.set, 0, debug-location !1174 :: (store 4 into %ir.set); cg.c:854:9
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 11 10 9 
Queue TopQ.P: 
Queue TopQ.A: 6 11 10 9 8 7 
  BotQ.A RemainingLatency 0 + 3c > CritPath 0
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(6) NOCAND                             
Pick Bot ORDER     
Scheduling SU(11) STRDui %5:fpr64, %stack.5.val.addr, 0 :: (store 8 into %ir.val.addr)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 9 10 
Queue TopQ.P: 
Queue TopQ.A: 6 7 10 9 8 
  BotQ.A RemainingLatency 0 + 4c > CritPath 0
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(6) NOCAND                             
Pick Bot ORDER     
Scheduling SU(10) STRWui %4:gpr32, %stack.4.i.addr, 0 :: (store 4 into %ir.i.addr)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 9 
Queue TopQ.P: 
Queue TopQ.A: 6 7 8 9 
  BotQ.A RemainingLatency 0 + 5c > CritPath 0
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(6) NOCAND                             
Pick Bot ORDER     
Scheduling SU(9) STRXui %3:gpr64, %stack.3.nzv.addr, 0 :: (store 8 into %ir.nzv.addr)
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 
Queue TopQ.P: 
Queue TopQ.A: 6 7 8 
  BotQ.A RemainingLatency 0 + 6c > CritPath 0
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(6) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) STRXui %2:gpr64, %stack.2.iv.addr, 0 :: (store 8 into %ir.iv.addr)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 
Queue TopQ.P: 
Queue TopQ.A: 6 7 
  BotQ.A RemainingLatency 0 + 7c > CritPath 0
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(6) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) STRXui %1:gpr64, %stack.1.v.addr, 0 :: (store 8 into %ir.v.addr)
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) STRWui %0:gpr32, %stack.0.n.addr, 0 :: (store 4 into %ir.n.addr)
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %5:fpr64 = COPY $d0
SU(1):   %4:gpr32 = COPY $w4
SU(2):   %3:gpr64 = COPY $x3
SU(3):   %2:gpr64 = COPY $x2
SU(4):   %1:gpr64 = COPY $x1
SU(5):   %0:gpr32 = COPY $w0
SU(6):   STRWui %0:gpr32, %stack.0.n.addr, 0 :: (store 4 into %ir.n.addr)
SU(7):   STRXui %1:gpr64, %stack.1.v.addr, 0 :: (store 8 into %ir.v.addr)
SU(8):   STRXui %2:gpr64, %stack.2.iv.addr, 0 :: (store 8 into %ir.iv.addr)
SU(9):   STRXui %3:gpr64, %stack.3.nzv.addr, 0 :: (store 8 into %ir.nzv.addr)
SU(10):   STRWui %4:gpr32, %stack.4.i.addr, 0 :: (store 4 into %ir.i.addr)
SU(11):   STRDui %5:fpr64, %stack.5.val.addr, 0 :: (store 8 into %ir.val.addr)
SU(12):   STRWui $wzr, %stack.7.set, 0, debug-location !1174 :: (store 4 into %ir.set); cg.c:854:9
SU(13):   STRWui $wzr, %stack.6.k, 0, debug-location !1175 :: (store 4 into %ir.k); cg.c:855:12
SU(14):   %31:gpr32 = MOVi32imm 1

********** MI Scheduling **********
vecset:%bb.1 for.cond
  From: %7:gpr32 = LDRWui %stack.6.k, 0, debug-location !1178 :: (dereferenceable load 4 from %ir.k); cg.c:855:17
    To: Bcc 10, %bb.5, implicit killed $nzcv, debug-location !1183; cg.c:855:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %7:gpr32 = LDRWui %stack.6.k, 0, debug-location !1178 :: (dereferenceable load 4 from %ir.k); cg.c:855:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=%7
  Single Issue       : false;
SU(1):   %8:gpr64common = LDRXui %stack.3.nzv.addr, 0, debug-location !1180 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:855:22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Data Latency=4 Reg=%8
  Single Issue       : false;
SU(2):   %9:gpr32 = LDRWui %8:gpr64common, 0, debug-location !1181 :: (load 4 from %ir.1); cg.c:855:21
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%8
  Successors:
    SU(3): Data Latency=4 Reg=%9
  Single Issue       : false;
SU(3):   dead $wzr = SUBSWrr %7:gpr32, %9:gpr32, implicit-def $nzcv, debug-location !1183; cg.c:855:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=%9
    SU(0): Data Latency=4 Reg=%7
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.5, implicit killed $nzcv, debug-location !1183; cg.c:855:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) dead $wzr = SUBSWrr %7:gpr32, %9:gpr32, implicit-def $nzcv, debug-location !1183; cg.c:855:5
  Ready @1c
  BotQ.A TopLatency SU(3) 8c
  BotQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(2) 4c
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %9:gpr32 = LDRWui %8:gpr64common, 0, debug-location !1181 :: (load 4 from %ir.1); cg.c:855:21
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %7:gpr32 = LDRWui %stack.6.k, 0, debug-location !1178 :: (dereferenceable load 4 from %ir.k); cg.c:855:17
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 9 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %8:gpr64common = LDRXui %stack.3.nzv.addr, 0, debug-location !1180 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:855:22
  Ready @9c
  BotQ.A BotLatency SU(1) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 4
  Executed: 10c
  Critical: 4c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(1):   %8:gpr64common = LDRXui %stack.3.nzv.addr, 0, debug-location !1180 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:855:22
SU(0):   %7:gpr32 = LDRWui %stack.6.k, 0, debug-location !1178 :: (dereferenceable load 4 from %ir.k); cg.c:855:17
SU(2):   %9:gpr32 = LDRWui %8:gpr64common, 0, debug-location !1181 :: (load 4 from %ir.1); cg.c:855:21
SU(3):   dead $wzr = SUBSWrr %7:gpr32, %9:gpr32, implicit-def $nzcv, debug-location !1183; cg.c:855:5

********** MI Scheduling **********
vecset:%bb.2 for.body
  From: %23:gpr64common = LDRXui %stack.2.iv.addr, 0, debug-location !1184 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:856:13
    To: Bcc 1, %bb.4, implicit killed $nzcv, debug-location !1190; cg.c:856:13
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %23:gpr64common = LDRXui %stack.2.iv.addr, 0, debug-location !1184 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:856:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Data Latency=4 Reg=%23
  Single Issue       : false;
SU(1):   %24:gpr64 = LDRSWui %stack.6.k, 0, debug-location !1187 :: (dereferenceable load 4 from %ir.k); cg.c:856:16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Data Latency=4 Reg=%24
  Single Issue       : false;
SU(2):   %25:gpr32 = LDRWroX %23:gpr64common, %24:gpr64, 0, 1, debug-location !1184 :: (load 4 from %ir.arrayidx); cg.c:856:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%24
    SU(0): Data Latency=4 Reg=%23
  Successors:
    SU(4): Data Latency=4 Reg=%25
  Single Issue       : false;
SU(3):   %26:gpr32 = LDRWui %stack.4.i.addr, 0, debug-location !1188 :: (dereferenceable load 4 from %ir.i.addr); cg.c:856:22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=%26
  Single Issue       : false;
SU(4):   dead $wzr = SUBSWrr %25:gpr32, %26:gpr32, implicit-def $nzcv, debug-location !1190; cg.c:856:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=%25
    SU(3): Data Latency=4 Reg=%26
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.4, implicit killed $nzcv, debug-location !1190; cg.c:856:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) dead $wzr = SUBSWrr %25:gpr32, %26:gpr32, implicit-def $nzcv, debug-location !1190; cg.c:856:13
  Ready @1c
  BotQ.A TopLatency SU(4) 8c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
BotQ.A RemLatency SU(2) 4c
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %26:gpr32 = LDRWui %stack.4.i.addr, 0, debug-location !1188 :: (dereferenceable load 4 from %ir.i.addr); cg.c:856:22
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %25:gpr32 = LDRWroX %23:gpr64common, %24:gpr64, 0, 1, debug-location !1184 :: (load 4 from %ir.arrayidx); cg.c:856:13
  Ready @6c
  BotQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 10c > CritPath 9
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %24:gpr64 = LDRSWui %stack.6.k, 0, debug-location !1187 :: (dereferenceable load 4 from %ir.k); cg.c:856:16
  Ready @10c
  BotQ.A BotLatency SU(1) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 4
  Executed: 11c
  Critical: 4c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %23:gpr64common = LDRXui %stack.2.iv.addr, 0, debug-location !1184 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:856:13
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 5
  Executed: 12c
  Critical: 5c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %23:gpr64common = LDRXui %stack.2.iv.addr, 0, debug-location !1184 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:856:13
SU(1):   %24:gpr64 = LDRSWui %stack.6.k, 0, debug-location !1187 :: (dereferenceable load 4 from %ir.k); cg.c:856:16
SU(2):   %25:gpr32 = LDRWroX %23:gpr64common, %24:gpr64, 0, 1, debug-location !1184 :: (load 4 from %ir.arrayidx); cg.c:856:13
SU(3):   %26:gpr32 = LDRWui %stack.4.i.addr, 0, debug-location !1188 :: (dereferenceable load 4 from %ir.i.addr); cg.c:856:22
SU(4):   dead $wzr = SUBSWrr %25:gpr32, %26:gpr32, implicit-def $nzcv, debug-location !1190; cg.c:856:13

********** MI Scheduling **********
vecset:%bb.3 if.then
  From: %28:fpr64 = LDRDui %stack.5.val.addr, 0, debug-location !1191 :: (dereferenceable load 8 from %ir.val.addr); cg.c:857:20
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %28:fpr64 = LDRDui %stack.5.val.addr, 0, debug-location !1191 :: (dereferenceable load 8 from %ir.val.addr); cg.c:857:20
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%28
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %29:gpr64common = LDRXui %stack.1.v.addr, 0, debug-location !1193 :: (dereferenceable load 8 from %ir.v.addr); cg.c:857:13
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%29
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %30:gpr64 = LDRSWui %stack.6.k, 0, debug-location !1194 :: (dereferenceable load 4 from %ir.k); cg.c:857:15
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%30
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   STRDroX %28:fpr64, %29:gpr64common, %30:gpr64, 0, 1, debug-location !1195 :: (store 8 into %ir.arrayidx3); cg.c:857:18
  # preds left       : 6
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%30
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%29
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%28
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   STRWui %31:gpr32, %stack.7.set, 0, debug-location !1196 :: (store 4 into %ir.set); cg.c:858:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) STRWui %31:gpr32, %stack.7.set, 0, debug-location !1196 :: (store 4 into %ir.set); cg.c:858:17
  Ready @0c
  BotQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) STRDroX %28:fpr64, %29:gpr64common, %30:gpr64, 0, 1, debug-location !1195 :: (store 8 into %ir.arrayidx3); cg.c:857:18
  Ready @1c
  BotQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  BotQ.A RemainingLatency 0 + 5c > CritPath 4
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %30:gpr64 = LDRSWui %stack.6.k, 0, debug-location !1194 :: (dereferenceable load 4 from %ir.k); cg.c:857:15
  Ready @5c
  BotQ.A BotLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 6c > CritPath 4
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %29:gpr64common = LDRXui %stack.1.v.addr, 0, debug-location !1193 :: (dereferenceable load 8 from %ir.v.addr); cg.c:857:13
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %28:fpr64 = LDRDui %stack.5.val.addr, 0, debug-location !1191 :: (dereferenceable load 8 from %ir.val.addr); cg.c:857:20
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %28:fpr64 = LDRDui %stack.5.val.addr, 0, debug-location !1191 :: (dereferenceable load 8 from %ir.val.addr); cg.c:857:20
SU(1):   %29:gpr64common = LDRXui %stack.1.v.addr, 0, debug-location !1193 :: (dereferenceable load 8 from %ir.v.addr); cg.c:857:13
SU(2):   %30:gpr64 = LDRSWui %stack.6.k, 0, debug-location !1194 :: (dereferenceable load 4 from %ir.k); cg.c:857:15
SU(3):   STRDroX %28:fpr64, %29:gpr64common, %30:gpr64, 0, 1, debug-location !1195 :: (store 8 into %ir.arrayidx3); cg.c:857:18
SU(4):   STRWui %31:gpr32, %stack.7.set, 0, debug-location !1196 :: (store 4 into %ir.set); cg.c:858:17

********** MI Scheduling **********
vecset:%bb.4 for.inc
  From: %32:gpr32common = LDRWui %stack.6.k, 0, debug-location !1198 :: (dereferenceable load 4 from %ir.k); cg.c:855:28
    To: B %bb.1, debug-location !1199; cg.c:855:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %32:gpr32common = LDRWui %stack.6.k, 0, debug-location !1198 :: (dereferenceable load 4 from %ir.k); cg.c:855:28
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%32
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %33:gpr32common = nsw ADDWri %32:gpr32common, 1, 0, debug-location !1198; cg.c:855:28
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%32
  Successors:
    SU(2): Data Latency=1 Reg=%33
  Single Issue       : false;
SU(2):   STRWui %33:gpr32common, %stack.6.k, 0, debug-location !1198 :: (store 4 into %ir.k); cg.c:855:28
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%33
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.1, debug-location !1199; cg.c:855:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %33:gpr32common, %stack.6.k, 0, debug-location !1198 :: (store 4 into %ir.k); cg.c:855:28
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %33:gpr32common = nsw ADDWri %32:gpr32common, 1, 0, debug-location !1198; cg.c:855:28
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %32:gpr32common = LDRWui %stack.6.k, 0, debug-location !1198 :: (dereferenceable load 4 from %ir.k); cg.c:855:28
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %32:gpr32common = LDRWui %stack.6.k, 0, debug-location !1198 :: (dereferenceable load 4 from %ir.k); cg.c:855:28
SU(1):   %33:gpr32common = nsw ADDWri %32:gpr32common, 1, 0, debug-location !1198; cg.c:855:28
SU(2):   STRWui %33:gpr32common, %stack.6.k, 0, debug-location !1198 :: (store 4 into %ir.k); cg.c:855:28

********** MI Scheduling **********
vecset:%bb.6 if.then5
  From: %12:fpr64 = LDRDui %stack.5.val.addr, 0, debug-location !1206 :: (dereferenceable load 8 from %ir.val.addr); cg.c:862:19
    To: End RegionInstrs: 14
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %12:fpr64 = LDRDui %stack.5.val.addr, 0, debug-location !1206 :: (dereferenceable load 8 from %ir.val.addr); cg.c:862:19
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 23
  Successors:
    SU(4): Data Latency=4 Reg=%12
    SU(13): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %13:gpr64common = LDRXui %stack.1.v.addr, 0, debug-location !1208 :: (dereferenceable load 8 from %ir.v.addr); cg.c:862:9
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 23
  Successors:
    SU(4): Data Latency=4 Reg=%13
    SU(13): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %14:gpr64common = LDRXui %stack.3.nzv.addr, 0, debug-location !1209 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:862:12
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 27
  Successors:
    SU(3): Data Latency=4 Reg=%14
    SU(13): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   %15:gpr64 = LDRSWui %14:gpr64common, 0, debug-location !1210 :: (load 4 from %ir.14); cg.c:862:11
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 23
  Predecessors:
    SU(2): Data Latency=4 Reg=%14
  Successors:
    SU(4): Data Latency=4 Reg=%15
    SU(13): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   STRDroX %12:fpr64, %13:gpr64common, %15:gpr64, 0, 1, debug-location !1211 :: (store 8 into %ir.arrayidx7); cg.c:862:17
  # preds left       : 7
  # succs left       : 8
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 19
  Predecessors:
    SU(3): Data Latency=4 Reg=%15
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%13
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%12
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(13): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(11): Ord  Latency=1 Memory
    SU(8): Ord  Latency=1 Memory
    SU(10): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
    SU(6): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
  Single Issue       : false;
SU(5):   %16:gpr32 = LDRWui %stack.4.i.addr, 0, debug-location !1212 :: (dereferenceable load 4 from %ir.i.addr); cg.c:863:20
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 14
  Predecessors:
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(9): Data Latency=4 Reg=%16
    SU(13): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Single Issue       : false;
SU(6):   %17:gpr64common = LDRXui %stack.2.iv.addr, 0, debug-location !1213 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:863:9
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 14
  Predecessors:
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(9): Data Latency=4 Reg=%17
    SU(13): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Single Issue       : false;
SU(7):   %18:gpr64common = LDRXui %stack.3.nzv.addr, 0, debug-location !1214 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:863:13
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 18
  Predecessors:
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(8): Data Latency=4 Reg=%18
    SU(13): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Single Issue       : false;
SU(8):   %19:gpr64 = LDRSWui %18:gpr64common, 0, debug-location !1215 :: (load 4 from %ir.18); cg.c:863:12
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 14
  Predecessors:
    SU(7): Data Latency=4 Reg=%18
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(9): Data Latency=4 Reg=%19
    SU(13): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Single Issue       : false;
SU(9):   STRWroX %16:gpr32, %17:gpr64common, %19:gpr64, 0, 1, debug-location !1216 :: (store 4 into %ir.arrayidx9); cg.c:863:18
  # preds left       : 12
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 10
  Predecessors:
    SU(8): Data Latency=4 Reg=%19
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Data Latency=4 Reg=%17
    SU(6): Ord  Latency=0 Memory
    SU(5): Data Latency=4 Reg=%16
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=1 Memory
    SU(10): Ord  Latency=1 Memory
  Single Issue       : false;
SU(10):   %20:gpr64common = LDRXui %stack.3.nzv.addr, 0, debug-location !1217 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:864:17
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 18
  Height             : 9
  Predecessors:
    SU(9): Ord  Latency=1 Memory
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(13): Data Latency=4 Reg=%20
    SU(11): Data Latency=4 Reg=%20
    SU(13): Ord  Latency=0 Memory
  Single Issue       : false;
SU(11):   %21:gpr32common = LDRWui %20:gpr64common, 0, debug-location !1218 :: (load 4 from %ir.20); cg.c:864:16
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 22
  Height             : 5
  Predecessors:
    SU(10): Data Latency=4 Reg=%20
    SU(9): Ord  Latency=1 Memory
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(12): Data Latency=4 Reg=%21
    SU(13): Ord  Latency=0 Memory
  Single Issue       : false;
SU(12):   %22:gpr32common = nsw ADDWri %21:gpr32common, 1, 0, debug-location !1219; cg.c:864:21
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 26
  Height             : 1
  Predecessors:
    SU(11): Data Latency=4 Reg=%21
  Successors:
    SU(13): Data Latency=1 Reg=%22
  Single Issue       : false;
SU(13):   STRWui %22:gpr32common, %20:gpr64common, 0, debug-location !1221 :: (store 4 into %ir.22); cg.c:864:14
  # preds left       : 14
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 27
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%22
    SU(11): Ord  Latency=0 Memory
    SU(10): Data Latency=4 Reg=%20
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
Critical Path(GS-RR ): 27
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 
Pick Bot ONLY1     
Scheduling SU(13) STRWui %22:gpr32common, %20:gpr64common, 0, debug-location !1221 :: (store 4 into %ir.22); cg.c:864:14
  Ready @0c
  BotQ.A TopLatency SU(13) 27c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 
Pick Bot ONLY1     
Scheduling SU(12) %22:gpr32common = nsw ADDWri %21:gpr32common, 1, 0, debug-location !1219; cg.c:864:21
  Ready @1c
  BotQ.A BotLatency SU(12) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 11 
Pick Bot ONLY1     
Scheduling SU(11) %21:gpr32common = LDRWui %20:gpr64common, 0, debug-location !1218 :: (load 4 from %ir.20); cg.c:864:16
  Ready @5c
  BotQ.A BotLatency SU(11) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 9 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 10 
Pick Bot ONLY1     
Scheduling SU(10) %20:gpr64common = LDRXui %stack.3.nzv.addr, 0, debug-location !1217 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:864:17
  Ready @9c
  BotQ.A BotLatency SU(10) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 4
  Executed: 10c
  Critical: 4c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Pick Bot ONLY1     
Scheduling SU(9) STRWroX %16:gpr32, %17:gpr64common, %19:gpr64, 0, 1, debug-location !1216 :: (store 4 into %ir.arrayidx9); cg.c:863:18
  Ready @10c
  BotQ.A BotLatency SU(9) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 14 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 8 5 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
BotQ.A RemLatency SU(8) 13c
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %19:gpr64 = LDRSWui %18:gpr64common, 0, debug-location !1215 :: (load 4 from %ir.18); cg.c:863:12
  Ready @14c
  BotQ.A BotLatency SU(8) 14c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 6
  Executed: 15c
  Critical: 6c, 6 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 
Queue BotQ.A: 6 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
BotQ.A RemLatency SU(6) 9c
BotQ.A RemLatency SU(7) 9c
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %17:gpr64common = LDRXui %stack.2.iv.addr, 0, debug-location !1213 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:863:9
  Ready @15c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 7
  Executed: 16c
  Critical: 7c, 7 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %16:gpr32 = LDRWui %stack.4.i.addr, 0, debug-location !1212 :: (dereferenceable load 4 from %ir.i.addr); cg.c:863:20
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 8
  Executed: 17c
  Critical: 8c, 8 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 18 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) %18:gpr64common = LDRXui %stack.3.nzv.addr, 0, debug-location !1214 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:863:13
  Ready @18c
  BotQ.A BotLatency SU(7) 18c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 9
  Executed: 19c
  Critical: 9c, 9 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) STRDroX %12:fpr64, %13:gpr64common, %15:gpr64, 0, 1, debug-location !1211 :: (store 8 into %ir.arrayidx7); cg.c:862:17
  Ready @19c
  BotQ.A BotLatency SU(4) 19c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 10
  Executed: 20c
  Critical: 10c, 10 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 23 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
BotQ.A RemLatency SU(3) 4c
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %15:gpr64 = LDRSWui %14:gpr64common, 0, debug-location !1210 :: (load 4 from %ir.14); cg.c:862:11
  Ready @23c
  BotQ.A BotLatency SU(3) 23c
  *** Max MOps 1 at cycle 23
Cycle: 24 BotQ.A
BotQ.A @24c
  Retired: 11
  Executed: 24c
  Critical: 11c, 11 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %13:gpr64common = LDRXui %stack.1.v.addr, 0, debug-location !1208 :: (dereferenceable load 8 from %ir.v.addr); cg.c:862:9
  Ready @24c
  *** Max MOps 1 at cycle 24
Cycle: 25 BotQ.A
BotQ.A @25c
  Retired: 12
  Executed: 25c
  Critical: 12c, 12 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %12:fpr64 = LDRDui %stack.5.val.addr, 0, debug-location !1206 :: (dereferenceable load 8 from %ir.val.addr); cg.c:862:19
  Ready @25c
  *** Max MOps 1 at cycle 25
Cycle: 26 BotQ.A
BotQ.A @26c
  Retired: 13
  Executed: 26c
  Critical: 13c, 13 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 27 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %14:gpr64common = LDRXui %stack.3.nzv.addr, 0, debug-location !1209 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:862:12
  Ready @27c
  BotQ.A BotLatency SU(2) 27c
  *** Max MOps 1 at cycle 27
Cycle: 28 BotQ.A
BotQ.A @28c
  Retired: 14
  Executed: 28c
  Critical: 14c, 14 MOps
  ExpectedLatency: 27c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(2):   %14:gpr64common = LDRXui %stack.3.nzv.addr, 0, debug-location !1209 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:862:12
SU(0):   %12:fpr64 = LDRDui %stack.5.val.addr, 0, debug-location !1206 :: (dereferenceable load 8 from %ir.val.addr); cg.c:862:19
SU(1):   %13:gpr64common = LDRXui %stack.1.v.addr, 0, debug-location !1208 :: (dereferenceable load 8 from %ir.v.addr); cg.c:862:9
SU(3):   %15:gpr64 = LDRSWui %14:gpr64common, 0, debug-location !1210 :: (load 4 from %ir.14); cg.c:862:11
SU(4):   STRDroX %12:fpr64, %13:gpr64common, %15:gpr64, 0, 1, debug-location !1211 :: (store 8 into %ir.arrayidx7); cg.c:862:17
SU(7):   %18:gpr64common = LDRXui %stack.3.nzv.addr, 0, debug-location !1214 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:863:13
SU(5):   %16:gpr32 = LDRWui %stack.4.i.addr, 0, debug-location !1212 :: (dereferenceable load 4 from %ir.i.addr); cg.c:863:20
SU(6):   %17:gpr64common = LDRXui %stack.2.iv.addr, 0, debug-location !1213 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:863:9
SU(8):   %19:gpr64 = LDRSWui %18:gpr64common, 0, debug-location !1215 :: (load 4 from %ir.18); cg.c:863:12
SU(9):   STRWroX %16:gpr32, %17:gpr64common, %19:gpr64, 0, 1, debug-location !1216 :: (store 4 into %ir.arrayidx9); cg.c:863:18
SU(10):   %20:gpr64common = LDRXui %stack.3.nzv.addr, 0, debug-location !1217 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:864:17
SU(11):   %21:gpr32common = LDRWui %20:gpr64common, 0, debug-location !1218 :: (load 4 from %ir.20); cg.c:864:16
SU(12):   %22:gpr32common = nsw ADDWri %21:gpr32common, 1, 0, debug-location !1219; cg.c:864:21
SU(13):   STRWui %22:gpr32common, %20:gpr64common, 0, debug-location !1221 :: (store 4 into %ir.22); cg.c:864:14

********** INTERVALS **********
B0 [0B,16r:0)  0@0B-phi
W0 [0B,96r:0)  0@0B-phi
W1 [0B,80r:0)  0@0B-phi
W2 [0B,64r:0)  0@0B-phi
W3 [0B,48r:0)  0@0B-phi
W4 [0B,32r:0)  0@0B-phi
%0 [96r,112r:0)  0@96r weight:0.000000e+00
%1 [80r,128r:0)  0@80r weight:0.000000e+00
%2 [64r,144r:0)  0@64r weight:0.000000e+00
%3 [48r,160r:0)  0@48r weight:0.000000e+00
%4 [32r,176r:0)  0@32r weight:0.000000e+00
%5 [16r,192r:0)  0@16r weight:0.000000e+00
%7 [312r,336r:0)  0@312r weight:0.000000e+00
%8 [304r,320r:0)  0@304r weight:0.000000e+00
%9 [320r,336r:0)  0@320r weight:0.000000e+00
%11 [704r,720r:0)  0@704r weight:0.000000e+00
%12 [804r,832r:0)  0@804r weight:0.000000e+00
%13 [808r,832r:0)  0@808r weight:0.000000e+00
%14 [800r,816r:0)  0@800r weight:0.000000e+00
%15 [816r,832r:0)  0@816r weight:0.000000e+00
%16 [884r,912r:0)  0@884r weight:0.000000e+00
%17 [888r,912r:0)  0@888r weight:0.000000e+00
%18 [880r,896r:0)  0@880r weight:0.000000e+00
%19 [896r,912r:0)  0@896r weight:0.000000e+00
%20 [928r,976r:0)  0@928r weight:0.000000e+00
%21 [944r,960r:0)  0@944r weight:0.000000e+00
%22 [960r,976r:0)  0@960r weight:0.000000e+00
%23 [400r,432r:0)  0@400r weight:0.000000e+00
%24 [416r,432r:0)  0@416r weight:0.000000e+00
%25 [432r,464r:0)  0@432r weight:0.000000e+00
%26 [448r,464r:0)  0@448r weight:0.000000e+00
%28 [528r,576r:0)  0@528r weight:0.000000e+00
%29 [544r,576r:0)  0@544r weight:0.000000e+00
%30 [560r,576r:0)  0@560r weight:0.000000e+00
%31 [256r,688B:0)  0@256r weight:0.000000e+00
%32 [624r,640r:0)  0@624r weight:0.000000e+00
%33 [640r,656r:0)  0@640r weight:0.000000e+00
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function vecset: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=8, align=8, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=8, align=8, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=8, align=8, at location [SP]
  fi#6: size=4, align=4, at location [SP]
  fi#7: size=4, align=4, at location [SP]
Function Live Ins: $w0 in %0, $x1 in %1, $x2 in %2, $x3 in %3, $w4 in %4, $d0 in %5

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $w0, $x1, $x2, $x3, $w4, $d0
16B	  %5:fpr64 = COPY $d0
32B	  %4:gpr32 = COPY $w4
48B	  %3:gpr64 = COPY $x3
64B	  %2:gpr64 = COPY $x2
80B	  %1:gpr64 = COPY $x1
96B	  %0:gpr32 = COPY $w0
112B	  STRWui %0:gpr32, %stack.0.n.addr, 0 :: (store 4 into %ir.n.addr)
128B	  STRXui %1:gpr64, %stack.1.v.addr, 0 :: (store 8 into %ir.v.addr)
144B	  STRXui %2:gpr64, %stack.2.iv.addr, 0 :: (store 8 into %ir.iv.addr)
160B	  STRXui %3:gpr64, %stack.3.nzv.addr, 0 :: (store 8 into %ir.nzv.addr)
176B	  STRWui %4:gpr32, %stack.4.i.addr, 0 :: (store 4 into %ir.i.addr)
192B	  STRDui %5:fpr64, %stack.5.val.addr, 0 :: (store 8 into %ir.val.addr)
224B	  STRWui $wzr, %stack.7.set, 0, debug-location !1174 :: (store 4 into %ir.set); cg.c:854:9
240B	  STRWui $wzr, %stack.6.k, 0, debug-location !1175 :: (store 4 into %ir.k); cg.c:855:12
256B	  %31:gpr32 = MOVi32imm 1

272B	bb.1.for.cond:
	; predecessors: %bb.0, %bb.4
	  successors: %bb.2(0x7c000000), %bb.5(0x04000000); %bb.2(96.88%), %bb.5(3.12%)

304B	  %8:gpr64common = LDRXui %stack.3.nzv.addr, 0, debug-location !1180 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:855:22
312B	  %7:gpr32 = LDRWui %stack.6.k, 0, debug-location !1178 :: (dereferenceable load 4 from %ir.k); cg.c:855:17
320B	  %9:gpr32 = LDRWui %8:gpr64common, 0, debug-location !1181 :: (load 4 from %ir.1); cg.c:855:21
336B	  dead $wzr = SUBSWrr %7:gpr32, %9:gpr32, implicit-def $nzcv, debug-location !1183; cg.c:855:5
352B	  Bcc 10, %bb.5, implicit killed $nzcv, debug-location !1183; cg.c:855:5
368B	  B %bb.2, debug-location !1183; cg.c:855:5

384B	bb.2.for.body:
	; predecessors: %bb.1
	  successors: %bb.3(0x40000000), %bb.4(0x40000000); %bb.3(50.00%), %bb.4(50.00%)

400B	  %23:gpr64common = LDRXui %stack.2.iv.addr, 0, debug-location !1184 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:856:13
416B	  %24:gpr64 = LDRSWui %stack.6.k, 0, debug-location !1187 :: (dereferenceable load 4 from %ir.k); cg.c:856:16
432B	  %25:gpr32 = LDRWroX %23:gpr64common, %24:gpr64, 0, 1, debug-location !1184 :: (load 4 from %ir.arrayidx); cg.c:856:13
448B	  %26:gpr32 = LDRWui %stack.4.i.addr, 0, debug-location !1188 :: (dereferenceable load 4 from %ir.i.addr); cg.c:856:22
464B	  dead $wzr = SUBSWrr %25:gpr32, %26:gpr32, implicit-def $nzcv, debug-location !1190; cg.c:856:13
480B	  Bcc 1, %bb.4, implicit killed $nzcv, debug-location !1190; cg.c:856:13
496B	  B %bb.3, debug-location !1190; cg.c:856:13

512B	bb.3.if.then:
	; predecessors: %bb.2
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

528B	  %28:fpr64 = LDRDui %stack.5.val.addr, 0, debug-location !1191 :: (dereferenceable load 8 from %ir.val.addr); cg.c:857:20
544B	  %29:gpr64common = LDRXui %stack.1.v.addr, 0, debug-location !1193 :: (dereferenceable load 8 from %ir.v.addr); cg.c:857:13
560B	  %30:gpr64 = LDRSWui %stack.6.k, 0, debug-location !1194 :: (dereferenceable load 4 from %ir.k); cg.c:857:15
576B	  STRDroX %28:fpr64, %29:gpr64common, %30:gpr64, 0, 1, debug-location !1195 :: (store 8 into %ir.arrayidx3); cg.c:857:18
592B	  STRWui %31:gpr32, %stack.7.set, 0, debug-location !1196 :: (store 4 into %ir.set); cg.c:858:17

608B	bb.4.for.inc:
	; predecessors: %bb.2, %bb.3
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

624B	  %32:gpr32common = LDRWui %stack.6.k, 0, debug-location !1198 :: (dereferenceable load 4 from %ir.k); cg.c:855:28
640B	  %33:gpr32common = nsw ADDWri %32:gpr32common, 1, 0, debug-location !1198; cg.c:855:28
656B	  STRWui %33:gpr32common, %stack.6.k, 0, debug-location !1198 :: (store 4 into %ir.k); cg.c:855:28
672B	  B %bb.1, debug-location !1199; cg.c:855:5

688B	bb.5.for.end:
	; predecessors: %bb.1
	  successors: %bb.6(0x30000000), %bb.7(0x50000000); %bb.6(37.50%), %bb.7(62.50%)

704B	  %11:gpr32 = LDRWui %stack.7.set, 0, debug-location !1202 :: (dereferenceable load 4 from %ir.set); cg.c:861:9
720B	  CBNZW %11:gpr32, %bb.7, debug-location !1205; cg.c:861:9
736B	  B %bb.6, debug-location !1205; cg.c:861:9

752B	bb.6.if.then5:
	; predecessors: %bb.5
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

800B	  %14:gpr64common = LDRXui %stack.3.nzv.addr, 0, debug-location !1209 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:862:12
804B	  %12:fpr64 = LDRDui %stack.5.val.addr, 0, debug-location !1206 :: (dereferenceable load 8 from %ir.val.addr); cg.c:862:19
808B	  %13:gpr64common = LDRXui %stack.1.v.addr, 0, debug-location !1208 :: (dereferenceable load 8 from %ir.v.addr); cg.c:862:9
816B	  %15:gpr64 = LDRSWui %14:gpr64common, 0, debug-location !1210 :: (load 4 from %ir.14); cg.c:862:11
832B	  STRDroX %12:fpr64, %13:gpr64common, %15:gpr64, 0, 1, debug-location !1211 :: (store 8 into %ir.arrayidx7); cg.c:862:17
880B	  %18:gpr64common = LDRXui %stack.3.nzv.addr, 0, debug-location !1214 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:863:13
884B	  %16:gpr32 = LDRWui %stack.4.i.addr, 0, debug-location !1212 :: (dereferenceable load 4 from %ir.i.addr); cg.c:863:20
888B	  %17:gpr64common = LDRXui %stack.2.iv.addr, 0, debug-location !1213 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:863:9
896B	  %19:gpr64 = LDRSWui %18:gpr64common, 0, debug-location !1215 :: (load 4 from %ir.18); cg.c:863:12
912B	  STRWroX %16:gpr32, %17:gpr64common, %19:gpr64, 0, 1, debug-location !1216 :: (store 4 into %ir.arrayidx9); cg.c:863:18
928B	  %20:gpr64common = LDRXui %stack.3.nzv.addr, 0, debug-location !1217 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:864:17
944B	  %21:gpr32common = LDRWui %20:gpr64common, 0, debug-location !1218 :: (load 4 from %ir.20); cg.c:864:16
960B	  %22:gpr32common = nsw ADDWri %21:gpr32common, 1, 0, debug-location !1219; cg.c:864:21
976B	  STRWui %22:gpr32common, %20:gpr64common, 0, debug-location !1221 :: (store 4 into %ir.22); cg.c:864:14

992B	bb.7.if.end10:
	; predecessors: %bb.5, %bb.6

1008B	  RET_ReallyLR debug-location !1223; cg.c:866:1

# End machine code for function vecset.

Before post-MI-sched:
# Machine code for function vecset: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-24]
  fi#3: size=8, align=8, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=8, align=8, at location [SP-48]
  fi#6: size=4, align=4, at location [SP-52]
  fi#7: size=4, align=4, at location [SP-56]
Function Live Ins: $w0, $x1, $x2, $x3, $w4, $d0

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $d0, $w0, $w4, $x1, $x2, $x3
  $sp = frame-setup SUBXri $sp, 64, 0
  frame-setup CFI_INSTRUCTION def_cfa_offset <mcsymbol >64
  STRWui killed renamable $w0, $sp, 15 :: (store 4 into %ir.n.addr)
  STPXi renamable $x2, renamable $x1, $sp, 5 :: (store 8 into %ir.v.addr), (store 8 into %ir.iv.addr)
  STRXui killed renamable $x3, $sp, 4 :: (store 8 into %ir.nzv.addr)
  STRWui killed renamable $w4, $sp, 7 :: (store 4 into %ir.i.addr)
  STRDui killed renamable $d0, $sp, 2 :: (store 8 into %ir.val.addr)
  STRXui $xzr, $sp, 1, debug-location !1174 :: (store 4 into %ir.set), (store 4 into %ir.k); cg.c:854:9
  $w8 = MOVZWi 1, 0

bb.1.for.cond:
; predecessors: %bb.0, %bb.4
  successors: %bb.2(0x7c000000), %bb.5(0x04000000); %bb.2(96.88%), %bb.5(3.12%)
  liveins: $w8
  renamable $x9 = LDRXui $sp, 4, debug-location !1180 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:855:22
  renamable $w10 = LDRWui $sp, 3, debug-location !1178 :: (dereferenceable load 4 from %ir.k); cg.c:855:17
  renamable $w9 = LDRWui killed renamable $x9, 0, debug-location !1181 :: (load 4 from %ir.1); cg.c:855:21
  $wzr = SUBSWrs killed renamable $w10, killed renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1183; cg.c:855:5
  Bcc 10, %bb.5, implicit $nzcv, debug-location !1183; cg.c:855:5

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.3(0x40000000), %bb.4(0x40000000); %bb.3(50.00%), %bb.4(50.00%)
  liveins: $w8
  renamable $x9 = LDRXui $sp, 5, debug-location !1184 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:856:13
  renamable $x10 = LDRSWui $sp, 3, debug-location !1187 :: (dereferenceable load 4 from %ir.k); cg.c:856:16
  renamable $w9 = LDRWroX killed renamable $x9, killed renamable $x10, 0, 1, debug-location !1184 :: (load 4 from %ir.arrayidx); cg.c:856:13
  renamable $w10 = LDRWui $sp, 7, debug-location !1188 :: (dereferenceable load 4 from %ir.i.addr); cg.c:856:22
  $wzr = SUBSWrs killed renamable $w9, killed renamable $w10, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1190; cg.c:856:13
  Bcc 1, %bb.4, implicit $nzcv, debug-location !1190; cg.c:856:13

bb.3.if.then:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $w8
  renamable $d0 = LDRDui $sp, 2, debug-location !1191 :: (dereferenceable load 8 from %ir.val.addr); cg.c:857:20
  renamable $x9 = LDRXui $sp, 6, debug-location !1193 :: (dereferenceable load 8 from %ir.v.addr); cg.c:857:13
  renamable $x10 = LDRSWui $sp, 3, debug-location !1194 :: (dereferenceable load 4 from %ir.k); cg.c:857:15
  STRDroX killed renamable $d0, killed renamable $x9, killed renamable $x10, 0, 1, debug-location !1195 :: (store 8 into %ir.arrayidx3); cg.c:857:18
  STRWui renamable $w8, $sp, 2, debug-location !1196 :: (store 4 into %ir.set); cg.c:858:17

bb.4.for.inc:
; predecessors: %bb.2, %bb.3
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $w8
  renamable $w9 = LDRWui $sp, 3, debug-location !1198 :: (dereferenceable load 4 from %ir.k); cg.c:855:28
  renamable $w9 = nsw ADDWri killed renamable $w9, 1, 0, debug-location !1198; cg.c:855:28
  STRWui killed renamable $w9, $sp, 3, debug-location !1198 :: (store 4 into %ir.k); cg.c:855:28
  B %bb.1

bb.5.for.end:
; predecessors: %bb.1
  successors: %bb.6(0x30000000), %bb.7(0x50000000); %bb.6(37.50%), %bb.7(62.50%)

  renamable $w8 = LDRWui $sp, 2, debug-location !1202 :: (dereferenceable load 4 from %ir.set); cg.c:861:9
  CBNZW killed renamable $w8, %bb.7, debug-location !1205; cg.c:861:9

bb.6.if.then5:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  renamable $x8, renamable $x10 = LDPXi $sp, 4, debug-location !1209 :: (dereferenceable load 8 from %ir.nzv.addr), (dereferenceable load 8 from %ir.iv.addr); cg.c:862:12
  renamable $d0 = LDRDui $sp, 2, debug-location !1206 :: (dereferenceable load 8 from %ir.val.addr); cg.c:862:19
  renamable $x9 = LDRXui $sp, 6, debug-location !1208 :: (dereferenceable load 8 from %ir.v.addr); cg.c:862:9
  renamable $x8 = LDRSWui killed renamable $x8, 0, debug-location !1210 :: (load 4 from %ir.14); cg.c:862:11
  STRDroX killed renamable $d0, killed renamable $x9, killed renamable $x8, 0, 1, debug-location !1211 :: (store 8 into %ir.arrayidx7); cg.c:862:17
  renamable $x8 = LDRXui $sp, 4, debug-location !1214 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:863:13
  renamable $w9 = LDRWui $sp, 7, debug-location !1212 :: (dereferenceable load 4 from %ir.i.addr); cg.c:863:20
  renamable $x8 = LDRSWui killed renamable $x8, 0, debug-location !1215 :: (load 4 from %ir.18); cg.c:863:12
  STRWroX killed renamable $w9, killed renamable $x10, killed renamable $x8, 0, 1, debug-location !1216 :: (store 4 into %ir.arrayidx9); cg.c:863:18
  renamable $x8 = LDRXui $sp, 4, debug-location !1217 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:864:17
  renamable $w9 = LDRWui renamable $x8, 0, debug-location !1218 :: (load 4 from %ir.20); cg.c:864:16
  renamable $w9 = nsw ADDWri killed renamable $w9, 1, 0, debug-location !1219; cg.c:864:21
  STRWui killed renamable $w9, killed renamable $x8, 0, debug-location !1221 :: (store 4 into %ir.22); cg.c:864:14

bb.7.if.end10:
; predecessors: %bb.5, %bb.6

  $sp = frame-destroy ADDXri $sp, 64, 0, debug-location !1223; cg.c:866:1
  RET undef $lr, debug-location !1223; cg.c:866:1

# End machine code for function vecset.

********** MI Scheduling **********
vecset:%bb.0 entry
  From: STRWui killed renamable $w0, $sp, 15 :: (store 4 into %ir.n.addr)
    To: End RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   STRWui renamable $w0, $sp, 15 :: (store 4 into %ir.n.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   STPXi renamable $x2, renamable $x1, $sp, 5 :: (store 8 into %ir.v.addr), (store 8 into %ir.iv.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   STRXui renamable $x3, $sp, 4 :: (store 8 into %ir.nzv.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(3):   STRWui renamable $w4, $sp, 7 :: (store 4 into %ir.i.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(4):   STRDui renamable $d0, $sp, 2 :: (store 8 into %ir.val.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(5):   STRXui $xzr, $sp, 1, debug-location !1174 :: (store 4 into %ir.set), (store 4 into %ir.k); cg.c:854:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(6):   $w8 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Disabled scoreboard hazard recognizer
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) $w8 = MOVZWi 1, 0
  Ready @0c
  TopQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 
  TopQ.A RemainingLatency 0 + 1c > CritPath 1
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STRWui renamable $w0, $sp, 15 :: (store 4 into %ir.n.addr)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 1 2 3 4 
  TopQ.A RemainingLatency 0 + 2c > CritPath 1
  Cand SU(5) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) STPXi renamable $x2, renamable $x1, $sp, 5 :: (store 8 into %ir.v.addr), (store 8 into %ir.iv.addr)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 2 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 1
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) STRXui renamable $x3, $sp, 4 :: (store 8 into %ir.nzv.addr)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 3 
  TopQ.A RemainingLatency 0 + 4c > CritPath 1
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) STRWui renamable $w4, $sp, 7 :: (store 4 into %ir.i.addr)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 
  TopQ.A RemainingLatency 0 + 5c > CritPath 1
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) STRDui renamable $d0, $sp, 2 :: (store 8 into %ir.val.addr)
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) STRXui $xzr, $sp, 1, debug-location !1174 :: (store 4 into %ir.set), (store 4 into %ir.k); cg.c:854:9
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(6):   $w8 = MOVZWi 1, 0
SU(0):   STRWui renamable $w0, $sp, 15 :: (store 4 into %ir.n.addr)
SU(1):   STPXi renamable $x2, renamable $x1, $sp, 5 :: (store 8 into %ir.v.addr), (store 8 into %ir.iv.addr)
SU(2):   STRXui renamable $x3, $sp, 4 :: (store 8 into %ir.nzv.addr)
SU(3):   STRWui renamable $w4, $sp, 7 :: (store 4 into %ir.i.addr)
SU(4):   STRDui renamable $d0, $sp, 2 :: (store 8 into %ir.val.addr)
SU(5):   STRXui $xzr, $sp, 1, debug-location !1174 :: (store 4 into %ir.set), (store 4 into %ir.k); cg.c:854:9

Fixup kills for %bb.0
********** MI Scheduling **********
vecset:%bb.1 for.cond
  From: renamable $x9 = LDRXui $sp, 4, debug-location !1180 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:855:22
    To: Bcc 10, %bb.5, implicit $nzcv, debug-location !1183; cg.c:855:5
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $x9 = LDRXui $sp, 4, debug-location !1180 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:855:22
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x9
SU(1):   renamable $w10 = LDRWui $sp, 3, debug-location !1178 :: (dereferenceable load 4 from %ir.k); cg.c:855:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=$w10
SU(2):   renamable $w9 = LDRWui renamable $x9, 0, debug-location !1181 :: (load 4 from %ir.1); cg.c:855:21
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x9
  Successors:
    SU(3): Data Latency=4 Reg=$w9
SU(3):   $wzr = SUBSWrs renamable $w10, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1183; cg.c:855:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=$w9
    SU(1): Data Latency=4 Reg=$w10
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.5, implicit $nzcv, debug-location !1183; cg.c:855:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 9
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 9
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x9 = LDRXui $sp, 4, debug-location !1180 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:855:22
  Ready @0c
  TopQ.A BotLatency SU(0) 9c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w10 = LDRWui $sp, 3, debug-location !1178 :: (dereferenceable load 4 from %ir.k); cg.c:855:17
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w9 = LDRWui renamable $x9, 0, debug-location !1181 :: (load 4 from %ir.1); cg.c:855:21
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 8 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $wzr = SUBSWrs renamable $w10, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1183; cg.c:855:5
  Ready @8c
  TopQ.A TopLatency SU(3) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 4
  Executed: 9c
  Critical: 4c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   renamable $x9 = LDRXui $sp, 4, debug-location !1180 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:855:22
SU(1):   renamable $w10 = LDRWui $sp, 3, debug-location !1178 :: (dereferenceable load 4 from %ir.k); cg.c:855:17
SU(2):   renamable $w9 = LDRWui renamable $x9, 0, debug-location !1181 :: (load 4 from %ir.1); cg.c:855:21
SU(3):   $wzr = SUBSWrs renamable $w10, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1183; cg.c:855:5

Fixup kills for %bb.1
********** MI Scheduling **********
vecset:%bb.2 for.body
  From: renamable $x9 = LDRXui $sp, 5, debug-location !1184 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:856:13
    To: Bcc 1, %bb.4, implicit $nzcv, debug-location !1190; cg.c:856:13
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $x9 = LDRXui $sp, 5, debug-location !1184 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:856:13
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x9
SU(1):   renamable $x10 = LDRSWui $sp, 3, debug-location !1187 :: (dereferenceable load 4 from %ir.k); cg.c:856:16
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x10
SU(2):   renamable $w9 = LDRWroX renamable $x9, renamable $x10, 0, 1, debug-location !1184 :: (load 4 from %ir.arrayidx); cg.c:856:13
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=$x10
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x9
  Successors:
    SU(4): Data Latency=4 Reg=$w9
    SU(3): Anti Latency=0
SU(3):   renamable $w10 = LDRWui $sp, 7, debug-location !1188 :: (dereferenceable load 4 from %ir.i.addr); cg.c:856:22
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(2): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    SU(4): Data Latency=4 Reg=$w10
SU(4):   $wzr = SUBSWrs renamable $w9, renamable $w10, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1190; cg.c:856:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=$w10
    SU(2): Data Latency=4 Reg=$w9
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 1, %bb.4, implicit $nzcv, debug-location !1190; cg.c:856:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 9
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 9
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x9 = LDRXui $sp, 5, debug-location !1184 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:856:13
  Ready @0c
  TopQ.A BotLatency SU(0) 9c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x10 = LDRSWui $sp, 3, debug-location !1187 :: (dereferenceable load 4 from %ir.k); cg.c:856:16
  Ready @1c
  TopQ.A BotLatency SU(1) 9c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w9 = LDRWroX renamable $x9, renamable $x10, 0, 1, debug-location !1184 :: (load 4 from %ir.arrayidx); cg.c:856:13
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w10 = LDRWui $sp, 7, debug-location !1188 :: (dereferenceable load 4 from %ir.i.addr); cg.c:856:22
  Ready @6c
  TopQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 10 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $wzr = SUBSWrs renamable $w9, renamable $w10, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1190; cg.c:856:13
  Ready @10c
  TopQ.A TopLatency SU(4) 8c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   renamable $x9 = LDRXui $sp, 5, debug-location !1184 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:856:13
SU(1):   renamable $x10 = LDRSWui $sp, 3, debug-location !1187 :: (dereferenceable load 4 from %ir.k); cg.c:856:16
SU(2):   renamable $w9 = LDRWroX renamable $x9, renamable $x10, 0, 1, debug-location !1184 :: (load 4 from %ir.arrayidx); cg.c:856:13
SU(3):   renamable $w10 = LDRWui $sp, 7, debug-location !1188 :: (dereferenceable load 4 from %ir.i.addr); cg.c:856:22
SU(4):   $wzr = SUBSWrs renamable $w9, renamable $w10, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1190; cg.c:856:13

Fixup kills for %bb.2
********** MI Scheduling **********
vecset:%bb.3 if.then
  From: renamable $d0 = LDRDui $sp, 2, debug-location !1191 :: (dereferenceable load 8 from %ir.val.addr); cg.c:857:20
    To: End RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDRDui $sp, 2, debug-location !1191 :: (dereferenceable load 8 from %ir.val.addr); cg.c:857:20
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=$d0
    SU(3): Ord  Latency=0 Memory
SU(1):   renamable $x9 = LDRXui $sp, 6, debug-location !1193 :: (dereferenceable load 8 from %ir.v.addr); cg.c:857:13
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=$x9
    SU(3): Ord  Latency=0 Memory
SU(2):   renamable $x10 = LDRSWui $sp, 3, debug-location !1194 :: (dereferenceable load 4 from %ir.k); cg.c:857:15
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=$x10
    SU(3): Ord  Latency=0 Memory
SU(3):   STRDroX renamable $d0, renamable $x9, renamable $x10, 0, 1, debug-location !1195 :: (store 8 into %ir.arrayidx3); cg.c:857:18
  # preds left       : 6
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=$x10
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=$x9
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=$d0
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(4): Ord  Latency=0 Memory
SU(4):   STRWui renamable $w8, $sp, 2, debug-location !1196 :: (store 4 into %ir.set); cg.c:858:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Memory
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $d0 = LDRDui $sp, 2, debug-location !1191 :: (dereferenceable load 8 from %ir.val.addr); cg.c:857:20
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 4
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) renamable $x9 = LDRXui $sp, 6, debug-location !1193 :: (dereferenceable load 8 from %ir.v.addr); cg.c:857:13
  Ready @1c
  TopQ.A BotLatency SU(1) 4c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x10 = LDRSWui $sp, 3, debug-location !1194 :: (dereferenceable load 4 from %ir.k); cg.c:857:15
  Ready @2c
  TopQ.A BotLatency SU(2) 4c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 6 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STRDroX renamable $d0, renamable $x9, renamable $x10, 0, 1, debug-location !1195 :: (store 8 into %ir.arrayidx3); cg.c:857:18
  Ready @6c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) STRWui renamable $w8, $sp, 2, debug-location !1196 :: (store 4 into %ir.set); cg.c:858:17
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   renamable $d0 = LDRDui $sp, 2, debug-location !1191 :: (dereferenceable load 8 from %ir.val.addr); cg.c:857:20
SU(1):   renamable $x9 = LDRXui $sp, 6, debug-location !1193 :: (dereferenceable load 8 from %ir.v.addr); cg.c:857:13
SU(2):   renamable $x10 = LDRSWui $sp, 3, debug-location !1194 :: (dereferenceable load 4 from %ir.k); cg.c:857:15
SU(3):   STRDroX renamable $d0, renamable $x9, renamable $x10, 0, 1, debug-location !1195 :: (store 8 into %ir.arrayidx3); cg.c:857:18
SU(4):   STRWui renamable $w8, $sp, 2, debug-location !1196 :: (store 4 into %ir.set); cg.c:858:17

Fixup kills for %bb.3
********** MI Scheduling **********
vecset:%bb.4 for.inc
  From: renamable $w9 = LDRWui $sp, 3, debug-location !1198 :: (dereferenceable load 4 from %ir.k); cg.c:855:28
    To: B %bb.1
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w9 = LDRWui $sp, 3, debug-location !1198 :: (dereferenceable load 4 from %ir.k); cg.c:855:28
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w9
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w9 = nsw ADDWri renamable $w9, 1, 0, debug-location !1198; cg.c:855:28
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w9
  Successors:
    SU(2): Data Latency=1 Reg=$w9
SU(2):   STRWui renamable $w9, $sp, 3, debug-location !1198 :: (store 4 into %ir.k); cg.c:855:28
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w9
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w9 = LDRWui $sp, 3, debug-location !1198 :: (dereferenceable load 4 from %ir.k); cg.c:855:28
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w9 = nsw ADDWri renamable $w9, 1, 0, debug-location !1198; cg.c:855:28
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w9, $sp, 3, debug-location !1198 :: (store 4 into %ir.k); cg.c:855:28
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   renamable $w9 = LDRWui $sp, 3, debug-location !1198 :: (dereferenceable load 4 from %ir.k); cg.c:855:28
SU(1):   renamable $w9 = nsw ADDWri renamable $w9, 1, 0, debug-location !1198; cg.c:855:28
SU(2):   STRWui renamable $w9, $sp, 3, debug-location !1198 :: (store 4 into %ir.k); cg.c:855:28

Fixup kills for %bb.4
Fixup kills for %bb.5
********** MI Scheduling **********
vecset:%bb.6 if.then5
  From: renamable $x8, renamable $x10 = LDPXi $sp, 4, debug-location !1209 :: (dereferenceable load 8 from %ir.nzv.addr), (dereferenceable load 8 from %ir.iv.addr); cg.c:862:12
    To: End RegionInstrs: 13
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8, renamable $x10 = LDPXi $sp, 4, debug-location !1209 :: (dereferenceable load 8 from %ir.nzv.addr), (dereferenceable load 8 from %ir.iv.addr); cg.c:862:12
  # preds left       : 0
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 27
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x8
    SU(8): Data Latency=4 Reg=$x10
    SU(12): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
SU(1):   renamable $d0 = LDRDui $sp, 2, debug-location !1206 :: (dereferenceable load 8 from %ir.val.addr); cg.c:862:19
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 23
  Successors:
    SU(4): Data Latency=4 Reg=$d0
    SU(12): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
SU(2):   renamable $x9 = LDRXui $sp, 6, debug-location !1208 :: (dereferenceable load 8 from %ir.v.addr); cg.c:862:9
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 23
  Successors:
    SU(6): Out  Latency=1
    SU(4): Data Latency=4 Reg=$x9
    SU(12): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
SU(3):   renamable $x8 = LDRSWui renamable $x8, 0, debug-location !1210 :: (load 4 from %ir.14); cg.c:862:11
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 23
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(5): Out  Latency=1
    SU(4): Data Latency=4 Reg=$x8
    SU(12): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
SU(4):   STRDroX renamable $d0, renamable $x9, renamable $x8, 0, 1, debug-location !1211 :: (store 8 into %ir.arrayidx7); cg.c:862:17
  # preds left       : 7
  # succs left       : 9
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 19
  Predecessors:
    SU(3): Data Latency=4 Reg=$x8
    SU(3): Ord  Latency=0 Memory
    SU(2): Data Latency=4 Reg=$x9
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=$d0
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(6): Anti Latency=0
    SU(5): Anti Latency=0
    SU(12): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(10): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
    SU(6): Ord  Latency=1 Memory
SU(5):   renamable $x8 = LDRXui $sp, 4, debug-location !1214 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:863:13
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 18
  Predecessors:
    SU(4): Anti Latency=0
    SU(4): Ord  Latency=1 Memory
    SU(3): Out  Latency=1
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$x8
    SU(12): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
SU(6):   renamable $w9 = LDRWui $sp, 7, debug-location !1212 :: (dereferenceable load 4 from %ir.i.addr); cg.c:863:20
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 14
  Predecessors:
    SU(4): Anti Latency=0
    SU(4): Ord  Latency=1 Memory
    SU(2): Out  Latency=1
  Successors:
    SU(10): Out  Latency=1
    SU(8): Data Latency=4 Reg=$w9
    SU(12): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
SU(7):   renamable $x8 = LDRSWui renamable $x8, 0, debug-location !1215 :: (load 4 from %ir.18); cg.c:863:12
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 14
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$x8
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(9): Out  Latency=1
    SU(8): Data Latency=4 Reg=$x8
    SU(12): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
SU(8):   STRWroX renamable $w9, renamable $x10, renamable $x8, 0, 1, debug-location !1216 :: (store 4 into %ir.arrayidx9); cg.c:863:18
  # preds left       : 11
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 10
  Predecessors:
    SU(7): Data Latency=4 Reg=$x8
    SU(7): Ord  Latency=0 Memory
    SU(6): Data Latency=4 Reg=$w9
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=$x10
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(10): Anti Latency=0
    SU(9): Anti Latency=0
    SU(12): Ord  Latency=0 Memory
    SU(10): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
SU(9):   renamable $x8 = LDRXui $sp, 4, debug-location !1217 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:864:17
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 18
  Height             : 9
  Predecessors:
    SU(8): Anti Latency=0
    SU(8): Ord  Latency=1 Memory
    SU(7): Out  Latency=1
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(12): Data Latency=4 Reg=$x8
    SU(10): Data Latency=4 Reg=$x8
    SU(12): Ord  Latency=0 Memory
SU(10):   renamable $w9 = LDRWui renamable $x8, 0, debug-location !1218 :: (load 4 from %ir.20); cg.c:864:16
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 22
  Height             : 5
  Predecessors:
    SU(9): Data Latency=4 Reg=$x8
    SU(8): Anti Latency=0
    SU(8): Ord  Latency=1 Memory
    SU(6): Out  Latency=1
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=4 Reg=$w9
    SU(12): Ord  Latency=0 Memory
SU(11):   renamable $w9 = nsw ADDWri renamable $w9, 1, 0, debug-location !1219; cg.c:864:21
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 26
  Height             : 1
  Predecessors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=4 Reg=$w9
  Successors:
    SU(12): Data Latency=1 Reg=$w9
SU(12):   STRWui renamable $w9, renamable $x8, 0, debug-location !1221 :: (store 4 into %ir.22); cg.c:864:14
  # preds left       : 13
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 27
  Height             : 0
  Predecessors:
    SU(11): Data Latency=1 Reg=$w9
    SU(10): Ord  Latency=0 Memory
    SU(9): Data Latency=4 Reg=$x8
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
Critical Path: (PGS-RR) 27
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 27
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8, renamable $x10 = LDPXi $sp, 4, debug-location !1209 :: (dereferenceable load 8 from %ir.nzv.addr), (dereferenceable load 8 from %ir.iv.addr); cg.c:862:12
  Ready @0c
  TopQ.A BotLatency SU(0) 27c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 27
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) renamable $d0 = LDRDui $sp, 2, debug-location !1206 :: (dereferenceable load 8 from %ir.val.addr); cg.c:862:19
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x9 = LDRXui $sp, 6, debug-location !1208 :: (dereferenceable load 8 from %ir.v.addr); cg.c:862:9
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $x8 = LDRSWui renamable $x8, 0, debug-location !1210 :: (load 4 from %ir.14); cg.c:862:11
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 8 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) STRDroX renamable $d0, renamable $x9, renamable $x8, 0, 1, debug-location !1211 :: (store 8 into %ir.arrayidx7); cg.c:862:17
  Ready @8c
  TopQ.A TopLatency SU(4) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 5
  Executed: 9c
  Critical: 5c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 6 
  TopQ.A RemainingLatency 0 + 9c > CritPath 27
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) renamable $x8 = LDRXui $sp, 4, debug-location !1214 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:863:13
  Ready @9c
  TopQ.A TopLatency SU(5) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 6
  Executed: 10c
  Critical: 6c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $w9 = LDRWui $sp, 7, debug-location !1212 :: (dereferenceable load 4 from %ir.i.addr); cg.c:863:20
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 7
  Executed: 11c
  Critical: 7c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 13 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $x8 = LDRSWui renamable $x8, 0, debug-location !1215 :: (load 4 from %ir.18); cg.c:863:12
  Ready @13c
  TopQ.A TopLatency SU(7) 13c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 8
  Executed: 14c
  Critical: 8c, 8 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 17 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) STRWroX renamable $w9, renamable $x10, renamable $x8, 0, 1, debug-location !1216 :: (store 4 into %ir.arrayidx9); cg.c:863:18
  Ready @17c
  TopQ.A TopLatency SU(8) 17c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 9
  Executed: 18c
  Critical: 9c, 9 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) renamable $x8 = LDRXui $sp, 4, debug-location !1217 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:864:17
  Ready @18c
  TopQ.A TopLatency SU(9) 18c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 10
  Executed: 19c
  Critical: 10c, 10 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 22 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) renamable $w9 = LDRWui renamable $x8, 0, debug-location !1218 :: (load 4 from %ir.20); cg.c:864:16
  Ready @22c
  TopQ.A TopLatency SU(10) 22c
  *** Max MOps 1 at cycle 22
Cycle: 23 TopQ.A
TopQ.A @23c
  Retired: 11
  Executed: 23c
  Critical: 11c, 11 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 26 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 11 
Pick Top ONLY1     
Scheduling SU(11) renamable $w9 = nsw ADDWri renamable $w9, 1, 0, debug-location !1219; cg.c:864:21
  Ready @26c
  TopQ.A TopLatency SU(11) 26c
  *** Max MOps 1 at cycle 26
Cycle: 27 TopQ.A
TopQ.A @27c
  Retired: 12
  Executed: 27c
  Critical: 12c, 12 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 
Pick Top ONLY1     
Scheduling SU(12) STRWui renamable $w9, renamable $x8, 0, debug-location !1221 :: (store 4 into %ir.22); cg.c:864:14
  Ready @27c
  TopQ.A TopLatency SU(12) 27c
  *** Max MOps 1 at cycle 27
Cycle: 28 TopQ.A
TopQ.A @28c
  Retired: 13
  Executed: 28c
  Critical: 13c, 13 MOps
  ExpectedLatency: 27c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   renamable $x8, renamable $x10 = LDPXi $sp, 4, debug-location !1209 :: (dereferenceable load 8 from %ir.nzv.addr), (dereferenceable load 8 from %ir.iv.addr); cg.c:862:12
SU(1):   renamable $d0 = LDRDui $sp, 2, debug-location !1206 :: (dereferenceable load 8 from %ir.val.addr); cg.c:862:19
SU(2):   renamable $x9 = LDRXui $sp, 6, debug-location !1208 :: (dereferenceable load 8 from %ir.v.addr); cg.c:862:9
SU(3):   renamable $x8 = LDRSWui renamable $x8, 0, debug-location !1210 :: (load 4 from %ir.14); cg.c:862:11
SU(4):   STRDroX renamable $d0, renamable $x9, renamable $x8, 0, 1, debug-location !1211 :: (store 8 into %ir.arrayidx7); cg.c:862:17
SU(5):   renamable $x8 = LDRXui $sp, 4, debug-location !1214 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:863:13
SU(6):   renamable $w9 = LDRWui $sp, 7, debug-location !1212 :: (dereferenceable load 4 from %ir.i.addr); cg.c:863:20
SU(7):   renamable $x8 = LDRSWui renamable $x8, 0, debug-location !1215 :: (load 4 from %ir.18); cg.c:863:12
SU(8):   STRWroX renamable $w9, renamable $x10, renamable $x8, 0, 1, debug-location !1216 :: (store 4 into %ir.arrayidx9); cg.c:863:18
SU(9):   renamable $x8 = LDRXui $sp, 4, debug-location !1217 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:864:17
SU(10):   renamable $w9 = LDRWui renamable $x8, 0, debug-location !1218 :: (load 4 from %ir.20); cg.c:864:16
SU(11):   renamable $w9 = nsw ADDWri renamable $w9, 1, 0, debug-location !1219; cg.c:864:21
SU(12):   STRWui renamable $w9, renamable $x8, 0, debug-location !1221 :: (store 4 into %ir.22); cg.c:864:14

Fixup kills for %bb.6
Fixup kills for %bb.7
Before MISched:
# Machine code for function sparse: NoPHIs, TracksLiveness
Frame Objects:
  fi#-4: size=8, align=8, fixed, at location [SP+24]
  fi#-3: size=4, align=16, fixed, at location [SP+16]
  fi#-2: size=4, align=8, fixed, at location [SP+8]
  fi#-1: size=8, align=16, fixed, at location [SP]
  fi#0: size=8, align=8, at location [SP]
  fi#1: size=8, align=8, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
  fi#6: size=8, align=8, at location [SP]
  fi#7: size=8, align=8, at location [SP]
  fi#8: dead
  fi#9: dead
  fi#10: dead
  fi#11: dead
  fi#12: size=8, align=8, at location [SP]
  fi#13: size=8, align=8, at location [SP]
  fi#14: size=4, align=4, at location [SP]
  fi#15: size=4, align=4, at location [SP]
  fi#16: size=4, align=4, at location [SP]
  fi#17: size=4, align=4, at location [SP]
  fi#18: size=4, align=4, at location [SP]
  fi#19: size=4, align=4, at location [SP]
  fi#20: size=4, align=4, at location [SP]
  fi#21: size=4, align=4, at location [SP]
  fi#22: size=4, align=4, at location [SP]
  fi#23: size=4, align=4, at location [SP]
  fi#24: size=8, align=8, at location [SP]
  fi#25: size=8, align=8, at location [SP]
  fi#26: size=8, align=8, at location [SP]
  fi#27: size=8, align=8, at location [SP]
  fi#28: size=4, align=4, at location [SP]
Function Live Ins: $x0 in %2, $x1 in %3, $x2 in %4, $w3 in %5, $w4 in %6, $w5 in %7, $x6 in %8, $x7 in %9, $d0 in %10, $d1 in %11

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $x0, $x1, $x2, $w3, $w4, $w5, $x6, $x7, $d0, $d1
  %336:gpr64sp = ADDXri %stack.1.colidx.addr, 0, 0
  %11:fpr64 = COPY $d1
  %10:fpr64 = COPY $d0
  %9:gpr64 = COPY $x7
  %8:gpr64 = COPY $x6
  %7:gpr32 = COPY $w5
  %6:gpr32 = COPY $w4
  %5:gpr32 = COPY $w3
  %4:gpr64 = COPY $x2
  %3:gpr64 = COPY $x1
  %2:gpr64 = COPY $x0
  STRXui %2:gpr64, %336:gpr64sp, 1 :: (store 8 into %ir.a.addr)
  STRXui %3:gpr64, %336:gpr64sp, 0 :: (store 8 into %ir.colidx.addr)
  STRXui %4:gpr64, %stack.2.rowstr.addr, 0 :: (store 8 into %ir.rowstr.addr)
  STRWui %5:gpr32, %stack.3.n.addr, 0 :: (store 4 into %ir.n.addr)
  STRWui %6:gpr32, %stack.4.nz.addr, 0 :: (store 4 into %ir.nz.addr)
  STRWui %7:gpr32, %stack.5.nozer.addr, 0 :: (store 4 into %ir.nozer.addr)
  STRXui %8:gpr64, %stack.6.arow.addr, 0 :: (store 8 into %ir.arow.addr)
  STRXui %9:gpr64, %stack.7.acol.addr, 0 :: (store 8 into %ir.acol.addr)
  STRDui %10:fpr64, %stack.12.rcond.addr, 0 :: (store 8 into %ir.rcond.addr)
  STRDui %11:fpr64, %stack.13.shift.addr, 0 :: (store 8 into %ir.shift.addr)
  %12:gpr32 = LDRWui %fixed-stack.1, 0, debug-location !1285 :: (dereferenceable load 4 from %ir.lastrow.addr, align 16); cg.c:659:13
  %13:gpr32 = LDRWui %fixed-stack.2, 0, debug-location !1286 :: (dereferenceable load 4 from %ir.firstrow.addr, align 8); cg.c:659:23
  %14:gpr32common = nsw SUBWrr %12:gpr32, %13:gpr32, debug-location !1287; cg.c:659:21
  %15:gpr32common = nsw ADDWri %14:gpr32common, 1, 0, debug-location !1288; cg.c:659:32
  STRWui %15:gpr32common, %stack.14.nrows, 0, debug-location !1289 :: (store 4 into %ir.nrows); cg.c:659:11
  STRWui $wzr, %stack.16.j, 0, debug-location !1290 :: (store 4 into %ir.j); cg.c:664:12

bb.1.for.cond:
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %17:gpr32 = LDRWui %stack.16.j, 0, debug-location !1293 :: (dereferenceable load 4 from %ir.j); cg.c:664:17
  %18:gpr32common = LDRWui %stack.14.nrows, 0, debug-location !1295 :: (dereferenceable load 4 from %ir.nrows); cg.c:664:21
  %19:gpr32common = nsw ADDWri %18:gpr32common, 1, 0, debug-location !1296; cg.c:664:27
  dead $wzr = SUBSWrr %17:gpr32, %19:gpr32common, implicit-def $nzcv, debug-location !1298; cg.c:664:5
  Bcc 10, %bb.3, implicit killed $nzcv, debug-location !1298; cg.c:664:5
  B %bb.2, debug-location !1298; cg.c:664:5

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %331:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1299 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:665:9
  %332:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1301 :: (dereferenceable load 4 from %ir.j); cg.c:665:16
  STRWroX $wzr, %331:gpr64common, %332:gpr64, 0, 1, debug-location !1302 :: (store 4 into %ir.arrayidx); cg.c:665:19
  %334:gpr32common = LDRWui %stack.16.j, 0, debug-location !1303 :: (dereferenceable load 4 from %ir.j); cg.c:664:33
  %335:gpr32common = nsw ADDWri %334:gpr32common, 1, 0, debug-location !1303; cg.c:664:33
  STRWui %335:gpr32common, %stack.16.j, 0, debug-location !1303 :: (store 4 into %ir.j); cg.c:664:33
  B %bb.1, debug-location !1304; cg.c:664:5

bb.3.for.end:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  STRWui $wzr, %stack.15.i, 0, debug-location !1307 :: (store 4 into %ir.i); cg.c:668:12
  undef %315.sub_32:gpr64 = MOVi32imm 56

bb.4.for.cond2:
; predecessors: %bb.3, %bb.8
  successors: %bb.5(0x7c000000), %bb.9(0x04000000); %bb.5(96.88%), %bb.9(3.12%)

  %22:gpr32 = LDRWui %stack.15.i, 0, debug-location !1310 :: (dereferenceable load 4 from %ir.i); cg.c:668:17
  %23:gpr32 = LDRWui %stack.3.n.addr, 0, debug-location !1312 :: (dereferenceable load 4 from %ir.n.addr); cg.c:668:21
  dead $wzr = SUBSWrr %22:gpr32, %23:gpr32, implicit-def $nzcv, debug-location !1314; cg.c:668:5
  Bcc 10, %bb.9, implicit killed $nzcv, debug-location !1314; cg.c:668:5
  B %bb.5, debug-location !1314; cg.c:668:5

bb.5.for.body4:
; predecessors: %bb.4
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  STRWui $wzr, %stack.19.nza, 0, debug-location !1315 :: (store 4 into %ir.nza); cg.c:669:18

bb.6.for.cond5:
; predecessors: %bb.5, %bb.7
  successors: %bb.7(0x7c000000), %bb.8(0x04000000); %bb.7(96.88%), %bb.8(3.12%)

  %305:gpr32 = LDRWui %stack.19.nza, 0, debug-location !1319 :: (dereferenceable load 4 from %ir.nza); cg.c:669:23
  %306:gpr64common = LDRXui %stack.6.arow.addr, 0, debug-location !1321 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:669:29
  %307:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1322 :: (dereferenceable load 4 from %ir.i); cg.c:669:34
  %308:gpr32 = LDRWroX %306:gpr64common, %307:gpr64, 0, 1, debug-location !1321 :: (load 4 from %ir.arrayidx7); cg.c:669:29
  dead $wzr = SUBSWrr %305:gpr32, %308:gpr32, implicit-def $nzcv, debug-location !1324; cg.c:669:9
  Bcc 10, %bb.8, implicit killed $nzcv, debug-location !1324; cg.c:669:9
  B %bb.7, debug-location !1324; cg.c:669:9

bb.7.for.body9:
; predecessors: %bb.6
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %312:gpr64 = LDRXui %stack.7.acol.addr, 0, debug-location !1325 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:670:17
  %313:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1327 :: (dereferenceable load 4 from %ir.i); cg.c:670:22
  %317:gpr64common = MADDXrrr %313:gpr64, %315:gpr64, %312:gpr64, debug-location !1325; cg.c:670:17
  %318:gpr64 = LDRSWui %stack.19.nza, 0, debug-location !1328 :: (dereferenceable load 4 from %ir.nza); cg.c:670:25
  %319:gpr32common = LDRWroX %317:gpr64common, %318:gpr64, 0, 1, debug-location !1325 :: (load 4 from %ir.arrayidx13); cg.c:670:17
  undef %322.sub_32:gpr64common = nsw ADDWri %319:gpr32common, 1, 0, debug-location !1329; cg.c:670:30
  STRWui %322.sub_32:gpr64common, %stack.16.j, 0, debug-location !1330 :: (store 4 into %ir.j); cg.c:670:15
  %321:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1331 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:671:25
  %324:gpr64 = SBFMXri %322:gpr64common, 62, 31, debug-location !1331; cg.c:671:25
  %325:gpr32 = LDRWroX %321:gpr64common, %324:gpr64, 0, 0, debug-location !1331 :: (load 4 from %ir.arrayidx16); cg.c:671:25
  %326:gpr64common = LDRXui %stack.6.arow.addr, 0, debug-location !1333 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:671:37
  %327:gpr32 = LDRWroX %326:gpr64common, %313:gpr64, 0, 1, debug-location !1333 :: (load 4 from %ir.arrayidx18); cg.c:671:37
  %328:gpr32 = nsw ADDWrr %325:gpr32, %327:gpr32, debug-location !1335; cg.c:671:35
  STRWroX %328:gpr32, %321:gpr64common, %324:gpr64, 0, 0, debug-location !1338 :: (store 4 into %ir.arrayidx21); cg.c:671:23
  %329:gpr32common = LDRWui %stack.19.nza, 0, debug-location !1339 :: (dereferenceable load 4 from %ir.nza); cg.c:669:41
  %330:gpr32common = nsw ADDWri %329:gpr32common, 1, 0, debug-location !1339; cg.c:669:41
  STRWui %330:gpr32common, %stack.19.nza, 0, debug-location !1339 :: (store 4 into %ir.nza); cg.c:669:41
  B %bb.6, debug-location !1340; cg.c:669:9

bb.8.for.inc25:
; predecessors: %bb.6
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %310:gpr32common = LDRWui %stack.15.i, 0, debug-location !1343 :: (dereferenceable load 4 from %ir.i); cg.c:668:25
  %311:gpr32common = nsw ADDWri %310:gpr32common, 1, 0, debug-location !1343; cg.c:668:25
  STRWui %311:gpr32common, %stack.15.i, 0, debug-location !1343 :: (store 4 into %ir.i); cg.c:668:25
  B %bb.4, debug-location !1344; cg.c:668:5

bb.9.for.end27:
; predecessors: %bb.4
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %25:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1347 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:675:5
  STRWui $wzr, %25:gpr64common, 0, debug-location !1348 :: (store 4 into %ir.arrayidx281); cg.c:675:15
  %27:gpr32 = MOVi32imm 1
  STRWui %27:gpr32, %stack.16.j, 0, debug-location !1349 :: (store 4 into %ir.j); cg.c:676:12

bb.10.for.cond29:
; predecessors: %bb.9, %bb.11
  successors: %bb.11(0x7c000000), %bb.12(0x04000000); %bb.11(96.88%), %bb.12(3.12%)

  %28:gpr32 = LDRWui %stack.16.j, 0, debug-location !1352 :: (dereferenceable load 4 from %ir.j); cg.c:676:17
  %29:gpr32common = LDRWui %stack.14.nrows, 0, debug-location !1354 :: (dereferenceable load 4 from %ir.nrows); cg.c:676:21
  %30:gpr32common = nsw ADDWri %29:gpr32common, 1, 0, debug-location !1355; cg.c:676:27
  %0:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1357 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:0
  dead $wzr = SUBSWrr %28:gpr32, %30:gpr32common, implicit-def $nzcv, debug-location !1358; cg.c:676:5
  Bcc 10, %bb.12, implicit killed $nzcv, debug-location !1358; cg.c:676:5
  B %bb.11, debug-location !1358; cg.c:676:5

bb.11.for.body32:
; predecessors: %bb.10
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %295:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1359 :: (dereferenceable load 4 from %ir.j); cg.c:677:28
  %296:gpr64 = UBFMXri %295:gpr64, 62, 61, debug-location !1361; cg.c:677:21
  %297:gpr32 = LDRWroX %0:gpr64common, %296:gpr64, 0, 0, debug-location !1361 :: (load 4 from %ir.arrayidx34); cg.c:677:21
  %298:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1362 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:677:33
  %299:gpr64common = ADDXrr %298:gpr64, %296:gpr64, debug-location !1366; cg.c:677:9
  %300:gpr32 = LDURWi %299:gpr64common, -4, debug-location !1362 :: (load 4 from %ir.arrayidx37); cg.c:677:33
  %301:gpr32 = nsw ADDWrr %297:gpr32, %300:gpr32, debug-location !1365; cg.c:677:31
  STRWui %301:gpr32, %299:gpr64common, 0, debug-location !1368 :: (store 4 into %ir.arrayidx40); cg.c:677:19
  %302:gpr32common = LDRWui %stack.16.j, 0, debug-location !1369 :: (dereferenceable load 4 from %ir.j); cg.c:676:33
  %303:gpr32common = nsw ADDWri %302:gpr32common, 1, 0, debug-location !1369; cg.c:676:33
  STRWui %303:gpr32common, %stack.16.j, 0, debug-location !1369 :: (store 4 into %ir.j); cg.c:676:33
  B %bb.10, debug-location !1370; cg.c:676:5

bb.12.for.end43:
; predecessors: %bb.10
  successors: %bb.13(0x40000000), %bb.14(0x40000000); %bb.13(50.00%), %bb.14(50.00%)

  %33:gpr64 = LDRSWui %stack.14.nrows, 0, debug-location !1373 :: (dereferenceable load 4 from %ir.nrows); cg.c:679:18
  %34:gpr32common = LDRWroX %0:gpr64common, %33:gpr64, 0, 1, debug-location !1374 :: (load 4 from %ir.arrayidx45); cg.c:679:11
  %35:gpr32common = SUBWri %34:gpr32common, 1, 0, debug-location !1375; cg.c:679:25
  STRWui %35:gpr32common, %stack.19.nza, 0, debug-location !1376 :: (store 4 into %ir.nza); cg.c:679:9
  %36:gpr32 = LDRWui %stack.4.nz.addr, 0, debug-location !1379 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:685:15
  dead $wzr = SUBSWrr %35:gpr32common, %36:gpr32, implicit-def $nzcv, debug-location !1381; cg.c:685:9
  Bcc 13, %bb.14, implicit killed $nzcv, debug-location !1381; cg.c:685:9
  B %bb.13, debug-location !1381; cg.c:685:9

bb.13.if.then:
; predecessors: %bb.12
  successors: %bb.14(0x80000000); %bb.14(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1382; cg.c:686:9
  %38:gpr64 = MOVaddr target-flags(aarch64-page) @.str.37, target-flags(aarch64-pageoff, aarch64-nc) @.str.37, debug-location !1382; cg.c:686:9
  $x0 = COPY %38:gpr64, debug-location !1382; cg.c:686:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !1382; cg.c:686:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1382; cg.c:686:9
  %40:gpr32 = LDRWui %stack.19.nza, 0, debug-location !1384 :: (dereferenceable load 4 from %ir.nza); cg.c:687:41
  %41:gpr32 = LDRWui %stack.4.nz.addr, 0, debug-location !1385 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:687:46
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1386; cg.c:687:9
  %42:gpr64 = MOVaddr target-flags(aarch64-page) @.str.38, target-flags(aarch64-pageoff, aarch64-nc) @.str.38, debug-location !1386; cg.c:687:9
  $x0 = COPY %42:gpr64, debug-location !1386; cg.c:687:9
  $w1 = COPY %40:gpr32, debug-location !1386; cg.c:687:9
  $w2 = COPY %41:gpr32, debug-location !1386; cg.c:687:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit-def $sp, implicit-def dead $w0, debug-location !1386; cg.c:687:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1386; cg.c:687:9

bb.14.if.end:
; predecessors: %bb.12, %bb.13
  successors: %bb.15(0x80000000); %bb.15(100.00%)

  STRWui $wzr, %stack.16.j, 0, debug-location !1388 :: (store 4 into %ir.j); cg.c:694:12
  %292:gpr32 = MOVi32imm -1

bb.15.for.cond49:
; predecessors: %bb.14, %bb.19
  successors: %bb.16(0x7c000000), %bb.20(0x04000000); %bb.16(96.88%), %bb.20(3.12%)

  %45:gpr32 = LDRWui %stack.16.j, 0, debug-location !1391 :: (dereferenceable load 4 from %ir.j); cg.c:694:17
  %46:gpr32 = LDRWui %stack.14.nrows, 0, debug-location !1393 :: (dereferenceable load 4 from %ir.nrows); cg.c:694:21
  dead $wzr = SUBSWrr %45:gpr32, %46:gpr32, implicit-def $nzcv, debug-location !1395; cg.c:694:5
  Bcc 10, %bb.20, implicit killed $nzcv, debug-location !1395; cg.c:694:5
  B %bb.16, debug-location !1395; cg.c:694:5

bb.16.for.body51:
; predecessors: %bb.15
  successors: %bb.17(0x80000000); %bb.17(100.00%)

  %273:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1396 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:18
  %274:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1399 :: (dereferenceable load 4 from %ir.j); cg.c:695:25
  %275:gpr32 = LDRWroX %273:gpr64common, %274:gpr64, 0, 1, debug-location !1396 :: (load 4 from %ir.arrayidx53); cg.c:695:18
  STRWui %275:gpr32, %stack.20.k, 0, debug-location !1400 :: (store 4 into %ir.k); cg.c:695:16

bb.17.for.cond54:
; predecessors: %bb.16, %bb.18
  successors: %bb.18(0x7c000000), %bb.19(0x04000000); %bb.18(96.88%), %bb.19(3.12%)

  %276:gpr32 = LDRWui %stack.20.k, 0, debug-location !1402 :: (dereferenceable load 4 from %ir.k); cg.c:695:29
  %277:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1404 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:33
  %278:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1405 :: (dereferenceable load 4 from %ir.j); cg.c:695:40
  %279:gpr64common = ADDXrs %277:gpr64, %278:gpr64, 2, debug-location !1404; cg.c:695:33
  %280:gpr32 = LDRWui %279:gpr64common, 1, debug-location !1404 :: (load 4 from %ir.arrayidx57); cg.c:695:33
  dead $wzr = SUBSWrr %276:gpr32, %280:gpr32, implicit-def $nzcv, debug-location !1408; cg.c:695:9
  Bcc 10, %bb.19, implicit killed $nzcv, debug-location !1408; cg.c:695:9
  B %bb.18, debug-location !1408; cg.c:695:9

bb.18.for.body59:
; predecessors: %bb.17
  successors: %bb.17(0x80000000); %bb.17(100.00%)

  %287:gpr64common = LDRXui %336:gpr64sp, 1, debug-location !1409 :: (dereferenceable load 8 from %ir.a.addr); cg.c:696:13
  %288:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1411 :: (dereferenceable load 4 from %ir.k); cg.c:696:15
  STRXroX $xzr, %287:gpr64common, %288:gpr64, 0, 1, debug-location !1412 :: (store 8 into %ir.arrayidx61); cg.c:696:18
  %290:gpr64common = LDRXui %336:gpr64sp, 0, debug-location !1413 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:697:13
  %291:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1414 :: (dereferenceable load 4 from %ir.k); cg.c:697:20
  STRWroX %292:gpr32, %290:gpr64common, %291:gpr64, 0, 1, debug-location !1415 :: (store 4 into %ir.arrayidx63); cg.c:697:23
  %293:gpr32common = LDRWui %stack.20.k, 0, debug-location !1416 :: (dereferenceable load 4 from %ir.k); cg.c:695:49
  %294:gpr32common = nsw ADDWri %293:gpr32common, 1, 0, debug-location !1416; cg.c:695:49
  STRWui %294:gpr32common, %stack.20.k, 0, debug-location !1416 :: (store 4 into %ir.k); cg.c:695:49
  B %bb.17, debug-location !1417; cg.c:695:9

bb.19.for.end66:
; predecessors: %bb.17
  successors: %bb.15(0x80000000); %bb.15(100.00%)

  %282:gpr64common = LDRXui %fixed-stack.0, 0, debug-location !1420 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:699:9
  %283:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1421 :: (dereferenceable load 4 from %ir.j); cg.c:699:15
  STRWroX $wzr, %282:gpr64common, %283:gpr64, 0, 1, debug-location !1422 :: (store 4 into %ir.arrayidx68); cg.c:699:18
  %285:gpr32common = LDRWui %stack.16.j, 0, debug-location !1423 :: (dereferenceable load 4 from %ir.j); cg.c:694:29
  %286:gpr32common = nsw ADDWri %285:gpr32common, 1, 0, debug-location !1423; cg.c:694:29
  STRWui %286:gpr32common, %stack.16.j, 0, debug-location !1423 :: (store 4 into %ir.j); cg.c:694:29
  B %bb.15, debug-location !1424; cg.c:694:5

bb.20.for.end71:
; predecessors: %bb.15
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  %48:gpr64 = MOVi64imm 4607182418800017408
  STRXui %48:gpr64, %stack.24.size, 0, debug-location !1427 :: (store 8 into %ir.size); cg.c:705:10
  %49:fpr64 = LDRDui %stack.12.rcond.addr, 0, debug-location !1428 :: (dereferenceable load 8 from %ir.rcond.addr); cg.c:706:17
  undef %51.ssub:fpr64 = LDRSui %stack.3.n.addr, 0, debug-location !1430 :: (dereferenceable load 4 from %ir.n.addr); cg.c:706:31
  %53:fpr128 = SSHLLv2i32_shift %51:fpr64, 0, debug-location !1430; cg.c:706:31
  %55:fpr64 = SCVTFv1i64 %53.dsub:fpr128, debug-location !1430; cg.c:706:31
  %56:fpr64 = FMOVDi 112
  %57:fpr64 = FDIVDrr %56:fpr64, %55:fpr64, debug-location !1431; cg.c:706:29
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1432; cg.c:706:13
  $d0 = COPY %49:fpr64, debug-location !1432; cg.c:706:13
  $d1 = COPY %57:fpr64, debug-location !1432; cg.c:706:13
  BL @pow, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $d1, implicit-def $sp, implicit-def $d0, debug-location !1432; cg.c:706:13
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1432; cg.c:706:13
  %58:fpr64 = COPY $d0, debug-location !1432; cg.c:706:13
  STRDui %58:fpr64, %stack.26.ratio, 0, debug-location !1433 :: (store 8 into %ir.ratio); cg.c:706:11
  STRWui $wzr, %stack.15.i, 0, debug-location !1434 :: (store 4 into %ir.i); cg.c:708:12
  undef %150.sub_32:gpr64 = MOVi32imm 56
  undef %158.sub_32:gpr64 = MOVi32imm 112
  %247:gpr32 = MOVi32imm 1
  %250:gpr64 = MOVaddr target-flags(aarch64-page) @.str.39, target-flags(aarch64-pageoff, aarch64-nc) @.str.39

bb.21.for.cond73:
; predecessors: %bb.20, %bb.47
  successors: %bb.22(0x7c000000), %bb.48(0x04000000); %bb.22(96.88%), %bb.48(3.12%)

  %60:gpr32 = LDRWui %stack.15.i, 0, debug-location !1437 :: (dereferenceable load 4 from %ir.i); cg.c:708:17
  %61:gpr32 = LDRWui %stack.3.n.addr, 0, debug-location !1439 :: (dereferenceable load 4 from %ir.n.addr); cg.c:708:21
  dead $wzr = SUBSWrr %60:gpr32, %61:gpr32, implicit-def $nzcv, debug-location !1441; cg.c:708:5
  Bcc 10, %bb.48, implicit killed $nzcv, debug-location !1441; cg.c:708:5
  B %bb.22, debug-location !1441; cg.c:708:5

bb.22.for.body76:
; predecessors: %bb.21
  successors: %bb.23(0x80000000); %bb.23(100.00%)

  STRWui $wzr, %stack.19.nza, 0, debug-location !1442 :: (store 4 into %ir.nza); cg.c:709:18

bb.23.for.cond77:
; predecessors: %bb.22, %bb.46
  successors: %bb.24(0x7c000000), %bb.47(0x04000000); %bb.24(96.88%), %bb.47(3.12%)

  %137:gpr32 = LDRWui %stack.19.nza, 0, debug-location !1446 :: (dereferenceable load 4 from %ir.nza); cg.c:709:23
  %138:gpr64common = LDRXui %stack.6.arow.addr, 0, debug-location !1448 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:709:29
  %139:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1449 :: (dereferenceable load 4 from %ir.i); cg.c:709:34
  %140:gpr32 = LDRWroX %138:gpr64common, %139:gpr64, 0, 1, debug-location !1448 :: (load 4 from %ir.arrayidx79); cg.c:709:29
  dead $wzr = SUBSWrr %137:gpr32, %140:gpr32, implicit-def $nzcv, debug-location !1451; cg.c:709:9
  Bcc 10, %bb.47, implicit killed $nzcv, debug-location !1451; cg.c:709:9
  B %bb.24, debug-location !1451; cg.c:709:9

bb.24.for.body82:
; predecessors: %bb.23
  successors: %bb.25(0x80000000); %bb.25(100.00%)

  %147:gpr64 = LDRXui %stack.7.acol.addr, 0, debug-location !1452 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:710:17
  %148:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1454 :: (dereferenceable load 4 from %ir.i); cg.c:710:22
  %152:gpr64common = MADDXrrr %148:gpr64, %150:gpr64, %147:gpr64, debug-location !1452; cg.c:710:17
  %153:gpr64 = LDRSWui %stack.19.nza, 0, debug-location !1455 :: (dereferenceable load 4 from %ir.nza); cg.c:710:25
  %154:gpr32 = LDRWroX %152:gpr64common, %153:gpr64, 0, 1, debug-location !1452 :: (load 4 from %ir.arrayidx86); cg.c:710:17
  STRWui %154:gpr32, %stack.16.j, 0, debug-location !1456 :: (store 4 into %ir.j); cg.c:710:15
  %155:fpr64 = LDRDui %stack.24.size, 0, debug-location !1457 :: (dereferenceable load 8 from %ir.size); cg.c:712:21
  %156:gpr64 = LDRXui %fixed-stack.3, 0, debug-location !1458 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:712:28
  %160:gpr64common = MADDXrrr %148:gpr64, %158:gpr64, %156:gpr64, debug-location !1458; cg.c:712:28
  %161:fpr64 = LDRDroX %160:gpr64common, %153:gpr64, 0, 1, debug-location !1458 :: (load 8 from %ir.arrayidx90); cg.c:712:28
  %162:fpr64 = FMULDrr %155:fpr64, %161:fpr64, debug-location !1461; cg.c:712:26
  STRDui %162:fpr64, %stack.25.scale, 0, debug-location !1462 :: (store 8 into %ir.scale); cg.c:712:19
  STRWui $wzr, %stack.22.nzrow, 0, debug-location !1463 :: (store 4 into %ir.nzrow); cg.c:713:24

bb.25.for.cond91:
; predecessors: %bb.24, %bb.45
  successors: %bb.26(0x7c000000), %bb.46(0x04000000); %bb.26(96.88%), %bb.46(3.12%)

  %164:gpr32 = LDRWui %stack.22.nzrow, 0, debug-location !1466 :: (dereferenceable load 4 from %ir.nzrow); cg.c:713:29
  %165:gpr64common = LDRXui %stack.6.arow.addr, 0, debug-location !1468 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:713:37
  %166:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1469 :: (dereferenceable load 4 from %ir.i); cg.c:713:42
  %167:gpr32 = LDRWroX %165:gpr64common, %166:gpr64, 0, 1, debug-location !1468 :: (load 4 from %ir.arrayidx93); cg.c:713:37
  dead $wzr = SUBSWrr %164:gpr32, %167:gpr32, implicit-def $nzcv, debug-location !1471; cg.c:713:13
  Bcc 10, %bb.46, implicit killed $nzcv, debug-location !1471; cg.c:713:13
  B %bb.26, debug-location !1471; cg.c:713:13

bb.26.for.body96:
; predecessors: %bb.25
  successors: %bb.27(0x40000000), %bb.29(0x40000000); %bb.27(50.00%), %bb.29(50.00%)

  %171:gpr64 = LDRXui %stack.7.acol.addr, 0, debug-location !1472 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:714:24
  %172:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1474 :: (dereferenceable load 4 from %ir.i); cg.c:714:29
  %176:gpr64common = MADDXrrr %172:gpr64, %150:gpr64, %171:gpr64, debug-location !1472; cg.c:714:24
  %177:gpr64 = LDRSWui %stack.22.nzrow, 0, debug-location !1475 :: (dereferenceable load 4 from %ir.nzrow); cg.c:714:32
  %178:gpr32 = LDRWroX %176:gpr64common, %177:gpr64, 0, 1, debug-location !1472 :: (load 4 from %ir.arrayidx100); cg.c:714:24
  STRWui %178:gpr32, %stack.23.jcol, 0, debug-location !1476 :: (store 4 into %ir.jcol); cg.c:714:22
  %179:gpr64 = LDRXui %fixed-stack.3, 0, debug-location !1477 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:715:22
  %183:gpr64common = MADDXrrr %172:gpr64, %158:gpr64, %179:gpr64, debug-location !1477; cg.c:715:22
  %184:fpr64 = LDRDroX %183:gpr64common, %177:gpr64, 0, 1, debug-location !1477 :: (load 8 from %ir.arrayidx104); cg.c:715:22
  %185:fpr64 = LDRDui %stack.25.scale, 0, debug-location !1480 :: (dereferenceable load 8 from %ir.scale); cg.c:715:39
  %186:fpr64 = FMULDrr %184:fpr64, %185:fpr64, debug-location !1481; cg.c:715:37
  STRDui %186:fpr64, %stack.27.va, 0, debug-location !1482 :: (store 8 into %ir.va); cg.c:715:20
  %187:gpr32 = LDRWui %stack.16.j, 0, debug-location !1485 :: (dereferenceable load 4 from %ir.j); cg.c:721:29
  dead $wzr = SUBSWrr %178:gpr32, %187:gpr32, implicit-def $nzcv, debug-location !1487; cg.c:721:31
  Bcc 1, %bb.29, implicit killed $nzcv, debug-location !1487; cg.c:721:31
  B %bb.27, debug-location !1487; cg.c:721:31

bb.27.land.lhs.true:
; predecessors: %bb.26
  successors: %bb.28(0x40000000), %bb.29(0x40000000); %bb.28(50.00%), %bb.29(50.00%)

  %189:gpr32 = LDRWui %stack.16.j, 0, debug-location !1488 :: (dereferenceable load 4 from %ir.j); cg.c:721:34
  %190:gpr32 = LDRWui %stack.15.i, 0, debug-location !1489 :: (dereferenceable load 4 from %ir.i); cg.c:721:39
  dead $wzr = SUBSWrr %189:gpr32, %190:gpr32, implicit-def $nzcv, debug-location !1491; cg.c:721:21
  Bcc 1, %bb.29, implicit killed $nzcv, debug-location !1491; cg.c:721:21
  B %bb.28, debug-location !1491; cg.c:721:21

bb.28.if.then110:
; predecessors: %bb.27
  successors: %bb.29(0x80000000); %bb.29(100.00%)

  %192:fpr64 = LDRDui %stack.27.va, 0, debug-location !1492 :: (dereferenceable load 8 from %ir.va); cg.c:722:26
  %193:fpr64 = LDRDui %stack.12.rcond.addr, 0, debug-location !1494 :: (dereferenceable load 8 from %ir.rcond.addr); cg.c:722:31
  %194:fpr64 = FADDDrr %192:fpr64, %193:fpr64, debug-location !1495; cg.c:722:29
  %195:fpr64 = LDRDui %stack.13.shift.addr, 0, debug-location !1496 :: (dereferenceable load 8 from %ir.shift.addr); cg.c:722:39
  %196:fpr64 = FSUBDrr %194:fpr64, %195:fpr64, debug-location !1497; cg.c:722:37
  STRDui %196:fpr64, %stack.27.va, 0, debug-location !1498 :: (store 8 into %ir.va); cg.c:722:24

bb.29.if.end113:
; predecessors: %bb.26, %bb.27, %bb.28
  successors: %bb.30(0x80000000); %bb.30(100.00%)

  STRWui $wzr, %stack.28.cont40, 0, debug-location !1500 :: (store 4 into %ir.cont40); cg.c:725:24
  %198:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1501 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:26
  %199:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1503 :: (dereferenceable load 4 from %ir.j); cg.c:726:33
  %200:gpr32 = LDRWroX %198:gpr64common, %199:gpr64, 0, 1, debug-location !1501 :: (load 4 from %ir.arrayidx115); cg.c:726:26
  STRWui %200:gpr32, %stack.20.k, 0, debug-location !1504 :: (store 4 into %ir.k); cg.c:726:24

bb.30.for.cond116:
; predecessors: %bb.29, %bb.42
  successors: %bb.31(0x7c000000), %bb.43(0x04000000); %bb.31(96.88%), %bb.43(3.12%)

  %201:gpr32 = LDRWui %stack.20.k, 0, debug-location !1506 :: (dereferenceable load 4 from %ir.k); cg.c:726:37
  %202:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1508 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:41
  %203:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1509 :: (dereferenceable load 4 from %ir.j); cg.c:726:48
  %204:gpr64common = ADDXrs %202:gpr64, %203:gpr64, 2, debug-location !1508; cg.c:726:41
  %205:gpr32 = LDRWui %204:gpr64common, 1, debug-location !1508 :: (load 4 from %ir.arrayidx119); cg.c:726:41
  dead $wzr = SUBSWrr %201:gpr32, %205:gpr32, implicit-def $nzcv, debug-location !1512; cg.c:726:17
  Bcc 10, %bb.43, implicit killed $nzcv, debug-location !1512; cg.c:726:17
  B %bb.31, debug-location !1512; cg.c:726:17

bb.31.for.body122:
; predecessors: %bb.30
  successors: %bb.32(0x04000000), %bb.38(0x7c000000); %bb.32(3.12%), %bb.38(96.88%)

  %207:gpr64common = LDRXui %336:gpr64sp, 0, debug-location !1513 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:727:25
  %208:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1516 :: (dereferenceable load 4 from %ir.k); cg.c:727:32
  %209:gpr32 = LDRWroX %207:gpr64common, %208:gpr64, 0, 1, debug-location !1513 :: (load 4 from %ir.arrayidx124); cg.c:727:25
  %210:gpr32 = LDRWui %stack.23.jcol, 0, debug-location !1517 :: (dereferenceable load 4 from %ir.jcol); cg.c:727:37
  dead $wzr = SUBSWrr %209:gpr32, %210:gpr32, implicit-def $nzcv, debug-location !1519; cg.c:727:25
  Bcc 13, %bb.38, implicit killed $nzcv, debug-location !1519; cg.c:727:25
  B %bb.32, debug-location !1519; cg.c:727:25

bb.32.if.then127:
; predecessors: %bb.31
  successors: %bb.33(0x80000000); %bb.33(100.00%)

  %233:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1520 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:731:35
  %234:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1523 :: (dereferenceable load 4 from %ir.j); cg.c:731:42
  %235:gpr64common = ADDXrs %233:gpr64, %234:gpr64, 2, debug-location !1520; cg.c:731:35
  %236:gpr32common = LDRWui %235:gpr64common, 1, debug-location !1520 :: (load 4 from %ir.arrayidx130); cg.c:731:35
  %237:gpr32common = SUBWri %236:gpr32common, 2, 0, debug-location !1525; cg.c:731:49
  STRWui %237:gpr32common, %stack.21.kk, 0, debug-location !1526 :: (store 4 into %ir.kk); cg.c:731:33

bb.33.for.cond132:
; predecessors: %bb.32, %bb.36
  successors: %bb.34(0x7c000000), %bb.37(0x04000000); %bb.34(96.88%), %bb.37(3.12%)

  %238:gpr32 = LDRWui %stack.21.kk, 0, debug-location !1528 :: (dereferenceable load 4 from %ir.kk); cg.c:731:54
  %239:gpr32 = LDRWui %stack.20.k, 0, debug-location !1530 :: (dereferenceable load 4 from %ir.k); cg.c:731:60
  dead $wzr = SUBSWrr %238:gpr32, %239:gpr32, implicit-def $nzcv, debug-location !1532; cg.c:731:25
  Bcc 11, %bb.37, implicit killed $nzcv, debug-location !1532; cg.c:731:25
  B %bb.34, debug-location !1532; cg.c:731:25

bb.34.for.body135:
; predecessors: %bb.33
  successors: %bb.35(0x50000000), %bb.36(0x30000000); %bb.35(62.50%), %bb.36(37.50%)

  %260:gpr64common = LDRXui %336:gpr64sp, 0, debug-location !1533 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:732:33
  %261:gpr64 = LDRSWui %stack.21.kk, 0, debug-location !1536 :: (dereferenceable load 4 from %ir.kk); cg.c:732:40
  %262:gpr32 = LDRWroX %260:gpr64common, %261:gpr64, 0, 1, debug-location !1533 :: (load 4 from %ir.arrayidx137); cg.c:732:33
  TBNZW %262:gpr32, 31, %bb.36, debug-location !1538; cg.c:732:33
  B %bb.35, debug-location !1538; cg.c:732:33

bb.35.if.then140:
; predecessors: %bb.34
  successors: %bb.36(0x80000000); %bb.36(100.00%)

  %263:gpr64 = LDRXui %336:gpr64sp, 1, debug-location !1539 :: (dereferenceable load 8 from %ir.a.addr); cg.c:733:45
  %264:gpr64 = LDRSWui %stack.21.kk, 0, debug-location !1541 :: (dereferenceable load 4 from %ir.kk); cg.c:733:47
  %265:gpr64common = ADDXrs %263:gpr64, %264:gpr64, 3, debug-location !1539; cg.c:733:45
  %266:fpr64 = LDRDui %265:gpr64common, 0, debug-location !1539 :: (load 8 from %ir.arrayidx142); cg.c:733:45
  STRDui %266:fpr64, %265:gpr64common, 1, debug-location !1545 :: (store 8 into %ir.arrayidx145); cg.c:733:43
  %267:gpr64 = LDRXui %336:gpr64sp, 0, debug-location !1546 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:734:50
  %268:gpr64 = LDRSWui %stack.21.kk, 0, debug-location !1547 :: (dereferenceable load 4 from %ir.kk); cg.c:734:57
  %269:gpr64common = ADDXrs %267:gpr64, %268:gpr64, 2, debug-location !1546; cg.c:734:50
  %270:gpr32 = LDRWui %269:gpr64common, 0, debug-location !1546 :: (load 4 from %ir.arrayidx147); cg.c:734:50
  STRWui %270:gpr32, %269:gpr64common, 1, debug-location !1551 :: (store 4 into %ir.arrayidx150); cg.c:734:48

bb.36.for.inc152:
; predecessors: %bb.34, %bb.35
  successors: %bb.33(0x80000000); %bb.33(100.00%)

  %271:gpr32common = LDRWui %stack.21.kk, 0, debug-location !1553 :: (dereferenceable load 4 from %ir.kk); cg.c:731:65
  %272:gpr32common = nsw SUBWri %271:gpr32common, 1, 0, debug-location !1553; cg.c:731:65
  STRWui %272:gpr32common, %stack.21.kk, 0, debug-location !1553 :: (store 4 into %ir.kk); cg.c:731:65
  B %bb.33, debug-location !1554; cg.c:731:25

bb.37.for.end153:
; predecessors: %bb.33
  successors: %bb.43(0x80000000); %bb.43(100.00%)

  %241:gpr32 = LDRWui %stack.23.jcol, 0, debug-location !1557 :: (dereferenceable load 4 from %ir.jcol); cg.c:737:37
  %242:gpr64common = LDRXui %336:gpr64sp, 0, debug-location !1558 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:737:25
  %243:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1559 :: (dereferenceable load 4 from %ir.k); cg.c:737:32
  STRWroX %241:gpr32, %242:gpr64common, %243:gpr64, 0, 1, debug-location !1560 :: (store 4 into %ir.arrayidx155); cg.c:737:35
  %244:gpr64common = LDRXui %336:gpr64sp, 1, debug-location !1561 :: (dereferenceable load 8 from %ir.a.addr); cg.c:738:25
  %245:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1562 :: (dereferenceable load 4 from %ir.k); cg.c:738:27
  STRXroX $xzr, %244:gpr64common, %245:gpr64, 0, 1, debug-location !1563 :: (store 8 into %ir.arrayidx157); cg.c:738:30
  STRWui %247:gpr32, %stack.28.cont40, 0, debug-location !1564 :: (store 4 into %ir.cont40); cg.c:739:32
  B %bb.43, debug-location !1565; cg.c:740:25

bb.38.if.else:
; predecessors: %bb.31
  successors: %bb.39(0x04000000), %bb.40(0x7c000000); %bb.39(3.12%), %bb.40(96.88%)

  %212:gpr64common = LDRXui %336:gpr64sp, 0, debug-location !1566 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:742:30
  %213:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1568 :: (dereferenceable load 4 from %ir.k); cg.c:742:37
  %214:gpr32common = LDRWroX %212:gpr64common, %213:gpr64, 0, 1, debug-location !1566 :: (load 4 from %ir.arrayidx159); cg.c:742:30
  dead $wzr = ADDSWri %214:gpr32common, 1, 0, implicit-def $nzcv, debug-location !1570; cg.c:742:30
  Bcc 1, %bb.40, implicit killed $nzcv, debug-location !1570; cg.c:742:30
  B %bb.39, debug-location !1570; cg.c:742:30

bb.39.if.then162:
; predecessors: %bb.38
  successors: %bb.43(0x80000000); %bb.43(100.00%)

  %229:gpr32 = LDRWui %stack.23.jcol, 0, debug-location !1571 :: (dereferenceable load 4 from %ir.jcol); cg.c:743:37
  %230:gpr64common = LDRXui %336:gpr64sp, 0, debug-location !1573 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:743:25
  %231:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1574 :: (dereferenceable load 4 from %ir.k); cg.c:743:32
  STRWroX %229:gpr32, %230:gpr64common, %231:gpr64, 0, 1, debug-location !1575 :: (store 4 into %ir.arrayidx164); cg.c:743:35
  STRWui %247:gpr32, %stack.28.cont40, 0, debug-location !1576 :: (store 4 into %ir.cont40); cg.c:744:32
  B %bb.43, debug-location !1577; cg.c:745:25

bb.40.if.else165:
; predecessors: %bb.38
  successors: %bb.41(0x04000000), %bb.42(0x7c000000); %bb.41(3.12%), %bb.42(96.88%)

  %216:gpr64common = LDRXui %336:gpr64sp, 0, debug-location !1578 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:747:30
  %217:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1580 :: (dereferenceable load 4 from %ir.k); cg.c:747:37
  %218:gpr32 = LDRWroX %216:gpr64common, %217:gpr64, 0, 1, debug-location !1578 :: (load 4 from %ir.arrayidx167); cg.c:747:30
  %219:gpr32 = LDRWui %stack.23.jcol, 0, debug-location !1581 :: (dereferenceable load 4 from %ir.jcol); cg.c:747:43
  dead $wzr = SUBSWrr %218:gpr32, %219:gpr32, implicit-def $nzcv, debug-location !1583; cg.c:747:30
  Bcc 1, %bb.42, implicit killed $nzcv, debug-location !1583; cg.c:747:30
  B %bb.41, debug-location !1583; cg.c:747:30

bb.41.if.then170:
; predecessors: %bb.40
  successors: %bb.43(0x80000000); %bb.43(100.00%)

  %223:gpr64common = LDRXui %fixed-stack.0, 0, debug-location !1584 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:751:36
  %224:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1586 :: (dereferenceable load 4 from %ir.j); cg.c:751:42
  %225:gpr64 = UBFMXri %224:gpr64, 62, 61, debug-location !1584; cg.c:751:36
  %226:gpr32common = LDRWroX %223:gpr64common, %225:gpr64, 0, 0, debug-location !1584 :: (load 4 from %ir.arrayidx172); cg.c:751:36
  %227:gpr32common = nsw ADDWri %226:gpr32common, 1, 0, debug-location !1587; cg.c:751:45
  STRWroX %227:gpr32common, %223:gpr64common, %225:gpr64, 0, 0, debug-location !1590 :: (store 4 into %ir.arrayidx175); cg.c:751:34
  STRWui %247:gpr32, %stack.28.cont40, 0, debug-location !1591 :: (store 4 into %ir.cont40); cg.c:752:32
  B %bb.43, debug-location !1592; cg.c:753:25

bb.42.for.inc179:
; predecessors: %bb.40
  successors: %bb.30(0x80000000); %bb.30(100.00%)

  %221:gpr32common = LDRWui %stack.20.k, 0, debug-location !1593 :: (dereferenceable load 4 from %ir.k); cg.c:726:57
  %222:gpr32common = nsw ADDWri %221:gpr32common, 1, 0, debug-location !1593; cg.c:726:57
  STRWui %222:gpr32common, %stack.20.k, 0, debug-location !1593 :: (store 4 into %ir.k); cg.c:726:57
  B %bb.30, debug-location !1594; cg.c:726:17

bb.43.for.end181:
; predecessors: %bb.30, %bb.41, %bb.39, %bb.37
  successors: %bb.44(0x30000000), %bb.45(0x50000000); %bb.44(37.50%), %bb.45(62.50%)

  %248:gpr32 = LDRWui %stack.28.cont40, 0, debug-location !1597 :: (dereferenceable load 4 from %ir.cont40); cg.c:756:21
  CBNZW %248:gpr32, %bb.45, debug-location !1600; cg.c:756:21
  B %bb.44, debug-location !1600; cg.c:756:21

bb.44.if.then184:
; predecessors: %bb.43
  successors: %bb.45(0x80000000); %bb.45(100.00%)

  %249:gpr32 = LDRWui %stack.15.i, 0, debug-location !1601 :: (dereferenceable load 4 from %ir.i); cg.c:757:64
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1603; cg.c:757:21
  $x0 = COPY %250:gpr64, debug-location !1603; cg.c:757:21
  $w1 = COPY %249:gpr32, debug-location !1603; cg.c:757:21
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !1603; cg.c:757:21
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1603; cg.c:757:21

bb.45.if.end186:
; predecessors: %bb.43, %bb.44
  successors: %bb.25(0x80000000); %bb.25(100.00%)

  %252:gpr64common = LDRXui %336:gpr64sp, 1, debug-location !1605 :: (dereferenceable load 8 from %ir.a.addr); cg.c:761:24
  %253:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1606 :: (dereferenceable load 4 from %ir.k); cg.c:761:26
  %254:gpr64 = UBFMXri %253:gpr64, 61, 60, debug-location !1605; cg.c:761:24
  %255:fpr64 = LDRDroX %252:gpr64common, %254:gpr64, 0, 0, debug-location !1605 :: (load 8 from %ir.arrayidx188); cg.c:761:24
  %256:fpr64 = LDRDui %stack.27.va, 0, debug-location !1607 :: (dereferenceable load 8 from %ir.va); cg.c:761:31
  %257:fpr64 = FADDDrr %255:fpr64, %256:fpr64, debug-location !1608; cg.c:761:29
  STRDroX %257:fpr64, %252:gpr64common, %254:gpr64, 0, 0, debug-location !1611 :: (store 8 into %ir.arrayidx191); cg.c:761:22
  %258:gpr32common = LDRWui %stack.22.nzrow, 0, debug-location !1612 :: (dereferenceable load 4 from %ir.nzrow); cg.c:713:51
  %259:gpr32common = nsw ADDWri %258:gpr32common, 1, 0, debug-location !1612; cg.c:713:51
  STRWui %259:gpr32common, %stack.22.nzrow, 0, debug-location !1612 :: (store 4 into %ir.nzrow); cg.c:713:51
  B %bb.25, debug-location !1613; cg.c:713:13

bb.46.for.inc195:
; predecessors: %bb.25
  successors: %bb.23(0x80000000); %bb.23(100.00%)

  %169:gpr32common = LDRWui %stack.19.nza, 0, debug-location !1616 :: (dereferenceable load 4 from %ir.nza); cg.c:709:41
  %170:gpr32common = nsw ADDWri %169:gpr32common, 1, 0, debug-location !1616; cg.c:709:41
  STRWui %170:gpr32common, %stack.19.nza, 0, debug-location !1616 :: (store 4 into %ir.nza); cg.c:709:41
  B %bb.23, debug-location !1617; cg.c:709:9

bb.47.for.end197:
; predecessors: %bb.23
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  %142:fpr64 = LDRDui %stack.24.size, 0, debug-location !1620 :: (dereferenceable load 8 from %ir.size); cg.c:764:16
  %143:fpr64 = LDRDui %stack.26.ratio, 0, debug-location !1621 :: (dereferenceable load 8 from %ir.ratio); cg.c:764:23
  %144:fpr64 = FMULDrr %142:fpr64, %143:fpr64, debug-location !1622; cg.c:764:21
  STRDui %144:fpr64, %stack.24.size, 0, debug-location !1623 :: (store 8 into %ir.size); cg.c:764:14
  %145:gpr32common = LDRWui %stack.15.i, 0, debug-location !1624 :: (dereferenceable load 4 from %ir.i); cg.c:708:25
  %146:gpr32common = nsw ADDWri %145:gpr32common, 1, 0, debug-location !1624; cg.c:708:25
  STRWui %146:gpr32common, %stack.15.i, 0, debug-location !1624 :: (store 4 into %ir.i); cg.c:708:25
  B %bb.21, debug-location !1625; cg.c:708:5

bb.48.for.end201:
; predecessors: %bb.21
  successors: %bb.49(0x80000000); %bb.49(100.00%)

  %63:gpr32 = MOVi32imm 1
  STRWui %63:gpr32, %stack.16.j, 0, debug-location !1628 :: (store 4 into %ir.j); cg.c:770:12

bb.49.for.cond202:
; predecessors: %bb.48, %bb.50
  successors: %bb.50(0x7c000000), %bb.51(0x04000000); %bb.50(96.88%), %bb.51(3.12%)

  %64:gpr32 = LDRWui %stack.16.j, 0, debug-location !1631 :: (dereferenceable load 4 from %ir.j); cg.c:770:17
  %65:gpr32 = LDRWui %stack.14.nrows, 0, debug-location !1633 :: (dereferenceable load 4 from %ir.nrows); cg.c:770:21
  dead $wzr = SUBSWrr %64:gpr32, %65:gpr32, implicit-def $nzcv, debug-location !1635; cg.c:770:5
  Bcc 10, %bb.51, implicit killed $nzcv, debug-location !1635; cg.c:770:5
  B %bb.50, debug-location !1635; cg.c:770:5

bb.50.for.body205:
; predecessors: %bb.49
  successors: %bb.49(0x80000000); %bb.49(100.00%)

  %128:gpr64 = LDRXui %fixed-stack.0, 0, debug-location !1636 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:771:20
  %129:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1638 :: (dereferenceable load 4 from %ir.j); cg.c:771:26
  %130:gpr64common = ADDXrs %128:gpr64, %129:gpr64, 2, debug-location !1636; cg.c:771:20
  %131:gpr32 = LDRWui %130:gpr64common, 0, debug-location !1636 :: (load 4 from %ir.arrayidx207); cg.c:771:20
  %132:gpr32 = LDURWi %130:gpr64common, -4, debug-location !1639 :: (load 4 from %ir.arrayidx210); cg.c:771:31
  %133:gpr32 = nsw ADDWrr %131:gpr32, %132:gpr32, debug-location !1642; cg.c:771:29
  STRWui %133:gpr32, %130:gpr64common, 0, debug-location !1645 :: (store 4 into %ir.arrayidx213); cg.c:771:18
  %134:gpr32common = LDRWui %stack.16.j, 0, debug-location !1646 :: (dereferenceable load 4 from %ir.j); cg.c:770:29
  %135:gpr32common = nsw ADDWri %134:gpr32common, 1, 0, debug-location !1646; cg.c:770:29
  STRWui %135:gpr32common, %stack.16.j, 0, debug-location !1646 :: (store 4 into %ir.j); cg.c:770:29
  B %bb.49, debug-location !1647; cg.c:770:5

bb.51.for.end216:
; predecessors: %bb.49
  successors: %bb.52(0x80000000); %bb.52(100.00%)

  STRWui $wzr, %stack.16.j, 0, debug-location !1650 :: (store 4 into %ir.j); cg.c:774:12

bb.52.for.cond217:
; predecessors: %bb.51, %bb.59
  successors: %bb.53(0x7c000000), %bb.60(0x04000000); %bb.53(96.88%), %bb.60(3.12%)

  %68:gpr32 = LDRWui %stack.16.j, 0, debug-location !1653 :: (dereferenceable load 4 from %ir.j); cg.c:774:17
  %69:gpr32 = LDRWui %stack.14.nrows, 0, debug-location !1655 :: (dereferenceable load 4 from %ir.nrows); cg.c:774:21
  dead $wzr = SUBSWrr %68:gpr32, %69:gpr32, implicit-def $nzcv, debug-location !1657; cg.c:774:5
  Bcc 10, %bb.60, implicit killed $nzcv, debug-location !1657; cg.c:774:5
  B %bb.53, debug-location !1657; cg.c:774:5

bb.53.for.body220:
; predecessors: %bb.52
  successors: %bb.54(0x50000000), %bb.55(0x30000000); %bb.54(62.50%), %bb.55(37.50%)

  %90:gpr32common = LDRWui %stack.16.j, 0, debug-location !1658 :: (dereferenceable load 4 from %ir.j); cg.c:775:13
  dead $wzr = SUBSWri %90:gpr32common, 1, 0, implicit-def $nzcv, debug-location !1662; cg.c:775:13
  Bcc 11, %bb.55, implicit killed $nzcv, debug-location !1662; cg.c:775:13
  B %bb.54, debug-location !1662; cg.c:775:13

bb.54.if.then223:
; predecessors: %bb.53
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  %93:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1663 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:776:18
  %94:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1665 :: (dereferenceable load 4 from %ir.j); cg.c:776:25
  %95:gpr64 = UBFMXri %94:gpr64, 62, 61, debug-location !1663; cg.c:776:18
  %96:gpr32 = LDRWroX %93:gpr64common, %95:gpr64, 0, 0, debug-location !1663 :: (load 4 from %ir.arrayidx225); cg.c:776:18
  %97:gpr64 = LDRXui %fixed-stack.0, 0, debug-location !1666 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:776:30
  %98:gpr64common = ADDXrr %95:gpr64, %97:gpr64, debug-location !1666; cg.c:776:30
  %99:gpr32 = LDURWi %98:gpr64common, -4, debug-location !1666 :: (load 4 from %ir.arrayidx228); cg.c:776:30
  %100:gpr32 = nsw SUBWrr %96:gpr32, %99:gpr32, debug-location !1669; cg.c:776:28
  STRWui %100:gpr32, %stack.17.j1, 0, debug-location !1670 :: (store 4 into %ir.j1); cg.c:776:16
  B %bb.56, debug-location !1671; cg.c:777:9

bb.55.if.else230:
; predecessors: %bb.53
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  STRWui $wzr, %stack.17.j1, 0, debug-location !1672 :: (store 4 into %ir.j1); cg.c:779:16

bb.56.if.end231:
; predecessors: %bb.55, %bb.54
  successors: %bb.57(0x80000000); %bb.57(100.00%)

  %101:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1674 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:781:14
  %102:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1675 :: (dereferenceable load 4 from %ir.j); cg.c:781:21
  %103:gpr64 = UBFMXri %102:gpr64, 62, 61, debug-location !1681; cg.c:782:15
  %104:gpr64common = ADDXrr %103:gpr64, %101:gpr64, debug-location !1674; cg.c:781:14
  %105:gpr32 = LDRWui %104:gpr64common, 1, debug-location !1674 :: (load 4 from %ir.arrayidx234); cg.c:781:14
  %106:gpr64common = LDRXui %fixed-stack.0, 0, debug-location !1677 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:781:30
  %107:gpr32 = LDRWroX %106:gpr64common, %103:gpr64, 0, 0, debug-location !1677 :: (load 4 from %ir.arrayidx236); cg.c:781:30
  %108:gpr32 = nsw SUBWrr %105:gpr32, %107:gpr32, debug-location !1679; cg.c:781:28
  STRWui %108:gpr32, %stack.18.j2, 0, debug-location !1680 :: (store 4 into %ir.j2); cg.c:781:12
  %109:gpr32 = LDRWui %104:gpr64common, 0, debug-location !1681 :: (load 4 from %ir.arrayidx239); cg.c:782:15
  STRWui %109:gpr32, %stack.19.nza, 0, debug-location !1683 :: (store 4 into %ir.nza); cg.c:782:13
  %110:gpr32 = LDRWui %stack.17.j1, 0, debug-location !1684 :: (dereferenceable load 4 from %ir.j1); cg.c:783:18
  STRWui %110:gpr32, %stack.20.k, 0, debug-location !1686 :: (store 4 into %ir.k); cg.c:783:16

bb.57.for.cond240:
; predecessors: %bb.56, %bb.58
  successors: %bb.58(0x7c000000), %bb.59(0x04000000); %bb.58(96.88%), %bb.59(3.12%)

  %111:gpr32 = LDRWui %stack.20.k, 0, debug-location !1688 :: (dereferenceable load 4 from %ir.k); cg.c:783:22
  %112:gpr32 = LDRWui %stack.18.j2, 0, debug-location !1690 :: (dereferenceable load 4 from %ir.j2); cg.c:783:26
  dead $wzr = SUBSWrr %111:gpr32, %112:gpr32, implicit-def $nzcv, debug-location !1692; cg.c:783:9
  Bcc 10, %bb.59, implicit killed $nzcv, debug-location !1692; cg.c:783:9
  B %bb.58, debug-location !1692; cg.c:783:9

bb.58.for.body243:
; predecessors: %bb.57
  successors: %bb.57(0x80000000); %bb.57(100.00%)

  %116:gpr64common = LDRXui %336:gpr64sp, 1, debug-location !1693 :: (dereferenceable load 8 from %ir.a.addr); cg.c:784:20
  %117:gpr64 = LDRSWui %stack.19.nza, 0, debug-location !1695 :: (dereferenceable load 4 from %ir.nza); cg.c:784:22
  %118:fpr64 = LDRDroX %116:gpr64common, %117:gpr64, 0, 1, debug-location !1693 :: (load 8 from %ir.arrayidx245); cg.c:784:20
  %119:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1697 :: (dereferenceable load 4 from %ir.k); cg.c:784:15
  STRDroX %118:fpr64, %116:gpr64common, %119:gpr64, 0, 1, debug-location !1698 :: (store 8 into %ir.arrayidx247); cg.c:784:18
  %120:gpr64common = LDRXui %336:gpr64sp, 0, debug-location !1699 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:785:25
  %121:gpr64 = LDRSWui %stack.19.nza, 0, debug-location !1700 :: (dereferenceable load 4 from %ir.nza); cg.c:785:32
  %122:gpr32 = LDRWroX %120:gpr64common, %121:gpr64, 0, 1, debug-location !1699 :: (load 4 from %ir.arrayidx249); cg.c:785:25
  %123:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1702 :: (dereferenceable load 4 from %ir.k); cg.c:785:20
  STRWroX %122:gpr32, %120:gpr64common, %123:gpr64, 0, 1, debug-location !1703 :: (store 4 into %ir.arrayidx251); cg.c:785:23
  %124:gpr32common = LDRWui %stack.19.nza, 0, debug-location !1704 :: (dereferenceable load 4 from %ir.nza); cg.c:786:19
  %125:gpr32common = nsw ADDWri %124:gpr32common, 1, 0, debug-location !1705; cg.c:786:23
  STRWui %125:gpr32common, %stack.19.nza, 0, debug-location !1706 :: (store 4 into %ir.nza); cg.c:786:17
  %126:gpr32common = LDRWui %stack.20.k, 0, debug-location !1707 :: (dereferenceable load 4 from %ir.k); cg.c:783:31
  %127:gpr32common = nsw ADDWri %126:gpr32common, 1, 0, debug-location !1707; cg.c:783:31
  STRWui %127:gpr32common, %stack.20.k, 0, debug-location !1707 :: (store 4 into %ir.k); cg.c:783:31
  B %bb.57, debug-location !1708; cg.c:783:9

bb.59.for.inc256:
; predecessors: %bb.57
  successors: %bb.52(0x80000000); %bb.52(100.00%)

  %114:gpr32common = LDRWui %stack.16.j, 0, debug-location !1711 :: (dereferenceable load 4 from %ir.j); cg.c:774:29
  %115:gpr32common = nsw ADDWri %114:gpr32common, 1, 0, debug-location !1711; cg.c:774:29
  STRWui %115:gpr32common, %stack.16.j, 0, debug-location !1711 :: (store 4 into %ir.j); cg.c:774:29
  B %bb.52, debug-location !1712; cg.c:774:5

bb.60.for.end258:
; predecessors: %bb.52
  successors: %bb.61(0x80000000); %bb.61(100.00%)

  %71:gpr32 = MOVi32imm 1
  STRWui %71:gpr32, %stack.16.j, 0, debug-location !1715 :: (store 4 into %ir.j); cg.c:789:12

bb.61.for.cond259:
; predecessors: %bb.60, %bb.62
  successors: %bb.62(0x7c000000), %bb.63(0x04000000); %bb.62(96.88%), %bb.63(3.12%)

  %72:gpr32 = LDRWui %stack.16.j, 0, debug-location !1718 :: (dereferenceable load 4 from %ir.j); cg.c:789:17
  %73:gpr32common = LDRWui %stack.14.nrows, 0, debug-location !1720 :: (dereferenceable load 4 from %ir.nrows); cg.c:789:21
  %74:gpr32common = nsw ADDWri %73:gpr32common, 1, 0, debug-location !1721; cg.c:789:27
  %1:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1357 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:0
  dead $wzr = SUBSWrr %72:gpr32, %74:gpr32common, implicit-def $nzcv, debug-location !1723; cg.c:789:5
  Bcc 10, %bb.63, implicit killed $nzcv, debug-location !1723; cg.c:789:5
  B %bb.62, debug-location !1723; cg.c:789:5

bb.62.for.body263:
; predecessors: %bb.61
  successors: %bb.61(0x80000000); %bb.61(100.00%)

  %80:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1724 :: (dereferenceable load 4 from %ir.j); cg.c:790:28
  %81:gpr64 = UBFMXri %80:gpr64, 62, 61, debug-location !1726; cg.c:790:21
  %82:gpr32 = LDRWroX %1:gpr64common, %81:gpr64, 0, 0, debug-location !1726 :: (load 4 from %ir.arrayidx265); cg.c:790:21
  %83:gpr64 = LDRXui %fixed-stack.0, 0, debug-location !1727 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:790:33
  %84:gpr64common = ADDXrr %81:gpr64, %83:gpr64, debug-location !1727; cg.c:790:33
  %85:gpr32 = LDURWi %84:gpr64common, -4, debug-location !1727 :: (load 4 from %ir.arrayidx268); cg.c:790:33
  %86:gpr32 = nsw SUBWrr %82:gpr32, %85:gpr32, debug-location !1730; cg.c:790:31
  %87:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1731 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:790:9
  STRWroX %86:gpr32, %87:gpr64common, %81:gpr64, 0, 0, debug-location !1733 :: (store 4 into %ir.arrayidx271); cg.c:790:19
  %88:gpr32common = LDRWui %stack.16.j, 0, debug-location !1734 :: (dereferenceable load 4 from %ir.j); cg.c:789:33
  %89:gpr32common = nsw ADDWri %88:gpr32common, 1, 0, debug-location !1734; cg.c:789:33
  STRWui %89:gpr32common, %stack.16.j, 0, debug-location !1734 :: (store 4 into %ir.j); cg.c:789:33
  B %bb.61, debug-location !1735; cg.c:789:5

bb.63.for.end274:
; predecessors: %bb.61

  %77:gpr64 = LDRSWui %stack.14.nrows, 0, debug-location !1738 :: (dereferenceable load 4 from %ir.nrows); cg.c:792:18
  %78:gpr32common = LDRWroX %1:gpr64common, %77:gpr64, 0, 1, debug-location !1739 :: (load 4 from %ir.arrayidx276); cg.c:792:11
  %79:gpr32common = SUBWri %78:gpr32common, 1, 0, debug-location !1740; cg.c:792:25
  STRWui %79:gpr32common, %stack.19.nza, 0, debug-location !1741 :: (store 4 into %ir.nza); cg.c:792:9
  RET_ReallyLR debug-location !1742; cg.c:793:1

# End machine code for function sparse.

********** MI Scheduling **********
sparse:%bb.0 entry
  From: %336:gpr64sp = ADDXri %stack.1.colidx.addr, 0, 0
    To: End RegionInstrs: 27
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR32arg=8
tcGPR64=8
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=9
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
Live In: W0 W1 W2 W3 W4 W5 W6 W7 B0 B1 
Live Out: %336 
Live Thru: 
  LiveReg: %336
  UpdateRegP: SU(11) STRXui %2:gpr64, %336:gpr64sp, 1 :: (store 8 into %ir.a.addr)
              to GPR32 1
  UpdateRegP: SU(12) STRXui %3:gpr64, %336:gpr64sp, 0 :: (store 8 into %ir.colidx.addr)
              to GPR32 1
Top Pressure:
GPR32arg=8
tcGPR64=8
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=8
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
Bottom Pressure:
GPR32=1
Excess PSets: 
Cluster ld/st SU(12) - SU(11)
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %336:gpr64sp = ADDXri %stack.1.colidx.addr, 0, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(12): Data Latency=1 Reg=%336
    SU(11): Data Latency=1 Reg=%336
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %11:fpr64 = COPY $d1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(20): Data Latency=0 Reg=%11
  Pressure Diff      : FPR128_lo 1    ZPR_3b 1    FPR128_lo+ZPR_3b 1    QQ_with_qsub1_in_FPR128_lo+ZPR_3b 1    QQQ_with_qsub2_in_FPR128_lo+ZPR_3b 1    QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b 1    QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b 1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b 1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b 1    FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b 1    FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b 1    FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR4_with_zsub3_in_ZPR_4b 1    ZPR4_with_zsub_in_FPR128_lo 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1
  Single Issue       : false;
SU(2):   %10:fpr64 = COPY $d0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(19): Data Latency=0 Reg=%10
  Pressure Diff      : FPR128_lo 1    ZPR_3b 1    FPR128_lo+ZPR_3b 1    QQ_with_qsub1_in_FPR128_lo+ZPR_3b 1    QQQ_with_qsub2_in_FPR128_lo+ZPR_3b 1    QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b 1    QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b 1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b 1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b 1    FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b 1    FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b 1    FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR4_with_zsub3_in_ZPR_4b 1    ZPR4_with_zsub_in_FPR128_lo 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1
  Single Issue       : false;
SU(3):   %9:gpr64 = COPY $x7
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(18): Data Latency=0 Reg=%9
  Pressure Diff      : GPR32arg 1    tcGPR64 1
  Single Issue       : false;
SU(4):   %8:gpr64 = COPY $x6
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(17): Data Latency=0 Reg=%8
  Pressure Diff      : GPR32arg 1    tcGPR64 1
  Single Issue       : false;
SU(5):   %7:gpr32 = COPY $w5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(16): Data Latency=0 Reg=%7
  Pressure Diff      : GPR32arg 1    tcGPR64 1
  Single Issue       : false;
SU(6):   %6:gpr32 = COPY $w4
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(15): Data Latency=0 Reg=%6
  Pressure Diff      : GPR32arg 1    tcGPR64 1
  Single Issue       : false;
SU(7):   %5:gpr32 = COPY $w3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(14): Data Latency=0 Reg=%5
  Pressure Diff      : GPR32arg 1    tcGPR64 1
  Single Issue       : false;
SU(8):   %4:gpr64 = COPY $x2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(13): Data Latency=0 Reg=%4
  Pressure Diff      : GPR32arg 1    tcGPR64 1
  Single Issue       : false;
SU(9):   %3:gpr64 = COPY $x1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(12): Data Latency=0 Reg=%3
  Pressure Diff      : GPR32arg 1    tcGPR64 1
  Single Issue       : false;
SU(10):   %2:gpr64 = COPY $x0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(11): Data Latency=0 Reg=%2
  Pressure Diff      : GPR32arg 1    tcGPR64 1
  Single Issue       : false;
SU(11):   STRXui %2:gpr64, %336:gpr64sp, 1 :: (store 8 into %ir.a.addr)
  # preds left       : 2
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(10): Data Latency=0 Reg=%2
    SU(0): Data Latency=1 Reg=%336
    SU(12): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(12):   STRXui %3:gpr64, %336:gpr64sp, 0 :: (store 8 into %ir.colidx.addr)
  # preds left       : 2
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(9): Data Latency=0 Reg=%3
    SU(0): Data Latency=1 Reg=%336
  Successors:
    SU(11): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(13):   STRXui %4:gpr64, %stack.2.rowstr.addr, 0 :: (store 8 into %ir.rowstr.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(8): Data Latency=0 Reg=%4
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(14):   STRWui %5:gpr32, %stack.3.n.addr, 0 :: (store 4 into %ir.n.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(7): Data Latency=0 Reg=%5
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(15):   STRWui %6:gpr32, %stack.4.nz.addr, 0 :: (store 4 into %ir.nz.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(6): Data Latency=0 Reg=%6
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(16):   STRWui %7:gpr32, %stack.5.nozer.addr, 0 :: (store 4 into %ir.nozer.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(5): Data Latency=0 Reg=%7
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(17):   STRXui %8:gpr64, %stack.6.arow.addr, 0 :: (store 8 into %ir.arow.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(4): Data Latency=0 Reg=%8
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(18):   STRXui %9:gpr64, %stack.7.acol.addr, 0 :: (store 8 into %ir.acol.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Data Latency=0 Reg=%9
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(19):   STRDui %10:fpr64, %stack.12.rcond.addr, 0 :: (store 8 into %ir.rcond.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Data Latency=0 Reg=%10
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(20):   STRDui %11:fpr64, %stack.13.shift.addr, 0 :: (store 8 into %ir.shift.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%11
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(21):   %12:gpr32 = LDRWui %fixed-stack.1, 0, debug-location !1285 :: (dereferenceable load 4 from %ir.lastrow.addr, align 16); cg.c:659:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(23): Data Latency=4 Reg=%12
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(22):   %13:gpr32 = LDRWui %fixed-stack.2, 0, debug-location !1286 :: (dereferenceable load 4 from %ir.firstrow.addr, align 8); cg.c:659:23
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(23): Data Latency=4 Reg=%13
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(23):   %14:gpr32common = nsw SUBWrr %12:gpr32, %13:gpr32, debug-location !1287; cg.c:659:21
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(22): Data Latency=4 Reg=%13
    SU(21): Data Latency=4 Reg=%12
  Successors:
    SU(24): Data Latency=1 Reg=%14
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(24):   %15:gpr32common = nsw ADDWri %14:gpr32common, 1, 0, debug-location !1288; cg.c:659:32
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(23): Data Latency=1 Reg=%14
  Successors:
    SU(25): Data Latency=1 Reg=%15
  Pressure Diff      : 
  Single Issue       : false;
SU(25):   STRWui %15:gpr32common, %stack.14.nrows, 0, debug-location !1289 :: (store 4 into %ir.nrows); cg.c:659:11
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(24): Data Latency=1 Reg=%15
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(26):   STRWui $wzr, %stack.16.j, 0, debug-location !1290 :: (store 4 into %ir.j); cg.c:664:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 25 20 19 18 17 16 15 14 13 12 11 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 7 8 9 10 21 22 26 
Picking from Bot:
  Cand SU(26) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(1) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(1) %11:fpr64 = COPY $d1
Top Pressure:
GPR32arg=8
tcGPR64=8
FPR128_lo=1
ZPR_3b=1
FPR128_lo+ZPR_3b=1
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=1
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=1
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=1
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=1
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=1
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=1
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=1
GPR32=8
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR4_with_zsub3_in_ZPR_4b=1
ZPR4_with_zsub_in_FPR128_lo=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=1
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 25 20 19 18 17 16 15 14 13 12 11 
Queue TopQ.P: 
Queue TopQ.A: 0 26 2 3 4 5 6 7 8 9 10 21 22 20 
Picking from Bot:
  Cand SU(26) WEAK                               
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
  Cand SU(2) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(2) %10:fpr64 = COPY $d0
Top Pressure:
GPR32arg=8
tcGPR64=8
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 25 20 19 18 17 16 15 14 13 12 11 
Queue TopQ.P: 
Queue TopQ.A: 0 26 20 3 4 5 6 7 8 9 10 21 22 19 
Picking from Bot:
  Cand SU(26) WEAK                               
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(3) PHYS-REG                           
  Cand SU(3) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(3) %9:gpr64 = COPY $x7
Top Pressure:
GPR32arg=7
tcGPR64=7
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 25 20 19 18 17 16 15 14 13 12 11 
Queue TopQ.P: 
Queue TopQ.A: 0 26 20 19 4 5 6 7 8 9 10 21 22 18 
Picking from Bot:
  Cand SU(26) WEAK                               
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(4) PHYS-REG                           
  Cand SU(4) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(4) %8:gpr64 = COPY $x6
Top Pressure:
GPR32arg=6
tcGPR64=6
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 25 20 19 18 17 16 15 14 13 12 11 
Queue TopQ.P: 
Queue TopQ.A: 0 26 20 19 18 5 6 7 8 9 10 21 22 17 
Picking from Bot:
  Cand SU(26) WEAK                               
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(5) PHYS-REG                           
  Cand SU(5) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(5) %7:gpr32 = COPY $w5
Top Pressure:
GPR32arg=5
tcGPR64=5
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 25 20 19 18 17 16 15 14 13 12 11 
Queue TopQ.P: 
Queue TopQ.A: 0 26 20 19 18 17 6 7 8 9 10 21 22 16 
Picking from Bot:
  Cand SU(26) WEAK                               
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(6) PHYS-REG                           
  Cand SU(6) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(6) %6:gpr32 = COPY $w4
Top Pressure:
GPR32arg=4
tcGPR64=4
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 25 20 19 18 17 16 15 14 13 12 11 
Queue TopQ.P: 
Queue TopQ.A: 0 26 20 19 18 17 16 7 8 9 10 21 22 15 
Picking from Bot:
  Cand SU(26) WEAK                               
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(7) PHYS-REG                           
  Cand SU(7) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(7) %5:gpr32 = COPY $w3
Top Pressure:
GPR32arg=3
tcGPR64=3
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 25 20 19 18 17 16 15 14 13 12 11 
Queue TopQ.P: 
Queue TopQ.A: 0 26 20 19 18 17 16 15 8 9 10 21 22 14 
Picking from Bot:
  Cand SU(26) WEAK                               
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(8) PHYS-REG                           
  Cand SU(8) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(8) %4:gpr64 = COPY $x2
Top Pressure:
GPR32arg=2
tcGPR64=2
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 25 20 19 18 17 16 15 14 13 12 11 
Queue TopQ.P: 
Queue TopQ.A: 0 26 20 19 18 17 16 15 14 9 10 21 22 13 
Picking from Bot:
  Cand SU(26) WEAK                               
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(9) PHYS-REG                           
  Cand SU(9) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(9) %3:gpr64 = COPY $x1
Top Pressure:
GPR32arg=1
tcGPR64=1
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 25 20 19 18 17 16 15 14 13 12 11 
Queue TopQ.P: 
Queue TopQ.A: 0 26 20 19 18 17 16 15 14 13 10 21 22 
Picking from Bot:
  Cand SU(26) WEAK                               
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(10) PHYS-REG                           
  Cand SU(10) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(10) %2:gpr64 = COPY $x0
Top Pressure:
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 25 20 19 18 17 16 15 14 13 12 11 
Queue TopQ.P: 
Queue TopQ.A: 0 26 20 19 18 17 16 15 14 13 22 21 
Picking from Bot:
  Cand SU(26) WEAK                               
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot WEAK      
Scheduling SU(26) STRWui $wzr, %stack.16.j, 0, debug-location !1290 :: (store 4 into %ir.j); cg.c:664:12
Bottom Pressure:
GPR32=1
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 25 20 19 18 17 16 15 14 13 12 
Queue TopQ.P: 
Queue TopQ.A: 0 21 20 19 18 17 16 15 14 13 22 
BotQ.A RemLatency SU(25) 6c
  BotQ.A RemainingLatency 6 + 1c > CritPath 6
Picking from Bot:
  Cand SU(11) ORDER                              
  Cand SU(25) BOT-PATH                  6 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(25) STRWui %15:gpr32common, %stack.14.nrows, 0, debug-location !1289 :: (store 4 into %ir.nrows); cg.c:659:11
Bottom Pressure:
GPR32=2
  LiveReg: %15
  UpdateRegP: SU(25) STRWui %15:gpr32common, %stack.14.nrows, 0, debug-location !1289 :: (store 4 into %ir.nrows); cg.c:659:11
              to 
  Ready @1c
  BotQ.A TopLatency SU(25) 6c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 12 20 19 18 17 16 15 14 13 24 
Queue TopQ.P: 
Queue TopQ.A: 0 21 20 19 18 17 16 15 14 13 22 
BotQ.A RemLatency SU(24) 5c
  BotQ.A RemainingLatency 5 + 2c > CritPath 6
Picking from Bot:
  Cand SU(11) ORDER                              
  Cand SU(24) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(24) %15:gpr32common = nsw ADDWri %14:gpr32common, 1, 0, debug-location !1288; cg.c:659:32
Bottom Pressure:
GPR32=2
  LiveReg: %14
  UpdateRegP: SU(24) %15:gpr32common = nsw ADDWri %14:gpr32common, 1, 0, debug-location !1288; cg.c:659:32
              to GPR32 -1
  Ready @2c
  BotQ.A BotLatency SU(24) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 12 20 19 18 17 16 15 14 13 23 
Queue TopQ.P: 
Queue TopQ.A: 0 21 20 19 18 17 16 15 14 13 22 
BotQ.A RemLatency SU(23) 4c
  BotQ.A RemainingLatency 4 + 3c > CritPath 6
Picking from Bot:
  Cand SU(11) ORDER                              
  Cand SU(23) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(23) %14:gpr32common = nsw SUBWrr %12:gpr32, %13:gpr32, debug-location !1287; cg.c:659:21
Bottom Pressure:
GPR32=3
  LiveReg: %12
  UpdateRegP: SU(23) %14:gpr32common = nsw SUBWrr %12:gpr32, %13:gpr32, debug-location !1287; cg.c:659:21
              to 
  LiveReg: %13
  UpdateRegP: SU(23) %14:gpr32common = nsw SUBWrr %12:gpr32, %13:gpr32, debug-location !1287; cg.c:659:21
              to GPR32 -1
  Ready @3c
  BotQ.A BotLatency SU(23) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 22 21 
Queue BotQ.A: 11 12 20 19 18 17 16 15 14 13 
Queue TopQ.P: 
Queue TopQ.A: 0 21 20 19 18 17 16 15 14 13 22 
BotQ.A RemLatency SU(11) 1c
  BotQ.A RemainingLatency 3 + 4c > CritPath 6
Picking from Bot:
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(11) STRXui %2:gpr64, %336:gpr64sp, 1 :: (store 8 into %ir.a.addr)
Bottom Pressure:
GPR32=4
  LiveReg: %2
  UpdateRegP: SU(11) STRXui %2:gpr64, %336:gpr64sp, 1 :: (store 8 into %ir.a.addr)
              to 
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 22 21 
Queue BotQ.A: 13 12 20 19 18 17 16 15 14 
Queue TopQ.P: 
Queue TopQ.A: 0 21 20 19 18 17 16 15 14 13 22 
BotQ.A RemLatency SU(12) 1c
  BotQ.A RemainingLatency 2 + 5c > CritPath 6
Picking from Bot:
  Cand SU(13) ORDER                              
  Cand SU(12) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(12) STRXui %3:gpr64, %336:gpr64sp, 0 :: (store 8 into %ir.colidx.addr)
Bottom Pressure:
GPR32=5
  LiveReg: %3
  UpdateRegP: SU(12) STRXui %3:gpr64, %336:gpr64sp, 0 :: (store 8 into %ir.colidx.addr)
              to 
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 22 21 
Queue BotQ.A: 13 14 20 19 18 17 16 15 0 
Queue TopQ.P: 
Queue TopQ.A: 0 21 20 19 18 17 16 15 14 13 22 
  BotQ.A RemainingLatency 1 + 6c > CritPath 6
Picking from Bot:
  Cand SU(13) ORDER                              
  Cand SU(14) ORDER                              
  Cand SU(20) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(20) STRDui %11:fpr64, %stack.13.shift.addr, 0 :: (store 8 into %ir.shift.addr)
Bottom Pressure:
FPR8=1
GPR32=5
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %11
  UpdateRegP: SU(20) STRDui %11:fpr64, %stack.13.shift.addr, 0 :: (store 8 into %ir.shift.addr)
              to 
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 14 0 19 18 17 16 15 22 21 
Queue TopQ.P: 
Queue TopQ.A: 0 21 22 19 18 17 16 15 14 13 
  BotQ.A RemainingLatency 0 + 7c > CritPath 6
Picking from Bot:
  Cand SU(13) ORDER                              
  Cand SU(14) ORDER                              
  Cand SU(19) ORDER                              
  Cand SU(22) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(22) %13:gpr32 = LDRWui %fixed-stack.2, 0, debug-location !1286 :: (dereferenceable load 4 from %ir.firstrow.addr, align 8); cg.c:659:23
Bottom Pressure:
FPR8=1
GPR32=4
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  Ready @7c
  BotQ.A BotLatency SU(22) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 14 0 19 18 17 16 15 21 
Queue TopQ.P: 
Queue TopQ.A: 0 21 13 19 18 17 16 15 14 
  BotQ.A RemainingLatency 0 + 8c > CritPath 6
Picking from Bot:
  Cand SU(13) ORDER                              
  Cand SU(14) ORDER                              
  Cand SU(19) ORDER                              
  Cand SU(21) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(21) %12:gpr32 = LDRWui %fixed-stack.1, 0, debug-location !1285 :: (dereferenceable load 4 from %ir.lastrow.addr, align 16); cg.c:659:13
Bottom Pressure:
FPR8=1
GPR32=3
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 14 0 19 18 17 16 15 
Queue TopQ.P: 
Queue TopQ.A: 0 14 13 19 18 17 16 15 
  BotQ.A RemainingLatency 0 + 9c > CritPath 6
Picking from Bot:
  Cand SU(13) ORDER                              
  Cand SU(14) ORDER                              
  Cand SU(19) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(19) STRDui %10:fpr64, %stack.12.rcond.addr, 0 :: (store 8 into %ir.rcond.addr)
Bottom Pressure:
FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %10
  UpdateRegP: SU(19) STRDui %10:fpr64, %stack.12.rcond.addr, 0 :: (store 8 into %ir.rcond.addr)
              to 
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 14 0 15 18 17 16 
Queue TopQ.P: 
Queue TopQ.A: 0 14 13 15 18 17 16 
  BotQ.A RemainingLatency 0 + 10c > CritPath 6
Picking from Bot:
  Cand SU(13) ORDER                              
  Cand SU(14) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(18) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(18) STRXui %9:gpr64, %stack.7.acol.addr, 0 :: (store 8 into %ir.acol.addr)
Bottom Pressure:
FPR8=2
GPR32=4
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %9
  UpdateRegP: SU(18) STRXui %9:gpr64, %stack.7.acol.addr, 0 :: (store 8 into %ir.acol.addr)
              to 
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 14 0 15 16 17 
Queue TopQ.P: 
Queue TopQ.A: 0 14 13 15 16 17 
  BotQ.A RemainingLatency 0 + 11c > CritPath 6
Picking from Bot:
  Cand SU(13) ORDER                              
  Cand SU(14) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(17) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(17) STRXui %8:gpr64, %stack.6.arow.addr, 0 :: (store 8 into %ir.arow.addr)
Bottom Pressure:
FPR8=2
GPR32=5
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %8
  UpdateRegP: SU(17) STRXui %8:gpr64, %stack.6.arow.addr, 0 :: (store 8 into %ir.arow.addr)
              to 
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 14 0 15 16 
Queue TopQ.P: 
Queue TopQ.A: 0 14 13 15 16 
  BotQ.A RemainingLatency 0 + 12c > CritPath 6
Picking from Bot:
  Cand SU(13) ORDER                              
  Cand SU(14) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(16) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(16) STRWui %7:gpr32, %stack.5.nozer.addr, 0 :: (store 4 into %ir.nozer.addr)
Bottom Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %7
  UpdateRegP: SU(16) STRWui %7:gpr32, %stack.5.nozer.addr, 0 :: (store 4 into %ir.nozer.addr)
              to 
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 14 0 15 
Queue TopQ.P: 
Queue TopQ.A: 0 14 13 15 
  BotQ.A RemainingLatency 0 + 13c > CritPath 6
Picking from Bot:
  Cand SU(13) ORDER                              
  Cand SU(14) ORDER                              
  Cand SU(15) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(15) STRWui %6:gpr32, %stack.4.nz.addr, 0 :: (store 4 into %ir.nz.addr)
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %6
  UpdateRegP: SU(15) STRWui %6:gpr32, %stack.4.nz.addr, 0 :: (store 4 into %ir.nz.addr)
              to 
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 14 0 
Queue TopQ.P: 
Queue TopQ.A: 0 14 13 
  BotQ.A RemainingLatency 0 + 14c > CritPath 6
Picking from Bot:
  Cand SU(13) ORDER                              
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(14) STRWui %5:gpr32, %stack.3.n.addr, 0 :: (store 4 into %ir.n.addr)
Bottom Pressure:
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %5
  UpdateRegP: SU(14) STRWui %5:gpr32, %stack.3.n.addr, 0 :: (store 4 into %ir.n.addr)
              to 
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 0 
Queue TopQ.P: 
Queue TopQ.A: 0 13 
  BotQ.A RemainingLatency 0 + 15c > CritPath 6
Picking from Bot:
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(13) STRXui %4:gpr64, %stack.2.rowstr.addr, 0 :: (store 8 into %ir.rowstr.addr)
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %4
  UpdateRegP: SU(13) STRXui %4:gpr64, %stack.2.rowstr.addr, 0 :: (store 8 into %ir.rowstr.addr)
              to 
  Ready @15c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %336:gpr64sp = ADDXri %stack.1.colidx.addr, 0, 0
Bottom Pressure:
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(1):   %11:fpr64 = COPY $d1
SU(2):   %10:fpr64 = COPY $d0
SU(3):   %9:gpr64 = COPY $x7
SU(4):   %8:gpr64 = COPY $x6
SU(5):   %7:gpr32 = COPY $w5
SU(6):   %6:gpr32 = COPY $w4
SU(7):   %5:gpr32 = COPY $w3
SU(8):   %4:gpr64 = COPY $x2
SU(9):   %3:gpr64 = COPY $x1
SU(10):   %2:gpr64 = COPY $x0
SU(0):   %336:gpr64sp = ADDXri %stack.1.colidx.addr, 0, 0
SU(13):   STRXui %4:gpr64, %stack.2.rowstr.addr, 0 :: (store 8 into %ir.rowstr.addr)
SU(14):   STRWui %5:gpr32, %stack.3.n.addr, 0 :: (store 4 into %ir.n.addr)
SU(15):   STRWui %6:gpr32, %stack.4.nz.addr, 0 :: (store 4 into %ir.nz.addr)
SU(16):   STRWui %7:gpr32, %stack.5.nozer.addr, 0 :: (store 4 into %ir.nozer.addr)
SU(17):   STRXui %8:gpr64, %stack.6.arow.addr, 0 :: (store 8 into %ir.arow.addr)
SU(18):   STRXui %9:gpr64, %stack.7.acol.addr, 0 :: (store 8 into %ir.acol.addr)
SU(19):   STRDui %10:fpr64, %stack.12.rcond.addr, 0 :: (store 8 into %ir.rcond.addr)
SU(21):   %12:gpr32 = LDRWui %fixed-stack.1, 0, debug-location !1285 :: (dereferenceable load 4 from %ir.lastrow.addr, align 16); cg.c:659:13
SU(22):   %13:gpr32 = LDRWui %fixed-stack.2, 0, debug-location !1286 :: (dereferenceable load 4 from %ir.firstrow.addr, align 8); cg.c:659:23
SU(20):   STRDui %11:fpr64, %stack.13.shift.addr, 0 :: (store 8 into %ir.shift.addr)
SU(12):   STRXui %3:gpr64, %336:gpr64sp, 0 :: (store 8 into %ir.colidx.addr)
SU(11):   STRXui %2:gpr64, %336:gpr64sp, 1 :: (store 8 into %ir.a.addr)
SU(23):   %14:gpr32common = nsw SUBWrr %12:gpr32, %13:gpr32, debug-location !1287; cg.c:659:21
SU(24):   %15:gpr32common = nsw ADDWri %14:gpr32common, 1, 0, debug-location !1288; cg.c:659:32
SU(25):   STRWui %15:gpr32common, %stack.14.nrows, 0, debug-location !1289 :: (store 4 into %ir.nrows); cg.c:659:11
SU(26):   STRWui $wzr, %stack.16.j, 0, debug-location !1290 :: (store 4 into %ir.j); cg.c:664:12

********** MI Scheduling **********
sparse:%bb.1 for.cond
  From: %17:gpr32 = LDRWui %stack.16.j, 0, debug-location !1293 :: (dereferenceable load 4 from %ir.j); cg.c:664:17
    To: Bcc 10, %bb.3, implicit killed $nzcv, debug-location !1298; cg.c:664:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %17:gpr32 = LDRWui %stack.16.j, 0, debug-location !1293 :: (dereferenceable load 4 from %ir.j); cg.c:664:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=%17
  Single Issue       : false;
SU(1):   %18:gpr32common = LDRWui %stack.14.nrows, 0, debug-location !1295 :: (dereferenceable load 4 from %ir.nrows); cg.c:664:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Data Latency=4 Reg=%18
  Single Issue       : false;
SU(2):   %19:gpr32common = nsw ADDWri %18:gpr32common, 1, 0, debug-location !1296; cg.c:664:27
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(1): Data Latency=4 Reg=%18
  Successors:
    SU(3): Data Latency=1 Reg=%19
  Single Issue       : false;
SU(3):   dead $wzr = SUBSWrr %17:gpr32, %19:gpr32common, implicit-def $nzcv, debug-location !1298; cg.c:664:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=%19
    SU(0): Data Latency=4 Reg=%17
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.3, implicit killed $nzcv, debug-location !1298; cg.c:664:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) dead $wzr = SUBSWrr %17:gpr32, %19:gpr32common, implicit-def $nzcv, debug-location !1298; cg.c:664:5
  Ready @1c
  BotQ.A TopLatency SU(3) 5c
  BotQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %19:gpr32common = nsw ADDWri %18:gpr32common, 1, 0, debug-location !1296; cg.c:664:27
  Ready @2c
  BotQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %17:gpr32 = LDRWui %stack.16.j, 0, debug-location !1293 :: (dereferenceable load 4 from %ir.j); cg.c:664:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %18:gpr32common = LDRWui %stack.14.nrows, 0, debug-location !1295 :: (dereferenceable load 4 from %ir.nrows); cg.c:664:21
  Ready @6c
  BotQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(1):   %18:gpr32common = LDRWui %stack.14.nrows, 0, debug-location !1295 :: (dereferenceable load 4 from %ir.nrows); cg.c:664:21
SU(0):   %17:gpr32 = LDRWui %stack.16.j, 0, debug-location !1293 :: (dereferenceable load 4 from %ir.j); cg.c:664:17
SU(2):   %19:gpr32common = nsw ADDWri %18:gpr32common, 1, 0, debug-location !1296; cg.c:664:27
SU(3):   dead $wzr = SUBSWrr %17:gpr32, %19:gpr32common, implicit-def $nzcv, debug-location !1298; cg.c:664:5

********** MI Scheduling **********
sparse:%bb.2 for.body
  From: %331:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1299 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:665:9
    To: B %bb.1, debug-location !1304; cg.c:664:5
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %331:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1299 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:665:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(2): Data Latency=4 Reg=%331
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %332:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1301 :: (dereferenceable load 4 from %ir.j); cg.c:665:16
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(2): Data Latency=4 Reg=%332
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   STRWroX $wzr, %331:gpr64common, %332:gpr64, 0, 1, debug-location !1302 :: (store 4 into %ir.arrayidx); cg.c:665:19
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(1): Data Latency=4 Reg=%332
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%331
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=1 Memory
  Single Issue       : false;
SU(3):   %334:gpr32common = LDRWui %stack.16.j, 0, debug-location !1303 :: (dereferenceable load 4 from %ir.j); cg.c:664:33
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(4): Data Latency=4 Reg=%334
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   %335:gpr32common = nsw ADDWri %334:gpr32common, 1, 0, debug-location !1303; cg.c:664:33
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%334
  Successors:
    SU(5): Data Latency=1 Reg=%335
  Single Issue       : false;
SU(5):   STRWui %335:gpr32common, %stack.16.j, 0, debug-location !1303 :: (store 4 into %ir.j); cg.c:664:33
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%335
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.1, debug-location !1304; cg.c:664:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) STRWui %335:gpr32common, %stack.16.j, 0, debug-location !1303 :: (store 4 into %ir.j); cg.c:664:33
  Ready @0c
  BotQ.A TopLatency SU(5) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %335:gpr32common = nsw ADDWri %334:gpr32common, 1, 0, debug-location !1303; cg.c:664:33
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %334:gpr32common = LDRWui %stack.16.j, 0, debug-location !1303 :: (dereferenceable load 4 from %ir.j); cg.c:664:33
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWroX $wzr, %331:gpr64common, %332:gpr64, 0, 1, debug-location !1302 :: (store 4 into %ir.arrayidx); cg.c:665:19
  Ready @6c
  BotQ.A BotLatency SU(2) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %332:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1301 :: (dereferenceable load 4 from %ir.j); cg.c:665:16
  Ready @10c
  BotQ.A BotLatency SU(1) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %331:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1299 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:665:9
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %331:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1299 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:665:9
SU(1):   %332:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1301 :: (dereferenceable load 4 from %ir.j); cg.c:665:16
SU(2):   STRWroX $wzr, %331:gpr64common, %332:gpr64, 0, 1, debug-location !1302 :: (store 4 into %ir.arrayidx); cg.c:665:19
SU(3):   %334:gpr32common = LDRWui %stack.16.j, 0, debug-location !1303 :: (dereferenceable load 4 from %ir.j); cg.c:664:33
SU(4):   %335:gpr32common = nsw ADDWri %334:gpr32common, 1, 0, debug-location !1303; cg.c:664:33
SU(5):   STRWui %335:gpr32common, %stack.16.j, 0, debug-location !1303 :: (store 4 into %ir.j); cg.c:664:33

********** MI Scheduling **********
sparse:%bb.3 for.end
  From: STRWui $wzr, %stack.15.i, 0, debug-location !1307 :: (store 4 into %ir.i); cg.c:668:12
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui $wzr, %stack.15.i, 0, debug-location !1307 :: (store 4 into %ir.i); cg.c:668:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   undef %315.sub_32:gpr64 = MOVi32imm 56
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) undef %315.sub_32:gpr64 = MOVi32imm 56
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.15.i, 0, debug-location !1307 :: (store 4 into %ir.i); cg.c:668:12
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   STRWui $wzr, %stack.15.i, 0, debug-location !1307 :: (store 4 into %ir.i); cg.c:668:12
SU(1):   undef %315.sub_32:gpr64 = MOVi32imm 56

********** MI Scheduling **********
sparse:%bb.4 for.cond2
  From: %22:gpr32 = LDRWui %stack.15.i, 0, debug-location !1310 :: (dereferenceable load 4 from %ir.i); cg.c:668:17
    To: Bcc 10, %bb.9, implicit killed $nzcv, debug-location !1314; cg.c:668:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %22:gpr32 = LDRWui %stack.15.i, 0, debug-location !1310 :: (dereferenceable load 4 from %ir.i); cg.c:668:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%22
  Single Issue       : false;
SU(1):   %23:gpr32 = LDRWui %stack.3.n.addr, 0, debug-location !1312 :: (dereferenceable load 4 from %ir.n.addr); cg.c:668:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%23
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %22:gpr32, %23:gpr32, implicit-def $nzcv, debug-location !1314; cg.c:668:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%23
    SU(0): Data Latency=4 Reg=%22
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.9, implicit killed $nzcv, debug-location !1314; cg.c:668:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %22:gpr32, %23:gpr32, implicit-def $nzcv, debug-location !1314; cg.c:668:5
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %23:gpr32 = LDRWui %stack.3.n.addr, 0, debug-location !1312 :: (dereferenceable load 4 from %ir.n.addr); cg.c:668:21
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %22:gpr32 = LDRWui %stack.15.i, 0, debug-location !1310 :: (dereferenceable load 4 from %ir.i); cg.c:668:17
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %22:gpr32 = LDRWui %stack.15.i, 0, debug-location !1310 :: (dereferenceable load 4 from %ir.i); cg.c:668:17
SU(1):   %23:gpr32 = LDRWui %stack.3.n.addr, 0, debug-location !1312 :: (dereferenceable load 4 from %ir.n.addr); cg.c:668:21
SU(2):   dead $wzr = SUBSWrr %22:gpr32, %23:gpr32, implicit-def $nzcv, debug-location !1314; cg.c:668:5

********** MI Scheduling **********
sparse:%bb.6 for.cond5
  From: %305:gpr32 = LDRWui %stack.19.nza, 0, debug-location !1319 :: (dereferenceable load 4 from %ir.nza); cg.c:669:23
    To: Bcc 10, %bb.8, implicit killed $nzcv, debug-location !1324; cg.c:669:9
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %305:gpr32 = LDRWui %stack.19.nza, 0, debug-location !1319 :: (dereferenceable load 4 from %ir.nza); cg.c:669:23
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=%305
  Single Issue       : false;
SU(1):   %306:gpr64common = LDRXui %stack.6.arow.addr, 0, debug-location !1321 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:669:29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Data Latency=4 Reg=%306
  Single Issue       : false;
SU(2):   %307:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1322 :: (dereferenceable load 4 from %ir.i); cg.c:669:34
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Data Latency=4 Reg=%307
  Single Issue       : false;
SU(3):   %308:gpr32 = LDRWroX %306:gpr64common, %307:gpr64, 0, 1, debug-location !1321 :: (load 4 from %ir.arrayidx7); cg.c:669:29
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(2): Data Latency=4 Reg=%307
    SU(1): Data Latency=4 Reg=%306
  Successors:
    SU(4): Data Latency=4 Reg=%308
  Single Issue       : false;
SU(4):   dead $wzr = SUBSWrr %305:gpr32, %308:gpr32, implicit-def $nzcv, debug-location !1324; cg.c:669:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%308
    SU(0): Data Latency=4 Reg=%305
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.8, implicit killed $nzcv, debug-location !1324; cg.c:669:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) dead $wzr = SUBSWrr %305:gpr32, %308:gpr32, implicit-def $nzcv, debug-location !1324; cg.c:669:9
  Ready @1c
  BotQ.A TopLatency SU(4) 8c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
BotQ.A RemLatency SU(3) 4c
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %308:gpr32 = LDRWroX %306:gpr64common, %307:gpr64, 0, 1, debug-location !1321 :: (load 4 from %ir.arrayidx7); cg.c:669:29
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %305:gpr32 = LDRWui %stack.19.nza, 0, debug-location !1319 :: (dereferenceable load 4 from %ir.nza); cg.c:669:23
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 9 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %307:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1322 :: (dereferenceable load 4 from %ir.i); cg.c:669:34
  Ready @9c
  BotQ.A BotLatency SU(2) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 4
  Executed: 10c
  Critical: 4c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %306:gpr64common = LDRXui %stack.6.arow.addr, 0, debug-location !1321 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:669:29
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(1):   %306:gpr64common = LDRXui %stack.6.arow.addr, 0, debug-location !1321 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:669:29
SU(2):   %307:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1322 :: (dereferenceable load 4 from %ir.i); cg.c:669:34
SU(0):   %305:gpr32 = LDRWui %stack.19.nza, 0, debug-location !1319 :: (dereferenceable load 4 from %ir.nza); cg.c:669:23
SU(3):   %308:gpr32 = LDRWroX %306:gpr64common, %307:gpr64, 0, 1, debug-location !1321 :: (load 4 from %ir.arrayidx7); cg.c:669:29
SU(4):   dead $wzr = SUBSWrr %305:gpr32, %308:gpr32, implicit-def $nzcv, debug-location !1324; cg.c:669:9

********** MI Scheduling **********
sparse:%bb.7 for.body9
  From: %312:gpr64 = LDRXui %stack.7.acol.addr, 0, debug-location !1325 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:670:17
    To: B %bb.6, debug-location !1340; cg.c:669:9
 RegionInstrs: 17
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR32=6
Live In: %315 
Live Out: %315 
Live Thru: GPR32=1
  LiveReg: %315
  UpdateRegP: SU(2) %317:gpr64common = MADDXrrr %313:gpr64, %315:gpr64, %312:gpr64, debug-location !1325; cg.c:670:17
              to GPR32 1
Top Pressure:
GPR32=1
Bottom Pressure:
GPR32=1
Excess PSets: 
SU(0):   %312:gpr64 = LDRXui %stack.7.acol.addr, 0, debug-location !1325 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:670:17
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 22
  Successors:
    SU(2): Data Latency=4 Reg=%312
    SU(13): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %313:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1327 :: (dereferenceable load 4 from %ir.i); cg.c:670:22
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 22
  Successors:
    SU(11): Data Latency=4 Reg=%313
    SU(2): Data Latency=4 Reg=%313
    SU(13): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   %317:gpr64common = MADDXrrr %313:gpr64, %315:gpr64, %312:gpr64, debug-location !1325; cg.c:670:17
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 18
  Predecessors:
    SU(1): Data Latency=4 Reg=%313
    SU(0): Data Latency=4 Reg=%312
  Successors:
    SU(4): Data Latency=1 Reg=%317
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(3):   %318:gpr64 = LDRSWui %stack.19.nza, 0, debug-location !1328 :: (dereferenceable load 4 from %ir.nza); cg.c:670:25
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 21
  Successors:
    SU(4): Data Latency=4 Reg=%318
    SU(16): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(4):   %319:gpr32common = LDRWroX %317:gpr64common, %318:gpr64, 0, 1, debug-location !1325 :: (load 4 from %ir.arrayidx13); cg.c:670:17
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 17
  Predecessors:
    SU(2): Data Latency=1 Reg=%317
    SU(3): Data Latency=4 Reg=%318
  Successors:
    SU(5): Data Latency=4 Reg=%319
    SU(16): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(5):   undef %322.sub_32:gpr64common = nsw ADDWri %319:gpr32common, 1, 0, debug-location !1329; cg.c:670:30
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 13
  Predecessors:
    SU(4): Data Latency=4 Reg=%319
  Successors:
    SU(8): Data Latency=1 Reg=%322
    SU(6): Data Latency=1 Reg=%322
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   STRWui %322.sub_32:gpr64common, %stack.16.j, 0, debug-location !1330 :: (store 4 into %ir.j); cg.c:670:15
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 12
  Predecessors:
    SU(5): Data Latency=1 Reg=%322
    SU(4): Ord  Latency=0 Memory
  Successors:
    SU(11): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
    SU(13): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(7):   %321:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1331 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:671:25
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(13): Data Latency=4 Reg=%321
    SU(9): Data Latency=4 Reg=%321
    SU(13): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(8):   %324:gpr64 = SBFMXri %322:gpr64common, 62, 31, debug-location !1331; cg.c:671:25
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 12
  Predecessors:
    SU(5): Data Latency=1 Reg=%322
  Successors:
    SU(13): Data Latency=1 Reg=%324
    SU(9): Data Latency=1 Reg=%324
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   %325:gpr32 = LDRWroX %321:gpr64common, %324:gpr64, 0, 0, debug-location !1331 :: (load 4 from %ir.arrayidx16); cg.c:671:25
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 11
  Predecessors:
    SU(8): Data Latency=1 Reg=%324
    SU(7): Data Latency=4 Reg=%321
    SU(6): Ord  Latency=1 Memory
  Successors:
    SU(12): Data Latency=4 Reg=%325
    SU(16): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(10):   %326:gpr64common = LDRXui %stack.6.arow.addr, 0, debug-location !1333 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:671:37
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(11): Data Latency=4 Reg=%326
    SU(13): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(11):   %327:gpr32 = LDRWroX %326:gpr64common, %313:gpr64, 0, 1, debug-location !1333 :: (load 4 from %ir.arrayidx18); cg.c:671:37
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 11
  Predecessors:
    SU(10): Data Latency=4 Reg=%326
    SU(6): Ord  Latency=1 Memory
    SU(1): Data Latency=4 Reg=%313
  Successors:
    SU(12): Data Latency=4 Reg=%327
    SU(16): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(12):   %328:gpr32 = nsw ADDWrr %325:gpr32, %327:gpr32, debug-location !1335; cg.c:671:35
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 7
  Predecessors:
    SU(11): Data Latency=4 Reg=%327
    SU(9): Data Latency=4 Reg=%325
  Successors:
    SU(13): Data Latency=1 Reg=%328
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(13):   STRWroX %328:gpr32, %321:gpr64common, %324:gpr64, 0, 0, debug-location !1338 :: (store 4 into %ir.arrayidx21); cg.c:671:23
  # preds left       : 12
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 6
  Predecessors:
    SU(12): Data Latency=1 Reg=%328
    SU(11): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Data Latency=1 Reg=%324
    SU(7): Data Latency=4 Reg=%321
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(16): Ord  Latency=0 Memory
    SU(14): Ord  Latency=1 Memory
  Pressure Diff      : GPR32 3
  Single Issue       : false;
SU(14):   %329:gpr32common = LDRWui %stack.19.nza, 0, debug-location !1339 :: (dereferenceable load 4 from %ir.nza); cg.c:669:41
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 17
  Height             : 5
  Predecessors:
    SU(13): Ord  Latency=1 Memory
  Successors:
    SU(15): Data Latency=4 Reg=%329
    SU(16): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(15):   %330:gpr32common = nsw ADDWri %329:gpr32common, 1, 0, debug-location !1339; cg.c:669:41
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 21
  Height             : 1
  Predecessors:
    SU(14): Data Latency=4 Reg=%329
  Successors:
    SU(16): Data Latency=1 Reg=%330
  Pressure Diff      : 
  Single Issue       : false;
SU(16):   STRWui %330:gpr32common, %stack.19.nza, 0, debug-location !1339 :: (store 4 into %ir.nza); cg.c:669:41
  # preds left       : 7
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 0
  Predecessors:
    SU(15): Data Latency=1 Reg=%330
    SU(14): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.6, debug-location !1340; cg.c:669:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 22
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 16 
Pick Bot ONLY1     
Scheduling SU(16) STRWui %330:gpr32common, %stack.19.nza, 0, debug-location !1339 :: (store 4 into %ir.nza); cg.c:669:41
Bottom Pressure:
GPR32=2
  LiveReg: %330
  UpdateRegP: SU(16) STRWui %330:gpr32common, %stack.19.nza, 0, debug-location !1339 :: (store 4 into %ir.nza); cg.c:669:41
              to 
  Ready @0c
  BotQ.A TopLatency SU(16) 22c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 
Pick Bot ONLY1     
Scheduling SU(15) %330:gpr32common = nsw ADDWri %329:gpr32common, 1, 0, debug-location !1339; cg.c:669:41
Bottom Pressure:
GPR32=2
  LiveReg: %329
  UpdateRegP: SU(15) %330:gpr32common = nsw ADDWri %329:gpr32common, 1, 0, debug-location !1339; cg.c:669:41
              to GPR32 -1
  Ready @1c
  BotQ.A BotLatency SU(15) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 14 
Pick Bot ONLY1     
Scheduling SU(14) %329:gpr32common = LDRWui %stack.19.nza, 0, debug-location !1339 :: (dereferenceable load 4 from %ir.nza); cg.c:669:41
Bottom Pressure:
GPR32=1
  Ready @5c
  BotQ.A BotLatency SU(14) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 
Pick Bot ONLY1     
Scheduling SU(13) STRWroX %328:gpr32, %321:gpr64common, %324:gpr64, 0, 0, debug-location !1338 :: (store 4 into %ir.arrayidx21); cg.c:671:23
Bottom Pressure:
GPR32=4
  LiveReg: %328
  UpdateRegP: SU(13) STRWroX %328:gpr32, %321:gpr64common, %324:gpr64, 0, 0, debug-location !1338 :: (store 4 into %ir.arrayidx21); cg.c:671:23
              to GPR32 2
  LiveReg: %321
  UpdateRegP: SU(9) %325:gpr32 = LDRWroX %321:gpr64common, %324:gpr64, 0, 0, debug-location !1331 :: (load 4 from %ir.arrayidx16); cg.c:671:25
              to 
  UpdateRegP: SU(13) STRWroX %328:gpr32, %321:gpr64common, %324:gpr64, 0, 0, debug-location !1338 :: (store 4 into %ir.arrayidx21); cg.c:671:23
              to GPR32 1
  LiveReg: %324
  UpdateRegP: SU(9) %325:gpr32 = LDRWroX %321:gpr64common, %324:gpr64, 0, 0, debug-location !1331 :: (load 4 from %ir.arrayidx16); cg.c:671:25
              to GPR32 -1
  UpdateRegP: SU(13) STRWroX %328:gpr32, %321:gpr64common, %324:gpr64, 0, 0, debug-location !1338 :: (store 4 into %ir.arrayidx21); cg.c:671:23
              to 
  Ready @6c
  BotQ.A BotLatency SU(13) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 
Pick Bot ONLY1     
Scheduling SU(12) %328:gpr32 = nsw ADDWrr %325:gpr32, %327:gpr32, debug-location !1335; cg.c:671:35
Bottom Pressure:
GPR32=5
  LiveReg: %325
  UpdateRegP: SU(12) %328:gpr32 = nsw ADDWrr %325:gpr32, %327:gpr32, debug-location !1335; cg.c:671:35
              to 
  LiveReg: %327
  UpdateRegP: SU(12) %328:gpr32 = nsw ADDWrr %325:gpr32, %327:gpr32, debug-location !1335; cg.c:671:35
              to GPR32 -1
  Ready @7c
  BotQ.A BotLatency SU(12) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 11 9 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 10 
BotQ.A RemLatency SU(11) 11c
Picking from Bot:
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) %327:gpr32 = LDRWroX %326:gpr64common, %313:gpr64, 0, 1, debug-location !1333 :: (load 4 from %ir.arrayidx18); cg.c:671:37
Bottom Pressure:
GPR32=6
  LiveReg: %326
  UpdateRegP: SU(11) %327:gpr32 = LDRWroX %326:gpr64common, %313:gpr64, 0, 1, debug-location !1333 :: (load 4 from %ir.arrayidx18); cg.c:671:37
              to 
  LiveReg: %313
  UpdateRegP: SU(2) %317:gpr64common = MADDXrrr %313:gpr64, %315:gpr64, %312:gpr64, debug-location !1325; cg.c:670:17
              to 
  UpdateRegP: SU(11) %327:gpr32 = LDRWroX %326:gpr64common, %313:gpr64, 0, 1, debug-location !1333 :: (load 4 from %ir.arrayidx18); cg.c:671:37
              to GPR32 -1
  Ready @11c
  BotQ.A BotLatency SU(11) 11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 
Queue BotQ.A: 9 
Pick Bot ONLY1     
Scheduling SU(9) %325:gpr32 = LDRWroX %321:gpr64common, %324:gpr64, 0, 0, debug-location !1331 :: (load 4 from %ir.arrayidx16); cg.c:671:25
Bottom Pressure:
GPR32=5
  Ready @12c
  BotQ.A TopLatency SU(9) 11c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 7
  Executed: 13c
  Critical: 7c, 7 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 7 
Queue BotQ.A: 8 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 10 
BotQ.A RemLatency SU(8) 10c
  BotQ.A RemainingLatency 10 + 13c > CritPath 22
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %324:gpr64 = SBFMXri %322:gpr64common, 62, 31, debug-location !1331; cg.c:671:25
Bottom Pressure:
GPR32=5
  LiveReg: %322
  UpdateRegP: SU(6) STRWui %322.sub_32:gpr64common, %stack.16.j, 0, debug-location !1330 :: (store 4 into %ir.j); cg.c:670:15
              to 
  UpdateRegP: SU(8) %324:gpr64 = SBFMXri %322:gpr64common, 62, 31, debug-location !1331; cg.c:671:25
              to GPR32 -1
  Ready @13c
  BotQ.A BotLatency SU(8) 12c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 8
  Executed: 14c
  Critical: 8c, 8 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 7 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) STRWui %322.sub_32:gpr64common, %stack.16.j, 0, debug-location !1330 :: (store 4 into %ir.j); cg.c:670:15
Bottom Pressure:
GPR32=5
  Ready @14c
  BotQ.A TopLatency SU(6) 10c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 9
  Executed: 15c
  Critical: 9c, 9 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 
Queue BotQ.A: 5 10 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 10 
BotQ.A RemLatency SU(5) 9c
  BotQ.A RemainingLatency 9 + 15c > CritPath 22
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) undef %322.sub_32:gpr64common = nsw ADDWri %319:gpr32common, 1, 0, debug-location !1329; cg.c:670:30
Bottom Pressure:
GPR32=5
  LiveReg: %319
  UpdateRegP: SU(5) undef %322.sub_32:gpr64common = nsw ADDWri %319:gpr32common, 1, 0, debug-location !1329; cg.c:670:30
              to GPR32 -1
  Ready @15c
  BotQ.A BotLatency SU(5) 13c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 10
  Executed: 16c
  Critical: 10c, 10 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 10 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 10 
BotQ.A RemLatency SU(4) 5c
  BotQ.A RemainingLatency 8 + 16c > CritPath 22
Picking from Bot:
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(10) %326:gpr64common = LDRXui %stack.6.arow.addr, 0, debug-location !1333 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:671:37
Bottom Pressure:
GPR32=4
  Ready @16c
  BotQ.A BotLatency SU(10) 15c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 11
  Executed: 17c
  Critical: 11c, 11 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) %321:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1331 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:671:25
Bottom Pressure:
GPR32=3
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 12
  Executed: 18c
  Critical: 12c, 12 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 19 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %319:gpr32common = LDRWroX %317:gpr64common, %318:gpr64, 0, 1, debug-location !1325 :: (load 4 from %ir.arrayidx13); cg.c:670:17
Bottom Pressure:
GPR32=4
  LiveReg: %317
  UpdateRegP: SU(4) %319:gpr32common = LDRWroX %317:gpr64common, %318:gpr64, 0, 1, debug-location !1325 :: (load 4 from %ir.arrayidx13); cg.c:670:17
              to 
  LiveReg: %318
  UpdateRegP: SU(4) %319:gpr32common = LDRWroX %317:gpr64common, %318:gpr64, 0, 1, debug-location !1325 :: (load 4 from %ir.arrayidx13); cg.c:670:17
              to GPR32 -1
  Ready @19c
  BotQ.A BotLatency SU(4) 17c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 13
  Executed: 20c
  Critical: 13c, 13 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %317:gpr64common = MADDXrrr %313:gpr64, %315:gpr64, %312:gpr64, debug-location !1325; cg.c:670:17
Bottom Pressure:
GPR32=4
  LiveReg: %312
  UpdateRegP: SU(2) %317:gpr64common = MADDXrrr %313:gpr64, %315:gpr64, %312:gpr64, debug-location !1325; cg.c:670:17
              to GPR32 -1
  Ready @20c
  BotQ.A BotLatency SU(2) 18c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 14
  Executed: 21c
  Critical: 14c, 14 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 23 BotQ.A
Queue BotQ.P: 0 1 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %318:gpr64 = LDRSWui %stack.19.nza, 0, debug-location !1328 :: (dereferenceable load 4 from %ir.nza); cg.c:670:25
Bottom Pressure:
GPR32=3
  Ready @23c
  BotQ.A BotLatency SU(3) 21c
  *** Max MOps 1 at cycle 23
Cycle: 24 BotQ.A
BotQ.A @24c
  Retired: 15
  Executed: 24c
  Critical: 15c, 15 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 24c > CritPath 22
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %313:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1327 :: (dereferenceable load 4 from %ir.i); cg.c:670:22
Bottom Pressure:
GPR32=2
  Ready @24c
  BotQ.A BotLatency SU(1) 22c
  *** Max MOps 1 at cycle 24
Cycle: 25 BotQ.A
BotQ.A @25c
  Retired: 16
  Executed: 25c
  Critical: 16c, 16 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %312:gpr64 = LDRXui %stack.7.acol.addr, 0, debug-location !1325 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:670:17
Bottom Pressure:
GPR32=1
  Ready @25c
  *** Max MOps 1 at cycle 25
Cycle: 26 BotQ.A
BotQ.A @26c
  Retired: 17
  Executed: 26c
  Critical: 17c, 17 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %312:gpr64 = LDRXui %stack.7.acol.addr, 0, debug-location !1325 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:670:17
SU(1):   %313:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1327 :: (dereferenceable load 4 from %ir.i); cg.c:670:22
SU(3):   %318:gpr64 = LDRSWui %stack.19.nza, 0, debug-location !1328 :: (dereferenceable load 4 from %ir.nza); cg.c:670:25
SU(2):   %317:gpr64common = MADDXrrr %313:gpr64, %315:gpr64, %312:gpr64, debug-location !1325; cg.c:670:17
SU(4):   %319:gpr32common = LDRWroX %317:gpr64common, %318:gpr64, 0, 1, debug-location !1325 :: (load 4 from %ir.arrayidx13); cg.c:670:17
SU(7):   %321:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1331 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:671:25
SU(10):   %326:gpr64common = LDRXui %stack.6.arow.addr, 0, debug-location !1333 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:671:37
SU(5):   undef %322.sub_32:gpr64common = nsw ADDWri %319:gpr32common, 1, 0, debug-location !1329; cg.c:670:30
SU(6):   STRWui %322.sub_32:gpr64common, %stack.16.j, 0, debug-location !1330 :: (store 4 into %ir.j); cg.c:670:15
SU(8):   %324:gpr64 = SBFMXri %322:gpr64common, 62, 31, debug-location !1331; cg.c:671:25
SU(9):   %325:gpr32 = LDRWroX %321:gpr64common, %324:gpr64, 0, 0, debug-location !1331 :: (load 4 from %ir.arrayidx16); cg.c:671:25
SU(11):   %327:gpr32 = LDRWroX %326:gpr64common, %313:gpr64, 0, 1, debug-location !1333 :: (load 4 from %ir.arrayidx18); cg.c:671:37
SU(12):   %328:gpr32 = nsw ADDWrr %325:gpr32, %327:gpr32, debug-location !1335; cg.c:671:35
SU(13):   STRWroX %328:gpr32, %321:gpr64common, %324:gpr64, 0, 0, debug-location !1338 :: (store 4 into %ir.arrayidx21); cg.c:671:23
SU(14):   %329:gpr32common = LDRWui %stack.19.nza, 0, debug-location !1339 :: (dereferenceable load 4 from %ir.nza); cg.c:669:41
SU(15):   %330:gpr32common = nsw ADDWri %329:gpr32common, 1, 0, debug-location !1339; cg.c:669:41
SU(16):   STRWui %330:gpr32common, %stack.19.nza, 0, debug-location !1339 :: (store 4 into %ir.nza); cg.c:669:41

********** MI Scheduling **********
sparse:%bb.8 for.inc25
  From: %310:gpr32common = LDRWui %stack.15.i, 0, debug-location !1343 :: (dereferenceable load 4 from %ir.i); cg.c:668:25
    To: B %bb.4, debug-location !1344; cg.c:668:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %310:gpr32common = LDRWui %stack.15.i, 0, debug-location !1343 :: (dereferenceable load 4 from %ir.i); cg.c:668:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%310
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %311:gpr32common = nsw ADDWri %310:gpr32common, 1, 0, debug-location !1343; cg.c:668:25
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%310
  Successors:
    SU(2): Data Latency=1 Reg=%311
  Single Issue       : false;
SU(2):   STRWui %311:gpr32common, %stack.15.i, 0, debug-location !1343 :: (store 4 into %ir.i); cg.c:668:25
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%311
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.4, debug-location !1344; cg.c:668:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %311:gpr32common, %stack.15.i, 0, debug-location !1343 :: (store 4 into %ir.i); cg.c:668:25
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %311:gpr32common = nsw ADDWri %310:gpr32common, 1, 0, debug-location !1343; cg.c:668:25
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %310:gpr32common = LDRWui %stack.15.i, 0, debug-location !1343 :: (dereferenceable load 4 from %ir.i); cg.c:668:25
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   %310:gpr32common = LDRWui %stack.15.i, 0, debug-location !1343 :: (dereferenceable load 4 from %ir.i); cg.c:668:25
SU(1):   %311:gpr32common = nsw ADDWri %310:gpr32common, 1, 0, debug-location !1343; cg.c:668:25
SU(2):   STRWui %311:gpr32common, %stack.15.i, 0, debug-location !1343 :: (store 4 into %ir.i); cg.c:668:25

********** MI Scheduling **********
sparse:%bb.9 for.end27
  From: %25:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1347 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:675:5
    To: End RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %25:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1347 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:675:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=4 Reg=%25
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   STRWui $wzr, %25:gpr64common, 0, debug-location !1348 :: (store 4 into %ir.arrayidx281); cg.c:675:15
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%25
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %27:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%27
  Single Issue       : false;
SU(3):   STRWui %27:gpr32, %stack.16.j, 0, debug-location !1349 :: (store 4 into %ir.j); cg.c:676:12
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%27
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) STRWui %27:gpr32, %stack.16.j, 0, debug-location !1349 :: (store 4 into %ir.j); cg.c:676:12
  Ready @0c
  BotQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
BotQ.A RemLatency SU(1) 4c
  BotQ.A RemainingLatency 4 + 1c > CritPath 4
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(1) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot BOT-PATH  
Scheduling SU(1) STRWui $wzr, %25:gpr64common, 0, debug-location !1348 :: (store 4 into %ir.arrayidx281); cg.c:675:15
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %27:gpr32 = MOVi32imm 1
  Ready @2c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %25:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1347 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:675:5
  Ready @5c
  BotQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   %25:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1347 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:675:5
SU(2):   %27:gpr32 = MOVi32imm 1
SU(1):   STRWui $wzr, %25:gpr64common, 0, debug-location !1348 :: (store 4 into %ir.arrayidx281); cg.c:675:15
SU(3):   STRWui %27:gpr32, %stack.16.j, 0, debug-location !1349 :: (store 4 into %ir.j); cg.c:676:12

********** MI Scheduling **********
sparse:%bb.10 for.cond29
  From: %28:gpr32 = LDRWui %stack.16.j, 0, debug-location !1352 :: (dereferenceable load 4 from %ir.j); cg.c:676:17
    To: Bcc 10, %bb.12, implicit killed $nzcv, debug-location !1358; cg.c:676:5
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %28:gpr32 = LDRWui %stack.16.j, 0, debug-location !1352 :: (dereferenceable load 4 from %ir.j); cg.c:676:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=%28
  Single Issue       : false;
SU(1):   %29:gpr32common = LDRWui %stack.14.nrows, 0, debug-location !1354 :: (dereferenceable load 4 from %ir.nrows); cg.c:676:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Data Latency=4 Reg=%29
  Single Issue       : false;
SU(2):   %30:gpr32common = nsw ADDWri %29:gpr32common, 1, 0, debug-location !1355; cg.c:676:27
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(1): Data Latency=4 Reg=%29
  Successors:
    SU(4): Data Latency=1 Reg=%30
  Single Issue       : false;
SU(3):   %0:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1357 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(4):   dead $wzr = SUBSWrr %28:gpr32, %30:gpr32common, implicit-def $nzcv, debug-location !1358; cg.c:676:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=%30
    SU(0): Data Latency=4 Reg=%28
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.12, implicit killed $nzcv, debug-location !1358; cg.c:676:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 3 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) dead $wzr = SUBSWrr %28:gpr32, %30:gpr32common, implicit-def $nzcv, debug-location !1358; cg.c:676:5
  Ready @1c
  BotQ.A TopLatency SU(4) 5c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %30:gpr32common = nsw ADDWri %29:gpr32common, 1, 0, debug-location !1355; cg.c:676:27
  Ready @2c
  BotQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %0:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1357 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:0
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %28:gpr32 = LDRWui %stack.16.j, 0, debug-location !1352 :: (dereferenceable load 4 from %ir.j); cg.c:676:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %29:gpr32common = LDRWui %stack.14.nrows, 0, debug-location !1354 :: (dereferenceable load 4 from %ir.nrows); cg.c:676:21
  Ready @6c
  BotQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(1):   %29:gpr32common = LDRWui %stack.14.nrows, 0, debug-location !1354 :: (dereferenceable load 4 from %ir.nrows); cg.c:676:21
SU(0):   %28:gpr32 = LDRWui %stack.16.j, 0, debug-location !1352 :: (dereferenceable load 4 from %ir.j); cg.c:676:17
SU(3):   %0:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1357 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:0
SU(2):   %30:gpr32common = nsw ADDWri %29:gpr32common, 1, 0, debug-location !1355; cg.c:676:27
SU(4):   dead $wzr = SUBSWrr %28:gpr32, %30:gpr32common, implicit-def $nzcv, debug-location !1358; cg.c:676:5

********** MI Scheduling **********
sparse:%bb.11 for.body32
  From: %295:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1359 :: (dereferenceable load 4 from %ir.j); cg.c:677:28
    To: B %bb.10, debug-location !1370; cg.c:676:5
 RegionInstrs: 11
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %295:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1359 :: (dereferenceable load 4 from %ir.j); cg.c:677:28
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 17
  Successors:
    SU(1): Data Latency=4 Reg=%295
    SU(10): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %296:gpr64 = UBFMXri %295:gpr64, 62, 61, debug-location !1361; cg.c:677:21
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 13
  Predecessors:
    SU(0): Data Latency=4 Reg=%295
  Successors:
    SU(4): Data Latency=1 Reg=%296
    SU(2): Data Latency=1 Reg=%296
  Single Issue       : false;
SU(2):   %297:gpr32 = LDRWroX %0:gpr64common, %296:gpr64, 0, 0, debug-location !1361 :: (load 4 from %ir.arrayidx34); cg.c:677:21
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 11
  Predecessors:
    SU(1): Data Latency=1 Reg=%296
  Successors:
    SU(6): Data Latency=4 Reg=%297
    SU(10): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   %298:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1362 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:677:33
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(4): Data Latency=4 Reg=%298
    SU(7): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   %299:gpr64common = ADDXrr %298:gpr64, %296:gpr64, debug-location !1366; cg.c:677:9
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 12
  Predecessors:
    SU(1): Data Latency=1 Reg=%296
    SU(3): Data Latency=4 Reg=%298
  Successors:
    SU(7): Data Latency=1 Reg=%299
    SU(5): Data Latency=1 Reg=%299
  Single Issue       : false;
SU(5):   %300:gpr32 = LDURWi %299:gpr64common, -4, debug-location !1362 :: (load 4 from %ir.arrayidx37); cg.c:677:33
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 11
  Predecessors:
    SU(4): Data Latency=1 Reg=%299
  Successors:
    SU(6): Data Latency=4 Reg=%300
    SU(10): Ord  Latency=0 Memory
  Single Issue       : false;
SU(6):   %301:gpr32 = nsw ADDWrr %297:gpr32, %300:gpr32, debug-location !1365; cg.c:677:31
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 7
  Predecessors:
    SU(5): Data Latency=4 Reg=%300
    SU(2): Data Latency=4 Reg=%297
  Successors:
    SU(7): Data Latency=1 Reg=%301
  Single Issue       : false;
SU(7):   STRWui %301:gpr32, %299:gpr64common, 0, debug-location !1368 :: (store 4 into %ir.arrayidx40); cg.c:677:19
  # preds left       : 5
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 6
  Predecessors:
    SU(6): Data Latency=1 Reg=%301
    SU(4): Data Latency=1 Reg=%299
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(10): Ord  Latency=0 Memory
    SU(8): Ord  Latency=1 Memory
  Single Issue       : false;
SU(8):   %302:gpr32common = LDRWui %stack.16.j, 0, debug-location !1369 :: (dereferenceable load 4 from %ir.j); cg.c:676:33
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 5
  Predecessors:
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(9): Data Latency=4 Reg=%302
    SU(10): Ord  Latency=0 Memory
  Single Issue       : false;
SU(9):   %303:gpr32common = nsw ADDWri %302:gpr32common, 1, 0, debug-location !1369; cg.c:676:33
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 1
  Predecessors:
    SU(8): Data Latency=4 Reg=%302
  Successors:
    SU(10): Data Latency=1 Reg=%303
  Single Issue       : false;
SU(10):   STRWui %303:gpr32common, %stack.16.j, 0, debug-location !1369 :: (store 4 into %ir.j); cg.c:676:33
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=%303
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.10, debug-location !1370; cg.c:676:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 17
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 
Pick Bot ONLY1     
Scheduling SU(10) STRWui %303:gpr32common, %stack.16.j, 0, debug-location !1369 :: (store 4 into %ir.j); cg.c:676:33
  Ready @0c
  BotQ.A TopLatency SU(10) 17c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Pick Bot ONLY1     
Scheduling SU(9) %303:gpr32common = nsw ADDWri %302:gpr32common, 1, 0, debug-location !1369; cg.c:676:33
  Ready @1c
  BotQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 8 
Pick Bot ONLY1     
Scheduling SU(8) %302:gpr32common = LDRWui %stack.16.j, 0, debug-location !1369 :: (dereferenceable load 4 from %ir.j); cg.c:676:33
  Ready @5c
  BotQ.A BotLatency SU(8) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) STRWui %301:gpr32, %299:gpr64common, 0, debug-location !1368 :: (store 4 into %ir.arrayidx40); cg.c:677:19
  Ready @6c
  BotQ.A BotLatency SU(7) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %301:gpr32 = nsw ADDWrr %297:gpr32, %300:gpr32, debug-location !1365; cg.c:677:31
  Ready @7c
  BotQ.A BotLatency SU(6) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 2 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
BotQ.A RemLatency SU(5) 6c
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %300:gpr32 = LDURWi %299:gpr64common, -4, debug-location !1362 :: (load 4 from %ir.arrayidx37); cg.c:677:33
  Ready @11c
  BotQ.A BotLatency SU(5) 11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
BotQ.A RemLatency SU(2) 5c
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %299:gpr64common = ADDXrr %298:gpr64, %296:gpr64, debug-location !1366; cg.c:677:9
  Ready @12c
  BotQ.A BotLatency SU(4) 12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 7
  Executed: 13c
  Critical: 7c, 7 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %297:gpr32 = LDRWroX %0:gpr64common, %296:gpr64, 0, 0, debug-location !1361 :: (load 4 from %ir.arrayidx34); cg.c:677:21
  Ready @13c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 8
  Executed: 14c
  Critical: 8c, 8 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %296:gpr64 = UBFMXri %295:gpr64, 62, 61, debug-location !1361; cg.c:677:21
  Ready @14c
  BotQ.A BotLatency SU(1) 13c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 9
  Executed: 15c
  Critical: 9c, 9 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 16 BotQ.A
Queue BotQ.P: 0 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %298:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1362 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:677:33
  Ready @16c
  BotQ.A BotLatency SU(3) 16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 10
  Executed: 17c
  Critical: 10c, 10 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 18 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %295:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1359 :: (dereferenceable load 4 from %ir.j); cg.c:677:28
  Ready @18c
  BotQ.A BotLatency SU(0) 17c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 11
  Executed: 19c
  Critical: 11c, 11 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   %295:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1359 :: (dereferenceable load 4 from %ir.j); cg.c:677:28
SU(3):   %298:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1362 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:677:33
SU(1):   %296:gpr64 = UBFMXri %295:gpr64, 62, 61, debug-location !1361; cg.c:677:21
SU(2):   %297:gpr32 = LDRWroX %0:gpr64common, %296:gpr64, 0, 0, debug-location !1361 :: (load 4 from %ir.arrayidx34); cg.c:677:21
SU(4):   %299:gpr64common = ADDXrr %298:gpr64, %296:gpr64, debug-location !1366; cg.c:677:9
SU(5):   %300:gpr32 = LDURWi %299:gpr64common, -4, debug-location !1362 :: (load 4 from %ir.arrayidx37); cg.c:677:33
SU(6):   %301:gpr32 = nsw ADDWrr %297:gpr32, %300:gpr32, debug-location !1365; cg.c:677:31
SU(7):   STRWui %301:gpr32, %299:gpr64common, 0, debug-location !1368 :: (store 4 into %ir.arrayidx40); cg.c:677:19
SU(8):   %302:gpr32common = LDRWui %stack.16.j, 0, debug-location !1369 :: (dereferenceable load 4 from %ir.j); cg.c:676:33
SU(9):   %303:gpr32common = nsw ADDWri %302:gpr32common, 1, 0, debug-location !1369; cg.c:676:33
SU(10):   STRWui %303:gpr32common, %stack.16.j, 0, debug-location !1369 :: (store 4 into %ir.j); cg.c:676:33

********** MI Scheduling **********
sparse:%bb.12 for.end43
  From: %33:gpr64 = LDRSWui %stack.14.nrows, 0, debug-location !1373 :: (dereferenceable load 4 from %ir.nrows); cg.c:679:18
    To: Bcc 13, %bb.14, implicit killed $nzcv, debug-location !1381; cg.c:685:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %33:gpr64 = LDRSWui %stack.14.nrows, 0, debug-location !1373 :: (dereferenceable load 4 from %ir.nrows); cg.c:679:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(1): Data Latency=4 Reg=%33
  Single Issue       : false;
SU(1):   %34:gpr32common = LDRWroX %0:gpr64common, %33:gpr64, 0, 1, debug-location !1374 :: (load 4 from %ir.arrayidx45); cg.c:679:11
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(0): Data Latency=4 Reg=%33
  Successors:
    SU(2): Data Latency=4 Reg=%34
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %35:gpr32common = SUBWri %34:gpr32common, 1, 0, debug-location !1375; cg.c:679:25
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 2
  Predecessors:
    SU(1): Data Latency=4 Reg=%34
  Successors:
    SU(5): Data Latency=1 Reg=%35
    SU(3): Data Latency=1 Reg=%35
  Single Issue       : false;
SU(3):   STRWui %35:gpr32common, %stack.19.nza, 0, debug-location !1376 :: (store 4 into %ir.nza); cg.c:679:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%35
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   %36:gpr32 = LDRWui %stack.4.nz.addr, 0, debug-location !1379 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:685:15
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=%36
  Single Issue       : false;
SU(5):   dead $wzr = SUBSWrr %35:gpr32common, %36:gpr32, implicit-def $nzcv, debug-location !1381; cg.c:685:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=%35
    SU(4): Data Latency=4 Reg=%36
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 13, %bb.14, implicit killed $nzcv, debug-location !1381; cg.c:685:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) STRWui %35:gpr32common, %stack.19.nza, 0, debug-location !1376 :: (store 4 into %ir.nza); cg.c:679:9
  Ready @0c
  BotQ.A TopLatency SU(3) 9c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) dead $wzr = SUBSWrr %35:gpr32common, %36:gpr32, implicit-def $nzcv, debug-location !1381; cg.c:685:9
  Ready @1c
  BotQ.A TopLatency SU(5) 9c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %35:gpr32common = SUBWri %34:gpr32common, 1, 0, debug-location !1375; cg.c:679:25
  Ready @2c
  BotQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 1 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %36:gpr32 = LDRWui %stack.4.nz.addr, 0, debug-location !1379 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:685:15
  Ready @5c
  BotQ.A BotLatency SU(4) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %34:gpr32common = LDRWroX %0:gpr64common, %33:gpr64, 0, 1, debug-location !1374 :: (load 4 from %ir.arrayidx45); cg.c:679:11
  Ready @6c
  BotQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %33:gpr64 = LDRSWui %stack.14.nrows, 0, debug-location !1373 :: (dereferenceable load 4 from %ir.nrows); cg.c:679:18
  Ready @10c
  BotQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 6
  Executed: 11c
  Critical: 6c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   %33:gpr64 = LDRSWui %stack.14.nrows, 0, debug-location !1373 :: (dereferenceable load 4 from %ir.nrows); cg.c:679:18
SU(1):   %34:gpr32common = LDRWroX %0:gpr64common, %33:gpr64, 0, 1, debug-location !1374 :: (load 4 from %ir.arrayidx45); cg.c:679:11
SU(4):   %36:gpr32 = LDRWui %stack.4.nz.addr, 0, debug-location !1379 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:685:15
SU(2):   %35:gpr32common = SUBWri %34:gpr32common, 1, 0, debug-location !1375; cg.c:679:25
SU(5):   dead $wzr = SUBSWrr %35:gpr32common, %36:gpr32, implicit-def $nzcv, debug-location !1381; cg.c:685:9
SU(3):   STRWui %35:gpr32common, %stack.19.nza, 0, debug-location !1376 :: (store 4 into %ir.nza); cg.c:679:9

********** MI Scheduling **********
sparse:%bb.13 if.then
  From: %42:gpr64 = MOVaddr target-flags(aarch64-page) @.str.38, target-flags(aarch64-pageoff, aarch64-nc) @.str.38, debug-location !1386; cg.c:687:9
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit-def $sp, implicit-def dead $w0, debug-location !1386; cg.c:687:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %42:gpr64 = MOVaddr target-flags(aarch64-page) @.str.38, target-flags(aarch64-pageoff, aarch64-nc) @.str.38, debug-location !1386; cg.c:687:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%42
  Single Issue       : false;
SU(1):   $x0 = COPY %42:gpr64, debug-location !1386; cg.c:687:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%42
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $w1 = COPY %40:gpr32, debug-location !1386; cg.c:687:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $w2 = COPY %41:gpr32, debug-location !1386; cg.c:687:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit-def $sp, implicit-def dead $w0, debug-location !1386; cg.c:687:9
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $w2 = COPY %41:gpr32, debug-location !1386; cg.c:687:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(2) $w1 = COPY %40:gpr32, debug-location !1386; cg.c:687:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %42:gpr64, debug-location !1386; cg.c:687:9
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %42:gpr64 = MOVaddr target-flags(aarch64-page) @.str.38, target-flags(aarch64-pageoff, aarch64-nc) @.str.38, debug-location !1386; cg.c:687:9
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   %42:gpr64 = MOVaddr target-flags(aarch64-page) @.str.38, target-flags(aarch64-pageoff, aarch64-nc) @.str.38, debug-location !1386; cg.c:687:9
SU(1):   $x0 = COPY %42:gpr64, debug-location !1386; cg.c:687:9
SU(2):   $w1 = COPY %40:gpr32, debug-location !1386; cg.c:687:9
SU(3):   $w2 = COPY %41:gpr32, debug-location !1386; cg.c:687:9

********** MI Scheduling **********
sparse:%bb.13 if.then
  From: %40:gpr32 = LDRWui %stack.19.nza, 0, debug-location !1384 :: (dereferenceable load 4 from %ir.nza); cg.c:687:41
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1386; cg.c:687:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %40:gpr32 = LDRWui %stack.19.nza, 0, debug-location !1384 :: (dereferenceable load 4 from %ir.nza); cg.c:687:41
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %41:gpr32 = LDRWui %stack.4.nz.addr, 0, debug-location !1385 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:687:46
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1386; cg.c:687:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %41:gpr32 = LDRWui %stack.4.nz.addr, 0, debug-location !1385 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:687:46
  Ready @3c
  BotQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 1
  Executed: 4c
  Critical: 1c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %40:gpr32 = LDRWui %stack.19.nza, 0, debug-location !1384 :: (dereferenceable load 4 from %ir.nza); cg.c:687:41
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   %40:gpr32 = LDRWui %stack.19.nza, 0, debug-location !1384 :: (dereferenceable load 4 from %ir.nza); cg.c:687:41
SU(1):   %41:gpr32 = LDRWui %stack.4.nz.addr, 0, debug-location !1385 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:687:46

********** MI Scheduling **********
sparse:%bb.13 if.then
  From: %38:gpr64 = MOVaddr target-flags(aarch64-page) @.str.37, target-flags(aarch64-pageoff, aarch64-nc) @.str.37, debug-location !1382; cg.c:686:9
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !1382; cg.c:686:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %38:gpr64 = MOVaddr target-flags(aarch64-page) @.str.37, target-flags(aarch64-pageoff, aarch64-nc) @.str.37, debug-location !1382; cg.c:686:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%38
  Single Issue       : false;
SU(1):   $x0 = COPY %38:gpr64, debug-location !1382; cg.c:686:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%38
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !1382; cg.c:686:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %38:gpr64, debug-location !1382; cg.c:686:9
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %38:gpr64 = MOVaddr target-flags(aarch64-page) @.str.37, target-flags(aarch64-pageoff, aarch64-nc) @.str.37, debug-location !1382; cg.c:686:9
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   %38:gpr64 = MOVaddr target-flags(aarch64-page) @.str.37, target-flags(aarch64-pageoff, aarch64-nc) @.str.37, debug-location !1382; cg.c:686:9
SU(1):   $x0 = COPY %38:gpr64, debug-location !1382; cg.c:686:9

********** MI Scheduling **********
sparse:%bb.14 if.end
  From: STRWui $wzr, %stack.16.j, 0, debug-location !1388 :: (store 4 into %ir.j); cg.c:694:12
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui $wzr, %stack.16.j, 0, debug-location !1388 :: (store 4 into %ir.j); cg.c:694:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %292:gpr32 = MOVi32imm -1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %292:gpr32 = MOVi32imm -1
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.16.j, 0, debug-location !1388 :: (store 4 into %ir.j); cg.c:694:12
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   STRWui $wzr, %stack.16.j, 0, debug-location !1388 :: (store 4 into %ir.j); cg.c:694:12
SU(1):   %292:gpr32 = MOVi32imm -1

********** MI Scheduling **********
sparse:%bb.15 for.cond49
  From: %45:gpr32 = LDRWui %stack.16.j, 0, debug-location !1391 :: (dereferenceable load 4 from %ir.j); cg.c:694:17
    To: Bcc 10, %bb.20, implicit killed $nzcv, debug-location !1395; cg.c:694:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %45:gpr32 = LDRWui %stack.16.j, 0, debug-location !1391 :: (dereferenceable load 4 from %ir.j); cg.c:694:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%45
  Single Issue       : false;
SU(1):   %46:gpr32 = LDRWui %stack.14.nrows, 0, debug-location !1393 :: (dereferenceable load 4 from %ir.nrows); cg.c:694:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%46
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %45:gpr32, %46:gpr32, implicit-def $nzcv, debug-location !1395; cg.c:694:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%46
    SU(0): Data Latency=4 Reg=%45
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.20, implicit killed $nzcv, debug-location !1395; cg.c:694:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %45:gpr32, %46:gpr32, implicit-def $nzcv, debug-location !1395; cg.c:694:5
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %46:gpr32 = LDRWui %stack.14.nrows, 0, debug-location !1393 :: (dereferenceable load 4 from %ir.nrows); cg.c:694:21
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %45:gpr32 = LDRWui %stack.16.j, 0, debug-location !1391 :: (dereferenceable load 4 from %ir.j); cg.c:694:17
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   %45:gpr32 = LDRWui %stack.16.j, 0, debug-location !1391 :: (dereferenceable load 4 from %ir.j); cg.c:694:17
SU(1):   %46:gpr32 = LDRWui %stack.14.nrows, 0, debug-location !1393 :: (dereferenceable load 4 from %ir.nrows); cg.c:694:21
SU(2):   dead $wzr = SUBSWrr %45:gpr32, %46:gpr32, implicit-def $nzcv, debug-location !1395; cg.c:694:5

********** MI Scheduling **********
sparse:%bb.16 for.body51
  From: %273:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1396 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:18
    To: End RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %273:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1396 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Data Latency=4 Reg=%273
  Single Issue       : false;
SU(1):   %274:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1399 :: (dereferenceable load 4 from %ir.j); cg.c:695:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Data Latency=4 Reg=%274
  Single Issue       : false;
SU(2):   %275:gpr32 = LDRWroX %273:gpr64common, %274:gpr64, 0, 1, debug-location !1396 :: (load 4 from %ir.arrayidx53); cg.c:695:18
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=%274
    SU(0): Data Latency=4 Reg=%273
  Successors:
    SU(3): Data Latency=4 Reg=%275
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   STRWui %275:gpr32, %stack.20.k, 0, debug-location !1400 :: (store 4 into %ir.k); cg.c:695:16
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%275
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) STRWui %275:gpr32, %stack.20.k, 0, debug-location !1400 :: (store 4 into %ir.k); cg.c:695:16
  Ready @0c
  BotQ.A TopLatency SU(3) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %275:gpr32 = LDRWroX %273:gpr64common, %274:gpr64, 0, 1, debug-location !1396 :: (load 4 from %ir.arrayidx53); cg.c:695:18
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 8 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %274:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1399 :: (dereferenceable load 4 from %ir.j); cg.c:695:25
  Ready @8c
  BotQ.A BotLatency SU(1) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 3
  Executed: 9c
  Critical: 3c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %273:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1396 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:18
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 4
  Executed: 10c
  Critical: 4c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.16 ***
SU(0):   %273:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1396 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:18
SU(1):   %274:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1399 :: (dereferenceable load 4 from %ir.j); cg.c:695:25
SU(2):   %275:gpr32 = LDRWroX %273:gpr64common, %274:gpr64, 0, 1, debug-location !1396 :: (load 4 from %ir.arrayidx53); cg.c:695:18
SU(3):   STRWui %275:gpr32, %stack.20.k, 0, debug-location !1400 :: (store 4 into %ir.k); cg.c:695:16

********** MI Scheduling **********
sparse:%bb.17 for.cond54
  From: %276:gpr32 = LDRWui %stack.20.k, 0, debug-location !1402 :: (dereferenceable load 4 from %ir.k); cg.c:695:29
    To: Bcc 10, %bb.19, implicit killed $nzcv, debug-location !1408; cg.c:695:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %276:gpr32 = LDRWui %stack.20.k, 0, debug-location !1402 :: (dereferenceable load 4 from %ir.k); cg.c:695:29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=%276
  Single Issue       : false;
SU(1):   %277:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1404 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:33
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(3): Data Latency=4 Reg=%277
  Single Issue       : false;
SU(2):   %278:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1405 :: (dereferenceable load 4 from %ir.j); cg.c:695:40
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(3): Data Latency=4 Reg=%278
  Single Issue       : false;
SU(3):   %279:gpr64common = ADDXrs %277:gpr64, %278:gpr64, 2, debug-location !1404; cg.c:695:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(2): Data Latency=4 Reg=%278
    SU(1): Data Latency=4 Reg=%277
  Successors:
    SU(4): Data Latency=1 Reg=%279
  Single Issue       : false;
SU(4):   %280:gpr32 = LDRWui %279:gpr64common, 1, debug-location !1404 :: (load 4 from %ir.arrayidx57); cg.c:695:33
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(3): Data Latency=1 Reg=%279
  Successors:
    SU(5): Data Latency=4 Reg=%280
  Single Issue       : false;
SU(5):   dead $wzr = SUBSWrr %276:gpr32, %280:gpr32, implicit-def $nzcv, debug-location !1408; cg.c:695:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(4): Data Latency=4 Reg=%280
    SU(0): Data Latency=4 Reg=%276
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.19, implicit killed $nzcv, debug-location !1408; cg.c:695:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) dead $wzr = SUBSWrr %276:gpr32, %280:gpr32, implicit-def $nzcv, debug-location !1408; cg.c:695:9
  Ready @1c
  BotQ.A TopLatency SU(5) 9c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 4 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
BotQ.A RemLatency SU(4) 5c
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %280:gpr32 = LDRWui %279:gpr64common, 1, debug-location !1404 :: (load 4 from %ir.arrayidx57); cg.c:695:33
  Ready @5c
  BotQ.A BotLatency SU(4) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
BotQ.A RemLatency SU(3) 4c
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %279:gpr64common = ADDXrs %277:gpr64, %278:gpr64, 2, debug-location !1404; cg.c:695:33
  Ready @6c
  BotQ.A BotLatency SU(3) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %276:gpr32 = LDRWui %stack.20.k, 0, debug-location !1402 :: (dereferenceable load 4 from %ir.k); cg.c:695:29
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 4
  Executed: 8c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %278:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1405 :: (dereferenceable load 4 from %ir.j); cg.c:695:40
  Ready @10c
  BotQ.A BotLatency SU(2) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %277:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1404 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:33
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(1):   %277:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1404 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:33
SU(2):   %278:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1405 :: (dereferenceable load 4 from %ir.j); cg.c:695:40
SU(0):   %276:gpr32 = LDRWui %stack.20.k, 0, debug-location !1402 :: (dereferenceable load 4 from %ir.k); cg.c:695:29
SU(3):   %279:gpr64common = ADDXrs %277:gpr64, %278:gpr64, 2, debug-location !1404; cg.c:695:33
SU(4):   %280:gpr32 = LDRWui %279:gpr64common, 1, debug-location !1404 :: (load 4 from %ir.arrayidx57); cg.c:695:33
SU(5):   dead $wzr = SUBSWrr %276:gpr32, %280:gpr32, implicit-def $nzcv, debug-location !1408; cg.c:695:9

********** MI Scheduling **********
sparse:%bb.18 for.body59
  From: %287:gpr64common = LDRXui %336:gpr64sp, 1, debug-location !1409 :: (dereferenceable load 8 from %ir.a.addr); cg.c:696:13
    To: B %bb.17, debug-location !1417; cg.c:695:9
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %287:gpr64common = LDRXui %336:gpr64sp, 1, debug-location !1409 :: (dereferenceable load 8 from %ir.a.addr); cg.c:696:13
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(2): Data Latency=4 Reg=%287
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %288:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1411 :: (dereferenceable load 4 from %ir.k); cg.c:696:15
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(2): Data Latency=4 Reg=%288
    SU(8): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   STRXroX $xzr, %287:gpr64common, %288:gpr64, 0, 1, debug-location !1412 :: (store 8 into %ir.arrayidx61); cg.c:696:18
  # preds left       : 4
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(1): Data Latency=4 Reg=%288
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%287
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(8): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(6): Ord  Latency=1 Memory
    SU(4): Ord  Latency=1 Memory
    SU(3): Ord  Latency=1 Memory
  Single Issue       : false;
SU(3):   %290:gpr64common = LDRXui %336:gpr64sp, 0, debug-location !1413 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:697:13
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(5): Data Latency=4 Reg=%290
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   %291:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1414 :: (dereferenceable load 4 from %ir.k); cg.c:697:20
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(5): Data Latency=4 Reg=%291
    SU(8): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(5):   STRWroX %292:gpr32, %290:gpr64common, %291:gpr64, 0, 1, debug-location !1415 :: (store 4 into %ir.arrayidx63); cg.c:697:23
  # preds left       : 7
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 6
  Predecessors:
    SU(4): Data Latency=4 Reg=%291
    SU(4): Ord  Latency=0 Memory
    SU(3): Data Latency=4 Reg=%290
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(8): Ord  Latency=0 Memory
    SU(6): Ord  Latency=1 Memory
  Single Issue       : false;
SU(6):   %293:gpr32common = LDRWui %stack.20.k, 0, debug-location !1416 :: (dereferenceable load 4 from %ir.k); cg.c:695:49
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 5
  Predecessors:
    SU(5): Ord  Latency=1 Memory
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(7): Data Latency=4 Reg=%293
    SU(8): Ord  Latency=0 Memory
  Single Issue       : false;
SU(7):   %294:gpr32common = nsw ADDWri %293:gpr32common, 1, 0, debug-location !1416; cg.c:695:49
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 1
  Predecessors:
    SU(6): Data Latency=4 Reg=%293
  Successors:
    SU(8): Data Latency=1 Reg=%294
  Single Issue       : false;
SU(8):   STRWui %294:gpr32common, %stack.20.k, 0, debug-location !1416 :: (store 4 into %ir.k); cg.c:695:49
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=%294
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.17, debug-location !1417; cg.c:695:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 15
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Pick Bot ONLY1     
Scheduling SU(8) STRWui %294:gpr32common, %stack.20.k, 0, debug-location !1416 :: (store 4 into %ir.k); cg.c:695:49
  Ready @0c
  BotQ.A TopLatency SU(8) 15c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) %294:gpr32common = nsw ADDWri %293:gpr32common, 1, 0, debug-location !1416; cg.c:695:49
  Ready @1c
  BotQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %293:gpr32common = LDRWui %stack.20.k, 0, debug-location !1416 :: (dereferenceable load 4 from %ir.k); cg.c:695:49
  Ready @5c
  BotQ.A BotLatency SU(6) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) STRWroX %292:gpr32, %290:gpr64common, %291:gpr64, 0, 1, debug-location !1415 :: (store 4 into %ir.arrayidx63); cg.c:697:23
  Ready @6c
  BotQ.A BotLatency SU(5) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(4) 5c
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %291:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1414 :: (dereferenceable load 4 from %ir.k); cg.c:697:20
  Ready @10c
  BotQ.A BotLatency SU(4) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %290:gpr64common = LDRXui %336:gpr64sp, 0, debug-location !1413 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:697:13
  Ready @11c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRXroX $xzr, %287:gpr64common, %288:gpr64, 0, 1, debug-location !1412 :: (store 8 into %ir.arrayidx61); cg.c:696:18
  Ready @12c
  BotQ.A BotLatency SU(2) 11c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 7
  Executed: 13c
  Critical: 7c, 7 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 16 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 16c > CritPath 15
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %288:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1411 :: (dereferenceable load 4 from %ir.k); cg.c:696:15
  Ready @16c
  BotQ.A BotLatency SU(1) 15c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 8
  Executed: 17c
  Critical: 8c, 8 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %287:gpr64common = LDRXui %336:gpr64sp, 1, debug-location !1409 :: (dereferenceable load 8 from %ir.a.addr); cg.c:696:13
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 9
  Executed: 18c
  Critical: 9c, 9 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.18 ***
SU(0):   %287:gpr64common = LDRXui %336:gpr64sp, 1, debug-location !1409 :: (dereferenceable load 8 from %ir.a.addr); cg.c:696:13
SU(1):   %288:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1411 :: (dereferenceable load 4 from %ir.k); cg.c:696:15
SU(2):   STRXroX $xzr, %287:gpr64common, %288:gpr64, 0, 1, debug-location !1412 :: (store 8 into %ir.arrayidx61); cg.c:696:18
SU(3):   %290:gpr64common = LDRXui %336:gpr64sp, 0, debug-location !1413 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:697:13
SU(4):   %291:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1414 :: (dereferenceable load 4 from %ir.k); cg.c:697:20
SU(5):   STRWroX %292:gpr32, %290:gpr64common, %291:gpr64, 0, 1, debug-location !1415 :: (store 4 into %ir.arrayidx63); cg.c:697:23
SU(6):   %293:gpr32common = LDRWui %stack.20.k, 0, debug-location !1416 :: (dereferenceable load 4 from %ir.k); cg.c:695:49
SU(7):   %294:gpr32common = nsw ADDWri %293:gpr32common, 1, 0, debug-location !1416; cg.c:695:49
SU(8):   STRWui %294:gpr32common, %stack.20.k, 0, debug-location !1416 :: (store 4 into %ir.k); cg.c:695:49

********** MI Scheduling **********
sparse:%bb.19 for.end66
  From: %282:gpr64common = LDRXui %fixed-stack.0, 0, debug-location !1420 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:699:9
    To: B %bb.15, debug-location !1424; cg.c:694:5
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %282:gpr64common = LDRXui %fixed-stack.0, 0, debug-location !1420 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:699:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(2): Data Latency=4 Reg=%282
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %283:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1421 :: (dereferenceable load 4 from %ir.j); cg.c:699:15
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(2): Data Latency=4 Reg=%283
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   STRWroX $wzr, %282:gpr64common, %283:gpr64, 0, 1, debug-location !1422 :: (store 4 into %ir.arrayidx68); cg.c:699:18
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(1): Data Latency=4 Reg=%283
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%282
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=1 Memory
  Single Issue       : false;
SU(3):   %285:gpr32common = LDRWui %stack.16.j, 0, debug-location !1423 :: (dereferenceable load 4 from %ir.j); cg.c:694:29
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(4): Data Latency=4 Reg=%285
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   %286:gpr32common = nsw ADDWri %285:gpr32common, 1, 0, debug-location !1423; cg.c:694:29
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%285
  Successors:
    SU(5): Data Latency=1 Reg=%286
  Single Issue       : false;
SU(5):   STRWui %286:gpr32common, %stack.16.j, 0, debug-location !1423 :: (store 4 into %ir.j); cg.c:694:29
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%286
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.15, debug-location !1424; cg.c:694:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) STRWui %286:gpr32common, %stack.16.j, 0, debug-location !1423 :: (store 4 into %ir.j); cg.c:694:29
  Ready @0c
  BotQ.A TopLatency SU(5) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %286:gpr32common = nsw ADDWri %285:gpr32common, 1, 0, debug-location !1423; cg.c:694:29
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %285:gpr32common = LDRWui %stack.16.j, 0, debug-location !1423 :: (dereferenceable load 4 from %ir.j); cg.c:694:29
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWroX $wzr, %282:gpr64common, %283:gpr64, 0, 1, debug-location !1422 :: (store 4 into %ir.arrayidx68); cg.c:699:18
  Ready @6c
  BotQ.A BotLatency SU(2) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %283:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1421 :: (dereferenceable load 4 from %ir.j); cg.c:699:15
  Ready @10c
  BotQ.A BotLatency SU(1) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %282:gpr64common = LDRXui %fixed-stack.0, 0, debug-location !1420 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:699:9
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   %282:gpr64common = LDRXui %fixed-stack.0, 0, debug-location !1420 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:699:9
SU(1):   %283:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1421 :: (dereferenceable load 4 from %ir.j); cg.c:699:15
SU(2):   STRWroX $wzr, %282:gpr64common, %283:gpr64, 0, 1, debug-location !1422 :: (store 4 into %ir.arrayidx68); cg.c:699:18
SU(3):   %285:gpr32common = LDRWui %stack.16.j, 0, debug-location !1423 :: (dereferenceable load 4 from %ir.j); cg.c:694:29
SU(4):   %286:gpr32common = nsw ADDWri %285:gpr32common, 1, 0, debug-location !1423; cg.c:694:29
SU(5):   STRWui %286:gpr32common, %stack.16.j, 0, debug-location !1423 :: (store 4 into %ir.j); cg.c:694:29

********** MI Scheduling **********
sparse:%bb.20 for.end71
  From: %58:fpr64 = COPY $d0, debug-location !1432; cg.c:706:13
    To: End RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %58:fpr64 = COPY $d0, debug-location !1432; cg.c:706:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%58
  Single Issue       : false;
SU(1):   STRDui %58:fpr64, %stack.26.ratio, 0, debug-location !1433 :: (store 8 into %ir.ratio); cg.c:706:11
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%58
  Single Issue       : false;
SU(2):   STRWui $wzr, %stack.15.i, 0, debug-location !1434 :: (store 4 into %ir.i); cg.c:708:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   undef %150.sub_32:gpr64 = MOVi32imm 56
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   undef %158.sub_32:gpr64 = MOVi32imm 112
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   %247:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(6):   %250:gpr64 = MOVaddr target-flags(aarch64-page) @.str.39, target-flags(aarch64-pageoff, aarch64-nc) @.str.39
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 5 4 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %58:fpr64 = COPY $d0, debug-location !1432; cg.c:706:13
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 5 4 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 6 2 3 4 5 1 
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(6) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %250:gpr64 = MOVaddr target-flags(aarch64-page) @.str.39, target-flags(aarch64-pageoff, aarch64-nc) @.str.39
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 5 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 1 2 3 4 5 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %247:gpr32 = MOVi32imm 1
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 4 3 
Queue TopQ.P: 
Queue TopQ.A: 1 2 3 4 
  BotQ.A RemainingLatency 0 + 2c > CritPath 0
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) undef %158.sub_32:gpr64 = MOVi32imm 112
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 3 
Queue TopQ.P: 
Queue TopQ.A: 1 2 3 
  BotQ.A RemainingLatency 0 + 3c > CritPath 0
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) undef %150.sub_32:gpr64 = MOVi32imm 56
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 1 2 
  BotQ.A RemainingLatency 0 + 4c > CritPath 0
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) STRWui $wzr, %stack.15.i, 0, debug-location !1434 :: (store 4 into %ir.i); cg.c:708:12
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %58:fpr64, %stack.26.ratio, 0, debug-location !1433 :: (store 8 into %ir.ratio); cg.c:706:11
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   %58:fpr64 = COPY $d0, debug-location !1432; cg.c:706:13
SU(1):   STRDui %58:fpr64, %stack.26.ratio, 0, debug-location !1433 :: (store 8 into %ir.ratio); cg.c:706:11
SU(2):   STRWui $wzr, %stack.15.i, 0, debug-location !1434 :: (store 4 into %ir.i); cg.c:708:12
SU(3):   undef %150.sub_32:gpr64 = MOVi32imm 56
SU(4):   undef %158.sub_32:gpr64 = MOVi32imm 112
SU(5):   %247:gpr32 = MOVi32imm 1
SU(6):   %250:gpr64 = MOVaddr target-flags(aarch64-page) @.str.39, target-flags(aarch64-pageoff, aarch64-nc) @.str.39

********** MI Scheduling **********
sparse:%bb.20 for.end71
  From: $d0 = COPY %49:fpr64, debug-location !1432; cg.c:706:13
    To: BL @pow, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $d1, implicit-def $sp, implicit-def $d0, debug-location !1432; cg.c:706:13
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $d0 = COPY %49:fpr64, debug-location !1432; cg.c:706:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $d1 = COPY %57:fpr64, debug-location !1432; cg.c:706:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @pow, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $d1, implicit-def $sp, implicit-def $d0, debug-location !1432; cg.c:706:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) $d1 = COPY %57:fpr64, debug-location !1432; cg.c:706:13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $d0 = COPY %49:fpr64, debug-location !1432; cg.c:706:13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   $d0 = COPY %49:fpr64, debug-location !1432; cg.c:706:13
SU(1):   $d1 = COPY %57:fpr64, debug-location !1432; cg.c:706:13

********** MI Scheduling **********
sparse:%bb.20 for.end71
  From: %48:gpr64 = MOVi64imm 4607182418800017408
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1432; cg.c:706:13
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %48:gpr64 = MOVi64imm 4607182418800017408
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%48
  Single Issue       : false;
SU(1):   STRXui %48:gpr64, %stack.24.size, 0, debug-location !1427 :: (store 8 into %ir.size); cg.c:705:10
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%48
  Single Issue       : false;
SU(2):   %49:fpr64 = LDRDui %stack.12.rcond.addr, 0, debug-location !1428 :: (dereferenceable load 8 from %ir.rcond.addr); cg.c:706:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   undef %51.ssub:fpr64 = LDRSui %stack.3.n.addr, 0, debug-location !1430 :: (dereferenceable load 4 from %ir.n.addr); cg.c:706:31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(4): Data Latency=4 Reg=%51
  Single Issue       : false;
SU(4):   %53:fpr128 = SSHLLv2i32_shift %51:fpr64, 0, debug-location !1430; cg.c:706:31
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(3): Data Latency=4 Reg=%51
  Successors:
    SU(5): Data Latency=1 Reg=%53
  Single Issue       : false;
SU(5):   %55:fpr64 = SCVTFv1i64 %53.dsub:fpr128, debug-location !1430; cg.c:706:31
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%53
  Successors:
    SU(7): Data Latency=1 Reg=%55
  Single Issue       : false;
SU(6):   %56:fpr64 = FMOVDi 112
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%56
  Single Issue       : false;
SU(7):   %57:fpr64 = FDIVDrr %56:fpr64, %55:fpr64, debug-location !1431; cg.c:706:29
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%55
    SU(6): Data Latency=1 Reg=%56
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1432; cg.c:706:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 7 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 6 
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %57:fpr64 = FDIVDrr %56:fpr64, %55:fpr64, debug-location !1431; cg.c:706:29
  Ready @0c
  BotQ.A TopLatency SU(7) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 5 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 6 
BotQ.A RemLatency SU(5) 5c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %56:fpr64 = FMOVDi 112
  Ready @1c
  BotQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 5 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 
BotQ.A RemLatency SU(5) 5c
  BotQ.A RemainingLatency 5 + 2c > CritPath 6
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(5) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) %55:fpr64 = SCVTFv1i64 %53.dsub:fpr128, debug-location !1430; cg.c:706:31
  Ready @2c
  BotQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 
BotQ.A RemLatency SU(4) 4c
  BotQ.A RemainingLatency 4 + 3c > CritPath 6
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(4) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) %53:fpr128 = SSHLLv2i32_shift %51:fpr64, 0, debug-location !1430; cg.c:706:31
  Ready @3c
  BotQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 
BotQ.A RemLatency SU(1) 1c
  BotQ.A RemainingLatency 3 + 4c > CritPath 6
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) STRXui %48:gpr64, %stack.24.size, 0, debug-location !1427 :: (store 8 into %ir.size); cg.c:705:10
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 
  BotQ.A RemainingLatency 2 + 5c > CritPath 6
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %49:fpr64 = LDRDui %stack.12.rcond.addr, 0, debug-location !1428 :: (dereferenceable load 8 from %ir.rcond.addr); cg.c:706:17
  Ready @5c
  BotQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %48:gpr64 = MOVi64imm 4607182418800017408
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) undef %51.ssub:fpr64 = LDRSui %stack.3.n.addr, 0, debug-location !1430 :: (dereferenceable load 4 from %ir.n.addr); cg.c:706:31
  Ready @7c
  BotQ.A BotLatency SU(3) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.20 ***
SU(3):   undef %51.ssub:fpr64 = LDRSui %stack.3.n.addr, 0, debug-location !1430 :: (dereferenceable load 4 from %ir.n.addr); cg.c:706:31
SU(0):   %48:gpr64 = MOVi64imm 4607182418800017408
SU(2):   %49:fpr64 = LDRDui %stack.12.rcond.addr, 0, debug-location !1428 :: (dereferenceable load 8 from %ir.rcond.addr); cg.c:706:17
SU(1):   STRXui %48:gpr64, %stack.24.size, 0, debug-location !1427 :: (store 8 into %ir.size); cg.c:705:10
SU(4):   %53:fpr128 = SSHLLv2i32_shift %51:fpr64, 0, debug-location !1430; cg.c:706:31
SU(5):   %55:fpr64 = SCVTFv1i64 %53.dsub:fpr128, debug-location !1430; cg.c:706:31
SU(6):   %56:fpr64 = FMOVDi 112
SU(7):   %57:fpr64 = FDIVDrr %56:fpr64, %55:fpr64, debug-location !1431; cg.c:706:29

********** MI Scheduling **********
sparse:%bb.21 for.cond73
  From: %60:gpr32 = LDRWui %stack.15.i, 0, debug-location !1437 :: (dereferenceable load 4 from %ir.i); cg.c:708:17
    To: Bcc 10, %bb.48, implicit killed $nzcv, debug-location !1441; cg.c:708:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %60:gpr32 = LDRWui %stack.15.i, 0, debug-location !1437 :: (dereferenceable load 4 from %ir.i); cg.c:708:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%60
  Single Issue       : false;
SU(1):   %61:gpr32 = LDRWui %stack.3.n.addr, 0, debug-location !1439 :: (dereferenceable load 4 from %ir.n.addr); cg.c:708:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%61
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %60:gpr32, %61:gpr32, implicit-def $nzcv, debug-location !1441; cg.c:708:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%61
    SU(0): Data Latency=4 Reg=%60
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.48, implicit killed $nzcv, debug-location !1441; cg.c:708:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %60:gpr32, %61:gpr32, implicit-def $nzcv, debug-location !1441; cg.c:708:5
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %61:gpr32 = LDRWui %stack.3.n.addr, 0, debug-location !1439 :: (dereferenceable load 4 from %ir.n.addr); cg.c:708:21
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %60:gpr32 = LDRWui %stack.15.i, 0, debug-location !1437 :: (dereferenceable load 4 from %ir.i); cg.c:708:17
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.21 ***
SU(0):   %60:gpr32 = LDRWui %stack.15.i, 0, debug-location !1437 :: (dereferenceable load 4 from %ir.i); cg.c:708:17
SU(1):   %61:gpr32 = LDRWui %stack.3.n.addr, 0, debug-location !1439 :: (dereferenceable load 4 from %ir.n.addr); cg.c:708:21
SU(2):   dead $wzr = SUBSWrr %60:gpr32, %61:gpr32, implicit-def $nzcv, debug-location !1441; cg.c:708:5

********** MI Scheduling **********
sparse:%bb.23 for.cond77
  From: %137:gpr32 = LDRWui %stack.19.nza, 0, debug-location !1446 :: (dereferenceable load 4 from %ir.nza); cg.c:709:23
    To: Bcc 10, %bb.47, implicit killed $nzcv, debug-location !1451; cg.c:709:9
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %137:gpr32 = LDRWui %stack.19.nza, 0, debug-location !1446 :: (dereferenceable load 4 from %ir.nza); cg.c:709:23
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=%137
  Single Issue       : false;
SU(1):   %138:gpr64common = LDRXui %stack.6.arow.addr, 0, debug-location !1448 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:709:29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Data Latency=4 Reg=%138
  Single Issue       : false;
SU(2):   %139:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1449 :: (dereferenceable load 4 from %ir.i); cg.c:709:34
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Data Latency=4 Reg=%139
  Single Issue       : false;
SU(3):   %140:gpr32 = LDRWroX %138:gpr64common, %139:gpr64, 0, 1, debug-location !1448 :: (load 4 from %ir.arrayidx79); cg.c:709:29
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(2): Data Latency=4 Reg=%139
    SU(1): Data Latency=4 Reg=%138
  Successors:
    SU(4): Data Latency=4 Reg=%140
  Single Issue       : false;
SU(4):   dead $wzr = SUBSWrr %137:gpr32, %140:gpr32, implicit-def $nzcv, debug-location !1451; cg.c:709:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%140
    SU(0): Data Latency=4 Reg=%137
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.47, implicit killed $nzcv, debug-location !1451; cg.c:709:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) dead $wzr = SUBSWrr %137:gpr32, %140:gpr32, implicit-def $nzcv, debug-location !1451; cg.c:709:9
  Ready @1c
  BotQ.A TopLatency SU(4) 8c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
BotQ.A RemLatency SU(3) 4c
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %140:gpr32 = LDRWroX %138:gpr64common, %139:gpr64, 0, 1, debug-location !1448 :: (load 4 from %ir.arrayidx79); cg.c:709:29
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %137:gpr32 = LDRWui %stack.19.nza, 0, debug-location !1446 :: (dereferenceable load 4 from %ir.nza); cg.c:709:23
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 9 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %139:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1449 :: (dereferenceable load 4 from %ir.i); cg.c:709:34
  Ready @9c
  BotQ.A BotLatency SU(2) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 4
  Executed: 10c
  Critical: 4c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %138:gpr64common = LDRXui %stack.6.arow.addr, 0, debug-location !1448 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:709:29
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.23 ***
SU(1):   %138:gpr64common = LDRXui %stack.6.arow.addr, 0, debug-location !1448 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:709:29
SU(2):   %139:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1449 :: (dereferenceable load 4 from %ir.i); cg.c:709:34
SU(0):   %137:gpr32 = LDRWui %stack.19.nza, 0, debug-location !1446 :: (dereferenceable load 4 from %ir.nza); cg.c:709:23
SU(3):   %140:gpr32 = LDRWroX %138:gpr64common, %139:gpr64, 0, 1, debug-location !1448 :: (load 4 from %ir.arrayidx79); cg.c:709:29
SU(4):   dead $wzr = SUBSWrr %137:gpr32, %140:gpr32, implicit-def $nzcv, debug-location !1451; cg.c:709:9

********** MI Scheduling **********
sparse:%bb.24 for.body82
  From: %147:gpr64 = LDRXui %stack.7.acol.addr, 0, debug-location !1452 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:710:17
    To: End RegionInstrs: 13
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %147:gpr64 = LDRXui %stack.7.acol.addr, 0, debug-location !1452 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:710:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(2): Data Latency=4 Reg=%147
  Single Issue       : false;
SU(1):   %148:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1454 :: (dereferenceable load 4 from %ir.i); cg.c:710:22
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(8): Data Latency=4 Reg=%148
    SU(2): Data Latency=4 Reg=%148
  Single Issue       : false;
SU(2):   %152:gpr64common = MADDXrrr %148:gpr64, %150:gpr64, %147:gpr64, debug-location !1452; cg.c:710:17
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(1): Data Latency=4 Reg=%148
    SU(0): Data Latency=4 Reg=%147
  Successors:
    SU(4): Data Latency=1 Reg=%152
  Single Issue       : false;
SU(3):   %153:gpr64 = LDRSWui %stack.19.nza, 0, debug-location !1455 :: (dereferenceable load 4 from %ir.nza); cg.c:710:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(9): Data Latency=4 Reg=%153
    SU(4): Data Latency=4 Reg=%153
  Single Issue       : false;
SU(4):   %154:gpr32 = LDRWroX %152:gpr64common, %153:gpr64, 0, 1, debug-location !1452 :: (load 4 from %ir.arrayidx86); cg.c:710:17
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(2): Data Latency=1 Reg=%152
    SU(3): Data Latency=4 Reg=%153
  Successors:
    SU(5): Data Latency=4 Reg=%154
    SU(12): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(5):   STRWui %154:gpr32, %stack.16.j, 0, debug-location !1456 :: (store 4 into %ir.j); cg.c:710:15
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 6
  Predecessors:
    SU(4): Data Latency=4 Reg=%154
    SU(4): Ord  Latency=0 Memory
  Successors:
    SU(9): Ord  Latency=1 Memory
  Single Issue       : false;
SU(6):   %155:fpr64 = LDRDui %stack.24.size, 0, debug-location !1457 :: (dereferenceable load 8 from %ir.size); cg.c:712:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(10): Data Latency=4 Reg=%155
  Single Issue       : false;
SU(7):   %156:gpr64 = LDRXui %fixed-stack.3, 0, debug-location !1458 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:712:28
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(8): Data Latency=4 Reg=%156
  Single Issue       : false;
SU(8):   %160:gpr64common = MADDXrrr %148:gpr64, %158:gpr64, %156:gpr64, debug-location !1458; cg.c:712:28
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(7): Data Latency=4 Reg=%156
    SU(1): Data Latency=4 Reg=%148
  Successors:
    SU(9): Data Latency=1 Reg=%160
  Single Issue       : false;
SU(9):   %161:fpr64 = LDRDroX %160:gpr64common, %153:gpr64, 0, 1, debug-location !1458 :: (load 8 from %ir.arrayidx90); cg.c:712:28
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 5
  Predecessors:
    SU(8): Data Latency=1 Reg=%160
    SU(5): Ord  Latency=1 Memory
    SU(3): Data Latency=4 Reg=%153
  Successors:
    SU(10): Data Latency=4 Reg=%161
    SU(12): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
  Single Issue       : false;
SU(10):   %162:fpr64 = FMULDrr %155:fpr64, %161:fpr64, debug-location !1461; cg.c:712:26
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 1
  Predecessors:
    SU(9): Data Latency=4 Reg=%161
    SU(6): Data Latency=4 Reg=%155
  Successors:
    SU(11): Data Latency=1 Reg=%162
  Single Issue       : false;
SU(11):   STRDui %162:fpr64, %stack.25.scale, 0, debug-location !1462 :: (store 8 into %ir.scale); cg.c:712:19
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%162
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(12):   STRWui $wzr, %stack.22.nzrow, 0, debug-location !1463 :: (store 4 into %ir.nzrow); cg.c:713:24
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
Critical Path(GS-RR ): 15
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 11 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 7 
Picking from Bot:
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) STRWui $wzr, %stack.22.nzrow, 0, debug-location !1463 :: (store 4 into %ir.nzrow); cg.c:713:24
  Ready @0c
  BotQ.A TopLatency SU(12) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 
Pick Bot ONLY1     
Scheduling SU(11) STRDui %162:fpr64, %stack.25.scale, 0, debug-location !1462 :: (store 8 into %ir.scale); cg.c:712:19
  Ready @1c
  BotQ.A TopLatency SU(11) 15c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 
Pick Bot ONLY1     
Scheduling SU(10) %162:fpr64 = FMULDrr %155:fpr64, %161:fpr64, debug-location !1461; cg.c:712:26
  Ready @2c
  BotQ.A BotLatency SU(10) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 9 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 7 
BotQ.A RemLatency SU(9) 10c
  BotQ.A RemainingLatency 10 + 6c > CritPath 15
Picking from Bot:
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(9) %161:fpr64 = LDRDroX %160:gpr64common, %153:gpr64, 0, 1, debug-location !1458 :: (load 8 from %ir.arrayidx90); cg.c:712:28
  Ready @6c
  BotQ.A BotLatency SU(9) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 8 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 7 
BotQ.A RemLatency SU(5) 9c
  BotQ.A RemainingLatency 9 + 7c > CritPath 15
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(8) BOT-PATH                  4 cycles 
  Cand SU(5) BOT-PATH                  9 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) STRWui %154:gpr32, %stack.16.j, 0, debug-location !1456 :: (store 4 into %ir.j); cg.c:710:15
  Ready @7c
  BotQ.A BotLatency SU(5) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 6 8 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 7 
BotQ.A RemLatency SU(8) 4c
BotQ.A RemLatency SU(4) 5c
  BotQ.A RemainingLatency 8 + 8c > CritPath 15
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(8) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(8) %160:gpr64common = MADDXrrr %148:gpr64, %158:gpr64, %156:gpr64, debug-location !1458; cg.c:712:28
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 7 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %155:fpr64 = LDRDui %stack.24.size, 0, debug-location !1457 :: (dereferenceable load 8 from %ir.size); cg.c:712:21
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 7
  Executed: 10c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 7 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %154:gpr32 = LDRWroX %152:gpr64common, %153:gpr64, 0, 1, debug-location !1452 :: (load 4 from %ir.arrayidx86); cg.c:710:17
  Ready @11c
  BotQ.A BotLatency SU(4) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 8
  Executed: 12c
  Critical: 8c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 2 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 
BotQ.A RemLatency SU(2) 4c
  BotQ.A RemainingLatency 4 + 12c > CritPath 15
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) %152:gpr64common = MADDXrrr %148:gpr64, %150:gpr64, %147:gpr64, debug-location !1452; cg.c:710:17
  Ready @12c
  BotQ.A BotLatency SU(2) 11c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 9
  Executed: 13c
  Critical: 9c, 9 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 1 0 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) %156:gpr64 = LDRXui %fixed-stack.3, 0, debug-location !1458 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:712:28
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 10
  Executed: 14c
  Critical: 10c, 10 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 15 BotQ.A
Queue BotQ.P: 0 1 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %153:gpr64 = LDRSWui %stack.19.nza, 0, debug-location !1455 :: (dereferenceable load 4 from %ir.nza); cg.c:710:25
  Ready @15c
  BotQ.A BotLatency SU(3) 14c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 11
  Executed: 16c
  Critical: 11c, 11 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 16c > CritPath 15
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %148:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1454 :: (dereferenceable load 4 from %ir.i); cg.c:710:22
  Ready @16c
  BotQ.A BotLatency SU(1) 15c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 12
  Executed: 17c
  Critical: 12c, 12 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %147:gpr64 = LDRXui %stack.7.acol.addr, 0, debug-location !1452 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:710:17
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 13
  Executed: 18c
  Critical: 13c, 13 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.24 ***
SU(0):   %147:gpr64 = LDRXui %stack.7.acol.addr, 0, debug-location !1452 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:710:17
SU(1):   %148:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1454 :: (dereferenceable load 4 from %ir.i); cg.c:710:22
SU(3):   %153:gpr64 = LDRSWui %stack.19.nza, 0, debug-location !1455 :: (dereferenceable load 4 from %ir.nza); cg.c:710:25
SU(7):   %156:gpr64 = LDRXui %fixed-stack.3, 0, debug-location !1458 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:712:28
SU(2):   %152:gpr64common = MADDXrrr %148:gpr64, %150:gpr64, %147:gpr64, debug-location !1452; cg.c:710:17
SU(4):   %154:gpr32 = LDRWroX %152:gpr64common, %153:gpr64, 0, 1, debug-location !1452 :: (load 4 from %ir.arrayidx86); cg.c:710:17
SU(6):   %155:fpr64 = LDRDui %stack.24.size, 0, debug-location !1457 :: (dereferenceable load 8 from %ir.size); cg.c:712:21
SU(8):   %160:gpr64common = MADDXrrr %148:gpr64, %158:gpr64, %156:gpr64, debug-location !1458; cg.c:712:28
SU(5):   STRWui %154:gpr32, %stack.16.j, 0, debug-location !1456 :: (store 4 into %ir.j); cg.c:710:15
SU(9):   %161:fpr64 = LDRDroX %160:gpr64common, %153:gpr64, 0, 1, debug-location !1458 :: (load 8 from %ir.arrayidx90); cg.c:712:28
SU(10):   %162:fpr64 = FMULDrr %155:fpr64, %161:fpr64, debug-location !1461; cg.c:712:26
SU(11):   STRDui %162:fpr64, %stack.25.scale, 0, debug-location !1462 :: (store 8 into %ir.scale); cg.c:712:19
SU(12):   STRWui $wzr, %stack.22.nzrow, 0, debug-location !1463 :: (store 4 into %ir.nzrow); cg.c:713:24

********** MI Scheduling **********
sparse:%bb.25 for.cond91
  From: %164:gpr32 = LDRWui %stack.22.nzrow, 0, debug-location !1466 :: (dereferenceable load 4 from %ir.nzrow); cg.c:713:29
    To: Bcc 10, %bb.46, implicit killed $nzcv, debug-location !1471; cg.c:713:13
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %164:gpr32 = LDRWui %stack.22.nzrow, 0, debug-location !1466 :: (dereferenceable load 4 from %ir.nzrow); cg.c:713:29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=%164
  Single Issue       : false;
SU(1):   %165:gpr64common = LDRXui %stack.6.arow.addr, 0, debug-location !1468 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:713:37
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Data Latency=4 Reg=%165
  Single Issue       : false;
SU(2):   %166:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1469 :: (dereferenceable load 4 from %ir.i); cg.c:713:42
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Data Latency=4 Reg=%166
  Single Issue       : false;
SU(3):   %167:gpr32 = LDRWroX %165:gpr64common, %166:gpr64, 0, 1, debug-location !1468 :: (load 4 from %ir.arrayidx93); cg.c:713:37
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(2): Data Latency=4 Reg=%166
    SU(1): Data Latency=4 Reg=%165
  Successors:
    SU(4): Data Latency=4 Reg=%167
  Single Issue       : false;
SU(4):   dead $wzr = SUBSWrr %164:gpr32, %167:gpr32, implicit-def $nzcv, debug-location !1471; cg.c:713:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%167
    SU(0): Data Latency=4 Reg=%164
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.46, implicit killed $nzcv, debug-location !1471; cg.c:713:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) dead $wzr = SUBSWrr %164:gpr32, %167:gpr32, implicit-def $nzcv, debug-location !1471; cg.c:713:13
  Ready @1c
  BotQ.A TopLatency SU(4) 8c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
BotQ.A RemLatency SU(3) 4c
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %167:gpr32 = LDRWroX %165:gpr64common, %166:gpr64, 0, 1, debug-location !1468 :: (load 4 from %ir.arrayidx93); cg.c:713:37
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %164:gpr32 = LDRWui %stack.22.nzrow, 0, debug-location !1466 :: (dereferenceable load 4 from %ir.nzrow); cg.c:713:29
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 9 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %166:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1469 :: (dereferenceable load 4 from %ir.i); cg.c:713:42
  Ready @9c
  BotQ.A BotLatency SU(2) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 4
  Executed: 10c
  Critical: 4c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %165:gpr64common = LDRXui %stack.6.arow.addr, 0, debug-location !1468 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:713:37
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.25 ***
SU(1):   %165:gpr64common = LDRXui %stack.6.arow.addr, 0, debug-location !1468 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:713:37
SU(2):   %166:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1469 :: (dereferenceable load 4 from %ir.i); cg.c:713:42
SU(0):   %164:gpr32 = LDRWui %stack.22.nzrow, 0, debug-location !1466 :: (dereferenceable load 4 from %ir.nzrow); cg.c:713:29
SU(3):   %167:gpr32 = LDRWroX %165:gpr64common, %166:gpr64, 0, 1, debug-location !1468 :: (load 4 from %ir.arrayidx93); cg.c:713:37
SU(4):   dead $wzr = SUBSWrr %164:gpr32, %167:gpr32, implicit-def $nzcv, debug-location !1471; cg.c:713:13

********** MI Scheduling **********
sparse:%bb.26 for.body96
  From: %171:gpr64 = LDRXui %stack.7.acol.addr, 0, debug-location !1472 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:714:24
    To: Bcc 1, %bb.29, implicit killed $nzcv, debug-location !1487; cg.c:721:31
 RegionInstrs: 14
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %171:gpr64 = LDRXui %stack.7.acol.addr, 0, debug-location !1472 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:714:24
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(2): Data Latency=4 Reg=%171
  Single Issue       : false;
SU(1):   %172:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1474 :: (dereferenceable load 4 from %ir.i); cg.c:714:29
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(7): Data Latency=4 Reg=%172
    SU(2): Data Latency=4 Reg=%172
  Single Issue       : false;
SU(2):   %176:gpr64common = MADDXrrr %172:gpr64, %150:gpr64, %171:gpr64, debug-location !1472; cg.c:714:24
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(1): Data Latency=4 Reg=%172
    SU(0): Data Latency=4 Reg=%171
  Successors:
    SU(4): Data Latency=1 Reg=%176
  Single Issue       : false;
SU(3):   %177:gpr64 = LDRSWui %stack.22.nzrow, 0, debug-location !1475 :: (dereferenceable load 4 from %ir.nzrow); cg.c:714:32
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(8): Data Latency=4 Reg=%177
    SU(4): Data Latency=4 Reg=%177
  Single Issue       : false;
SU(4):   %178:gpr32 = LDRWroX %176:gpr64common, %177:gpr64, 0, 1, debug-location !1472 :: (load 4 from %ir.arrayidx100); cg.c:714:24
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(2): Data Latency=1 Reg=%176
    SU(3): Data Latency=4 Reg=%177
  Successors:
    SU(13): Data Latency=4 Reg=%178
    SU(5): Data Latency=4 Reg=%178
    SU(11): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(5):   STRWui %178:gpr32, %stack.23.jcol, 0, debug-location !1476 :: (store 4 into %ir.jcol); cg.c:714:22
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 6
  Predecessors:
    SU(4): Data Latency=4 Reg=%178
    SU(4): Ord  Latency=0 Memory
  Successors:
    SU(8): Ord  Latency=1 Memory
  Single Issue       : false;
SU(6):   %179:gpr64 = LDRXui %fixed-stack.3, 0, debug-location !1477 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:715:22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(7): Data Latency=4 Reg=%179
  Single Issue       : false;
SU(7):   %183:gpr64common = MADDXrrr %172:gpr64, %158:gpr64, %179:gpr64, debug-location !1477; cg.c:715:22
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(6): Data Latency=4 Reg=%179
    SU(1): Data Latency=4 Reg=%172
  Successors:
    SU(8): Data Latency=1 Reg=%183
  Single Issue       : false;
SU(8):   %184:fpr64 = LDRDroX %183:gpr64common, %177:gpr64, 0, 1, debug-location !1477 :: (load 8 from %ir.arrayidx104); cg.c:715:22
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 5
  Predecessors:
    SU(7): Data Latency=1 Reg=%183
    SU(5): Ord  Latency=1 Memory
    SU(3): Data Latency=4 Reg=%177
  Successors:
    SU(10): Data Latency=4 Reg=%184
    SU(11): Ord  Latency=0 Memory
  Single Issue       : false;
SU(9):   %185:fpr64 = LDRDui %stack.25.scale, 0, debug-location !1480 :: (dereferenceable load 8 from %ir.scale); cg.c:715:39
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(10): Data Latency=4 Reg=%185
  Single Issue       : false;
SU(10):   %186:fpr64 = FMULDrr %184:fpr64, %185:fpr64, debug-location !1481; cg.c:715:37
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 1
  Predecessors:
    SU(8): Data Latency=4 Reg=%184
    SU(9): Data Latency=4 Reg=%185
  Successors:
    SU(11): Data Latency=1 Reg=%186
  Single Issue       : false;
SU(11):   STRDui %186:fpr64, %stack.27.va, 0, debug-location !1482 :: (store 8 into %ir.va); cg.c:715:20
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%186
    SU(8): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(12):   %187:gpr32 = LDRWui %stack.16.j, 0, debug-location !1485 :: (dereferenceable load 4 from %ir.j); cg.c:721:29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(13): Data Latency=4 Reg=%187
  Single Issue       : false;
SU(13):   dead $wzr = SUBSWrr %178:gpr32, %187:gpr32, implicit-def $nzcv, debug-location !1487; cg.c:721:31
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(4): Data Latency=4 Reg=%178
    SU(12): Data Latency=4 Reg=%187
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.29, implicit killed $nzcv, debug-location !1487; cg.c:721:31
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(13): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 15
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 13 
Queue BotQ.A: 11 
Pick Bot ONLY1     
Scheduling SU(11) STRDui %186:fpr64, %stack.27.va, 0, debug-location !1482 :: (store 8 into %ir.va); cg.c:715:20
  Ready @0c
  BotQ.A TopLatency SU(11) 15c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 13 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 9 12 
BotQ.A RemLatency SU(10) 14c
Picking from Bot:
  Cand SU(10) ORDER                              
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) dead $wzr = SUBSWrr %178:gpr32, %187:gpr32, implicit-def $nzcv, debug-location !1487; cg.c:721:31
  Ready @1c
  BotQ.A BotLatency SU(13) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 12 
Queue BotQ.A: 10 
Pick Bot ONLY1     
Scheduling SU(10) %186:fpr64 = FMULDrr %184:fpr64, %185:fpr64, debug-location !1481; cg.c:715:37
  Ready @2c
  BotQ.A TopLatency SU(10) 14c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 9 8 
Queue BotQ.A: 12 
Pick Bot ONLY1     
Scheduling SU(12) %187:gpr32 = LDRWui %stack.16.j, 0, debug-location !1485 :: (dereferenceable load 4 from %ir.j); cg.c:721:29
  Ready @5c
  BotQ.A BotLatency SU(12) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 8 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 9 
BotQ.A RemLatency SU(8) 10c
  BotQ.A RemainingLatency 10 + 6c > CritPath 15
Picking from Bot:
  Cand SU(9) ORDER                              
  Cand SU(8) BOT-PATH                  10 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(8) %184:fpr64 = LDRDroX %183:gpr64common, %177:gpr64, 0, 1, debug-location !1477 :: (load 8 from %ir.arrayidx104); cg.c:715:22
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 7 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 9 
BotQ.A RemLatency SU(5) 9c
  BotQ.A RemainingLatency 9 + 7c > CritPath 15
Picking from Bot:
  Cand SU(9) ORDER                              
  Cand SU(7) BOT-PATH                  4 cycles 
  Cand SU(5) BOT-PATH                  9 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) STRWui %178:gpr32, %stack.23.jcol, 0, debug-location !1476 :: (store 4 into %ir.jcol); cg.c:714:22
  Ready @7c
  BotQ.A BotLatency SU(5) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 9 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 9 
BotQ.A RemLatency SU(7) 4c
BotQ.A RemLatency SU(4) 5c
  BotQ.A RemainingLatency 8 + 8c > CritPath 15
Picking from Bot:
  Cand SU(9) ORDER                              
  Cand SU(7) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(7) %183:gpr64common = MADDXrrr %172:gpr64, %158:gpr64, %179:gpr64, debug-location !1477; cg.c:715:22
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 6 
Queue BotQ.A: 9 
Pick Bot ONLY1     
Scheduling SU(9) %185:fpr64 = LDRDui %stack.25.scale, 0, debug-location !1480 :: (dereferenceable load 8 from %ir.scale); cg.c:715:39
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 8
  Executed: 10c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 6 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %178:gpr32 = LDRWroX %176:gpr64common, %177:gpr64, 0, 1, debug-location !1472 :: (load 4 from %ir.arrayidx100); cg.c:714:24
  Ready @11c
  BotQ.A BotLatency SU(4) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 9
  Executed: 12c
  Critical: 9c, 9 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 2 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 
BotQ.A RemLatency SU(2) 4c
  BotQ.A RemainingLatency 4 + 12c > CritPath 15
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) %176:gpr64common = MADDXrrr %172:gpr64, %150:gpr64, %171:gpr64, debug-location !1472; cg.c:714:24
  Ready @12c
  BotQ.A BotLatency SU(2) 11c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 10
  Executed: 13c
  Critical: 10c, 10 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 1 0 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %179:gpr64 = LDRXui %fixed-stack.3, 0, debug-location !1477 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:715:22
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 11
  Executed: 14c
  Critical: 11c, 11 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 15 BotQ.A
Queue BotQ.P: 0 1 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %177:gpr64 = LDRSWui %stack.22.nzrow, 0, debug-location !1475 :: (dereferenceable load 4 from %ir.nzrow); cg.c:714:32
  Ready @15c
  BotQ.A BotLatency SU(3) 14c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 12
  Executed: 16c
  Critical: 12c, 12 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 16c > CritPath 15
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %172:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1474 :: (dereferenceable load 4 from %ir.i); cg.c:714:29
  Ready @16c
  BotQ.A BotLatency SU(1) 15c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 13
  Executed: 17c
  Critical: 13c, 13 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %171:gpr64 = LDRXui %stack.7.acol.addr, 0, debug-location !1472 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:714:24
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 14
  Executed: 18c
  Critical: 14c, 14 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.26 ***
SU(0):   %171:gpr64 = LDRXui %stack.7.acol.addr, 0, debug-location !1472 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:714:24
SU(1):   %172:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1474 :: (dereferenceable load 4 from %ir.i); cg.c:714:29
SU(3):   %177:gpr64 = LDRSWui %stack.22.nzrow, 0, debug-location !1475 :: (dereferenceable load 4 from %ir.nzrow); cg.c:714:32
SU(6):   %179:gpr64 = LDRXui %fixed-stack.3, 0, debug-location !1477 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:715:22
SU(2):   %176:gpr64common = MADDXrrr %172:gpr64, %150:gpr64, %171:gpr64, debug-location !1472; cg.c:714:24
SU(4):   %178:gpr32 = LDRWroX %176:gpr64common, %177:gpr64, 0, 1, debug-location !1472 :: (load 4 from %ir.arrayidx100); cg.c:714:24
SU(9):   %185:fpr64 = LDRDui %stack.25.scale, 0, debug-location !1480 :: (dereferenceable load 8 from %ir.scale); cg.c:715:39
SU(7):   %183:gpr64common = MADDXrrr %172:gpr64, %158:gpr64, %179:gpr64, debug-location !1477; cg.c:715:22
SU(5):   STRWui %178:gpr32, %stack.23.jcol, 0, debug-location !1476 :: (store 4 into %ir.jcol); cg.c:714:22
SU(8):   %184:fpr64 = LDRDroX %183:gpr64common, %177:gpr64, 0, 1, debug-location !1477 :: (load 8 from %ir.arrayidx104); cg.c:715:22
SU(12):   %187:gpr32 = LDRWui %stack.16.j, 0, debug-location !1485 :: (dereferenceable load 4 from %ir.j); cg.c:721:29
SU(10):   %186:fpr64 = FMULDrr %184:fpr64, %185:fpr64, debug-location !1481; cg.c:715:37
SU(13):   dead $wzr = SUBSWrr %178:gpr32, %187:gpr32, implicit-def $nzcv, debug-location !1487; cg.c:721:31
SU(11):   STRDui %186:fpr64, %stack.27.va, 0, debug-location !1482 :: (store 8 into %ir.va); cg.c:715:20

********** MI Scheduling **********
sparse:%bb.27 land.lhs.true
  From: %189:gpr32 = LDRWui %stack.16.j, 0, debug-location !1488 :: (dereferenceable load 4 from %ir.j); cg.c:721:34
    To: Bcc 1, %bb.29, implicit killed $nzcv, debug-location !1491; cg.c:721:21
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %189:gpr32 = LDRWui %stack.16.j, 0, debug-location !1488 :: (dereferenceable load 4 from %ir.j); cg.c:721:34
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%189
  Single Issue       : false;
SU(1):   %190:gpr32 = LDRWui %stack.15.i, 0, debug-location !1489 :: (dereferenceable load 4 from %ir.i); cg.c:721:39
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%190
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %189:gpr32, %190:gpr32, implicit-def $nzcv, debug-location !1491; cg.c:721:21
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%190
    SU(0): Data Latency=4 Reg=%189
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.29, implicit killed $nzcv, debug-location !1491; cg.c:721:21
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %189:gpr32, %190:gpr32, implicit-def $nzcv, debug-location !1491; cg.c:721:21
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %190:gpr32 = LDRWui %stack.15.i, 0, debug-location !1489 :: (dereferenceable load 4 from %ir.i); cg.c:721:39
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %189:gpr32 = LDRWui %stack.16.j, 0, debug-location !1488 :: (dereferenceable load 4 from %ir.j); cg.c:721:34
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   %189:gpr32 = LDRWui %stack.16.j, 0, debug-location !1488 :: (dereferenceable load 4 from %ir.j); cg.c:721:34
SU(1):   %190:gpr32 = LDRWui %stack.15.i, 0, debug-location !1489 :: (dereferenceable load 4 from %ir.i); cg.c:721:39
SU(2):   dead $wzr = SUBSWrr %189:gpr32, %190:gpr32, implicit-def $nzcv, debug-location !1491; cg.c:721:21

********** MI Scheduling **********
sparse:%bb.28 if.then110
  From: %192:fpr64 = LDRDui %stack.27.va, 0, debug-location !1492 :: (dereferenceable load 8 from %ir.va); cg.c:722:26
    To: End RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %192:fpr64 = LDRDui %stack.27.va, 0, debug-location !1492 :: (dereferenceable load 8 from %ir.va); cg.c:722:26
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Data Latency=4 Reg=%192
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %193:fpr64 = LDRDui %stack.12.rcond.addr, 0, debug-location !1494 :: (dereferenceable load 8 from %ir.rcond.addr); cg.c:722:31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Data Latency=4 Reg=%193
  Single Issue       : false;
SU(2):   %194:fpr64 = FADDDrr %192:fpr64, %193:fpr64, debug-location !1495; cg.c:722:29
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(1): Data Latency=4 Reg=%193
    SU(0): Data Latency=4 Reg=%192
  Successors:
    SU(4): Data Latency=1 Reg=%194
  Single Issue       : false;
SU(3):   %195:fpr64 = LDRDui %stack.13.shift.addr, 0, debug-location !1496 :: (dereferenceable load 8 from %ir.shift.addr); cg.c:722:39
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=%195
  Single Issue       : false;
SU(4):   %196:fpr64 = FSUBDrr %194:fpr64, %195:fpr64, debug-location !1497; cg.c:722:37
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=%194
    SU(3): Data Latency=4 Reg=%195
  Successors:
    SU(5): Data Latency=1 Reg=%196
  Single Issue       : false;
SU(5):   STRDui %196:fpr64, %stack.27.va, 0, debug-location !1498 :: (store 8 into %ir.va); cg.c:722:24
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%196
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) STRDui %196:fpr64, %stack.27.va, 0, debug-location !1498 :: (store 8 into %ir.va); cg.c:722:24
  Ready @0c
  BotQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %196:fpr64 = FSUBDrr %194:fpr64, %195:fpr64, debug-location !1497; cg.c:722:37
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %194:fpr64 = FADDDrr %192:fpr64, %193:fpr64, debug-location !1495; cg.c:722:29
  Ready @2c
  BotQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 0 1 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %195:fpr64 = LDRDui %stack.13.shift.addr, 0, debug-location !1496 :: (dereferenceable load 8 from %ir.shift.addr); cg.c:722:39
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %193:fpr64 = LDRDui %stack.12.rcond.addr, 0, debug-location !1494 :: (dereferenceable load 8 from %ir.rcond.addr); cg.c:722:31
  Ready @6c
  BotQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %192:fpr64 = LDRDui %stack.27.va, 0, debug-location !1492 :: (dereferenceable load 8 from %ir.va); cg.c:722:26
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.28 ***
SU(0):   %192:fpr64 = LDRDui %stack.27.va, 0, debug-location !1492 :: (dereferenceable load 8 from %ir.va); cg.c:722:26
SU(1):   %193:fpr64 = LDRDui %stack.12.rcond.addr, 0, debug-location !1494 :: (dereferenceable load 8 from %ir.rcond.addr); cg.c:722:31
SU(3):   %195:fpr64 = LDRDui %stack.13.shift.addr, 0, debug-location !1496 :: (dereferenceable load 8 from %ir.shift.addr); cg.c:722:39
SU(2):   %194:fpr64 = FADDDrr %192:fpr64, %193:fpr64, debug-location !1495; cg.c:722:29
SU(4):   %196:fpr64 = FSUBDrr %194:fpr64, %195:fpr64, debug-location !1497; cg.c:722:37
SU(5):   STRDui %196:fpr64, %stack.27.va, 0, debug-location !1498 :: (store 8 into %ir.va); cg.c:722:24

********** MI Scheduling **********
sparse:%bb.29 if.end113
  From: STRWui $wzr, %stack.28.cont40, 0, debug-location !1500 :: (store 4 into %ir.cont40); cg.c:725:24
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui $wzr, %stack.28.cont40, 0, debug-location !1500 :: (store 4 into %ir.cont40); cg.c:725:24
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Ord  Latency=1 Memory
  Single Issue       : false;
SU(1):   %198:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1501 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:26
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%198
  Single Issue       : false;
SU(2):   %199:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1503 :: (dereferenceable load 4 from %ir.j); cg.c:726:33
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%199
  Single Issue       : false;
SU(3):   %200:gpr32 = LDRWroX %198:gpr64common, %199:gpr64, 0, 1, debug-location !1501 :: (load 4 from %ir.arrayidx115); cg.c:726:26
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%199
    SU(1): Data Latency=4 Reg=%198
    SU(0): Ord  Latency=1 Memory
  Successors:
    SU(4): Data Latency=4 Reg=%200
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   STRWui %200:gpr32, %stack.20.k, 0, debug-location !1504 :: (store 4 into %ir.k); cg.c:726:24
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(3): Data Latency=4 Reg=%200
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) STRWui %200:gpr32, %stack.20.k, 0, debug-location !1504 :: (store 4 into %ir.k); cg.c:726:24
  Ready @0c
  BotQ.A TopLatency SU(4) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %200:gpr32 = LDRWroX %198:gpr64common, %199:gpr64, 0, 1, debug-location !1501 :: (load 4 from %ir.arrayidx115); cg.c:726:26
  Ready @4c
  BotQ.A BotLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.28.cont40, 0, debug-location !1500 :: (store 4 into %ir.cont40); cg.c:725:24
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 8 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %199:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1503 :: (dereferenceable load 4 from %ir.j); cg.c:726:33
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 4
  Executed: 9c
  Critical: 4c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %198:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1501 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:26
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 5
  Executed: 10c
  Critical: 5c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.29 ***
SU(1):   %198:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1501 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:26
SU(2):   %199:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1503 :: (dereferenceable load 4 from %ir.j); cg.c:726:33
SU(0):   STRWui $wzr, %stack.28.cont40, 0, debug-location !1500 :: (store 4 into %ir.cont40); cg.c:725:24
SU(3):   %200:gpr32 = LDRWroX %198:gpr64common, %199:gpr64, 0, 1, debug-location !1501 :: (load 4 from %ir.arrayidx115); cg.c:726:26
SU(4):   STRWui %200:gpr32, %stack.20.k, 0, debug-location !1504 :: (store 4 into %ir.k); cg.c:726:24

********** MI Scheduling **********
sparse:%bb.30 for.cond116
  From: %201:gpr32 = LDRWui %stack.20.k, 0, debug-location !1506 :: (dereferenceable load 4 from %ir.k); cg.c:726:37
    To: Bcc 10, %bb.43, implicit killed $nzcv, debug-location !1512; cg.c:726:17
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %201:gpr32 = LDRWui %stack.20.k, 0, debug-location !1506 :: (dereferenceable load 4 from %ir.k); cg.c:726:37
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=%201
  Single Issue       : false;
SU(1):   %202:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1508 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:41
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(3): Data Latency=4 Reg=%202
  Single Issue       : false;
SU(2):   %203:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1509 :: (dereferenceable load 4 from %ir.j); cg.c:726:48
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(3): Data Latency=4 Reg=%203
  Single Issue       : false;
SU(3):   %204:gpr64common = ADDXrs %202:gpr64, %203:gpr64, 2, debug-location !1508; cg.c:726:41
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(2): Data Latency=4 Reg=%203
    SU(1): Data Latency=4 Reg=%202
  Successors:
    SU(4): Data Latency=1 Reg=%204
  Single Issue       : false;
SU(4):   %205:gpr32 = LDRWui %204:gpr64common, 1, debug-location !1508 :: (load 4 from %ir.arrayidx119); cg.c:726:41
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(3): Data Latency=1 Reg=%204
  Successors:
    SU(5): Data Latency=4 Reg=%205
  Single Issue       : false;
SU(5):   dead $wzr = SUBSWrr %201:gpr32, %205:gpr32, implicit-def $nzcv, debug-location !1512; cg.c:726:17
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(4): Data Latency=4 Reg=%205
    SU(0): Data Latency=4 Reg=%201
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.43, implicit killed $nzcv, debug-location !1512; cg.c:726:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) dead $wzr = SUBSWrr %201:gpr32, %205:gpr32, implicit-def $nzcv, debug-location !1512; cg.c:726:17
  Ready @1c
  BotQ.A TopLatency SU(5) 9c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 4 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
BotQ.A RemLatency SU(4) 5c
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %205:gpr32 = LDRWui %204:gpr64common, 1, debug-location !1508 :: (load 4 from %ir.arrayidx119); cg.c:726:41
  Ready @5c
  BotQ.A BotLatency SU(4) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
BotQ.A RemLatency SU(3) 4c
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %204:gpr64common = ADDXrs %202:gpr64, %203:gpr64, 2, debug-location !1508; cg.c:726:41
  Ready @6c
  BotQ.A BotLatency SU(3) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %201:gpr32 = LDRWui %stack.20.k, 0, debug-location !1506 :: (dereferenceable load 4 from %ir.k); cg.c:726:37
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 4
  Executed: 8c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %203:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1509 :: (dereferenceable load 4 from %ir.j); cg.c:726:48
  Ready @10c
  BotQ.A BotLatency SU(2) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %202:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1508 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:41
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.30 ***
SU(1):   %202:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1508 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:41
SU(2):   %203:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1509 :: (dereferenceable load 4 from %ir.j); cg.c:726:48
SU(0):   %201:gpr32 = LDRWui %stack.20.k, 0, debug-location !1506 :: (dereferenceable load 4 from %ir.k); cg.c:726:37
SU(3):   %204:gpr64common = ADDXrs %202:gpr64, %203:gpr64, 2, debug-location !1508; cg.c:726:41
SU(4):   %205:gpr32 = LDRWui %204:gpr64common, 1, debug-location !1508 :: (load 4 from %ir.arrayidx119); cg.c:726:41
SU(5):   dead $wzr = SUBSWrr %201:gpr32, %205:gpr32, implicit-def $nzcv, debug-location !1512; cg.c:726:17

********** MI Scheduling **********
sparse:%bb.31 for.body122
  From: %207:gpr64common = LDRXui %336:gpr64sp, 0, debug-location !1513 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:727:25
    To: Bcc 13, %bb.38, implicit killed $nzcv, debug-location !1519; cg.c:727:25
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %207:gpr64common = LDRXui %336:gpr64sp, 0, debug-location !1513 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:727:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Data Latency=4 Reg=%207
  Single Issue       : false;
SU(1):   %208:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1516 :: (dereferenceable load 4 from %ir.k); cg.c:727:32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Data Latency=4 Reg=%208
  Single Issue       : false;
SU(2):   %209:gpr32 = LDRWroX %207:gpr64common, %208:gpr64, 0, 1, debug-location !1513 :: (load 4 from %ir.arrayidx124); cg.c:727:25
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%208
    SU(0): Data Latency=4 Reg=%207
  Successors:
    SU(4): Data Latency=4 Reg=%209
  Single Issue       : false;
SU(3):   %210:gpr32 = LDRWui %stack.23.jcol, 0, debug-location !1517 :: (dereferenceable load 4 from %ir.jcol); cg.c:727:37
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=%210
  Single Issue       : false;
SU(4):   dead $wzr = SUBSWrr %209:gpr32, %210:gpr32, implicit-def $nzcv, debug-location !1519; cg.c:727:25
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=%209
    SU(3): Data Latency=4 Reg=%210
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 13, %bb.38, implicit killed $nzcv, debug-location !1519; cg.c:727:25
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) dead $wzr = SUBSWrr %209:gpr32, %210:gpr32, implicit-def $nzcv, debug-location !1519; cg.c:727:25
  Ready @1c
  BotQ.A TopLatency SU(4) 8c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
BotQ.A RemLatency SU(2) 4c
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %210:gpr32 = LDRWui %stack.23.jcol, 0, debug-location !1517 :: (dereferenceable load 4 from %ir.jcol); cg.c:727:37
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %209:gpr32 = LDRWroX %207:gpr64common, %208:gpr64, 0, 1, debug-location !1513 :: (load 4 from %ir.arrayidx124); cg.c:727:25
  Ready @6c
  BotQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 10c > CritPath 9
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %208:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1516 :: (dereferenceable load 4 from %ir.k); cg.c:727:32
  Ready @10c
  BotQ.A BotLatency SU(1) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 4
  Executed: 11c
  Critical: 4c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %207:gpr64common = LDRXui %336:gpr64sp, 0, debug-location !1513 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:727:25
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 5
  Executed: 12c
  Critical: 5c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.31 ***
SU(0):   %207:gpr64common = LDRXui %336:gpr64sp, 0, debug-location !1513 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:727:25
SU(1):   %208:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1516 :: (dereferenceable load 4 from %ir.k); cg.c:727:32
SU(2):   %209:gpr32 = LDRWroX %207:gpr64common, %208:gpr64, 0, 1, debug-location !1513 :: (load 4 from %ir.arrayidx124); cg.c:727:25
SU(3):   %210:gpr32 = LDRWui %stack.23.jcol, 0, debug-location !1517 :: (dereferenceable load 4 from %ir.jcol); cg.c:727:37
SU(4):   dead $wzr = SUBSWrr %209:gpr32, %210:gpr32, implicit-def $nzcv, debug-location !1519; cg.c:727:25

********** MI Scheduling **********
sparse:%bb.32 if.then127
  From: %233:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1520 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:731:35
    To: End RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %233:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1520 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:731:35
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(2): Data Latency=4 Reg=%233
  Single Issue       : false;
SU(1):   %234:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1523 :: (dereferenceable load 4 from %ir.j); cg.c:731:42
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(2): Data Latency=4 Reg=%234
  Single Issue       : false;
SU(2):   %235:gpr64common = ADDXrs %233:gpr64, %234:gpr64, 2, debug-location !1520; cg.c:731:35
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(1): Data Latency=4 Reg=%234
    SU(0): Data Latency=4 Reg=%233
  Successors:
    SU(3): Data Latency=1 Reg=%235
  Single Issue       : false;
SU(3):   %236:gpr32common = LDRWui %235:gpr64common, 1, debug-location !1520 :: (load 4 from %ir.arrayidx130); cg.c:731:35
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(2): Data Latency=1 Reg=%235
  Successors:
    SU(4): Data Latency=4 Reg=%236
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   %237:gpr32common = SUBWri %236:gpr32common, 2, 0, debug-location !1525; cg.c:731:49
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%236
  Successors:
    SU(5): Data Latency=1 Reg=%237
  Single Issue       : false;
SU(5):   STRWui %237:gpr32common, %stack.21.kk, 0, debug-location !1526 :: (store 4 into %ir.kk); cg.c:731:33
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%237
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) STRWui %237:gpr32common, %stack.21.kk, 0, debug-location !1526 :: (store 4 into %ir.kk); cg.c:731:33
  Ready @0c
  BotQ.A TopLatency SU(5) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %237:gpr32common = SUBWri %236:gpr32common, 2, 0, debug-location !1525; cg.c:731:49
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %236:gpr32common = LDRWui %235:gpr64common, 1, debug-location !1520 :: (load 4 from %ir.arrayidx130); cg.c:731:35
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %235:gpr64common = ADDXrs %233:gpr64, %234:gpr64, 2, debug-location !1520; cg.c:731:35
  Ready @6c
  BotQ.A BotLatency SU(2) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %234:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1523 :: (dereferenceable load 4 from %ir.j); cg.c:731:42
  Ready @10c
  BotQ.A BotLatency SU(1) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %233:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1520 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:731:35
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   %233:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1520 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:731:35
SU(1):   %234:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1523 :: (dereferenceable load 4 from %ir.j); cg.c:731:42
SU(2):   %235:gpr64common = ADDXrs %233:gpr64, %234:gpr64, 2, debug-location !1520; cg.c:731:35
SU(3):   %236:gpr32common = LDRWui %235:gpr64common, 1, debug-location !1520 :: (load 4 from %ir.arrayidx130); cg.c:731:35
SU(4):   %237:gpr32common = SUBWri %236:gpr32common, 2, 0, debug-location !1525; cg.c:731:49
SU(5):   STRWui %237:gpr32common, %stack.21.kk, 0, debug-location !1526 :: (store 4 into %ir.kk); cg.c:731:33

********** MI Scheduling **********
sparse:%bb.33 for.cond132
  From: %238:gpr32 = LDRWui %stack.21.kk, 0, debug-location !1528 :: (dereferenceable load 4 from %ir.kk); cg.c:731:54
    To: Bcc 11, %bb.37, implicit killed $nzcv, debug-location !1532; cg.c:731:25
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %238:gpr32 = LDRWui %stack.21.kk, 0, debug-location !1528 :: (dereferenceable load 4 from %ir.kk); cg.c:731:54
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%238
  Single Issue       : false;
SU(1):   %239:gpr32 = LDRWui %stack.20.k, 0, debug-location !1530 :: (dereferenceable load 4 from %ir.k); cg.c:731:60
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%239
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %238:gpr32, %239:gpr32, implicit-def $nzcv, debug-location !1532; cg.c:731:25
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%239
    SU(0): Data Latency=4 Reg=%238
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 11, %bb.37, implicit killed $nzcv, debug-location !1532; cg.c:731:25
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %238:gpr32, %239:gpr32, implicit-def $nzcv, debug-location !1532; cg.c:731:25
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %239:gpr32 = LDRWui %stack.20.k, 0, debug-location !1530 :: (dereferenceable load 4 from %ir.k); cg.c:731:60
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %238:gpr32 = LDRWui %stack.21.kk, 0, debug-location !1528 :: (dereferenceable load 4 from %ir.kk); cg.c:731:54
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.33 ***
SU(0):   %238:gpr32 = LDRWui %stack.21.kk, 0, debug-location !1528 :: (dereferenceable load 4 from %ir.kk); cg.c:731:54
SU(1):   %239:gpr32 = LDRWui %stack.20.k, 0, debug-location !1530 :: (dereferenceable load 4 from %ir.k); cg.c:731:60
SU(2):   dead $wzr = SUBSWrr %238:gpr32, %239:gpr32, implicit-def $nzcv, debug-location !1532; cg.c:731:25

********** MI Scheduling **********
sparse:%bb.34 for.body135
  From: %260:gpr64common = LDRXui %336:gpr64sp, 0, debug-location !1533 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:732:33
    To: TBNZW %262:gpr32, 31, %bb.36, debug-location !1538; cg.c:732:33
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %260:gpr64common = LDRXui %336:gpr64sp, 0, debug-location !1533 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:732:33
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Data Latency=4 Reg=%260
  Single Issue       : false;
SU(1):   %261:gpr64 = LDRSWui %stack.21.kk, 0, debug-location !1536 :: (dereferenceable load 4 from %ir.kk); cg.c:732:40
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Data Latency=4 Reg=%261
  Single Issue       : false;
SU(2):   %262:gpr32 = LDRWroX %260:gpr64common, %261:gpr64, 0, 1, debug-location !1533 :: (load 4 from %ir.arrayidx137); cg.c:732:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=%261
    SU(0): Data Latency=4 Reg=%260
  Successors:
    ExitSU: Data Latency=4 Reg=%262
  Single Issue       : false;
ExitSU:   TBNZW %262:gpr32, 31, %bb.36, debug-location !1538; cg.c:732:33
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%262
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %262:gpr32 = LDRWroX %260:gpr64common, %261:gpr64, 0, 1, debug-location !1533 :: (load 4 from %ir.arrayidx137); cg.c:732:33
  Ready @4c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 1
  Executed: 5c
  Critical: 1c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 8 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %261:gpr64 = LDRSWui %stack.21.kk, 0, debug-location !1536 :: (dereferenceable load 4 from %ir.kk); cg.c:732:40
  Ready @8c
  BotQ.A BotLatency SU(1) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 2
  Executed: 9c
  Critical: 2c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %260:gpr64common = LDRXui %336:gpr64sp, 0, debug-location !1533 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:732:33
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 3
  Executed: 10c
  Critical: 3c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.34 ***
SU(0):   %260:gpr64common = LDRXui %336:gpr64sp, 0, debug-location !1533 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:732:33
SU(1):   %261:gpr64 = LDRSWui %stack.21.kk, 0, debug-location !1536 :: (dereferenceable load 4 from %ir.kk); cg.c:732:40
SU(2):   %262:gpr32 = LDRWroX %260:gpr64common, %261:gpr64, 0, 1, debug-location !1533 :: (load 4 from %ir.arrayidx137); cg.c:732:33

********** MI Scheduling **********
sparse:%bb.35 if.then140
  From: %263:gpr64 = LDRXui %336:gpr64sp, 1, debug-location !1539 :: (dereferenceable load 8 from %ir.a.addr); cg.c:733:45
    To: End RegionInstrs: 10
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %263:gpr64 = LDRXui %336:gpr64sp, 1, debug-location !1539 :: (dereferenceable load 8 from %ir.a.addr); cg.c:733:45
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 19
  Successors:
    SU(2): Data Latency=4 Reg=%263
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %264:gpr64 = LDRSWui %stack.21.kk, 0, debug-location !1541 :: (dereferenceable load 4 from %ir.kk); cg.c:733:47
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 19
  Successors:
    SU(2): Data Latency=4 Reg=%264
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %265:gpr64common = ADDXrs %263:gpr64, %264:gpr64, 3, debug-location !1539; cg.c:733:45
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 15
  Predecessors:
    SU(1): Data Latency=4 Reg=%264
    SU(0): Data Latency=4 Reg=%263
  Successors:
    SU(4): Data Latency=1 Reg=%265
    SU(3): Data Latency=1 Reg=%265
  Single Issue       : false;
SU(3):   %266:fpr64 = LDRDui %265:gpr64common, 0, debug-location !1539 :: (load 8 from %ir.arrayidx142); cg.c:733:45
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 14
  Predecessors:
    SU(2): Data Latency=1 Reg=%265
  Successors:
    SU(4): Data Latency=4 Reg=%266
    SU(9): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   STRDui %266:fpr64, %265:gpr64common, 1, debug-location !1545 :: (store 8 into %ir.arrayidx145); cg.c:733:43
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 10
  Predecessors:
    SU(3): Data Latency=4 Reg=%266
    SU(2): Data Latency=1 Reg=%265
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=1 Memory
    SU(6): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
  Single Issue       : false;
SU(5):   %267:gpr64 = LDRXui %336:gpr64sp, 0, debug-location !1546 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:734:50
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 9
  Predecessors:
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(7): Data Latency=4 Reg=%267
    SU(9): Ord  Latency=0 Memory
  Single Issue       : false;
SU(6):   %268:gpr64 = LDRSWui %stack.21.kk, 0, debug-location !1547 :: (dereferenceable load 4 from %ir.kk); cg.c:734:57
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 9
  Predecessors:
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(7): Data Latency=4 Reg=%268
    SU(9): Ord  Latency=0 Memory
  Single Issue       : false;
SU(7):   %269:gpr64common = ADDXrs %267:gpr64, %268:gpr64, 2, debug-location !1546; cg.c:734:50
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 5
  Predecessors:
    SU(6): Data Latency=4 Reg=%268
    SU(5): Data Latency=4 Reg=%267
  Successors:
    SU(9): Data Latency=1 Reg=%269
    SU(8): Data Latency=1 Reg=%269
  Single Issue       : false;
SU(8):   %270:gpr32 = LDRWui %269:gpr64common, 0, debug-location !1546 :: (load 4 from %ir.arrayidx147); cg.c:734:50
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 15
  Height             : 4
  Predecessors:
    SU(7): Data Latency=1 Reg=%269
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(9): Data Latency=4 Reg=%270
  Single Issue       : false;
SU(9):   STRWui %270:gpr32, %269:gpr64common, 1, debug-location !1551 :: (store 4 into %ir.arrayidx150); cg.c:734:48
  # preds left       : 8
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 19
  Height             : 0
  Predecessors:
    SU(8): Data Latency=4 Reg=%270
    SU(7): Data Latency=1 Reg=%269
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
Critical Path(GS-RR ): 19
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Pick Bot ONLY1     
Scheduling SU(9) STRWui %270:gpr32, %269:gpr64common, 1, debug-location !1551 :: (store 4 into %ir.arrayidx150); cg.c:734:48
  Ready @0c
  BotQ.A TopLatency SU(9) 19c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 8 
Pick Bot ONLY1     
Scheduling SU(8) %270:gpr32 = LDRWui %269:gpr64common, 0, debug-location !1546 :: (load 4 from %ir.arrayidx147); cg.c:734:50
  Ready @4c
  BotQ.A BotLatency SU(8) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) %269:gpr64common = ADDXrs %267:gpr64, %268:gpr64, 2, debug-location !1546; cg.c:734:50
  Ready @5c
  BotQ.A BotLatency SU(7) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 9 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 6 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(6) 10c
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %268:gpr64 = LDRSWui %stack.21.kk, 0, debug-location !1547 :: (dereferenceable load 4 from %ir.kk); cg.c:734:57
  Ready @9c
  BotQ.A BotLatency SU(6) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 4
  Executed: 10c
  Critical: 4c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %267:gpr64 = LDRXui %336:gpr64sp, 0, debug-location !1546 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:734:50
  Ready @10c
  BotQ.A TopLatency SU(5) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) STRDui %266:fpr64, %265:gpr64common, 1, debug-location !1545 :: (store 8 into %ir.arrayidx145); cg.c:733:43
  Ready @11c
  BotQ.A BotLatency SU(4) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 15 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %266:fpr64 = LDRDui %265:gpr64common, 0, debug-location !1539 :: (load 8 from %ir.arrayidx142); cg.c:733:45
  Ready @15c
  BotQ.A BotLatency SU(3) 14c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 7
  Executed: 16c
  Critical: 7c, 7 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %265:gpr64common = ADDXrs %263:gpr64, %264:gpr64, 3, debug-location !1539; cg.c:733:45
  Ready @16c
  BotQ.A BotLatency SU(2) 15c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 8
  Executed: 17c
  Critical: 8c, 8 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 20 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 20c > CritPath 19
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %264:gpr64 = LDRSWui %stack.21.kk, 0, debug-location !1541 :: (dereferenceable load 4 from %ir.kk); cg.c:733:47
  Ready @20c
  BotQ.A BotLatency SU(1) 19c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 9
  Executed: 21c
  Critical: 9c, 9 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %263:gpr64 = LDRXui %336:gpr64sp, 1, debug-location !1539 :: (dereferenceable load 8 from %ir.a.addr); cg.c:733:45
  Ready @21c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 10
  Executed: 22c
  Critical: 10c, 10 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.35 ***
SU(0):   %263:gpr64 = LDRXui %336:gpr64sp, 1, debug-location !1539 :: (dereferenceable load 8 from %ir.a.addr); cg.c:733:45
SU(1):   %264:gpr64 = LDRSWui %stack.21.kk, 0, debug-location !1541 :: (dereferenceable load 4 from %ir.kk); cg.c:733:47
SU(2):   %265:gpr64common = ADDXrs %263:gpr64, %264:gpr64, 3, debug-location !1539; cg.c:733:45
SU(3):   %266:fpr64 = LDRDui %265:gpr64common, 0, debug-location !1539 :: (load 8 from %ir.arrayidx142); cg.c:733:45
SU(4):   STRDui %266:fpr64, %265:gpr64common, 1, debug-location !1545 :: (store 8 into %ir.arrayidx145); cg.c:733:43
SU(5):   %267:gpr64 = LDRXui %336:gpr64sp, 0, debug-location !1546 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:734:50
SU(6):   %268:gpr64 = LDRSWui %stack.21.kk, 0, debug-location !1547 :: (dereferenceable load 4 from %ir.kk); cg.c:734:57
SU(7):   %269:gpr64common = ADDXrs %267:gpr64, %268:gpr64, 2, debug-location !1546; cg.c:734:50
SU(8):   %270:gpr32 = LDRWui %269:gpr64common, 0, debug-location !1546 :: (load 4 from %ir.arrayidx147); cg.c:734:50
SU(9):   STRWui %270:gpr32, %269:gpr64common, 1, debug-location !1551 :: (store 4 into %ir.arrayidx150); cg.c:734:48

********** MI Scheduling **********
sparse:%bb.36 for.inc152
  From: %271:gpr32common = LDRWui %stack.21.kk, 0, debug-location !1553 :: (dereferenceable load 4 from %ir.kk); cg.c:731:65
    To: B %bb.33, debug-location !1554; cg.c:731:25
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %271:gpr32common = LDRWui %stack.21.kk, 0, debug-location !1553 :: (dereferenceable load 4 from %ir.kk); cg.c:731:65
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%271
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %272:gpr32common = nsw SUBWri %271:gpr32common, 1, 0, debug-location !1553; cg.c:731:65
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%271
  Successors:
    SU(2): Data Latency=1 Reg=%272
  Single Issue       : false;
SU(2):   STRWui %272:gpr32common, %stack.21.kk, 0, debug-location !1553 :: (store 4 into %ir.kk); cg.c:731:65
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%272
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.33, debug-location !1554; cg.c:731:25
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %272:gpr32common, %stack.21.kk, 0, debug-location !1553 :: (store 4 into %ir.kk); cg.c:731:65
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %272:gpr32common = nsw SUBWri %271:gpr32common, 1, 0, debug-location !1553; cg.c:731:65
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %271:gpr32common = LDRWui %stack.21.kk, 0, debug-location !1553 :: (dereferenceable load 4 from %ir.kk); cg.c:731:65
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.36 ***
SU(0):   %271:gpr32common = LDRWui %stack.21.kk, 0, debug-location !1553 :: (dereferenceable load 4 from %ir.kk); cg.c:731:65
SU(1):   %272:gpr32common = nsw SUBWri %271:gpr32common, 1, 0, debug-location !1553; cg.c:731:65
SU(2):   STRWui %272:gpr32common, %stack.21.kk, 0, debug-location !1553 :: (store 4 into %ir.kk); cg.c:731:65

********** MI Scheduling **********
sparse:%bb.37 for.end153
  From: %241:gpr32 = LDRWui %stack.23.jcol, 0, debug-location !1557 :: (dereferenceable load 4 from %ir.jcol); cg.c:737:37
    To: B %bb.43, debug-location !1565; cg.c:740:25
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %241:gpr32 = LDRWui %stack.23.jcol, 0, debug-location !1557 :: (dereferenceable load 4 from %ir.jcol); cg.c:737:37
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Data Latency=4 Reg=%241
    SU(6): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %242:gpr64common = LDRXui %336:gpr64sp, 0, debug-location !1558 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:737:25
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Data Latency=4 Reg=%242
    SU(6): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %243:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1559 :: (dereferenceable load 4 from %ir.k); cg.c:737:32
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Data Latency=4 Reg=%243
    SU(6): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   STRWroX %241:gpr32, %242:gpr64common, %243:gpr64, 0, 1, debug-location !1560 :: (store 4 into %ir.arrayidx155); cg.c:737:35
  # preds left       : 6
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(2): Data Latency=4 Reg=%243
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%242
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%241
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=1 Memory
    SU(4): Ord  Latency=1 Memory
  Single Issue       : false;
SU(4):   %244:gpr64common = LDRXui %336:gpr64sp, 1, debug-location !1561 :: (dereferenceable load 8 from %ir.a.addr); cg.c:738:25
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(6): Data Latency=4 Reg=%244
    SU(6): Ord  Latency=0 Memory
  Single Issue       : false;
SU(5):   %245:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1562 :: (dereferenceable load 4 from %ir.k); cg.c:738:27
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(6): Data Latency=4 Reg=%245
    SU(6): Ord  Latency=0 Memory
  Single Issue       : false;
SU(6):   STRXroX $xzr, %244:gpr64common, %245:gpr64, 0, 1, debug-location !1563 :: (store 8 into %ir.arrayidx157); cg.c:738:30
  # preds left       : 8
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(5): Data Latency=4 Reg=%245
    SU(5): Ord  Latency=0 Memory
    SU(4): Data Latency=4 Reg=%244
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(7): Ord  Latency=0 Memory
  Single Issue       : false;
SU(7):   STRWui %247:gpr32, %stack.28.cont40, 0, debug-location !1564 :: (store 4 into %ir.cont40); cg.c:739:32
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.43, debug-location !1565; cg.c:740:25
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) STRWui %247:gpr32, %stack.28.cont40, 0, debug-location !1564 :: (store 4 into %ir.cont40); cg.c:739:32
  Ready @0c
  BotQ.A TopLatency SU(7) 9c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) STRXroX $xzr, %244:gpr64common, %245:gpr64, 0, 1, debug-location !1563 :: (store 8 into %ir.arrayidx157); cg.c:738:30
  Ready @1c
  BotQ.A TopLatency SU(6) 9c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
BotQ.A RemLatency SU(5) 5c
  BotQ.A RemainingLatency 5 + 5c > CritPath 9
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %245:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1562 :: (dereferenceable load 4 from %ir.k); cg.c:738:27
  Ready @5c
  BotQ.A BotLatency SU(5) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %244:gpr64common = LDRXui %336:gpr64sp, 1, debug-location !1561 :: (dereferenceable load 8 from %ir.a.addr); cg.c:738:25
  Ready @6c
  BotQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) STRWroX %241:gpr32, %242:gpr64common, %243:gpr64, 0, 1, debug-location !1560 :: (store 4 into %ir.arrayidx155); cg.c:737:35
  Ready @7c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  BotQ.A RemainingLatency 0 + 11c > CritPath 9
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %243:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1559 :: (dereferenceable load 4 from %ir.k); cg.c:737:32
  Ready @11c
  BotQ.A BotLatency SU(2) 9c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 12c > CritPath 9
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %242:gpr64common = LDRXui %336:gpr64sp, 0, debug-location !1558 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:737:25
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 7
  Executed: 13c
  Critical: 7c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %241:gpr32 = LDRWui %stack.23.jcol, 0, debug-location !1557 :: (dereferenceable load 4 from %ir.jcol); cg.c:737:37
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 8
  Executed: 14c
  Critical: 8c, 8 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.37 ***
SU(0):   %241:gpr32 = LDRWui %stack.23.jcol, 0, debug-location !1557 :: (dereferenceable load 4 from %ir.jcol); cg.c:737:37
SU(1):   %242:gpr64common = LDRXui %336:gpr64sp, 0, debug-location !1558 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:737:25
SU(2):   %243:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1559 :: (dereferenceable load 4 from %ir.k); cg.c:737:32
SU(3):   STRWroX %241:gpr32, %242:gpr64common, %243:gpr64, 0, 1, debug-location !1560 :: (store 4 into %ir.arrayidx155); cg.c:737:35
SU(4):   %244:gpr64common = LDRXui %336:gpr64sp, 1, debug-location !1561 :: (dereferenceable load 8 from %ir.a.addr); cg.c:738:25
SU(5):   %245:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1562 :: (dereferenceable load 4 from %ir.k); cg.c:738:27
SU(6):   STRXroX $xzr, %244:gpr64common, %245:gpr64, 0, 1, debug-location !1563 :: (store 8 into %ir.arrayidx157); cg.c:738:30
SU(7):   STRWui %247:gpr32, %stack.28.cont40, 0, debug-location !1564 :: (store 4 into %ir.cont40); cg.c:739:32

********** MI Scheduling **********
sparse:%bb.38 if.else
  From: %212:gpr64common = LDRXui %336:gpr64sp, 0, debug-location !1566 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:742:30
    To: Bcc 1, %bb.40, implicit killed $nzcv, debug-location !1570; cg.c:742:30
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %212:gpr64common = LDRXui %336:gpr64sp, 0, debug-location !1566 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:742:30
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Data Latency=4 Reg=%212
  Single Issue       : false;
SU(1):   %213:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1568 :: (dereferenceable load 4 from %ir.k); cg.c:742:37
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Data Latency=4 Reg=%213
  Single Issue       : false;
SU(2):   %214:gpr32common = LDRWroX %212:gpr64common, %213:gpr64, 0, 1, debug-location !1566 :: (load 4 from %ir.arrayidx159); cg.c:742:30
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%213
    SU(0): Data Latency=4 Reg=%212
  Successors:
    SU(3): Data Latency=4 Reg=%214
  Single Issue       : false;
SU(3):   dead $wzr = ADDSWri %214:gpr32common, 1, 0, implicit-def $nzcv, debug-location !1570; cg.c:742:30
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=%214
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.40, implicit killed $nzcv, debug-location !1570; cg.c:742:30
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) dead $wzr = ADDSWri %214:gpr32common, 1, 0, implicit-def $nzcv, debug-location !1570; cg.c:742:30
  Ready @1c
  BotQ.A TopLatency SU(3) 8c
  BotQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %214:gpr32common = LDRWroX %212:gpr64common, %213:gpr64, 0, 1, debug-location !1566 :: (load 4 from %ir.arrayidx159); cg.c:742:30
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 9 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %213:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1568 :: (dereferenceable load 4 from %ir.k); cg.c:742:37
  Ready @9c
  BotQ.A BotLatency SU(1) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 3
  Executed: 10c
  Critical: 3c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %212:gpr64common = LDRXui %336:gpr64sp, 0, debug-location !1566 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:742:30
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 4
  Executed: 11c
  Critical: 4c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   %212:gpr64common = LDRXui %336:gpr64sp, 0, debug-location !1566 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:742:30
SU(1):   %213:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1568 :: (dereferenceable load 4 from %ir.k); cg.c:742:37
SU(2):   %214:gpr32common = LDRWroX %212:gpr64common, %213:gpr64, 0, 1, debug-location !1566 :: (load 4 from %ir.arrayidx159); cg.c:742:30
SU(3):   dead $wzr = ADDSWri %214:gpr32common, 1, 0, implicit-def $nzcv, debug-location !1570; cg.c:742:30

********** MI Scheduling **********
sparse:%bb.39 if.then162
  From: %229:gpr32 = LDRWui %stack.23.jcol, 0, debug-location !1571 :: (dereferenceable load 4 from %ir.jcol); cg.c:743:37
    To: B %bb.43, debug-location !1577; cg.c:745:25
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %229:gpr32 = LDRWui %stack.23.jcol, 0, debug-location !1571 :: (dereferenceable load 4 from %ir.jcol); cg.c:743:37
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%229
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %230:gpr64common = LDRXui %336:gpr64sp, 0, debug-location !1573 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:743:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%230
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %231:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1574 :: (dereferenceable load 4 from %ir.k); cg.c:743:32
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%231
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   STRWroX %229:gpr32, %230:gpr64common, %231:gpr64, 0, 1, debug-location !1575 :: (store 4 into %ir.arrayidx164); cg.c:743:35
  # preds left       : 6
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%231
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%230
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%229
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   STRWui %247:gpr32, %stack.28.cont40, 0, debug-location !1576 :: (store 4 into %ir.cont40); cg.c:744:32
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.43, debug-location !1577; cg.c:745:25
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) STRWui %247:gpr32, %stack.28.cont40, 0, debug-location !1576 :: (store 4 into %ir.cont40); cg.c:744:32
  Ready @0c
  BotQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) STRWroX %229:gpr32, %230:gpr64common, %231:gpr64, 0, 1, debug-location !1575 :: (store 4 into %ir.arrayidx164); cg.c:743:35
  Ready @1c
  BotQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  BotQ.A RemainingLatency 0 + 5c > CritPath 4
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %231:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1574 :: (dereferenceable load 4 from %ir.k); cg.c:743:32
  Ready @5c
  BotQ.A BotLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 6c > CritPath 4
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %230:gpr64common = LDRXui %336:gpr64sp, 0, debug-location !1573 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:743:25
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %229:gpr32 = LDRWui %stack.23.jcol, 0, debug-location !1571 :: (dereferenceable load 4 from %ir.jcol); cg.c:743:37
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.39 ***
SU(0):   %229:gpr32 = LDRWui %stack.23.jcol, 0, debug-location !1571 :: (dereferenceable load 4 from %ir.jcol); cg.c:743:37
SU(1):   %230:gpr64common = LDRXui %336:gpr64sp, 0, debug-location !1573 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:743:25
SU(2):   %231:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1574 :: (dereferenceable load 4 from %ir.k); cg.c:743:32
SU(3):   STRWroX %229:gpr32, %230:gpr64common, %231:gpr64, 0, 1, debug-location !1575 :: (store 4 into %ir.arrayidx164); cg.c:743:35
SU(4):   STRWui %247:gpr32, %stack.28.cont40, 0, debug-location !1576 :: (store 4 into %ir.cont40); cg.c:744:32

********** MI Scheduling **********
sparse:%bb.40 if.else165
  From: %216:gpr64common = LDRXui %336:gpr64sp, 0, debug-location !1578 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:747:30
    To: Bcc 1, %bb.42, implicit killed $nzcv, debug-location !1583; cg.c:747:30
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %216:gpr64common = LDRXui %336:gpr64sp, 0, debug-location !1578 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:747:30
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Data Latency=4 Reg=%216
  Single Issue       : false;
SU(1):   %217:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1580 :: (dereferenceable load 4 from %ir.k); cg.c:747:37
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Data Latency=4 Reg=%217
  Single Issue       : false;
SU(2):   %218:gpr32 = LDRWroX %216:gpr64common, %217:gpr64, 0, 1, debug-location !1578 :: (load 4 from %ir.arrayidx167); cg.c:747:30
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%217
    SU(0): Data Latency=4 Reg=%216
  Successors:
    SU(4): Data Latency=4 Reg=%218
  Single Issue       : false;
SU(3):   %219:gpr32 = LDRWui %stack.23.jcol, 0, debug-location !1581 :: (dereferenceable load 4 from %ir.jcol); cg.c:747:43
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=%219
  Single Issue       : false;
SU(4):   dead $wzr = SUBSWrr %218:gpr32, %219:gpr32, implicit-def $nzcv, debug-location !1583; cg.c:747:30
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=%218
    SU(3): Data Latency=4 Reg=%219
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.42, implicit killed $nzcv, debug-location !1583; cg.c:747:30
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) dead $wzr = SUBSWrr %218:gpr32, %219:gpr32, implicit-def $nzcv, debug-location !1583; cg.c:747:30
  Ready @1c
  BotQ.A TopLatency SU(4) 8c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
BotQ.A RemLatency SU(2) 4c
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %219:gpr32 = LDRWui %stack.23.jcol, 0, debug-location !1581 :: (dereferenceable load 4 from %ir.jcol); cg.c:747:43
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %218:gpr32 = LDRWroX %216:gpr64common, %217:gpr64, 0, 1, debug-location !1578 :: (load 4 from %ir.arrayidx167); cg.c:747:30
  Ready @6c
  BotQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 10c > CritPath 9
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %217:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1580 :: (dereferenceable load 4 from %ir.k); cg.c:747:37
  Ready @10c
  BotQ.A BotLatency SU(1) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 4
  Executed: 11c
  Critical: 4c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %216:gpr64common = LDRXui %336:gpr64sp, 0, debug-location !1578 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:747:30
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 5
  Executed: 12c
  Critical: 5c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.40 ***
SU(0):   %216:gpr64common = LDRXui %336:gpr64sp, 0, debug-location !1578 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:747:30
SU(1):   %217:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1580 :: (dereferenceable load 4 from %ir.k); cg.c:747:37
SU(2):   %218:gpr32 = LDRWroX %216:gpr64common, %217:gpr64, 0, 1, debug-location !1578 :: (load 4 from %ir.arrayidx167); cg.c:747:30
SU(3):   %219:gpr32 = LDRWui %stack.23.jcol, 0, debug-location !1581 :: (dereferenceable load 4 from %ir.jcol); cg.c:747:43
SU(4):   dead $wzr = SUBSWrr %218:gpr32, %219:gpr32, implicit-def $nzcv, debug-location !1583; cg.c:747:30

********** MI Scheduling **********
sparse:%bb.41 if.then170
  From: %223:gpr64common = LDRXui %fixed-stack.0, 0, debug-location !1584 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:751:36
    To: B %bb.43, debug-location !1592; cg.c:753:25
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %223:gpr64common = LDRXui %fixed-stack.0, 0, debug-location !1584 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:751:36
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(5): Data Latency=4 Reg=%223
    SU(3): Data Latency=4 Reg=%223
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %224:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1586 :: (dereferenceable load 4 from %ir.j); cg.c:751:42
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(2): Data Latency=4 Reg=%224
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %225:gpr64 = UBFMXri %224:gpr64, 62, 61, debug-location !1584; cg.c:751:36
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(1): Data Latency=4 Reg=%224
  Successors:
    SU(5): Data Latency=1 Reg=%225
    SU(3): Data Latency=1 Reg=%225
  Single Issue       : false;
SU(3):   %226:gpr32common = LDRWroX %223:gpr64common, %225:gpr64, 0, 0, debug-location !1584 :: (load 4 from %ir.arrayidx172); cg.c:751:36
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(2): Data Latency=1 Reg=%225
    SU(0): Data Latency=4 Reg=%223
  Successors:
    SU(4): Data Latency=4 Reg=%226
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   %227:gpr32common = nsw ADDWri %226:gpr32common, 1, 0, debug-location !1587; cg.c:751:45
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%226
  Successors:
    SU(5): Data Latency=1 Reg=%227
  Single Issue       : false;
SU(5):   STRWroX %227:gpr32common, %223:gpr64common, %225:gpr64, 0, 0, debug-location !1590 :: (store 4 into %ir.arrayidx175); cg.c:751:34
  # preds left       : 6
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%227
    SU(3): Ord  Latency=0 Memory
    SU(2): Data Latency=1 Reg=%225
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%223
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(6): Ord  Latency=0 Memory
  Single Issue       : false;
SU(6):   STRWui %247:gpr32, %stack.28.cont40, 0, debug-location !1591 :: (store 4 into %ir.cont40); cg.c:752:32
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.43, debug-location !1592; cg.c:753:25
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) STRWui %247:gpr32, %stack.28.cont40, 0, debug-location !1591 :: (store 4 into %ir.cont40); cg.c:752:32
  Ready @0c
  BotQ.A TopLatency SU(6) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) STRWroX %227:gpr32common, %223:gpr64common, %225:gpr64, 0, 0, debug-location !1590 :: (store 4 into %ir.arrayidx175); cg.c:751:34
  Ready @1c
  BotQ.A TopLatency SU(5) 10c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %227:gpr32common = nsw ADDWri %226:gpr32common, 1, 0, debug-location !1587; cg.c:751:45
  Ready @2c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %226:gpr32common = LDRWroX %223:gpr64common, %225:gpr64, 0, 0, debug-location !1584 :: (load 4 from %ir.arrayidx172); cg.c:751:36
  Ready @6c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %225:gpr64 = UBFMXri %224:gpr64, 62, 61, debug-location !1584; cg.c:751:36
  Ready @7c
  BotQ.A BotLatency SU(2) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %223:gpr64common = LDRXui %fixed-stack.0, 0, debug-location !1584 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:751:36
  Ready @10c
  BotQ.A BotLatency SU(0) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 6
  Executed: 11c
  Critical: 6c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %224:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1586 :: (dereferenceable load 4 from %ir.j); cg.c:751:42
  Ready @11c
  BotQ.A BotLatency SU(1) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 7
  Executed: 12c
  Critical: 7c, 7 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.41 ***
SU(1):   %224:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1586 :: (dereferenceable load 4 from %ir.j); cg.c:751:42
SU(0):   %223:gpr64common = LDRXui %fixed-stack.0, 0, debug-location !1584 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:751:36
SU(2):   %225:gpr64 = UBFMXri %224:gpr64, 62, 61, debug-location !1584; cg.c:751:36
SU(3):   %226:gpr32common = LDRWroX %223:gpr64common, %225:gpr64, 0, 0, debug-location !1584 :: (load 4 from %ir.arrayidx172); cg.c:751:36
SU(4):   %227:gpr32common = nsw ADDWri %226:gpr32common, 1, 0, debug-location !1587; cg.c:751:45
SU(5):   STRWroX %227:gpr32common, %223:gpr64common, %225:gpr64, 0, 0, debug-location !1590 :: (store 4 into %ir.arrayidx175); cg.c:751:34
SU(6):   STRWui %247:gpr32, %stack.28.cont40, 0, debug-location !1591 :: (store 4 into %ir.cont40); cg.c:752:32

********** MI Scheduling **********
sparse:%bb.42 for.inc179
  From: %221:gpr32common = LDRWui %stack.20.k, 0, debug-location !1593 :: (dereferenceable load 4 from %ir.k); cg.c:726:57
    To: B %bb.30, debug-location !1594; cg.c:726:17
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %221:gpr32common = LDRWui %stack.20.k, 0, debug-location !1593 :: (dereferenceable load 4 from %ir.k); cg.c:726:57
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%221
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %222:gpr32common = nsw ADDWri %221:gpr32common, 1, 0, debug-location !1593; cg.c:726:57
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%221
  Successors:
    SU(2): Data Latency=1 Reg=%222
  Single Issue       : false;
SU(2):   STRWui %222:gpr32common, %stack.20.k, 0, debug-location !1593 :: (store 4 into %ir.k); cg.c:726:57
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%222
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.30, debug-location !1594; cg.c:726:17
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %222:gpr32common, %stack.20.k, 0, debug-location !1593 :: (store 4 into %ir.k); cg.c:726:57
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %222:gpr32common = nsw ADDWri %221:gpr32common, 1, 0, debug-location !1593; cg.c:726:57
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %221:gpr32common = LDRWui %stack.20.k, 0, debug-location !1593 :: (dereferenceable load 4 from %ir.k); cg.c:726:57
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.42 ***
SU(0):   %221:gpr32common = LDRWui %stack.20.k, 0, debug-location !1593 :: (dereferenceable load 4 from %ir.k); cg.c:726:57
SU(1):   %222:gpr32common = nsw ADDWri %221:gpr32common, 1, 0, debug-location !1593; cg.c:726:57
SU(2):   STRWui %222:gpr32common, %stack.20.k, 0, debug-location !1593 :: (store 4 into %ir.k); cg.c:726:57

********** MI Scheduling **********
sparse:%bb.44 if.then184
  From: $x0 = COPY %250:gpr64, debug-location !1603; cg.c:757:21
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !1603; cg.c:757:21
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %250:gpr64, debug-location !1603; cg.c:757:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $w1 = COPY %249:gpr32, debug-location !1603; cg.c:757:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !1603; cg.c:757:21
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) $w1 = COPY %249:gpr32, debug-location !1603; cg.c:757:21
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %250:gpr64, debug-location !1603; cg.c:757:21
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   $x0 = COPY %250:gpr64, debug-location !1603; cg.c:757:21
SU(1):   $w1 = COPY %249:gpr32, debug-location !1603; cg.c:757:21

********** MI Scheduling **********
sparse:%bb.45 if.end186
  From: %252:gpr64common = LDRXui %336:gpr64sp, 1, debug-location !1605 :: (dereferenceable load 8 from %ir.a.addr); cg.c:761:24
    To: B %bb.25, debug-location !1613; cg.c:713:13
 RegionInstrs: 10
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %252:gpr64common = LDRXui %336:gpr64sp, 1, debug-location !1605 :: (dereferenceable load 8 from %ir.a.addr); cg.c:761:24
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(6): Data Latency=4 Reg=%252
    SU(3): Data Latency=4 Reg=%252
    SU(6): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %253:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1606 :: (dereferenceable load 4 from %ir.k); cg.c:761:26
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(2): Data Latency=4 Reg=%253
    SU(6): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %254:gpr64 = UBFMXri %253:gpr64, 61, 60, debug-location !1605; cg.c:761:24
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(1): Data Latency=4 Reg=%253
  Successors:
    SU(6): Data Latency=1 Reg=%254
    SU(3): Data Latency=1 Reg=%254
  Single Issue       : false;
SU(3):   %255:fpr64 = LDRDroX %252:gpr64common, %254:gpr64, 0, 0, debug-location !1605 :: (load 8 from %ir.arrayidx188); cg.c:761:24
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 11
  Predecessors:
    SU(2): Data Latency=1 Reg=%254
    SU(0): Data Latency=4 Reg=%252
  Successors:
    SU(5): Data Latency=4 Reg=%255
    SU(9): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   %256:fpr64 = LDRDui %stack.27.va, 0, debug-location !1607 :: (dereferenceable load 8 from %ir.va); cg.c:761:31
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(5): Data Latency=4 Reg=%256
    SU(6): Ord  Latency=0 Memory
  Single Issue       : false;
SU(5):   %257:fpr64 = FADDDrr %255:fpr64, %256:fpr64, debug-location !1608; cg.c:761:29
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 7
  Predecessors:
    SU(3): Data Latency=4 Reg=%255
    SU(4): Data Latency=4 Reg=%256
  Successors:
    SU(6): Data Latency=1 Reg=%257
  Single Issue       : false;
SU(6):   STRDroX %257:fpr64, %252:gpr64common, %254:gpr64, 0, 0, debug-location !1611 :: (store 8 into %ir.arrayidx191); cg.c:761:22
  # preds left       : 7
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 6
  Predecessors:
    SU(5): Data Latency=1 Reg=%257
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Data Latency=1 Reg=%254
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%252
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=1 Memory
  Single Issue       : false;
SU(7):   %258:gpr32common = LDRWui %stack.22.nzrow, 0, debug-location !1612 :: (dereferenceable load 4 from %ir.nzrow); cg.c:713:51
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 5
  Predecessors:
    SU(6): Ord  Latency=1 Memory
  Successors:
    SU(8): Data Latency=4 Reg=%258
    SU(9): Ord  Latency=0 Memory
  Single Issue       : false;
SU(8):   %259:gpr32common = nsw ADDWri %258:gpr32common, 1, 0, debug-location !1612; cg.c:713:51
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 1
  Predecessors:
    SU(7): Data Latency=4 Reg=%258
  Successors:
    SU(9): Data Latency=1 Reg=%259
  Single Issue       : false;
SU(9):   STRWui %259:gpr32common, %stack.22.nzrow, 0, debug-location !1612 :: (store 4 into %ir.nzrow); cg.c:713:51
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%259
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.25, debug-location !1613; cg.c:713:13
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 16
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Pick Bot ONLY1     
Scheduling SU(9) STRWui %259:gpr32common, %stack.22.nzrow, 0, debug-location !1612 :: (store 4 into %ir.nzrow); cg.c:713:51
  Ready @0c
  BotQ.A TopLatency SU(9) 16c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Pick Bot ONLY1     
Scheduling SU(8) %259:gpr32common = nsw ADDWri %258:gpr32common, 1, 0, debug-location !1612; cg.c:713:51
  Ready @1c
  BotQ.A BotLatency SU(8) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) %258:gpr32common = LDRWui %stack.22.nzrow, 0, debug-location !1612 :: (dereferenceable load 4 from %ir.nzrow); cg.c:713:51
  Ready @5c
  BotQ.A BotLatency SU(7) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) STRDroX %257:fpr64, %252:gpr64common, %254:gpr64, 0, 0, debug-location !1611 :: (store 8 into %ir.arrayidx191); cg.c:761:22
  Ready @6c
  BotQ.A BotLatency SU(6) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %257:fpr64 = FADDDrr %255:fpr64, %256:fpr64, debug-location !1608; cg.c:761:29
  Ready @7c
  BotQ.A BotLatency SU(5) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 
BotQ.A RemLatency SU(3) 5c
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %256:fpr64 = LDRDui %stack.27.va, 0, debug-location !1607 :: (dereferenceable load 8 from %ir.va); cg.c:761:31
  Ready @11c
  BotQ.A BotLatency SU(4) 11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %255:fpr64 = LDRDroX %252:gpr64common, %254:gpr64, 0, 0, debug-location !1605 :: (load 8 from %ir.arrayidx188); cg.c:761:24
  Ready @12c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 7
  Executed: 13c
  Critical: 7c, 7 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %254:gpr64 = UBFMXri %253:gpr64, 61, 60, debug-location !1605; cg.c:761:24
  Ready @13c
  BotQ.A BotLatency SU(2) 12c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 8
  Executed: 14c
  Critical: 8c, 8 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 16 BotQ.A
Queue BotQ.P: 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %252:gpr64common = LDRXui %336:gpr64sp, 1, debug-location !1605 :: (dereferenceable load 8 from %ir.a.addr); cg.c:761:24
  Ready @16c
  BotQ.A BotLatency SU(0) 15c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 9
  Executed: 17c
  Critical: 9c, 9 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %253:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1606 :: (dereferenceable load 4 from %ir.k); cg.c:761:26
  Ready @17c
  BotQ.A BotLatency SU(1) 16c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 10
  Executed: 18c
  Critical: 10c, 10 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.45 ***
SU(1):   %253:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1606 :: (dereferenceable load 4 from %ir.k); cg.c:761:26
SU(0):   %252:gpr64common = LDRXui %336:gpr64sp, 1, debug-location !1605 :: (dereferenceable load 8 from %ir.a.addr); cg.c:761:24
SU(2):   %254:gpr64 = UBFMXri %253:gpr64, 61, 60, debug-location !1605; cg.c:761:24
SU(3):   %255:fpr64 = LDRDroX %252:gpr64common, %254:gpr64, 0, 0, debug-location !1605 :: (load 8 from %ir.arrayidx188); cg.c:761:24
SU(4):   %256:fpr64 = LDRDui %stack.27.va, 0, debug-location !1607 :: (dereferenceable load 8 from %ir.va); cg.c:761:31
SU(5):   %257:fpr64 = FADDDrr %255:fpr64, %256:fpr64, debug-location !1608; cg.c:761:29
SU(6):   STRDroX %257:fpr64, %252:gpr64common, %254:gpr64, 0, 0, debug-location !1611 :: (store 8 into %ir.arrayidx191); cg.c:761:22
SU(7):   %258:gpr32common = LDRWui %stack.22.nzrow, 0, debug-location !1612 :: (dereferenceable load 4 from %ir.nzrow); cg.c:713:51
SU(8):   %259:gpr32common = nsw ADDWri %258:gpr32common, 1, 0, debug-location !1612; cg.c:713:51
SU(9):   STRWui %259:gpr32common, %stack.22.nzrow, 0, debug-location !1612 :: (store 4 into %ir.nzrow); cg.c:713:51

********** MI Scheduling **********
sparse:%bb.46 for.inc195
  From: %169:gpr32common = LDRWui %stack.19.nza, 0, debug-location !1616 :: (dereferenceable load 4 from %ir.nza); cg.c:709:41
    To: B %bb.23, debug-location !1617; cg.c:709:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %169:gpr32common = LDRWui %stack.19.nza, 0, debug-location !1616 :: (dereferenceable load 4 from %ir.nza); cg.c:709:41
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%169
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %170:gpr32common = nsw ADDWri %169:gpr32common, 1, 0, debug-location !1616; cg.c:709:41
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%169
  Successors:
    SU(2): Data Latency=1 Reg=%170
  Single Issue       : false;
SU(2):   STRWui %170:gpr32common, %stack.19.nza, 0, debug-location !1616 :: (store 4 into %ir.nza); cg.c:709:41
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%170
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.23, debug-location !1617; cg.c:709:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %170:gpr32common, %stack.19.nza, 0, debug-location !1616 :: (store 4 into %ir.nza); cg.c:709:41
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %170:gpr32common = nsw ADDWri %169:gpr32common, 1, 0, debug-location !1616; cg.c:709:41
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %169:gpr32common = LDRWui %stack.19.nza, 0, debug-location !1616 :: (dereferenceable load 4 from %ir.nza); cg.c:709:41
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.46 ***
SU(0):   %169:gpr32common = LDRWui %stack.19.nza, 0, debug-location !1616 :: (dereferenceable load 4 from %ir.nza); cg.c:709:41
SU(1):   %170:gpr32common = nsw ADDWri %169:gpr32common, 1, 0, debug-location !1616; cg.c:709:41
SU(2):   STRWui %170:gpr32common, %stack.19.nza, 0, debug-location !1616 :: (store 4 into %ir.nza); cg.c:709:41

********** MI Scheduling **********
sparse:%bb.47 for.end197
  From: %142:fpr64 = LDRDui %stack.24.size, 0, debug-location !1620 :: (dereferenceable load 8 from %ir.size); cg.c:764:16
    To: B %bb.21, debug-location !1625; cg.c:708:5
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %142:fpr64 = LDRDui %stack.24.size, 0, debug-location !1620 :: (dereferenceable load 8 from %ir.size); cg.c:764:16
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%142
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %143:fpr64 = LDRDui %stack.26.ratio, 0, debug-location !1621 :: (dereferenceable load 8 from %ir.ratio); cg.c:764:23
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%143
  Single Issue       : false;
SU(2):   %144:fpr64 = FMULDrr %142:fpr64, %143:fpr64, debug-location !1622; cg.c:764:21
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%143
    SU(0): Data Latency=4 Reg=%142
  Successors:
    SU(3): Data Latency=1 Reg=%144
  Single Issue       : false;
SU(3):   STRDui %144:fpr64, %stack.24.size, 0, debug-location !1623 :: (store 8 into %ir.size); cg.c:764:14
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%144
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   %145:gpr32common = LDRWui %stack.15.i, 0, debug-location !1624 :: (dereferenceable load 4 from %ir.i); cg.c:708:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=%145
    SU(6): Ord  Latency=0 Memory
  Single Issue       : false;
SU(5):   %146:gpr32common = nsw ADDWri %145:gpr32common, 1, 0, debug-location !1624; cg.c:708:25
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(4): Data Latency=4 Reg=%145
  Successors:
    SU(6): Data Latency=1 Reg=%146
  Single Issue       : false;
SU(6):   STRWui %146:gpr32common, %stack.15.i, 0, debug-location !1624 :: (store 4 into %ir.i); cg.c:708:25
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%146
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.21, debug-location !1625; cg.c:708:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) STRWui %146:gpr32common, %stack.15.i, 0, debug-location !1624 :: (store 4 into %ir.i); cg.c:708:25
  Ready @0c
  BotQ.A TopLatency SU(6) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 
BotQ.A RemLatency SU(3) 5c
  BotQ.A RemainingLatency 5 + 1c > CritPath 5
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(3) STRDui %144:fpr64, %stack.24.size, 0, debug-location !1623 :: (store 8 into %ir.size); cg.c:764:14
  Ready @1c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 
BotQ.A RemLatency SU(5) 4c
  BotQ.A RemainingLatency 4 + 2c > CritPath 5
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %146:gpr32common = nsw ADDWri %145:gpr32common, 1, 0, debug-location !1624; cg.c:708:25
  Ready @2c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %144:fpr64 = FMULDrr %142:fpr64, %143:fpr64, debug-location !1622; cg.c:764:21
  Ready @3c
  BotQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 0 1 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %145:gpr32common = LDRWui %stack.15.i, 0, debug-location !1624 :: (dereferenceable load 4 from %ir.i); cg.c:708:25
  Ready @6c
  BotQ.A BotLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 7c > CritPath 5
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %143:fpr64 = LDRDui %stack.26.ratio, 0, debug-location !1621 :: (dereferenceable load 8 from %ir.ratio); cg.c:764:23
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %142:fpr64 = LDRDui %stack.24.size, 0, debug-location !1620 :: (dereferenceable load 8 from %ir.size); cg.c:764:16
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.47 ***
SU(0):   %142:fpr64 = LDRDui %stack.24.size, 0, debug-location !1620 :: (dereferenceable load 8 from %ir.size); cg.c:764:16
SU(1):   %143:fpr64 = LDRDui %stack.26.ratio, 0, debug-location !1621 :: (dereferenceable load 8 from %ir.ratio); cg.c:764:23
SU(4):   %145:gpr32common = LDRWui %stack.15.i, 0, debug-location !1624 :: (dereferenceable load 4 from %ir.i); cg.c:708:25
SU(2):   %144:fpr64 = FMULDrr %142:fpr64, %143:fpr64, debug-location !1622; cg.c:764:21
SU(5):   %146:gpr32common = nsw ADDWri %145:gpr32common, 1, 0, debug-location !1624; cg.c:708:25
SU(3):   STRDui %144:fpr64, %stack.24.size, 0, debug-location !1623 :: (store 8 into %ir.size); cg.c:764:14
SU(6):   STRWui %146:gpr32common, %stack.15.i, 0, debug-location !1624 :: (store 4 into %ir.i); cg.c:708:25

********** MI Scheduling **********
sparse:%bb.48 for.end201
  From: %63:gpr32 = MOVi32imm 1
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %63:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%63
  Single Issue       : false;
SU(1):   STRWui %63:gpr32, %stack.16.j, 0, debug-location !1628 :: (store 4 into %ir.j); cg.c:770:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%63
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %63:gpr32, %stack.16.j, 0, debug-location !1628 :: (store 4 into %ir.j); cg.c:770:12
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %63:gpr32 = MOVi32imm 1
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.48 ***
SU(0):   %63:gpr32 = MOVi32imm 1
SU(1):   STRWui %63:gpr32, %stack.16.j, 0, debug-location !1628 :: (store 4 into %ir.j); cg.c:770:12

********** MI Scheduling **********
sparse:%bb.49 for.cond202
  From: %64:gpr32 = LDRWui %stack.16.j, 0, debug-location !1631 :: (dereferenceable load 4 from %ir.j); cg.c:770:17
    To: Bcc 10, %bb.51, implicit killed $nzcv, debug-location !1635; cg.c:770:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %64:gpr32 = LDRWui %stack.16.j, 0, debug-location !1631 :: (dereferenceable load 4 from %ir.j); cg.c:770:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%64
  Single Issue       : false;
SU(1):   %65:gpr32 = LDRWui %stack.14.nrows, 0, debug-location !1633 :: (dereferenceable load 4 from %ir.nrows); cg.c:770:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%65
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %64:gpr32, %65:gpr32, implicit-def $nzcv, debug-location !1635; cg.c:770:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%65
    SU(0): Data Latency=4 Reg=%64
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.51, implicit killed $nzcv, debug-location !1635; cg.c:770:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %64:gpr32, %65:gpr32, implicit-def $nzcv, debug-location !1635; cg.c:770:5
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %65:gpr32 = LDRWui %stack.14.nrows, 0, debug-location !1633 :: (dereferenceable load 4 from %ir.nrows); cg.c:770:21
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %64:gpr32 = LDRWui %stack.16.j, 0, debug-location !1631 :: (dereferenceable load 4 from %ir.j); cg.c:770:17
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.49 ***
SU(0):   %64:gpr32 = LDRWui %stack.16.j, 0, debug-location !1631 :: (dereferenceable load 4 from %ir.j); cg.c:770:17
SU(1):   %65:gpr32 = LDRWui %stack.14.nrows, 0, debug-location !1633 :: (dereferenceable load 4 from %ir.nrows); cg.c:770:21
SU(2):   dead $wzr = SUBSWrr %64:gpr32, %65:gpr32, implicit-def $nzcv, debug-location !1635; cg.c:770:5

********** MI Scheduling **********
sparse:%bb.50 for.body205
  From: %128:gpr64 = LDRXui %fixed-stack.0, 0, debug-location !1636 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:771:20
    To: B %bb.49, debug-location !1647; cg.c:770:5
 RegionInstrs: 10
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %128:gpr64 = LDRXui %fixed-stack.0, 0, debug-location !1636 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:771:20
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(2): Data Latency=4 Reg=%128
    SU(6): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %129:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1638 :: (dereferenceable load 4 from %ir.j); cg.c:771:26
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(2): Data Latency=4 Reg=%129
    SU(9): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %130:gpr64common = ADDXrs %128:gpr64, %129:gpr64, 2, debug-location !1636; cg.c:771:20
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(1): Data Latency=4 Reg=%129
    SU(0): Data Latency=4 Reg=%128
  Successors:
    SU(6): Data Latency=1 Reg=%130
    SU(4): Data Latency=1 Reg=%130
    SU(3): Data Latency=1 Reg=%130
  Single Issue       : false;
SU(3):   %131:gpr32 = LDRWui %130:gpr64common, 0, debug-location !1636 :: (load 4 from %ir.arrayidx207); cg.c:771:20
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 11
  Predecessors:
    SU(2): Data Latency=1 Reg=%130
  Successors:
    SU(5): Data Latency=4 Reg=%131
    SU(9): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   %132:gpr32 = LDURWi %130:gpr64common, -4, debug-location !1639 :: (load 4 from %ir.arrayidx210); cg.c:771:31
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 11
  Predecessors:
    SU(2): Data Latency=1 Reg=%130
  Successors:
    SU(5): Data Latency=4 Reg=%132
    SU(9): Ord  Latency=0 Memory
  Single Issue       : false;
SU(5):   %133:gpr32 = nsw ADDWrr %131:gpr32, %132:gpr32, debug-location !1642; cg.c:771:29
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 7
  Predecessors:
    SU(4): Data Latency=4 Reg=%132
    SU(3): Data Latency=4 Reg=%131
  Successors:
    SU(6): Data Latency=1 Reg=%133
  Single Issue       : false;
SU(6):   STRWui %133:gpr32, %130:gpr64common, 0, debug-location !1645 :: (store 4 into %ir.arrayidx213); cg.c:771:18
  # preds left       : 5
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 6
  Predecessors:
    SU(5): Data Latency=1 Reg=%133
    SU(3): Ord  Latency=0 Memory
    SU(2): Data Latency=1 Reg=%130
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=1 Memory
  Single Issue       : false;
SU(7):   %134:gpr32common = LDRWui %stack.16.j, 0, debug-location !1646 :: (dereferenceable load 4 from %ir.j); cg.c:770:29
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 5
  Predecessors:
    SU(6): Ord  Latency=1 Memory
  Successors:
    SU(8): Data Latency=4 Reg=%134
    SU(9): Ord  Latency=0 Memory
  Single Issue       : false;
SU(8):   %135:gpr32common = nsw ADDWri %134:gpr32common, 1, 0, debug-location !1646; cg.c:770:29
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 1
  Predecessors:
    SU(7): Data Latency=4 Reg=%134
  Successors:
    SU(9): Data Latency=1 Reg=%135
  Single Issue       : false;
SU(9):   STRWui %135:gpr32common, %stack.16.j, 0, debug-location !1646 :: (store 4 into %ir.j); cg.c:770:29
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%135
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.49, debug-location !1647; cg.c:770:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 16
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Pick Bot ONLY1     
Scheduling SU(9) STRWui %135:gpr32common, %stack.16.j, 0, debug-location !1646 :: (store 4 into %ir.j); cg.c:770:29
  Ready @0c
  BotQ.A TopLatency SU(9) 16c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Pick Bot ONLY1     
Scheduling SU(8) %135:gpr32common = nsw ADDWri %134:gpr32common, 1, 0, debug-location !1646; cg.c:770:29
  Ready @1c
  BotQ.A BotLatency SU(8) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) %134:gpr32common = LDRWui %stack.16.j, 0, debug-location !1646 :: (dereferenceable load 4 from %ir.j); cg.c:770:29
  Ready @5c
  BotQ.A BotLatency SU(7) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) STRWui %133:gpr32, %130:gpr64common, 0, debug-location !1645 :: (store 4 into %ir.arrayidx213); cg.c:771:18
  Ready @6c
  BotQ.A BotLatency SU(6) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %133:gpr32 = nsw ADDWrr %131:gpr32, %132:gpr32, debug-location !1642; cg.c:771:29
  Ready @7c
  BotQ.A BotLatency SU(5) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(4) 5c
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %132:gpr32 = LDURWi %130:gpr64common, -4, debug-location !1639 :: (load 4 from %ir.arrayidx210); cg.c:771:31
  Ready @11c
  BotQ.A BotLatency SU(4) 11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %131:gpr32 = LDRWui %130:gpr64common, 0, debug-location !1636 :: (load 4 from %ir.arrayidx207); cg.c:771:20
  Ready @12c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 7
  Executed: 13c
  Critical: 7c, 7 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %130:gpr64common = ADDXrs %128:gpr64, %129:gpr64, 2, debug-location !1636; cg.c:771:20
  Ready @13c
  BotQ.A BotLatency SU(2) 12c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 8
  Executed: 14c
  Critical: 8c, 8 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 17 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 17c > CritPath 16
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %129:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1638 :: (dereferenceable load 4 from %ir.j); cg.c:771:26
  Ready @17c
  BotQ.A BotLatency SU(1) 16c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 9
  Executed: 18c
  Critical: 9c, 9 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %128:gpr64 = LDRXui %fixed-stack.0, 0, debug-location !1636 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:771:20
  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 10
  Executed: 19c
  Critical: 10c, 10 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.50 ***
SU(0):   %128:gpr64 = LDRXui %fixed-stack.0, 0, debug-location !1636 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:771:20
SU(1):   %129:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1638 :: (dereferenceable load 4 from %ir.j); cg.c:771:26
SU(2):   %130:gpr64common = ADDXrs %128:gpr64, %129:gpr64, 2, debug-location !1636; cg.c:771:20
SU(3):   %131:gpr32 = LDRWui %130:gpr64common, 0, debug-location !1636 :: (load 4 from %ir.arrayidx207); cg.c:771:20
SU(4):   %132:gpr32 = LDURWi %130:gpr64common, -4, debug-location !1639 :: (load 4 from %ir.arrayidx210); cg.c:771:31
SU(5):   %133:gpr32 = nsw ADDWrr %131:gpr32, %132:gpr32, debug-location !1642; cg.c:771:29
SU(6):   STRWui %133:gpr32, %130:gpr64common, 0, debug-location !1645 :: (store 4 into %ir.arrayidx213); cg.c:771:18
SU(7):   %134:gpr32common = LDRWui %stack.16.j, 0, debug-location !1646 :: (dereferenceable load 4 from %ir.j); cg.c:770:29
SU(8):   %135:gpr32common = nsw ADDWri %134:gpr32common, 1, 0, debug-location !1646; cg.c:770:29
SU(9):   STRWui %135:gpr32common, %stack.16.j, 0, debug-location !1646 :: (store 4 into %ir.j); cg.c:770:29

********** MI Scheduling **********
sparse:%bb.52 for.cond217
  From: %68:gpr32 = LDRWui %stack.16.j, 0, debug-location !1653 :: (dereferenceable load 4 from %ir.j); cg.c:774:17
    To: Bcc 10, %bb.60, implicit killed $nzcv, debug-location !1657; cg.c:774:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %68:gpr32 = LDRWui %stack.16.j, 0, debug-location !1653 :: (dereferenceable load 4 from %ir.j); cg.c:774:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%68
  Single Issue       : false;
SU(1):   %69:gpr32 = LDRWui %stack.14.nrows, 0, debug-location !1655 :: (dereferenceable load 4 from %ir.nrows); cg.c:774:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%69
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %68:gpr32, %69:gpr32, implicit-def $nzcv, debug-location !1657; cg.c:774:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%69
    SU(0): Data Latency=4 Reg=%68
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.60, implicit killed $nzcv, debug-location !1657; cg.c:774:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %68:gpr32, %69:gpr32, implicit-def $nzcv, debug-location !1657; cg.c:774:5
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %69:gpr32 = LDRWui %stack.14.nrows, 0, debug-location !1655 :: (dereferenceable load 4 from %ir.nrows); cg.c:774:21
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %68:gpr32 = LDRWui %stack.16.j, 0, debug-location !1653 :: (dereferenceable load 4 from %ir.j); cg.c:774:17
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.52 ***
SU(0):   %68:gpr32 = LDRWui %stack.16.j, 0, debug-location !1653 :: (dereferenceable load 4 from %ir.j); cg.c:774:17
SU(1):   %69:gpr32 = LDRWui %stack.14.nrows, 0, debug-location !1655 :: (dereferenceable load 4 from %ir.nrows); cg.c:774:21
SU(2):   dead $wzr = SUBSWrr %68:gpr32, %69:gpr32, implicit-def $nzcv, debug-location !1657; cg.c:774:5

********** MI Scheduling **********
sparse:%bb.53 for.body220
  From: %90:gpr32common = LDRWui %stack.16.j, 0, debug-location !1658 :: (dereferenceable load 4 from %ir.j); cg.c:775:13
    To: Bcc 11, %bb.55, implicit killed $nzcv, debug-location !1662; cg.c:775:13
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %90:gpr32common = LDRWui %stack.16.j, 0, debug-location !1658 :: (dereferenceable load 4 from %ir.j); cg.c:775:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%90
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %90:gpr32common, 1, 0, implicit-def $nzcv, debug-location !1662; cg.c:775:13
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%90
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 11, %bb.55, implicit killed $nzcv, debug-location !1662; cg.c:775:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %90:gpr32common, 1, 0, implicit-def $nzcv, debug-location !1662; cg.c:775:13
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %90:gpr32common = LDRWui %stack.16.j, 0, debug-location !1658 :: (dereferenceable load 4 from %ir.j); cg.c:775:13
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.53 ***
SU(0):   %90:gpr32common = LDRWui %stack.16.j, 0, debug-location !1658 :: (dereferenceable load 4 from %ir.j); cg.c:775:13
SU(1):   dead $wzr = SUBSWri %90:gpr32common, 1, 0, implicit-def $nzcv, debug-location !1662; cg.c:775:13

********** MI Scheduling **********
sparse:%bb.54 if.then223
  From: %93:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1663 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:776:18
    To: B %bb.56, debug-location !1671; cg.c:777:9
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %93:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1663 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:776:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Data Latency=4 Reg=%93
  Single Issue       : false;
SU(1):   %94:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1665 :: (dereferenceable load 4 from %ir.j); cg.c:776:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(2): Data Latency=4 Reg=%94
  Single Issue       : false;
SU(2):   %95:gpr64 = UBFMXri %94:gpr64, 62, 61, debug-location !1663; cg.c:776:18
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(1): Data Latency=4 Reg=%94
  Successors:
    SU(5): Data Latency=1 Reg=%95
    SU(3): Data Latency=1 Reg=%95
  Single Issue       : false;
SU(3):   %96:gpr32 = LDRWroX %93:gpr64common, %95:gpr64, 0, 0, debug-location !1663 :: (load 4 from %ir.arrayidx225); cg.c:776:18
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(2): Data Latency=1 Reg=%95
    SU(0): Data Latency=4 Reg=%93
  Successors:
    SU(7): Data Latency=4 Reg=%96
    SU(8): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   %97:gpr64 = LDRXui %fixed-stack.0, 0, debug-location !1666 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:776:30
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(5): Data Latency=4 Reg=%97
  Single Issue       : false;
SU(5):   %98:gpr64common = ADDXrr %95:gpr64, %97:gpr64, debug-location !1666; cg.c:776:30
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(2): Data Latency=1 Reg=%95
    SU(4): Data Latency=4 Reg=%97
  Successors:
    SU(6): Data Latency=1 Reg=%98
  Single Issue       : false;
SU(6):   %99:gpr32 = LDURWi %98:gpr64common, -4, debug-location !1666 :: (load 4 from %ir.arrayidx228); cg.c:776:30
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 5
  Predecessors:
    SU(5): Data Latency=1 Reg=%98
  Successors:
    SU(7): Data Latency=4 Reg=%99
    SU(8): Ord  Latency=0 Memory
  Single Issue       : false;
SU(7):   %100:gpr32 = nsw SUBWrr %96:gpr32, %99:gpr32, debug-location !1669; cg.c:776:28
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(6): Data Latency=4 Reg=%99
    SU(3): Data Latency=4 Reg=%96
  Successors:
    SU(8): Data Latency=1 Reg=%100
  Single Issue       : false;
SU(8):   STRWui %100:gpr32, %stack.17.j1, 0, debug-location !1670 :: (store 4 into %ir.j1); cg.c:776:16
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=%100
    SU(6): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.56, debug-location !1671; cg.c:777:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 11
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Pick Bot ONLY1     
Scheduling SU(8) STRWui %100:gpr32, %stack.17.j1, 0, debug-location !1670 :: (store 4 into %ir.j1); cg.c:776:16
  Ready @0c
  BotQ.A TopLatency SU(8) 11c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) %100:gpr32 = nsw SUBWrr %96:gpr32, %99:gpr32, debug-location !1669; cg.c:776:28
  Ready @1c
  BotQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 6 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 
BotQ.A RemLatency SU(6) 6c
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %99:gpr32 = LDURWi %98:gpr64common, -4, debug-location !1666 :: (load 4 from %ir.arrayidx228); cg.c:776:30
  Ready @5c
  BotQ.A BotLatency SU(6) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 
BotQ.A RemLatency SU(3) 5c
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %98:gpr64common = ADDXrr %95:gpr64, %97:gpr64, debug-location !1666; cg.c:776:30
  Ready @6c
  BotQ.A BotLatency SU(5) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %96:gpr32 = LDRWroX %93:gpr64common, %95:gpr64, 0, 0, debug-location !1663 :: (load 4 from %ir.arrayidx225); cg.c:776:18
  Ready @7c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %95:gpr64 = UBFMXri %94:gpr64, 62, 61, debug-location !1663; cg.c:776:18
  Ready @8c
  BotQ.A BotLatency SU(2) 7c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 1 0 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %97:gpr64 = LDRXui %fixed-stack.0, 0, debug-location !1666 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:776:30
  Ready @10c
  BotQ.A BotLatency SU(4) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 7
  Executed: 11c
  Critical: 7c, 7 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %93:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1663 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:776:18
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 8
  Executed: 12c
  Critical: 8c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %94:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1665 :: (dereferenceable load 4 from %ir.j); cg.c:776:25
  Ready @12c
  BotQ.A BotLatency SU(1) 11c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 9
  Executed: 13c
  Critical: 9c, 9 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.54 ***
SU(1):   %94:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1665 :: (dereferenceable load 4 from %ir.j); cg.c:776:25
SU(0):   %93:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1663 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:776:18
SU(4):   %97:gpr64 = LDRXui %fixed-stack.0, 0, debug-location !1666 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:776:30
SU(2):   %95:gpr64 = UBFMXri %94:gpr64, 62, 61, debug-location !1663; cg.c:776:18
SU(3):   %96:gpr32 = LDRWroX %93:gpr64common, %95:gpr64, 0, 0, debug-location !1663 :: (load 4 from %ir.arrayidx225); cg.c:776:18
SU(5):   %98:gpr64common = ADDXrr %95:gpr64, %97:gpr64, debug-location !1666; cg.c:776:30
SU(6):   %99:gpr32 = LDURWi %98:gpr64common, -4, debug-location !1666 :: (load 4 from %ir.arrayidx228); cg.c:776:30
SU(7):   %100:gpr32 = nsw SUBWrr %96:gpr32, %99:gpr32, debug-location !1669; cg.c:776:28
SU(8):   STRWui %100:gpr32, %stack.17.j1, 0, debug-location !1670 :: (store 4 into %ir.j1); cg.c:776:16

********** MI Scheduling **********
sparse:%bb.56 if.end231
  From: %101:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1674 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:781:14
    To: End RegionInstrs: 13
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %101:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1674 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:781:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(3): Data Latency=4 Reg=%101
  Single Issue       : false;
SU(1):   %102:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1675 :: (dereferenceable load 4 from %ir.j); cg.c:781:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(2): Data Latency=4 Reg=%102
  Single Issue       : false;
SU(2):   %103:gpr64 = UBFMXri %102:gpr64, 62, 61, debug-location !1681; cg.c:782:15
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(1): Data Latency=4 Reg=%102
  Successors:
    SU(6): Data Latency=1 Reg=%103
    SU(3): Data Latency=1 Reg=%103
  Single Issue       : false;
SU(3):   %104:gpr64common = ADDXrr %103:gpr64, %101:gpr64, debug-location !1674; cg.c:781:14
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 11
  Predecessors:
    SU(2): Data Latency=1 Reg=%103
    SU(0): Data Latency=4 Reg=%101
  Successors:
    SU(9): Data Latency=1 Reg=%104
    SU(4): Data Latency=1 Reg=%104
  Single Issue       : false;
SU(4):   %105:gpr32 = LDRWui %104:gpr64common, 1, debug-location !1674 :: (load 4 from %ir.arrayidx234); cg.c:781:14
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 10
  Predecessors:
    SU(3): Data Latency=1 Reg=%104
  Successors:
    SU(7): Data Latency=4 Reg=%105
    SU(12): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
  Single Issue       : false;
SU(5):   %106:gpr64common = LDRXui %fixed-stack.0, 0, debug-location !1677 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:781:30
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(6): Data Latency=4 Reg=%106
  Single Issue       : false;
SU(6):   %107:gpr32 = LDRWroX %106:gpr64common, %103:gpr64, 0, 0, debug-location !1677 :: (load 4 from %ir.arrayidx236); cg.c:781:30
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(2): Data Latency=1 Reg=%103
    SU(5): Data Latency=4 Reg=%106
  Successors:
    SU(7): Data Latency=4 Reg=%107
    SU(12): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
  Single Issue       : false;
SU(7):   %108:gpr32 = nsw SUBWrr %105:gpr32, %107:gpr32, debug-location !1679; cg.c:781:28
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 6
  Predecessors:
    SU(4): Data Latency=4 Reg=%105
    SU(6): Data Latency=4 Reg=%107
  Successors:
    SU(8): Data Latency=1 Reg=%108
  Single Issue       : false;
SU(8):   STRWui %108:gpr32, %stack.18.j2, 0, debug-location !1680 :: (store 4 into %ir.j2); cg.c:781:12
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 5
  Predecessors:
    SU(7): Data Latency=1 Reg=%108
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Successors:
    SU(9): Ord  Latency=1 Memory
  Single Issue       : false;
SU(9):   %109:gpr32 = LDRWui %104:gpr64common, 0, debug-location !1681 :: (load 4 from %ir.arrayidx239); cg.c:782:15
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 4
  Predecessors:
    SU(8): Ord  Latency=1 Memory
    SU(3): Data Latency=1 Reg=%104
  Successors:
    SU(10): Data Latency=4 Reg=%109
    SU(12): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
  Single Issue       : false;
SU(10):   STRWui %109:gpr32, %stack.19.nza, 0, debug-location !1683 :: (store 4 into %ir.nza); cg.c:782:13
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(9): Data Latency=4 Reg=%109
    SU(9): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(11):   %110:gpr32 = LDRWui %stack.17.j1, 0, debug-location !1684 :: (dereferenceable load 4 from %ir.j1); cg.c:783:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(12): Data Latency=4 Reg=%110
  Single Issue       : false;
SU(12):   STRWui %110:gpr32, %stack.20.k, 0, debug-location !1686 :: (store 4 into %ir.k); cg.c:783:16
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(11): Data Latency=4 Reg=%110
    SU(9): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
Critical Path(GS-RR ): 16
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 10 
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 11 
Picking from Bot:
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) STRWui %110:gpr32, %stack.20.k, 0, debug-location !1686 :: (store 4 into %ir.k); cg.c:783:16
  Ready @0c
  BotQ.A TopLatency SU(12) 12c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 11 
Queue BotQ.A: 10 
Pick Bot ONLY1     
Scheduling SU(10) STRWui %109:gpr32, %stack.19.nza, 0, debug-location !1683 :: (store 4 into %ir.nza); cg.c:782:13
  Ready @1c
  BotQ.A TopLatency SU(10) 16c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 4 BotQ.A
Queue BotQ.P: 9 
Queue BotQ.A: 11 
Pick Bot ONLY1     
Scheduling SU(11) %110:gpr32 = LDRWui %stack.17.j1, 0, debug-location !1684 :: (dereferenceable load 4 from %ir.j1); cg.c:783:18
  Ready @4c
  BotQ.A BotLatency SU(11) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Pick Bot ONLY1     
Scheduling SU(9) %109:gpr32 = LDRWui %104:gpr64common, 0, debug-location !1681 :: (load 4 from %ir.arrayidx239); cg.c:782:15
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Pick Bot ONLY1     
Scheduling SU(8) STRWui %108:gpr32, %stack.18.j2, 0, debug-location !1680 :: (store 4 into %ir.j2); cg.c:781:12
  Ready @6c
  BotQ.A BotLatency SU(8) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) %108:gpr32 = nsw SUBWrr %105:gpr32, %107:gpr32, debug-location !1679; cg.c:781:28
  Ready @7c
  BotQ.A BotLatency SU(7) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 4 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 
BotQ.A RemLatency SU(4) 6c
  BotQ.A RemainingLatency 6 + 11c > CritPath 16
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) %105:gpr32 = LDRWui %104:gpr64common, 1, debug-location !1674 :: (load 4 from %ir.arrayidx234); cg.c:781:14
  Ready @11c
  BotQ.A BotLatency SU(4) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 7
  Executed: 12c
  Critical: 7c, 7 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 
BotQ.A RemLatency SU(6) 5c
  BotQ.A RemainingLatency 5 + 12c > CritPath 16
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %107:gpr32 = LDRWroX %106:gpr64common, %103:gpr64, 0, 0, debug-location !1677 :: (load 4 from %ir.arrayidx236); cg.c:781:30
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 8
  Executed: 13c
  Critical: 8c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %104:gpr64common = ADDXrr %103:gpr64, %101:gpr64, debug-location !1674; cg.c:781:14
  Ready @13c
  BotQ.A TopLatency SU(3) 5c
  BotQ.A BotLatency SU(3) 11c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 9
  Executed: 14c
  Critical: 9c, 9 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %103:gpr64 = UBFMXri %102:gpr64, 62, 61, debug-location !1681; cg.c:782:15
  Ready @14c
  BotQ.A BotLatency SU(2) 12c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 10
  Executed: 15c
  Critical: 10c, 10 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 16 BotQ.A
Queue BotQ.P: 1 0 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %106:gpr64common = LDRXui %fixed-stack.0, 0, debug-location !1677 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:781:30
  Ready @16c
  BotQ.A BotLatency SU(5) 14c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 11
  Executed: 17c
  Critical: 11c, 11 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %101:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1674 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:781:14
  Ready @17c
  BotQ.A BotLatency SU(0) 15c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 12
  Executed: 18c
  Critical: 12c, 12 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %102:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1675 :: (dereferenceable load 4 from %ir.j); cg.c:781:21
  Ready @18c
  BotQ.A BotLatency SU(1) 16c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 13
  Executed: 19c
  Critical: 13c, 13 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.56 ***
SU(1):   %102:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1675 :: (dereferenceable load 4 from %ir.j); cg.c:781:21
SU(0):   %101:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1674 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:781:14
SU(5):   %106:gpr64common = LDRXui %fixed-stack.0, 0, debug-location !1677 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:781:30
SU(2):   %103:gpr64 = UBFMXri %102:gpr64, 62, 61, debug-location !1681; cg.c:782:15
SU(3):   %104:gpr64common = ADDXrr %103:gpr64, %101:gpr64, debug-location !1674; cg.c:781:14
SU(6):   %107:gpr32 = LDRWroX %106:gpr64common, %103:gpr64, 0, 0, debug-location !1677 :: (load 4 from %ir.arrayidx236); cg.c:781:30
SU(4):   %105:gpr32 = LDRWui %104:gpr64common, 1, debug-location !1674 :: (load 4 from %ir.arrayidx234); cg.c:781:14
SU(7):   %108:gpr32 = nsw SUBWrr %105:gpr32, %107:gpr32, debug-location !1679; cg.c:781:28
SU(8):   STRWui %108:gpr32, %stack.18.j2, 0, debug-location !1680 :: (store 4 into %ir.j2); cg.c:781:12
SU(9):   %109:gpr32 = LDRWui %104:gpr64common, 0, debug-location !1681 :: (load 4 from %ir.arrayidx239); cg.c:782:15
SU(11):   %110:gpr32 = LDRWui %stack.17.j1, 0, debug-location !1684 :: (dereferenceable load 4 from %ir.j1); cg.c:783:18
SU(10):   STRWui %109:gpr32, %stack.19.nza, 0, debug-location !1683 :: (store 4 into %ir.nza); cg.c:782:13
SU(12):   STRWui %110:gpr32, %stack.20.k, 0, debug-location !1686 :: (store 4 into %ir.k); cg.c:783:16

********** MI Scheduling **********
sparse:%bb.57 for.cond240
  From: %111:gpr32 = LDRWui %stack.20.k, 0, debug-location !1688 :: (dereferenceable load 4 from %ir.k); cg.c:783:22
    To: Bcc 10, %bb.59, implicit killed $nzcv, debug-location !1692; cg.c:783:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %111:gpr32 = LDRWui %stack.20.k, 0, debug-location !1688 :: (dereferenceable load 4 from %ir.k); cg.c:783:22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%111
  Single Issue       : false;
SU(1):   %112:gpr32 = LDRWui %stack.18.j2, 0, debug-location !1690 :: (dereferenceable load 4 from %ir.j2); cg.c:783:26
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%112
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %111:gpr32, %112:gpr32, implicit-def $nzcv, debug-location !1692; cg.c:783:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%112
    SU(0): Data Latency=4 Reg=%111
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.59, implicit killed $nzcv, debug-location !1692; cg.c:783:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %111:gpr32, %112:gpr32, implicit-def $nzcv, debug-location !1692; cg.c:783:9
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %112:gpr32 = LDRWui %stack.18.j2, 0, debug-location !1690 :: (dereferenceable load 4 from %ir.j2); cg.c:783:26
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %111:gpr32 = LDRWui %stack.20.k, 0, debug-location !1688 :: (dereferenceable load 4 from %ir.k); cg.c:783:22
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.57 ***
SU(0):   %111:gpr32 = LDRWui %stack.20.k, 0, debug-location !1688 :: (dereferenceable load 4 from %ir.k); cg.c:783:22
SU(1):   %112:gpr32 = LDRWui %stack.18.j2, 0, debug-location !1690 :: (dereferenceable load 4 from %ir.j2); cg.c:783:26
SU(2):   dead $wzr = SUBSWrr %111:gpr32, %112:gpr32, implicit-def $nzcv, debug-location !1692; cg.c:783:9

********** MI Scheduling **********
sparse:%bb.58 for.body243
  From: %116:gpr64common = LDRXui %336:gpr64sp, 1, debug-location !1693 :: (dereferenceable load 8 from %ir.a.addr); cg.c:784:20
    To: B %bb.57, debug-location !1708; cg.c:783:9
 RegionInstrs: 16
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=1
GPR32=4
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
Live In: %336 
Live Out: %336 
Live Thru: GPR32=1
  LiveReg: %336
  UpdateRegP: SU(0) %116:gpr64common = LDRXui %336:gpr64sp, 1, debug-location !1693 :: (dereferenceable load 8 from %ir.a.addr); cg.c:784:20
              to GPR32 -1
  UpdateRegP: SU(5) %120:gpr64common = LDRXui %336:gpr64sp, 0, debug-location !1699 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:785:25
              to GPR32 -1
Top Pressure:
GPR32=1
Bottom Pressure:
GPR32=1
Excess PSets: 
SU(0):   %116:gpr64common = LDRXui %336:gpr64sp, 1, debug-location !1693 :: (dereferenceable load 8 from %ir.a.addr); cg.c:784:20
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 23
  Successors:
    SU(4): Data Latency=4 Reg=%116
    SU(2): Data Latency=4 Reg=%116
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %117:gpr64 = LDRSWui %stack.19.nza, 0, debug-location !1695 :: (dereferenceable load 4 from %ir.nza); cg.c:784:22
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 23
  Successors:
    SU(2): Data Latency=4 Reg=%117
    SU(12): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   %118:fpr64 = LDRDroX %116:gpr64common, %117:gpr64, 0, 1, debug-location !1693 :: (load 8 from %ir.arrayidx245); cg.c:784:20
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 19
  Predecessors:
    SU(1): Data Latency=4 Reg=%117
    SU(0): Data Latency=4 Reg=%116
  Successors:
    SU(4): Data Latency=4 Reg=%118
    SU(15): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(3):   %119:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1697 :: (dereferenceable load 4 from %ir.k); cg.c:784:15
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 19
  Successors:
    SU(4): Data Latency=4 Reg=%119
    SU(15): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(4):   STRDroX %118:fpr64, %116:gpr64common, %119:gpr64, 0, 1, debug-location !1698 :: (store 8 into %ir.arrayidx247); cg.c:784:18
  # preds left       : 7
  # succs left       : 9
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 15
  Predecessors:
    SU(2): Data Latency=4 Reg=%118
    SU(3): Ord  Latency=0 Memory
    SU(3): Data Latency=4 Reg=%119
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%116
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(15): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(13): Ord  Latency=1 Memory
    SU(8): Ord  Latency=1 Memory
    SU(10): Ord  Latency=1 Memory
    SU(6): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
  Pressure Diff      : FPR8 1    GPR32 2    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(5):   %120:gpr64common = LDRXui %336:gpr64sp, 0, debug-location !1699 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:785:25
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 14
  Predecessors:
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(9): Data Latency=4 Reg=%120
    SU(7): Data Latency=4 Reg=%120
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(6):   %121:gpr64 = LDRSWui %stack.19.nza, 0, debug-location !1700 :: (dereferenceable load 4 from %ir.nza); cg.c:785:32
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 14
  Predecessors:
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(7): Data Latency=4 Reg=%121
    SU(12): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   %122:gpr32 = LDRWroX %120:gpr64common, %121:gpr64, 0, 1, debug-location !1699 :: (load 4 from %ir.arrayidx249); cg.c:785:25
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 10
  Predecessors:
    SU(6): Data Latency=4 Reg=%121
    SU(5): Data Latency=4 Reg=%120
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(9): Data Latency=4 Reg=%122
    SU(15): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(8):   %123:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1702 :: (dereferenceable load 4 from %ir.k); cg.c:785:20
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 10
  Predecessors:
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(9): Data Latency=4 Reg=%123
    SU(15): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(9):   STRWroX %122:gpr32, %120:gpr64common, %123:gpr64, 0, 1, debug-location !1703 :: (store 4 into %ir.arrayidx251); cg.c:785:23
  # preds left       : 12
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 6
  Predecessors:
    SU(7): Data Latency=4 Reg=%122
    SU(8): Ord  Latency=0 Memory
    SU(8): Data Latency=4 Reg=%123
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Data Latency=4 Reg=%120
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(15): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(13): Ord  Latency=1 Memory
    SU(10): Ord  Latency=1 Memory
  Pressure Diff      : GPR32 3
  Single Issue       : false;
SU(10):   %124:gpr32common = LDRWui %stack.19.nza, 0, debug-location !1704 :: (dereferenceable load 4 from %ir.nza); cg.c:786:19
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 18
  Height             : 5
  Predecessors:
    SU(9): Ord  Latency=1 Memory
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(11): Data Latency=4 Reg=%124
    SU(12): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(11):   %125:gpr32common = nsw ADDWri %124:gpr32common, 1, 0, debug-location !1705; cg.c:786:23
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 1
  Predecessors:
    SU(10): Data Latency=4 Reg=%124
  Successors:
    SU(12): Data Latency=1 Reg=%125
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   STRWui %125:gpr32common, %stack.19.nza, 0, debug-location !1706 :: (store 4 into %ir.nza); cg.c:786:17
  # preds left       : 8
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 23
  Height             : 0
  Predecessors:
    SU(11): Data Latency=1 Reg=%125
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(13):   %126:gpr32common = LDRWui %stack.20.k, 0, debug-location !1707 :: (dereferenceable load 4 from %ir.k); cg.c:783:31
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 18
  Height             : 5
  Predecessors:
    SU(9): Ord  Latency=1 Memory
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(14): Data Latency=4 Reg=%126
    SU(15): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(14):   %127:gpr32common = nsw ADDWri %126:gpr32common, 1, 0, debug-location !1707; cg.c:783:31
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 1
  Predecessors:
    SU(13): Data Latency=4 Reg=%126
  Successors:
    SU(15): Data Latency=1 Reg=%127
  Pressure Diff      : 
  Single Issue       : false;
SU(15):   STRWui %127:gpr32common, %stack.20.k, 0, debug-location !1707 :: (store 4 into %ir.k); cg.c:783:31
  # preds left       : 8
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 23
  Height             : 0
  Predecessors:
    SU(14): Data Latency=1 Reg=%127
    SU(13): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.57, debug-location !1708; cg.c:783:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 23
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 12 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
Picking from Bot:
  Cand SU(15) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) STRWui %127:gpr32common, %stack.20.k, 0, debug-location !1707 :: (store 4 into %ir.k); cg.c:783:31
Bottom Pressure:
GPR32=2
  LiveReg: %127
  UpdateRegP: SU(15) STRWui %127:gpr32common, %stack.20.k, 0, debug-location !1707 :: (store 4 into %ir.k); cg.c:783:31
              to 
  Ready @0c
  BotQ.A TopLatency SU(15) 23c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 14 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
BotQ.A RemLatency SU(12) 23c
  BotQ.A RemainingLatency 23 + 1c > CritPath 23
Picking from Bot:
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(12) STRWui %125:gpr32common, %stack.19.nza, 0, debug-location !1706 :: (store 4 into %ir.nza); cg.c:786:17
Bottom Pressure:
GPR32=3
  LiveReg: %125
  UpdateRegP: SU(12) STRWui %125:gpr32common, %stack.19.nza, 0, debug-location !1706 :: (store 4 into %ir.nza); cg.c:786:17
              to 
  Ready @1c
  BotQ.A TopLatency SU(12) 23c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 11 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
BotQ.A RemLatency SU(14) 22c
  BotQ.A RemainingLatency 22 + 2c > CritPath 23
Picking from Bot:
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(14) %127:gpr32common = nsw ADDWri %126:gpr32common, 1, 0, debug-location !1707; cg.c:783:31
Bottom Pressure:
GPR32=3
  LiveReg: %126
  UpdateRegP: SU(14) %127:gpr32common = nsw ADDWri %126:gpr32common, 1, 0, debug-location !1707; cg.c:783:31
              to GPR32 -1
  Ready @2c
  BotQ.A BotLatency SU(14) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 13 
Queue BotQ.A: 11 
Pick Bot ONLY1     
Scheduling SU(11) %125:gpr32common = nsw ADDWri %124:gpr32common, 1, 0, debug-location !1705; cg.c:786:23
Bottom Pressure:
GPR32=3
  LiveReg: %124
  UpdateRegP: SU(11) %125:gpr32common = nsw ADDWri %124:gpr32common, 1, 0, debug-location !1705; cg.c:786:23
              to GPR32 -1
  Ready @3c
  BotQ.A TopLatency SU(11) 22c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 10 
Queue BotQ.A: 13 
Pick Bot ONLY1     
Scheduling SU(13) %126:gpr32common = LDRWui %stack.20.k, 0, debug-location !1707 :: (dereferenceable load 4 from %ir.k); cg.c:783:31
Bottom Pressure:
GPR32=2
  Ready @6c
  BotQ.A BotLatency SU(13) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 
Pick Bot ONLY1     
Scheduling SU(10) %124:gpr32common = LDRWui %stack.19.nza, 0, debug-location !1704 :: (dereferenceable load 4 from %ir.nza); cg.c:786:19
Bottom Pressure:
GPR32=1
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Pick Bot ONLY1     
Scheduling SU(9) STRWroX %122:gpr32, %120:gpr64common, %123:gpr64, 0, 1, debug-location !1703 :: (store 4 into %ir.arrayidx251); cg.c:785:23
Bottom Pressure:
GPR32=4
  LiveReg: %122
  UpdateRegP: SU(9) STRWroX %122:gpr32, %120:gpr64common, %123:gpr64, 0, 1, debug-location !1703 :: (store 4 into %ir.arrayidx251); cg.c:785:23
              to GPR32 2
  LiveReg: %120
  UpdateRegP: SU(7) %122:gpr32 = LDRWroX %120:gpr64common, %121:gpr64, 0, 1, debug-location !1699 :: (load 4 from %ir.arrayidx249); cg.c:785:25
              to 
  UpdateRegP: SU(9) STRWroX %122:gpr32, %120:gpr64common, %123:gpr64, 0, 1, debug-location !1703 :: (store 4 into %ir.arrayidx251); cg.c:785:23
              to GPR32 1
  LiveReg: %123
  UpdateRegP: SU(9) STRWroX %122:gpr32, %120:gpr64common, %123:gpr64, 0, 1, debug-location !1703 :: (store 4 into %ir.arrayidx251); cg.c:785:23
              to 
  Ready @8c
  BotQ.A BotLatency SU(9) 6c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 12 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 8 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
BotQ.A RemLatency SU(7) 13c
  BotQ.A RemainingLatency 13 + 12c > CritPath 23
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(7) BOT-PATH                  13 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(7) %122:gpr32 = LDRWroX %120:gpr64common, %121:gpr64, 0, 1, debug-location !1699 :: (load 4 from %ir.arrayidx249); cg.c:785:25
Bottom Pressure:
GPR32=4
  LiveReg: %121
  UpdateRegP: SU(7) %122:gpr32 = LDRWroX %120:gpr64common, %121:gpr64, 0, 1, debug-location !1699 :: (load 4 from %ir.arrayidx249); cg.c:785:25
              to GPR32 -1
  Ready @12c
  BotQ.A BotLatency SU(7) 10c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 8
  Executed: 13c
  Critical: 8c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 5 
Queue BotQ.A: 8 
Pick Bot ONLY1     
Scheduling SU(8) %123:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1702 :: (dereferenceable load 4 from %ir.k); cg.c:785:20
Bottom Pressure:
GPR32=3
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 9
  Executed: 14c
  Critical: 9c, 9 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 16 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 6 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
BotQ.A RemLatency SU(6) 9c
  BotQ.A RemainingLatency 9 + 16c > CritPath 23
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %121:gpr64 = LDRSWui %stack.19.nza, 0, debug-location !1700 :: (dereferenceable load 4 from %ir.nza); cg.c:785:32
Bottom Pressure:
GPR32=2
  Ready @16c
  BotQ.A BotLatency SU(6) 14c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 10
  Executed: 17c
  Critical: 10c, 10 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %120:gpr64common = LDRXui %336:gpr64sp, 0, debug-location !1699 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:785:25
Bottom Pressure:
GPR32=1
  Ready @17c
  BotQ.A TopLatency SU(5) 9c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 11
  Executed: 18c
  Critical: 11c, 11 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) STRDroX %118:fpr64, %116:gpr64common, %119:gpr64, 0, 1, debug-location !1698 :: (store 8 into %ir.arrayidx247); cg.c:784:18
Bottom Pressure:
FPR8=1
GPR32=3
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %118
  UpdateRegP: SU(4) STRDroX %118:fpr64, %116:gpr64common, %119:gpr64, 0, 1, debug-location !1698 :: (store 8 into %ir.arrayidx247); cg.c:784:18
              to GPR32 2
  LiveReg: %116
  UpdateRegP: SU(2) %118:fpr64 = LDRDroX %116:gpr64common, %117:gpr64, 0, 1, debug-location !1693 :: (load 8 from %ir.arrayidx245); cg.c:784:20
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(4) STRDroX %118:fpr64, %116:gpr64common, %119:gpr64, 0, 1, debug-location !1698 :: (store 8 into %ir.arrayidx247); cg.c:784:18
              to GPR32 1
  LiveReg: %119
  UpdateRegP: SU(4) STRDroX %118:fpr64, %116:gpr64common, %119:gpr64, 0, 1, debug-location !1698 :: (store 8 into %ir.arrayidx247); cg.c:784:18
              to 
  Ready @18c
  BotQ.A BotLatency SU(4) 15c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 12
  Executed: 19c
  Critical: 12c, 12 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 22 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
BotQ.A RemLatency SU(2) 4c
  BotQ.A RemainingLatency 4 + 22c > CritPath 23
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(2) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) %118:fpr64 = LDRDroX %116:gpr64common, %117:gpr64, 0, 1, debug-location !1693 :: (load 8 from %ir.arrayidx245); cg.c:784:20
Bottom Pressure:
GPR32=4
  LiveReg: %117
  UpdateRegP: SU(2) %118:fpr64 = LDRDroX %116:gpr64common, %117:gpr64, 0, 1, debug-location !1693 :: (load 8 from %ir.arrayidx245); cg.c:784:20
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @22c
  BotQ.A BotLatency SU(2) 19c
  *** Max MOps 1 at cycle 22
Cycle: 23 BotQ.A
BotQ.A @23c
  Retired: 13
  Executed: 23c
  Critical: 13c, 13 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %119:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1697 :: (dereferenceable load 4 from %ir.k); cg.c:784:15
Bottom Pressure:
GPR32=3
  Ready @23c
  *** Max MOps 1 at cycle 23
Cycle: 24 BotQ.A
BotQ.A @24c
  Retired: 14
  Executed: 24c
  Critical: 14c, 14 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 26 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 26c > CritPath 23
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %117:gpr64 = LDRSWui %stack.19.nza, 0, debug-location !1695 :: (dereferenceable load 4 from %ir.nza); cg.c:784:22
Bottom Pressure:
GPR32=2
  Ready @26c
  BotQ.A BotLatency SU(1) 23c
  *** Max MOps 1 at cycle 26
Cycle: 27 BotQ.A
BotQ.A @27c
  Retired: 15
  Executed: 27c
  Critical: 15c, 15 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %116:gpr64common = LDRXui %336:gpr64sp, 1, debug-location !1693 :: (dereferenceable load 8 from %ir.a.addr); cg.c:784:20
Bottom Pressure:
GPR32=1
  Ready @27c
  *** Max MOps 1 at cycle 27
Cycle: 28 BotQ.A
BotQ.A @28c
  Retired: 16
  Executed: 28c
  Critical: 16c, 16 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.58 ***
SU(0):   %116:gpr64common = LDRXui %336:gpr64sp, 1, debug-location !1693 :: (dereferenceable load 8 from %ir.a.addr); cg.c:784:20
SU(1):   %117:gpr64 = LDRSWui %stack.19.nza, 0, debug-location !1695 :: (dereferenceable load 4 from %ir.nza); cg.c:784:22
SU(3):   %119:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1697 :: (dereferenceable load 4 from %ir.k); cg.c:784:15
SU(2):   %118:fpr64 = LDRDroX %116:gpr64common, %117:gpr64, 0, 1, debug-location !1693 :: (load 8 from %ir.arrayidx245); cg.c:784:20
SU(4):   STRDroX %118:fpr64, %116:gpr64common, %119:gpr64, 0, 1, debug-location !1698 :: (store 8 into %ir.arrayidx247); cg.c:784:18
SU(5):   %120:gpr64common = LDRXui %336:gpr64sp, 0, debug-location !1699 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:785:25
SU(6):   %121:gpr64 = LDRSWui %stack.19.nza, 0, debug-location !1700 :: (dereferenceable load 4 from %ir.nza); cg.c:785:32
SU(8):   %123:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1702 :: (dereferenceable load 4 from %ir.k); cg.c:785:20
SU(7):   %122:gpr32 = LDRWroX %120:gpr64common, %121:gpr64, 0, 1, debug-location !1699 :: (load 4 from %ir.arrayidx249); cg.c:785:25
SU(9):   STRWroX %122:gpr32, %120:gpr64common, %123:gpr64, 0, 1, debug-location !1703 :: (store 4 into %ir.arrayidx251); cg.c:785:23
SU(10):   %124:gpr32common = LDRWui %stack.19.nza, 0, debug-location !1704 :: (dereferenceable load 4 from %ir.nza); cg.c:786:19
SU(13):   %126:gpr32common = LDRWui %stack.20.k, 0, debug-location !1707 :: (dereferenceable load 4 from %ir.k); cg.c:783:31
SU(11):   %125:gpr32common = nsw ADDWri %124:gpr32common, 1, 0, debug-location !1705; cg.c:786:23
SU(14):   %127:gpr32common = nsw ADDWri %126:gpr32common, 1, 0, debug-location !1707; cg.c:783:31
SU(12):   STRWui %125:gpr32common, %stack.19.nza, 0, debug-location !1706 :: (store 4 into %ir.nza); cg.c:786:17
SU(15):   STRWui %127:gpr32common, %stack.20.k, 0, debug-location !1707 :: (store 4 into %ir.k); cg.c:783:31

********** MI Scheduling **********
sparse:%bb.59 for.inc256
  From: %114:gpr32common = LDRWui %stack.16.j, 0, debug-location !1711 :: (dereferenceable load 4 from %ir.j); cg.c:774:29
    To: B %bb.52, debug-location !1712; cg.c:774:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %114:gpr32common = LDRWui %stack.16.j, 0, debug-location !1711 :: (dereferenceable load 4 from %ir.j); cg.c:774:29
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%114
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %115:gpr32common = nsw ADDWri %114:gpr32common, 1, 0, debug-location !1711; cg.c:774:29
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%114
  Successors:
    SU(2): Data Latency=1 Reg=%115
  Single Issue       : false;
SU(2):   STRWui %115:gpr32common, %stack.16.j, 0, debug-location !1711 :: (store 4 into %ir.j); cg.c:774:29
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%115
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.52, debug-location !1712; cg.c:774:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %115:gpr32common, %stack.16.j, 0, debug-location !1711 :: (store 4 into %ir.j); cg.c:774:29
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %115:gpr32common = nsw ADDWri %114:gpr32common, 1, 0, debug-location !1711; cg.c:774:29
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %114:gpr32common = LDRWui %stack.16.j, 0, debug-location !1711 :: (dereferenceable load 4 from %ir.j); cg.c:774:29
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.59 ***
SU(0):   %114:gpr32common = LDRWui %stack.16.j, 0, debug-location !1711 :: (dereferenceable load 4 from %ir.j); cg.c:774:29
SU(1):   %115:gpr32common = nsw ADDWri %114:gpr32common, 1, 0, debug-location !1711; cg.c:774:29
SU(2):   STRWui %115:gpr32common, %stack.16.j, 0, debug-location !1711 :: (store 4 into %ir.j); cg.c:774:29

********** MI Scheduling **********
sparse:%bb.60 for.end258
  From: %71:gpr32 = MOVi32imm 1
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %71:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%71
  Single Issue       : false;
SU(1):   STRWui %71:gpr32, %stack.16.j, 0, debug-location !1715 :: (store 4 into %ir.j); cg.c:789:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%71
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %71:gpr32, %stack.16.j, 0, debug-location !1715 :: (store 4 into %ir.j); cg.c:789:12
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %71:gpr32 = MOVi32imm 1
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.60 ***
SU(0):   %71:gpr32 = MOVi32imm 1
SU(1):   STRWui %71:gpr32, %stack.16.j, 0, debug-location !1715 :: (store 4 into %ir.j); cg.c:789:12

********** MI Scheduling **********
sparse:%bb.61 for.cond259
  From: %72:gpr32 = LDRWui %stack.16.j, 0, debug-location !1718 :: (dereferenceable load 4 from %ir.j); cg.c:789:17
    To: Bcc 10, %bb.63, implicit killed $nzcv, debug-location !1723; cg.c:789:5
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %72:gpr32 = LDRWui %stack.16.j, 0, debug-location !1718 :: (dereferenceable load 4 from %ir.j); cg.c:789:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=%72
  Single Issue       : false;
SU(1):   %73:gpr32common = LDRWui %stack.14.nrows, 0, debug-location !1720 :: (dereferenceable load 4 from %ir.nrows); cg.c:789:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Data Latency=4 Reg=%73
  Single Issue       : false;
SU(2):   %74:gpr32common = nsw ADDWri %73:gpr32common, 1, 0, debug-location !1721; cg.c:789:27
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(1): Data Latency=4 Reg=%73
  Successors:
    SU(4): Data Latency=1 Reg=%74
  Single Issue       : false;
SU(3):   %1:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1357 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(4):   dead $wzr = SUBSWrr %72:gpr32, %74:gpr32common, implicit-def $nzcv, debug-location !1723; cg.c:789:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=%74
    SU(0): Data Latency=4 Reg=%72
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.63, implicit killed $nzcv, debug-location !1723; cg.c:789:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 3 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) dead $wzr = SUBSWrr %72:gpr32, %74:gpr32common, implicit-def $nzcv, debug-location !1723; cg.c:789:5
  Ready @1c
  BotQ.A TopLatency SU(4) 5c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %74:gpr32common = nsw ADDWri %73:gpr32common, 1, 0, debug-location !1721; cg.c:789:27
  Ready @2c
  BotQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %1:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1357 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:0
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %72:gpr32 = LDRWui %stack.16.j, 0, debug-location !1718 :: (dereferenceable load 4 from %ir.j); cg.c:789:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %73:gpr32common = LDRWui %stack.14.nrows, 0, debug-location !1720 :: (dereferenceable load 4 from %ir.nrows); cg.c:789:21
  Ready @6c
  BotQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.61 ***
SU(1):   %73:gpr32common = LDRWui %stack.14.nrows, 0, debug-location !1720 :: (dereferenceable load 4 from %ir.nrows); cg.c:789:21
SU(0):   %72:gpr32 = LDRWui %stack.16.j, 0, debug-location !1718 :: (dereferenceable load 4 from %ir.j); cg.c:789:17
SU(3):   %1:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1357 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:0
SU(2):   %74:gpr32common = nsw ADDWri %73:gpr32common, 1, 0, debug-location !1721; cg.c:789:27
SU(4):   dead $wzr = SUBSWrr %72:gpr32, %74:gpr32common, implicit-def $nzcv, debug-location !1723; cg.c:789:5

********** MI Scheduling **********
sparse:%bb.62 for.body263
  From: %80:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1724 :: (dereferenceable load 4 from %ir.j); cg.c:790:28
    To: B %bb.61, debug-location !1735; cg.c:789:5
 RegionInstrs: 12
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %80:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1724 :: (dereferenceable load 4 from %ir.j); cg.c:790:28
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 17
  Successors:
    SU(1): Data Latency=4 Reg=%80
    SU(11): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %81:gpr64 = UBFMXri %80:gpr64, 62, 61, debug-location !1726; cg.c:790:21
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 13
  Predecessors:
    SU(0): Data Latency=4 Reg=%80
  Successors:
    SU(8): Data Latency=1 Reg=%81
    SU(4): Data Latency=1 Reg=%81
    SU(2): Data Latency=1 Reg=%81
  Single Issue       : false;
SU(2):   %82:gpr32 = LDRWroX %1:gpr64common, %81:gpr64, 0, 0, debug-location !1726 :: (load 4 from %ir.arrayidx265); cg.c:790:21
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 11
  Predecessors:
    SU(1): Data Latency=1 Reg=%81
  Successors:
    SU(6): Data Latency=4 Reg=%82
    SU(11): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   %83:gpr64 = LDRXui %fixed-stack.0, 0, debug-location !1727 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:790:33
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(4): Data Latency=4 Reg=%83
    SU(8): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   %84:gpr64common = ADDXrr %81:gpr64, %83:gpr64, debug-location !1727; cg.c:790:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 12
  Predecessors:
    SU(1): Data Latency=1 Reg=%81
    SU(3): Data Latency=4 Reg=%83
  Successors:
    SU(5): Data Latency=1 Reg=%84
  Single Issue       : false;
SU(5):   %85:gpr32 = LDURWi %84:gpr64common, -4, debug-location !1727 :: (load 4 from %ir.arrayidx268); cg.c:790:33
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 11
  Predecessors:
    SU(4): Data Latency=1 Reg=%84
  Successors:
    SU(6): Data Latency=4 Reg=%85
    SU(11): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
  Single Issue       : false;
SU(6):   %86:gpr32 = nsw SUBWrr %82:gpr32, %85:gpr32, debug-location !1730; cg.c:790:31
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 7
  Predecessors:
    SU(5): Data Latency=4 Reg=%85
    SU(2): Data Latency=4 Reg=%82
  Successors:
    SU(8): Data Latency=1 Reg=%86
  Single Issue       : false;
SU(7):   %87:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1731 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:790:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(8): Data Latency=4 Reg=%87
    SU(8): Ord  Latency=0 Memory
  Single Issue       : false;
SU(8):   STRWroX %86:gpr32, %87:gpr64common, %81:gpr64, 0, 0, debug-location !1733 :: (store 4 into %ir.arrayidx271); cg.c:790:19
  # preds left       : 8
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 6
  Predecessors:
    SU(1): Data Latency=1 Reg=%81
    SU(7): Ord  Latency=0 Memory
    SU(6): Data Latency=1 Reg=%86
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(7): Data Latency=4 Reg=%87
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=1 Memory
  Single Issue       : false;
SU(9):   %88:gpr32common = LDRWui %stack.16.j, 0, debug-location !1734 :: (dereferenceable load 4 from %ir.j); cg.c:789:33
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 5
  Predecessors:
    SU(8): Ord  Latency=1 Memory
  Successors:
    SU(10): Data Latency=4 Reg=%88
    SU(11): Ord  Latency=0 Memory
  Single Issue       : false;
SU(10):   %89:gpr32common = nsw ADDWri %88:gpr32common, 1, 0, debug-location !1734; cg.c:789:33
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 1
  Predecessors:
    SU(9): Data Latency=4 Reg=%88
  Successors:
    SU(11): Data Latency=1 Reg=%89
  Single Issue       : false;
SU(11):   STRWui %89:gpr32common, %stack.16.j, 0, debug-location !1734 :: (store 4 into %ir.j); cg.c:789:33
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%89
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.61, debug-location !1735; cg.c:789:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 17
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 
Pick Bot ONLY1     
Scheduling SU(11) STRWui %89:gpr32common, %stack.16.j, 0, debug-location !1734 :: (store 4 into %ir.j); cg.c:789:33
  Ready @0c
  BotQ.A TopLatency SU(11) 17c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 
Pick Bot ONLY1     
Scheduling SU(10) %89:gpr32common = nsw ADDWri %88:gpr32common, 1, 0, debug-location !1734; cg.c:789:33
  Ready @1c
  BotQ.A BotLatency SU(10) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 9 
Pick Bot ONLY1     
Scheduling SU(9) %88:gpr32common = LDRWui %stack.16.j, 0, debug-location !1734 :: (dereferenceable load 4 from %ir.j); cg.c:789:33
  Ready @5c
  BotQ.A BotLatency SU(9) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Pick Bot ONLY1     
Scheduling SU(8) STRWroX %86:gpr32, %87:gpr64common, %81:gpr64, 0, 0, debug-location !1733 :: (store 4 into %ir.arrayidx271); cg.c:790:19
  Ready @6c
  BotQ.A BotLatency SU(8) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %86:gpr32 = nsw SUBWrr %82:gpr32, %85:gpr32, debug-location !1730; cg.c:790:31
  Ready @7c
  BotQ.A BotLatency SU(6) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 2 5 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) %87:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1731 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:790:9
  Ready @10c
  BotQ.A BotLatency SU(7) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 6
  Executed: 11c
  Critical: 6c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 5 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
BotQ.A RemLatency SU(5) 6c
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %85:gpr32 = LDURWi %84:gpr64common, -4, debug-location !1727 :: (load 4 from %ir.arrayidx268); cg.c:790:33
  Ready @11c
  BotQ.A BotLatency SU(5) 11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 7
  Executed: 12c
  Critical: 7c, 7 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
BotQ.A RemLatency SU(2) 5c
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %84:gpr64common = ADDXrr %81:gpr64, %83:gpr64, debug-location !1727; cg.c:790:33
  Ready @12c
  BotQ.A BotLatency SU(4) 12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 8
  Executed: 13c
  Critical: 8c, 8 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %82:gpr32 = LDRWroX %1:gpr64common, %81:gpr64, 0, 0, debug-location !1726 :: (load 4 from %ir.arrayidx265); cg.c:790:21
  Ready @13c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 9
  Executed: 14c
  Critical: 9c, 9 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %81:gpr64 = UBFMXri %80:gpr64, 62, 61, debug-location !1726; cg.c:790:21
  Ready @14c
  BotQ.A BotLatency SU(1) 13c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 10
  Executed: 15c
  Critical: 10c, 10 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 16 BotQ.A
Queue BotQ.P: 0 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %83:gpr64 = LDRXui %fixed-stack.0, 0, debug-location !1727 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:790:33
  Ready @16c
  BotQ.A BotLatency SU(3) 16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 11
  Executed: 17c
  Critical: 11c, 11 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 18 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %80:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1724 :: (dereferenceable load 4 from %ir.j); cg.c:790:28
  Ready @18c
  BotQ.A BotLatency SU(0) 17c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 12
  Executed: 19c
  Critical: 12c, 12 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.62 ***
SU(0):   %80:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1724 :: (dereferenceable load 4 from %ir.j); cg.c:790:28
SU(3):   %83:gpr64 = LDRXui %fixed-stack.0, 0, debug-location !1727 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:790:33
SU(1):   %81:gpr64 = UBFMXri %80:gpr64, 62, 61, debug-location !1726; cg.c:790:21
SU(2):   %82:gpr32 = LDRWroX %1:gpr64common, %81:gpr64, 0, 0, debug-location !1726 :: (load 4 from %ir.arrayidx265); cg.c:790:21
SU(4):   %84:gpr64common = ADDXrr %81:gpr64, %83:gpr64, debug-location !1727; cg.c:790:33
SU(5):   %85:gpr32 = LDURWi %84:gpr64common, -4, debug-location !1727 :: (load 4 from %ir.arrayidx268); cg.c:790:33
SU(7):   %87:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1731 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:790:9
SU(6):   %86:gpr32 = nsw SUBWrr %82:gpr32, %85:gpr32, debug-location !1730; cg.c:790:31
SU(8):   STRWroX %86:gpr32, %87:gpr64common, %81:gpr64, 0, 0, debug-location !1733 :: (store 4 into %ir.arrayidx271); cg.c:790:19
SU(9):   %88:gpr32common = LDRWui %stack.16.j, 0, debug-location !1734 :: (dereferenceable load 4 from %ir.j); cg.c:789:33
SU(10):   %89:gpr32common = nsw ADDWri %88:gpr32common, 1, 0, debug-location !1734; cg.c:789:33
SU(11):   STRWui %89:gpr32common, %stack.16.j, 0, debug-location !1734 :: (store 4 into %ir.j); cg.c:789:33

********** MI Scheduling **********
sparse:%bb.63 for.end274
  From: %77:gpr64 = LDRSWui %stack.14.nrows, 0, debug-location !1738 :: (dereferenceable load 4 from %ir.nrows); cg.c:792:18
    To: RET_ReallyLR debug-location !1742; cg.c:793:1
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %77:gpr64 = LDRSWui %stack.14.nrows, 0, debug-location !1738 :: (dereferenceable load 4 from %ir.nrows); cg.c:792:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%77
  Single Issue       : false;
SU(1):   %78:gpr32common = LDRWroX %1:gpr64common, %77:gpr64, 0, 1, debug-location !1739 :: (load 4 from %ir.arrayidx276); cg.c:792:11
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%77
  Successors:
    SU(2): Data Latency=4 Reg=%78
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %79:gpr32common = SUBWri %78:gpr32common, 1, 0, debug-location !1740; cg.c:792:25
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%78
  Successors:
    SU(3): Data Latency=1 Reg=%79
  Single Issue       : false;
SU(3):   STRWui %79:gpr32common, %stack.19.nza, 0, debug-location !1741 :: (store 4 into %ir.nza); cg.c:792:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%79
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   RET_ReallyLR debug-location !1742; cg.c:793:1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) STRWui %79:gpr32common, %stack.19.nza, 0, debug-location !1741 :: (store 4 into %ir.nza); cg.c:792:9
  Ready @0c
  BotQ.A TopLatency SU(3) 9c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %79:gpr32common = SUBWri %78:gpr32common, 1, 0, debug-location !1740; cg.c:792:25
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %78:gpr32common = LDRWroX %1:gpr64common, %77:gpr64, 0, 1, debug-location !1739 :: (load 4 from %ir.arrayidx276); cg.c:792:11
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 9 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %77:gpr64 = LDRSWui %stack.14.nrows, 0, debug-location !1738 :: (dereferenceable load 4 from %ir.nrows); cg.c:792:18
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 4
  Executed: 10c
  Critical: 4c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.63 ***
SU(0):   %77:gpr64 = LDRSWui %stack.14.nrows, 0, debug-location !1738 :: (dereferenceable load 4 from %ir.nrows); cg.c:792:18
SU(1):   %78:gpr32common = LDRWroX %1:gpr64common, %77:gpr64, 0, 1, debug-location !1739 :: (load 4 from %ir.arrayidx276); cg.c:792:11
SU(2):   %79:gpr32common = SUBWri %78:gpr32common, 1, 0, debug-location !1740; cg.c:792:25
SU(3):   STRWui %79:gpr32common, %stack.19.nza, 0, debug-location !1741 :: (store 4 into %ir.nza); cg.c:792:9

********** INTERVALS **********
B0 [0B,12r:0)[3216r,3248r:2)[3248r,3280r:1)  0@0B-phi 1@3248r 2@3216r
B1 [0B,8r:0)[3232r,3248r:1)  0@0B-phi 1@3232r
W0 [0B,60r:0)[2112r,2128r:6)[2128r,2128d:3)[2224r,2272r:5)[2272r,2272d:2)[6400r,6432r:4)[6432r,6432d:1)  0@0B-phi 1@6432r 2@2272r 3@2128r 4@6400r 5@2224r 6@2112r
W1 [0B,56r:0)[2240r,2272r:2)[6416r,6432r:1)  0@0B-phi 1@6416r 2@2240r
W2 [0B,48r:0)[2256r,2272r:1)  0@0B-phi 1@2256r
W3 [0B,44r:0)  0@0B-phi
W4 [0B,36r:0)  0@0B-phi
W5 [0B,32r:0)  0@0B-phi
W6 [0B,24r:0)  0@0B-phi
W7 [0B,20r:0)  0@0B-phi
%0 [1632r,1784r:0)[1920B,1952r:0)  0@1632r weight:0.000000e+00
%1 [8464r,8616r:0)[8768B,8800r:0)  0@8464r weight:0.000000e+00
%2 [60r,392r:0)  0@60r weight:0.000000e+00
%3 [56r,384r:0)  0@56r weight:0.000000e+00
%4 [48r,224r:0)  0@48r weight:0.000000e+00
%5 [44r,240r:0)  0@44r weight:0.000000e+00
%6 [36r,256r:0)  0@36r weight:0.000000e+00
%7 [32r,272r:0)  0@32r weight:0.000000e+00
%8 [24r,288r:0)  0@24r weight:0.000000e+00
%9 [20r,304r:0)  0@20r weight:0.000000e+00
%10 [12r,320r:0)  0@12r weight:0.000000e+00
%11 [8r,376r:0)  0@8r weight:0.000000e+00
%12 [352r,400r:0)  0@352r weight:0.000000e+00
%13 [368r,400r:0)  0@368r weight:0.000000e+00
%14 [400r,408r:0)  0@400r weight:0.000000e+00
%15 [408r,416r:0)  0@408r weight:0.000000e+00
%17 [504r,528r:0)  0@504r weight:0.000000e+00
%18 [496r,512r:0)  0@496r weight:0.000000e+00
%19 [512r,528r:0)  0@512r weight:0.000000e+00
%22 [816r,848r:0)  0@816r weight:0.000000e+00
%23 [832r,848r:0)  0@832r weight:0.000000e+00
%25 [1488r,1544r:0)  0@1488r weight:0.000000e+00
%27 [1536r,1552r:0)  0@1536r weight:0.000000e+00
%28 [1608r,1664r:0)  0@1608r weight:0.000000e+00
%29 [1600r,1640r:0)  0@1600r weight:0.000000e+00
%30 [1640r,1664r:0)  0@1640r weight:0.000000e+00
%33 [1936r,1952r:0)  0@1936r weight:0.000000e+00
%34 [1952r,2008r:0)  0@1952r weight:0.000000e+00
%35 [2008r,2024r:0)  0@2008r weight:0.000000e+00
%36 [2000r,2016r:0)  0@2000r weight:0.000000e+00
%38 [2096r,2112r:0)  0@2096r weight:0.000000e+00
%40 [2160r,2240r:0)  0@2160r weight:0.000000e+00
%41 [2176r,2256r:0)  0@2176r weight:0.000000e+00
%42 [2208r,2224r:0)  0@2208r weight:0.000000e+00
%45 [2384r,2416r:0)  0@2384r weight:0.000000e+00
%46 [2400r,2416r:0)  0@2400r weight:0.000000e+00
%48 [3096r,3112r:0)  0@3096r weight:0.000000e+00
%49 [3104r,3216r:0)  0@3104r weight:0.000000e+00
%51 [3088r,3128r:0)  0@3088r weight:0.000000e+00
%53 [3128r,3152r:0)  0@3128r weight:0.000000e+00
%55 [3152r,3184r:0)  0@3152r weight:0.000000e+00
%56 [3168r,3184r:0)  0@3168r weight:0.000000e+00
%57 [3184r,3232r:0)  0@3184r weight:0.000000e+00
%58 [3280r,3296r:0)  0@3280r weight:0.000000e+00
%60 [3456r,3488r:0)  0@3456r weight:0.000000e+00
%61 [3472r,3488r:0)  0@3472r weight:0.000000e+00
%63 [6896r,6912r:0)  0@6896r weight:0.000000e+00
%64 [6944r,6976r:0)  0@6944r weight:0.000000e+00
%65 [6960r,6976r:0)  0@6960r weight:0.000000e+00
%68 [7280r,7312r:0)  0@7280r weight:0.000000e+00
%69 [7296r,7312r:0)  0@7296r weight:0.000000e+00
%71 [8368r,8384r:0)  0@8368r weight:0.000000e+00
%72 [8440r,8496r:0)  0@8440r weight:0.000000e+00
%73 [8432r,8472r:0)  0@8432r weight:0.000000e+00
%74 [8472r,8496r:0)  0@8472r weight:0.000000e+00
%77 [8784r,8800r:0)  0@8784r weight:0.000000e+00
%78 [8800r,8816r:0)  0@8800r weight:0.000000e+00
%79 [8816r,8832r:0)  0@8816r weight:0.000000e+00
%80 [8560r,8612r:0)  0@8560r weight:0.000000e+00
%81 [8612r,8688r:0)  0@8612r weight:0.000000e+00
%82 [8616r,8680r:0)  0@8616r weight:0.000000e+00
%83 [8608r,8624r:0)  0@8608r weight:0.000000e+00
%84 [8624r,8640r:0)  0@8624r weight:0.000000e+00
%85 [8640r,8680r:0)  0@8640r weight:0.000000e+00
%86 [8680r,8688r:0)  0@8680r weight:0.000000e+00
%87 [8672r,8688r:0)  0@8672r weight:0.000000e+00
%88 [8704r,8720r:0)  0@8704r weight:0.000000e+00
%89 [8720r,8736r:0)  0@8720r weight:0.000000e+00
%90 [7376r,7392r:0)  0@7376r weight:0.000000e+00
%93 [7480r,7528r:0)  0@7480r weight:0.000000e+00
%94 [7472r,7524r:0)  0@7472r weight:0.000000e+00
%95 [7524r,7536r:0)  0@7524r weight:0.000000e+00
%96 [7528r,7568r:0)  0@7528r weight:0.000000e+00
%97 [7520r,7536r:0)  0@7520r weight:0.000000e+00
%98 [7536r,7552r:0)  0@7536r weight:0.000000e+00
%99 [7552r,7568r:0)  0@7552r weight:0.000000e+00
%100 [7568r,7584r:0)  0@7568r weight:0.000000e+00
%101 [7704r,7768r:0)  0@7704r weight:0.000000e+00
%102 [7696r,7764r:0)  0@7696r weight:0.000000e+00
%103 [7764r,7776r:0)  0@7764r weight:0.000000e+00
%104 [7768r,7824r:0)  0@7768r weight:0.000000e+00
%105 [7784r,7792r:0)  0@7784r weight:0.000000e+00
%106 [7760r,7776r:0)  0@7760r weight:0.000000e+00
%107 [7776r,7792r:0)  0@7776r weight:0.000000e+00
%108 [7792r,7808r:0)  0@7792r weight:0.000000e+00
%109 [7824r,7864r:0)  0@7824r weight:0.000000e+00
%110 [7856r,7872r:0)  0@7856r weight:0.000000e+00
%111 [7904r,7936r:0)  0@7904r weight:0.000000e+00
%112 [7920r,7936r:0)  0@7920r weight:0.000000e+00
%114 [8288r,8304r:0)  0@8288r weight:0.000000e+00
%115 [8304r,8320r:0)  0@8304r weight:0.000000e+00
%116 [8000r,8064r:0)  0@8000r weight:0.000000e+00
%117 [8016r,8056r:0)  0@8016r weight:0.000000e+00
%118 [8056r,8064r:0)  0@8056r weight:0.000000e+00
%119 [8048r,8064r:0)  0@8048r weight:0.000000e+00
%120 [8080r,8144r:0)  0@8080r weight:0.000000e+00
%121 [8096r,8136r:0)  0@8096r weight:0.000000e+00
%122 [8136r,8144r:0)  0@8136r weight:0.000000e+00
%123 [8128r,8144r:0)  0@8128r weight:0.000000e+00
%124 [8160r,8216r:0)  0@8160r weight:0.000000e+00
%125 [8216r,8232r:0)  0@8216r weight:0.000000e+00
%126 [8208r,8224r:0)  0@8208r weight:0.000000e+00
%127 [8224r,8240r:0)  0@8224r weight:0.000000e+00
%128 [7040r,7072r:0)  0@7040r weight:0.000000e+00
%129 [7056r,7072r:0)  0@7056r weight:0.000000e+00
%130 [7072r,7136r:0)  0@7072r weight:0.000000e+00
%131 [7088r,7120r:0)  0@7088r weight:0.000000e+00
%132 [7104r,7120r:0)  0@7104r weight:0.000000e+00
%133 [7120r,7136r:0)  0@7120r weight:0.000000e+00
%134 [7152r,7168r:0)  0@7152r weight:0.000000e+00
%135 [7168r,7184r:0)  0@7168r weight:0.000000e+00
%137 [3640r,3664r:0)  0@3640r weight:0.000000e+00
%138 [3616r,3648r:0)  0@3616r weight:0.000000e+00
%139 [3632r,3648r:0)  0@3632r weight:0.000000e+00
%140 [3648r,3664r:0)  0@3648r weight:0.000000e+00
%142 [6752r,6824r:0)  0@6752r weight:0.000000e+00
%143 [6768r,6824r:0)  0@6768r weight:0.000000e+00
%144 [6824r,6840r:0)  0@6824r weight:0.000000e+00
%145 [6816r,6832r:0)  0@6816r weight:0.000000e+00
%146 [6832r,6848r:0)  0@6832r weight:0.000000e+00
%147 [3728r,3848r:0)  0@3728r weight:0.000000e+00
%148 [3744r,3872r:0)  0@3744r weight:0.000000e+00
%150 [3344r,6880B:0)  0@3344r weight:0.000000e+00
%152 [3848r,3856r:0)  0@3848r weight:0.000000e+00
%153 [3776r,3888r:0)  0@3776r weight:0.000000e+00
%154 [3856r,3880r:0)  0@3856r weight:0.000000e+00
%155 [3864r,3896r:0)  0@3864r weight:0.000000e+00
%156 [3840r,3872r:0)  0@3840r weight:0.000000e+00
%158 [3376r,6880B:0)  0@3376r weight:0.000000e+00
%160 [3872r,3888r:0)  0@3872r weight:0.000000e+00
%161 [3888r,3896r:0)  0@3888r weight:0.000000e+00
%162 [3896r,3904r:0)  0@3896r weight:0.000000e+00
%164 [4008r,4032r:0)  0@4008r weight:0.000000e+00
%165 [3984r,4016r:0)  0@3984r weight:0.000000e+00
%166 [4000r,4016r:0)  0@4000r weight:0.000000e+00
%167 [4016r,4032r:0)  0@4016r weight:0.000000e+00
%169 [6672r,6688r:0)  0@6672r weight:0.000000e+00
%170 [6688r,6704r:0)  0@6688r weight:0.000000e+00
%171 [4096r,4212r:0)  0@4096r weight:0.000000e+00
%172 [4112r,4280r:0)  0@4112r weight:0.000000e+00
%176 [4212r,4216r:0)  0@4212r weight:0.000000e+00
%177 [4160r,4296r:0)  0@4160r weight:0.000000e+00
%178 [4216r,4336r:0)  0@4216r weight:0.000000e+00
%179 [4208r,4280r:0)  0@4208r weight:0.000000e+00
%183 [4280r,4296r:0)  0@4280r weight:0.000000e+00
%184 [4296r,4328r:0)  0@4296r weight:0.000000e+00
%185 [4272r,4328r:0)  0@4272r weight:0.000000e+00
%186 [4328r,4344r:0)  0@4328r weight:0.000000e+00
%187 [4320r,4336r:0)  0@4320r weight:0.000000e+00
%189 [4400r,4432r:0)  0@4400r weight:0.000000e+00
%190 [4416r,4432r:0)  0@4416r weight:0.000000e+00
%192 [4496r,4552r:0)  0@4496r weight:0.000000e+00
%193 [4512r,4552r:0)  0@4512r weight:0.000000e+00
%194 [4552r,4560r:0)  0@4552r weight:0.000000e+00
%195 [4544r,4560r:0)  0@4544r weight:0.000000e+00
%196 [4560r,4576r:0)  0@4560r weight:0.000000e+00
%198 [4640r,4672r:0)  0@4640r weight:0.000000e+00
%199 [4656r,4672r:0)  0@4656r weight:0.000000e+00
%200 [4672r,4688r:0)  0@4672r weight:0.000000e+00
%201 [4760r,4800r:0)  0@4760r weight:0.000000e+00
%202 [4736r,4768r:0)  0@4736r weight:0.000000e+00
%203 [4752r,4768r:0)  0@4752r weight:0.000000e+00
%204 [4768r,4784r:0)  0@4768r weight:0.000000e+00
%205 [4784r,4800r:0)  0@4784r weight:0.000000e+00
%207 [4864r,4896r:0)  0@4864r weight:0.000000e+00
%208 [4880r,4896r:0)  0@4880r weight:0.000000e+00
%209 [4896r,4928r:0)  0@4896r weight:0.000000e+00
%210 [4912r,4928r:0)  0@4912r weight:0.000000e+00
%212 [5728r,5760r:0)  0@5728r weight:0.000000e+00
%213 [5744r,5760r:0)  0@5744r weight:0.000000e+00
%214 [5760r,5776r:0)  0@5760r weight:0.000000e+00
%216 [5952r,5984r:0)  0@5952r weight:0.000000e+00
%217 [5968r,5984r:0)  0@5968r weight:0.000000e+00
%218 [5984r,6016r:0)  0@5984r weight:0.000000e+00
%219 [6000r,6016r:0)  0@6000r weight:0.000000e+00
%221 [6224r,6240r:0)  0@6224r weight:0.000000e+00
%222 [6240r,6256r:0)  0@6240r weight:0.000000e+00
%223 [6104r,6160r:0)  0@6104r weight:0.000000e+00
%224 [6096r,6112r:0)  0@6096r weight:0.000000e+00
%225 [6112r,6160r:0)  0@6112r weight:0.000000e+00
%226 [6128r,6144r:0)  0@6128r weight:0.000000e+00
%227 [6144r,6160r:0)  0@6144r weight:0.000000e+00
%229 [5840r,5888r:0)  0@5840r weight:0.000000e+00
%230 [5856r,5888r:0)  0@5856r weight:0.000000e+00
%231 [5872r,5888r:0)  0@5872r weight:0.000000e+00
%233 [4992r,5024r:0)  0@4992r weight:0.000000e+00
%234 [5008r,5024r:0)  0@5008r weight:0.000000e+00
%235 [5024r,5040r:0)  0@5024r weight:0.000000e+00
%236 [5040r,5056r:0)  0@5040r weight:0.000000e+00
%237 [5056r,5072r:0)  0@5056r weight:0.000000e+00
%238 [5104r,5136r:0)  0@5104r weight:0.000000e+00
%239 [5120r,5136r:0)  0@5120r weight:0.000000e+00
%241 [5552r,5600r:0)  0@5552r weight:0.000000e+00
%242 [5568r,5600r:0)  0@5568r weight:0.000000e+00
%243 [5584r,5600r:0)  0@5584r weight:0.000000e+00
%244 [5616r,5664r:0)  0@5616r weight:0.000000e+00
%245 [5632r,5664r:0)  0@5632r weight:0.000000e+00
%247 [3408r,6880B:0)  0@3408r weight:0.000000e+00
%248 [6304r,6320r:0)  0@6304r weight:0.000000e+00
%249 [6368r,6416r:0)  0@6368r weight:0.000000e+00
%250 [3424r,6880B:0)  0@3424r weight:0.000000e+00
%252 [6504r,6576r:0)  0@6504r weight:0.000000e+00
%253 [6496r,6512r:0)  0@6496r weight:0.000000e+00
%254 [6512r,6576r:0)  0@6512r weight:0.000000e+00
%255 [6528r,6560r:0)  0@6528r weight:0.000000e+00
%256 [6544r,6560r:0)  0@6544r weight:0.000000e+00
%257 [6560r,6576r:0)  0@6560r weight:0.000000e+00
%258 [6592r,6608r:0)  0@6592r weight:0.000000e+00
%259 [6608r,6624r:0)  0@6608r weight:0.000000e+00
%260 [5200r,5232r:0)  0@5200r weight:0.000000e+00
%261 [5216r,5232r:0)  0@5216r weight:0.000000e+00
%262 [5232r,5248r:0)  0@5232r weight:0.000000e+00
%263 [5296r,5328r:0)  0@5296r weight:0.000000e+00
%264 [5312r,5328r:0)  0@5312r weight:0.000000e+00
%265 [5328r,5360r:0)  0@5328r weight:0.000000e+00
%266 [5344r,5360r:0)  0@5344r weight:0.000000e+00
%267 [5376r,5408r:0)  0@5376r weight:0.000000e+00
%268 [5392r,5408r:0)  0@5392r weight:0.000000e+00
%269 [5408r,5440r:0)  0@5408r weight:0.000000e+00
%270 [5424r,5440r:0)  0@5424r weight:0.000000e+00
%271 [5472r,5488r:0)  0@5472r weight:0.000000e+00
%272 [5488r,5504r:0)  0@5488r weight:0.000000e+00
%273 [2480r,2512r:0)  0@2480r weight:0.000000e+00
%274 [2496r,2512r:0)  0@2496r weight:0.000000e+00
%275 [2512r,2528r:0)  0@2512r weight:0.000000e+00
%276 [2600r,2640r:0)  0@2600r weight:0.000000e+00
%277 [2576r,2608r:0)  0@2576r weight:0.000000e+00
%278 [2592r,2608r:0)  0@2592r weight:0.000000e+00
%279 [2608r,2624r:0)  0@2608r weight:0.000000e+00
%280 [2624r,2640r:0)  0@2624r weight:0.000000e+00
%282 [2896r,2944r:0)  0@2896r weight:0.000000e+00
%283 [2912r,2944r:0)  0@2912r weight:0.000000e+00
%285 [2960r,2976r:0)  0@2960r weight:0.000000e+00
%286 [2976r,2992r:0)  0@2976r weight:0.000000e+00
%287 [2704r,2752r:0)  0@2704r weight:0.000000e+00
%288 [2720r,2752r:0)  0@2720r weight:0.000000e+00
%290 [2768r,2800r:0)  0@2768r weight:0.000000e+00
%291 [2784r,2800r:0)  0@2784r weight:0.000000e+00
%292 [2352r,3024B:0)  0@2352r weight:0.000000e+00
%293 [2816r,2832r:0)  0@2816r weight:0.000000e+00
%294 [2832r,2848r:0)  0@2832r weight:0.000000e+00
%295 [1728r,1780r:0)  0@1728r weight:0.000000e+00
%296 [1780r,1792r:0)  0@1780r weight:0.000000e+00
%297 [1784r,1824r:0)  0@1784r weight:0.000000e+00
%298 [1776r,1792r:0)  0@1776r weight:0.000000e+00
%299 [1792r,1840r:0)  0@1792r weight:0.000000e+00
%300 [1808r,1824r:0)  0@1808r weight:0.000000e+00
%301 [1824r,1840r:0)  0@1824r weight:0.000000e+00
%302 [1856r,1872r:0)  0@1856r weight:0.000000e+00
%303 [1872r,1888r:0)  0@1872r weight:0.000000e+00
%305 [1000r,1024r:0)  0@1000r weight:0.000000e+00
%306 [976r,1008r:0)  0@976r weight:0.000000e+00
%307 [992r,1008r:0)  0@992r weight:0.000000e+00
%308 [1008r,1024r:0)  0@1008r weight:0.000000e+00
%310 [1408r,1424r:0)  0@1408r weight:0.000000e+00
%311 [1424r,1440r:0)  0@1424r weight:0.000000e+00
%312 [1088r,1144r:0)  0@1088r weight:0.000000e+00
%313 [1104r,1296r:0)  0@1104r weight:0.000000e+00
%315 [768r,1472B:0)  0@768r weight:0.000000e+00
%317 [1144r,1152r:0)  0@1144r weight:0.000000e+00
%318 [1136r,1152r:0)  0@1136r weight:0.000000e+00
%319 [1152r,1268r:0)  0@1152r weight:0.000000e+00
%321 [1200r,1312r:0)  0@1200r weight:0.000000e+00
%322 [1268r,1280r:0)  0@1268r weight:0.000000e+00
%324 [1280r,1312r:0)  0@1280r weight:0.000000e+00
%325 [1288r,1304r:0)  0@1288r weight:0.000000e+00
%326 [1264r,1296r:0)  0@1264r weight:0.000000e+00
%327 [1296r,1304r:0)  0@1296r weight:0.000000e+00
%328 [1304r,1312r:0)  0@1304r weight:0.000000e+00
%329 [1328r,1344r:0)  0@1328r weight:0.000000e+00
%330 [1344r,1360r:0)  0@1344r weight:0.000000e+00
%331 [592r,640r:0)  0@592r weight:0.000000e+00
%332 [608r,640r:0)  0@608r weight:0.000000e+00
%334 [656r,672r:0)  0@656r weight:0.000000e+00
%335 [672r,688r:0)  0@672r weight:0.000000e+00
%336 [64r,8352B:0)  0@64r weight:0.000000e+00
RegMasks: 2128r 2272r 3248r 6432r
********** MACHINEINSTRS **********
# Machine code for function sparse: NoPHIs, TracksLiveness
Frame Objects:
  fi#-4: size=8, align=8, fixed, at location [SP+24]
  fi#-3: size=4, align=16, fixed, at location [SP+16]
  fi#-2: size=4, align=8, fixed, at location [SP+8]
  fi#-1: size=8, align=16, fixed, at location [SP]
  fi#0: size=8, align=8, at location [SP]
  fi#1: size=8, align=8, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
  fi#6: size=8, align=8, at location [SP]
  fi#7: size=8, align=8, at location [SP]
  fi#8: dead
  fi#9: dead
  fi#10: dead
  fi#11: dead
  fi#12: size=8, align=8, at location [SP]
  fi#13: size=8, align=8, at location [SP]
  fi#14: size=4, align=4, at location [SP]
  fi#15: size=4, align=4, at location [SP]
  fi#16: size=4, align=4, at location [SP]
  fi#17: size=4, align=4, at location [SP]
  fi#18: size=4, align=4, at location [SP]
  fi#19: size=4, align=4, at location [SP]
  fi#20: size=4, align=4, at location [SP]
  fi#21: size=4, align=4, at location [SP]
  fi#22: size=4, align=4, at location [SP]
  fi#23: size=4, align=4, at location [SP]
  fi#24: size=8, align=8, at location [SP]
  fi#25: size=8, align=8, at location [SP]
  fi#26: size=8, align=8, at location [SP]
  fi#27: size=8, align=8, at location [SP]
  fi#28: size=4, align=4, at location [SP]
Function Live Ins: $x0 in %2, $x1 in %3, $x2 in %4, $w3 in %5, $w4 in %6, $w5 in %7, $x6 in %8, $x7 in %9, $d0 in %10, $d1 in %11

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $x0, $x1, $x2, $w3, $w4, $w5, $x6, $x7, $d0, $d1
8B	  %11:fpr64 = COPY $d1
12B	  %10:fpr64 = COPY $d0
20B	  %9:gpr64 = COPY $x7
24B	  %8:gpr64 = COPY $x6
32B	  %7:gpr32 = COPY $w5
36B	  %6:gpr32 = COPY $w4
44B	  %5:gpr32 = COPY $w3
48B	  %4:gpr64 = COPY $x2
56B	  %3:gpr64 = COPY $x1
60B	  %2:gpr64 = COPY $x0
64B	  %336:gpr64sp = ADDXri %stack.1.colidx.addr, 0, 0
224B	  STRXui %4:gpr64, %stack.2.rowstr.addr, 0 :: (store 8 into %ir.rowstr.addr)
240B	  STRWui %5:gpr32, %stack.3.n.addr, 0 :: (store 4 into %ir.n.addr)
256B	  STRWui %6:gpr32, %stack.4.nz.addr, 0 :: (store 4 into %ir.nz.addr)
272B	  STRWui %7:gpr32, %stack.5.nozer.addr, 0 :: (store 4 into %ir.nozer.addr)
288B	  STRXui %8:gpr64, %stack.6.arow.addr, 0 :: (store 8 into %ir.arow.addr)
304B	  STRXui %9:gpr64, %stack.7.acol.addr, 0 :: (store 8 into %ir.acol.addr)
320B	  STRDui %10:fpr64, %stack.12.rcond.addr, 0 :: (store 8 into %ir.rcond.addr)
352B	  %12:gpr32 = LDRWui %fixed-stack.1, 0, debug-location !1285 :: (dereferenceable load 4 from %ir.lastrow.addr, align 16); cg.c:659:13
368B	  %13:gpr32 = LDRWui %fixed-stack.2, 0, debug-location !1286 :: (dereferenceable load 4 from %ir.firstrow.addr, align 8); cg.c:659:23
376B	  STRDui %11:fpr64, %stack.13.shift.addr, 0 :: (store 8 into %ir.shift.addr)
384B	  STRXui %3:gpr64, %336:gpr64sp, 0 :: (store 8 into %ir.colidx.addr)
392B	  STRXui %2:gpr64, %336:gpr64sp, 1 :: (store 8 into %ir.a.addr)
400B	  %14:gpr32common = nsw SUBWrr %12:gpr32, %13:gpr32, debug-location !1287; cg.c:659:21
408B	  %15:gpr32common = nsw ADDWri %14:gpr32common, 1, 0, debug-location !1288; cg.c:659:32
416B	  STRWui %15:gpr32common, %stack.14.nrows, 0, debug-location !1289 :: (store 4 into %ir.nrows); cg.c:659:11
448B	  STRWui $wzr, %stack.16.j, 0, debug-location !1290 :: (store 4 into %ir.j); cg.c:664:12

464B	bb.1.for.cond:
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

496B	  %18:gpr32common = LDRWui %stack.14.nrows, 0, debug-location !1295 :: (dereferenceable load 4 from %ir.nrows); cg.c:664:21
504B	  %17:gpr32 = LDRWui %stack.16.j, 0, debug-location !1293 :: (dereferenceable load 4 from %ir.j); cg.c:664:17
512B	  %19:gpr32common = nsw ADDWri %18:gpr32common, 1, 0, debug-location !1296; cg.c:664:27
528B	  dead $wzr = SUBSWrr %17:gpr32, %19:gpr32common, implicit-def $nzcv, debug-location !1298; cg.c:664:5
544B	  Bcc 10, %bb.3, implicit killed $nzcv, debug-location !1298; cg.c:664:5
560B	  B %bb.2, debug-location !1298; cg.c:664:5

576B	bb.2.for.body:
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

592B	  %331:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1299 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:665:9
608B	  %332:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1301 :: (dereferenceable load 4 from %ir.j); cg.c:665:16
640B	  STRWroX $wzr, %331:gpr64common, %332:gpr64, 0, 1, debug-location !1302 :: (store 4 into %ir.arrayidx); cg.c:665:19
656B	  %334:gpr32common = LDRWui %stack.16.j, 0, debug-location !1303 :: (dereferenceable load 4 from %ir.j); cg.c:664:33
672B	  %335:gpr32common = nsw ADDWri %334:gpr32common, 1, 0, debug-location !1303; cg.c:664:33
688B	  STRWui %335:gpr32common, %stack.16.j, 0, debug-location !1303 :: (store 4 into %ir.j); cg.c:664:33
704B	  B %bb.1, debug-location !1304; cg.c:664:5

720B	bb.3.for.end:
	; predecessors: %bb.1
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

752B	  STRWui $wzr, %stack.15.i, 0, debug-location !1307 :: (store 4 into %ir.i); cg.c:668:12
768B	  undef %315.sub_32:gpr64 = MOVi32imm 56

800B	bb.4.for.cond2:
	; predecessors: %bb.3, %bb.8
	  successors: %bb.5(0x7c000000), %bb.9(0x04000000); %bb.5(96.88%), %bb.9(3.12%)

816B	  %22:gpr32 = LDRWui %stack.15.i, 0, debug-location !1310 :: (dereferenceable load 4 from %ir.i); cg.c:668:17
832B	  %23:gpr32 = LDRWui %stack.3.n.addr, 0, debug-location !1312 :: (dereferenceable load 4 from %ir.n.addr); cg.c:668:21
848B	  dead $wzr = SUBSWrr %22:gpr32, %23:gpr32, implicit-def $nzcv, debug-location !1314; cg.c:668:5
864B	  Bcc 10, %bb.9, implicit killed $nzcv, debug-location !1314; cg.c:668:5
880B	  B %bb.5, debug-location !1314; cg.c:668:5

896B	bb.5.for.body4:
	; predecessors: %bb.4
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

928B	  STRWui $wzr, %stack.19.nza, 0, debug-location !1315 :: (store 4 into %ir.nza); cg.c:669:18

944B	bb.6.for.cond5:
	; predecessors: %bb.5, %bb.7
	  successors: %bb.7(0x7c000000), %bb.8(0x04000000); %bb.7(96.88%), %bb.8(3.12%)

976B	  %306:gpr64common = LDRXui %stack.6.arow.addr, 0, debug-location !1321 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:669:29
992B	  %307:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1322 :: (dereferenceable load 4 from %ir.i); cg.c:669:34
1000B	  %305:gpr32 = LDRWui %stack.19.nza, 0, debug-location !1319 :: (dereferenceable load 4 from %ir.nza); cg.c:669:23
1008B	  %308:gpr32 = LDRWroX %306:gpr64common, %307:gpr64, 0, 1, debug-location !1321 :: (load 4 from %ir.arrayidx7); cg.c:669:29
1024B	  dead $wzr = SUBSWrr %305:gpr32, %308:gpr32, implicit-def $nzcv, debug-location !1324; cg.c:669:9
1040B	  Bcc 10, %bb.8, implicit killed $nzcv, debug-location !1324; cg.c:669:9
1056B	  B %bb.7, debug-location !1324; cg.c:669:9

1072B	bb.7.for.body9:
	; predecessors: %bb.6
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

1088B	  %312:gpr64 = LDRXui %stack.7.acol.addr, 0, debug-location !1325 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:670:17
1104B	  %313:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1327 :: (dereferenceable load 4 from %ir.i); cg.c:670:22
1136B	  %318:gpr64 = LDRSWui %stack.19.nza, 0, debug-location !1328 :: (dereferenceable load 4 from %ir.nza); cg.c:670:25
1144B	  %317:gpr64common = MADDXrrr %313:gpr64, %315:gpr64, %312:gpr64, debug-location !1325; cg.c:670:17
1152B	  %319:gpr32common = LDRWroX %317:gpr64common, %318:gpr64, 0, 1, debug-location !1325 :: (load 4 from %ir.arrayidx13); cg.c:670:17
1200B	  %321:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1331 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:671:25
1264B	  %326:gpr64common = LDRXui %stack.6.arow.addr, 0, debug-location !1333 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:671:37
1268B	  undef %322.sub_32:gpr64common = nsw ADDWri %319:gpr32common, 1, 0, debug-location !1329; cg.c:670:30
1272B	  STRWui %322.sub_32:gpr64common, %stack.16.j, 0, debug-location !1330 :: (store 4 into %ir.j); cg.c:670:15
1280B	  %324:gpr64 = SBFMXri %322:gpr64common, 62, 31, debug-location !1331; cg.c:671:25
1288B	  %325:gpr32 = LDRWroX %321:gpr64common, %324:gpr64, 0, 0, debug-location !1331 :: (load 4 from %ir.arrayidx16); cg.c:671:25
1296B	  %327:gpr32 = LDRWroX %326:gpr64common, %313:gpr64, 0, 1, debug-location !1333 :: (load 4 from %ir.arrayidx18); cg.c:671:37
1304B	  %328:gpr32 = nsw ADDWrr %325:gpr32, %327:gpr32, debug-location !1335; cg.c:671:35
1312B	  STRWroX %328:gpr32, %321:gpr64common, %324:gpr64, 0, 0, debug-location !1338 :: (store 4 into %ir.arrayidx21); cg.c:671:23
1328B	  %329:gpr32common = LDRWui %stack.19.nza, 0, debug-location !1339 :: (dereferenceable load 4 from %ir.nza); cg.c:669:41
1344B	  %330:gpr32common = nsw ADDWri %329:gpr32common, 1, 0, debug-location !1339; cg.c:669:41
1360B	  STRWui %330:gpr32common, %stack.19.nza, 0, debug-location !1339 :: (store 4 into %ir.nza); cg.c:669:41
1376B	  B %bb.6, debug-location !1340; cg.c:669:9

1392B	bb.8.for.inc25:
	; predecessors: %bb.6
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

1408B	  %310:gpr32common = LDRWui %stack.15.i, 0, debug-location !1343 :: (dereferenceable load 4 from %ir.i); cg.c:668:25
1424B	  %311:gpr32common = nsw ADDWri %310:gpr32common, 1, 0, debug-location !1343; cg.c:668:25
1440B	  STRWui %311:gpr32common, %stack.15.i, 0, debug-location !1343 :: (store 4 into %ir.i); cg.c:668:25
1456B	  B %bb.4, debug-location !1344; cg.c:668:5

1472B	bb.9.for.end27:
	; predecessors: %bb.4
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

1488B	  %25:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1347 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:675:5
1536B	  %27:gpr32 = MOVi32imm 1
1544B	  STRWui $wzr, %25:gpr64common, 0, debug-location !1348 :: (store 4 into %ir.arrayidx281); cg.c:675:15
1552B	  STRWui %27:gpr32, %stack.16.j, 0, debug-location !1349 :: (store 4 into %ir.j); cg.c:676:12

1568B	bb.10.for.cond29:
	; predecessors: %bb.9, %bb.11
	  successors: %bb.11(0x7c000000), %bb.12(0x04000000); %bb.11(96.88%), %bb.12(3.12%)

1600B	  %29:gpr32common = LDRWui %stack.14.nrows, 0, debug-location !1354 :: (dereferenceable load 4 from %ir.nrows); cg.c:676:21
1608B	  %28:gpr32 = LDRWui %stack.16.j, 0, debug-location !1352 :: (dereferenceable load 4 from %ir.j); cg.c:676:17
1632B	  %0:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1357 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:0
1640B	  %30:gpr32common = nsw ADDWri %29:gpr32common, 1, 0, debug-location !1355; cg.c:676:27
1664B	  dead $wzr = SUBSWrr %28:gpr32, %30:gpr32common, implicit-def $nzcv, debug-location !1358; cg.c:676:5
1680B	  Bcc 10, %bb.12, implicit killed $nzcv, debug-location !1358; cg.c:676:5
1696B	  B %bb.11, debug-location !1358; cg.c:676:5

1712B	bb.11.for.body32:
	; predecessors: %bb.10
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

1728B	  %295:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1359 :: (dereferenceable load 4 from %ir.j); cg.c:677:28
1776B	  %298:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1362 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:677:33
1780B	  %296:gpr64 = UBFMXri %295:gpr64, 62, 61, debug-location !1361; cg.c:677:21
1784B	  %297:gpr32 = LDRWroX %0:gpr64common, %296:gpr64, 0, 0, debug-location !1361 :: (load 4 from %ir.arrayidx34); cg.c:677:21
1792B	  %299:gpr64common = ADDXrr %298:gpr64, %296:gpr64, debug-location !1366; cg.c:677:9
1808B	  %300:gpr32 = LDURWi %299:gpr64common, -4, debug-location !1362 :: (load 4 from %ir.arrayidx37); cg.c:677:33
1824B	  %301:gpr32 = nsw ADDWrr %297:gpr32, %300:gpr32, debug-location !1365; cg.c:677:31
1840B	  STRWui %301:gpr32, %299:gpr64common, 0, debug-location !1368 :: (store 4 into %ir.arrayidx40); cg.c:677:19
1856B	  %302:gpr32common = LDRWui %stack.16.j, 0, debug-location !1369 :: (dereferenceable load 4 from %ir.j); cg.c:676:33
1872B	  %303:gpr32common = nsw ADDWri %302:gpr32common, 1, 0, debug-location !1369; cg.c:676:33
1888B	  STRWui %303:gpr32common, %stack.16.j, 0, debug-location !1369 :: (store 4 into %ir.j); cg.c:676:33
1904B	  B %bb.10, debug-location !1370; cg.c:676:5

1920B	bb.12.for.end43:
	; predecessors: %bb.10
	  successors: %bb.13(0x40000000), %bb.14(0x40000000); %bb.13(50.00%), %bb.14(50.00%)

1936B	  %33:gpr64 = LDRSWui %stack.14.nrows, 0, debug-location !1373 :: (dereferenceable load 4 from %ir.nrows); cg.c:679:18
1952B	  %34:gpr32common = LDRWroX %0:gpr64common, %33:gpr64, 0, 1, debug-location !1374 :: (load 4 from %ir.arrayidx45); cg.c:679:11
2000B	  %36:gpr32 = LDRWui %stack.4.nz.addr, 0, debug-location !1379 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:685:15
2008B	  %35:gpr32common = SUBWri %34:gpr32common, 1, 0, debug-location !1375; cg.c:679:25
2016B	  dead $wzr = SUBSWrr %35:gpr32common, %36:gpr32, implicit-def $nzcv, debug-location !1381; cg.c:685:9
2024B	  STRWui %35:gpr32common, %stack.19.nza, 0, debug-location !1376 :: (store 4 into %ir.nza); cg.c:679:9
2032B	  Bcc 13, %bb.14, implicit killed $nzcv, debug-location !1381; cg.c:685:9
2048B	  B %bb.13, debug-location !1381; cg.c:685:9

2064B	bb.13.if.then:
	; predecessors: %bb.12
	  successors: %bb.14(0x80000000); %bb.14(100.00%)

2080B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1382; cg.c:686:9
2096B	  %38:gpr64 = MOVaddr target-flags(aarch64-page) @.str.37, target-flags(aarch64-pageoff, aarch64-nc) @.str.37, debug-location !1382; cg.c:686:9
2112B	  $x0 = COPY %38:gpr64, debug-location !1382; cg.c:686:9
2128B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !1382; cg.c:686:9
2144B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1382; cg.c:686:9
2160B	  %40:gpr32 = LDRWui %stack.19.nza, 0, debug-location !1384 :: (dereferenceable load 4 from %ir.nza); cg.c:687:41
2176B	  %41:gpr32 = LDRWui %stack.4.nz.addr, 0, debug-location !1385 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:687:46
2192B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1386; cg.c:687:9
2208B	  %42:gpr64 = MOVaddr target-flags(aarch64-page) @.str.38, target-flags(aarch64-pageoff, aarch64-nc) @.str.38, debug-location !1386; cg.c:687:9
2224B	  $x0 = COPY %42:gpr64, debug-location !1386; cg.c:687:9
2240B	  $w1 = COPY %40:gpr32, debug-location !1386; cg.c:687:9
2256B	  $w2 = COPY %41:gpr32, debug-location !1386; cg.c:687:9
2272B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit-def $sp, implicit-def dead $w0, debug-location !1386; cg.c:687:9
2288B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1386; cg.c:687:9

2304B	bb.14.if.end:
	; predecessors: %bb.12, %bb.13
	  successors: %bb.15(0x80000000); %bb.15(100.00%)

2336B	  STRWui $wzr, %stack.16.j, 0, debug-location !1388 :: (store 4 into %ir.j); cg.c:694:12
2352B	  %292:gpr32 = MOVi32imm -1

2368B	bb.15.for.cond49:
	; predecessors: %bb.14, %bb.19
	  successors: %bb.16(0x7c000000), %bb.20(0x04000000); %bb.16(96.88%), %bb.20(3.12%)

2384B	  %45:gpr32 = LDRWui %stack.16.j, 0, debug-location !1391 :: (dereferenceable load 4 from %ir.j); cg.c:694:17
2400B	  %46:gpr32 = LDRWui %stack.14.nrows, 0, debug-location !1393 :: (dereferenceable load 4 from %ir.nrows); cg.c:694:21
2416B	  dead $wzr = SUBSWrr %45:gpr32, %46:gpr32, implicit-def $nzcv, debug-location !1395; cg.c:694:5
2432B	  Bcc 10, %bb.20, implicit killed $nzcv, debug-location !1395; cg.c:694:5
2448B	  B %bb.16, debug-location !1395; cg.c:694:5

2464B	bb.16.for.body51:
	; predecessors: %bb.15
	  successors: %bb.17(0x80000000); %bb.17(100.00%)

2480B	  %273:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1396 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:18
2496B	  %274:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1399 :: (dereferenceable load 4 from %ir.j); cg.c:695:25
2512B	  %275:gpr32 = LDRWroX %273:gpr64common, %274:gpr64, 0, 1, debug-location !1396 :: (load 4 from %ir.arrayidx53); cg.c:695:18
2528B	  STRWui %275:gpr32, %stack.20.k, 0, debug-location !1400 :: (store 4 into %ir.k); cg.c:695:16

2544B	bb.17.for.cond54:
	; predecessors: %bb.16, %bb.18
	  successors: %bb.18(0x7c000000), %bb.19(0x04000000); %bb.18(96.88%), %bb.19(3.12%)

2576B	  %277:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1404 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:33
2592B	  %278:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1405 :: (dereferenceable load 4 from %ir.j); cg.c:695:40
2600B	  %276:gpr32 = LDRWui %stack.20.k, 0, debug-location !1402 :: (dereferenceable load 4 from %ir.k); cg.c:695:29
2608B	  %279:gpr64common = ADDXrs %277:gpr64, %278:gpr64, 2, debug-location !1404; cg.c:695:33
2624B	  %280:gpr32 = LDRWui %279:gpr64common, 1, debug-location !1404 :: (load 4 from %ir.arrayidx57); cg.c:695:33
2640B	  dead $wzr = SUBSWrr %276:gpr32, %280:gpr32, implicit-def $nzcv, debug-location !1408; cg.c:695:9
2656B	  Bcc 10, %bb.19, implicit killed $nzcv, debug-location !1408; cg.c:695:9
2672B	  B %bb.18, debug-location !1408; cg.c:695:9

2688B	bb.18.for.body59:
	; predecessors: %bb.17
	  successors: %bb.17(0x80000000); %bb.17(100.00%)

2704B	  %287:gpr64common = LDRXui %336:gpr64sp, 1, debug-location !1409 :: (dereferenceable load 8 from %ir.a.addr); cg.c:696:13
2720B	  %288:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1411 :: (dereferenceable load 4 from %ir.k); cg.c:696:15
2752B	  STRXroX $xzr, %287:gpr64common, %288:gpr64, 0, 1, debug-location !1412 :: (store 8 into %ir.arrayidx61); cg.c:696:18
2768B	  %290:gpr64common = LDRXui %336:gpr64sp, 0, debug-location !1413 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:697:13
2784B	  %291:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1414 :: (dereferenceable load 4 from %ir.k); cg.c:697:20
2800B	  STRWroX %292:gpr32, %290:gpr64common, %291:gpr64, 0, 1, debug-location !1415 :: (store 4 into %ir.arrayidx63); cg.c:697:23
2816B	  %293:gpr32common = LDRWui %stack.20.k, 0, debug-location !1416 :: (dereferenceable load 4 from %ir.k); cg.c:695:49
2832B	  %294:gpr32common = nsw ADDWri %293:gpr32common, 1, 0, debug-location !1416; cg.c:695:49
2848B	  STRWui %294:gpr32common, %stack.20.k, 0, debug-location !1416 :: (store 4 into %ir.k); cg.c:695:49
2864B	  B %bb.17, debug-location !1417; cg.c:695:9

2880B	bb.19.for.end66:
	; predecessors: %bb.17
	  successors: %bb.15(0x80000000); %bb.15(100.00%)

2896B	  %282:gpr64common = LDRXui %fixed-stack.0, 0, debug-location !1420 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:699:9
2912B	  %283:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1421 :: (dereferenceable load 4 from %ir.j); cg.c:699:15
2944B	  STRWroX $wzr, %282:gpr64common, %283:gpr64, 0, 1, debug-location !1422 :: (store 4 into %ir.arrayidx68); cg.c:699:18
2960B	  %285:gpr32common = LDRWui %stack.16.j, 0, debug-location !1423 :: (dereferenceable load 4 from %ir.j); cg.c:694:29
2976B	  %286:gpr32common = nsw ADDWri %285:gpr32common, 1, 0, debug-location !1423; cg.c:694:29
2992B	  STRWui %286:gpr32common, %stack.16.j, 0, debug-location !1423 :: (store 4 into %ir.j); cg.c:694:29
3008B	  B %bb.15, debug-location !1424; cg.c:694:5

3024B	bb.20.for.end71:
	; predecessors: %bb.15
	  successors: %bb.21(0x80000000); %bb.21(100.00%)

3088B	  undef %51.ssub:fpr64 = LDRSui %stack.3.n.addr, 0, debug-location !1430 :: (dereferenceable load 4 from %ir.n.addr); cg.c:706:31
3096B	  %48:gpr64 = MOVi64imm 4607182418800017408
3104B	  %49:fpr64 = LDRDui %stack.12.rcond.addr, 0, debug-location !1428 :: (dereferenceable load 8 from %ir.rcond.addr); cg.c:706:17
3112B	  STRXui %48:gpr64, %stack.24.size, 0, debug-location !1427 :: (store 8 into %ir.size); cg.c:705:10
3128B	  %53:fpr128 = SSHLLv2i32_shift %51:fpr64, 0, debug-location !1430; cg.c:706:31
3152B	  %55:fpr64 = SCVTFv1i64 %53.dsub:fpr128, debug-location !1430; cg.c:706:31
3168B	  %56:fpr64 = FMOVDi 112
3184B	  %57:fpr64 = FDIVDrr %56:fpr64, %55:fpr64, debug-location !1431; cg.c:706:29
3200B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1432; cg.c:706:13
3216B	  $d0 = COPY %49:fpr64, debug-location !1432; cg.c:706:13
3232B	  $d1 = COPY %57:fpr64, debug-location !1432; cg.c:706:13
3248B	  BL @pow, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $d1, implicit-def $sp, implicit-def $d0, debug-location !1432; cg.c:706:13
3264B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1432; cg.c:706:13
3280B	  %58:fpr64 = COPY $d0, debug-location !1432; cg.c:706:13
3296B	  STRDui %58:fpr64, %stack.26.ratio, 0, debug-location !1433 :: (store 8 into %ir.ratio); cg.c:706:11
3328B	  STRWui $wzr, %stack.15.i, 0, debug-location !1434 :: (store 4 into %ir.i); cg.c:708:12
3344B	  undef %150.sub_32:gpr64 = MOVi32imm 56
3376B	  undef %158.sub_32:gpr64 = MOVi32imm 112
3408B	  %247:gpr32 = MOVi32imm 1
3424B	  %250:gpr64 = MOVaddr target-flags(aarch64-page) @.str.39, target-flags(aarch64-pageoff, aarch64-nc) @.str.39

3440B	bb.21.for.cond73:
	; predecessors: %bb.20, %bb.47
	  successors: %bb.22(0x7c000000), %bb.48(0x04000000); %bb.22(96.88%), %bb.48(3.12%)

3456B	  %60:gpr32 = LDRWui %stack.15.i, 0, debug-location !1437 :: (dereferenceable load 4 from %ir.i); cg.c:708:17
3472B	  %61:gpr32 = LDRWui %stack.3.n.addr, 0, debug-location !1439 :: (dereferenceable load 4 from %ir.n.addr); cg.c:708:21
3488B	  dead $wzr = SUBSWrr %60:gpr32, %61:gpr32, implicit-def $nzcv, debug-location !1441; cg.c:708:5
3504B	  Bcc 10, %bb.48, implicit killed $nzcv, debug-location !1441; cg.c:708:5
3520B	  B %bb.22, debug-location !1441; cg.c:708:5

3536B	bb.22.for.body76:
	; predecessors: %bb.21
	  successors: %bb.23(0x80000000); %bb.23(100.00%)

3568B	  STRWui $wzr, %stack.19.nza, 0, debug-location !1442 :: (store 4 into %ir.nza); cg.c:709:18

3584B	bb.23.for.cond77:
	; predecessors: %bb.22, %bb.46
	  successors: %bb.24(0x7c000000), %bb.47(0x04000000); %bb.24(96.88%), %bb.47(3.12%)

3616B	  %138:gpr64common = LDRXui %stack.6.arow.addr, 0, debug-location !1448 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:709:29
3632B	  %139:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1449 :: (dereferenceable load 4 from %ir.i); cg.c:709:34
3640B	  %137:gpr32 = LDRWui %stack.19.nza, 0, debug-location !1446 :: (dereferenceable load 4 from %ir.nza); cg.c:709:23
3648B	  %140:gpr32 = LDRWroX %138:gpr64common, %139:gpr64, 0, 1, debug-location !1448 :: (load 4 from %ir.arrayidx79); cg.c:709:29
3664B	  dead $wzr = SUBSWrr %137:gpr32, %140:gpr32, implicit-def $nzcv, debug-location !1451; cg.c:709:9
3680B	  Bcc 10, %bb.47, implicit killed $nzcv, debug-location !1451; cg.c:709:9
3696B	  B %bb.24, debug-location !1451; cg.c:709:9

3712B	bb.24.for.body82:
	; predecessors: %bb.23
	  successors: %bb.25(0x80000000); %bb.25(100.00%)

3728B	  %147:gpr64 = LDRXui %stack.7.acol.addr, 0, debug-location !1452 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:710:17
3744B	  %148:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1454 :: (dereferenceable load 4 from %ir.i); cg.c:710:22
3776B	  %153:gpr64 = LDRSWui %stack.19.nza, 0, debug-location !1455 :: (dereferenceable load 4 from %ir.nza); cg.c:710:25
3840B	  %156:gpr64 = LDRXui %fixed-stack.3, 0, debug-location !1458 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:712:28
3848B	  %152:gpr64common = MADDXrrr %148:gpr64, %150:gpr64, %147:gpr64, debug-location !1452; cg.c:710:17
3856B	  %154:gpr32 = LDRWroX %152:gpr64common, %153:gpr64, 0, 1, debug-location !1452 :: (load 4 from %ir.arrayidx86); cg.c:710:17
3864B	  %155:fpr64 = LDRDui %stack.24.size, 0, debug-location !1457 :: (dereferenceable load 8 from %ir.size); cg.c:712:21
3872B	  %160:gpr64common = MADDXrrr %148:gpr64, %158:gpr64, %156:gpr64, debug-location !1458; cg.c:712:28
3880B	  STRWui %154:gpr32, %stack.16.j, 0, debug-location !1456 :: (store 4 into %ir.j); cg.c:710:15
3888B	  %161:fpr64 = LDRDroX %160:gpr64common, %153:gpr64, 0, 1, debug-location !1458 :: (load 8 from %ir.arrayidx90); cg.c:712:28
3896B	  %162:fpr64 = FMULDrr %155:fpr64, %161:fpr64, debug-location !1461; cg.c:712:26
3904B	  STRDui %162:fpr64, %stack.25.scale, 0, debug-location !1462 :: (store 8 into %ir.scale); cg.c:712:19
3936B	  STRWui $wzr, %stack.22.nzrow, 0, debug-location !1463 :: (store 4 into %ir.nzrow); cg.c:713:24

3952B	bb.25.for.cond91:
	; predecessors: %bb.24, %bb.45
	  successors: %bb.26(0x7c000000), %bb.46(0x04000000); %bb.26(96.88%), %bb.46(3.12%)

3984B	  %165:gpr64common = LDRXui %stack.6.arow.addr, 0, debug-location !1468 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:713:37
4000B	  %166:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1469 :: (dereferenceable load 4 from %ir.i); cg.c:713:42
4008B	  %164:gpr32 = LDRWui %stack.22.nzrow, 0, debug-location !1466 :: (dereferenceable load 4 from %ir.nzrow); cg.c:713:29
4016B	  %167:gpr32 = LDRWroX %165:gpr64common, %166:gpr64, 0, 1, debug-location !1468 :: (load 4 from %ir.arrayidx93); cg.c:713:37
4032B	  dead $wzr = SUBSWrr %164:gpr32, %167:gpr32, implicit-def $nzcv, debug-location !1471; cg.c:713:13
4048B	  Bcc 10, %bb.46, implicit killed $nzcv, debug-location !1471; cg.c:713:13
4064B	  B %bb.26, debug-location !1471; cg.c:713:13

4080B	bb.26.for.body96:
	; predecessors: %bb.25
	  successors: %bb.27(0x40000000), %bb.29(0x40000000); %bb.27(50.00%), %bb.29(50.00%)

4096B	  %171:gpr64 = LDRXui %stack.7.acol.addr, 0, debug-location !1472 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:714:24
4112B	  %172:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1474 :: (dereferenceable load 4 from %ir.i); cg.c:714:29
4160B	  %177:gpr64 = LDRSWui %stack.22.nzrow, 0, debug-location !1475 :: (dereferenceable load 4 from %ir.nzrow); cg.c:714:32
4208B	  %179:gpr64 = LDRXui %fixed-stack.3, 0, debug-location !1477 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:715:22
4212B	  %176:gpr64common = MADDXrrr %172:gpr64, %150:gpr64, %171:gpr64, debug-location !1472; cg.c:714:24
4216B	  %178:gpr32 = LDRWroX %176:gpr64common, %177:gpr64, 0, 1, debug-location !1472 :: (load 4 from %ir.arrayidx100); cg.c:714:24
4272B	  %185:fpr64 = LDRDui %stack.25.scale, 0, debug-location !1480 :: (dereferenceable load 8 from %ir.scale); cg.c:715:39
4280B	  %183:gpr64common = MADDXrrr %172:gpr64, %158:gpr64, %179:gpr64, debug-location !1477; cg.c:715:22
4288B	  STRWui %178:gpr32, %stack.23.jcol, 0, debug-location !1476 :: (store 4 into %ir.jcol); cg.c:714:22
4296B	  %184:fpr64 = LDRDroX %183:gpr64common, %177:gpr64, 0, 1, debug-location !1477 :: (load 8 from %ir.arrayidx104); cg.c:715:22
4320B	  %187:gpr32 = LDRWui %stack.16.j, 0, debug-location !1485 :: (dereferenceable load 4 from %ir.j); cg.c:721:29
4328B	  %186:fpr64 = FMULDrr %184:fpr64, %185:fpr64, debug-location !1481; cg.c:715:37
4336B	  dead $wzr = SUBSWrr %178:gpr32, %187:gpr32, implicit-def $nzcv, debug-location !1487; cg.c:721:31
4344B	  STRDui %186:fpr64, %stack.27.va, 0, debug-location !1482 :: (store 8 into %ir.va); cg.c:715:20
4352B	  Bcc 1, %bb.29, implicit killed $nzcv, debug-location !1487; cg.c:721:31
4368B	  B %bb.27, debug-location !1487; cg.c:721:31

4384B	bb.27.land.lhs.true:
	; predecessors: %bb.26
	  successors: %bb.28(0x40000000), %bb.29(0x40000000); %bb.28(50.00%), %bb.29(50.00%)

4400B	  %189:gpr32 = LDRWui %stack.16.j, 0, debug-location !1488 :: (dereferenceable load 4 from %ir.j); cg.c:721:34
4416B	  %190:gpr32 = LDRWui %stack.15.i, 0, debug-location !1489 :: (dereferenceable load 4 from %ir.i); cg.c:721:39
4432B	  dead $wzr = SUBSWrr %189:gpr32, %190:gpr32, implicit-def $nzcv, debug-location !1491; cg.c:721:21
4448B	  Bcc 1, %bb.29, implicit killed $nzcv, debug-location !1491; cg.c:721:21
4464B	  B %bb.28, debug-location !1491; cg.c:721:21

4480B	bb.28.if.then110:
	; predecessors: %bb.27
	  successors: %bb.29(0x80000000); %bb.29(100.00%)

4496B	  %192:fpr64 = LDRDui %stack.27.va, 0, debug-location !1492 :: (dereferenceable load 8 from %ir.va); cg.c:722:26
4512B	  %193:fpr64 = LDRDui %stack.12.rcond.addr, 0, debug-location !1494 :: (dereferenceable load 8 from %ir.rcond.addr); cg.c:722:31
4544B	  %195:fpr64 = LDRDui %stack.13.shift.addr, 0, debug-location !1496 :: (dereferenceable load 8 from %ir.shift.addr); cg.c:722:39
4552B	  %194:fpr64 = FADDDrr %192:fpr64, %193:fpr64, debug-location !1495; cg.c:722:29
4560B	  %196:fpr64 = FSUBDrr %194:fpr64, %195:fpr64, debug-location !1497; cg.c:722:37
4576B	  STRDui %196:fpr64, %stack.27.va, 0, debug-location !1498 :: (store 8 into %ir.va); cg.c:722:24

4592B	bb.29.if.end113:
	; predecessors: %bb.26, %bb.27, %bb.28
	  successors: %bb.30(0x80000000); %bb.30(100.00%)

4640B	  %198:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1501 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:26
4656B	  %199:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1503 :: (dereferenceable load 4 from %ir.j); cg.c:726:33
4664B	  STRWui $wzr, %stack.28.cont40, 0, debug-location !1500 :: (store 4 into %ir.cont40); cg.c:725:24
4672B	  %200:gpr32 = LDRWroX %198:gpr64common, %199:gpr64, 0, 1, debug-location !1501 :: (load 4 from %ir.arrayidx115); cg.c:726:26
4688B	  STRWui %200:gpr32, %stack.20.k, 0, debug-location !1504 :: (store 4 into %ir.k); cg.c:726:24

4704B	bb.30.for.cond116:
	; predecessors: %bb.29, %bb.42
	  successors: %bb.31(0x7c000000), %bb.43(0x04000000); %bb.31(96.88%), %bb.43(3.12%)

4736B	  %202:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1508 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:41
4752B	  %203:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1509 :: (dereferenceable load 4 from %ir.j); cg.c:726:48
4760B	  %201:gpr32 = LDRWui %stack.20.k, 0, debug-location !1506 :: (dereferenceable load 4 from %ir.k); cg.c:726:37
4768B	  %204:gpr64common = ADDXrs %202:gpr64, %203:gpr64, 2, debug-location !1508; cg.c:726:41
4784B	  %205:gpr32 = LDRWui %204:gpr64common, 1, debug-location !1508 :: (load 4 from %ir.arrayidx119); cg.c:726:41
4800B	  dead $wzr = SUBSWrr %201:gpr32, %205:gpr32, implicit-def $nzcv, debug-location !1512; cg.c:726:17
4816B	  Bcc 10, %bb.43, implicit killed $nzcv, debug-location !1512; cg.c:726:17
4832B	  B %bb.31, debug-location !1512; cg.c:726:17

4848B	bb.31.for.body122:
	; predecessors: %bb.30
	  successors: %bb.32(0x04000000), %bb.38(0x7c000000); %bb.32(3.12%), %bb.38(96.88%)

4864B	  %207:gpr64common = LDRXui %336:gpr64sp, 0, debug-location !1513 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:727:25
4880B	  %208:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1516 :: (dereferenceable load 4 from %ir.k); cg.c:727:32
4896B	  %209:gpr32 = LDRWroX %207:gpr64common, %208:gpr64, 0, 1, debug-location !1513 :: (load 4 from %ir.arrayidx124); cg.c:727:25
4912B	  %210:gpr32 = LDRWui %stack.23.jcol, 0, debug-location !1517 :: (dereferenceable load 4 from %ir.jcol); cg.c:727:37
4928B	  dead $wzr = SUBSWrr %209:gpr32, %210:gpr32, implicit-def $nzcv, debug-location !1519; cg.c:727:25
4944B	  Bcc 13, %bb.38, implicit killed $nzcv, debug-location !1519; cg.c:727:25
4960B	  B %bb.32, debug-location !1519; cg.c:727:25

4976B	bb.32.if.then127:
	; predecessors: %bb.31
	  successors: %bb.33(0x80000000); %bb.33(100.00%)

4992B	  %233:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1520 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:731:35
5008B	  %234:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1523 :: (dereferenceable load 4 from %ir.j); cg.c:731:42
5024B	  %235:gpr64common = ADDXrs %233:gpr64, %234:gpr64, 2, debug-location !1520; cg.c:731:35
5040B	  %236:gpr32common = LDRWui %235:gpr64common, 1, debug-location !1520 :: (load 4 from %ir.arrayidx130); cg.c:731:35
5056B	  %237:gpr32common = SUBWri %236:gpr32common, 2, 0, debug-location !1525; cg.c:731:49
5072B	  STRWui %237:gpr32common, %stack.21.kk, 0, debug-location !1526 :: (store 4 into %ir.kk); cg.c:731:33

5088B	bb.33.for.cond132:
	; predecessors: %bb.32, %bb.36
	  successors: %bb.34(0x7c000000), %bb.37(0x04000000); %bb.34(96.88%), %bb.37(3.12%)

5104B	  %238:gpr32 = LDRWui %stack.21.kk, 0, debug-location !1528 :: (dereferenceable load 4 from %ir.kk); cg.c:731:54
5120B	  %239:gpr32 = LDRWui %stack.20.k, 0, debug-location !1530 :: (dereferenceable load 4 from %ir.k); cg.c:731:60
5136B	  dead $wzr = SUBSWrr %238:gpr32, %239:gpr32, implicit-def $nzcv, debug-location !1532; cg.c:731:25
5152B	  Bcc 11, %bb.37, implicit killed $nzcv, debug-location !1532; cg.c:731:25
5168B	  B %bb.34, debug-location !1532; cg.c:731:25

5184B	bb.34.for.body135:
	; predecessors: %bb.33
	  successors: %bb.35(0x50000000), %bb.36(0x30000000); %bb.35(62.50%), %bb.36(37.50%)

5200B	  %260:gpr64common = LDRXui %336:gpr64sp, 0, debug-location !1533 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:732:33
5216B	  %261:gpr64 = LDRSWui %stack.21.kk, 0, debug-location !1536 :: (dereferenceable load 4 from %ir.kk); cg.c:732:40
5232B	  %262:gpr32 = LDRWroX %260:gpr64common, %261:gpr64, 0, 1, debug-location !1533 :: (load 4 from %ir.arrayidx137); cg.c:732:33
5248B	  TBNZW %262:gpr32, 31, %bb.36, debug-location !1538; cg.c:732:33
5264B	  B %bb.35, debug-location !1538; cg.c:732:33

5280B	bb.35.if.then140:
	; predecessors: %bb.34
	  successors: %bb.36(0x80000000); %bb.36(100.00%)

5296B	  %263:gpr64 = LDRXui %336:gpr64sp, 1, debug-location !1539 :: (dereferenceable load 8 from %ir.a.addr); cg.c:733:45
5312B	  %264:gpr64 = LDRSWui %stack.21.kk, 0, debug-location !1541 :: (dereferenceable load 4 from %ir.kk); cg.c:733:47
5328B	  %265:gpr64common = ADDXrs %263:gpr64, %264:gpr64, 3, debug-location !1539; cg.c:733:45
5344B	  %266:fpr64 = LDRDui %265:gpr64common, 0, debug-location !1539 :: (load 8 from %ir.arrayidx142); cg.c:733:45
5360B	  STRDui %266:fpr64, %265:gpr64common, 1, debug-location !1545 :: (store 8 into %ir.arrayidx145); cg.c:733:43
5376B	  %267:gpr64 = LDRXui %336:gpr64sp, 0, debug-location !1546 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:734:50
5392B	  %268:gpr64 = LDRSWui %stack.21.kk, 0, debug-location !1547 :: (dereferenceable load 4 from %ir.kk); cg.c:734:57
5408B	  %269:gpr64common = ADDXrs %267:gpr64, %268:gpr64, 2, debug-location !1546; cg.c:734:50
5424B	  %270:gpr32 = LDRWui %269:gpr64common, 0, debug-location !1546 :: (load 4 from %ir.arrayidx147); cg.c:734:50
5440B	  STRWui %270:gpr32, %269:gpr64common, 1, debug-location !1551 :: (store 4 into %ir.arrayidx150); cg.c:734:48

5456B	bb.36.for.inc152:
	; predecessors: %bb.34, %bb.35
	  successors: %bb.33(0x80000000); %bb.33(100.00%)

5472B	  %271:gpr32common = LDRWui %stack.21.kk, 0, debug-location !1553 :: (dereferenceable load 4 from %ir.kk); cg.c:731:65
5488B	  %272:gpr32common = nsw SUBWri %271:gpr32common, 1, 0, debug-location !1553; cg.c:731:65
5504B	  STRWui %272:gpr32common, %stack.21.kk, 0, debug-location !1553 :: (store 4 into %ir.kk); cg.c:731:65
5520B	  B %bb.33, debug-location !1554; cg.c:731:25

5536B	bb.37.for.end153:
	; predecessors: %bb.33
	  successors: %bb.43(0x80000000); %bb.43(100.00%)

5552B	  %241:gpr32 = LDRWui %stack.23.jcol, 0, debug-location !1557 :: (dereferenceable load 4 from %ir.jcol); cg.c:737:37
5568B	  %242:gpr64common = LDRXui %336:gpr64sp, 0, debug-location !1558 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:737:25
5584B	  %243:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1559 :: (dereferenceable load 4 from %ir.k); cg.c:737:32
5600B	  STRWroX %241:gpr32, %242:gpr64common, %243:gpr64, 0, 1, debug-location !1560 :: (store 4 into %ir.arrayidx155); cg.c:737:35
5616B	  %244:gpr64common = LDRXui %336:gpr64sp, 1, debug-location !1561 :: (dereferenceable load 8 from %ir.a.addr); cg.c:738:25
5632B	  %245:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1562 :: (dereferenceable load 4 from %ir.k); cg.c:738:27
5664B	  STRXroX $xzr, %244:gpr64common, %245:gpr64, 0, 1, debug-location !1563 :: (store 8 into %ir.arrayidx157); cg.c:738:30
5680B	  STRWui %247:gpr32, %stack.28.cont40, 0, debug-location !1564 :: (store 4 into %ir.cont40); cg.c:739:32
5696B	  B %bb.43, debug-location !1565; cg.c:740:25

5712B	bb.38.if.else:
	; predecessors: %bb.31
	  successors: %bb.39(0x04000000), %bb.40(0x7c000000); %bb.39(3.12%), %bb.40(96.88%)

5728B	  %212:gpr64common = LDRXui %336:gpr64sp, 0, debug-location !1566 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:742:30
5744B	  %213:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1568 :: (dereferenceable load 4 from %ir.k); cg.c:742:37
5760B	  %214:gpr32common = LDRWroX %212:gpr64common, %213:gpr64, 0, 1, debug-location !1566 :: (load 4 from %ir.arrayidx159); cg.c:742:30
5776B	  dead $wzr = ADDSWri %214:gpr32common, 1, 0, implicit-def $nzcv, debug-location !1570; cg.c:742:30
5792B	  Bcc 1, %bb.40, implicit killed $nzcv, debug-location !1570; cg.c:742:30
5808B	  B %bb.39, debug-location !1570; cg.c:742:30

5824B	bb.39.if.then162:
	; predecessors: %bb.38
	  successors: %bb.43(0x80000000); %bb.43(100.00%)

5840B	  %229:gpr32 = LDRWui %stack.23.jcol, 0, debug-location !1571 :: (dereferenceable load 4 from %ir.jcol); cg.c:743:37
5856B	  %230:gpr64common = LDRXui %336:gpr64sp, 0, debug-location !1573 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:743:25
5872B	  %231:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1574 :: (dereferenceable load 4 from %ir.k); cg.c:743:32
5888B	  STRWroX %229:gpr32, %230:gpr64common, %231:gpr64, 0, 1, debug-location !1575 :: (store 4 into %ir.arrayidx164); cg.c:743:35
5904B	  STRWui %247:gpr32, %stack.28.cont40, 0, debug-location !1576 :: (store 4 into %ir.cont40); cg.c:744:32
5920B	  B %bb.43, debug-location !1577; cg.c:745:25

5936B	bb.40.if.else165:
	; predecessors: %bb.38
	  successors: %bb.41(0x04000000), %bb.42(0x7c000000); %bb.41(3.12%), %bb.42(96.88%)

5952B	  %216:gpr64common = LDRXui %336:gpr64sp, 0, debug-location !1578 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:747:30
5968B	  %217:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1580 :: (dereferenceable load 4 from %ir.k); cg.c:747:37
5984B	  %218:gpr32 = LDRWroX %216:gpr64common, %217:gpr64, 0, 1, debug-location !1578 :: (load 4 from %ir.arrayidx167); cg.c:747:30
6000B	  %219:gpr32 = LDRWui %stack.23.jcol, 0, debug-location !1581 :: (dereferenceable load 4 from %ir.jcol); cg.c:747:43
6016B	  dead $wzr = SUBSWrr %218:gpr32, %219:gpr32, implicit-def $nzcv, debug-location !1583; cg.c:747:30
6032B	  Bcc 1, %bb.42, implicit killed $nzcv, debug-location !1583; cg.c:747:30
6048B	  B %bb.41, debug-location !1583; cg.c:747:30

6064B	bb.41.if.then170:
	; predecessors: %bb.40
	  successors: %bb.43(0x80000000); %bb.43(100.00%)

6096B	  %224:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1586 :: (dereferenceable load 4 from %ir.j); cg.c:751:42
6104B	  %223:gpr64common = LDRXui %fixed-stack.0, 0, debug-location !1584 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:751:36
6112B	  %225:gpr64 = UBFMXri %224:gpr64, 62, 61, debug-location !1584; cg.c:751:36
6128B	  %226:gpr32common = LDRWroX %223:gpr64common, %225:gpr64, 0, 0, debug-location !1584 :: (load 4 from %ir.arrayidx172); cg.c:751:36
6144B	  %227:gpr32common = nsw ADDWri %226:gpr32common, 1, 0, debug-location !1587; cg.c:751:45
6160B	  STRWroX %227:gpr32common, %223:gpr64common, %225:gpr64, 0, 0, debug-location !1590 :: (store 4 into %ir.arrayidx175); cg.c:751:34
6176B	  STRWui %247:gpr32, %stack.28.cont40, 0, debug-location !1591 :: (store 4 into %ir.cont40); cg.c:752:32
6192B	  B %bb.43, debug-location !1592; cg.c:753:25

6208B	bb.42.for.inc179:
	; predecessors: %bb.40
	  successors: %bb.30(0x80000000); %bb.30(100.00%)

6224B	  %221:gpr32common = LDRWui %stack.20.k, 0, debug-location !1593 :: (dereferenceable load 4 from %ir.k); cg.c:726:57
6240B	  %222:gpr32common = nsw ADDWri %221:gpr32common, 1, 0, debug-location !1593; cg.c:726:57
6256B	  STRWui %222:gpr32common, %stack.20.k, 0, debug-location !1593 :: (store 4 into %ir.k); cg.c:726:57
6272B	  B %bb.30, debug-location !1594; cg.c:726:17

6288B	bb.43.for.end181:
	; predecessors: %bb.30, %bb.41, %bb.39, %bb.37
	  successors: %bb.44(0x30000000), %bb.45(0x50000000); %bb.44(37.50%), %bb.45(62.50%)

6304B	  %248:gpr32 = LDRWui %stack.28.cont40, 0, debug-location !1597 :: (dereferenceable load 4 from %ir.cont40); cg.c:756:21
6320B	  CBNZW %248:gpr32, %bb.45, debug-location !1600; cg.c:756:21
6336B	  B %bb.44, debug-location !1600; cg.c:756:21

6352B	bb.44.if.then184:
	; predecessors: %bb.43
	  successors: %bb.45(0x80000000); %bb.45(100.00%)

6368B	  %249:gpr32 = LDRWui %stack.15.i, 0, debug-location !1601 :: (dereferenceable load 4 from %ir.i); cg.c:757:64
6384B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1603; cg.c:757:21
6400B	  $x0 = COPY %250:gpr64, debug-location !1603; cg.c:757:21
6416B	  $w1 = COPY %249:gpr32, debug-location !1603; cg.c:757:21
6432B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !1603; cg.c:757:21
6448B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1603; cg.c:757:21

6464B	bb.45.if.end186:
	; predecessors: %bb.43, %bb.44
	  successors: %bb.25(0x80000000); %bb.25(100.00%)

6496B	  %253:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1606 :: (dereferenceable load 4 from %ir.k); cg.c:761:26
6504B	  %252:gpr64common = LDRXui %336:gpr64sp, 1, debug-location !1605 :: (dereferenceable load 8 from %ir.a.addr); cg.c:761:24
6512B	  %254:gpr64 = UBFMXri %253:gpr64, 61, 60, debug-location !1605; cg.c:761:24
6528B	  %255:fpr64 = LDRDroX %252:gpr64common, %254:gpr64, 0, 0, debug-location !1605 :: (load 8 from %ir.arrayidx188); cg.c:761:24
6544B	  %256:fpr64 = LDRDui %stack.27.va, 0, debug-location !1607 :: (dereferenceable load 8 from %ir.va); cg.c:761:31
6560B	  %257:fpr64 = FADDDrr %255:fpr64, %256:fpr64, debug-location !1608; cg.c:761:29
6576B	  STRDroX %257:fpr64, %252:gpr64common, %254:gpr64, 0, 0, debug-location !1611 :: (store 8 into %ir.arrayidx191); cg.c:761:22
6592B	  %258:gpr32common = LDRWui %stack.22.nzrow, 0, debug-location !1612 :: (dereferenceable load 4 from %ir.nzrow); cg.c:713:51
6608B	  %259:gpr32common = nsw ADDWri %258:gpr32common, 1, 0, debug-location !1612; cg.c:713:51
6624B	  STRWui %259:gpr32common, %stack.22.nzrow, 0, debug-location !1612 :: (store 4 into %ir.nzrow); cg.c:713:51
6640B	  B %bb.25, debug-location !1613; cg.c:713:13

6656B	bb.46.for.inc195:
	; predecessors: %bb.25
	  successors: %bb.23(0x80000000); %bb.23(100.00%)

6672B	  %169:gpr32common = LDRWui %stack.19.nza, 0, debug-location !1616 :: (dereferenceable load 4 from %ir.nza); cg.c:709:41
6688B	  %170:gpr32common = nsw ADDWri %169:gpr32common, 1, 0, debug-location !1616; cg.c:709:41
6704B	  STRWui %170:gpr32common, %stack.19.nza, 0, debug-location !1616 :: (store 4 into %ir.nza); cg.c:709:41
6720B	  B %bb.23, debug-location !1617; cg.c:709:9

6736B	bb.47.for.end197:
	; predecessors: %bb.23
	  successors: %bb.21(0x80000000); %bb.21(100.00%)

6752B	  %142:fpr64 = LDRDui %stack.24.size, 0, debug-location !1620 :: (dereferenceable load 8 from %ir.size); cg.c:764:16
6768B	  %143:fpr64 = LDRDui %stack.26.ratio, 0, debug-location !1621 :: (dereferenceable load 8 from %ir.ratio); cg.c:764:23
6816B	  %145:gpr32common = LDRWui %stack.15.i, 0, debug-location !1624 :: (dereferenceable load 4 from %ir.i); cg.c:708:25
6824B	  %144:fpr64 = FMULDrr %142:fpr64, %143:fpr64, debug-location !1622; cg.c:764:21
6832B	  %146:gpr32common = nsw ADDWri %145:gpr32common, 1, 0, debug-location !1624; cg.c:708:25
6840B	  STRDui %144:fpr64, %stack.24.size, 0, debug-location !1623 :: (store 8 into %ir.size); cg.c:764:14
6848B	  STRWui %146:gpr32common, %stack.15.i, 0, debug-location !1624 :: (store 4 into %ir.i); cg.c:708:25
6864B	  B %bb.21, debug-location !1625; cg.c:708:5

6880B	bb.48.for.end201:
	; predecessors: %bb.21
	  successors: %bb.49(0x80000000); %bb.49(100.00%)

6896B	  %63:gpr32 = MOVi32imm 1
6912B	  STRWui %63:gpr32, %stack.16.j, 0, debug-location !1628 :: (store 4 into %ir.j); cg.c:770:12

6928B	bb.49.for.cond202:
	; predecessors: %bb.48, %bb.50
	  successors: %bb.50(0x7c000000), %bb.51(0x04000000); %bb.50(96.88%), %bb.51(3.12%)

6944B	  %64:gpr32 = LDRWui %stack.16.j, 0, debug-location !1631 :: (dereferenceable load 4 from %ir.j); cg.c:770:17
6960B	  %65:gpr32 = LDRWui %stack.14.nrows, 0, debug-location !1633 :: (dereferenceable load 4 from %ir.nrows); cg.c:770:21
6976B	  dead $wzr = SUBSWrr %64:gpr32, %65:gpr32, implicit-def $nzcv, debug-location !1635; cg.c:770:5
6992B	  Bcc 10, %bb.51, implicit killed $nzcv, debug-location !1635; cg.c:770:5
7008B	  B %bb.50, debug-location !1635; cg.c:770:5

7024B	bb.50.for.body205:
	; predecessors: %bb.49
	  successors: %bb.49(0x80000000); %bb.49(100.00%)

7040B	  %128:gpr64 = LDRXui %fixed-stack.0, 0, debug-location !1636 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:771:20
7056B	  %129:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1638 :: (dereferenceable load 4 from %ir.j); cg.c:771:26
7072B	  %130:gpr64common = ADDXrs %128:gpr64, %129:gpr64, 2, debug-location !1636; cg.c:771:20
7088B	  %131:gpr32 = LDRWui %130:gpr64common, 0, debug-location !1636 :: (load 4 from %ir.arrayidx207); cg.c:771:20
7104B	  %132:gpr32 = LDURWi %130:gpr64common, -4, debug-location !1639 :: (load 4 from %ir.arrayidx210); cg.c:771:31
7120B	  %133:gpr32 = nsw ADDWrr %131:gpr32, %132:gpr32, debug-location !1642; cg.c:771:29
7136B	  STRWui %133:gpr32, %130:gpr64common, 0, debug-location !1645 :: (store 4 into %ir.arrayidx213); cg.c:771:18
7152B	  %134:gpr32common = LDRWui %stack.16.j, 0, debug-location !1646 :: (dereferenceable load 4 from %ir.j); cg.c:770:29
7168B	  %135:gpr32common = nsw ADDWri %134:gpr32common, 1, 0, debug-location !1646; cg.c:770:29
7184B	  STRWui %135:gpr32common, %stack.16.j, 0, debug-location !1646 :: (store 4 into %ir.j); cg.c:770:29
7200B	  B %bb.49, debug-location !1647; cg.c:770:5

7216B	bb.51.for.end216:
	; predecessors: %bb.49
	  successors: %bb.52(0x80000000); %bb.52(100.00%)

7248B	  STRWui $wzr, %stack.16.j, 0, debug-location !1650 :: (store 4 into %ir.j); cg.c:774:12

7264B	bb.52.for.cond217:
	; predecessors: %bb.51, %bb.59
	  successors: %bb.53(0x7c000000), %bb.60(0x04000000); %bb.53(96.88%), %bb.60(3.12%)

7280B	  %68:gpr32 = LDRWui %stack.16.j, 0, debug-location !1653 :: (dereferenceable load 4 from %ir.j); cg.c:774:17
7296B	  %69:gpr32 = LDRWui %stack.14.nrows, 0, debug-location !1655 :: (dereferenceable load 4 from %ir.nrows); cg.c:774:21
7312B	  dead $wzr = SUBSWrr %68:gpr32, %69:gpr32, implicit-def $nzcv, debug-location !1657; cg.c:774:5
7328B	  Bcc 10, %bb.60, implicit killed $nzcv, debug-location !1657; cg.c:774:5
7344B	  B %bb.53, debug-location !1657; cg.c:774:5

7360B	bb.53.for.body220:
	; predecessors: %bb.52
	  successors: %bb.54(0x50000000), %bb.55(0x30000000); %bb.54(62.50%), %bb.55(37.50%)

7376B	  %90:gpr32common = LDRWui %stack.16.j, 0, debug-location !1658 :: (dereferenceable load 4 from %ir.j); cg.c:775:13
7392B	  dead $wzr = SUBSWri %90:gpr32common, 1, 0, implicit-def $nzcv, debug-location !1662; cg.c:775:13
7408B	  Bcc 11, %bb.55, implicit killed $nzcv, debug-location !1662; cg.c:775:13
7424B	  B %bb.54, debug-location !1662; cg.c:775:13

7440B	bb.54.if.then223:
	; predecessors: %bb.53
	  successors: %bb.56(0x80000000); %bb.56(100.00%)

7472B	  %94:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1665 :: (dereferenceable load 4 from %ir.j); cg.c:776:25
7480B	  %93:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1663 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:776:18
7520B	  %97:gpr64 = LDRXui %fixed-stack.0, 0, debug-location !1666 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:776:30
7524B	  %95:gpr64 = UBFMXri %94:gpr64, 62, 61, debug-location !1663; cg.c:776:18
7528B	  %96:gpr32 = LDRWroX %93:gpr64common, %95:gpr64, 0, 0, debug-location !1663 :: (load 4 from %ir.arrayidx225); cg.c:776:18
7536B	  %98:gpr64common = ADDXrr %95:gpr64, %97:gpr64, debug-location !1666; cg.c:776:30
7552B	  %99:gpr32 = LDURWi %98:gpr64common, -4, debug-location !1666 :: (load 4 from %ir.arrayidx228); cg.c:776:30
7568B	  %100:gpr32 = nsw SUBWrr %96:gpr32, %99:gpr32, debug-location !1669; cg.c:776:28
7584B	  STRWui %100:gpr32, %stack.17.j1, 0, debug-location !1670 :: (store 4 into %ir.j1); cg.c:776:16
7600B	  B %bb.56, debug-location !1671; cg.c:777:9

7616B	bb.55.if.else230:
	; predecessors: %bb.53
	  successors: %bb.56(0x80000000); %bb.56(100.00%)

7648B	  STRWui $wzr, %stack.17.j1, 0, debug-location !1672 :: (store 4 into %ir.j1); cg.c:779:16

7664B	bb.56.if.end231:
	; predecessors: %bb.55, %bb.54
	  successors: %bb.57(0x80000000); %bb.57(100.00%)

7696B	  %102:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1675 :: (dereferenceable load 4 from %ir.j); cg.c:781:21
7704B	  %101:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1674 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:781:14
7760B	  %106:gpr64common = LDRXui %fixed-stack.0, 0, debug-location !1677 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:781:30
7764B	  %103:gpr64 = UBFMXri %102:gpr64, 62, 61, debug-location !1681; cg.c:782:15
7768B	  %104:gpr64common = ADDXrr %103:gpr64, %101:gpr64, debug-location !1674; cg.c:781:14
7776B	  %107:gpr32 = LDRWroX %106:gpr64common, %103:gpr64, 0, 0, debug-location !1677 :: (load 4 from %ir.arrayidx236); cg.c:781:30
7784B	  %105:gpr32 = LDRWui %104:gpr64common, 1, debug-location !1674 :: (load 4 from %ir.arrayidx234); cg.c:781:14
7792B	  %108:gpr32 = nsw SUBWrr %105:gpr32, %107:gpr32, debug-location !1679; cg.c:781:28
7808B	  STRWui %108:gpr32, %stack.18.j2, 0, debug-location !1680 :: (store 4 into %ir.j2); cg.c:781:12
7824B	  %109:gpr32 = LDRWui %104:gpr64common, 0, debug-location !1681 :: (load 4 from %ir.arrayidx239); cg.c:782:15
7856B	  %110:gpr32 = LDRWui %stack.17.j1, 0, debug-location !1684 :: (dereferenceable load 4 from %ir.j1); cg.c:783:18
7864B	  STRWui %109:gpr32, %stack.19.nza, 0, debug-location !1683 :: (store 4 into %ir.nza); cg.c:782:13
7872B	  STRWui %110:gpr32, %stack.20.k, 0, debug-location !1686 :: (store 4 into %ir.k); cg.c:783:16

7888B	bb.57.for.cond240:
	; predecessors: %bb.56, %bb.58
	  successors: %bb.58(0x7c000000), %bb.59(0x04000000); %bb.58(96.88%), %bb.59(3.12%)

7904B	  %111:gpr32 = LDRWui %stack.20.k, 0, debug-location !1688 :: (dereferenceable load 4 from %ir.k); cg.c:783:22
7920B	  %112:gpr32 = LDRWui %stack.18.j2, 0, debug-location !1690 :: (dereferenceable load 4 from %ir.j2); cg.c:783:26
7936B	  dead $wzr = SUBSWrr %111:gpr32, %112:gpr32, implicit-def $nzcv, debug-location !1692; cg.c:783:9
7952B	  Bcc 10, %bb.59, implicit killed $nzcv, debug-location !1692; cg.c:783:9
7968B	  B %bb.58, debug-location !1692; cg.c:783:9

7984B	bb.58.for.body243:
	; predecessors: %bb.57
	  successors: %bb.57(0x80000000); %bb.57(100.00%)

8000B	  %116:gpr64common = LDRXui %336:gpr64sp, 1, debug-location !1693 :: (dereferenceable load 8 from %ir.a.addr); cg.c:784:20
8016B	  %117:gpr64 = LDRSWui %stack.19.nza, 0, debug-location !1695 :: (dereferenceable load 4 from %ir.nza); cg.c:784:22
8048B	  %119:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1697 :: (dereferenceable load 4 from %ir.k); cg.c:784:15
8056B	  %118:fpr64 = LDRDroX %116:gpr64common, %117:gpr64, 0, 1, debug-location !1693 :: (load 8 from %ir.arrayidx245); cg.c:784:20
8064B	  STRDroX %118:fpr64, %116:gpr64common, %119:gpr64, 0, 1, debug-location !1698 :: (store 8 into %ir.arrayidx247); cg.c:784:18
8080B	  %120:gpr64common = LDRXui %336:gpr64sp, 0, debug-location !1699 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:785:25
8096B	  %121:gpr64 = LDRSWui %stack.19.nza, 0, debug-location !1700 :: (dereferenceable load 4 from %ir.nza); cg.c:785:32
8128B	  %123:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1702 :: (dereferenceable load 4 from %ir.k); cg.c:785:20
8136B	  %122:gpr32 = LDRWroX %120:gpr64common, %121:gpr64, 0, 1, debug-location !1699 :: (load 4 from %ir.arrayidx249); cg.c:785:25
8144B	  STRWroX %122:gpr32, %120:gpr64common, %123:gpr64, 0, 1, debug-location !1703 :: (store 4 into %ir.arrayidx251); cg.c:785:23
8160B	  %124:gpr32common = LDRWui %stack.19.nza, 0, debug-location !1704 :: (dereferenceable load 4 from %ir.nza); cg.c:786:19
8208B	  %126:gpr32common = LDRWui %stack.20.k, 0, debug-location !1707 :: (dereferenceable load 4 from %ir.k); cg.c:783:31
8216B	  %125:gpr32common = nsw ADDWri %124:gpr32common, 1, 0, debug-location !1705; cg.c:786:23
8224B	  %127:gpr32common = nsw ADDWri %126:gpr32common, 1, 0, debug-location !1707; cg.c:783:31
8232B	  STRWui %125:gpr32common, %stack.19.nza, 0, debug-location !1706 :: (store 4 into %ir.nza); cg.c:786:17
8240B	  STRWui %127:gpr32common, %stack.20.k, 0, debug-location !1707 :: (store 4 into %ir.k); cg.c:783:31
8256B	  B %bb.57, debug-location !1708; cg.c:783:9

8272B	bb.59.for.inc256:
	; predecessors: %bb.57
	  successors: %bb.52(0x80000000); %bb.52(100.00%)

8288B	  %114:gpr32common = LDRWui %stack.16.j, 0, debug-location !1711 :: (dereferenceable load 4 from %ir.j); cg.c:774:29
8304B	  %115:gpr32common = nsw ADDWri %114:gpr32common, 1, 0, debug-location !1711; cg.c:774:29
8320B	  STRWui %115:gpr32common, %stack.16.j, 0, debug-location !1711 :: (store 4 into %ir.j); cg.c:774:29
8336B	  B %bb.52, debug-location !1712; cg.c:774:5

8352B	bb.60.for.end258:
	; predecessors: %bb.52
	  successors: %bb.61(0x80000000); %bb.61(100.00%)

8368B	  %71:gpr32 = MOVi32imm 1
8384B	  STRWui %71:gpr32, %stack.16.j, 0, debug-location !1715 :: (store 4 into %ir.j); cg.c:789:12

8400B	bb.61.for.cond259:
	; predecessors: %bb.60, %bb.62
	  successors: %bb.62(0x7c000000), %bb.63(0x04000000); %bb.62(96.88%), %bb.63(3.12%)

8432B	  %73:gpr32common = LDRWui %stack.14.nrows, 0, debug-location !1720 :: (dereferenceable load 4 from %ir.nrows); cg.c:789:21
8440B	  %72:gpr32 = LDRWui %stack.16.j, 0, debug-location !1718 :: (dereferenceable load 4 from %ir.j); cg.c:789:17
8464B	  %1:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1357 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:0
8472B	  %74:gpr32common = nsw ADDWri %73:gpr32common, 1, 0, debug-location !1721; cg.c:789:27
8496B	  dead $wzr = SUBSWrr %72:gpr32, %74:gpr32common, implicit-def $nzcv, debug-location !1723; cg.c:789:5
8512B	  Bcc 10, %bb.63, implicit killed $nzcv, debug-location !1723; cg.c:789:5
8528B	  B %bb.62, debug-location !1723; cg.c:789:5

8544B	bb.62.for.body263:
	; predecessors: %bb.61
	  successors: %bb.61(0x80000000); %bb.61(100.00%)

8560B	  %80:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1724 :: (dereferenceable load 4 from %ir.j); cg.c:790:28
8608B	  %83:gpr64 = LDRXui %fixed-stack.0, 0, debug-location !1727 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:790:33
8612B	  %81:gpr64 = UBFMXri %80:gpr64, 62, 61, debug-location !1726; cg.c:790:21
8616B	  %82:gpr32 = LDRWroX %1:gpr64common, %81:gpr64, 0, 0, debug-location !1726 :: (load 4 from %ir.arrayidx265); cg.c:790:21
8624B	  %84:gpr64common = ADDXrr %81:gpr64, %83:gpr64, debug-location !1727; cg.c:790:33
8640B	  %85:gpr32 = LDURWi %84:gpr64common, -4, debug-location !1727 :: (load 4 from %ir.arrayidx268); cg.c:790:33
8672B	  %87:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1731 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:790:9
8680B	  %86:gpr32 = nsw SUBWrr %82:gpr32, %85:gpr32, debug-location !1730; cg.c:790:31
8688B	  STRWroX %86:gpr32, %87:gpr64common, %81:gpr64, 0, 0, debug-location !1733 :: (store 4 into %ir.arrayidx271); cg.c:790:19
8704B	  %88:gpr32common = LDRWui %stack.16.j, 0, debug-location !1734 :: (dereferenceable load 4 from %ir.j); cg.c:789:33
8720B	  %89:gpr32common = nsw ADDWri %88:gpr32common, 1, 0, debug-location !1734; cg.c:789:33
8736B	  STRWui %89:gpr32common, %stack.16.j, 0, debug-location !1734 :: (store 4 into %ir.j); cg.c:789:33
8752B	  B %bb.61, debug-location !1735; cg.c:789:5

8768B	bb.63.for.end274:
	; predecessors: %bb.61

8784B	  %77:gpr64 = LDRSWui %stack.14.nrows, 0, debug-location !1738 :: (dereferenceable load 4 from %ir.nrows); cg.c:792:18
8800B	  %78:gpr32common = LDRWroX %1:gpr64common, %77:gpr64, 0, 1, debug-location !1739 :: (load 4 from %ir.arrayidx276); cg.c:792:11
8816B	  %79:gpr32common = SUBWri %78:gpr32common, 1, 0, debug-location !1740; cg.c:792:25
8832B	  STRWui %79:gpr32common, %stack.19.nza, 0, debug-location !1741 :: (store 4 into %ir.nza); cg.c:792:9
8848B	  RET_ReallyLR debug-location !1742; cg.c:793:1

# End machine code for function sparse.

Before post-MI-sched:
# Machine code for function sparse: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-4: size=8, align=8, fixed, at location [SP+24]
  fi#-3: size=4, align=16, fixed, at location [SP+16]
  fi#-2: size=4, align=8, fixed, at location [SP+8]
  fi#-1: size=8, align=16, fixed, at location [SP]
  fi#0: size=8, align=8, at location [SP-72]
  fi#1: size=8, align=8, at location [SP-80]
  fi#2: size=8, align=8, at location [SP-88]
  fi#3: size=4, align=4, at location [SP-92]
  fi#4: size=4, align=4, at location [SP-96]
  fi#5: size=4, align=4, at location [SP-100]
  fi#6: size=8, align=8, at location [SP-112]
  fi#7: size=8, align=8, at location [SP-120]
  fi#8: dead
  fi#9: dead
  fi#10: dead
  fi#11: dead
  fi#12: size=8, align=8, at location [SP-128]
  fi#13: size=8, align=8, at location [SP-136]
  fi#14: size=4, align=4, at location [SP-140]
  fi#15: size=4, align=4, at location [SP-144]
  fi#16: size=4, align=4, at location [SP-148]
  fi#17: size=4, align=4, at location [SP-152]
  fi#18: size=4, align=4, at location [SP-156]
  fi#19: size=4, align=4, at location [SP-160]
  fi#20: size=4, align=4, at location [SP-164]
  fi#21: size=4, align=4, at location [SP-168]
  fi#22: size=4, align=4, at location [SP-172]
  fi#23: size=4, align=4, at location [SP-176]
  fi#24: size=8, align=8, at location [SP-184]
  fi#25: size=8, align=8, at location [SP-192]
  fi#26: size=8, align=8, at location [SP-200]
  fi#27: size=8, align=8, at location [SP-208]
  fi#28: size=4, align=4, at location [SP-212]
  fi#29: size=8, align=8, at location [SP-8]
  fi#30: size=8, align=8, at location [SP-16]
  fi#31: size=8, align=8, at location [SP-24]
  fi#32: size=8, align=8, at location [SP-32]
  fi#33: size=8, align=8, at location [SP-40]
  fi#34: size=8, align=8, at location [SP-48]
  fi#35: size=8, align=16, at location [SP-64]
Function Live Ins: $x0, $x1, $x2, $w3, $w4, $w5, $x6, $x7, $d0, $d1

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $d0, $d1, $w3, $w4, $w5, $x0, $x1, $x2, $x6, $x7, $x23, $x21, $x22, $x19, $x20, $lr
  $sp = frame-setup SUBXri $sp, 224, 0
  frame-setup STRXui killed $x23, $sp, 20 :: (store 8 into %stack.35)
  frame-setup STPXi killed $x22, killed $x21, $sp, 22 :: (store 8 into %stack.34), (store 8 into %stack.33)
  frame-setup STPXi killed $x20, killed $x19, $sp, 24 :: (store 8 into %stack.32), (store 8 into %stack.31)
  frame-setup STPXi killed $fp, killed $lr, $sp, 26 :: (store 8 into %stack.30), (store 8 into %stack.29)
  $fp = frame-setup ADDXri $sp, 208, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  frame-setup CFI_INSTRUCTION offset $w19, -24
  frame-setup CFI_INSTRUCTION offset $w20, -32
  frame-setup CFI_INSTRUCTION offset $w21, -40
  frame-setup CFI_INSTRUCTION offset $w22, -48
  frame-setup CFI_INSTRUCTION offset $w23, -64
  $x20 = SUBXri $fp, 64, 0
  STURXi killed renamable $x2, $fp, -72 :: (store 8 into %ir.rowstr.addr)
  STPWi renamable $w4, renamable $w3, $fp, -20 :: (store 4 into %ir.n.addr), (store 4 into %ir.nz.addr)
  STURWi killed renamable $w5, $fp, -84 :: (store 4 into %ir.nozer.addr)
  STURXi killed renamable $x6, $fp, -96 :: (store 8 into %ir.arow.addr)
  STRXui killed renamable $x7, $sp, 13 :: (store 8 into %ir.acol.addr)
  STPDi renamable $d1, renamable $d0, $sp, 11 :: (store 8 into %ir.rcond.addr), (store 8 into %ir.shift.addr)
  renamable $w8 = LDRWui $fp, 8, debug-location !1285 :: (dereferenceable load 4 from %ir.lastrow.addr, align 16); cg.c:659:13
  renamable $w9 = LDRWui $fp, 6, debug-location !1286 :: (dereferenceable load 4 from %ir.firstrow.addr, align 8); cg.c:659:23
  STPXi renamable $x1, renamable $x0, renamable $x20, 0 :: (store 8 into %ir.colidx.addr), (store 8 into %ir.a.addr)
  $w8 = SUBWrs killed renamable $w8, killed renamable $w9, 0, debug-location !1287; cg.c:659:21
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !1288; cg.c:659:32
  STRWui killed renamable $w8, $sp, 21, debug-location !1289 :: (store 4 into %ir.nrows); cg.c:659:11
  STRWui $wzr, $sp, 19, debug-location !1290 :: (store 4 into %ir.j); cg.c:664:12

bb.1.for.cond:
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $x20
  renamable $w8 = LDRWui $sp, 21, debug-location !1295 :: (dereferenceable load 4 from %ir.nrows); cg.c:664:21
  renamable $w9 = LDRWui $sp, 19, debug-location !1293 :: (dereferenceable load 4 from %ir.j); cg.c:664:17
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !1296; cg.c:664:27
  $wzr = SUBSWrs killed renamable $w9, killed renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1298; cg.c:664:5
  Bcc 10, %bb.3, implicit $nzcv, debug-location !1298; cg.c:664:5

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $x20
  renamable $x8 = LDURXi $fp, -72, debug-location !1299 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:665:9
  renamable $x9 = LDRSWui $sp, 19, debug-location !1301 :: (dereferenceable load 4 from %ir.j); cg.c:665:16
  STRWroX $wzr, killed renamable $x8, killed renamable $x9, 0, 1, debug-location !1302 :: (store 4 into %ir.arrayidx); cg.c:665:19
  renamable $w8 = LDRWui $sp, 19, debug-location !1303 :: (dereferenceable load 4 from %ir.j); cg.c:664:33
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !1303; cg.c:664:33
  STRWui killed renamable $w8, $sp, 19, debug-location !1303 :: (store 4 into %ir.j); cg.c:664:33
  B %bb.1

bb.3.for.end:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $x20
  STRWui $wzr, $sp, 20, debug-location !1307 :: (store 4 into %ir.i); cg.c:668:12
  $w8 = MOVZWi 56, 0, implicit-def $x8

bb.4.for.cond2:
; predecessors: %bb.3, %bb.8
  successors: %bb.5(0x7c000000), %bb.9(0x04000000); %bb.5(96.88%), %bb.9(3.12%)
  liveins: $x8, $x20
  renamable $w9 = LDRWui $sp, 20, debug-location !1310 :: (dereferenceable load 4 from %ir.i); cg.c:668:17
  renamable $w10 = LDURWi $fp, -76, debug-location !1312 :: (dereferenceable load 4 from %ir.n.addr); cg.c:668:21
  $wzr = SUBSWrs killed renamable $w9, killed renamable $w10, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1314; cg.c:668:5
  Bcc 10, %bb.9, implicit $nzcv, debug-location !1314; cg.c:668:5

bb.5.for.body4:
; predecessors: %bb.4
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $x8, $x20
  STRWui $wzr, $sp, 16, debug-location !1315 :: (store 4 into %ir.nza); cg.c:669:18

bb.6.for.cond5:
; predecessors: %bb.5, %bb.7
  successors: %bb.7(0x7c000000), %bb.8(0x04000000); %bb.7(96.88%), %bb.8(3.12%)
  liveins: $x8, $x20
  renamable $x9 = LDURXi $fp, -96, debug-location !1321 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:669:29
  renamable $x10 = LDRSWui $sp, 20, debug-location !1322 :: (dereferenceable load 4 from %ir.i); cg.c:669:34
  renamable $w11 = LDRWui $sp, 16, debug-location !1319 :: (dereferenceable load 4 from %ir.nza); cg.c:669:23
  renamable $w9 = LDRWroX killed renamable $x9, killed renamable $x10, 0, 1, debug-location !1321 :: (load 4 from %ir.arrayidx7); cg.c:669:29
  $wzr = SUBSWrs killed renamable $w11, killed renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1324; cg.c:669:9
  Bcc 10, %bb.8, implicit $nzcv, debug-location !1324; cg.c:669:9

bb.7.for.body9:
; predecessors: %bb.6
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $x8, $x20
  renamable $x9 = LDRXui $sp, 13, debug-location !1325 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:670:17
  renamable $x10 = LDRSWui $sp, 20, debug-location !1327 :: (dereferenceable load 4 from %ir.i); cg.c:670:22
  renamable $x11 = LDRSWui $sp, 16, debug-location !1328 :: (dereferenceable load 4 from %ir.nza); cg.c:670:25
  renamable $x9 = MADDXrrr renamable $x10, renamable $x8, killed renamable $x9, debug-location !1325; cg.c:670:17
  renamable $w9 = LDRWroX killed renamable $x9, killed renamable $x11, 0, 1, debug-location !1325 :: (load 4 from %ir.arrayidx13); cg.c:670:17
  renamable $x11 = LDURXi $fp, -72, debug-location !1331 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:671:25
  renamable $x12 = LDURXi $fp, -96, debug-location !1333 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:671:37
  renamable $w9 = nsw ADDWri killed renamable $w9, 1, 0, implicit-def $x9, debug-location !1329; cg.c:670:30
  STRWui renamable $w9, $sp, 19, debug-location !1330 :: (store 4 into %ir.j); cg.c:670:15
  renamable $x9 = SBFMXri killed renamable $x9, 62, 31, debug-location !1331; cg.c:671:25
  renamable $w13 = LDRWroX renamable $x11, renamable $x9, 0, 0, debug-location !1331 :: (load 4 from %ir.arrayidx16); cg.c:671:25
  renamable $w10 = LDRWroX killed renamable $x12, killed renamable $x10, 0, 1, debug-location !1333 :: (load 4 from %ir.arrayidx18); cg.c:671:37
  $w10 = ADDWrs killed renamable $w13, killed renamable $w10, 0, debug-location !1335; cg.c:671:35
  STRWroX killed renamable $w10, killed renamable $x11, killed renamable $x9, 0, 0, debug-location !1338 :: (store 4 into %ir.arrayidx21); cg.c:671:23
  renamable $w9 = LDRWui $sp, 16, debug-location !1339 :: (dereferenceable load 4 from %ir.nza); cg.c:669:41
  renamable $w9 = nsw ADDWri killed renamable $w9, 1, 0, debug-location !1339; cg.c:669:41
  STRWui killed renamable $w9, $sp, 16, debug-location !1339 :: (store 4 into %ir.nza); cg.c:669:41
  B %bb.6

bb.8.for.inc25:
; predecessors: %bb.6
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $x8, $x20
  renamable $w9 = LDRWui $sp, 20, debug-location !1343 :: (dereferenceable load 4 from %ir.i); cg.c:668:25
  renamable $w9 = nsw ADDWri killed renamable $w9, 1, 0, debug-location !1343; cg.c:668:25
  STRWui killed renamable $w9, $sp, 20, debug-location !1343 :: (store 4 into %ir.i); cg.c:668:25
  B %bb.4

bb.9.for.end27:
; predecessors: %bb.4
  successors: %bb.10(0x80000000); %bb.10(100.00%)
  liveins: $x20
  renamable $x8 = LDURXi $fp, -72, debug-location !1347 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:675:5
  $w9 = MOVZWi 1, 0
  STRWui $wzr, killed renamable $x8, 0, debug-location !1348 :: (store 4 into %ir.arrayidx281); cg.c:675:15
  STRWui killed renamable $w9, $sp, 19, debug-location !1349 :: (store 4 into %ir.j); cg.c:676:12

bb.10.for.cond29:
; predecessors: %bb.9, %bb.11
  successors: %bb.11(0x7c000000), %bb.12(0x04000000); %bb.11(96.88%), %bb.12(3.12%)
  liveins: $x20
  renamable $w9 = LDRWui $sp, 21, debug-location !1354 :: (dereferenceable load 4 from %ir.nrows); cg.c:676:21
  renamable $w10 = LDRWui $sp, 19, debug-location !1352 :: (dereferenceable load 4 from %ir.j); cg.c:676:17
  renamable $x8 = LDURXi $fp, -72, debug-location !1357 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:0
  renamable $w9 = nsw ADDWri killed renamable $w9, 1, 0, debug-location !1355; cg.c:676:27
  $wzr = SUBSWrs killed renamable $w10, killed renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1358; cg.c:676:5
  Bcc 10, %bb.12, implicit $nzcv, debug-location !1358; cg.c:676:5

bb.11.for.body32:
; predecessors: %bb.10
  successors: %bb.10(0x80000000); %bb.10(100.00%)
  liveins: $x8, $x20
  renamable $x9 = LDRSWui $sp, 19, debug-location !1359 :: (dereferenceable load 4 from %ir.j); cg.c:677:28
  renamable $x10 = LDURXi $fp, -72, debug-location !1362 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:677:33
  renamable $x9 = UBFMXri killed renamable $x9, 62, 61, debug-location !1361; cg.c:677:21
  renamable $w8 = LDRWroX killed renamable $x8, renamable $x9, 0, 0, debug-location !1361 :: (load 4 from %ir.arrayidx34); cg.c:677:21
  $x9 = ADDXrs killed renamable $x10, killed renamable $x9, 0, debug-location !1366; cg.c:677:9
  renamable $w10 = LDURWi renamable $x9, -4, debug-location !1362 :: (load 4 from %ir.arrayidx37); cg.c:677:33
  $w8 = ADDWrs killed renamable $w8, killed renamable $w10, 0, debug-location !1365; cg.c:677:31
  STRWui killed renamable $w8, killed renamable $x9, 0, debug-location !1368 :: (store 4 into %ir.arrayidx40); cg.c:677:19
  renamable $w8 = LDRWui $sp, 19, debug-location !1369 :: (dereferenceable load 4 from %ir.j); cg.c:676:33
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !1369; cg.c:676:33
  STRWui killed renamable $w8, $sp, 19, debug-location !1369 :: (store 4 into %ir.j); cg.c:676:33
  B %bb.10

bb.12.for.end43:
; predecessors: %bb.10
  successors: %bb.13(0x40000000), %bb.14(0x40000000); %bb.13(50.00%), %bb.14(50.00%)
  liveins: $x8, $x20
  renamable $x9 = LDRSWui $sp, 21, debug-location !1373 :: (dereferenceable load 4 from %ir.nrows); cg.c:679:18
  renamable $w8 = LDRWroX killed renamable $x8, killed renamable $x9, 0, 1, debug-location !1374 :: (load 4 from %ir.arrayidx45); cg.c:679:11
  renamable $w9 = LDURWi $fp, -80, debug-location !1379 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:685:15
  renamable $w8 = SUBWri killed renamable $w8, 1, 0, debug-location !1375; cg.c:679:25
  $wzr = SUBSWrs renamable $w8, killed renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1381; cg.c:685:9
  STRWui killed renamable $w8, $sp, 16, debug-location !1376 :: (store 4 into %ir.nza); cg.c:679:9
  Bcc 13, %bb.14, implicit $nzcv, debug-location !1381; cg.c:685:9

bb.13.if.then:
; predecessors: %bb.12
  successors: %bb.14(0x80000000); %bb.14(100.00%)
  liveins: $x20
  $x0 = ADRP target-flags(aarch64-page) @.str.37, debug-location !1382; cg.c:686:9
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.37, 0, debug-location !1382; cg.c:686:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !1382; cg.c:686:9
  renamable $w1 = LDRWui $sp, 16, debug-location !1384 :: (dereferenceable load 4 from %ir.nza); cg.c:687:41
  renamable $w2 = LDURWi $fp, -80, debug-location !1385 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:687:46
  $x0 = ADRP target-flags(aarch64-page) @.str.38, debug-location !1386; cg.c:687:9
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.38, 0, debug-location !1386; cg.c:687:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit-def $sp, implicit-def dead $w0, debug-location !1386; cg.c:687:9

bb.14.if.end:
; predecessors: %bb.12, %bb.13
  successors: %bb.15(0x80000000); %bb.15(100.00%)
  liveins: $x20
  STRWui $wzr, $sp, 19, debug-location !1388 :: (store 4 into %ir.j); cg.c:694:12
  $w8 = MOVNWi 0, 0

bb.15.for.cond49:
; predecessors: %bb.14, %bb.19
  successors: %bb.16(0x7c000000), %bb.20(0x04000000); %bb.16(96.88%), %bb.20(3.12%)
  liveins: $w8, $x20
  renamable $w9 = LDRWui $sp, 19, debug-location !1391 :: (dereferenceable load 4 from %ir.j); cg.c:694:17
  renamable $w10 = LDRWui $sp, 21, debug-location !1393 :: (dereferenceable load 4 from %ir.nrows); cg.c:694:21
  $wzr = SUBSWrs killed renamable $w9, killed renamable $w10, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1395; cg.c:694:5
  Bcc 10, %bb.20, implicit $nzcv, debug-location !1395; cg.c:694:5

bb.16.for.body51:
; predecessors: %bb.15
  successors: %bb.17(0x80000000); %bb.17(100.00%)
  liveins: $w8, $x20
  renamable $x9 = LDURXi $fp, -72, debug-location !1396 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:18
  renamable $x10 = LDRSWui $sp, 19, debug-location !1399 :: (dereferenceable load 4 from %ir.j); cg.c:695:25
  renamable $w9 = LDRWroX killed renamable $x9, killed renamable $x10, 0, 1, debug-location !1396 :: (load 4 from %ir.arrayidx53); cg.c:695:18

bb.17.for.cond54:
; predecessors: %bb.16, %bb.18
  successors: %bb.18(0x7c000000), %bb.19(0x04000000); %bb.18(96.88%), %bb.19(3.12%)
  liveins: $w8, $x20, $w9
  STRWui killed renamable $w9, $sp, 15, debug-location !DILocation(line: 0, scope: !1397) :: (store 4 into %ir.k); cg.c:0
  renamable $x9 = LDURXi $fp, -72, debug-location !1404 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:33
  renamable $x10 = LDRSWui $sp, 19, debug-location !1405 :: (dereferenceable load 4 from %ir.j); cg.c:695:40
  renamable $w11 = LDRWui $sp, 15, debug-location !1402 :: (dereferenceable load 4 from %ir.k); cg.c:695:29
  renamable $x9 = ADDXrs killed renamable $x9, killed renamable $x10, 2, debug-location !1404; cg.c:695:33
  renamable $w9 = LDRWui killed renamable $x9, 1, debug-location !1404 :: (load 4 from %ir.arrayidx57); cg.c:695:33
  $wzr = SUBSWrs killed renamable $w11, killed renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1408; cg.c:695:9
  Bcc 10, %bb.19, implicit $nzcv, debug-location !1408; cg.c:695:9

bb.18.for.body59:
; predecessors: %bb.17
  successors: %bb.17(0x80000000); %bb.17(100.00%)
  liveins: $w8, $x20
  renamable $x9 = LDRXui renamable $x20, 1, debug-location !1409 :: (dereferenceable load 8 from %ir.a.addr); cg.c:696:13
  renamable $x10 = LDRSWui $sp, 15, debug-location !1411 :: (dereferenceable load 4 from %ir.k); cg.c:696:15
  STRXroX $xzr, killed renamable $x9, killed renamable $x10, 0, 1, debug-location !1412 :: (store 8 into %ir.arrayidx61); cg.c:696:18
  renamable $x9 = LDRXui renamable $x20, 0, debug-location !1413 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:697:13
  renamable $x10 = LDRSWui $sp, 15, debug-location !1414 :: (dereferenceable load 4 from %ir.k); cg.c:697:20
  STRWroX renamable $w8, killed renamable $x9, killed renamable $x10, 0, 1, debug-location !1415 :: (store 4 into %ir.arrayidx63); cg.c:697:23
  renamable $w9 = LDRWui $sp, 15, debug-location !1416 :: (dereferenceable load 4 from %ir.k); cg.c:695:49
  renamable $w9 = nsw ADDWri killed renamable $w9, 1, 0, debug-location !1416; cg.c:695:49
  B %bb.17

bb.19.for.end66:
; predecessors: %bb.17
  successors: %bb.15(0x80000000); %bb.15(100.00%)
  liveins: $w8, $x20
  renamable $x9 = LDRXui $fp, 5, debug-location !1420 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:699:9
  renamable $x10 = LDRSWui $sp, 19, debug-location !1421 :: (dereferenceable load 4 from %ir.j); cg.c:699:15
  STRWroX $wzr, killed renamable $x9, killed renamable $x10, 0, 1, debug-location !1422 :: (store 4 into %ir.arrayidx68); cg.c:699:18
  renamable $w9 = LDRWui $sp, 19, debug-location !1423 :: (dereferenceable load 4 from %ir.j); cg.c:694:29
  renamable $w9 = nsw ADDWri killed renamable $w9, 1, 0, debug-location !1423; cg.c:694:29
  STRWui killed renamable $w9, $sp, 19, debug-location !1423 :: (store 4 into %ir.j); cg.c:694:29
  B %bb.15

bb.20.for.end71:
; predecessors: %bb.15
  successors: %bb.21(0x80000000); %bb.21(100.00%)
  liveins: $x20
  renamable $s1 = LDURSi $fp, -76, implicit-def $d1, debug-location !1430 :: (dereferenceable load 4 from %ir.n.addr); cg.c:706:31
  $x8 = MOVZXi 16368, 48
  renamable $d0 = LDRDui $sp, 12, debug-location !1428 :: (dereferenceable load 8 from %ir.rcond.addr); cg.c:706:17
  STRXui killed renamable $x8, $sp, 5, debug-location !1427 :: (store 8 into %ir.size); cg.c:705:10
  renamable $q1 = SSHLLv2i32_shift killed renamable $d1, 0, debug-location !1430; cg.c:706:31
  renamable $d1 = SCVTFv1i64 renamable $d1, implicit killed $q1, debug-location !1430; cg.c:706:31
  renamable $d2 = FMOVDi 112
  renamable $d1 = FDIVDrr killed renamable $d2, killed renamable $d1, debug-location !1431; cg.c:706:29
  BL @pow, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $d1, implicit-def $sp, implicit-def $d0, debug-location !1432; cg.c:706:13
  STRDui killed renamable $d0, $sp, 3, debug-location !1433 :: (store 8 into %ir.ratio); cg.c:706:11
  STRWui $wzr, $sp, 20, debug-location !1434 :: (store 4 into %ir.i); cg.c:708:12
  $w21 = MOVZWi 56, 0, implicit-def $x21
  $w22 = MOVZWi 112, 0, implicit-def $x22
  $w23 = MOVZWi 1, 0
  $x19 = ADRP target-flags(aarch64-page) @.str.39
  renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str.39, 0

bb.21.for.cond73:
; predecessors: %bb.20, %bb.48
  successors: %bb.22(0x7c000000), %bb.49(0x04000000); %bb.22(96.88%), %bb.49(3.12%)
  liveins: $w23, $x19, $x20, $x21, $x22
  renamable $w8 = LDRWui $sp, 20, debug-location !1437 :: (dereferenceable load 4 from %ir.i); cg.c:708:17
  renamable $w9 = LDURWi $fp, -76, debug-location !1439 :: (dereferenceable load 4 from %ir.n.addr); cg.c:708:21
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1441; cg.c:708:5
  Bcc 10, %bb.49, implicit $nzcv, debug-location !1441; cg.c:708:5

bb.22.for.body76:
; predecessors: %bb.21
  successors: %bb.23(0x80000000); %bb.23(100.00%)
  liveins: $w23, $x19, $x20, $x21, $x22
  STRWui $wzr, $sp, 16, debug-location !1442 :: (store 4 into %ir.nza); cg.c:709:18

bb.23.for.cond77:
; predecessors: %bb.22, %bb.47
  successors: %bb.24(0x7c000000), %bb.48(0x04000000); %bb.24(96.88%), %bb.48(3.12%)
  liveins: $w23, $x19, $x20, $x21, $x22
  renamable $x8 = LDURXi $fp, -96, debug-location !1448 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:709:29
  renamable $x9 = LDRSWui $sp, 20, debug-location !1449 :: (dereferenceable load 4 from %ir.i); cg.c:709:34
  renamable $w10 = LDRWui $sp, 16, debug-location !1446 :: (dereferenceable load 4 from %ir.nza); cg.c:709:23
  renamable $w8 = LDRWroX killed renamable $x8, killed renamable $x9, 0, 1, debug-location !1448 :: (load 4 from %ir.arrayidx79); cg.c:709:29
  $wzr = SUBSWrs killed renamable $w10, killed renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1451; cg.c:709:9
  Bcc 10, %bb.48, implicit $nzcv, debug-location !1451; cg.c:709:9

bb.24.for.body82:
; predecessors: %bb.23
  successors: %bb.25(0x80000000); %bb.25(100.00%)
  liveins: $w23, $x19, $x20, $x21, $x22
  renamable $x8 = LDRXui $sp, 13, debug-location !1452 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:710:17
  renamable $x9 = LDRSWui $sp, 20, debug-location !1454 :: (dereferenceable load 4 from %ir.i); cg.c:710:22
  renamable $x10 = LDRSWui $sp, 16, debug-location !1455 :: (dereferenceable load 4 from %ir.nza); cg.c:710:25
  renamable $x11 = LDRXui $fp, 2, debug-location !1458 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:712:28
  renamable $x8 = MADDXrrr renamable $x9, renamable $x21, killed renamable $x8, debug-location !1452; cg.c:710:17
  renamable $w8 = LDRWroX killed renamable $x8, renamable $x10, 0, 1, debug-location !1452 :: (load 4 from %ir.arrayidx86); cg.c:710:17
  renamable $d0 = LDRDui $sp, 5, debug-location !1457 :: (dereferenceable load 8 from %ir.size); cg.c:712:21
  renamable $x9 = MADDXrrr killed renamable $x9, renamable $x22, killed renamable $x11, debug-location !1458; cg.c:712:28
  STRWui killed renamable $w8, $sp, 19, debug-location !1456 :: (store 4 into %ir.j); cg.c:710:15
  renamable $d1 = LDRDroX killed renamable $x9, killed renamable $x10, 0, 1, debug-location !1458 :: (load 8 from %ir.arrayidx90); cg.c:712:28
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1, debug-location !1461; cg.c:712:26
  STRDui killed renamable $d0, $sp, 4, debug-location !1462 :: (store 8 into %ir.scale); cg.c:712:19
  STRWui $wzr, $sp, 13, debug-location !1463 :: (store 4 into %ir.nzrow); cg.c:713:24

bb.25.for.cond91:
; predecessors: %bb.24, %bb.46
  successors: %bb.26(0x7c000000), %bb.47(0x04000000); %bb.26(96.88%), %bb.47(3.12%)
  liveins: $w23, $x19, $x20, $x21, $x22
  renamable $x8 = LDURXi $fp, -96, debug-location !1468 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:713:37
  renamable $x9 = LDRSWui $sp, 20, debug-location !1469 :: (dereferenceable load 4 from %ir.i); cg.c:713:42
  renamable $w10 = LDRWui $sp, 13, debug-location !1466 :: (dereferenceable load 4 from %ir.nzrow); cg.c:713:29
  renamable $w8 = LDRWroX killed renamable $x8, killed renamable $x9, 0, 1, debug-location !1468 :: (load 4 from %ir.arrayidx93); cg.c:713:37
  $wzr = SUBSWrs killed renamable $w10, killed renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1471; cg.c:713:13
  Bcc 10, %bb.47, implicit $nzcv, debug-location !1471; cg.c:713:13

bb.26.for.body96:
; predecessors: %bb.25
  successors: %bb.27(0x40000000), %bb.29(0x40000000); %bb.27(50.00%), %bb.29(50.00%)
  liveins: $w23, $x19, $x20, $x21, $x22
  renamable $x8 = LDRXui $sp, 13, debug-location !1472 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:714:24
  renamable $x9 = LDRSWui $sp, 20, debug-location !1474 :: (dereferenceable load 4 from %ir.i); cg.c:714:29
  renamable $x10 = LDRSWui $sp, 13, debug-location !1475 :: (dereferenceable load 4 from %ir.nzrow); cg.c:714:32
  renamable $x11 = LDRXui $fp, 2, debug-location !1477 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:715:22
  renamable $x8 = MADDXrrr renamable $x9, renamable $x21, killed renamable $x8, debug-location !1472; cg.c:714:24
  renamable $w8 = LDRWroX killed renamable $x8, renamable $x10, 0, 1, debug-location !1472 :: (load 4 from %ir.arrayidx100); cg.c:714:24
  renamable $d0 = LDRDui $sp, 4, debug-location !1480 :: (dereferenceable load 8 from %ir.scale); cg.c:715:39
  renamable $x9 = MADDXrrr killed renamable $x9, renamable $x22, killed renamable $x11, debug-location !1477; cg.c:715:22
  STRWui renamable $w8, $sp, 12, debug-location !1476 :: (store 4 into %ir.jcol); cg.c:714:22
  renamable $d1 = LDRDroX killed renamable $x9, killed renamable $x10, 0, 1, debug-location !1477 :: (load 8 from %ir.arrayidx104); cg.c:715:22
  renamable $w9 = LDRWui $sp, 19, debug-location !1485 :: (dereferenceable load 4 from %ir.j); cg.c:721:29
  renamable $d0 = FMULDrr killed renamable $d1, killed renamable $d0, debug-location !1481; cg.c:715:37
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1487; cg.c:721:31
  STRDui killed renamable $d0, $sp, 2, debug-location !1482 :: (store 8 into %ir.va); cg.c:715:20
  Bcc 1, %bb.29, implicit $nzcv, debug-location !1487; cg.c:721:31

bb.27.land.lhs.true:
; predecessors: %bb.26
  successors: %bb.28(0x40000000), %bb.29(0x40000000); %bb.28(50.00%), %bb.29(50.00%)
  liveins: $w23, $x19, $x20, $x21, $x22
  renamable $w8, renamable $w9 = LDPWi $sp, 19, debug-location !1488 :: (dereferenceable load 4 from %ir.j), (dereferenceable load 4 from %ir.i); cg.c:721:34
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1491; cg.c:721:21
  Bcc 1, %bb.29, implicit $nzcv, debug-location !1491; cg.c:721:21

bb.28.if.then110:
; predecessors: %bb.27
  successors: %bb.29(0x80000000); %bb.29(100.00%)
  liveins: $w23, $x19, $x20, $x21, $x22
  renamable $d0 = LDRDui $sp, 2, debug-location !1492 :: (dereferenceable load 8 from %ir.va); cg.c:722:26
  renamable $d2, renamable $d1 = LDPDi $sp, 11, debug-location !1494 :: (dereferenceable load 8 from %ir.rcond.addr), (dereferenceable load 8 from %ir.shift.addr); cg.c:722:31
  renamable $d0 = FADDDrr killed renamable $d0, killed renamable $d1, debug-location !1495; cg.c:722:29
  renamable $d0 = FSUBDrr killed renamable $d0, killed renamable $d2, debug-location !1497; cg.c:722:37
  STRDui killed renamable $d0, $sp, 2, debug-location !1498 :: (store 8 into %ir.va); cg.c:722:24

bb.29.if.end113:
; predecessors: %bb.26, %bb.27, %bb.28
  successors: %bb.30(0x80000000); %bb.30(100.00%)
  liveins: $w23, $x19, $x20, $x21, $x22
  renamable $x8 = LDURXi $fp, -72, debug-location !1501 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:26
  renamable $x9 = LDRSWui $sp, 19, debug-location !1503 :: (dereferenceable load 4 from %ir.j); cg.c:726:33
  STRWui $wzr, $sp, 3, debug-location !1500 :: (store 4 into %ir.cont40); cg.c:725:24
  renamable $w8 = LDRWroX killed renamable $x8, killed renamable $x9, 0, 1, debug-location !1501 :: (load 4 from %ir.arrayidx115); cg.c:726:26

bb.30.for.cond116:
; predecessors: %bb.29, %bb.41
  successors: %bb.31(0x7c000000), %bb.44(0x04000000); %bb.31(96.88%), %bb.44(3.12%)
  liveins: $w23, $x19, $x20, $x21, $x22, $w8
  STRWui killed renamable $w8, $sp, 15, debug-location !DILocation(line: 0, scope: !1502) :: (store 4 into %ir.k); cg.c:0
  renamable $x8 = LDURXi $fp, -72, debug-location !1508 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:41
  renamable $x9 = LDRSWui $sp, 19, debug-location !1509 :: (dereferenceable load 4 from %ir.j); cg.c:726:48
  renamable $w10 = LDRWui $sp, 15, debug-location !1506 :: (dereferenceable load 4 from %ir.k); cg.c:726:37
  renamable $x8 = ADDXrs killed renamable $x8, killed renamable $x9, 2, debug-location !1508; cg.c:726:41
  renamable $w8 = LDRWui killed renamable $x8, 1, debug-location !1508 :: (load 4 from %ir.arrayidx119); cg.c:726:41
  $wzr = SUBSWrs killed renamable $w10, killed renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1512; cg.c:726:17
  Bcc 10, %bb.44, implicit $nzcv, debug-location !1512; cg.c:726:17

bb.31.for.body122:
; predecessors: %bb.30
  successors: %bb.32(0x04000000), %bb.37(0x7c000000); %bb.32(3.12%), %bb.37(96.88%)
  liveins: $w23, $x19, $x20, $x21, $x22
  renamable $x8 = LDRXui renamable $x20, 0, debug-location !1513 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:727:25
  renamable $x9 = LDRSWui $sp, 15, debug-location !1516 :: (dereferenceable load 4 from %ir.k); cg.c:727:32
  renamable $w8 = LDRWroX killed renamable $x8, killed renamable $x9, 0, 1, debug-location !1513 :: (load 4 from %ir.arrayidx124); cg.c:727:25
  renamable $w9 = LDRWui $sp, 12, debug-location !1517 :: (dereferenceable load 4 from %ir.jcol); cg.c:727:37
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1519; cg.c:727:25
  Bcc 13, %bb.37, implicit $nzcv, debug-location !1519; cg.c:727:25

bb.32.if.then127:
; predecessors: %bb.31
  successors: %bb.33(0x80000000); %bb.33(100.00%)
  liveins: $w23, $x19, $x20, $x21, $x22
  renamable $x8 = LDURXi $fp, -72, debug-location !1520 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:731:35
  renamable $x9 = LDRSWui $sp, 19, debug-location !1523 :: (dereferenceable load 4 from %ir.j); cg.c:731:42
  renamable $x8 = ADDXrs killed renamable $x8, killed renamable $x9, 2, debug-location !1520; cg.c:731:35
  renamable $w8 = LDRWui killed renamable $x8, 1, debug-location !1520 :: (load 4 from %ir.arrayidx130); cg.c:731:35
  renamable $w8 = SUBWri killed renamable $w8, 2, 0, debug-location !1525; cg.c:731:49

bb.33.for.cond132:
; predecessors: %bb.32, %bb.36
  successors: %bb.34(0x7c000000), %bb.42(0x04000000); %bb.34(96.88%), %bb.42(3.12%)
  liveins: $w23, $x19, $x20, $x21, $x22, $w8
  STRWui renamable $w8, $sp, 14, debug-location !DILocation(line: 0, scope: !1521) :: (store 4 into %ir.kk); cg.c:0
  $w8 = ORRWrs $wzr, killed renamable $w8, 0, debug-location !1528; cg.c:731:54
  renamable $w9 = LDRWui $sp, 15, debug-location !1530 :: (dereferenceable load 4 from %ir.k); cg.c:731:60
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1532; cg.c:731:25
  Bcc 11, %bb.42, implicit $nzcv, debug-location !1532; cg.c:731:25

bb.34.for.body135:
; predecessors: %bb.33
  successors: %bb.35(0x50000000), %bb.36(0x30000000); %bb.35(62.50%), %bb.36(37.50%)
  liveins: $w23, $x19, $x20, $x21, $x22
  renamable $x8 = LDRXui renamable $x20, 0, debug-location !1533 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:732:33
  renamable $x9 = LDRSWui $sp, 14, debug-location !1536 :: (dereferenceable load 4 from %ir.kk); cg.c:732:40
  renamable $w8 = LDRWroX killed renamable $x8, killed renamable $x9, 0, 1, debug-location !1533 :: (load 4 from %ir.arrayidx137); cg.c:732:33
  TBNZW killed renamable $w8, 31, %bb.36, debug-location !1538; cg.c:732:33

bb.35.if.then140:
; predecessors: %bb.34
  successors: %bb.36(0x80000000); %bb.36(100.00%)
  liveins: $w23, $x19, $x20, $x21, $x22
  renamable $x8 = LDRXui renamable $x20, 1, debug-location !1539 :: (dereferenceable load 8 from %ir.a.addr); cg.c:733:45
  renamable $x9 = LDRSWui $sp, 14, debug-location !1541 :: (dereferenceable load 4 from %ir.kk); cg.c:733:47
  renamable $x8 = ADDXrs killed renamable $x8, killed renamable $x9, 3, debug-location !1539; cg.c:733:45
  renamable $d0 = LDRDui renamable $x8, 0, debug-location !1539 :: (load 8 from %ir.arrayidx142); cg.c:733:45
  STRDui killed renamable $d0, killed renamable $x8, 1, debug-location !1545 :: (store 8 into %ir.arrayidx145); cg.c:733:43
  renamable $x8 = LDRXui renamable $x20, 0, debug-location !1546 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:734:50
  renamable $x9 = LDRSWui $sp, 14, debug-location !1547 :: (dereferenceable load 4 from %ir.kk); cg.c:734:57
  renamable $x8 = ADDXrs killed renamable $x8, killed renamable $x9, 2, debug-location !1546; cg.c:734:50
  renamable $w9 = LDRWui renamable $x8, 0, debug-location !1546 :: (load 4 from %ir.arrayidx147); cg.c:734:50
  STRWui killed renamable $w9, killed renamable $x8, 1, debug-location !1551 :: (store 4 into %ir.arrayidx150); cg.c:734:48

bb.36.for.inc152:
; predecessors: %bb.34, %bb.35
  successors: %bb.33(0x80000000); %bb.33(100.00%)
  liveins: $w23, $x19, $x20, $x21, $x22
  renamable $w8 = LDRWui $sp, 14, debug-location !1553 :: (dereferenceable load 4 from %ir.kk); cg.c:731:65
  renamable $w8 = nsw SUBWri killed renamable $w8, 1, 0, debug-location !1553; cg.c:731:65
  B %bb.33

bb.37.if.else:
; predecessors: %bb.31
  successors: %bb.38(0x04000000), %bb.39(0x7c000000); %bb.38(3.12%), %bb.39(96.88%)
  liveins: $w23, $x19, $x20, $x21, $x22
  renamable $x8 = LDRXui renamable $x20, 0, debug-location !1566 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:742:30
  renamable $x9 = LDRSWui $sp, 15, debug-location !1568 :: (dereferenceable load 4 from %ir.k); cg.c:742:37
  renamable $w8 = LDRWroX killed renamable $x8, killed renamable $x9, 0, 1, debug-location !1566 :: (load 4 from %ir.arrayidx159); cg.c:742:30
  dead $wzr = ADDSWri killed renamable $w8, 1, 0, implicit-def $nzcv, debug-location !1570; cg.c:742:30
  Bcc 1, %bb.39, implicit $nzcv, debug-location !1570; cg.c:742:30

bb.38.if.then162:
; predecessors: %bb.37
  successors: %bb.43(0x80000000); %bb.43(100.00%)
  liveins: $w23, $x19, $x20, $x21, $x22
  renamable $w8 = LDRWui $sp, 12, debug-location !1571 :: (dereferenceable load 4 from %ir.jcol); cg.c:743:37
  renamable $x9 = LDRXui renamable $x20, 0, debug-location !1573 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:743:25
  renamable $x10 = LDRSWui $sp, 15, debug-location !1574 :: (dereferenceable load 4 from %ir.k); cg.c:743:32
  STRWroX killed renamable $w8, killed renamable $x9, killed renamable $x10, 0, 1, debug-location !1575 :: (store 4 into %ir.arrayidx164); cg.c:743:35
  B %bb.43

bb.39.if.else165:
; predecessors: %bb.37
  successors: %bb.40(0x04000000), %bb.41(0x7c000000); %bb.40(3.12%), %bb.41(96.88%)
  liveins: $w23, $x19, $x20, $x21, $x22
  renamable $x8 = LDRXui renamable $x20, 0, debug-location !1578 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:747:30
  renamable $x9 = LDRSWui $sp, 15, debug-location !1580 :: (dereferenceable load 4 from %ir.k); cg.c:747:37
  renamable $w8 = LDRWroX killed renamable $x8, killed renamable $x9, 0, 1, debug-location !1578 :: (load 4 from %ir.arrayidx167); cg.c:747:30
  renamable $w9 = LDRWui $sp, 12, debug-location !1581 :: (dereferenceable load 4 from %ir.jcol); cg.c:747:43
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1583; cg.c:747:30
  Bcc 1, %bb.41, implicit $nzcv, debug-location !1583; cg.c:747:30

bb.40.if.then170:
; predecessors: %bb.39
  successors: %bb.43(0x80000000); %bb.43(100.00%)
  liveins: $w23, $x19, $x20, $x21, $x22
  renamable $x8 = LDRSWui $sp, 19, debug-location !1586 :: (dereferenceable load 4 from %ir.j); cg.c:751:42
  renamable $x9 = LDRXui $fp, 5, debug-location !1584 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:751:36
  renamable $x8 = UBFMXri killed renamable $x8, 62, 61, debug-location !1584; cg.c:751:36
  renamable $w10 = LDRWroX renamable $x9, renamable $x8, 0, 0, debug-location !1584 :: (load 4 from %ir.arrayidx172); cg.c:751:36
  renamable $w10 = nsw ADDWri killed renamable $w10, 1, 0, debug-location !1587; cg.c:751:45
  STRWroX killed renamable $w10, killed renamable $x9, killed renamable $x8, 0, 0, debug-location !1590 :: (store 4 into %ir.arrayidx175); cg.c:751:34
  B %bb.43

bb.41.for.inc179:
; predecessors: %bb.39
  successors: %bb.30(0x80000000); %bb.30(100.00%)
  liveins: $w23, $x19, $x20, $x21, $x22
  renamable $w8 = LDRWui $sp, 15, debug-location !1593 :: (dereferenceable load 4 from %ir.k); cg.c:726:57
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !1593; cg.c:726:57
  B %bb.30

bb.42.for.end153:
; predecessors: %bb.33
  successors: %bb.43(0x80000000); %bb.43(100.00%)
  liveins: $w23, $x19, $x20, $x21, $x22
  renamable $w8 = LDRWui $sp, 12, debug-location !1557 :: (dereferenceable load 4 from %ir.jcol); cg.c:737:37
  renamable $x9 = LDRXui renamable $x20, 0, debug-location !1558 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:737:25
  renamable $x10 = LDRSWui $sp, 15, debug-location !1559 :: (dereferenceable load 4 from %ir.k); cg.c:737:32
  STRWroX killed renamable $w8, killed renamable $x9, killed renamable $x10, 0, 1, debug-location !1560 :: (store 4 into %ir.arrayidx155); cg.c:737:35
  renamable $x8 = LDRXui renamable $x20, 1, debug-location !1561 :: (dereferenceable load 8 from %ir.a.addr); cg.c:738:25
  renamable $x9 = LDRSWui $sp, 15, debug-location !1562 :: (dereferenceable load 4 from %ir.k); cg.c:738:27
  STRXroX $xzr, killed renamable $x8, killed renamable $x9, 0, 1, debug-location !1563 :: (store 8 into %ir.arrayidx157); cg.c:738:30

bb.43.for.end181:
; predecessors: %bb.42, %bb.40, %bb.38
  successors: %bb.44(0x80000000); %bb.44(100.00%)
  liveins: $w23, $x19, $x20, $x21, $x22
  STRWui renamable $w23, $sp, 3, debug-location !DILocation(line: 0, scope: !1514) :: (store 4 into %ir.cont40); cg.c:0

bb.44.for.end181:
; predecessors: %bb.30, %bb.43
  successors: %bb.45(0x30000000), %bb.46(0x50000000); %bb.45(37.50%), %bb.46(62.50%)
  liveins: $w23, $x19, $x20, $x21, $x22
  renamable $w8 = LDRWui $sp, 3, debug-location !1597 :: (dereferenceable load 4 from %ir.cont40); cg.c:756:21
  CBNZW killed renamable $w8, %bb.46, debug-location !1600; cg.c:756:21

bb.45.if.then184:
; predecessors: %bb.44
  successors: %bb.46(0x80000000); %bb.46(100.00%)
  liveins: $w23, $x19, $x20, $x21, $x22
  renamable $w1 = LDRWui $sp, 20, debug-location !1601 :: (dereferenceable load 4 from %ir.i); cg.c:757:64
  $x0 = ORRXrs $xzr, $x19, 0, debug-location !1603; cg.c:757:21
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !1603; cg.c:757:21

bb.46.if.end186:
; predecessors: %bb.44, %bb.45
  successors: %bb.25(0x80000000); %bb.25(100.00%)
  liveins: $w23, $x19, $x20, $x21, $x22
  renamable $x8 = LDRSWui $sp, 15, debug-location !1606 :: (dereferenceable load 4 from %ir.k); cg.c:761:26
  renamable $x9 = LDRXui renamable $x20, 1, debug-location !1605 :: (dereferenceable load 8 from %ir.a.addr); cg.c:761:24
  renamable $x8 = UBFMXri killed renamable $x8, 61, 60, debug-location !1605; cg.c:761:24
  renamable $d0 = LDRDroX renamable $x9, renamable $x8, 0, 0, debug-location !1605 :: (load 8 from %ir.arrayidx188); cg.c:761:24
  renamable $d1 = LDRDui $sp, 2, debug-location !1607 :: (dereferenceable load 8 from %ir.va); cg.c:761:31
  renamable $d0 = FADDDrr killed renamable $d0, killed renamable $d1, debug-location !1608; cg.c:761:29
  STRDroX killed renamable $d0, killed renamable $x9, killed renamable $x8, 0, 0, debug-location !1611 :: (store 8 into %ir.arrayidx191); cg.c:761:22
  renamable $w8 = LDRWui $sp, 13, debug-location !1612 :: (dereferenceable load 4 from %ir.nzrow); cg.c:713:51
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !1612; cg.c:713:51
  STRWui killed renamable $w8, $sp, 13, debug-location !1612 :: (store 4 into %ir.nzrow); cg.c:713:51
  B %bb.25

bb.47.for.inc195:
; predecessors: %bb.25
  successors: %bb.23(0x80000000); %bb.23(100.00%)
  liveins: $w23, $x19, $x20, $x21, $x22
  renamable $w8 = LDRWui $sp, 16, debug-location !1616 :: (dereferenceable load 4 from %ir.nza); cg.c:709:41
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !1616; cg.c:709:41
  STRWui killed renamable $w8, $sp, 16, debug-location !1616 :: (store 4 into %ir.nza); cg.c:709:41
  B %bb.23

bb.48.for.end197:
; predecessors: %bb.23
  successors: %bb.21(0x80000000); %bb.21(100.00%)
  liveins: $w23, $x19, $x20, $x21, $x22
  renamable $d0 = LDRDui $sp, 5, debug-location !1620 :: (dereferenceable load 8 from %ir.size); cg.c:764:16
  renamable $d1 = LDRDui $sp, 3, debug-location !1621 :: (dereferenceable load 8 from %ir.ratio); cg.c:764:23
  renamable $w8 = LDRWui $sp, 20, debug-location !1624 :: (dereferenceable load 4 from %ir.i); cg.c:708:25
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1, debug-location !1622; cg.c:764:21
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !1624; cg.c:708:25
  STRDui killed renamable $d0, $sp, 5, debug-location !1623 :: (store 8 into %ir.size); cg.c:764:14
  STRWui killed renamable $w8, $sp, 20, debug-location !1624 :: (store 4 into %ir.i); cg.c:708:25
  B %bb.21

bb.49.for.end201:
; predecessors: %bb.21
  successors: %bb.50(0x80000000); %bb.50(100.00%)
  liveins: $x20
  $w8 = MOVZWi 1, 0

bb.50.for.cond202:
; predecessors: %bb.49, %bb.51
  successors: %bb.51(0x7c000000), %bb.52(0x04000000); %bb.51(96.88%), %bb.52(3.12%)
  liveins: $x20, $w8
  STRWui renamable $w8, $sp, 19, debug-location !DILocation(line: 0, scope: !1629) :: (store 4 into %ir.j); cg.c:0
  $w8 = ORRWrs $wzr, killed renamable $w8, 0, debug-location !1631; cg.c:770:17
  renamable $w9 = LDRWui $sp, 21, debug-location !1633 :: (dereferenceable load 4 from %ir.nrows); cg.c:770:21
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1635; cg.c:770:5
  Bcc 10, %bb.52, implicit $nzcv, debug-location !1635; cg.c:770:5

bb.51.for.body205:
; predecessors: %bb.50
  successors: %bb.50(0x80000000); %bb.50(100.00%)
  liveins: $x20
  renamable $x8 = LDRXui $fp, 5, debug-location !1636 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:771:20
  renamable $x9 = LDRSWui $sp, 19, debug-location !1638 :: (dereferenceable load 4 from %ir.j); cg.c:771:26
  renamable $x8 = ADDXrs killed renamable $x8, killed renamable $x9, 2, debug-location !1636; cg.c:771:20
  renamable $w10, renamable $w9 = LDPWi renamable $x8, -1, debug-location !1636 :: (load 4 from %ir.arrayidx207), (load 4 from %ir.arrayidx210); cg.c:771:20
  $w9 = ADDWrs killed renamable $w9, killed renamable $w10, 0, debug-location !1642; cg.c:771:29
  STRWui killed renamable $w9, killed renamable $x8, 0, debug-location !1645 :: (store 4 into %ir.arrayidx213); cg.c:771:18
  renamable $w8 = LDRWui $sp, 19, debug-location !1646 :: (dereferenceable load 4 from %ir.j); cg.c:770:29
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !1646; cg.c:770:29
  B %bb.50

bb.52.for.end216:
; predecessors: %bb.50
  successors: %bb.53(0x80000000); %bb.53(100.00%)
  liveins: $x20
  STRWui $wzr, $sp, 19, debug-location !1650 :: (store 4 into %ir.j); cg.c:774:12

bb.53.for.cond217:
; predecessors: %bb.52, %bb.60
  successors: %bb.54(0x7c000000), %bb.61(0x04000000); %bb.54(96.88%), %bb.61(3.12%)
  liveins: $x20
  renamable $w8 = LDRWui $sp, 19, debug-location !1653 :: (dereferenceable load 4 from %ir.j); cg.c:774:17
  renamable $w9 = LDRWui $sp, 21, debug-location !1655 :: (dereferenceable load 4 from %ir.nrows); cg.c:774:21
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1657; cg.c:774:5
  Bcc 10, %bb.61, implicit $nzcv, debug-location !1657; cg.c:774:5

bb.54.for.body220:
; predecessors: %bb.53
  successors: %bb.55(0x50000000), %bb.56(0x30000000); %bb.55(62.50%), %bb.56(37.50%)
  liveins: $x20
  renamable $w8 = LDRWui $sp, 19, debug-location !1658 :: (dereferenceable load 4 from %ir.j); cg.c:775:13
  dead $wzr = SUBSWri killed renamable $w8, 1, 0, implicit-def $nzcv, debug-location !1662; cg.c:775:13
  Bcc 11, %bb.56, implicit $nzcv, debug-location !1662; cg.c:775:13

bb.55.if.then223:
; predecessors: %bb.54
  successors: %bb.57(0x80000000); %bb.57(100.00%)
  liveins: $x20
  renamable $x8 = LDRSWui $sp, 19, debug-location !1665 :: (dereferenceable load 4 from %ir.j); cg.c:776:25
  renamable $x9 = LDURXi $fp, -72, debug-location !1663 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:776:18
  renamable $x10 = LDRXui $fp, 5, debug-location !1666 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:776:30
  renamable $x8 = UBFMXri killed renamable $x8, 62, 61, debug-location !1663; cg.c:776:18
  renamable $w9 = LDRWroX killed renamable $x9, renamable $x8, 0, 0, debug-location !1663 :: (load 4 from %ir.arrayidx225); cg.c:776:18
  $x8 = ADDXrs killed renamable $x8, killed renamable $x10, 0, debug-location !1666; cg.c:776:30
  renamable $w8 = LDURWi killed renamable $x8, -4, debug-location !1666 :: (load 4 from %ir.arrayidx228); cg.c:776:30
  $w8 = SUBWrs killed renamable $w9, killed renamable $w8, 0, debug-location !1669; cg.c:776:28
  STRWui killed renamable $w8, $sp, 18, debug-location !1670 :: (store 4 into %ir.j1); cg.c:776:16
  B %bb.57

bb.56.if.else230:
; predecessors: %bb.54
  successors: %bb.57(0x80000000); %bb.57(100.00%)
  liveins: $x20
  STRWui $wzr, $sp, 18, debug-location !1672 :: (store 4 into %ir.j1); cg.c:779:16

bb.57.if.end231:
; predecessors: %bb.56, %bb.55
  successors: %bb.58(0x80000000); %bb.58(100.00%)
  liveins: $x20
  renamable $x8 = LDRSWui $sp, 19, debug-location !1675 :: (dereferenceable load 4 from %ir.j); cg.c:781:21
  renamable $x9 = LDURXi $fp, -72, debug-location !1674 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:781:14
  renamable $x10 = LDRXui $fp, 5, debug-location !1677 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:781:30
  renamable $x8 = UBFMXri killed renamable $x8, 62, 61, debug-location !1681; cg.c:782:15
  $x9 = ADDXrs renamable $x8, killed renamable $x9, 0, debug-location !1674; cg.c:781:14
  renamable $w8 = LDRWroX killed renamable $x10, killed renamable $x8, 0, 0, debug-location !1677 :: (load 4 from %ir.arrayidx236); cg.c:781:30
  renamable $w10 = LDRWui renamable $x9, 1, debug-location !1674 :: (load 4 from %ir.arrayidx234); cg.c:781:14
  $w8 = SUBWrs killed renamable $w10, killed renamable $w8, 0, debug-location !1679; cg.c:781:28
  STRWui killed renamable $w8, $sp, 17, debug-location !1680 :: (store 4 into %ir.j2); cg.c:781:12
  renamable $w8 = LDRWui killed renamable $x9, 0, debug-location !1681 :: (load 4 from %ir.arrayidx239); cg.c:782:15
  renamable $w9 = LDRWui $sp, 18, debug-location !1684 :: (dereferenceable load 4 from %ir.j1); cg.c:783:18

bb.58.for.cond240:
; predecessors: %bb.57, %bb.59
  successors: %bb.59(0x7c000000), %bb.60(0x04000000); %bb.59(96.88%), %bb.60(3.12%)
  liveins: $x20, $w9, $w8
  STPWi renamable $w9, renamable $w8, $sp, 15, debug-location !DILocation(line: 0, scope: !1660) :: (store 4 into %ir.nza), (store 4 into %ir.k); cg.c:0
  $w8 = ORRWrs $wzr, killed renamable $w9, 0, debug-location !1688; cg.c:783:22
  renamable $w9 = LDRWui $sp, 17, debug-location !1690 :: (dereferenceable load 4 from %ir.j2); cg.c:783:26
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1692; cg.c:783:9
  Bcc 10, %bb.60, implicit $nzcv, debug-location !1692; cg.c:783:9

bb.59.for.body243:
; predecessors: %bb.58
  successors: %bb.58(0x80000000); %bb.58(100.00%)
  liveins: $x20
  renamable $x8 = LDRXui renamable $x20, 1, debug-location !1693 :: (dereferenceable load 8 from %ir.a.addr); cg.c:784:20
  renamable $x10, renamable $x9 = LDPSWi $sp, 15, debug-location !1695 :: (dereferenceable load 4 from %ir.nza), (dereferenceable load 4 from %ir.k); cg.c:784:22
  renamable $d0 = LDRDroX renamable $x8, killed renamable $x9, 0, 1, debug-location !1693 :: (load 8 from %ir.arrayidx245); cg.c:784:20
  STRDroX killed renamable $d0, killed renamable $x8, killed renamable $x10, 0, 1, debug-location !1698 :: (store 8 into %ir.arrayidx247); cg.c:784:18
  renamable $x8 = LDRXui renamable $x20, 0, debug-location !1699 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:785:25
  renamable $x10, renamable $x9 = LDPSWi $sp, 15, debug-location !1700 :: (dereferenceable load 4 from %ir.nza), (dereferenceable load 4 from %ir.k); cg.c:785:32
  renamable $w9 = LDRWroX renamable $x8, killed renamable $x9, 0, 1, debug-location !1699 :: (load 4 from %ir.arrayidx249); cg.c:785:25
  STRWroX killed renamable $w9, killed renamable $x8, killed renamable $x10, 0, 1, debug-location !1703 :: (store 4 into %ir.arrayidx251); cg.c:785:23
  renamable $w9, renamable $w8 = LDPWi $sp, 15, debug-location !1704 :: (dereferenceable load 4 from %ir.nza), (dereferenceable load 4 from %ir.k); cg.c:786:19
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !1705; cg.c:786:23
  renamable $w9 = nsw ADDWri killed renamable $w9, 1, 0, debug-location !1707; cg.c:783:31
  B %bb.58

bb.60.for.inc256:
; predecessors: %bb.58
  successors: %bb.53(0x80000000); %bb.53(100.00%)
  liveins: $x20
  renamable $w8 = LDRWui $sp, 19, debug-location !1711 :: (dereferenceable load 4 from %ir.j); cg.c:774:29
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !1711; cg.c:774:29
  STRWui killed renamable $w8, $sp, 19, debug-location !1711 :: (store 4 into %ir.j); cg.c:774:29
  B %bb.53

bb.61.for.end258:
; predecessors: %bb.53
  successors: %bb.62(0x80000000); %bb.62(100.00%)

  $w8 = MOVZWi 1, 0

bb.62.for.cond259:
; predecessors: %bb.61, %bb.63
  successors: %bb.63(0x7c000000), %bb.64(0x04000000); %bb.63(96.88%), %bb.64(3.12%)
  liveins: $w8
  STRWui renamable $w8, $sp, 19, debug-location !DILocation(line: 0, scope: !1716) :: (store 4 into %ir.j); cg.c:0
  renamable $w9 = LDRWui $sp, 21, debug-location !1720 :: (dereferenceable load 4 from %ir.nrows); cg.c:789:21
  $w10 = ORRWrs $wzr, killed renamable $w8, 0, debug-location !1718; cg.c:789:17
  renamable $x8 = LDURXi $fp, -72, debug-location !1357 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:0
  renamable $w9 = nsw ADDWri killed renamable $w9, 1, 0, debug-location !1721; cg.c:789:27
  $wzr = SUBSWrs killed renamable $w10, killed renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1723; cg.c:789:5
  Bcc 10, %bb.64, implicit $nzcv, debug-location !1723; cg.c:789:5

bb.63.for.body263:
; predecessors: %bb.62
  successors: %bb.62(0x80000000); %bb.62(100.00%)
  liveins: $x8
  renamable $x9 = LDRSWui $sp, 19, debug-location !1724 :: (dereferenceable load 4 from %ir.j); cg.c:790:28
  renamable $x10 = LDRXui $fp, 5, debug-location !1727 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:790:33
  renamable $x9 = UBFMXri killed renamable $x9, 62, 61, debug-location !1726; cg.c:790:21
  renamable $w8 = LDRWroX killed renamable $x8, renamable $x9, 0, 0, debug-location !1726 :: (load 4 from %ir.arrayidx265); cg.c:790:21
  $x10 = ADDXrs renamable $x9, killed renamable $x10, 0, debug-location !1727; cg.c:790:33
  renamable $w10 = LDURWi killed renamable $x10, -4, debug-location !1727 :: (load 4 from %ir.arrayidx268); cg.c:790:33
  renamable $x11 = LDURXi $fp, -72, debug-location !1731 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:790:9
  $w8 = SUBWrs killed renamable $w8, killed renamable $w10, 0, debug-location !1730; cg.c:790:31
  STRWroX killed renamable $w8, killed renamable $x11, killed renamable $x9, 0, 0, debug-location !1733 :: (store 4 into %ir.arrayidx271); cg.c:790:19
  renamable $w8 = LDRWui $sp, 19, debug-location !1734 :: (dereferenceable load 4 from %ir.j); cg.c:789:33
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !1734; cg.c:789:33
  B %bb.62

bb.64.for.end274:
; predecessors: %bb.62
  liveins: $x8
  renamable $x9 = LDRSWui $sp, 21, debug-location !1738 :: (dereferenceable load 4 from %ir.nrows); cg.c:792:18
  renamable $w8 = LDRWroX killed renamable $x8, killed renamable $x9, 0, 1, debug-location !1739 :: (load 4 from %ir.arrayidx276); cg.c:792:11
  renamable $w8 = SUBWri killed renamable $w8, 1, 0, debug-location !1740; cg.c:792:25
  STRWui killed renamable $w8, $sp, 16, debug-location !1741 :: (store 4 into %ir.nza); cg.c:792:9
  $fp, $lr = frame-destroy LDPXi $sp, 26, debug-location !1742 :: (load 8 from %stack.30), (load 8 from %stack.29); cg.c:793:1
  $x20, $x19 = frame-destroy LDPXi $sp, 24, debug-location !1742 :: (load 8 from %stack.32), (load 8 from %stack.31); cg.c:793:1
  $x22, $x21 = frame-destroy LDPXi $sp, 22, debug-location !1742 :: (load 8 from %stack.34), (load 8 from %stack.33); cg.c:793:1
  $x23 = frame-destroy LDRXui $sp, 20, debug-location !1742 :: (load 8 from %stack.35); cg.c:793:1
  $sp = frame-destroy ADDXri $sp, 224, 0, debug-location !1742; cg.c:793:1
  RET undef $lr, debug-location !1742; cg.c:793:1

# End machine code for function sparse.

********** MI Scheduling **********
sparse:%bb.0 entry
  From: $x20 = SUBXri $fp, 64, 0
    To: End RegionInstrs: 14
ScheduleDAGMI::schedule starting
SU(0):   $x20 = SUBXri $fp, 64, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(9): Data Latency=1 Reg=$x20
SU(1):   STURXi renamable $x2, $fp, -72 :: (store 8 into %ir.rowstr.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   STPWi renamable $w4, renamable $w3, $fp, -20 :: (store 4 into %ir.n.addr), (store 4 into %ir.nz.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(3):   STURWi renamable $w5, $fp, -84 :: (store 4 into %ir.nozer.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(4):   STURXi renamable $x6, $fp, -96 :: (store 8 into %ir.arow.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(5):   STRXui renamable $x7, $sp, 13 :: (store 8 into %ir.acol.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(6):   STPDi renamable $d1, renamable $d0, $sp, 11 :: (store 8 into %ir.rcond.addr), (store 8 into %ir.shift.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(7):   renamable $w8 = LDRWui $fp, 8, debug-location !1285 :: (dereferenceable load 4 from %ir.lastrow.addr, align 16); cg.c:659:13
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=4 Reg=$w8
SU(8):   renamable $w9 = LDRWui $fp, 6, debug-location !1286 :: (dereferenceable load 4 from %ir.firstrow.addr, align 8); cg.c:659:23
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(10): Data Latency=4 Reg=$w9
SU(9):   STPXi renamable $x1, renamable $x0, renamable $x20, 0 :: (store 8 into %ir.colidx.addr), (store 8 into %ir.a.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$x20
SU(10):   $w8 = SUBWrs renamable $w8, renamable $w9, 0, debug-location !1287; cg.c:659:21
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(8): Data Latency=4 Reg=$w9
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$w8
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$w8
SU(11):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1288; cg.c:659:32
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$w8
  Successors:
    SU(12): Data Latency=1 Reg=$w8
SU(12):   STRWui renamable $w8, $sp, 21, debug-location !1289 :: (store 4 into %ir.nrows); cg.c:659:11
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(11): Data Latency=1 Reg=$w8
SU(13):   STRWui $wzr, $sp, 19, debug-location !1290 :: (store 4 into %ir.j); cg.c:664:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
Disabled scoreboard hazard recognizer
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 7 8 13 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(7) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) renamable $w8 = LDRWui $fp, 8, debug-location !1285 :: (dereferenceable load 4 from %ir.lastrow.addr, align 16); cg.c:659:13
  Ready @0c
  TopQ.A BotLatency SU(7) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 13 8 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(8) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $w9 = LDRWui $fp, 6, debug-location !1286 :: (dereferenceable load 4 from %ir.firstrow.addr, align 8); cg.c:659:23
  Ready @1c
  TopQ.A BotLatency SU(8) 6c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 10 
Queue TopQ.A: 0 1 2 3 4 5 6 13 
  TopQ.A RemainingLatency 0 + 2c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $x20 = SUBXri $fp, 64, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 10 
Queue TopQ.A: 13 1 2 3 4 5 6 9 
  TopQ.A RemainingLatency 0 + 3c > CritPath 6
  Cand SU(13) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) STURXi renamable $x2, $fp, -72 :: (store 8 into %ir.rowstr.addr)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 10 
Queue TopQ.A: 13 9 2 3 4 5 6 
  TopQ.A RemainingLatency 0 + 4c > CritPath 6
  Cand SU(13) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) STPWi renamable $w4, renamable $w3, $fp, -20 :: (store 4 into %ir.n.addr), (store 4 into %ir.nz.addr)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 9 6 3 4 5 10 
  TopQ.A RemainingLatency 0 + 5c > CritPath 6
  Cand SU(13) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(10) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(10) $w8 = SUBWrs renamable $w8, renamable $w9, 0, debug-location !1287; cg.c:659:21
  Ready @5c
  TopQ.A TopLatency SU(10) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 9 6 3 4 5 11 
  TopQ.A RemainingLatency 0 + 6c > CritPath 6
  Cand SU(13) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(11) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(11) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1288; cg.c:659:32
  Ready @6c
  TopQ.A TopLatency SU(11) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 9 6 3 4 5 12 
  TopQ.A RemainingLatency 0 + 7c > CritPath 6
  Cand SU(13) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) STURWi renamable $w5, $fp, -84 :: (store 4 into %ir.nozer.addr)
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 9 6 12 4 5 
  TopQ.A RemainingLatency 0 + 8c > CritPath 6
  Cand SU(13) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) STURXi renamable $x6, $fp, -96 :: (store 8 into %ir.arow.addr)
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 9 6 12 5 
  TopQ.A RemainingLatency 0 + 9c > CritPath 6
  Cand SU(13) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) STRXui renamable $x7, $sp, 13 :: (store 8 into %ir.acol.addr)
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 9 6 12 
  TopQ.A RemainingLatency 0 + 10c > CritPath 6
  Cand SU(13) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) STPDi renamable $d1, renamable $d0, $sp, 11 :: (store 8 into %ir.rcond.addr), (store 8 into %ir.shift.addr)
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 9 12 
  TopQ.A RemainingLatency 0 + 11c > CritPath 6
  Cand SU(13) ORDER                              
  Cand SU(9) ORDER                              
Pick Top ORDER     
Scheduling SU(9) STPXi renamable $x1, renamable $x0, renamable $x20, 0 :: (store 8 into %ir.colidx.addr), (store 8 into %ir.a.addr)
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 12 
  TopQ.A RemainingLatency 0 + 12c > CritPath 6
  Cand SU(13) ORDER                              
  Cand SU(12) ORDER                              
Pick Top ORDER     
Scheduling SU(12) STRWui renamable $w8, $sp, 21, debug-location !1289 :: (store 4 into %ir.nrows); cg.c:659:11
  Ready @12c
  TopQ.A TopLatency SU(12) 6c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 
Pick Top ONLY1     
Scheduling SU(13) STRWui $wzr, $sp, 19, debug-location !1290 :: (store 4 into %ir.j); cg.c:664:12
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(7):   renamable $w8 = LDRWui $fp, 8, debug-location !1285 :: (dereferenceable load 4 from %ir.lastrow.addr, align 16); cg.c:659:13
SU(8):   renamable $w9 = LDRWui $fp, 6, debug-location !1286 :: (dereferenceable load 4 from %ir.firstrow.addr, align 8); cg.c:659:23
SU(0):   $x20 = SUBXri $fp, 64, 0
SU(1):   STURXi renamable $x2, $fp, -72 :: (store 8 into %ir.rowstr.addr)
SU(2):   STPWi renamable $w4, renamable $w3, $fp, -20 :: (store 4 into %ir.n.addr), (store 4 into %ir.nz.addr)
SU(10):   $w8 = SUBWrs renamable $w8, renamable $w9, 0, debug-location !1287; cg.c:659:21
SU(11):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1288; cg.c:659:32
SU(3):   STURWi renamable $w5, $fp, -84 :: (store 4 into %ir.nozer.addr)
SU(4):   STURXi renamable $x6, $fp, -96 :: (store 8 into %ir.arow.addr)
SU(5):   STRXui renamable $x7, $sp, 13 :: (store 8 into %ir.acol.addr)
SU(6):   STPDi renamable $d1, renamable $d0, $sp, 11 :: (store 8 into %ir.rcond.addr), (store 8 into %ir.shift.addr)
SU(9):   STPXi renamable $x1, renamable $x0, renamable $x20, 0 :: (store 8 into %ir.colidx.addr), (store 8 into %ir.a.addr)
SU(12):   STRWui renamable $w8, $sp, 21, debug-location !1289 :: (store 4 into %ir.nrows); cg.c:659:11
SU(13):   STRWui $wzr, $sp, 19, debug-location !1290 :: (store 4 into %ir.j); cg.c:664:12

********** MI Scheduling **********
sparse:%bb.0 entry
  From: frame-setup STRXui killed $x23, $sp, 20 :: (store 8 into %stack.35)
    To: frame-setup CFI_INSTRUCTION def_cfa $w29, 16
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   frame-setup STRXui $x23, $sp, 20 :: (store 8 into %stack.35)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   frame-setup STPXi $x22, $x21, $sp, 22 :: (store 8 into %stack.34), (store 8 into %stack.33)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   frame-setup STPXi $x20, $x19, $sp, 24 :: (store 8 into %stack.32), (store 8 into %stack.31)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(3):   frame-setup STPXi $fp, $lr, $sp, 26 :: (store 8 into %stack.30), (store 8 into %stack.29)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Successors:
    SU(4): Anti Latency=0
SU(4):   $fp = frame-setup ADDXri $sp, 208, 0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Anti Latency=0
ExitSU:   frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 0
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) frame-setup STRXui $x23, $sp, 20 :: (store 8 into %stack.35)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 0
  Cand SU(3) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) frame-setup STPXi $x22, $x21, $sp, 22 :: (store 8 into %stack.34), (store 8 into %stack.33)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 0
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) frame-setup STPXi $x20, $x19, $sp, 24 :: (store 8 into %stack.32), (store 8 into %stack.31)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) frame-setup STPXi $fp, $lr, $sp, 26 :: (store 8 into %stack.30), (store 8 into %stack.29)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $fp = frame-setup ADDXri $sp, 208, 0
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   frame-setup STRXui $x23, $sp, 20 :: (store 8 into %stack.35)
SU(1):   frame-setup STPXi $x22, $x21, $sp, 22 :: (store 8 into %stack.34), (store 8 into %stack.33)
SU(2):   frame-setup STPXi $x20, $x19, $sp, 24 :: (store 8 into %stack.32), (store 8 into %stack.31)
SU(3):   frame-setup STPXi $fp, $lr, $sp, 26 :: (store 8 into %stack.30), (store 8 into %stack.29)
SU(4):   $fp = frame-setup ADDXri $sp, 208, 0

Fixup kills for %bb.0
********** MI Scheduling **********
sparse:%bb.1 for.cond
  From: renamable $w8 = LDRWui $sp, 21, debug-location !1295 :: (dereferenceable load 4 from %ir.nrows); cg.c:664:21
    To: Bcc 10, %bb.3, implicit $nzcv, debug-location !1298; cg.c:664:5
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 21, debug-location !1295 :: (dereferenceable load 4 from %ir.nrows); cg.c:664:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$w8
SU(1):   renamable $w9 = LDRWui $sp, 19, debug-location !1293 :: (dereferenceable load 4 from %ir.j); cg.c:664:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=$w9
SU(2):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1296; cg.c:664:27
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(3): Data Latency=1 Reg=$w8
SU(3):   $wzr = SUBSWrs renamable $w9, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1298; cg.c:664:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=$w8
    SU(1): Data Latency=4 Reg=$w9
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.3, implicit $nzcv, debug-location !1298; cg.c:664:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w8 = LDRWui $sp, 21, debug-location !1295 :: (dereferenceable load 4 from %ir.nrows); cg.c:664:21
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w9 = LDRWui $sp, 19, debug-location !1293 :: (dereferenceable load 4 from %ir.j); cg.c:664:17
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1296; cg.c:664:27
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $wzr = SUBSWrs renamable $w9, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1298; cg.c:664:5
  Ready @5c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   renamable $w8 = LDRWui $sp, 21, debug-location !1295 :: (dereferenceable load 4 from %ir.nrows); cg.c:664:21
SU(1):   renamable $w9 = LDRWui $sp, 19, debug-location !1293 :: (dereferenceable load 4 from %ir.j); cg.c:664:17
SU(2):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1296; cg.c:664:27
SU(3):   $wzr = SUBSWrs renamable $w9, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1298; cg.c:664:5

Fixup kills for %bb.1
********** MI Scheduling **********
sparse:%bb.2 for.body
  From: renamable $x8 = LDURXi $fp, -72, debug-location !1299 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:665:9
    To: B %bb.1
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURXi $fp, -72, debug-location !1299 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:665:9
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(3): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $x9 = LDRSWui $sp, 19, debug-location !1301 :: (dereferenceable load 4 from %ir.j); cg.c:665:16
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(2): Data Latency=4 Reg=$x9
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
SU(2):   STRWroX $wzr, renamable $x8, renamable $x9, 0, 1, debug-location !1302 :: (store 4 into %ir.arrayidx); cg.c:665:19
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(1): Data Latency=4 Reg=$x9
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=$x8
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(3): Anti Latency=0
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=1 Memory
SU(3):   renamable $w8 = LDRWui $sp, 19, debug-location !1303 :: (dereferenceable load 4 from %ir.j); cg.c:664:33
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(2): Anti Latency=0
    SU(2): Ord  Latency=1 Memory
    SU(0): Out  Latency=1
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$w8
    SU(5): Ord  Latency=0 Memory
SU(4):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1303; cg.c:664:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w8
  Successors:
    SU(5): Data Latency=1 Reg=$w8
SU(5):   STRWui renamable $w8, $sp, 19, debug-location !1303 :: (store 4 into %ir.j); cg.c:664:33
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=$w8
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
ExitSU:   B %bb.1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 10
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 10
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x8 = LDURXi $fp, -72, debug-location !1299 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:665:9
  Ready @0c
  TopQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x9 = LDRSWui $sp, 19, debug-location !1301 :: (dereferenceable load 4 from %ir.j); cg.c:665:16
  Ready @1c
  TopQ.A BotLatency SU(1) 10c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWroX $wzr, renamable $x8, renamable $x9, 0, 1, debug-location !1302 :: (store 4 into %ir.arrayidx); cg.c:665:19
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w8 = LDRWui $sp, 19, debug-location !1303 :: (dereferenceable load 4 from %ir.j); cg.c:664:33
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 10 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1303; cg.c:664:33
  Ready @10c
  TopQ.A TopLatency SU(4) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) STRWui renamable $w8, $sp, 19, debug-location !1303 :: (store 4 into %ir.j); cg.c:664:33
  Ready @11c
  TopQ.A TopLatency SU(5) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   renamable $x8 = LDURXi $fp, -72, debug-location !1299 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:665:9
SU(1):   renamable $x9 = LDRSWui $sp, 19, debug-location !1301 :: (dereferenceable load 4 from %ir.j); cg.c:665:16
SU(2):   STRWroX $wzr, renamable $x8, renamable $x9, 0, 1, debug-location !1302 :: (store 4 into %ir.arrayidx); cg.c:665:19
SU(3):   renamable $w8 = LDRWui $sp, 19, debug-location !1303 :: (dereferenceable load 4 from %ir.j); cg.c:664:33
SU(4):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1303; cg.c:664:33
SU(5):   STRWui renamable $w8, $sp, 19, debug-location !1303 :: (store 4 into %ir.j); cg.c:664:33

Fixup kills for %bb.2
********** MI Scheduling **********
sparse:%bb.3 for.end
  From: STRWui $wzr, $sp, 20, debug-location !1307 :: (store 4 into %ir.i); cg.c:668:12
    To: End RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   STRWui $wzr, $sp, 20, debug-location !1307 :: (store 4 into %ir.i); cg.c:668:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $w8 = MOVZWi 56, 0, implicit-def $x8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $w8 = MOVZWi 56, 0, implicit-def $x8
  Ready @0c
  TopQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STRWui $wzr, $sp, 20, debug-location !1307 :: (store 4 into %ir.i); cg.c:668:12
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.3 ***
SU(1):   $w8 = MOVZWi 56, 0, implicit-def $x8
SU(0):   STRWui $wzr, $sp, 20, debug-location !1307 :: (store 4 into %ir.i); cg.c:668:12

Fixup kills for %bb.3
********** MI Scheduling **********
sparse:%bb.4 for.cond2
  From: renamable $w9 = LDRWui $sp, 20, debug-location !1310 :: (dereferenceable load 4 from %ir.i); cg.c:668:17
    To: Bcc 10, %bb.9, implicit $nzcv, debug-location !1314; cg.c:668:5
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w9 = LDRWui $sp, 20, debug-location !1310 :: (dereferenceable load 4 from %ir.i); cg.c:668:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w9
SU(1):   renamable $w10 = LDURWi $fp, -76, debug-location !1312 :: (dereferenceable load 4 from %ir.n.addr); cg.c:668:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w10
SU(2):   $wzr = SUBSWrs renamable $w9, renamable $w10, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1314; cg.c:668:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=$w10
    SU(0): Data Latency=4 Reg=$w9
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.9, implicit $nzcv, debug-location !1314; cg.c:668:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $w9 = LDRWui $sp, 20, debug-location !1310 :: (dereferenceable load 4 from %ir.i); cg.c:668:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w10 = LDURWi $fp, -76, debug-location !1312 :: (dereferenceable load 4 from %ir.n.addr); cg.c:668:21
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $wzr = SUBSWrs renamable $w9, renamable $w10, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1314; cg.c:668:5
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   renamable $w9 = LDRWui $sp, 20, debug-location !1310 :: (dereferenceable load 4 from %ir.i); cg.c:668:17
SU(1):   renamable $w10 = LDURWi $fp, -76, debug-location !1312 :: (dereferenceable load 4 from %ir.n.addr); cg.c:668:21
SU(2):   $wzr = SUBSWrs renamable $w9, renamable $w10, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1314; cg.c:668:5

Fixup kills for %bb.4
Fixup kills for %bb.5
********** MI Scheduling **********
sparse:%bb.6 for.cond5
  From: renamable $x9 = LDURXi $fp, -96, debug-location !1321 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:669:29
    To: Bcc 10, %bb.8, implicit $nzcv, debug-location !1324; cg.c:669:9
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $x9 = LDURXi $fp, -96, debug-location !1321 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:669:29
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x9
SU(1):   renamable $x10 = LDRSWui $sp, 20, debug-location !1322 :: (dereferenceable load 4 from %ir.i); cg.c:669:34
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Data Latency=4 Reg=$x10
SU(2):   renamable $w11 = LDRWui $sp, 16, debug-location !1319 :: (dereferenceable load 4 from %ir.nza); cg.c:669:23
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=$w11
SU(3):   renamable $w9 = LDRWroX renamable $x9, renamable $x10, 0, 1, debug-location !1321 :: (load 4 from %ir.arrayidx7); cg.c:669:29
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=$x10
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x9
  Successors:
    SU(4): Data Latency=4 Reg=$w9
SU(4):   $wzr = SUBSWrs renamable $w11, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1324; cg.c:669:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=$w9
    SU(2): Data Latency=4 Reg=$w11
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.8, implicit $nzcv, debug-location !1324; cg.c:669:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 9
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 9
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x9 = LDURXi $fp, -96, debug-location !1321 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:669:29
  Ready @0c
  TopQ.A BotLatency SU(0) 9c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 9
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  9 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x10 = LDRSWui $sp, 20, debug-location !1322 :: (dereferenceable load 4 from %ir.i); cg.c:669:34
  Ready @1c
  TopQ.A BotLatency SU(1) 9c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w11 = LDRWui $sp, 16, debug-location !1319 :: (dereferenceable load 4 from %ir.nza); cg.c:669:23
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w9 = LDRWroX renamable $x9, renamable $x10, 0, 1, debug-location !1321 :: (load 4 from %ir.arrayidx7); cg.c:669:29
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 9 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $wzr = SUBSWrs renamable $w11, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1324; cg.c:669:9
  Ready @9c
  TopQ.A TopLatency SU(4) 8c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 5
  Executed: 10c
  Critical: 5c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   renamable $x9 = LDURXi $fp, -96, debug-location !1321 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:669:29
SU(1):   renamable $x10 = LDRSWui $sp, 20, debug-location !1322 :: (dereferenceable load 4 from %ir.i); cg.c:669:34
SU(2):   renamable $w11 = LDRWui $sp, 16, debug-location !1319 :: (dereferenceable load 4 from %ir.nza); cg.c:669:23
SU(3):   renamable $w9 = LDRWroX renamable $x9, renamable $x10, 0, 1, debug-location !1321 :: (load 4 from %ir.arrayidx7); cg.c:669:29
SU(4):   $wzr = SUBSWrs renamable $w11, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1324; cg.c:669:9

Fixup kills for %bb.6
********** MI Scheduling **********
sparse:%bb.7 for.body9
  From: renamable $x9 = LDRXui $sp, 13, debug-location !1325 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:670:17
    To: B %bb.6
 RegionInstrs: 17
ScheduleDAGMI::schedule starting
SU(0):   renamable $x9 = LDRXui $sp, 13, debug-location !1325 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:670:17
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 22
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x9
    SU(13): Ord  Latency=0 Memory
SU(1):   renamable $x10 = LDRSWui $sp, 20, debug-location !1327 :: (dereferenceable load 4 from %ir.i); cg.c:670:22
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 22
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=4 Reg=$x10
    SU(3): Data Latency=4 Reg=$x10
    SU(13): Ord  Latency=0 Memory
SU(2):   renamable $x11 = LDRSWui $sp, 16, debug-location !1328 :: (dereferenceable load 4 from %ir.nza); cg.c:670:25
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 21
  Successors:
    SU(5): Out  Latency=1
    SU(4): Data Latency=4 Reg=$x11
    SU(16): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
SU(3):   renamable $x9 = MADDXrrr renamable $x10, renamable $x8, renamable $x9, debug-location !1325; cg.c:670:17
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 18
  Predecessors:
    SU(1): Data Latency=4 Reg=$x10
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x9
  Successors:
    SU(4): Out  Latency=1
    SU(7): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x9
    SU(11): Anti Latency=0
SU(4):   renamable $w9 = LDRWroX renamable $x9, renamable $x11, 0, 1, debug-location !1325 :: (load 4 from %ir.arrayidx13); cg.c:670:17
  # preds left       : 3
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 17
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x9
    SU(2): Data Latency=4 Reg=$x11
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$w9
    SU(7): Anti Latency=0
    SU(5): Anti Latency=0
    SU(16): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
SU(5):   renamable $x11 = LDURXi $fp, -72, debug-location !1331 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:671:25
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 15
  Predecessors:
    SU(4): Anti Latency=0
    SU(2): Out  Latency=1
  Successors:
    SU(13): Data Latency=4 Reg=$x11
    SU(10): Data Latency=4 Reg=$x11
    SU(13): Ord  Latency=0 Memory
SU(6):   renamable $x12 = LDURXi $fp, -96, debug-location !1333 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:671:37
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(11): Data Latency=4 Reg=$x12
    SU(13): Ord  Latency=0 Memory
SU(7):   renamable $w9 = nsw ADDWri renamable $w9, 1, 0, implicit-def $x9, debug-location !1329; cg.c:670:30
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 13
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$w9
    SU(4): Anti Latency=0
    SU(3): Out  Latency=1
  Successors:
    SU(9): Out  Latency=1
    SU(8): Data Latency=1 Reg=$w9
    SU(9): Data Latency=1 Reg=$x9
SU(8):   STRWui renamable $w9, $sp, 19, debug-location !1330 :: (store 4 into %ir.j); cg.c:670:15
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 12
  Predecessors:
    SU(7): Data Latency=1 Reg=$w9
    SU(4): Ord  Latency=0 Memory
  Successors:
    SU(9): Anti Latency=0
    SU(11): Ord  Latency=1 Memory
    SU(10): Ord  Latency=1 Memory
    SU(13): Ord  Latency=0 Memory
SU(9):   renamable $x9 = SBFMXri renamable $x9, 62, 31, debug-location !1331; cg.c:671:25
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 12
  Predecessors:
    SU(8): Anti Latency=0
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x9
  Successors:
    SU(14): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x9
    SU(10): Data Latency=1 Reg=$x9
SU(10):   renamable $w13 = LDRWroX renamable $x11, renamable $x9, 0, 0, debug-location !1331 :: (load 4 from %ir.arrayidx16); cg.c:671:25
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 11
  Predecessors:
    SU(9): Data Latency=1 Reg=$x9
    SU(8): Ord  Latency=1 Memory
    SU(5): Data Latency=4 Reg=$x11
  Successors:
    SU(12): Data Latency=4 Reg=$w13
    SU(14): Anti Latency=0
    SU(16): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
SU(11):   renamable $w10 = LDRWroX renamable $x12, renamable $x10, 0, 1, debug-location !1333 :: (load 4 from %ir.arrayidx18); cg.c:671:37
  # preds left       : 5
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 11
  Predecessors:
    SU(8): Ord  Latency=1 Memory
    SU(6): Data Latency=4 Reg=$x12
    SU(3): Anti Latency=0
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x10
  Successors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=4 Reg=$w10
    SU(16): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
SU(12):   $w10 = ADDWrs renamable $w13, renamable $w10, 0, debug-location !1335; cg.c:671:35
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 7
  Predecessors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=4 Reg=$w10
    SU(10): Data Latency=4 Reg=$w13
  Successors:
    SU(13): Data Latency=1 Reg=$w10
SU(13):   STRWroX renamable $w10, renamable $x11, renamable $x9, 0, 0, debug-location !1338 :: (store 4 into %ir.arrayidx21); cg.c:671:23
  # preds left       : 12
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 6
  Predecessors:
    SU(12): Data Latency=1 Reg=$w10
    SU(11): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Data Latency=1 Reg=$x9
    SU(8): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Data Latency=4 Reg=$x11
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(14): Anti Latency=0
    SU(16): Ord  Latency=0 Memory
    SU(14): Ord  Latency=1 Memory
SU(14):   renamable $w9 = LDRWui $sp, 16, debug-location !1339 :: (dereferenceable load 4 from %ir.nza); cg.c:669:41
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 17
  Height             : 5
  Predecessors:
    SU(13): Anti Latency=0
    SU(13): Ord  Latency=1 Memory
    SU(10): Anti Latency=0
    SU(9): Out  Latency=1
  Successors:
    SU(15): Out  Latency=1
    SU(15): Data Latency=4 Reg=$w9
    SU(16): Ord  Latency=0 Memory
SU(15):   renamable $w9 = nsw ADDWri renamable $w9, 1, 0, debug-location !1339; cg.c:669:41
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 21
  Height             : 1
  Predecessors:
    SU(14): Out  Latency=1
    SU(14): Data Latency=4 Reg=$w9
  Successors:
    SU(16): Data Latency=1 Reg=$w9
SU(16):   STRWui renamable $w9, $sp, 16, debug-location !1339 :: (store 4 into %ir.nza); cg.c:669:41
  # preds left       : 7
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 0
  Predecessors:
    SU(15): Data Latency=1 Reg=$w9
    SU(14): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
ExitSU:   B %bb.6
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 22
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 6 
  TopQ.A RemainingLatency 0 + 0c > CritPath 22
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x9 = LDRXui $sp, 13, debug-location !1325 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:670:17
  Ready @0c
  TopQ.A BotLatency SU(0) 22c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 22
  Cand SU(6) ORDER                              
  Cand SU(1) TOP-PATH                  22 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x10 = LDRSWui $sp, 20, debug-location !1327 :: (dereferenceable load 4 from %ir.i); cg.c:670:22
  Ready @1c
  TopQ.A BotLatency SU(1) 22c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 6 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 22
  Cand SU(6) ORDER                              
  Cand SU(2) TOP-PATH                  21 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x11 = LDRSWui $sp, 16, debug-location !1328 :: (dereferenceable load 4 from %ir.nza); cg.c:670:25
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $x12 = LDURXi $fp, -96, debug-location !1333 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:671:37
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $x9 = MADDXrrr renamable $x10, renamable $x8, renamable $x9, debug-location !1325; cg.c:670:17
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w9 = LDRWroX renamable $x9, renamable $x11, 0, 1, debug-location !1325 :: (load 4 from %ir.arrayidx13); cg.c:670:17
  Ready @6c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $x11 = LDURXi $fp, -72, debug-location !1331 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:671:25
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 10 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $w9 = nsw ADDWri renamable $w9, 1, 0, implicit-def $x9, debug-location !1329; cg.c:670:30
  Ready @10c
  TopQ.A TopLatency SU(7) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 8
  Executed: 11c
  Critical: 8c, 8 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) STRWui renamable $w9, $sp, 19, debug-location !1330 :: (store 4 into %ir.j); cg.c:670:15
  Ready @11c
  TopQ.A TopLatency SU(8) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 9
  Executed: 12c
  Critical: 9c, 9 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 11 
  TopQ.A RemainingLatency 0 + 12c > CritPath 22
  Cand SU(9) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(9) renamable $x9 = SBFMXri renamable $x9, 62, 31, debug-location !1331; cg.c:671:25
  Ready @12c
  TopQ.A BotLatency SU(9) 12c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 10
  Executed: 13c
  Critical: 10c, 10 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 10 
  TopQ.A RemainingLatency 0 + 13c > CritPath 22
  Cand SU(11) ORDER                              
  Cand SU(10) ORDER                              
Pick Top ORDER     
Scheduling SU(10) renamable $w13 = LDRWroX renamable $x11, renamable $x9, 0, 0, debug-location !1331 :: (load 4 from %ir.arrayidx16); cg.c:671:25
  Ready @13c
  TopQ.A TopLatency SU(10) 11c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 11
  Executed: 14c
  Critical: 11c, 11 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 
Pick Top ONLY1     
Scheduling SU(11) renamable $w10 = LDRWroX renamable $x12, renamable $x10, 0, 1, debug-location !1333 :: (load 4 from %ir.arrayidx18); cg.c:671:37
  Ready @14c
  TopQ.A BotLatency SU(11) 11c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 12
  Executed: 15c
  Critical: 12c, 12 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 18 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 12 
Pick Top ONLY1     
Scheduling SU(12) $w10 = ADDWrs renamable $w13, renamable $w10, 0, debug-location !1335; cg.c:671:35
  Ready @18c
  TopQ.A TopLatency SU(12) 15c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 13
  Executed: 19c
  Critical: 13c, 13 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 
Pick Top ONLY1     
Scheduling SU(13) STRWroX renamable $w10, renamable $x11, renamable $x9, 0, 0, debug-location !1338 :: (store 4 into %ir.arrayidx21); cg.c:671:23
  Ready @19c
  TopQ.A TopLatency SU(13) 16c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 14
  Executed: 20c
  Critical: 14c, 14 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 14 
Pick Top ONLY1     
Scheduling SU(14) renamable $w9 = LDRWui $sp, 16, debug-location !1339 :: (dereferenceable load 4 from %ir.nza); cg.c:669:41
  Ready @20c
  TopQ.A TopLatency SU(14) 17c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 15
  Executed: 21c
  Critical: 15c, 15 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 24 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 15 
Pick Top ONLY1     
Scheduling SU(15) renamable $w9 = nsw ADDWri renamable $w9, 1, 0, debug-location !1339; cg.c:669:41
  Ready @24c
  TopQ.A TopLatency SU(15) 21c
  *** Max MOps 1 at cycle 24
Cycle: 25 TopQ.A
TopQ.A @25c
  Retired: 16
  Executed: 25c
  Critical: 16c, 16 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 16 
Pick Top ONLY1     
Scheduling SU(16) STRWui renamable $w9, $sp, 16, debug-location !1339 :: (store 4 into %ir.nza); cg.c:669:41
  Ready @25c
  TopQ.A TopLatency SU(16) 22c
  *** Max MOps 1 at cycle 25
Cycle: 26 TopQ.A
TopQ.A @26c
  Retired: 17
  Executed: 26c
  Critical: 17c, 17 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   renamable $x9 = LDRXui $sp, 13, debug-location !1325 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:670:17
SU(1):   renamable $x10 = LDRSWui $sp, 20, debug-location !1327 :: (dereferenceable load 4 from %ir.i); cg.c:670:22
SU(2):   renamable $x11 = LDRSWui $sp, 16, debug-location !1328 :: (dereferenceable load 4 from %ir.nza); cg.c:670:25
SU(6):   renamable $x12 = LDURXi $fp, -96, debug-location !1333 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:671:37
SU(3):   renamable $x9 = MADDXrrr renamable $x10, renamable $x8, renamable $x9, debug-location !1325; cg.c:670:17
SU(4):   renamable $w9 = LDRWroX renamable $x9, renamable $x11, 0, 1, debug-location !1325 :: (load 4 from %ir.arrayidx13); cg.c:670:17
SU(5):   renamable $x11 = LDURXi $fp, -72, debug-location !1331 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:671:25
SU(7):   renamable $w9 = nsw ADDWri renamable $w9, 1, 0, implicit-def $x9, debug-location !1329; cg.c:670:30
SU(8):   STRWui renamable $w9, $sp, 19, debug-location !1330 :: (store 4 into %ir.j); cg.c:670:15
SU(9):   renamable $x9 = SBFMXri renamable $x9, 62, 31, debug-location !1331; cg.c:671:25
SU(10):   renamable $w13 = LDRWroX renamable $x11, renamable $x9, 0, 0, debug-location !1331 :: (load 4 from %ir.arrayidx16); cg.c:671:25
SU(11):   renamable $w10 = LDRWroX renamable $x12, renamable $x10, 0, 1, debug-location !1333 :: (load 4 from %ir.arrayidx18); cg.c:671:37
SU(12):   $w10 = ADDWrs renamable $w13, renamable $w10, 0, debug-location !1335; cg.c:671:35
SU(13):   STRWroX renamable $w10, renamable $x11, renamable $x9, 0, 0, debug-location !1338 :: (store 4 into %ir.arrayidx21); cg.c:671:23
SU(14):   renamable $w9 = LDRWui $sp, 16, debug-location !1339 :: (dereferenceable load 4 from %ir.nza); cg.c:669:41
SU(15):   renamable $w9 = nsw ADDWri renamable $w9, 1, 0, debug-location !1339; cg.c:669:41
SU(16):   STRWui renamable $w9, $sp, 16, debug-location !1339 :: (store 4 into %ir.nza); cg.c:669:41

Fixup kills for %bb.7
********** MI Scheduling **********
sparse:%bb.8 for.inc25
  From: renamable $w9 = LDRWui $sp, 20, debug-location !1343 :: (dereferenceable load 4 from %ir.i); cg.c:668:25
    To: B %bb.4
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w9 = LDRWui $sp, 20, debug-location !1343 :: (dereferenceable load 4 from %ir.i); cg.c:668:25
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w9
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w9 = nsw ADDWri renamable $w9, 1, 0, debug-location !1343; cg.c:668:25
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w9
  Successors:
    SU(2): Data Latency=1 Reg=$w9
SU(2):   STRWui renamable $w9, $sp, 20, debug-location !1343 :: (store 4 into %ir.i); cg.c:668:25
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w9
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.4
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w9 = LDRWui $sp, 20, debug-location !1343 :: (dereferenceable load 4 from %ir.i); cg.c:668:25
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w9 = nsw ADDWri renamable $w9, 1, 0, debug-location !1343; cg.c:668:25
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w9, $sp, 20, debug-location !1343 :: (store 4 into %ir.i); cg.c:668:25
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   renamable $w9 = LDRWui $sp, 20, debug-location !1343 :: (dereferenceable load 4 from %ir.i); cg.c:668:25
SU(1):   renamable $w9 = nsw ADDWri renamable $w9, 1, 0, debug-location !1343; cg.c:668:25
SU(2):   STRWui renamable $w9, $sp, 20, debug-location !1343 :: (store 4 into %ir.i); cg.c:668:25

Fixup kills for %bb.8
********** MI Scheduling **********
sparse:%bb.9 for.end27
  From: renamable $x8 = LDURXi $fp, -72, debug-location !1347 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:675:5
    To: End RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURXi $fp, -72, debug-location !1347 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:675:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(2): Data Latency=4 Reg=$x8
    SU(2): Ord  Latency=0 Memory
SU(1):   $w9 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=$w9
SU(2):   STRWui $wzr, renamable $x8, 0, debug-location !1348 :: (store 4 into %ir.arrayidx281); cg.c:675:15
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=$x8
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(3): Ord  Latency=0 Memory
SU(3):   STRWui renamable $w9, $sp, 19, debug-location !1349 :: (store 4 into %ir.j); cg.c:676:12
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=1 Reg=$w9
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDURXi $fp, -72, debug-location !1347 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:675:5
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w9 = MOVZWi 1, 0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui $wzr, renamable $x8, 0, debug-location !1348 :: (store 4 into %ir.arrayidx281); cg.c:675:15
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STRWui renamable $w9, $sp, 19, debug-location !1349 :: (store 4 into %ir.j); cg.c:676:12
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   renamable $x8 = LDURXi $fp, -72, debug-location !1347 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:675:5
SU(1):   $w9 = MOVZWi 1, 0
SU(2):   STRWui $wzr, renamable $x8, 0, debug-location !1348 :: (store 4 into %ir.arrayidx281); cg.c:675:15
SU(3):   STRWui renamable $w9, $sp, 19, debug-location !1349 :: (store 4 into %ir.j); cg.c:676:12

Fixup kills for %bb.9
********** MI Scheduling **********
sparse:%bb.10 for.cond29
  From: renamable $w9 = LDRWui $sp, 21, debug-location !1354 :: (dereferenceable load 4 from %ir.nrows); cg.c:676:21
    To: Bcc 10, %bb.12, implicit $nzcv, debug-location !1358; cg.c:676:5
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $w9 = LDRWui $sp, 21, debug-location !1354 :: (dereferenceable load 4 from %ir.nrows); cg.c:676:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w9
SU(1):   renamable $w10 = LDRWui $sp, 19, debug-location !1352 :: (dereferenceable load 4 from %ir.j); cg.c:676:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=$w10
SU(2):   renamable $x8 = LDURXi $fp, -72, debug-location !1357 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(3):   renamable $w9 = nsw ADDWri renamable $w9, 1, 0, debug-location !1355; cg.c:676:27
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w9
  Successors:
    SU(4): Data Latency=1 Reg=$w9
SU(4):   $wzr = SUBSWrs renamable $w10, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1358; cg.c:676:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(3): Data Latency=1 Reg=$w9
    SU(1): Data Latency=4 Reg=$w10
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.12, implicit $nzcv, debug-location !1358; cg.c:676:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w9 = LDRWui $sp, 21, debug-location !1354 :: (dereferenceable load 4 from %ir.nrows); cg.c:676:21
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w10 = LDRWui $sp, 19, debug-location !1352 :: (dereferenceable load 4 from %ir.j); cg.c:676:17
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x8 = LDURXi $fp, -72, debug-location !1357 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w9 = nsw ADDWri renamable $w9, 1, 0, debug-location !1355; cg.c:676:27
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $wzr = SUBSWrs renamable $w10, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1358; cg.c:676:5
  Ready @5c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   renamable $w9 = LDRWui $sp, 21, debug-location !1354 :: (dereferenceable load 4 from %ir.nrows); cg.c:676:21
SU(1):   renamable $w10 = LDRWui $sp, 19, debug-location !1352 :: (dereferenceable load 4 from %ir.j); cg.c:676:17
SU(2):   renamable $x8 = LDURXi $fp, -72, debug-location !1357 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:0
SU(3):   renamable $w9 = nsw ADDWri renamable $w9, 1, 0, debug-location !1355; cg.c:676:27
SU(4):   $wzr = SUBSWrs renamable $w10, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1358; cg.c:676:5

Fixup kills for %bb.10
********** MI Scheduling **********
sparse:%bb.11 for.body32
  From: renamable $x9 = LDRSWui $sp, 19, debug-location !1359 :: (dereferenceable load 4 from %ir.j); cg.c:677:28
    To: B %bb.10
 RegionInstrs: 11
ScheduleDAGMI::schedule starting
SU(0):   renamable $x9 = LDRSWui $sp, 19, debug-location !1359 :: (dereferenceable load 4 from %ir.j); cg.c:677:28
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 17
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x9
    SU(10): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
SU(1):   renamable $x10 = LDURXi $fp, -72, debug-location !1362 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:677:33
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(5): Out  Latency=1
    SU(4): Data Latency=4 Reg=$x10
    SU(7): Ord  Latency=0 Memory
SU(2):   renamable $x9 = UBFMXri renamable $x9, 62, 61, debug-location !1361; cg.c:677:21
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 13
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x9
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x9
    SU(3): Data Latency=1 Reg=$x9
SU(3):   renamable $w8 = LDRWroX renamable $x8, renamable $x9, 0, 0, debug-location !1361 :: (load 4 from %ir.arrayidx34); cg.c:677:21
  # preds left       : 1
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 12
  Predecessors:
    SU(2): Data Latency=1 Reg=$x9
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$w8
    SU(4): Anti Latency=0
    SU(10): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
SU(4):   $x9 = ADDXrs renamable $x10, renamable $x9, 0, debug-location !1366; cg.c:677:9
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 12
  Predecessors:
    SU(3): Anti Latency=0
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x9
    SU(1): Data Latency=4 Reg=$x10
  Successors:
    SU(7): Data Latency=1 Reg=$x9
    SU(5): Data Latency=1 Reg=$x9
    SU(5): Anti Latency=0
SU(5):   renamable $w10 = LDURWi renamable $x9, -4, debug-location !1362 :: (load 4 from %ir.arrayidx37); cg.c:677:33
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 11
  Predecessors:
    SU(4): Data Latency=1 Reg=$x9
    SU(4): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    SU(6): Data Latency=4 Reg=$w10
    SU(10): Ord  Latency=0 Memory
SU(6):   $w8 = ADDWrs renamable $w8, renamable $w10, 0, debug-location !1365; cg.c:677:31
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 7
  Predecessors:
    SU(5): Data Latency=4 Reg=$w10
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w8
  Successors:
    SU(8): Out  Latency=1
    SU(7): Data Latency=1 Reg=$w8
SU(7):   STRWui renamable $w8, renamable $x9, 0, debug-location !1368 :: (store 4 into %ir.arrayidx40); cg.c:677:19
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 6
  Predecessors:
    SU(6): Data Latency=1 Reg=$w8
    SU(4): Data Latency=1 Reg=$x9
    SU(3): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(8): Anti Latency=0
    SU(10): Ord  Latency=0 Memory
    SU(8): Ord  Latency=1 Memory
SU(8):   renamable $w8 = LDRWui $sp, 19, debug-location !1369 :: (dereferenceable load 4 from %ir.j); cg.c:676:33
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 5
  Predecessors:
    SU(7): Anti Latency=0
    SU(7): Ord  Latency=1 Memory
    SU(6): Out  Latency=1
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=4 Reg=$w8
    SU(10): Ord  Latency=0 Memory
SU(9):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1369; cg.c:676:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 1
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=4 Reg=$w8
  Successors:
    SU(10): Data Latency=1 Reg=$w8
SU(10):   STRWui renamable $w8, $sp, 19, debug-location !1369 :: (store 4 into %ir.j); cg.c:676:33
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=$w8
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.10
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 17
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 17
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x9 = LDRSWui $sp, 19, debug-location !1359 :: (dereferenceable load 4 from %ir.j); cg.c:677:28
  Ready @0c
  TopQ.A BotLatency SU(0) 17c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x10 = LDURXi $fp, -72, debug-location !1362 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:677:33
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x9 = UBFMXri renamable $x9, 62, 61, debug-location !1361; cg.c:677:21
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w8 = LDRWroX renamable $x8, renamable $x9, 0, 0, debug-location !1361 :: (load 4 from %ir.arrayidx34); cg.c:677:21
  Ready @5c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $x9 = ADDXrs renamable $x10, renamable $x9, 0, debug-location !1366; cg.c:677:9
  Ready @6c
  TopQ.A BotLatency SU(4) 12c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $w10 = LDURWi renamable $x9, -4, debug-location !1362 :: (load 4 from %ir.arrayidx37); cg.c:677:33
  Ready @7c
  TopQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 11 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) $w8 = ADDWrs renamable $w8, renamable $w10, 0, debug-location !1365; cg.c:677:31
  Ready @11c
  TopQ.A TopLatency SU(6) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 7
  Executed: 12c
  Critical: 7c, 7 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) STRWui renamable $w8, renamable $x9, 0, debug-location !1368 :: (store 4 into %ir.arrayidx40); cg.c:677:19
  Ready @12c
  TopQ.A TopLatency SU(7) 11c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 8
  Executed: 13c
  Critical: 8c, 8 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) renamable $w8 = LDRWui $sp, 19, debug-location !1369 :: (dereferenceable load 4 from %ir.j); cg.c:676:33
  Ready @13c
  TopQ.A TopLatency SU(8) 12c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 9
  Executed: 14c
  Critical: 9c, 9 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 17 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1369; cg.c:676:33
  Ready @17c
  TopQ.A TopLatency SU(9) 16c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 10
  Executed: 18c
  Critical: 10c, 10 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) STRWui renamable $w8, $sp, 19, debug-location !1369 :: (store 4 into %ir.j); cg.c:676:33
  Ready @18c
  TopQ.A TopLatency SU(10) 17c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 11
  Executed: 19c
  Critical: 11c, 11 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   renamable $x9 = LDRSWui $sp, 19, debug-location !1359 :: (dereferenceable load 4 from %ir.j); cg.c:677:28
SU(1):   renamable $x10 = LDURXi $fp, -72, debug-location !1362 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:677:33
SU(2):   renamable $x9 = UBFMXri renamable $x9, 62, 61, debug-location !1361; cg.c:677:21
SU(3):   renamable $w8 = LDRWroX renamable $x8, renamable $x9, 0, 0, debug-location !1361 :: (load 4 from %ir.arrayidx34); cg.c:677:21
SU(4):   $x9 = ADDXrs renamable $x10, renamable $x9, 0, debug-location !1366; cg.c:677:9
SU(5):   renamable $w10 = LDURWi renamable $x9, -4, debug-location !1362 :: (load 4 from %ir.arrayidx37); cg.c:677:33
SU(6):   $w8 = ADDWrs renamable $w8, renamable $w10, 0, debug-location !1365; cg.c:677:31
SU(7):   STRWui renamable $w8, renamable $x9, 0, debug-location !1368 :: (store 4 into %ir.arrayidx40); cg.c:677:19
SU(8):   renamable $w8 = LDRWui $sp, 19, debug-location !1369 :: (dereferenceable load 4 from %ir.j); cg.c:676:33
SU(9):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1369; cg.c:676:33
SU(10):   STRWui renamable $w8, $sp, 19, debug-location !1369 :: (store 4 into %ir.j); cg.c:676:33

Fixup kills for %bb.11
********** MI Scheduling **********
sparse:%bb.12 for.end43
  From: renamable $x9 = LDRSWui $sp, 21, debug-location !1373 :: (dereferenceable load 4 from %ir.nrows); cg.c:679:18
    To: Bcc 13, %bb.14, implicit $nzcv, debug-location !1381; cg.c:685:9
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $x9 = LDRSWui $sp, 21, debug-location !1373 :: (dereferenceable load 4 from %ir.nrows); cg.c:679:18
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(2): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x9
SU(1):   renamable $w8 = LDRWroX renamable $x8, renamable $x9, 0, 1, debug-location !1374 :: (load 4 from %ir.arrayidx45); cg.c:679:11
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(0): Data Latency=4 Reg=$x9
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w8
    SU(2): Anti Latency=0
    SU(5): Ord  Latency=0 Memory
SU(2):   renamable $w9 = LDURWi $fp, -80, debug-location !1379 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:685:15
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    SU(4): Data Latency=4 Reg=$w9
SU(3):   renamable $w8 = SUBWri renamable $w8, 1, 0, debug-location !1375; cg.c:679:25
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 2
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
  Successors:
    SU(5): Data Latency=1 Reg=$w8
    SU(4): Data Latency=1 Reg=$w8
SU(4):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1381; cg.c:685:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(3): Data Latency=1 Reg=$w8
    SU(2): Data Latency=4 Reg=$w9
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   STRWui renamable $w8, $sp, 16, debug-location !1376 :: (store 4 into %ir.nza); cg.c:679:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=$w8
    SU(1): Ord  Latency=0 Memory
ExitSU:   Bcc 13, %bb.14, implicit $nzcv, debug-location !1381; cg.c:685:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 10
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x9 = LDRSWui $sp, 21, debug-location !1373 :: (dereferenceable load 4 from %ir.nrows); cg.c:679:18
  Ready @0c
  TopQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = LDRWroX renamable $x8, renamable $x9, 0, 1, debug-location !1374 :: (load 4 from %ir.arrayidx45); cg.c:679:11
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w9 = LDURWi $fp, -80, debug-location !1379 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:685:15
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 8 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w8 = SUBWri renamable $w8, 1, 0, debug-location !1375; cg.c:679:25
  Ready @8c
  TopQ.A TopLatency SU(3) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 4
  Executed: 9c
  Critical: 4c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 
  TopQ.A RemainingLatency 0 + 9c > CritPath 10
  Cand SU(5) ORDER                              
  Cand SU(4) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1381; cg.c:685:9
  Ready @9c
  TopQ.A TopLatency SU(4) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 5
  Executed: 10c
  Critical: 5c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) STRWui renamable $w8, $sp, 16, debug-location !1376 :: (store 4 into %ir.nza); cg.c:679:9
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 6
  Executed: 11c
  Critical: 6c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   renamable $x9 = LDRSWui $sp, 21, debug-location !1373 :: (dereferenceable load 4 from %ir.nrows); cg.c:679:18
SU(1):   renamable $w8 = LDRWroX renamable $x8, renamable $x9, 0, 1, debug-location !1374 :: (load 4 from %ir.arrayidx45); cg.c:679:11
SU(2):   renamable $w9 = LDURWi $fp, -80, debug-location !1379 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:685:15
SU(3):   renamable $w8 = SUBWri renamable $w8, 1, 0, debug-location !1375; cg.c:679:25
SU(4):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1381; cg.c:685:9
SU(5):   STRWui renamable $w8, $sp, 16, debug-location !1376 :: (store 4 into %ir.nza); cg.c:679:9

Fixup kills for %bb.12
********** MI Scheduling **********
sparse:%bb.13 if.then
  From: renamable $w1 = LDRWui $sp, 16, debug-location !1384 :: (dereferenceable load 4 from %ir.nza); cg.c:687:41
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit-def $sp, implicit-def dead $w0, debug-location !1386; cg.c:687:9
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $w1 = LDRWui $sp, 16, debug-location !1384 :: (dereferenceable load 4 from %ir.nza); cg.c:687:41
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(1):   renamable $w2 = LDURWi $fp, -80, debug-location !1385 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:687:46
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(2):   $x0 = ADRP target-flags(aarch64-page) @.str.38, debug-location !1386; cg.c:687:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x0
SU(3):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.38, 0, debug-location !1386; cg.c:687:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit-def $sp, implicit-def dead $w0, debug-location !1386; cg.c:687:9
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=4 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w1 = LDRWui $sp, 16, debug-location !1384 :: (dereferenceable load 4 from %ir.nza); cg.c:687:41
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 4
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w2 = LDURWi $fp, -80, debug-location !1385 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:687:46
  Ready @1c
  TopQ.A BotLatency SU(1) 4c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $x0 = ADRP target-flags(aarch64-page) @.str.38, debug-location !1386; cg.c:687:9
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.38, 0, debug-location !1386; cg.c:687:9
  Ready @3c
  TopQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   renamable $w1 = LDRWui $sp, 16, debug-location !1384 :: (dereferenceable load 4 from %ir.nza); cg.c:687:41
SU(1):   renamable $w2 = LDURWi $fp, -80, debug-location !1385 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:687:46
SU(2):   $x0 = ADRP target-flags(aarch64-page) @.str.38, debug-location !1386; cg.c:687:9
SU(3):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.38, 0, debug-location !1386; cg.c:687:9

********** MI Scheduling **********
sparse:%bb.13 if.then
  From: $x0 = ADRP target-flags(aarch64-page) @.str.37, debug-location !1382; cg.c:686:9
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !1382; cg.c:686:9
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.37, debug-location !1382; cg.c:686:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.37, 0, debug-location !1382; cg.c:686:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !1382; cg.c:686:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @.str.37, debug-location !1382; cg.c:686:9
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.37, 0, debug-location !1382; cg.c:686:9
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.37, debug-location !1382; cg.c:686:9
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.37, 0, debug-location !1382; cg.c:686:9

Fixup kills for %bb.13
********** MI Scheduling **********
sparse:%bb.14 if.end
  From: STRWui $wzr, $sp, 19, debug-location !1388 :: (store 4 into %ir.j); cg.c:694:12
    To: End RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   STRWui $wzr, $sp, 19, debug-location !1388 :: (store 4 into %ir.j); cg.c:694:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $w8 = MOVNWi 0, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $w8 = MOVNWi 0, 0
  Ready @0c
  TopQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STRWui $wzr, $sp, 19, debug-location !1388 :: (store 4 into %ir.j); cg.c:694:12
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.14 ***
SU(1):   $w8 = MOVNWi 0, 0
SU(0):   STRWui $wzr, $sp, 19, debug-location !1388 :: (store 4 into %ir.j); cg.c:694:12

Fixup kills for %bb.14
********** MI Scheduling **********
sparse:%bb.15 for.cond49
  From: renamable $w9 = LDRWui $sp, 19, debug-location !1391 :: (dereferenceable load 4 from %ir.j); cg.c:694:17
    To: Bcc 10, %bb.20, implicit $nzcv, debug-location !1395; cg.c:694:5
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w9 = LDRWui $sp, 19, debug-location !1391 :: (dereferenceable load 4 from %ir.j); cg.c:694:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w9
SU(1):   renamable $w10 = LDRWui $sp, 21, debug-location !1393 :: (dereferenceable load 4 from %ir.nrows); cg.c:694:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w10
SU(2):   $wzr = SUBSWrs renamable $w9, renamable $w10, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1395; cg.c:694:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=$w10
    SU(0): Data Latency=4 Reg=$w9
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.20, implicit $nzcv, debug-location !1395; cg.c:694:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $w9 = LDRWui $sp, 19, debug-location !1391 :: (dereferenceable load 4 from %ir.j); cg.c:694:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w10 = LDRWui $sp, 21, debug-location !1393 :: (dereferenceable load 4 from %ir.nrows); cg.c:694:21
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $wzr = SUBSWrs renamable $w9, renamable $w10, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1395; cg.c:694:5
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   renamable $w9 = LDRWui $sp, 19, debug-location !1391 :: (dereferenceable load 4 from %ir.j); cg.c:694:17
SU(1):   renamable $w10 = LDRWui $sp, 21, debug-location !1393 :: (dereferenceable load 4 from %ir.nrows); cg.c:694:21
SU(2):   $wzr = SUBSWrs renamable $w9, renamable $w10, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1395; cg.c:694:5

Fixup kills for %bb.15
********** MI Scheduling **********
sparse:%bb.16 for.body51
  From: renamable $x9 = LDURXi $fp, -72, debug-location !1396 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:18
    To: End RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $x9 = LDURXi $fp, -72, debug-location !1396 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:18
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x9
SU(1):   renamable $x10 = LDRSWui $sp, 19, debug-location !1399 :: (dereferenceable load 4 from %ir.j); cg.c:695:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Data Latency=4 Reg=$x10
SU(2):   renamable $w9 = LDRWroX renamable $x9, renamable $x10, 0, 1, debug-location !1396 :: (load 4 from %ir.arrayidx53); cg.c:695:18
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=$x10
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x9
  Successors:
    ExitSU: Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 8
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 8
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x9 = LDURXi $fp, -72, debug-location !1396 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:18
  Ready @0c
  TopQ.A BotLatency SU(0) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x10 = LDRSWui $sp, 19, debug-location !1399 :: (dereferenceable load 4 from %ir.j); cg.c:695:25
  Ready @1c
  TopQ.A BotLatency SU(1) 8c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w9 = LDRWroX renamable $x9, renamable $x10, 0, 1, debug-location !1396 :: (load 4 from %ir.arrayidx53); cg.c:695:18
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.16 ***
SU(0):   renamable $x9 = LDURXi $fp, -72, debug-location !1396 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:18
SU(1):   renamable $x10 = LDRSWui $sp, 19, debug-location !1399 :: (dereferenceable load 4 from %ir.j); cg.c:695:25
SU(2):   renamable $w9 = LDRWroX renamable $x9, renamable $x10, 0, 1, debug-location !1396 :: (load 4 from %ir.arrayidx53); cg.c:695:18

Fixup kills for %bb.16
********** MI Scheduling **********
sparse:%bb.17 for.cond54
  From: STRWui killed renamable $w9, $sp, 15, debug-location !DILocation(line: 0, scope: !1397) :: (store 4 into %ir.k); cg.c:0
    To: Bcc 10, %bb.19, implicit $nzcv, debug-location !1408; cg.c:695:9
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   STRWui renamable $w9, $sp, 15, debug-location !DILocation(line: 0, scope: !1397) :: (store 4 into %ir.k); cg.c:0
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 10
  Successors:
    SU(1): Anti Latency=0
    SU(3): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
SU(1):   renamable $x9 = LDURXi $fp, -72, debug-location !1404 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:33
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Predecessors:
    SU(0): Anti Latency=0
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$x9
SU(2):   renamable $x10 = LDRSWui $sp, 19, debug-location !1405 :: (dereferenceable load 4 from %ir.j); cg.c:695:40
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(4): Data Latency=4 Reg=$x10
SU(3):   renamable $w11 = LDRWui $sp, 15, debug-location !1402 :: (dereferenceable load 4 from %ir.k); cg.c:695:29
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(0): Ord  Latency=1 Memory
  Successors:
    SU(6): Data Latency=4 Reg=$w11
SU(4):   renamable $x9 = ADDXrs renamable $x9, renamable $x10, 2, debug-location !1404; cg.c:695:33
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(2): Data Latency=4 Reg=$x10
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x9
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x9
SU(5):   renamable $w9 = LDRWui renamable $x9, 1, debug-location !1404 :: (load 4 from %ir.arrayidx57); cg.c:695:33
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x9
    SU(0): Ord  Latency=1 Memory
  Successors:
    SU(6): Data Latency=4 Reg=$w9
SU(6):   $wzr = SUBSWrs renamable $w11, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1408; cg.c:695:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(5): Data Latency=4 Reg=$w9
    SU(3): Data Latency=4 Reg=$w11
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.19, implicit $nzcv, debug-location !1408; cg.c:695:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 10
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 10
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STRWui renamable $w9, $sp, 15, debug-location !DILocation(line: 0, scope: !1397) :: (store 4 into %ir.k); cg.c:0
  Ready @0c
  TopQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 10
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x9 = LDURXi $fp, -72, debug-location !1404 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:33
  Ready @1c
  TopQ.A BotLatency SU(1) 10c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 10
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x10 = LDRSWui $sp, 19, debug-location !1405 :: (dereferenceable load 4 from %ir.j); cg.c:695:40
  Ready @2c
  TopQ.A BotLatency SU(2) 10c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w11 = LDRWui $sp, 15, debug-location !1402 :: (dereferenceable load 4 from %ir.k); cg.c:695:29
  Ready @3c
  TopQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 6 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $x9 = ADDXrs renamable $x9, renamable $x10, 2, debug-location !1404; cg.c:695:33
  Ready @6c
  TopQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $w9 = LDRWui renamable $x9, 1, debug-location !1404 :: (load 4 from %ir.arrayidx57); cg.c:695:33
  Ready @7c
  TopQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 11 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) $wzr = SUBSWrs renamable $w11, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1408; cg.c:695:9
  Ready @11c
  TopQ.A TopLatency SU(6) 9c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 7
  Executed: 12c
  Critical: 7c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   STRWui renamable $w9, $sp, 15, debug-location !DILocation(line: 0, scope: !1397) :: (store 4 into %ir.k); cg.c:0
SU(1):   renamable $x9 = LDURXi $fp, -72, debug-location !1404 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:33
SU(2):   renamable $x10 = LDRSWui $sp, 19, debug-location !1405 :: (dereferenceable load 4 from %ir.j); cg.c:695:40
SU(3):   renamable $w11 = LDRWui $sp, 15, debug-location !1402 :: (dereferenceable load 4 from %ir.k); cg.c:695:29
SU(4):   renamable $x9 = ADDXrs renamable $x9, renamable $x10, 2, debug-location !1404; cg.c:695:33
SU(5):   renamable $w9 = LDRWui renamable $x9, 1, debug-location !1404 :: (load 4 from %ir.arrayidx57); cg.c:695:33
SU(6):   $wzr = SUBSWrs renamable $w11, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1408; cg.c:695:9

Fixup kills for %bb.17
********** MI Scheduling **********
sparse:%bb.18 for.body59
  From: renamable $x9 = LDRXui renamable $x20, 1, debug-location !1409 :: (dereferenceable load 8 from %ir.a.addr); cg.c:696:13
    To: B %bb.17
 RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   renamable $x9 = LDRXui renamable $x20, 1, debug-location !1409 :: (dereferenceable load 8 from %ir.a.addr); cg.c:696:13
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(3): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x9
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $x10 = LDRSWui $sp, 15, debug-location !1411 :: (dereferenceable load 4 from %ir.k); cg.c:696:15
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(4): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x10
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
SU(2):   STRXroX $xzr, renamable $x9, renamable $x10, 0, 1, debug-location !1412 :: (store 8 into %ir.arrayidx61); cg.c:696:18
  # preds left       : 4
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 10
  Predecessors:
    SU(1): Data Latency=4 Reg=$x10
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=$x9
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(3): Anti Latency=0
    SU(4): Anti Latency=0
    SU(5): Ord  Latency=0 Memory
    SU(6): Ord  Latency=1 Memory
    SU(4): Ord  Latency=1 Memory
    SU(3): Ord  Latency=1 Memory
SU(3):   renamable $x9 = LDRXui renamable $x20, 0, debug-location !1413 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:697:13
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 9
  Predecessors:
    SU(2): Anti Latency=0
    SU(2): Ord  Latency=1 Memory
    SU(0): Out  Latency=1
  Successors:
    SU(6): Out  Latency=1
    SU(5): Data Latency=4 Reg=$x9
    SU(5): Ord  Latency=0 Memory
SU(4):   renamable $x10 = LDRSWui $sp, 15, debug-location !1414 :: (dereferenceable load 4 from %ir.k); cg.c:697:20
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 9
  Predecessors:
    SU(2): Anti Latency=0
    SU(2): Ord  Latency=1 Memory
    SU(1): Out  Latency=1
  Successors:
    SU(5): Data Latency=4 Reg=$x10
    SU(5): Ord  Latency=0 Memory
SU(5):   STRWroX renamable $w8, renamable $x9, renamable $x10, 0, 1, debug-location !1415 :: (store 4 into %ir.arrayidx63); cg.c:697:23
  # preds left       : 7
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 5
  Predecessors:
    SU(4): Data Latency=4 Reg=$x10
    SU(4): Ord  Latency=0 Memory
    SU(3): Data Latency=4 Reg=$x9
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(6): Anti Latency=0
    SU(6): Ord  Latency=1 Memory
SU(6):   renamable $w9 = LDRWui $sp, 15, debug-location !1416 :: (dereferenceable load 4 from %ir.k); cg.c:695:49
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 4
  Predecessors:
    SU(5): Anti Latency=0
    SU(5): Ord  Latency=1 Memory
    SU(3): Out  Latency=1
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$w9
SU(7):   renamable $w9 = nsw ADDWri renamable $w9, 1, 0, debug-location !1416; cg.c:695:49
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 0
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$w9
ExitSU:   B %bb.17
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 14
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 14
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x9 = LDRXui renamable $x20, 1, debug-location !1409 :: (dereferenceable load 8 from %ir.a.addr); cg.c:696:13
  Ready @0c
  TopQ.A BotLatency SU(0) 14c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x10 = LDRSWui $sp, 15, debug-location !1411 :: (dereferenceable load 4 from %ir.k); cg.c:696:15
  Ready @1c
  TopQ.A BotLatency SU(1) 14c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRXroX $xzr, renamable $x9, renamable $x10, 0, 1, debug-location !1412 :: (store 8 into %ir.arrayidx61); cg.c:696:18
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 3 
  TopQ.A RemainingLatency 0 + 6c > CritPath 14
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) renamable $x9 = LDRXui renamable $x20, 0, debug-location !1413 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:697:13
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $x10 = LDRSWui $sp, 15, debug-location !1414 :: (dereferenceable load 4 from %ir.k); cg.c:697:20
  Ready @7c
  TopQ.A BotLatency SU(4) 9c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 11 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) STRWroX renamable $w8, renamable $x9, renamable $x10, 0, 1, debug-location !1415 :: (store 4 into %ir.arrayidx63); cg.c:697:23
  Ready @11c
  TopQ.A TopLatency SU(5) 9c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $w9 = LDRWui $sp, 15, debug-location !1416 :: (dereferenceable load 4 from %ir.k); cg.c:695:49
  Ready @12c
  TopQ.A TopLatency SU(6) 10c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 7
  Executed: 13c
  Critical: 7c, 7 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 16 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $w9 = nsw ADDWri renamable $w9, 1, 0, debug-location !1416; cg.c:695:49
  Ready @16c
  TopQ.A TopLatency SU(7) 14c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 8
  Executed: 17c
  Critical: 8c, 8 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.18 ***
SU(0):   renamable $x9 = LDRXui renamable $x20, 1, debug-location !1409 :: (dereferenceable load 8 from %ir.a.addr); cg.c:696:13
SU(1):   renamable $x10 = LDRSWui $sp, 15, debug-location !1411 :: (dereferenceable load 4 from %ir.k); cg.c:696:15
SU(2):   STRXroX $xzr, renamable $x9, renamable $x10, 0, 1, debug-location !1412 :: (store 8 into %ir.arrayidx61); cg.c:696:18
SU(3):   renamable $x9 = LDRXui renamable $x20, 0, debug-location !1413 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:697:13
SU(4):   renamable $x10 = LDRSWui $sp, 15, debug-location !1414 :: (dereferenceable load 4 from %ir.k); cg.c:697:20
SU(5):   STRWroX renamable $w8, renamable $x9, renamable $x10, 0, 1, debug-location !1415 :: (store 4 into %ir.arrayidx63); cg.c:697:23
SU(6):   renamable $w9 = LDRWui $sp, 15, debug-location !1416 :: (dereferenceable load 4 from %ir.k); cg.c:695:49
SU(7):   renamable $w9 = nsw ADDWri renamable $w9, 1, 0, debug-location !1416; cg.c:695:49

Fixup kills for %bb.18
********** MI Scheduling **********
sparse:%bb.19 for.end66
  From: renamable $x9 = LDRXui $fp, 5, debug-location !1420 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:699:9
    To: B %bb.15
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $x9 = LDRXui $fp, 5, debug-location !1420 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:699:9
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(3): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x9
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $x10 = LDRSWui $sp, 19, debug-location !1421 :: (dereferenceable load 4 from %ir.j); cg.c:699:15
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(2): Data Latency=4 Reg=$x10
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
SU(2):   STRWroX $wzr, renamable $x9, renamable $x10, 0, 1, debug-location !1422 :: (store 4 into %ir.arrayidx68); cg.c:699:18
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(1): Data Latency=4 Reg=$x10
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=$x9
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(3): Anti Latency=0
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=1 Memory
SU(3):   renamable $w9 = LDRWui $sp, 19, debug-location !1423 :: (dereferenceable load 4 from %ir.j); cg.c:694:29
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(2): Anti Latency=0
    SU(2): Ord  Latency=1 Memory
    SU(0): Out  Latency=1
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$w9
    SU(5): Ord  Latency=0 Memory
SU(4):   renamable $w9 = nsw ADDWri renamable $w9, 1, 0, debug-location !1423; cg.c:694:29
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w9
  Successors:
    SU(5): Data Latency=1 Reg=$w9
SU(5):   STRWui renamable $w9, $sp, 19, debug-location !1423 :: (store 4 into %ir.j); cg.c:694:29
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=$w9
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
ExitSU:   B %bb.15
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 10
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 10
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x9 = LDRXui $fp, 5, debug-location !1420 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:699:9
  Ready @0c
  TopQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x10 = LDRSWui $sp, 19, debug-location !1421 :: (dereferenceable load 4 from %ir.j); cg.c:699:15
  Ready @1c
  TopQ.A BotLatency SU(1) 10c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWroX $wzr, renamable $x9, renamable $x10, 0, 1, debug-location !1422 :: (store 4 into %ir.arrayidx68); cg.c:699:18
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w9 = LDRWui $sp, 19, debug-location !1423 :: (dereferenceable load 4 from %ir.j); cg.c:694:29
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 10 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w9 = nsw ADDWri renamable $w9, 1, 0, debug-location !1423; cg.c:694:29
  Ready @10c
  TopQ.A TopLatency SU(4) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) STRWui renamable $w9, $sp, 19, debug-location !1423 :: (store 4 into %ir.j); cg.c:694:29
  Ready @11c
  TopQ.A TopLatency SU(5) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   renamable $x9 = LDRXui $fp, 5, debug-location !1420 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:699:9
SU(1):   renamable $x10 = LDRSWui $sp, 19, debug-location !1421 :: (dereferenceable load 4 from %ir.j); cg.c:699:15
SU(2):   STRWroX $wzr, renamable $x9, renamable $x10, 0, 1, debug-location !1422 :: (store 4 into %ir.arrayidx68); cg.c:699:18
SU(3):   renamable $w9 = LDRWui $sp, 19, debug-location !1423 :: (dereferenceable load 4 from %ir.j); cg.c:694:29
SU(4):   renamable $w9 = nsw ADDWri renamable $w9, 1, 0, debug-location !1423; cg.c:694:29
SU(5):   STRWui renamable $w9, $sp, 19, debug-location !1423 :: (store 4 into %ir.j); cg.c:694:29

Fixup kills for %bb.19
********** MI Scheduling **********
sparse:%bb.20 for.end71
  From: STRDui killed renamable $d0, $sp, 3, debug-location !1433 :: (store 8 into %ir.ratio); cg.c:706:11
    To: End RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   STRDui renamable $d0, $sp, 3, debug-location !1433 :: (store 8 into %ir.ratio); cg.c:706:11
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   STRWui $wzr, $sp, 20, debug-location !1434 :: (store 4 into %ir.i); cg.c:708:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   $w21 = MOVZWi 56, 0, implicit-def $x21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $w22 = MOVZWi 112, 0, implicit-def $x22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $w23 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   $x19 = ADRP target-flags(aarch64-page) @.str.39
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x19
SU(6):   renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str.39, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
  Cand SU(5) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) $x19 = ADRP target-flags(aarch64-page) @.str.39
  Ready @0c
  TopQ.A BotLatency SU(5) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 6 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $w21 = MOVZWi 56, 0, implicit-def $x21
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 3 4 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  1 cycles 
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) $w22 = MOVZWi 112, 0, implicit-def $x22
  Ready @2c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  1 cycles 
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) $w23 = MOVZWi 1, 0
  Ready @3c
  TopQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 
  TopQ.A RemainingLatency 0 + 4c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str.39, 0
  Ready @4c
  TopQ.A TopLatency SU(6) 1c
  TopQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 5c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STRDui renamable $d0, $sp, 3, debug-location !1433 :: (store 8 into %ir.ratio); cg.c:706:11
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRWui $wzr, $sp, 20, debug-location !1434 :: (store 4 into %ir.i); cg.c:708:12
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.20 ***
SU(5):   $x19 = ADRP target-flags(aarch64-page) @.str.39
SU(2):   $w21 = MOVZWi 56, 0, implicit-def $x21
SU(3):   $w22 = MOVZWi 112, 0, implicit-def $x22
SU(4):   $w23 = MOVZWi 1, 0
SU(6):   renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str.39, 0
SU(0):   STRDui renamable $d0, $sp, 3, debug-location !1433 :: (store 8 into %ir.ratio); cg.c:706:11
SU(1):   STRWui $wzr, $sp, 20, debug-location !1434 :: (store 4 into %ir.i); cg.c:708:12

********** MI Scheduling **********
sparse:%bb.20 for.end71
  From: renamable $s1 = LDURSi $fp, -76, implicit-def $d1, debug-location !1430 :: (dereferenceable load 4 from %ir.n.addr); cg.c:706:31
    To: BL @pow, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $d1, implicit-def $sp, implicit-def $d0, debug-location !1432; cg.c:706:13
 RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   renamable $s1 = LDURSi $fp, -76, implicit-def $d1, debug-location !1430 :: (dereferenceable load 4 from %ir.n.addr); cg.c:706:31
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d1
SU(1):   $x8 = MOVZXi 16368, 48
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=$x8
SU(2):   renamable $d0 = LDRDui $sp, 12, debug-location !1428 :: (dereferenceable load 8 from %ir.rcond.addr); cg.c:706:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(3):   STRXui renamable $x8, $sp, 5, debug-location !1427 :: (store 8 into %ir.size); cg.c:705:10
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
SU(4):   renamable $q1 = SSHLLv2i32_shift renamable $d1, 0, debug-location !1430; cg.c:706:31
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d1
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$d1
    SU(5): Data Latency=0 Reg=$q1
SU(5):   renamable $d1 = SCVTFv1i64 renamable $d1, implicit $q1, debug-location !1430; cg.c:706:31
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$d1
    SU(4): Data Latency=0 Reg=$q1
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$d1
SU(6):   renamable $d2 = FMOVDi 112
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(7): Data Latency=1 Reg=$d2
SU(7):   renamable $d1 = FDIVDrr renamable $d2, renamable $d1, debug-location !1431; cg.c:706:29
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(5): Data Latency=1 Reg=$d1
    SU(5): Out  Latency=1
    SU(6): Data Latency=1 Reg=$d2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @pow, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $d1, implicit-def $sp, implicit-def $d0, debug-location !1432; cg.c:706:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 6 
  TopQ.A RemainingLatency 0 + 0c > CritPath 7
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $s1 = LDURSi $fp, -76, implicit-def $d1, debug-location !1430 :: (dereferenceable load 4 from %ir.n.addr); cg.c:706:31
  Ready @0c
  TopQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 6 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 7
  Cand SU(6) ORDER                              
  Cand SU(2) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d0 = LDRDui $sp, 12, debug-location !1428 :: (dereferenceable load 8 from %ir.rcond.addr); cg.c:706:17
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 6 1 
  TopQ.A RemainingLatency 0 + 2c > CritPath 7
  Cand SU(6) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(6) renamable $d2 = FMOVDi 112
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x8 = MOVZXi 16368, 48
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 4 
  TopQ.A RemainingLatency 0 + 4c > CritPath 7
  Cand SU(3) ORDER                              
  Cand SU(4) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $q1 = SSHLLv2i32_shift renamable $d1, 0, debug-location !1430; cg.c:706:31
  Ready @4c
  TopQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 5 
  TopQ.A RemainingLatency 0 + 5c > CritPath 7
  Cand SU(3) ORDER                              
  Cand SU(5) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $d1 = SCVTFv1i64 renamable $d1, implicit $q1, debug-location !1430; cg.c:706:31
  Ready @5c
  TopQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 7 
  TopQ.A RemainingLatency 0 + 6c > CritPath 7
  Cand SU(3) ORDER                              
  Cand SU(7) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) renamable $d1 = FDIVDrr renamable $d2, renamable $d1, debug-location !1431; cg.c:706:29
  Ready @6c
  TopQ.A TopLatency SU(7) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STRXui renamable $x8, $sp, 5, debug-location !1427 :: (store 8 into %ir.size); cg.c:705:10
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   renamable $s1 = LDURSi $fp, -76, implicit-def $d1, debug-location !1430 :: (dereferenceable load 4 from %ir.n.addr); cg.c:706:31
SU(2):   renamable $d0 = LDRDui $sp, 12, debug-location !1428 :: (dereferenceable load 8 from %ir.rcond.addr); cg.c:706:17
SU(6):   renamable $d2 = FMOVDi 112
SU(1):   $x8 = MOVZXi 16368, 48
SU(4):   renamable $q1 = SSHLLv2i32_shift renamable $d1, 0, debug-location !1430; cg.c:706:31
SU(5):   renamable $d1 = SCVTFv1i64 renamable $d1, implicit $q1, debug-location !1430; cg.c:706:31
SU(7):   renamable $d1 = FDIVDrr renamable $d2, renamable $d1, debug-location !1431; cg.c:706:29
SU(3):   STRXui renamable $x8, $sp, 5, debug-location !1427 :: (store 8 into %ir.size); cg.c:705:10

Fixup kills for %bb.20
********** MI Scheduling **********
sparse:%bb.21 for.cond73
  From: renamable $w8 = LDRWui $sp, 20, debug-location !1437 :: (dereferenceable load 4 from %ir.i); cg.c:708:17
    To: Bcc 10, %bb.49, implicit $nzcv, debug-location !1441; cg.c:708:5
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 20, debug-location !1437 :: (dereferenceable load 4 from %ir.i); cg.c:708:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w8
SU(1):   renamable $w9 = LDURWi $fp, -76, debug-location !1439 :: (dereferenceable load 4 from %ir.n.addr); cg.c:708:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w9
SU(2):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1441; cg.c:708:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=$w9
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.49, implicit $nzcv, debug-location !1441; cg.c:708:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 20, debug-location !1437 :: (dereferenceable load 4 from %ir.i); cg.c:708:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w9 = LDURWi $fp, -76, debug-location !1439 :: (dereferenceable load 4 from %ir.n.addr); cg.c:708:21
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1441; cg.c:708:5
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.21 ***
SU(0):   renamable $w8 = LDRWui $sp, 20, debug-location !1437 :: (dereferenceable load 4 from %ir.i); cg.c:708:17
SU(1):   renamable $w9 = LDURWi $fp, -76, debug-location !1439 :: (dereferenceable load 4 from %ir.n.addr); cg.c:708:21
SU(2):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1441; cg.c:708:5

Fixup kills for %bb.21
Fixup kills for %bb.22
********** MI Scheduling **********
sparse:%bb.23 for.cond77
  From: renamable $x8 = LDURXi $fp, -96, debug-location !1448 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:709:29
    To: Bcc 10, %bb.48, implicit $nzcv, debug-location !1451; cg.c:709:9
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURXi $fp, -96, debug-location !1448 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:709:29
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x8
SU(1):   renamable $x9 = LDRSWui $sp, 20, debug-location !1449 :: (dereferenceable load 4 from %ir.i); cg.c:709:34
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Data Latency=4 Reg=$x9
SU(2):   renamable $w10 = LDRWui $sp, 16, debug-location !1446 :: (dereferenceable load 4 from %ir.nza); cg.c:709:23
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=$w10
SU(3):   renamable $w8 = LDRWroX renamable $x8, renamable $x9, 0, 1, debug-location !1448 :: (load 4 from %ir.arrayidx79); cg.c:709:29
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=$x9
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(4): Data Latency=4 Reg=$w8
SU(4):   $wzr = SUBSWrs renamable $w10, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1451; cg.c:709:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=$w8
    SU(2): Data Latency=4 Reg=$w10
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.48, implicit $nzcv, debug-location !1451; cg.c:709:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 9
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 9
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDURXi $fp, -96, debug-location !1448 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:709:29
  Ready @0c
  TopQ.A BotLatency SU(0) 9c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 9
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  9 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x9 = LDRSWui $sp, 20, debug-location !1449 :: (dereferenceable load 4 from %ir.i); cg.c:709:34
  Ready @1c
  TopQ.A BotLatency SU(1) 9c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w10 = LDRWui $sp, 16, debug-location !1446 :: (dereferenceable load 4 from %ir.nza); cg.c:709:23
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w8 = LDRWroX renamable $x8, renamable $x9, 0, 1, debug-location !1448 :: (load 4 from %ir.arrayidx79); cg.c:709:29
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 9 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $wzr = SUBSWrs renamable $w10, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1451; cg.c:709:9
  Ready @9c
  TopQ.A TopLatency SU(4) 8c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 5
  Executed: 10c
  Critical: 5c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.23 ***
SU(0):   renamable $x8 = LDURXi $fp, -96, debug-location !1448 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:709:29
SU(1):   renamable $x9 = LDRSWui $sp, 20, debug-location !1449 :: (dereferenceable load 4 from %ir.i); cg.c:709:34
SU(2):   renamable $w10 = LDRWui $sp, 16, debug-location !1446 :: (dereferenceable load 4 from %ir.nza); cg.c:709:23
SU(3):   renamable $w8 = LDRWroX renamable $x8, renamable $x9, 0, 1, debug-location !1448 :: (load 4 from %ir.arrayidx79); cg.c:709:29
SU(4):   $wzr = SUBSWrs renamable $w10, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1451; cg.c:709:9

Fixup kills for %bb.23
********** MI Scheduling **********
sparse:%bb.24 for.body82
  From: renamable $x8 = LDRXui $sp, 13, debug-location !1452 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:710:17
    To: End RegionInstrs: 13
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRXui $sp, 13, debug-location !1452 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:710:17
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$x8
SU(1):   renamable $x9 = LDRSWui $sp, 20, debug-location !1454 :: (dereferenceable load 4 from %ir.i); cg.c:710:22
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$x9
    SU(4): Data Latency=4 Reg=$x9
SU(2):   renamable $x10 = LDRSWui $sp, 16, debug-location !1455 :: (dereferenceable load 4 from %ir.nza); cg.c:710:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(9): Data Latency=4 Reg=$x10
    SU(5): Data Latency=4 Reg=$x10
SU(3):   renamable $x11 = LDRXui $fp, 2, debug-location !1458 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:712:28
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(7): Data Latency=4 Reg=$x11
SU(4):   renamable $x8 = MADDXrrr renamable $x9, renamable $x21, renamable $x8, debug-location !1452; cg.c:710:17
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(1): Data Latency=4 Reg=$x9
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x8
    SU(7): Anti Latency=0
SU(5):   renamable $w8 = LDRWroX renamable $x8, renamable $x10, 0, 1, debug-location !1452 :: (load 4 from %ir.arrayidx86); cg.c:710:17
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x8
    SU(2): Data Latency=4 Reg=$x10
  Successors:
    SU(8): Data Latency=4 Reg=$w8
    SU(12): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
SU(6):   renamable $d0 = LDRDui $sp, 5, debug-location !1457 :: (dereferenceable load 8 from %ir.size); cg.c:712:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=4 Reg=$d0
SU(7):   renamable $x9 = MADDXrrr renamable $x9, renamable $x22, renamable $x11, debug-location !1458; cg.c:712:28
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(4): Anti Latency=0
    SU(3): Data Latency=4 Reg=$x11
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x9
  Successors:
    SU(9): Data Latency=1 Reg=$x9
SU(8):   STRWui renamable $w8, $sp, 19, debug-location !1456 :: (store 4 into %ir.j); cg.c:710:15
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 6
  Predecessors:
    SU(5): Data Latency=4 Reg=$w8
    SU(5): Ord  Latency=0 Memory
  Successors:
    SU(9): Ord  Latency=1 Memory
SU(9):   renamable $d1 = LDRDroX renamable $x9, renamable $x10, 0, 1, debug-location !1458 :: (load 8 from %ir.arrayidx90); cg.c:712:28
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 5
  Predecessors:
    SU(8): Ord  Latency=1 Memory
    SU(7): Data Latency=1 Reg=$x9
    SU(2): Data Latency=4 Reg=$x10
  Successors:
    SU(10): Data Latency=4 Reg=$d1
    SU(12): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
SU(10):   renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !1461; cg.c:712:26
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 1
  Predecessors:
    SU(9): Data Latency=4 Reg=$d1
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$d0
  Successors:
    SU(11): Data Latency=1 Reg=$d0
SU(11):   STRDui renamable $d0, $sp, 4, debug-location !1462 :: (store 8 into %ir.scale); cg.c:712:19
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=$d0
    SU(9): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
SU(12):   STRWui $wzr, $sp, 13, debug-location !1463 :: (store 4 into %ir.nzrow); cg.c:713:24
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(9): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
Critical Path: (PGS-RR) 15
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 6 
  TopQ.A RemainingLatency 0 + 0c > CritPath 15
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDRXui $sp, 13, debug-location !1452 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:710:17
  Ready @0c
  TopQ.A BotLatency SU(0) 15c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 1 2 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 15
  Cand SU(6) ORDER                              
  Cand SU(1) TOP-PATH                  15 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x9 = LDRSWui $sp, 20, debug-location !1454 :: (dereferenceable load 4 from %ir.i); cg.c:710:22
  Ready @1c
  TopQ.A BotLatency SU(1) 15c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 6 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 15
  Cand SU(6) ORDER                              
  Cand SU(3) TOP-PATH                  10 cycles 
  Cand SU(2) TOP-PATH                  14 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x10 = LDRSWui $sp, 16, debug-location !1455 :: (dereferenceable load 4 from %ir.nza); cg.c:710:25
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 6 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 15
  Cand SU(6) ORDER                              
  Cand SU(3) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $x11 = LDRXui $fp, 2, debug-location !1458 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:712:28
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $d0 = LDRDui $sp, 5, debug-location !1457 :: (dereferenceable load 8 from %ir.size); cg.c:712:21
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $x8 = MADDXrrr renamable $x9, renamable $x21, renamable $x8, debug-location !1452; cg.c:710:17
  Ready @5c
  TopQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $w8 = LDRWroX renamable $x8, renamable $x10, 0, 1, debug-location !1452 :: (load 4 from %ir.arrayidx86); cg.c:710:17
  Ready @6c
  TopQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 8 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $x9 = MADDXrrr renamable $x9, renamable $x22, renamable $x11, debug-location !1458; cg.c:712:28
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 10 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) STRWui renamable $w8, $sp, 19, debug-location !1456 :: (store 4 into %ir.j); cg.c:710:15
  Ready @10c
  TopQ.A TopLatency SU(8) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 9
  Executed: 11c
  Critical: 9c, 9 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) renamable $d1 = LDRDroX renamable $x9, renamable $x10, 0, 1, debug-location !1458 :: (load 8 from %ir.arrayidx90); cg.c:712:28
  Ready @11c
  TopQ.A TopLatency SU(9) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 10
  Executed: 12c
  Critical: 10c, 10 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 10 
Queue TopQ.A: 12 
Pick Top ONLY1     
Scheduling SU(12) STRWui $wzr, $sp, 13, debug-location !1463 :: (store 4 into %ir.nzrow); cg.c:713:24
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 11
  Executed: 13c
  Critical: 11c, 11 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 15 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !1461; cg.c:712:26
  Ready @15c
  TopQ.A TopLatency SU(10) 14c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 12
  Executed: 16c
  Critical: 12c, 12 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 
Pick Top ONLY1     
Scheduling SU(11) STRDui renamable $d0, $sp, 4, debug-location !1462 :: (store 8 into %ir.scale); cg.c:712:19
  Ready @16c
  TopQ.A TopLatency SU(11) 15c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 13
  Executed: 17c
  Critical: 13c, 13 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.24 ***
SU(0):   renamable $x8 = LDRXui $sp, 13, debug-location !1452 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:710:17
SU(1):   renamable $x9 = LDRSWui $sp, 20, debug-location !1454 :: (dereferenceable load 4 from %ir.i); cg.c:710:22
SU(2):   renamable $x10 = LDRSWui $sp, 16, debug-location !1455 :: (dereferenceable load 4 from %ir.nza); cg.c:710:25
SU(3):   renamable $x11 = LDRXui $fp, 2, debug-location !1458 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:712:28
SU(6):   renamable $d0 = LDRDui $sp, 5, debug-location !1457 :: (dereferenceable load 8 from %ir.size); cg.c:712:21
SU(4):   renamable $x8 = MADDXrrr renamable $x9, renamable $x21, renamable $x8, debug-location !1452; cg.c:710:17
SU(5):   renamable $w8 = LDRWroX renamable $x8, renamable $x10, 0, 1, debug-location !1452 :: (load 4 from %ir.arrayidx86); cg.c:710:17
SU(7):   renamable $x9 = MADDXrrr renamable $x9, renamable $x22, renamable $x11, debug-location !1458; cg.c:712:28
SU(8):   STRWui renamable $w8, $sp, 19, debug-location !1456 :: (store 4 into %ir.j); cg.c:710:15
SU(9):   renamable $d1 = LDRDroX renamable $x9, renamable $x10, 0, 1, debug-location !1458 :: (load 8 from %ir.arrayidx90); cg.c:712:28
SU(12):   STRWui $wzr, $sp, 13, debug-location !1463 :: (store 4 into %ir.nzrow); cg.c:713:24
SU(10):   renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !1461; cg.c:712:26
SU(11):   STRDui renamable $d0, $sp, 4, debug-location !1462 :: (store 8 into %ir.scale); cg.c:712:19

Fixup kills for %bb.24
********** MI Scheduling **********
sparse:%bb.25 for.cond91
  From: renamable $x8 = LDURXi $fp, -96, debug-location !1468 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:713:37
    To: Bcc 10, %bb.47, implicit $nzcv, debug-location !1471; cg.c:713:13
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURXi $fp, -96, debug-location !1468 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:713:37
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x8
SU(1):   renamable $x9 = LDRSWui $sp, 20, debug-location !1469 :: (dereferenceable load 4 from %ir.i); cg.c:713:42
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Data Latency=4 Reg=$x9
SU(2):   renamable $w10 = LDRWui $sp, 13, debug-location !1466 :: (dereferenceable load 4 from %ir.nzrow); cg.c:713:29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=$w10
SU(3):   renamable $w8 = LDRWroX renamable $x8, renamable $x9, 0, 1, debug-location !1468 :: (load 4 from %ir.arrayidx93); cg.c:713:37
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=$x9
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(4): Data Latency=4 Reg=$w8
SU(4):   $wzr = SUBSWrs renamable $w10, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1471; cg.c:713:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=$w8
    SU(2): Data Latency=4 Reg=$w10
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.47, implicit $nzcv, debug-location !1471; cg.c:713:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 9
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 9
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDURXi $fp, -96, debug-location !1468 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:713:37
  Ready @0c
  TopQ.A BotLatency SU(0) 9c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 9
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  9 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x9 = LDRSWui $sp, 20, debug-location !1469 :: (dereferenceable load 4 from %ir.i); cg.c:713:42
  Ready @1c
  TopQ.A BotLatency SU(1) 9c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w10 = LDRWui $sp, 13, debug-location !1466 :: (dereferenceable load 4 from %ir.nzrow); cg.c:713:29
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w8 = LDRWroX renamable $x8, renamable $x9, 0, 1, debug-location !1468 :: (load 4 from %ir.arrayidx93); cg.c:713:37
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 9 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $wzr = SUBSWrs renamable $w10, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1471; cg.c:713:13
  Ready @9c
  TopQ.A TopLatency SU(4) 8c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 5
  Executed: 10c
  Critical: 5c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   renamable $x8 = LDURXi $fp, -96, debug-location !1468 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:713:37
SU(1):   renamable $x9 = LDRSWui $sp, 20, debug-location !1469 :: (dereferenceable load 4 from %ir.i); cg.c:713:42
SU(2):   renamable $w10 = LDRWui $sp, 13, debug-location !1466 :: (dereferenceable load 4 from %ir.nzrow); cg.c:713:29
SU(3):   renamable $w8 = LDRWroX renamable $x8, renamable $x9, 0, 1, debug-location !1468 :: (load 4 from %ir.arrayidx93); cg.c:713:37
SU(4):   $wzr = SUBSWrs renamable $w10, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1471; cg.c:713:13

Fixup kills for %bb.25
********** MI Scheduling **********
sparse:%bb.26 for.body96
  From: renamable $x8 = LDRXui $sp, 13, debug-location !1472 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:714:24
    To: Bcc 1, %bb.29, implicit $nzcv, debug-location !1487; cg.c:721:31
 RegionInstrs: 14
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRXui $sp, 13, debug-location !1472 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:714:24
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$x8
SU(1):   renamable $x9 = LDRSWui $sp, 20, debug-location !1474 :: (dereferenceable load 4 from %ir.i); cg.c:714:29
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$x9
    SU(4): Data Latency=4 Reg=$x9
SU(2):   renamable $x10 = LDRSWui $sp, 13, debug-location !1475 :: (dereferenceable load 4 from %ir.nzrow); cg.c:714:32
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(9): Data Latency=4 Reg=$x10
    SU(5): Data Latency=4 Reg=$x10
SU(3):   renamable $x11 = LDRXui $fp, 2, debug-location !1477 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:715:22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(7): Data Latency=4 Reg=$x11
SU(4):   renamable $x8 = MADDXrrr renamable $x9, renamable $x21, renamable $x8, debug-location !1472; cg.c:714:24
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(1): Data Latency=4 Reg=$x9
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x8
    SU(7): Anti Latency=0
SU(5):   renamable $w8 = LDRWroX renamable $x8, renamable $x10, 0, 1, debug-location !1472 :: (load 4 from %ir.arrayidx100); cg.c:714:24
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x8
    SU(2): Data Latency=4 Reg=$x10
  Successors:
    SU(12): Data Latency=4 Reg=$w8
    SU(8): Data Latency=4 Reg=$w8
    SU(13): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
SU(6):   renamable $d0 = LDRDui $sp, 4, debug-location !1480 :: (dereferenceable load 8 from %ir.scale); cg.c:715:39
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=4 Reg=$d0
SU(7):   renamable $x9 = MADDXrrr renamable $x9, renamable $x22, renamable $x11, debug-location !1477; cg.c:715:22
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(4): Anti Latency=0
    SU(3): Data Latency=4 Reg=$x11
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x9
  Successors:
    SU(10): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x9
SU(8):   STRWui renamable $w8, $sp, 12, debug-location !1476 :: (store 4 into %ir.jcol); cg.c:714:22
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 6
  Predecessors:
    SU(5): Data Latency=4 Reg=$w8
    SU(5): Ord  Latency=0 Memory
  Successors:
    SU(9): Ord  Latency=1 Memory
SU(9):   renamable $d1 = LDRDroX renamable $x9, renamable $x10, 0, 1, debug-location !1477 :: (load 8 from %ir.arrayidx104); cg.c:715:22
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 5
  Predecessors:
    SU(8): Ord  Latency=1 Memory
    SU(7): Data Latency=1 Reg=$x9
    SU(2): Data Latency=4 Reg=$x10
  Successors:
    SU(11): Data Latency=4 Reg=$d1
    SU(10): Anti Latency=0
    SU(13): Ord  Latency=0 Memory
SU(10):   renamable $w9 = LDRWui $sp, 19, debug-location !1485 :: (dereferenceable load 4 from %ir.j); cg.c:721:29
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 5
  Predecessors:
    SU(9): Anti Latency=0
    SU(7): Out  Latency=1
  Successors:
    SU(12): Data Latency=4 Reg=$w9
SU(11):   renamable $d0 = FMULDrr renamable $d1, renamable $d0, debug-location !1481; cg.c:715:37
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 1
  Predecessors:
    SU(9): Data Latency=4 Reg=$d1
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$d0
  Successors:
    SU(13): Data Latency=1 Reg=$d0
SU(12):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1487; cg.c:721:31
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 1
  Predecessors:
    SU(10): Data Latency=4 Reg=$w9
    SU(5): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(13):   STRDui renamable $d0, $sp, 2, debug-location !1482 :: (store 8 into %ir.va); cg.c:715:20
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(11): Data Latency=1 Reg=$d0
    SU(9): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
ExitSU:   Bcc 1, %bb.29, implicit $nzcv, debug-location !1487; cg.c:721:31
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(12): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 15
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 6 
  TopQ.A RemainingLatency 0 + 0c > CritPath 15
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDRXui $sp, 13, debug-location !1472 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:714:24
  Ready @0c
  TopQ.A BotLatency SU(0) 15c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 1 2 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 15
  Cand SU(6) ORDER                              
  Cand SU(1) TOP-PATH                  15 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x9 = LDRSWui $sp, 20, debug-location !1474 :: (dereferenceable load 4 from %ir.i); cg.c:714:29
  Ready @1c
  TopQ.A BotLatency SU(1) 15c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 6 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 15
  Cand SU(6) ORDER                              
  Cand SU(3) TOP-PATH                  10 cycles 
  Cand SU(2) TOP-PATH                  14 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x10 = LDRSWui $sp, 13, debug-location !1475 :: (dereferenceable load 4 from %ir.nzrow); cg.c:714:32
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 6 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 15
  Cand SU(6) ORDER                              
  Cand SU(3) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $x11 = LDRXui $fp, 2, debug-location !1477 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:715:22
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $d0 = LDRDui $sp, 4, debug-location !1480 :: (dereferenceable load 8 from %ir.scale); cg.c:715:39
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $x8 = MADDXrrr renamable $x9, renamable $x21, renamable $x8, debug-location !1472; cg.c:714:24
  Ready @5c
  TopQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $w8 = LDRWroX renamable $x8, renamable $x10, 0, 1, debug-location !1472 :: (load 4 from %ir.arrayidx100); cg.c:714:24
  Ready @6c
  TopQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 8 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $x9 = MADDXrrr renamable $x9, renamable $x22, renamable $x11, debug-location !1477; cg.c:715:22
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 10 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) STRWui renamable $w8, $sp, 12, debug-location !1476 :: (store 4 into %ir.jcol); cg.c:714:22
  Ready @10c
  TopQ.A TopLatency SU(8) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 9
  Executed: 11c
  Critical: 9c, 9 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) renamable $d1 = LDRDroX renamable $x9, renamable $x10, 0, 1, debug-location !1477 :: (load 8 from %ir.arrayidx104); cg.c:715:22
  Ready @11c
  TopQ.A TopLatency SU(9) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 10
  Executed: 12c
  Critical: 10c, 10 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 11 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) renamable $w9 = LDRWui $sp, 19, debug-location !1485 :: (dereferenceable load 4 from %ir.j); cg.c:721:29
  Ready @12c
  TopQ.A BotLatency SU(10) 5c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 11
  Executed: 13c
  Critical: 11c, 11 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 15 TopQ.A
Queue TopQ.P: 12 
Queue TopQ.A: 11 
Pick Top ONLY1     
Scheduling SU(11) renamable $d0 = FMULDrr renamable $d1, renamable $d0, debug-location !1481; cg.c:715:37
  Ready @15c
  TopQ.A TopLatency SU(11) 14c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 12
  Executed: 16c
  Critical: 12c, 12 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 12 
  TopQ.A RemainingLatency 0 + 16c > CritPath 15
  Cand SU(13) ORDER                              
  Cand SU(12) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(12) $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1487; cg.c:721:31
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 13
  Executed: 17c
  Critical: 13c, 13 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 
Pick Top ONLY1     
Scheduling SU(13) STRDui renamable $d0, $sp, 2, debug-location !1482 :: (store 8 into %ir.va); cg.c:715:20
  Ready @17c
  TopQ.A TopLatency SU(13) 15c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 14
  Executed: 18c
  Critical: 14c, 14 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.26 ***
SU(0):   renamable $x8 = LDRXui $sp, 13, debug-location !1472 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:714:24
SU(1):   renamable $x9 = LDRSWui $sp, 20, debug-location !1474 :: (dereferenceable load 4 from %ir.i); cg.c:714:29
SU(2):   renamable $x10 = LDRSWui $sp, 13, debug-location !1475 :: (dereferenceable load 4 from %ir.nzrow); cg.c:714:32
SU(3):   renamable $x11 = LDRXui $fp, 2, debug-location !1477 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:715:22
SU(6):   renamable $d0 = LDRDui $sp, 4, debug-location !1480 :: (dereferenceable load 8 from %ir.scale); cg.c:715:39
SU(4):   renamable $x8 = MADDXrrr renamable $x9, renamable $x21, renamable $x8, debug-location !1472; cg.c:714:24
SU(5):   renamable $w8 = LDRWroX renamable $x8, renamable $x10, 0, 1, debug-location !1472 :: (load 4 from %ir.arrayidx100); cg.c:714:24
SU(7):   renamable $x9 = MADDXrrr renamable $x9, renamable $x22, renamable $x11, debug-location !1477; cg.c:715:22
SU(8):   STRWui renamable $w8, $sp, 12, debug-location !1476 :: (store 4 into %ir.jcol); cg.c:714:22
SU(9):   renamable $d1 = LDRDroX renamable $x9, renamable $x10, 0, 1, debug-location !1477 :: (load 8 from %ir.arrayidx104); cg.c:715:22
SU(10):   renamable $w9 = LDRWui $sp, 19, debug-location !1485 :: (dereferenceable load 4 from %ir.j); cg.c:721:29
SU(11):   renamable $d0 = FMULDrr renamable $d1, renamable $d0, debug-location !1481; cg.c:715:37
SU(12):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1487; cg.c:721:31
SU(13):   STRDui renamable $d0, $sp, 2, debug-location !1482 :: (store 8 into %ir.va); cg.c:715:20

Fixup kills for %bb.26
********** MI Scheduling **********
sparse:%bb.27 land.lhs.true
  From: renamable $w8, renamable $w9 = LDPWi $sp, 19, debug-location !1488 :: (dereferenceable load 4 from %ir.j), (dereferenceable load 4 from %ir.i); cg.c:721:34
    To: Bcc 1, %bb.29, implicit $nzcv, debug-location !1491; cg.c:721:21
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8, renamable $w9 = LDPWi $sp, 19, debug-location !1488 :: (dereferenceable load 4 from %ir.j), (dereferenceable load 4 from %ir.i); cg.c:721:34
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
    SU(1): Data Latency=4 Reg=$w9
SU(1):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1491; cg.c:721:21
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
    SU(0): Data Latency=4 Reg=$w9
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 1, %bb.29, implicit $nzcv, debug-location !1491; cg.c:721:21
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8, renamable $w9 = LDPWi $sp, 19, debug-location !1488 :: (dereferenceable load 4 from %ir.j), (dereferenceable load 4 from %ir.i); cg.c:721:34
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1491; cg.c:721:21
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   renamable $w8, renamable $w9 = LDPWi $sp, 19, debug-location !1488 :: (dereferenceable load 4 from %ir.j), (dereferenceable load 4 from %ir.i); cg.c:721:34
SU(1):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1491; cg.c:721:21

Fixup kills for %bb.27
********** MI Scheduling **********
sparse:%bb.28 if.then110
  From: renamable $d0 = LDRDui $sp, 2, debug-location !1492 :: (dereferenceable load 8 from %ir.va); cg.c:722:26
    To: End RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDRDui $sp, 2, debug-location !1492 :: (dereferenceable load 8 from %ir.va); cg.c:722:26
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d0
    SU(4): Ord  Latency=0 Memory
SU(1):   renamable $d2, renamable $d1 = LDPDi $sp, 11, debug-location !1494 :: (dereferenceable load 8 from %ir.rcond.addr), (dereferenceable load 8 from %ir.shift.addr); cg.c:722:31
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(3): Data Latency=4 Reg=$d2
    SU(2): Data Latency=4 Reg=$d1
SU(2):   renamable $d0 = FADDDrr renamable $d0, renamable $d1, debug-location !1495; cg.c:722:29
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(1): Data Latency=4 Reg=$d1
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d0
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$d0
SU(3):   renamable $d0 = FSUBDrr renamable $d0, renamable $d2, debug-location !1497; cg.c:722:37
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$d0
    SU(1): Data Latency=4 Reg=$d2
  Successors:
    SU(4): Data Latency=1 Reg=$d0
SU(4):   STRDui renamable $d0, $sp, 2, debug-location !1498 :: (store 8 into %ir.va); cg.c:722:24
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=$d0
    SU(0): Ord  Latency=0 Memory
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $d0 = LDRDui $sp, 2, debug-location !1492 :: (dereferenceable load 8 from %ir.va); cg.c:722:26
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $d2, renamable $d1 = LDPDi $sp, 11, debug-location !1494 :: (dereferenceable load 8 from %ir.rcond.addr), (dereferenceable load 8 from %ir.shift.addr); cg.c:722:31
  Ready @1c
  TopQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $d0 = FADDDrr renamable $d0, renamable $d1, debug-location !1495; cg.c:722:29
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $d0 = FSUBDrr renamable $d0, renamable $d2, debug-location !1497; cg.c:722:37
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) STRDui renamable $d0, $sp, 2, debug-location !1498 :: (store 8 into %ir.va); cg.c:722:24
  Ready @7c
  TopQ.A TopLatency SU(4) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.28 ***
SU(0):   renamable $d0 = LDRDui $sp, 2, debug-location !1492 :: (dereferenceable load 8 from %ir.va); cg.c:722:26
SU(1):   renamable $d2, renamable $d1 = LDPDi $sp, 11, debug-location !1494 :: (dereferenceable load 8 from %ir.rcond.addr), (dereferenceable load 8 from %ir.shift.addr); cg.c:722:31
SU(2):   renamable $d0 = FADDDrr renamable $d0, renamable $d1, debug-location !1495; cg.c:722:29
SU(3):   renamable $d0 = FSUBDrr renamable $d0, renamable $d2, debug-location !1497; cg.c:722:37
SU(4):   STRDui renamable $d0, $sp, 2, debug-location !1498 :: (store 8 into %ir.va); cg.c:722:24

Fixup kills for %bb.28
********** MI Scheduling **********
sparse:%bb.29 if.end113
  From: renamable $x8 = LDURXi $fp, -72, debug-location !1501 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:26
    To: End RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURXi $fp, -72, debug-location !1501 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:26
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x8
SU(1):   renamable $x9 = LDRSWui $sp, 19, debug-location !1503 :: (dereferenceable load 4 from %ir.j); cg.c:726:33
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=$x9
SU(2):   STRWui $wzr, $sp, 3, debug-location !1500 :: (store 4 into %ir.cont40); cg.c:725:24
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Ord  Latency=1 Memory
SU(3):   renamable $w8 = LDRWroX renamable $x8, renamable $x9, 0, 1, debug-location !1501 :: (load 4 from %ir.arrayidx115); cg.c:726:26
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(2): Ord  Latency=1 Memory
    SU(1): Data Latency=4 Reg=$x9
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 8
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 8
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDURXi $fp, -72, debug-location !1501 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:26
  Ready @0c
  TopQ.A BotLatency SU(0) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 8
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x9 = LDRSWui $sp, 19, debug-location !1503 :: (dereferenceable load 4 from %ir.j); cg.c:726:33
  Ready @1c
  TopQ.A BotLatency SU(1) 8c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui $wzr, $sp, 3, debug-location !1500 :: (store 4 into %ir.cont40); cg.c:725:24
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w8 = LDRWroX renamable $x8, renamable $x9, 0, 1, debug-location !1501 :: (load 4 from %ir.arrayidx115); cg.c:726:26
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.29 ***
SU(0):   renamable $x8 = LDURXi $fp, -72, debug-location !1501 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:26
SU(1):   renamable $x9 = LDRSWui $sp, 19, debug-location !1503 :: (dereferenceable load 4 from %ir.j); cg.c:726:33
SU(2):   STRWui $wzr, $sp, 3, debug-location !1500 :: (store 4 into %ir.cont40); cg.c:725:24
SU(3):   renamable $w8 = LDRWroX renamable $x8, renamable $x9, 0, 1, debug-location !1501 :: (load 4 from %ir.arrayidx115); cg.c:726:26

Fixup kills for %bb.29
********** MI Scheduling **********
sparse:%bb.30 for.cond116
  From: STRWui killed renamable $w8, $sp, 15, debug-location !DILocation(line: 0, scope: !1502) :: (store 4 into %ir.k); cg.c:0
    To: Bcc 10, %bb.44, implicit $nzcv, debug-location !1512; cg.c:726:17
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   STRWui renamable $w8, $sp, 15, debug-location !DILocation(line: 0, scope: !1502) :: (store 4 into %ir.k); cg.c:0
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 10
  Successors:
    SU(1): Anti Latency=0
    SU(3): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
SU(1):   renamable $x8 = LDURXi $fp, -72, debug-location !1508 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:41
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Predecessors:
    SU(0): Anti Latency=0
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$x8
SU(2):   renamable $x9 = LDRSWui $sp, 19, debug-location !1509 :: (dereferenceable load 4 from %ir.j); cg.c:726:48
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(4): Data Latency=4 Reg=$x9
SU(3):   renamable $w10 = LDRWui $sp, 15, debug-location !1506 :: (dereferenceable load 4 from %ir.k); cg.c:726:37
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(0): Ord  Latency=1 Memory
  Successors:
    SU(6): Data Latency=4 Reg=$w10
SU(4):   renamable $x8 = ADDXrs renamable $x8, renamable $x9, 2, debug-location !1508; cg.c:726:41
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(2): Data Latency=4 Reg=$x9
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x8
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x8
SU(5):   renamable $w8 = LDRWui renamable $x8, 1, debug-location !1508 :: (load 4 from %ir.arrayidx119); cg.c:726:41
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x8
    SU(0): Ord  Latency=1 Memory
  Successors:
    SU(6): Data Latency=4 Reg=$w8
SU(6):   $wzr = SUBSWrs renamable $w10, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1512; cg.c:726:17
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(5): Data Latency=4 Reg=$w8
    SU(3): Data Latency=4 Reg=$w10
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.44, implicit $nzcv, debug-location !1512; cg.c:726:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 10
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 10
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STRWui renamable $w8, $sp, 15, debug-location !DILocation(line: 0, scope: !1502) :: (store 4 into %ir.k); cg.c:0
  Ready @0c
  TopQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 10
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x8 = LDURXi $fp, -72, debug-location !1508 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:41
  Ready @1c
  TopQ.A BotLatency SU(1) 10c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 10
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x9 = LDRSWui $sp, 19, debug-location !1509 :: (dereferenceable load 4 from %ir.j); cg.c:726:48
  Ready @2c
  TopQ.A BotLatency SU(2) 10c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w10 = LDRWui $sp, 15, debug-location !1506 :: (dereferenceable load 4 from %ir.k); cg.c:726:37
  Ready @3c
  TopQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 6 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $x8 = ADDXrs renamable $x8, renamable $x9, 2, debug-location !1508; cg.c:726:41
  Ready @6c
  TopQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $w8 = LDRWui renamable $x8, 1, debug-location !1508 :: (load 4 from %ir.arrayidx119); cg.c:726:41
  Ready @7c
  TopQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 11 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) $wzr = SUBSWrs renamable $w10, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1512; cg.c:726:17
  Ready @11c
  TopQ.A TopLatency SU(6) 9c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 7
  Executed: 12c
  Critical: 7c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.30 ***
SU(0):   STRWui renamable $w8, $sp, 15, debug-location !DILocation(line: 0, scope: !1502) :: (store 4 into %ir.k); cg.c:0
SU(1):   renamable $x8 = LDURXi $fp, -72, debug-location !1508 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:41
SU(2):   renamable $x9 = LDRSWui $sp, 19, debug-location !1509 :: (dereferenceable load 4 from %ir.j); cg.c:726:48
SU(3):   renamable $w10 = LDRWui $sp, 15, debug-location !1506 :: (dereferenceable load 4 from %ir.k); cg.c:726:37
SU(4):   renamable $x8 = ADDXrs renamable $x8, renamable $x9, 2, debug-location !1508; cg.c:726:41
SU(5):   renamable $w8 = LDRWui renamable $x8, 1, debug-location !1508 :: (load 4 from %ir.arrayidx119); cg.c:726:41
SU(6):   $wzr = SUBSWrs renamable $w10, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1512; cg.c:726:17

Fixup kills for %bb.30
********** MI Scheduling **********
sparse:%bb.31 for.body122
  From: renamable $x8 = LDRXui renamable $x20, 0, debug-location !1513 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:727:25
    To: Bcc 13, %bb.37, implicit $nzcv, debug-location !1519; cg.c:727:25
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRXui renamable $x20, 0, debug-location !1513 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:727:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x8
SU(1):   renamable $x9 = LDRSWui $sp, 15, debug-location !1516 :: (dereferenceable load 4 from %ir.k); cg.c:727:32
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x9
SU(2):   renamable $w8 = LDRWroX renamable $x8, renamable $x9, 0, 1, debug-location !1513 :: (load 4 from %ir.arrayidx124); cg.c:727:25
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=$x9
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(4): Data Latency=4 Reg=$w8
    SU(3): Anti Latency=0
SU(3):   renamable $w9 = LDRWui $sp, 12, debug-location !1517 :: (dereferenceable load 4 from %ir.jcol); cg.c:727:37
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(2): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    SU(4): Data Latency=4 Reg=$w9
SU(4):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1519; cg.c:727:25
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=$w9
    SU(2): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 13, %bb.37, implicit $nzcv, debug-location !1519; cg.c:727:25
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 9
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 9
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x8 = LDRXui renamable $x20, 0, debug-location !1513 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:727:25
  Ready @0c
  TopQ.A BotLatency SU(0) 9c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x9 = LDRSWui $sp, 15, debug-location !1516 :: (dereferenceable load 4 from %ir.k); cg.c:727:32
  Ready @1c
  TopQ.A BotLatency SU(1) 9c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w8 = LDRWroX renamable $x8, renamable $x9, 0, 1, debug-location !1513 :: (load 4 from %ir.arrayidx124); cg.c:727:25
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w9 = LDRWui $sp, 12, debug-location !1517 :: (dereferenceable load 4 from %ir.jcol); cg.c:727:37
  Ready @6c
  TopQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 10 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1519; cg.c:727:25
  Ready @10c
  TopQ.A TopLatency SU(4) 8c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.31 ***
SU(0):   renamable $x8 = LDRXui renamable $x20, 0, debug-location !1513 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:727:25
SU(1):   renamable $x9 = LDRSWui $sp, 15, debug-location !1516 :: (dereferenceable load 4 from %ir.k); cg.c:727:32
SU(2):   renamable $w8 = LDRWroX renamable $x8, renamable $x9, 0, 1, debug-location !1513 :: (load 4 from %ir.arrayidx124); cg.c:727:25
SU(3):   renamable $w9 = LDRWui $sp, 12, debug-location !1517 :: (dereferenceable load 4 from %ir.jcol); cg.c:727:37
SU(4):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1519; cg.c:727:25

Fixup kills for %bb.31
********** MI Scheduling **********
sparse:%bb.32 if.then127
  From: renamable $x8 = LDURXi $fp, -72, debug-location !1520 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:731:35
    To: End RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURXi $fp, -72, debug-location !1520 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:731:35
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x8
SU(1):   renamable $x9 = LDRSWui $sp, 19, debug-location !1523 :: (dereferenceable load 4 from %ir.j); cg.c:731:42
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(2): Data Latency=4 Reg=$x9
SU(2):   renamable $x8 = ADDXrs renamable $x8, renamable $x9, 2, debug-location !1520; cg.c:731:35
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(1): Data Latency=4 Reg=$x9
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x8
SU(3):   renamable $w8 = LDRWui renamable $x8, 1, debug-location !1520 :: (load 4 from %ir.arrayidx130); cg.c:731:35
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x8
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$w8
SU(4):   renamable $w8 = SUBWri renamable $w8, 2, 0, debug-location !1525; cg.c:731:49
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 10
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 10
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x8 = LDURXi $fp, -72, debug-location !1520 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:731:35
  Ready @0c
  TopQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x9 = LDRSWui $sp, 19, debug-location !1523 :: (dereferenceable load 4 from %ir.j); cg.c:731:42
  Ready @1c
  TopQ.A BotLatency SU(1) 10c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x8 = ADDXrs renamable $x8, renamable $x9, 2, debug-location !1520; cg.c:731:35
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w8 = LDRWui renamable $x8, 1, debug-location !1520 :: (load 4 from %ir.arrayidx130); cg.c:731:35
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 10 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w8 = SUBWri renamable $w8, 2, 0, debug-location !1525; cg.c:731:49
  Ready @10c
  TopQ.A TopLatency SU(4) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   renamable $x8 = LDURXi $fp, -72, debug-location !1520 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:731:35
SU(1):   renamable $x9 = LDRSWui $sp, 19, debug-location !1523 :: (dereferenceable load 4 from %ir.j); cg.c:731:42
SU(2):   renamable $x8 = ADDXrs renamable $x8, renamable $x9, 2, debug-location !1520; cg.c:731:35
SU(3):   renamable $w8 = LDRWui renamable $x8, 1, debug-location !1520 :: (load 4 from %ir.arrayidx130); cg.c:731:35
SU(4):   renamable $w8 = SUBWri renamable $w8, 2, 0, debug-location !1525; cg.c:731:49

Fixup kills for %bb.32
********** MI Scheduling **********
sparse:%bb.33 for.cond132
  From: STRWui renamable $w8, $sp, 14, debug-location !DILocation(line: 0, scope: !1521) :: (store 4 into %ir.kk); cg.c:0
    To: Bcc 11, %bb.42, implicit $nzcv, debug-location !1532; cg.c:731:25
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   STRWui renamable $w8, $sp, 14, debug-location !DILocation(line: 0, scope: !1521) :: (store 4 into %ir.kk); cg.c:0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Anti Latency=0
SU(1):   $w8 = ORRWrs $wzr, renamable $w8, 0, debug-location !1528; cg.c:731:54
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Predecessors:
    SU(0): Anti Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=$w8
SU(2):   renamable $w9 = LDRWui $sp, 15, debug-location !1530 :: (dereferenceable load 4 from %ir.k); cg.c:731:60
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=$w9
SU(3):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1532; cg.c:731:25
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=$w9
    SU(1): Data Latency=1 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 11, %bb.42, implicit $nzcv, debug-location !1532; cg.c:731:25
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $w9 = LDRWui $sp, 15, debug-location !1530 :: (dereferenceable load 4 from %ir.k); cg.c:731:60
  Ready @0c
  TopQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STRWui renamable $w8, $sp, 14, debug-location !DILocation(line: 0, scope: !1521) :: (store 4 into %ir.kk); cg.c:0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w8 = ORRWrs $wzr, renamable $w8, 0, debug-location !1528; cg.c:731:54
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1532; cg.c:731:25
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.33 ***
SU(2):   renamable $w9 = LDRWui $sp, 15, debug-location !1530 :: (dereferenceable load 4 from %ir.k); cg.c:731:60
SU(0):   STRWui renamable $w8, $sp, 14, debug-location !DILocation(line: 0, scope: !1521) :: (store 4 into %ir.kk); cg.c:0
SU(1):   $w8 = ORRWrs $wzr, renamable $w8, 0, debug-location !1528; cg.c:731:54
SU(3):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1532; cg.c:731:25

Fixup kills for %bb.33
********** MI Scheduling **********
sparse:%bb.34 for.body135
  From: renamable $x8 = LDRXui renamable $x20, 0, debug-location !1533 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:732:33
    To: TBNZW killed renamable $w8, 31, %bb.36, debug-location !1538; cg.c:732:33
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRXui renamable $x20, 0, debug-location !1533 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:732:33
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x8
SU(1):   renamable $x9 = LDRSWui $sp, 14, debug-location !1536 :: (dereferenceable load 4 from %ir.kk); cg.c:732:40
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Data Latency=4 Reg=$x9
SU(2):   renamable $w8 = LDRWroX renamable $x8, renamable $x9, 0, 1, debug-location !1533 :: (load 4 from %ir.arrayidx137); cg.c:732:33
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=$x9
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
ExitSU:   TBNZW killed renamable $w8, 31, %bb.36, debug-location !1538; cg.c:732:33
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 8
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 8
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x8 = LDRXui renamable $x20, 0, debug-location !1533 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:732:33
  Ready @0c
  TopQ.A BotLatency SU(0) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x9 = LDRSWui $sp, 14, debug-location !1536 :: (dereferenceable load 4 from %ir.kk); cg.c:732:40
  Ready @1c
  TopQ.A BotLatency SU(1) 8c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w8 = LDRWroX renamable $x8, renamable $x9, 0, 1, debug-location !1533 :: (load 4 from %ir.arrayidx137); cg.c:732:33
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.34 ***
SU(0):   renamable $x8 = LDRXui renamable $x20, 0, debug-location !1533 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:732:33
SU(1):   renamable $x9 = LDRSWui $sp, 14, debug-location !1536 :: (dereferenceable load 4 from %ir.kk); cg.c:732:40
SU(2):   renamable $w8 = LDRWroX renamable $x8, renamable $x9, 0, 1, debug-location !1533 :: (load 4 from %ir.arrayidx137); cg.c:732:33

Fixup kills for %bb.34
********** MI Scheduling **********
sparse:%bb.35 if.then140
  From: renamable $x8 = LDRXui renamable $x20, 1, debug-location !1539 :: (dereferenceable load 8 from %ir.a.addr); cg.c:733:45
    To: End RegionInstrs: 10
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRXui renamable $x20, 1, debug-location !1539 :: (dereferenceable load 8 from %ir.a.addr); cg.c:733:45
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 19
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x8
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
SU(1):   renamable $x9 = LDRSWui $sp, 14, debug-location !1541 :: (dereferenceable load 4 from %ir.kk); cg.c:733:47
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 19
  Successors:
    SU(6): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x9
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
SU(2):   renamable $x8 = ADDXrs renamable $x8, renamable $x9, 3, debug-location !1539; cg.c:733:45
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 15
  Predecessors:
    SU(1): Data Latency=4 Reg=$x9
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(5): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x8
    SU(3): Data Latency=1 Reg=$x8
    SU(6): Anti Latency=0
SU(3):   renamable $d0 = LDRDui renamable $x8, 0, debug-location !1539 :: (load 8 from %ir.arrayidx142); cg.c:733:45
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 14
  Predecessors:
    SU(2): Data Latency=1 Reg=$x8
  Successors:
    SU(4): Data Latency=4 Reg=$d0
    SU(5): Anti Latency=0
    SU(9): Ord  Latency=0 Memory
SU(4):   STRDui renamable $d0, renamable $x8, 1, debug-location !1545 :: (store 8 into %ir.arrayidx145); cg.c:733:43
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 10
  Predecessors:
    SU(3): Data Latency=4 Reg=$d0
    SU(2): Data Latency=1 Reg=$x8
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(5): Anti Latency=0
    SU(6): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
SU(5):   renamable $x8 = LDRXui renamable $x20, 0, debug-location !1546 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:734:50
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 9
  Predecessors:
    SU(4): Anti Latency=0
    SU(4): Ord  Latency=1 Memory
    SU(3): Anti Latency=0
    SU(2): Out  Latency=1
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$x8
    SU(9): Ord  Latency=0 Memory
SU(6):   renamable $x9 = LDRSWui $sp, 14, debug-location !1547 :: (dereferenceable load 4 from %ir.kk); cg.c:734:57
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 9
  Predecessors:
    SU(4): Ord  Latency=1 Memory
    SU(2): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    SU(8): Out  Latency=1
    SU(7): Data Latency=4 Reg=$x9
    SU(9): Ord  Latency=0 Memory
SU(7):   renamable $x8 = ADDXrs renamable $x8, renamable $x9, 2, debug-location !1546; cg.c:734:50
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 5
  Predecessors:
    SU(6): Data Latency=4 Reg=$x9
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$x8
  Successors:
    SU(9): Data Latency=1 Reg=$x8
    SU(8): Data Latency=1 Reg=$x8
    SU(8): Anti Latency=0
SU(8):   renamable $w9 = LDRWui renamable $x8, 0, debug-location !1546 :: (load 4 from %ir.arrayidx147); cg.c:734:50
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 15
  Height             : 4
  Predecessors:
    SU(7): Data Latency=1 Reg=$x8
    SU(7): Anti Latency=0
    SU(6): Out  Latency=1
  Successors:
    SU(9): Data Latency=4 Reg=$w9
SU(9):   STRWui renamable $w9, renamable $x8, 1, debug-location !1551 :: (store 4 into %ir.arrayidx150); cg.c:734:48
  # preds left       : 7
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 19
  Height             : 0
  Predecessors:
    SU(8): Data Latency=4 Reg=$w9
    SU(7): Data Latency=1 Reg=$x8
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
Critical Path: (PGS-RR) 19
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 19
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x8 = LDRXui renamable $x20, 1, debug-location !1539 :: (dereferenceable load 8 from %ir.a.addr); cg.c:733:45
  Ready @0c
  TopQ.A BotLatency SU(0) 19c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x9 = LDRSWui $sp, 14, debug-location !1541 :: (dereferenceable load 4 from %ir.kk); cg.c:733:47
  Ready @1c
  TopQ.A BotLatency SU(1) 19c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x8 = ADDXrs renamable $x8, renamable $x9, 3, debug-location !1539; cg.c:733:45
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $d0 = LDRDui renamable $x8, 0, debug-location !1539 :: (load 8 from %ir.arrayidx142); cg.c:733:45
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 10 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) STRDui renamable $d0, renamable $x8, 1, debug-location !1545 :: (store 8 into %ir.arrayidx145); cg.c:733:43
  Ready @10c
  TopQ.A TopLatency SU(4) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 5 
  TopQ.A RemainingLatency 0 + 11c > CritPath 19
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $x8 = LDRXui renamable $x20, 0, debug-location !1546 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:734:50
  Ready @11c
  TopQ.A TopLatency SU(5) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $x9 = LDRSWui $sp, 14, debug-location !1547 :: (dereferenceable load 4 from %ir.kk); cg.c:734:57
  Ready @12c
  TopQ.A BotLatency SU(6) 9c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 7
  Executed: 13c
  Critical: 7c, 7 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 16 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $x8 = ADDXrs renamable $x8, renamable $x9, 2, debug-location !1546; cg.c:734:50
  Ready @16c
  TopQ.A TopLatency SU(7) 14c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 8
  Executed: 17c
  Critical: 8c, 8 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) renamable $w9 = LDRWui renamable $x8, 0, debug-location !1546 :: (load 4 from %ir.arrayidx147); cg.c:734:50
  Ready @17c
  TopQ.A TopLatency SU(8) 15c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 9
  Executed: 18c
  Critical: 9c, 9 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 21 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) STRWui renamable $w9, renamable $x8, 1, debug-location !1551 :: (store 4 into %ir.arrayidx150); cg.c:734:48
  Ready @21c
  TopQ.A TopLatency SU(9) 19c
  *** Max MOps 1 at cycle 21
Cycle: 22 TopQ.A
TopQ.A @22c
  Retired: 10
  Executed: 22c
  Critical: 10c, 10 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.35 ***
SU(0):   renamable $x8 = LDRXui renamable $x20, 1, debug-location !1539 :: (dereferenceable load 8 from %ir.a.addr); cg.c:733:45
SU(1):   renamable $x9 = LDRSWui $sp, 14, debug-location !1541 :: (dereferenceable load 4 from %ir.kk); cg.c:733:47
SU(2):   renamable $x8 = ADDXrs renamable $x8, renamable $x9, 3, debug-location !1539; cg.c:733:45
SU(3):   renamable $d0 = LDRDui renamable $x8, 0, debug-location !1539 :: (load 8 from %ir.arrayidx142); cg.c:733:45
SU(4):   STRDui renamable $d0, renamable $x8, 1, debug-location !1545 :: (store 8 into %ir.arrayidx145); cg.c:733:43
SU(5):   renamable $x8 = LDRXui renamable $x20, 0, debug-location !1546 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:734:50
SU(6):   renamable $x9 = LDRSWui $sp, 14, debug-location !1547 :: (dereferenceable load 4 from %ir.kk); cg.c:734:57
SU(7):   renamable $x8 = ADDXrs renamable $x8, renamable $x9, 2, debug-location !1546; cg.c:734:50
SU(8):   renamable $w9 = LDRWui renamable $x8, 0, debug-location !1546 :: (load 4 from %ir.arrayidx147); cg.c:734:50
SU(9):   STRWui renamable $w9, renamable $x8, 1, debug-location !1551 :: (store 4 into %ir.arrayidx150); cg.c:734:48

Fixup kills for %bb.35
********** MI Scheduling **********
sparse:%bb.36 for.inc152
  From: renamable $w8 = LDRWui $sp, 14, debug-location !1553 :: (dereferenceable load 4 from %ir.kk); cg.c:731:65
    To: B %bb.33
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 14, debug-location !1553 :: (dereferenceable load 4 from %ir.kk); cg.c:731:65
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
SU(1):   renamable $w8 = nsw SUBWri renamable $w8, 1, 0, debug-location !1553; cg.c:731:65
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
ExitSU:   B %bb.33
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 14, debug-location !1553 :: (dereferenceable load 4 from %ir.kk); cg.c:731:65
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw SUBWri renamable $w8, 1, 0, debug-location !1553; cg.c:731:65
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.36 ***
SU(0):   renamable $w8 = LDRWui $sp, 14, debug-location !1553 :: (dereferenceable load 4 from %ir.kk); cg.c:731:65
SU(1):   renamable $w8 = nsw SUBWri renamable $w8, 1, 0, debug-location !1553; cg.c:731:65

Fixup kills for %bb.36
********** MI Scheduling **********
sparse:%bb.37 if.else
  From: renamable $x8 = LDRXui renamable $x20, 0, debug-location !1566 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:742:30
    To: Bcc 1, %bb.39, implicit $nzcv, debug-location !1570; cg.c:742:30
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRXui renamable $x20, 0, debug-location !1566 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:742:30
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x8
SU(1):   renamable $x9 = LDRSWui $sp, 15, debug-location !1568 :: (dereferenceable load 4 from %ir.k); cg.c:742:37
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Data Latency=4 Reg=$x9
SU(2):   renamable $w8 = LDRWroX renamable $x8, renamable $x9, 0, 1, debug-location !1566 :: (load 4 from %ir.arrayidx159); cg.c:742:30
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=$x9
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(3): Data Latency=4 Reg=$w8
SU(3):   dead $wzr = ADDSWri renamable $w8, 1, 0, implicit-def $nzcv, debug-location !1570; cg.c:742:30
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 1, %bb.39, implicit $nzcv, debug-location !1570; cg.c:742:30
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 9
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 9
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x8 = LDRXui renamable $x20, 0, debug-location !1566 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:742:30
  Ready @0c
  TopQ.A BotLatency SU(0) 9c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x9 = LDRSWui $sp, 15, debug-location !1568 :: (dereferenceable load 4 from %ir.k); cg.c:742:37
  Ready @1c
  TopQ.A BotLatency SU(1) 9c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w8 = LDRWroX renamable $x8, renamable $x9, 0, 1, debug-location !1566 :: (load 4 from %ir.arrayidx159); cg.c:742:30
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 9 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) dead $wzr = ADDSWri renamable $w8, 1, 0, implicit-def $nzcv, debug-location !1570; cg.c:742:30
  Ready @9c
  TopQ.A TopLatency SU(3) 8c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 4
  Executed: 10c
  Critical: 4c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.37 ***
SU(0):   renamable $x8 = LDRXui renamable $x20, 0, debug-location !1566 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:742:30
SU(1):   renamable $x9 = LDRSWui $sp, 15, debug-location !1568 :: (dereferenceable load 4 from %ir.k); cg.c:742:37
SU(2):   renamable $w8 = LDRWroX renamable $x8, renamable $x9, 0, 1, debug-location !1566 :: (load 4 from %ir.arrayidx159); cg.c:742:30
SU(3):   dead $wzr = ADDSWri renamable $w8, 1, 0, implicit-def $nzcv, debug-location !1570; cg.c:742:30

Fixup kills for %bb.37
********** MI Scheduling **********
sparse:%bb.38 if.then162
  From: renamable $w8 = LDRWui $sp, 12, debug-location !1571 :: (dereferenceable load 4 from %ir.jcol); cg.c:743:37
    To: B %bb.43
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 12, debug-location !1571 :: (dereferenceable load 4 from %ir.jcol); cg.c:743:37
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=$w8
    SU(3): Ord  Latency=0 Memory
SU(1):   renamable $x9 = LDRXui renamable $x20, 0, debug-location !1573 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:743:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=$x9
    SU(3): Ord  Latency=0 Memory
SU(2):   renamable $x10 = LDRSWui $sp, 15, debug-location !1574 :: (dereferenceable load 4 from %ir.k); cg.c:743:32
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=$x10
    SU(3): Ord  Latency=0 Memory
SU(3):   STRWroX renamable $w8, renamable $x9, renamable $x10, 0, 1, debug-location !1575 :: (store 4 into %ir.arrayidx164); cg.c:743:35
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=$x10
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=$x9
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.43
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 12, debug-location !1571 :: (dereferenceable load 4 from %ir.jcol); cg.c:743:37
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 4
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) renamable $x9 = LDRXui renamable $x20, 0, debug-location !1573 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:743:25
  Ready @1c
  TopQ.A BotLatency SU(1) 4c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x10 = LDRSWui $sp, 15, debug-location !1574 :: (dereferenceable load 4 from %ir.k); cg.c:743:32
  Ready @2c
  TopQ.A BotLatency SU(2) 4c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 6 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STRWroX renamable $w8, renamable $x9, renamable $x10, 0, 1, debug-location !1575 :: (store 4 into %ir.arrayidx164); cg.c:743:35
  Ready @6c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   renamable $w8 = LDRWui $sp, 12, debug-location !1571 :: (dereferenceable load 4 from %ir.jcol); cg.c:743:37
SU(1):   renamable $x9 = LDRXui renamable $x20, 0, debug-location !1573 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:743:25
SU(2):   renamable $x10 = LDRSWui $sp, 15, debug-location !1574 :: (dereferenceable load 4 from %ir.k); cg.c:743:32
SU(3):   STRWroX renamable $w8, renamable $x9, renamable $x10, 0, 1, debug-location !1575 :: (store 4 into %ir.arrayidx164); cg.c:743:35

Fixup kills for %bb.38
********** MI Scheduling **********
sparse:%bb.39 if.else165
  From: renamable $x8 = LDRXui renamable $x20, 0, debug-location !1578 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:747:30
    To: Bcc 1, %bb.41, implicit $nzcv, debug-location !1583; cg.c:747:30
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRXui renamable $x20, 0, debug-location !1578 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:747:30
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x8
SU(1):   renamable $x9 = LDRSWui $sp, 15, debug-location !1580 :: (dereferenceable load 4 from %ir.k); cg.c:747:37
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x9
SU(2):   renamable $w8 = LDRWroX renamable $x8, renamable $x9, 0, 1, debug-location !1578 :: (load 4 from %ir.arrayidx167); cg.c:747:30
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=$x9
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(4): Data Latency=4 Reg=$w8
    SU(3): Anti Latency=0
SU(3):   renamable $w9 = LDRWui $sp, 12, debug-location !1581 :: (dereferenceable load 4 from %ir.jcol); cg.c:747:43
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(2): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    SU(4): Data Latency=4 Reg=$w9
SU(4):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1583; cg.c:747:30
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=$w9
    SU(2): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 1, %bb.41, implicit $nzcv, debug-location !1583; cg.c:747:30
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 9
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 9
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x8 = LDRXui renamable $x20, 0, debug-location !1578 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:747:30
  Ready @0c
  TopQ.A BotLatency SU(0) 9c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x9 = LDRSWui $sp, 15, debug-location !1580 :: (dereferenceable load 4 from %ir.k); cg.c:747:37
  Ready @1c
  TopQ.A BotLatency SU(1) 9c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w8 = LDRWroX renamable $x8, renamable $x9, 0, 1, debug-location !1578 :: (load 4 from %ir.arrayidx167); cg.c:747:30
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w9 = LDRWui $sp, 12, debug-location !1581 :: (dereferenceable load 4 from %ir.jcol); cg.c:747:43
  Ready @6c
  TopQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 10 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1583; cg.c:747:30
  Ready @10c
  TopQ.A TopLatency SU(4) 8c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.39 ***
SU(0):   renamable $x8 = LDRXui renamable $x20, 0, debug-location !1578 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:747:30
SU(1):   renamable $x9 = LDRSWui $sp, 15, debug-location !1580 :: (dereferenceable load 4 from %ir.k); cg.c:747:37
SU(2):   renamable $w8 = LDRWroX renamable $x8, renamable $x9, 0, 1, debug-location !1578 :: (load 4 from %ir.arrayidx167); cg.c:747:30
SU(3):   renamable $w9 = LDRWui $sp, 12, debug-location !1581 :: (dereferenceable load 4 from %ir.jcol); cg.c:747:43
SU(4):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1583; cg.c:747:30

Fixup kills for %bb.39
********** MI Scheduling **********
sparse:%bb.40 if.then170
  From: renamable $x8 = LDRSWui $sp, 19, debug-location !1586 :: (dereferenceable load 4 from %ir.j); cg.c:751:42
    To: B %bb.43
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRSWui $sp, 19, debug-location !1586 :: (dereferenceable load 4 from %ir.j); cg.c:751:42
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x8
    SU(5): Ord  Latency=0 Memory
SU(1):   renamable $x9 = LDRXui $fp, 5, debug-location !1584 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:751:36
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(5): Data Latency=4 Reg=$x9
    SU(3): Data Latency=4 Reg=$x9
    SU(5): Ord  Latency=0 Memory
SU(2):   renamable $x8 = UBFMXri renamable $x8, 62, 61, debug-location !1584; cg.c:751:36
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(5): Data Latency=1 Reg=$x8
    SU(3): Data Latency=1 Reg=$x8
SU(3):   renamable $w10 = LDRWroX renamable $x9, renamable $x8, 0, 0, debug-location !1584 :: (load 4 from %ir.arrayidx172); cg.c:751:36
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(2): Data Latency=1 Reg=$x8
    SU(1): Data Latency=4 Reg=$x9
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$w10
    SU(5): Ord  Latency=0 Memory
SU(4):   renamable $w10 = nsw ADDWri renamable $w10, 1, 0, debug-location !1587; cg.c:751:45
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w10
  Successors:
    SU(5): Data Latency=1 Reg=$w10
SU(5):   STRWroX renamable $w10, renamable $x9, renamable $x8, 0, 0, debug-location !1590 :: (store 4 into %ir.arrayidx175); cg.c:751:34
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=$w10
    SU(3): Ord  Latency=0 Memory
    SU(2): Data Latency=1 Reg=$x8
    SU(1): Data Latency=4 Reg=$x9
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.43
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 10
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 10
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDRSWui $sp, 19, debug-location !1586 :: (dereferenceable load 4 from %ir.j); cg.c:751:42
  Ready @0c
  TopQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x9 = LDRXui $fp, 5, debug-location !1584 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:751:36
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x8 = UBFMXri renamable $x8, 62, 61, debug-location !1584; cg.c:751:36
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w10 = LDRWroX renamable $x9, renamable $x8, 0, 0, debug-location !1584 :: (load 4 from %ir.arrayidx172); cg.c:751:36
  Ready @5c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 9 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w10 = nsw ADDWri renamable $w10, 1, 0, debug-location !1587; cg.c:751:45
  Ready @9c
  TopQ.A TopLatency SU(4) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 5
  Executed: 10c
  Critical: 5c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) STRWroX renamable $w10, renamable $x9, renamable $x8, 0, 0, debug-location !1590 :: (store 4 into %ir.arrayidx175); cg.c:751:34
  Ready @10c
  TopQ.A TopLatency SU(5) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 6
  Executed: 11c
  Critical: 6c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.40 ***
SU(0):   renamable $x8 = LDRSWui $sp, 19, debug-location !1586 :: (dereferenceable load 4 from %ir.j); cg.c:751:42
SU(1):   renamable $x9 = LDRXui $fp, 5, debug-location !1584 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:751:36
SU(2):   renamable $x8 = UBFMXri renamable $x8, 62, 61, debug-location !1584; cg.c:751:36
SU(3):   renamable $w10 = LDRWroX renamable $x9, renamable $x8, 0, 0, debug-location !1584 :: (load 4 from %ir.arrayidx172); cg.c:751:36
SU(4):   renamable $w10 = nsw ADDWri renamable $w10, 1, 0, debug-location !1587; cg.c:751:45
SU(5):   STRWroX renamable $w10, renamable $x9, renamable $x8, 0, 0, debug-location !1590 :: (store 4 into %ir.arrayidx175); cg.c:751:34

Fixup kills for %bb.40
********** MI Scheduling **********
sparse:%bb.41 for.inc179
  From: renamable $w8 = LDRWui $sp, 15, debug-location !1593 :: (dereferenceable load 4 from %ir.k); cg.c:726:57
    To: B %bb.30
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 15, debug-location !1593 :: (dereferenceable load 4 from %ir.k); cg.c:726:57
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1593; cg.c:726:57
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
ExitSU:   B %bb.30
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 15, debug-location !1593 :: (dereferenceable load 4 from %ir.k); cg.c:726:57
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1593; cg.c:726:57
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.41 ***
SU(0):   renamable $w8 = LDRWui $sp, 15, debug-location !1593 :: (dereferenceable load 4 from %ir.k); cg.c:726:57
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1593; cg.c:726:57

Fixup kills for %bb.41
********** MI Scheduling **********
sparse:%bb.42 for.end153
  From: renamable $w8 = LDRWui $sp, 12, debug-location !1557 :: (dereferenceable load 4 from %ir.jcol); cg.c:737:37
    To: End RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 12, debug-location !1557 :: (dereferenceable load 4 from %ir.jcol); cg.c:737:37
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(4): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w8
    SU(6): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
SU(1):   renamable $x9 = LDRXui renamable $x20, 0, debug-location !1558 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:737:25
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(5): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x9
    SU(6): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
SU(2):   renamable $x10 = LDRSWui $sp, 15, debug-location !1559 :: (dereferenceable load 4 from %ir.k); cg.c:737:32
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Data Latency=4 Reg=$x10
    SU(6): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
SU(3):   STRWroX renamable $w8, renamable $x9, renamable $x10, 0, 1, debug-location !1560 :: (store 4 into %ir.arrayidx155); cg.c:737:35
  # preds left       : 6
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(2): Data Latency=4 Reg=$x10
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=$x9
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=$w8
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(4): Anti Latency=0
    SU(5): Anti Latency=0
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=1 Memory
    SU(4): Ord  Latency=1 Memory
SU(4):   renamable $x8 = LDRXui renamable $x20, 1, debug-location !1561 :: (dereferenceable load 8 from %ir.a.addr); cg.c:738:25
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(3): Anti Latency=0
    SU(3): Ord  Latency=1 Memory
    SU(0): Out  Latency=1
  Successors:
    SU(6): Data Latency=4 Reg=$x8
    SU(6): Ord  Latency=0 Memory
SU(5):   renamable $x9 = LDRSWui $sp, 15, debug-location !1562 :: (dereferenceable load 4 from %ir.k); cg.c:738:27
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(3): Anti Latency=0
    SU(3): Ord  Latency=1 Memory
    SU(1): Out  Latency=1
  Successors:
    SU(6): Data Latency=4 Reg=$x9
    SU(6): Ord  Latency=0 Memory
SU(6):   STRXroX $xzr, renamable $x8, renamable $x9, 0, 1, debug-location !1563 :: (store 8 into %ir.arrayidx157); cg.c:738:30
  # preds left       : 8
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(5): Data Latency=4 Reg=$x9
    SU(5): Ord  Latency=0 Memory
    SU(4): Data Latency=4 Reg=$x8
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
Critical Path: (PGS-RR) 9
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 9
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 12, debug-location !1557 :: (dereferenceable load 4 from %ir.jcol); cg.c:737:37
  Ready @0c
  TopQ.A BotLatency SU(0) 9c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 9
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) renamable $x9 = LDRXui renamable $x20, 0, debug-location !1558 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:737:25
  Ready @1c
  TopQ.A BotLatency SU(1) 9c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x10 = LDRSWui $sp, 15, debug-location !1559 :: (dereferenceable load 4 from %ir.k); cg.c:737:32
  Ready @2c
  TopQ.A BotLatency SU(2) 9c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 6 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STRWroX renamable $w8, renamable $x9, renamable $x10, 0, 1, debug-location !1560 :: (store 4 into %ir.arrayidx155); cg.c:737:35
  Ready @6c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 
  TopQ.A RemainingLatency 0 + 7c > CritPath 9
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) renamable $x8 = LDRXui renamable $x20, 1, debug-location !1561 :: (dereferenceable load 8 from %ir.a.addr); cg.c:738:25
  Ready @7c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $x9 = LDRSWui $sp, 15, debug-location !1562 :: (dereferenceable load 4 from %ir.k); cg.c:738:27
  Ready @8c
  TopQ.A BotLatency SU(5) 4c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 12 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) STRXroX $xzr, renamable $x8, renamable $x9, 0, 1, debug-location !1563 :: (store 8 into %ir.arrayidx157); cg.c:738:30
  Ready @12c
  TopQ.A TopLatency SU(6) 9c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 7
  Executed: 13c
  Critical: 7c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.42 ***
SU(0):   renamable $w8 = LDRWui $sp, 12, debug-location !1557 :: (dereferenceable load 4 from %ir.jcol); cg.c:737:37
SU(1):   renamable $x9 = LDRXui renamable $x20, 0, debug-location !1558 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:737:25
SU(2):   renamable $x10 = LDRSWui $sp, 15, debug-location !1559 :: (dereferenceable load 4 from %ir.k); cg.c:737:32
SU(3):   STRWroX renamable $w8, renamable $x9, renamable $x10, 0, 1, debug-location !1560 :: (store 4 into %ir.arrayidx155); cg.c:737:35
SU(4):   renamable $x8 = LDRXui renamable $x20, 1, debug-location !1561 :: (dereferenceable load 8 from %ir.a.addr); cg.c:738:25
SU(5):   renamable $x9 = LDRSWui $sp, 15, debug-location !1562 :: (dereferenceable load 4 from %ir.k); cg.c:738:27
SU(6):   STRXroX $xzr, renamable $x8, renamable $x9, 0, 1, debug-location !1563 :: (store 8 into %ir.arrayidx157); cg.c:738:30

Fixup kills for %bb.42
Fixup kills for %bb.43
Fixup kills for %bb.44
********** MI Scheduling **********
sparse:%bb.45 if.then184
  From: renamable $w1 = LDRWui $sp, 20, debug-location !1601 :: (dereferenceable load 4 from %ir.i); cg.c:757:64
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !1603; cg.c:757:21
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w1 = LDRWui $sp, 20, debug-location !1601 :: (dereferenceable load 4 from %ir.i); cg.c:757:64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(1):   $x0 = ORRXrs $xzr, $x19, 0, debug-location !1603; cg.c:757:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !1603; cg.c:757:21
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w1 = LDRWui $sp, 20, debug-location !1601 :: (dereferenceable load 4 from %ir.i); cg.c:757:64
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ORRXrs $xzr, $x19, 0, debug-location !1603; cg.c:757:21
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   renamable $w1 = LDRWui $sp, 20, debug-location !1601 :: (dereferenceable load 4 from %ir.i); cg.c:757:64
SU(1):   $x0 = ORRXrs $xzr, $x19, 0, debug-location !1603; cg.c:757:21

Fixup kills for %bb.45
********** MI Scheduling **********
sparse:%bb.46 if.end186
  From: renamable $x8 = LDRSWui $sp, 15, debug-location !1606 :: (dereferenceable load 4 from %ir.k); cg.c:761:26
    To: B %bb.25
 RegionInstrs: 10
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRSWui $sp, 15, debug-location !1606 :: (dereferenceable load 4 from %ir.k); cg.c:761:26
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x8
    SU(6): Ord  Latency=0 Memory
SU(1):   renamable $x9 = LDRXui renamable $x20, 1, debug-location !1605 :: (dereferenceable load 8 from %ir.a.addr); cg.c:761:24
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(6): Data Latency=4 Reg=$x9
    SU(3): Data Latency=4 Reg=$x9
    SU(6): Ord  Latency=0 Memory
SU(2):   renamable $x8 = UBFMXri renamable $x8, 61, 60, debug-location !1605; cg.c:761:24
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(7): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x8
    SU(3): Data Latency=1 Reg=$x8
SU(3):   renamable $d0 = LDRDroX renamable $x9, renamable $x8, 0, 0, debug-location !1605 :: (load 8 from %ir.arrayidx188); cg.c:761:24
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 11
  Predecessors:
    SU(2): Data Latency=1 Reg=$x8
    SU(1): Data Latency=4 Reg=$x9
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$d0
    SU(7): Anti Latency=0
    SU(9): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
SU(4):   renamable $d1 = LDRDui $sp, 2, debug-location !1607 :: (dereferenceable load 8 from %ir.va); cg.c:761:31
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(5): Data Latency=4 Reg=$d1
    SU(6): Ord  Latency=0 Memory
SU(5):   renamable $d0 = FADDDrr renamable $d0, renamable $d1, debug-location !1608; cg.c:761:29
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 7
  Predecessors:
    SU(3): Data Latency=4 Reg=$d0
    SU(3): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d1
  Successors:
    SU(6): Data Latency=1 Reg=$d0
SU(6):   STRDroX renamable $d0, renamable $x9, renamable $x8, 0, 0, debug-location !1611 :: (store 8 into %ir.arrayidx191); cg.c:761:22
  # preds left       : 7
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 6
  Predecessors:
    SU(5): Data Latency=1 Reg=$d0
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Data Latency=1 Reg=$x8
    SU(1): Data Latency=4 Reg=$x9
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(7): Anti Latency=0
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=1 Memory
SU(7):   renamable $w8 = LDRWui $sp, 13, debug-location !1612 :: (dereferenceable load 4 from %ir.nzrow); cg.c:713:51
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 5
  Predecessors:
    SU(6): Anti Latency=0
    SU(6): Ord  Latency=1 Memory
    SU(3): Anti Latency=0
    SU(2): Out  Latency=1
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=4 Reg=$w8
    SU(9): Ord  Latency=0 Memory
SU(8):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1612; cg.c:713:51
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 1
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$w8
  Successors:
    SU(9): Data Latency=1 Reg=$w8
SU(9):   STRWui renamable $w8, $sp, 13, debug-location !1612 :: (store 4 into %ir.nzrow); cg.c:713:51
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=$w8
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
ExitSU:   B %bb.25
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 16
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 16
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDRSWui $sp, 15, debug-location !1606 :: (dereferenceable load 4 from %ir.k); cg.c:761:26
  Ready @0c
  TopQ.A BotLatency SU(0) 16c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 4 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 16
  Cand SU(4) ORDER                              
  Cand SU(1) TOP-PATH                  15 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x9 = LDRXui renamable $x20, 1, debug-location !1605 :: (dereferenceable load 8 from %ir.a.addr); cg.c:761:24
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $d1 = LDRDui $sp, 2, debug-location !1607 :: (dereferenceable load 8 from %ir.va); cg.c:761:31
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x8 = UBFMXri renamable $x8, 61, 60, debug-location !1605; cg.c:761:24
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $d0 = LDRDroX renamable $x9, renamable $x8, 0, 0, debug-location !1605 :: (load 8 from %ir.arrayidx188); cg.c:761:24
  Ready @5c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 9 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $d0 = FADDDrr renamable $d0, renamable $d1, debug-location !1608; cg.c:761:29
  Ready @9c
  TopQ.A TopLatency SU(5) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 6
  Executed: 10c
  Critical: 6c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) STRDroX renamable $d0, renamable $x9, renamable $x8, 0, 0, debug-location !1611 :: (store 8 into %ir.arrayidx191); cg.c:761:22
  Ready @10c
  TopQ.A TopLatency SU(6) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 7
  Executed: 11c
  Critical: 7c, 7 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $w8 = LDRWui $sp, 13, debug-location !1612 :: (dereferenceable load 4 from %ir.nzrow); cg.c:713:51
  Ready @11c
  TopQ.A TopLatency SU(7) 11c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 8
  Executed: 12c
  Critical: 8c, 8 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 15 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1612; cg.c:713:51
  Ready @15c
  TopQ.A TopLatency SU(8) 15c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 9
  Executed: 16c
  Critical: 9c, 9 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) STRWui renamable $w8, $sp, 13, debug-location !1612 :: (store 4 into %ir.nzrow); cg.c:713:51
  Ready @16c
  TopQ.A TopLatency SU(9) 16c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 10
  Executed: 17c
  Critical: 10c, 10 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.46 ***
SU(0):   renamable $x8 = LDRSWui $sp, 15, debug-location !1606 :: (dereferenceable load 4 from %ir.k); cg.c:761:26
SU(1):   renamable $x9 = LDRXui renamable $x20, 1, debug-location !1605 :: (dereferenceable load 8 from %ir.a.addr); cg.c:761:24
SU(4):   renamable $d1 = LDRDui $sp, 2, debug-location !1607 :: (dereferenceable load 8 from %ir.va); cg.c:761:31
SU(2):   renamable $x8 = UBFMXri renamable $x8, 61, 60, debug-location !1605; cg.c:761:24
SU(3):   renamable $d0 = LDRDroX renamable $x9, renamable $x8, 0, 0, debug-location !1605 :: (load 8 from %ir.arrayidx188); cg.c:761:24
SU(5):   renamable $d0 = FADDDrr renamable $d0, renamable $d1, debug-location !1608; cg.c:761:29
SU(6):   STRDroX renamable $d0, renamable $x9, renamable $x8, 0, 0, debug-location !1611 :: (store 8 into %ir.arrayidx191); cg.c:761:22
SU(7):   renamable $w8 = LDRWui $sp, 13, debug-location !1612 :: (dereferenceable load 4 from %ir.nzrow); cg.c:713:51
SU(8):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1612; cg.c:713:51
SU(9):   STRWui renamable $w8, $sp, 13, debug-location !1612 :: (store 4 into %ir.nzrow); cg.c:713:51

Fixup kills for %bb.46
********** MI Scheduling **********
sparse:%bb.47 for.inc195
  From: renamable $w8 = LDRWui $sp, 16, debug-location !1616 :: (dereferenceable load 4 from %ir.nza); cg.c:709:41
    To: B %bb.23
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 16, debug-location !1616 :: (dereferenceable load 4 from %ir.nza); cg.c:709:41
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1616; cg.c:709:41
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STRWui renamable $w8, $sp, 16, debug-location !1616 :: (store 4 into %ir.nza); cg.c:709:41
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.23
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 16, debug-location !1616 :: (dereferenceable load 4 from %ir.nza); cg.c:709:41
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1616; cg.c:709:41
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w8, $sp, 16, debug-location !1616 :: (store 4 into %ir.nza); cg.c:709:41
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.47 ***
SU(0):   renamable $w8 = LDRWui $sp, 16, debug-location !1616 :: (dereferenceable load 4 from %ir.nza); cg.c:709:41
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1616; cg.c:709:41
SU(2):   STRWui renamable $w8, $sp, 16, debug-location !1616 :: (store 4 into %ir.nza); cg.c:709:41

Fixup kills for %bb.47
********** MI Scheduling **********
sparse:%bb.48 for.end197
  From: renamable $d0 = LDRDui $sp, 5, debug-location !1620 :: (dereferenceable load 8 from %ir.size); cg.c:764:16
    To: B %bb.21
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDRDui $sp, 5, debug-location !1620 :: (dereferenceable load 8 from %ir.size); cg.c:764:16
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d0
    SU(5): Ord  Latency=0 Memory
SU(1):   renamable $d1 = LDRDui $sp, 3, debug-location !1621 :: (dereferenceable load 8 from %ir.ratio); cg.c:764:23
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=$d1
SU(2):   renamable $w8 = LDRWui $sp, 20, debug-location !1624 :: (dereferenceable load 4 from %ir.i); cg.c:708:25
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$w8
    SU(6): Ord  Latency=0 Memory
SU(3):   renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !1622; cg.c:764:21
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=$d1
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d0
  Successors:
    SU(5): Data Latency=1 Reg=$d0
SU(4):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1624; cg.c:708:25
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$w8
  Successors:
    SU(6): Data Latency=1 Reg=$w8
SU(5):   STRDui renamable $d0, $sp, 5, debug-location !1623 :: (store 8 into %ir.size); cg.c:764:14
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=$d0
    SU(0): Ord  Latency=0 Memory
SU(6):   STRWui renamable $w8, $sp, 20, debug-location !1624 :: (store 4 into %ir.i); cg.c:708:25
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=$w8
    SU(2): Ord  Latency=0 Memory
ExitSU:   B %bb.21
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $d0 = LDRDui $sp, 5, debug-location !1620 :: (dereferenceable load 8 from %ir.size); cg.c:764:16
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) renamable $d1 = LDRDui $sp, 3, debug-location !1621 :: (dereferenceable load 8 from %ir.ratio); cg.c:764:23
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w8 = LDRWui $sp, 20, debug-location !1624 :: (dereferenceable load 4 from %ir.i); cg.c:708:25
  Ready @2c
  TopQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 4 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !1622; cg.c:764:21
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 
  TopQ.A RemainingLatency 0 + 6c > CritPath 5
  Cand SU(5) ORDER                              
  Cand SU(4) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1624; cg.c:708:25
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 6 
  TopQ.A RemainingLatency 0 + 7c > CritPath 5
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) STRDui renamable $d0, $sp, 5, debug-location !1623 :: (store 8 into %ir.size); cg.c:764:14
  Ready @7c
  TopQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) STRWui renamable $w8, $sp, 20, debug-location !1624 :: (store 4 into %ir.i); cg.c:708:25
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.48 ***
SU(0):   renamable $d0 = LDRDui $sp, 5, debug-location !1620 :: (dereferenceable load 8 from %ir.size); cg.c:764:16
SU(1):   renamable $d1 = LDRDui $sp, 3, debug-location !1621 :: (dereferenceable load 8 from %ir.ratio); cg.c:764:23
SU(2):   renamable $w8 = LDRWui $sp, 20, debug-location !1624 :: (dereferenceable load 4 from %ir.i); cg.c:708:25
SU(3):   renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !1622; cg.c:764:21
SU(4):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1624; cg.c:708:25
SU(5):   STRDui renamable $d0, $sp, 5, debug-location !1623 :: (store 8 into %ir.size); cg.c:764:14
SU(6):   STRWui renamable $w8, $sp, 20, debug-location !1624 :: (store 4 into %ir.i); cg.c:708:25

Fixup kills for %bb.48
Fixup kills for %bb.49
********** MI Scheduling **********
sparse:%bb.50 for.cond202
  From: STRWui renamable $w8, $sp, 19, debug-location !DILocation(line: 0, scope: !1629) :: (store 4 into %ir.j); cg.c:0
    To: Bcc 10, %bb.52, implicit $nzcv, debug-location !1635; cg.c:770:5
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   STRWui renamable $w8, $sp, 19, debug-location !DILocation(line: 0, scope: !1629) :: (store 4 into %ir.j); cg.c:0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Anti Latency=0
SU(1):   $w8 = ORRWrs $wzr, renamable $w8, 0, debug-location !1631; cg.c:770:17
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Predecessors:
    SU(0): Anti Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=$w8
SU(2):   renamable $w9 = LDRWui $sp, 21, debug-location !1633 :: (dereferenceable load 4 from %ir.nrows); cg.c:770:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=$w9
SU(3):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1635; cg.c:770:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=$w9
    SU(1): Data Latency=1 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.52, implicit $nzcv, debug-location !1635; cg.c:770:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $w9 = LDRWui $sp, 21, debug-location !1633 :: (dereferenceable load 4 from %ir.nrows); cg.c:770:21
  Ready @0c
  TopQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STRWui renamable $w8, $sp, 19, debug-location !DILocation(line: 0, scope: !1629) :: (store 4 into %ir.j); cg.c:0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w8 = ORRWrs $wzr, renamable $w8, 0, debug-location !1631; cg.c:770:17
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1635; cg.c:770:5
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.50 ***
SU(2):   renamable $w9 = LDRWui $sp, 21, debug-location !1633 :: (dereferenceable load 4 from %ir.nrows); cg.c:770:21
SU(0):   STRWui renamable $w8, $sp, 19, debug-location !DILocation(line: 0, scope: !1629) :: (store 4 into %ir.j); cg.c:0
SU(1):   $w8 = ORRWrs $wzr, renamable $w8, 0, debug-location !1631; cg.c:770:17
SU(3):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1635; cg.c:770:5

Fixup kills for %bb.50
********** MI Scheduling **********
sparse:%bb.51 for.body205
  From: renamable $x8 = LDRXui $fp, 5, debug-location !1636 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:771:20
    To: B %bb.50
 RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRXui $fp, 5, debug-location !1636 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:771:20
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x8
    SU(5): Ord  Latency=0 Memory
SU(1):   renamable $x9 = LDRSWui $sp, 19, debug-location !1638 :: (dereferenceable load 4 from %ir.j); cg.c:771:26
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(3): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x9
    SU(5): Ord  Latency=0 Memory
SU(2):   renamable $x8 = ADDXrs renamable $x8, renamable $x9, 2, debug-location !1636; cg.c:771:20
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(1): Data Latency=4 Reg=$x9
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(6): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x8
    SU(3): Data Latency=1 Reg=$x8
    SU(3): Anti Latency=0
SU(3):   renamable $w10, renamable $w9 = LDPWi renamable $x8, -1, debug-location !1636 :: (load 4 from %ir.arrayidx207), (load 4 from %ir.arrayidx210); cg.c:771:20
  # preds left       : 3
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(2): Data Latency=1 Reg=$x8
    SU(2): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    SU(4): Data Latency=4 Reg=$w10
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$w9
    SU(6): Anti Latency=0
    SU(5): Ord  Latency=0 Memory
SU(4):   $w9 = ADDWrs renamable $w9, renamable $w10, 0, debug-location !1642; cg.c:771:29
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 6
  Predecessors:
    SU(3): Data Latency=4 Reg=$w10
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w9
  Successors:
    SU(5): Data Latency=1 Reg=$w9
SU(5):   STRWui renamable $w9, renamable $x8, 0, debug-location !1645 :: (store 4 into %ir.arrayidx213); cg.c:771:18
  # preds left       : 5
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 5
  Predecessors:
    SU(4): Data Latency=1 Reg=$w9
    SU(3): Ord  Latency=0 Memory
    SU(2): Data Latency=1 Reg=$x8
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(6): Anti Latency=0
    SU(6): Ord  Latency=1 Memory
SU(6):   renamable $w8 = LDRWui $sp, 19, debug-location !1646 :: (dereferenceable load 4 from %ir.j); cg.c:770:29
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 4
  Predecessors:
    SU(5): Anti Latency=0
    SU(5): Ord  Latency=1 Memory
    SU(3): Anti Latency=0
    SU(2): Out  Latency=1
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$w8
SU(7):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1646; cg.c:770:29
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$w8
ExitSU:   B %bb.50
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 15
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 15
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x8 = LDRXui $fp, 5, debug-location !1636 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:771:20
  Ready @0c
  TopQ.A BotLatency SU(0) 15c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x9 = LDRSWui $sp, 19, debug-location !1638 :: (dereferenceable load 4 from %ir.j); cg.c:771:26
  Ready @1c
  TopQ.A BotLatency SU(1) 15c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x8 = ADDXrs renamable $x8, renamable $x9, 2, debug-location !1636; cg.c:771:20
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w10, renamable $w9 = LDPWi renamable $x8, -1, debug-location !1636 :: (load 4 from %ir.arrayidx207), (load 4 from %ir.arrayidx210); cg.c:771:20
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 10 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $w9 = ADDWrs renamable $w9, renamable $w10, 0, debug-location !1642; cg.c:771:29
  Ready @10c
  TopQ.A TopLatency SU(4) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) STRWui renamable $w9, renamable $x8, 0, debug-location !1645 :: (store 4 into %ir.arrayidx213); cg.c:771:18
  Ready @11c
  TopQ.A TopLatency SU(5) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $w8 = LDRWui $sp, 19, debug-location !1646 :: (dereferenceable load 4 from %ir.j); cg.c:770:29
  Ready @12c
  TopQ.A TopLatency SU(6) 11c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 7
  Executed: 13c
  Critical: 7c, 7 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 16 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1646; cg.c:770:29
  Ready @16c
  TopQ.A TopLatency SU(7) 15c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 8
  Executed: 17c
  Critical: 8c, 8 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.51 ***
SU(0):   renamable $x8 = LDRXui $fp, 5, debug-location !1636 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:771:20
SU(1):   renamable $x9 = LDRSWui $sp, 19, debug-location !1638 :: (dereferenceable load 4 from %ir.j); cg.c:771:26
SU(2):   renamable $x8 = ADDXrs renamable $x8, renamable $x9, 2, debug-location !1636; cg.c:771:20
SU(3):   renamable $w10, renamable $w9 = LDPWi renamable $x8, -1, debug-location !1636 :: (load 4 from %ir.arrayidx207), (load 4 from %ir.arrayidx210); cg.c:771:20
SU(4):   $w9 = ADDWrs renamable $w9, renamable $w10, 0, debug-location !1642; cg.c:771:29
SU(5):   STRWui renamable $w9, renamable $x8, 0, debug-location !1645 :: (store 4 into %ir.arrayidx213); cg.c:771:18
SU(6):   renamable $w8 = LDRWui $sp, 19, debug-location !1646 :: (dereferenceable load 4 from %ir.j); cg.c:770:29
SU(7):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1646; cg.c:770:29

Fixup kills for %bb.51
Fixup kills for %bb.52
********** MI Scheduling **********
sparse:%bb.53 for.cond217
  From: renamable $w8 = LDRWui $sp, 19, debug-location !1653 :: (dereferenceable load 4 from %ir.j); cg.c:774:17
    To: Bcc 10, %bb.61, implicit $nzcv, debug-location !1657; cg.c:774:5
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 19, debug-location !1653 :: (dereferenceable load 4 from %ir.j); cg.c:774:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w8
SU(1):   renamable $w9 = LDRWui $sp, 21, debug-location !1655 :: (dereferenceable load 4 from %ir.nrows); cg.c:774:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w9
SU(2):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1657; cg.c:774:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=$w9
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.61, implicit $nzcv, debug-location !1657; cg.c:774:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 19, debug-location !1653 :: (dereferenceable load 4 from %ir.j); cg.c:774:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w9 = LDRWui $sp, 21, debug-location !1655 :: (dereferenceable load 4 from %ir.nrows); cg.c:774:21
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1657; cg.c:774:5
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.53 ***
SU(0):   renamable $w8 = LDRWui $sp, 19, debug-location !1653 :: (dereferenceable load 4 from %ir.j); cg.c:774:17
SU(1):   renamable $w9 = LDRWui $sp, 21, debug-location !1655 :: (dereferenceable load 4 from %ir.nrows); cg.c:774:21
SU(2):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1657; cg.c:774:5

Fixup kills for %bb.53
********** MI Scheduling **********
sparse:%bb.54 for.body220
  From: renamable $w8 = LDRWui $sp, 19, debug-location !1658 :: (dereferenceable load 4 from %ir.j); cg.c:775:13
    To: Bcc 11, %bb.56, implicit $nzcv, debug-location !1662; cg.c:775:13
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 19, debug-location !1658 :: (dereferenceable load 4 from %ir.j); cg.c:775:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 1, 0, implicit-def $nzcv, debug-location !1662; cg.c:775:13
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 11, %bb.56, implicit $nzcv, debug-location !1662; cg.c:775:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 19, debug-location !1658 :: (dereferenceable load 4 from %ir.j); cg.c:775:13
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 1, 0, implicit-def $nzcv, debug-location !1662; cg.c:775:13
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.54 ***
SU(0):   renamable $w8 = LDRWui $sp, 19, debug-location !1658 :: (dereferenceable load 4 from %ir.j); cg.c:775:13
SU(1):   dead $wzr = SUBSWri renamable $w8, 1, 0, implicit-def $nzcv, debug-location !1662; cg.c:775:13

Fixup kills for %bb.54
********** MI Scheduling **********
sparse:%bb.55 if.then223
  From: renamable $x8 = LDRSWui $sp, 19, debug-location !1665 :: (dereferenceable load 4 from %ir.j); cg.c:776:25
    To: B %bb.57
 RegionInstrs: 9
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRSWui $sp, 19, debug-location !1665 :: (dereferenceable load 4 from %ir.j); cg.c:776:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x8
SU(1):   renamable $x9 = LDURXi $fp, -72, debug-location !1663 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:776:18
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$x9
SU(2):   renamable $x10 = LDRXui $fp, 5, debug-location !1666 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:776:30
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(5): Data Latency=4 Reg=$x10
SU(3):   renamable $x8 = UBFMXri renamable $x8, 62, 61, debug-location !1663; cg.c:776:18
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x8
    SU(4): Data Latency=1 Reg=$x8
SU(4):   renamable $w9 = LDRWroX renamable $x9, renamable $x8, 0, 0, debug-location !1663 :: (load 4 from %ir.arrayidx225); cg.c:776:18
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(3): Data Latency=1 Reg=$x8
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x9
  Successors:
    SU(7): Data Latency=4 Reg=$w9
    SU(5): Anti Latency=0
    SU(8): Ord  Latency=0 Memory
SU(5):   $x8 = ADDXrs renamable $x8, renamable $x10, 0, debug-location !1666; cg.c:776:30
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(4): Anti Latency=0
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x8
    SU(2): Data Latency=4 Reg=$x10
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x8
SU(6):   renamable $w8 = LDURWi renamable $x8, -4, debug-location !1666 :: (load 4 from %ir.arrayidx228); cg.c:776:30
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 5
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x8
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$w8
    SU(8): Ord  Latency=0 Memory
SU(7):   $w8 = SUBWrs renamable $w9, renamable $w8, 0, debug-location !1669; cg.c:776:28
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$w8
    SU(4): Data Latency=4 Reg=$w9
  Successors:
    SU(8): Data Latency=1 Reg=$w8
SU(8):   STRWui renamable $w8, $sp, 18, debug-location !1670 :: (store 4 into %ir.j1); cg.c:776:16
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=$w8
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
ExitSU:   B %bb.57
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 11
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 11
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDRSWui $sp, 19, debug-location !1665 :: (dereferenceable load 4 from %ir.j); cg.c:776:25
  Ready @0c
  TopQ.A BotLatency SU(0) 11c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 11
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) renamable $x9 = LDURXi $fp, -72, debug-location !1663 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:776:18
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x10 = LDRXui $fp, 5, debug-location !1666 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:776:30
  Ready @2c
  TopQ.A BotLatency SU(2) 10c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $x8 = UBFMXri renamable $x8, 62, 61, debug-location !1663; cg.c:776:18
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w9 = LDRWroX renamable $x9, renamable $x8, 0, 0, debug-location !1663 :: (load 4 from %ir.arrayidx225); cg.c:776:18
  Ready @5c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $x8 = ADDXrs renamable $x8, renamable $x10, 0, debug-location !1666; cg.c:776:30
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $w8 = LDURWi renamable $x8, -4, debug-location !1666 :: (load 4 from %ir.arrayidx228); cg.c:776:30
  Ready @7c
  TopQ.A TopLatency SU(6) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 11 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) $w8 = SUBWrs renamable $w9, renamable $w8, 0, debug-location !1669; cg.c:776:28
  Ready @11c
  TopQ.A TopLatency SU(7) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 8
  Executed: 12c
  Critical: 8c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) STRWui renamable $w8, $sp, 18, debug-location !1670 :: (store 4 into %ir.j1); cg.c:776:16
  Ready @12c
  TopQ.A TopLatency SU(8) 11c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 9
  Executed: 13c
  Critical: 9c, 9 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.55 ***
SU(0):   renamable $x8 = LDRSWui $sp, 19, debug-location !1665 :: (dereferenceable load 4 from %ir.j); cg.c:776:25
SU(1):   renamable $x9 = LDURXi $fp, -72, debug-location !1663 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:776:18
SU(2):   renamable $x10 = LDRXui $fp, 5, debug-location !1666 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:776:30
SU(3):   renamable $x8 = UBFMXri renamable $x8, 62, 61, debug-location !1663; cg.c:776:18
SU(4):   renamable $w9 = LDRWroX renamable $x9, renamable $x8, 0, 0, debug-location !1663 :: (load 4 from %ir.arrayidx225); cg.c:776:18
SU(5):   $x8 = ADDXrs renamable $x8, renamable $x10, 0, debug-location !1666; cg.c:776:30
SU(6):   renamable $w8 = LDURWi renamable $x8, -4, debug-location !1666 :: (load 4 from %ir.arrayidx228); cg.c:776:30
SU(7):   $w8 = SUBWrs renamable $w9, renamable $w8, 0, debug-location !1669; cg.c:776:28
SU(8):   STRWui renamable $w8, $sp, 18, debug-location !1670 :: (store 4 into %ir.j1); cg.c:776:16

Fixup kills for %bb.55
Fixup kills for %bb.56
********** MI Scheduling **********
sparse:%bb.57 if.end231
  From: renamable $x8 = LDRSWui $sp, 19, debug-location !1675 :: (dereferenceable load 4 from %ir.j); cg.c:781:21
    To: End RegionInstrs: 11
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRSWui $sp, 19, debug-location !1675 :: (dereferenceable load 4 from %ir.j); cg.c:781:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x8
SU(1):   renamable $x9 = LDURXi $fp, -72, debug-location !1674 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:781:14
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$x9
SU(2):   renamable $x10 = LDRXui $fp, 5, debug-location !1677 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:781:30
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(6): Out  Latency=1
    SU(5): Data Latency=4 Reg=$x10
SU(3):   renamable $x8 = UBFMXri renamable $x8, 62, 61, debug-location !1681; cg.c:782:15
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x8
    SU(4): Data Latency=1 Reg=$x8
SU(4):   $x9 = ADDXrs renamable $x8, renamable $x9, 0, debug-location !1674; cg.c:781:14
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 11
  Predecessors:
    SU(3): Data Latency=1 Reg=$x8
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x9
  Successors:
    SU(10): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x9
    SU(6): Data Latency=1 Reg=$x9
    SU(5): Anti Latency=0
SU(5):   renamable $w8 = LDRWroX renamable $x10, renamable $x8, 0, 0, debug-location !1677 :: (load 4 from %ir.arrayidx236); cg.c:781:30
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(4): Anti Latency=0
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x8
    SU(2): Data Latency=4 Reg=$x10
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$w8
    SU(6): Anti Latency=0
    SU(8): Ord  Latency=0 Memory
SU(6):   renamable $w10 = LDRWui renamable $x9, 1, debug-location !1674 :: (load 4 from %ir.arrayidx234); cg.c:781:14
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 10
  Predecessors:
    SU(5): Anti Latency=0
    SU(4): Data Latency=1 Reg=$x9
    SU(2): Out  Latency=1
  Successors:
    SU(7): Data Latency=4 Reg=$w10
    SU(10): Anti Latency=0
    SU(8): Ord  Latency=0 Memory
SU(7):   $w8 = SUBWrs renamable $w10, renamable $w8, 0, debug-location !1679; cg.c:781:28
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 6
  Predecessors:
    SU(6): Data Latency=4 Reg=$w10
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$w8
  Successors:
    SU(9): Out  Latency=1
    SU(8): Data Latency=1 Reg=$w8
SU(8):   STRWui renamable $w8, $sp, 17, debug-location !1680 :: (store 4 into %ir.j2); cg.c:781:12
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 5
  Predecessors:
    SU(7): Data Latency=1 Reg=$w8
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Successors:
    SU(9): Anti Latency=0
    SU(9): Ord  Latency=1 Memory
SU(9):   renamable $w8 = LDRWui renamable $x9, 0, debug-location !1681 :: (load 4 from %ir.arrayidx239); cg.c:782:15
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 4
  Predecessors:
    SU(8): Anti Latency=0
    SU(8): Ord  Latency=1 Memory
    SU(7): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x9
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(10): Anti Latency=0
SU(10):   renamable $w9 = LDRWui $sp, 18, debug-location !1684 :: (dereferenceable load 4 from %ir.j1); cg.c:783:18
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 4
  Predecessors:
    SU(9): Anti Latency=0
    SU(6): Anti Latency=0
    SU(4): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 16
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 16
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDRSWui $sp, 19, debug-location !1675 :: (dereferenceable load 4 from %ir.j); cg.c:781:21
  Ready @0c
  TopQ.A BotLatency SU(0) 16c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 16
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  15 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x9 = LDURXi $fp, -72, debug-location !1674 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:781:14
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x10 = LDRXui $fp, 5, debug-location !1677 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:781:30
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $x8 = UBFMXri renamable $x8, 62, 61, debug-location !1681; cg.c:782:15
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $x9 = ADDXrs renamable $x8, renamable $x9, 0, debug-location !1674; cg.c:781:14
  Ready @5c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $w8 = LDRWroX renamable $x10, renamable $x8, 0, 0, debug-location !1677 :: (load 4 from %ir.arrayidx236); cg.c:781:30
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $w10 = LDRWui renamable $x9, 1, debug-location !1674 :: (load 4 from %ir.arrayidx234); cg.c:781:14
  Ready @7c
  TopQ.A TopLatency SU(6) 6c
  TopQ.A BotLatency SU(6) 10c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 11 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) $w8 = SUBWrs renamable $w10, renamable $w8, 0, debug-location !1679; cg.c:781:28
  Ready @11c
  TopQ.A TopLatency SU(7) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 8
  Executed: 12c
  Critical: 8c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) STRWui renamable $w8, $sp, 17, debug-location !1680 :: (store 4 into %ir.j2); cg.c:781:12
  Ready @12c
  TopQ.A TopLatency SU(8) 11c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 9
  Executed: 13c
  Critical: 9c, 9 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) renamable $w8 = LDRWui renamable $x9, 0, debug-location !1681 :: (load 4 from %ir.arrayidx239); cg.c:782:15
  Ready @13c
  TopQ.A TopLatency SU(9) 12c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 10
  Executed: 14c
  Critical: 10c, 10 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) renamable $w9 = LDRWui $sp, 18, debug-location !1684 :: (dereferenceable load 4 from %ir.j1); cg.c:783:18
  Ready @14c
  TopQ.A BotLatency SU(10) 4c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 11
  Executed: 15c
  Critical: 11c, 11 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.57 ***
SU(0):   renamable $x8 = LDRSWui $sp, 19, debug-location !1675 :: (dereferenceable load 4 from %ir.j); cg.c:781:21
SU(1):   renamable $x9 = LDURXi $fp, -72, debug-location !1674 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:781:14
SU(2):   renamable $x10 = LDRXui $fp, 5, debug-location !1677 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:781:30
SU(3):   renamable $x8 = UBFMXri renamable $x8, 62, 61, debug-location !1681; cg.c:782:15
SU(4):   $x9 = ADDXrs renamable $x8, renamable $x9, 0, debug-location !1674; cg.c:781:14
SU(5):   renamable $w8 = LDRWroX renamable $x10, renamable $x8, 0, 0, debug-location !1677 :: (load 4 from %ir.arrayidx236); cg.c:781:30
SU(6):   renamable $w10 = LDRWui renamable $x9, 1, debug-location !1674 :: (load 4 from %ir.arrayidx234); cg.c:781:14
SU(7):   $w8 = SUBWrs renamable $w10, renamable $w8, 0, debug-location !1679; cg.c:781:28
SU(8):   STRWui renamable $w8, $sp, 17, debug-location !1680 :: (store 4 into %ir.j2); cg.c:781:12
SU(9):   renamable $w8 = LDRWui renamable $x9, 0, debug-location !1681 :: (load 4 from %ir.arrayidx239); cg.c:782:15
SU(10):   renamable $w9 = LDRWui $sp, 18, debug-location !1684 :: (dereferenceable load 4 from %ir.j1); cg.c:783:18

Fixup kills for %bb.57
********** MI Scheduling **********
sparse:%bb.58 for.cond240
  From: STPWi renamable $w9, renamable $w8, $sp, 15, debug-location !DILocation(line: 0, scope: !1660) :: (store 4 into %ir.nza), (store 4 into %ir.k); cg.c:0
    To: Bcc 10, %bb.60, implicit $nzcv, debug-location !1692; cg.c:783:9
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   STPWi renamable $w9, renamable $w8, $sp, 15, debug-location !DILocation(line: 0, scope: !1660) :: (store 4 into %ir.nza), (store 4 into %ir.k); cg.c:0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Anti Latency=0
    SU(1): Anti Latency=0
SU(1):   $w8 = ORRWrs $wzr, renamable $w9, 0, debug-location !1688; cg.c:783:22
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Predecessors:
    SU(0): Anti Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=$w8
    SU(2): Anti Latency=0
SU(2):   renamable $w9 = LDRWui $sp, 17, debug-location !1690 :: (dereferenceable load 4 from %ir.j2); cg.c:783:26
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Anti Latency=0
  Successors:
    SU(3): Data Latency=4 Reg=$w9
SU(3):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1692; cg.c:783:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=$w9
    SU(1): Data Latency=1 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.60, implicit $nzcv, debug-location !1692; cg.c:783:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STPWi renamable $w9, renamable $w8, $sp, 15, debug-location !DILocation(line: 0, scope: !1660) :: (store 4 into %ir.nza), (store 4 into %ir.k); cg.c:0
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w8 = ORRWrs $wzr, renamable $w9, 0, debug-location !1688; cg.c:783:22
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w9 = LDRWui $sp, 17, debug-location !1690 :: (dereferenceable load 4 from %ir.j2); cg.c:783:26
  Ready @2c
  TopQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 6 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1692; cg.c:783:9
  Ready @6c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.58 ***
SU(0):   STPWi renamable $w9, renamable $w8, $sp, 15, debug-location !DILocation(line: 0, scope: !1660) :: (store 4 into %ir.nza), (store 4 into %ir.k); cg.c:0
SU(1):   $w8 = ORRWrs $wzr, renamable $w9, 0, debug-location !1688; cg.c:783:22
SU(2):   renamable $w9 = LDRWui $sp, 17, debug-location !1690 :: (dereferenceable load 4 from %ir.j2); cg.c:783:26
SU(3):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1692; cg.c:783:9

Fixup kills for %bb.58
********** MI Scheduling **********
sparse:%bb.59 for.body243
  From: renamable $x8 = LDRXui renamable $x20, 1, debug-location !1693 :: (dereferenceable load 8 from %ir.a.addr); cg.c:784:20
    To: B %bb.58
 RegionInstrs: 11
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRXui renamable $x20, 1, debug-location !1693 :: (dereferenceable load 8 from %ir.a.addr); cg.c:784:20
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 22
  Successors:
    SU(4): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x8
    SU(2): Data Latency=4 Reg=$x8
    SU(7): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
SU(1):   renamable $x10, renamable $x9 = LDPSWi $sp, 15, debug-location !1695 :: (dereferenceable load 4 from %ir.nza), (dereferenceable load 4 from %ir.k); cg.c:784:22
  # preds left       : 0
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 22
  Successors:
    SU(5): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x10
    SU(5): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x9
    SU(7): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
SU(2):   renamable $d0 = LDRDroX renamable $x8, renamable $x9, 0, 1, debug-location !1693 :: (load 8 from %ir.arrayidx245); cg.c:784:20
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 18
  Predecessors:
    SU(1): Data Latency=4 Reg=$x9
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(3): Data Latency=4 Reg=$d0
    SU(4): Anti Latency=0
    SU(5): Anti Latency=0
    SU(7): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
SU(3):   STRDroX renamable $d0, renamable $x8, renamable $x10, 0, 1, debug-location !1698 :: (store 8 into %ir.arrayidx247); cg.c:784:18
  # preds left       : 6
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 14
  Predecessors:
    SU(2): Data Latency=4 Reg=$d0
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=$x10
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=$x8
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(4): Anti Latency=0
    SU(5): Anti Latency=0
    SU(7): Ord  Latency=0 Memory
    SU(8): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
    SU(6): Ord  Latency=1 Memory
    SU(4): Ord  Latency=1 Memory
SU(4):   renamable $x8 = LDRXui renamable $x20, 0, debug-location !1699 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:785:25
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 13
  Predecessors:
    SU(3): Anti Latency=0
    SU(3): Ord  Latency=1 Memory
    SU(2): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    SU(8): Out  Latency=1
    SU(7): Data Latency=4 Reg=$x8
    SU(6): Data Latency=4 Reg=$x8
    SU(7): Ord  Latency=0 Memory
SU(5):   renamable $x10, renamable $x9 = LDPSWi $sp, 15, debug-location !1700 :: (dereferenceable load 4 from %ir.nza), (dereferenceable load 4 from %ir.k); cg.c:785:32
  # preds left       : 5
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 13
  Predecessors:
    SU(3): Anti Latency=0
    SU(3): Ord  Latency=1 Memory
    SU(2): Anti Latency=0
    SU(1): Out  Latency=1
    SU(1): Out  Latency=1
  Successors:
    SU(7): Data Latency=4 Reg=$x10
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$x9
    SU(7): Ord  Latency=0 Memory
SU(6):   renamable $w9 = LDRWroX renamable $x8, renamable $x9, 0, 1, debug-location !1699 :: (load 4 from %ir.arrayidx249); cg.c:785:25
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 9
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$x9
    SU(4): Data Latency=4 Reg=$x8
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(8): Out  Latency=1
    SU(7): Data Latency=4 Reg=$w9
    SU(8): Anti Latency=0
    SU(7): Ord  Latency=0 Memory
SU(7):   STRWroX renamable $w9, renamable $x8, renamable $x10, 0, 1, debug-location !1703 :: (store 4 into %ir.arrayidx251); cg.c:785:23
  # preds left       : 10
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 5
  Predecessors:
    SU(6): Data Latency=4 Reg=$w9
    SU(6): Ord  Latency=0 Memory
    SU(5): Data Latency=4 Reg=$x10
    SU(5): Ord  Latency=0 Memory
    SU(4): Data Latency=4 Reg=$x8
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(8): Anti Latency=0
    SU(8): Anti Latency=0
    SU(8): Ord  Latency=1 Memory
SU(8):   renamable $w9, renamable $w8 = LDPWi $sp, 15, debug-location !1704 :: (dereferenceable load 4 from %ir.nza), (dereferenceable load 4 from %ir.k); cg.c:786:19
  # preds left       : 7
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 18
  Height             : 4
  Predecessors:
    SU(7): Anti Latency=0
    SU(7): Anti Latency=0
    SU(7): Ord  Latency=1 Memory
    SU(6): Out  Latency=1
    SU(6): Anti Latency=0
    SU(4): Out  Latency=1
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=4 Reg=$w9
    SU(9): Out  Latency=1
    SU(9): Data Latency=4 Reg=$w8
SU(9):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1705; cg.c:786:23
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 0
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=4 Reg=$w8
SU(10):   renamable $w9 = nsw ADDWri renamable $w9, 1, 0, debug-location !1707; cg.c:783:31
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 0
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=4 Reg=$w9
ExitSU:   B %bb.58
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 22
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 22
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x8 = LDRXui renamable $x20, 1, debug-location !1693 :: (dereferenceable load 8 from %ir.a.addr); cg.c:784:20
  Ready @0c
  TopQ.A BotLatency SU(0) 22c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x10, renamable $x9 = LDPSWi $sp, 15, debug-location !1695 :: (dereferenceable load 4 from %ir.nza), (dereferenceable load 4 from %ir.k); cg.c:784:22
  Ready @1c
  TopQ.A BotLatency SU(1) 22c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $d0 = LDRDroX renamable $x8, renamable $x9, 0, 1, debug-location !1693 :: (load 8 from %ir.arrayidx245); cg.c:784:20
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 9 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STRDroX renamable $d0, renamable $x8, renamable $x10, 0, 1, debug-location !1698 :: (store 8 into %ir.arrayidx247); cg.c:784:18
  Ready @9c
  TopQ.A TopLatency SU(3) 8c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 4
  Executed: 10c
  Critical: 4c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 
  TopQ.A RemainingLatency 0 + 10c > CritPath 22
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) renamable $x8 = LDRXui renamable $x20, 0, debug-location !1699 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:785:25
  Ready @10c
  TopQ.A TopLatency SU(4) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $x10, renamable $x9 = LDPSWi $sp, 15, debug-location !1700 :: (dereferenceable load 4 from %ir.nza), (dereferenceable load 4 from %ir.k); cg.c:785:32
  Ready @11c
  TopQ.A BotLatency SU(5) 13c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 15 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $w9 = LDRWroX renamable $x8, renamable $x9, 0, 1, debug-location !1699 :: (load 4 from %ir.arrayidx249); cg.c:785:25
  Ready @15c
  TopQ.A TopLatency SU(6) 13c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 7
  Executed: 16c
  Critical: 7c, 7 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 19 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) STRWroX renamable $w9, renamable $x8, renamable $x10, 0, 1, debug-location !1703 :: (store 4 into %ir.arrayidx251); cg.c:785:23
  Ready @19c
  TopQ.A TopLatency SU(7) 17c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 8
  Executed: 20c
  Critical: 8c, 8 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) renamable $w9, renamable $w8 = LDPWi $sp, 15, debug-location !1704 :: (dereferenceable load 4 from %ir.nza), (dereferenceable load 4 from %ir.k); cg.c:786:19
  Ready @20c
  TopQ.A TopLatency SU(8) 18c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 9
  Executed: 21c
  Critical: 9c, 9 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 24 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 10 9 
  TopQ.A RemainingLatency 0 + 24c > CritPath 22
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
Pick Top ORDER     
Scheduling SU(9) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1705; cg.c:786:23
  Ready @24c
  TopQ.A TopLatency SU(9) 22c
  *** Max MOps 1 at cycle 24
Cycle: 25 TopQ.A
TopQ.A @25c
  Retired: 10
  Executed: 25c
  Critical: 10c, 10 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) renamable $w9 = nsw ADDWri renamable $w9, 1, 0, debug-location !1707; cg.c:783:31
  Ready @25c
  *** Max MOps 1 at cycle 25
Cycle: 26 TopQ.A
TopQ.A @26c
  Retired: 11
  Executed: 26c
  Critical: 11c, 11 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.59 ***
SU(0):   renamable $x8 = LDRXui renamable $x20, 1, debug-location !1693 :: (dereferenceable load 8 from %ir.a.addr); cg.c:784:20
SU(1):   renamable $x10, renamable $x9 = LDPSWi $sp, 15, debug-location !1695 :: (dereferenceable load 4 from %ir.nza), (dereferenceable load 4 from %ir.k); cg.c:784:22
SU(2):   renamable $d0 = LDRDroX renamable $x8, renamable $x9, 0, 1, debug-location !1693 :: (load 8 from %ir.arrayidx245); cg.c:784:20
SU(3):   STRDroX renamable $d0, renamable $x8, renamable $x10, 0, 1, debug-location !1698 :: (store 8 into %ir.arrayidx247); cg.c:784:18
SU(4):   renamable $x8 = LDRXui renamable $x20, 0, debug-location !1699 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:785:25
SU(5):   renamable $x10, renamable $x9 = LDPSWi $sp, 15, debug-location !1700 :: (dereferenceable load 4 from %ir.nza), (dereferenceable load 4 from %ir.k); cg.c:785:32
SU(6):   renamable $w9 = LDRWroX renamable $x8, renamable $x9, 0, 1, debug-location !1699 :: (load 4 from %ir.arrayidx249); cg.c:785:25
SU(7):   STRWroX renamable $w9, renamable $x8, renamable $x10, 0, 1, debug-location !1703 :: (store 4 into %ir.arrayidx251); cg.c:785:23
SU(8):   renamable $w9, renamable $w8 = LDPWi $sp, 15, debug-location !1704 :: (dereferenceable load 4 from %ir.nza), (dereferenceable load 4 from %ir.k); cg.c:786:19
SU(9):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1705; cg.c:786:23
SU(10):   renamable $w9 = nsw ADDWri renamable $w9, 1, 0, debug-location !1707; cg.c:783:31

Fixup kills for %bb.59
********** MI Scheduling **********
sparse:%bb.60 for.inc256
  From: renamable $w8 = LDRWui $sp, 19, debug-location !1711 :: (dereferenceable load 4 from %ir.j); cg.c:774:29
    To: B %bb.53
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 19, debug-location !1711 :: (dereferenceable load 4 from %ir.j); cg.c:774:29
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1711; cg.c:774:29
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STRWui renamable $w8, $sp, 19, debug-location !1711 :: (store 4 into %ir.j); cg.c:774:29
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.53
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 19, debug-location !1711 :: (dereferenceable load 4 from %ir.j); cg.c:774:29
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1711; cg.c:774:29
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w8, $sp, 19, debug-location !1711 :: (store 4 into %ir.j); cg.c:774:29
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.60 ***
SU(0):   renamable $w8 = LDRWui $sp, 19, debug-location !1711 :: (dereferenceable load 4 from %ir.j); cg.c:774:29
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1711; cg.c:774:29
SU(2):   STRWui renamable $w8, $sp, 19, debug-location !1711 :: (store 4 into %ir.j); cg.c:774:29

Fixup kills for %bb.60
Fixup kills for %bb.61
********** MI Scheduling **********
sparse:%bb.62 for.cond259
  From: STRWui renamable $w8, $sp, 19, debug-location !DILocation(line: 0, scope: !1716) :: (store 4 into %ir.j); cg.c:0
    To: Bcc 10, %bb.64, implicit $nzcv, debug-location !1723; cg.c:789:5
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   STRWui renamable $w8, $sp, 19, debug-location !DILocation(line: 0, scope: !1716) :: (store 4 into %ir.j); cg.c:0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Anti Latency=0
SU(1):   renamable $w9 = LDRWui $sp, 21, debug-location !1720 :: (dereferenceable load 4 from %ir.nrows); cg.c:789:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$w9
SU(2):   $w10 = ORRWrs $wzr, renamable $w8, 0, debug-location !1718; cg.c:789:17
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(5): Data Latency=1 Reg=$w10
    SU(3): Anti Latency=0
SU(3):   renamable $x8 = LDURXi $fp, -72, debug-location !1357 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Predecessors:
    SU(2): Anti Latency=0
    SU(0): Anti Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(4):   renamable $w9 = nsw ADDWri renamable $w9, 1, 0, debug-location !1721; cg.c:789:27
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w9
  Successors:
    SU(5): Data Latency=1 Reg=$w9
SU(5):   $wzr = SUBSWrs renamable $w10, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1723; cg.c:789:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=$w9
    SU(2): Data Latency=1 Reg=$w10
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.64, implicit $nzcv, debug-location !1723; cg.c:789:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w9 = LDRWui $sp, 21, debug-location !1720 :: (dereferenceable load 4 from %ir.nrows); cg.c:789:21
  Ready @0c
  TopQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STRWui renamable $w8, $sp, 19, debug-location !DILocation(line: 0, scope: !1716) :: (store 4 into %ir.j); cg.c:0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $w10 = ORRWrs $wzr, renamable $w8, 0, debug-location !1718; cg.c:789:17
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $x8 = LDURXi $fp, -72, debug-location !1357 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:0
  Ready @3c
  TopQ.A BotLatency SU(3) 4c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w9 = nsw ADDWri renamable $w9, 1, 0, debug-location !1721; cg.c:789:27
  Ready @4c
  TopQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $wzr = SUBSWrs renamable $w10, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1723; cg.c:789:5
  Ready @5c
  TopQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.62 ***
SU(1):   renamable $w9 = LDRWui $sp, 21, debug-location !1720 :: (dereferenceable load 4 from %ir.nrows); cg.c:789:21
SU(0):   STRWui renamable $w8, $sp, 19, debug-location !DILocation(line: 0, scope: !1716) :: (store 4 into %ir.j); cg.c:0
SU(2):   $w10 = ORRWrs $wzr, renamable $w8, 0, debug-location !1718; cg.c:789:17
SU(3):   renamable $x8 = LDURXi $fp, -72, debug-location !1357 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:0
SU(4):   renamable $w9 = nsw ADDWri renamable $w9, 1, 0, debug-location !1721; cg.c:789:27
SU(5):   $wzr = SUBSWrs renamable $w10, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1723; cg.c:789:5

Fixup kills for %bb.62
********** MI Scheduling **********
sparse:%bb.63 for.body263
  From: renamable $x9 = LDRSWui $sp, 19, debug-location !1724 :: (dereferenceable load 4 from %ir.j); cg.c:790:28
    To: B %bb.62
 RegionInstrs: 11
ScheduleDAGMI::schedule starting
SU(0):   renamable $x9 = LDRSWui $sp, 19, debug-location !1724 :: (dereferenceable load 4 from %ir.j); cg.c:790:28
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x9
    SU(8): Ord  Latency=0 Memory
SU(1):   renamable $x10 = LDRXui $fp, 5, debug-location !1727 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:790:33
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$x10
    SU(8): Ord  Latency=0 Memory
SU(2):   renamable $x9 = UBFMXri renamable $x9, 62, 61, debug-location !1726; cg.c:790:21
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x9
  Successors:
    SU(8): Data Latency=1 Reg=$x9
    SU(4): Data Latency=1 Reg=$x9
    SU(3): Data Latency=1 Reg=$x9
SU(3):   renamable $w8 = LDRWroX renamable $x8, renamable $x9, 0, 0, debug-location !1726 :: (load 4 from %ir.arrayidx265); cg.c:790:21
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(2): Data Latency=1 Reg=$x9
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$w8
    SU(8): Ord  Latency=0 Memory
SU(4):   $x10 = ADDXrs renamable $x9, renamable $x10, 0, debug-location !1727; cg.c:790:33
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 11
  Predecessors:
    SU(2): Data Latency=1 Reg=$x9
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x10
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x10
SU(5):   renamable $w10 = LDURWi renamable $x10, -4, debug-location !1727 :: (load 4 from %ir.arrayidx268); cg.c:790:33
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 10
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x10
  Successors:
    SU(7): Data Latency=4 Reg=$w10
    SU(8): Ord  Latency=0 Memory
SU(6):   renamable $x11 = LDURXi $fp, -72, debug-location !1731 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:790:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(8): Data Latency=4 Reg=$x11
    SU(8): Ord  Latency=0 Memory
SU(7):   $w8 = SUBWrs renamable $w8, renamable $w10, 0, debug-location !1730; cg.c:790:31
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 6
  Predecessors:
    SU(5): Data Latency=4 Reg=$w10
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w8
  Successors:
    SU(9): Out  Latency=1
    SU(8): Data Latency=1 Reg=$w8
SU(8):   STRWroX renamable $w8, renamable $x11, renamable $x9, 0, 0, debug-location !1733 :: (store 4 into %ir.arrayidx271); cg.c:790:19
  # preds left       : 8
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 5
  Predecessors:
    SU(7): Data Latency=1 Reg=$w8
    SU(6): Data Latency=4 Reg=$x11
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Data Latency=1 Reg=$x9
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(9): Anti Latency=0
    SU(9): Ord  Latency=1 Memory
SU(9):   renamable $w8 = LDRWui $sp, 19, debug-location !1734 :: (dereferenceable load 4 from %ir.j); cg.c:789:33
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 4
  Predecessors:
    SU(8): Anti Latency=0
    SU(8): Ord  Latency=1 Memory
    SU(7): Out  Latency=1
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=4 Reg=$w8
SU(10):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1734; cg.c:789:33
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=4 Reg=$w8
ExitSU:   B %bb.62
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 16
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 
  TopQ.A RemainingLatency 0 + 0c > CritPath 16
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x9 = LDRSWui $sp, 19, debug-location !1724 :: (dereferenceable load 4 from %ir.j); cg.c:790:28
  Ready @0c
  TopQ.A BotLatency SU(0) 16c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 6 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 16
  Cand SU(6) ORDER                              
  Cand SU(1) TOP-PATH                  15 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x10 = LDRXui $fp, 5, debug-location !1727 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:790:33
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $x11 = LDURXi $fp, -72, debug-location !1731 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:790:9
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x9 = UBFMXri renamable $x9, 62, 61, debug-location !1726; cg.c:790:21
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 3 
  TopQ.A RemainingLatency 0 + 5c > CritPath 16
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) $x10 = ADDXrs renamable $x9, renamable $x10, 0, debug-location !1727; cg.c:790:33
  Ready @5c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 5 
  TopQ.A RemainingLatency 0 + 6c > CritPath 16
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) renamable $w8 = LDRWroX renamable $x8, renamable $x9, 0, 0, debug-location !1726 :: (load 4 from %ir.arrayidx265); cg.c:790:21
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $w10 = LDURWi renamable $x10, -4, debug-location !1727 :: (load 4 from %ir.arrayidx268); cg.c:790:33
  Ready @7c
  TopQ.A TopLatency SU(5) 6c
  TopQ.A BotLatency SU(5) 10c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 11 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) $w8 = SUBWrs renamable $w8, renamable $w10, 0, debug-location !1730; cg.c:790:31
  Ready @11c
  TopQ.A TopLatency SU(7) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 8
  Executed: 12c
  Critical: 8c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) STRWroX renamable $w8, renamable $x11, renamable $x9, 0, 0, debug-location !1733 :: (store 4 into %ir.arrayidx271); cg.c:790:19
  Ready @12c
  TopQ.A TopLatency SU(8) 11c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 9
  Executed: 13c
  Critical: 9c, 9 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) renamable $w8 = LDRWui $sp, 19, debug-location !1734 :: (dereferenceable load 4 from %ir.j); cg.c:789:33
  Ready @13c
  TopQ.A TopLatency SU(9) 12c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 10
  Executed: 14c
  Critical: 10c, 10 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 17 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1734; cg.c:789:33
  Ready @17c
  TopQ.A TopLatency SU(10) 16c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 11
  Executed: 18c
  Critical: 11c, 11 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.63 ***
SU(0):   renamable $x9 = LDRSWui $sp, 19, debug-location !1724 :: (dereferenceable load 4 from %ir.j); cg.c:790:28
SU(1):   renamable $x10 = LDRXui $fp, 5, debug-location !1727 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:790:33
SU(6):   renamable $x11 = LDURXi $fp, -72, debug-location !1731 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:790:9
SU(2):   renamable $x9 = UBFMXri renamable $x9, 62, 61, debug-location !1726; cg.c:790:21
SU(4):   $x10 = ADDXrs renamable $x9, renamable $x10, 0, debug-location !1727; cg.c:790:33
SU(3):   renamable $w8 = LDRWroX renamable $x8, renamable $x9, 0, 0, debug-location !1726 :: (load 4 from %ir.arrayidx265); cg.c:790:21
SU(5):   renamable $w10 = LDURWi renamable $x10, -4, debug-location !1727 :: (load 4 from %ir.arrayidx268); cg.c:790:33
SU(7):   $w8 = SUBWrs renamable $w8, renamable $w10, 0, debug-location !1730; cg.c:790:31
SU(8):   STRWroX renamable $w8, renamable $x11, renamable $x9, 0, 0, debug-location !1733 :: (store 4 into %ir.arrayidx271); cg.c:790:19
SU(9):   renamable $w8 = LDRWui $sp, 19, debug-location !1734 :: (dereferenceable load 4 from %ir.j); cg.c:789:33
SU(10):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1734; cg.c:789:33

Fixup kills for %bb.63
********** MI Scheduling **********
sparse:%bb.64 for.end274
  From: renamable $x9 = LDRSWui $sp, 21, debug-location !1738 :: (dereferenceable load 4 from %ir.nrows); cg.c:792:18
    To: $sp = frame-destroy ADDXri $sp, 224, 0, debug-location !1742; cg.c:793:1
 RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   renamable $x9 = LDRSWui $sp, 21, debug-location !1738 :: (dereferenceable load 4 from %ir.nrows); cg.c:792:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=$x9
SU(1):   renamable $w8 = LDRWroX renamable $x8, renamable $x9, 0, 1, debug-location !1739 :: (load 4 from %ir.arrayidx276); cg.c:792:11
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=$x9
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$w8
    SU(3): Ord  Latency=0 Memory
SU(2):   renamable $w8 = SUBWri renamable $w8, 1, 0, debug-location !1740; cg.c:792:25
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
  Successors:
    SU(3): Data Latency=1 Reg=$w8
SU(3):   STRWui renamable $w8, $sp, 16, debug-location !1741 :: (store 4 into %ir.nza); cg.c:792:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=$w8
    SU(1): Ord  Latency=0 Memory
SU(4):   $fp, $lr = frame-destroy LDPXi $sp, 26, debug-location !1742 :: (load 8 from %stack.30), (load 8 from %stack.29); cg.c:793:1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(5):   $x20, $x19 = frame-destroy LDPXi $sp, 24, debug-location !1742 :: (load 8 from %stack.32), (load 8 from %stack.31); cg.c:793:1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(6):   $x22, $x21 = frame-destroy LDPXi $sp, 22, debug-location !1742 :: (load 8 from %stack.34), (load 8 from %stack.33); cg.c:793:1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(7):   $x23 = frame-destroy LDRXui $sp, 20, debug-location !1742 :: (load 8 from %stack.35); cg.c:793:1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
ExitSU:   $sp = frame-destroy ADDXri $sp, 224, 0, debug-location !1742; cg.c:793:1
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=3 Artificial
    SU(6): Ord  Latency=3 Artificial
    SU(5): Ord  Latency=3 Artificial
    SU(4): Ord  Latency=3 Artificial
Critical Path: (PGS-RR) 9
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 4 5 6 7 
  TopQ.A RemainingLatency 0 + 0c > CritPath 9
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x9 = LDRSWui $sp, 21, debug-location !1738 :: (dereferenceable load 4 from %ir.nrows); cg.c:792:18
  Ready @0c
  TopQ.A BotLatency SU(0) 9c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 7 4 5 6 
  TopQ.A RemainingLatency 0 + 1c > CritPath 9
  Cand SU(7) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) $fp, $lr = frame-destroy LDPXi $sp, 26, debug-location !1742 :: (load 8 from %stack.30), (load 8 from %stack.29); cg.c:793:1
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 7 6 5 
  TopQ.A RemainingLatency 0 + 2c > CritPath 9
  Cand SU(7) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) $x20, $x19 = frame-destroy LDPXi $sp, 24, debug-location !1742 :: (load 8 from %stack.32), (load 8 from %stack.31); cg.c:793:1
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 7 6 
  TopQ.A RemainingLatency 0 + 3c > CritPath 9
  Cand SU(7) ORDER                              
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) $x22, $x21 = frame-destroy LDPXi $sp, 22, debug-location !1742 :: (load 8 from %stack.34), (load 8 from %stack.33); cg.c:793:1
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 1 
  TopQ.A RemainingLatency 0 + 4c > CritPath 9
  Cand SU(7) ORDER                              
  Cand SU(1) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w8 = LDRWroX renamable $x8, renamable $x9, 0, 1, debug-location !1739 :: (load 4 from %ir.arrayidx276); cg.c:792:11
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) $x23 = frame-destroy LDRXui $sp, 20, debug-location !1742 :: (load 8 from %stack.35); cg.c:793:1
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 8 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w8 = SUBWri renamable $w8, 1, 0, debug-location !1740; cg.c:792:25
  Ready @8c
  TopQ.A TopLatency SU(2) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STRWui renamable $w8, $sp, 16, debug-location !1741 :: (store 4 into %ir.nza); cg.c:792:9
  Ready @9c
  TopQ.A TopLatency SU(3) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 8
  Executed: 10c
  Critical: 8c, 8 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.64 ***
SU(0):   renamable $x9 = LDRSWui $sp, 21, debug-location !1738 :: (dereferenceable load 4 from %ir.nrows); cg.c:792:18
SU(4):   $fp, $lr = frame-destroy LDPXi $sp, 26, debug-location !1742 :: (load 8 from %stack.30), (load 8 from %stack.29); cg.c:793:1
SU(5):   $x20, $x19 = frame-destroy LDPXi $sp, 24, debug-location !1742 :: (load 8 from %stack.32), (load 8 from %stack.31); cg.c:793:1
SU(6):   $x22, $x21 = frame-destroy LDPXi $sp, 22, debug-location !1742 :: (load 8 from %stack.34), (load 8 from %stack.33); cg.c:793:1
SU(1):   renamable $w8 = LDRWroX renamable $x8, renamable $x9, 0, 1, debug-location !1739 :: (load 4 from %ir.arrayidx276); cg.c:792:11
SU(7):   $x23 = frame-destroy LDRXui $sp, 20, debug-location !1742 :: (load 8 from %stack.35); cg.c:793:1
SU(2):   renamable $w8 = SUBWri renamable $w8, 1, 0, debug-location !1740; cg.c:792:25
SU(3):   STRWui renamable $w8, $sp, 16, debug-location !1741 :: (store 4 into %ir.nza); cg.c:792:9

Fixup kills for %bb.64
Before MISched:
# Machine code for function icnvrt: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
Function Live Ins: $d0 in %0, $w0 in %1

bb.0.entry:
  liveins: $d0, $w0
  %1:gpr32 = COPY $w0
  %0:fpr64 = COPY $d0
  STRDui %0:fpr64, %stack.0.x.addr, 0 :: (store 8 into %ir.x.addr)
  STRWui %1:gpr32, %stack.1.ipwr2.addr, 0 :: (store 4 into %ir.ipwr2.addr)
  %2:fpr64 = SCVTFUWDri %1:gpr32, debug-location !1750; cg.c:843:55
  %3:fpr64 = FMULDrr %2:fpr64, %0:fpr64, debug-location !1752; cg.c:843:61
  %4:gpr32 = FCVTZSUWDr %3:fpr64, debug-location !1753; cg.c:843:49
  $w0 = COPY %4:gpr32, debug-location !1754; cg.c:843:42
  RET_ReallyLR implicit $w0, debug-location !1754; cg.c:843:42

# End machine code for function icnvrt.

********** MI Scheduling **********
icnvrt:%bb.0 entry
  From: %1:gpr32 = COPY $w0
    To: RET_ReallyLR implicit $w0, debug-location !1754; cg.c:843:42
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %1:gpr32 = COPY $w0
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 3
  Successors:
    SU(4): Data Latency=0 Reg=%1
    SU(3): Data Latency=0 Reg=%1
    SU(7): Anti Latency=0
  Single Issue       : false;
SU(1):   %0:fpr64 = COPY $d0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Data Latency=0 Reg=%0
    SU(2): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(2):   STRDui %0:fpr64, %stack.0.x.addr, 0 :: (store 8 into %ir.x.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(3):   STRWui %1:gpr32, %stack.1.ipwr2.addr, 0 :: (store 4 into %ir.ipwr2.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%1
  Single Issue       : false;
SU(4):   %2:fpr64 = SCVTFUWDri %1:gpr32, debug-location !1750; cg.c:843:55
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Predecessors:
    SU(0): Data Latency=0 Reg=%1
  Successors:
    SU(5): Data Latency=1 Reg=%2
  Single Issue       : false;
SU(5):   %3:fpr64 = FMULDrr %2:fpr64, %0:fpr64, debug-location !1752; cg.c:843:61
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(4): Data Latency=1 Reg=%2
    SU(1): Data Latency=0 Reg=%0
  Successors:
    SU(6): Data Latency=1 Reg=%3
  Single Issue       : false;
SU(6):   %4:gpr32 = FCVTZSUWDr %3:fpr64, debug-location !1753; cg.c:843:49
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(5): Data Latency=1 Reg=%3
  Successors:
    SU(7): Data Latency=1 Reg=%4
  Single Issue       : false;
SU(7):   $w0 = COPY %4:gpr32, debug-location !1754; cg.c:843:42
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%4
    SU(0): Anti Latency=0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   RET_ReallyLR implicit $w0, debug-location !1754; cg.c:843:42
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(7) PHYS-REG                           
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(7) $w0 = COPY %4:gpr32, debug-location !1754; cg.c:843:42
  Ready @0c
  BotQ.A TopLatency SU(7) 3c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %1:gpr32 = COPY $w0
  Ready @0c
  TopQ.A BotLatency SU(0) 3c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 1 4 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(1) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(1) %0:fpr64 = COPY $d0
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 3 4 2 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) STRWui %1:gpr32, %stack.1.ipwr2.addr, 0 :: (store 4 into %ir.ipwr2.addr)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 6 
Queue TopQ.P: 
Queue TopQ.A: 2 4 
BotQ.A RemLatency SU(6) 2c
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %4:gpr32 = FCVTZSUWDr %3:fpr64, debug-location !1753; cg.c:843:49
  Ready @1c
  BotQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 5 
Queue TopQ.P: 
Queue TopQ.A: 2 4 
BotQ.A RemLatency SU(5) 1c
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %3:fpr64 = FMULDrr %2:fpr64, %0:fpr64, debug-location !1752; cg.c:843:61
  Ready @2c
  BotQ.A BotLatency SU(5) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 
Queue TopQ.P: 
Queue TopQ.A: 2 4 
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %2:fpr64 = SCVTFUWDri %1:gpr32, debug-location !1750; cg.c:843:55
  Ready @3c
  BotQ.A BotLatency SU(4) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRDui %0:fpr64, %stack.0.x.addr, 0 :: (store 8 into %ir.x.addr)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %1:gpr32 = COPY $w0
SU(1):   %0:fpr64 = COPY $d0
SU(2):   STRDui %0:fpr64, %stack.0.x.addr, 0 :: (store 8 into %ir.x.addr)
SU(4):   %2:fpr64 = SCVTFUWDri %1:gpr32, debug-location !1750; cg.c:843:55
SU(5):   %3:fpr64 = FMULDrr %2:fpr64, %0:fpr64, debug-location !1752; cg.c:843:61
SU(6):   %4:gpr32 = FCVTZSUWDr %3:fpr64, debug-location !1753; cg.c:843:49
SU(3):   STRWui %1:gpr32, %stack.1.ipwr2.addr, 0 :: (store 4 into %ir.ipwr2.addr)
SU(7):   $w0 = COPY %4:gpr32, debug-location !1754; cg.c:843:42

********** INTERVALS **********
B0 [0B,32r:0)  0@0B-phi
W0 [0B,16r:0)[128r,144r:1)  0@0B-phi 1@128r
%0 [32r,96r:0)  0@32r weight:0.000000e+00
%1 [16r,120r:0)  0@16r weight:0.000000e+00
%2 [80r,96r:0)  0@80r weight:0.000000e+00
%3 [96r,112r:0)  0@96r weight:0.000000e+00
%4 [112r,128r:0)  0@112r weight:0.000000e+00
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function icnvrt: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
Function Live Ins: $d0 in %0, $w0 in %1

0B	bb.0.entry:
	  liveins: $d0, $w0
16B	  %1:gpr32 = COPY $w0
32B	  %0:fpr64 = COPY $d0
48B	  STRDui %0:fpr64, %stack.0.x.addr, 0 :: (store 8 into %ir.x.addr)
80B	  %2:fpr64 = SCVTFUWDri %1:gpr32, debug-location !1750; cg.c:843:55
96B	  %3:fpr64 = FMULDrr %2:fpr64, %0:fpr64, debug-location !1752; cg.c:843:61
112B	  %4:gpr32 = FCVTZSUWDr %3:fpr64, debug-location !1753; cg.c:843:49
120B	  STRWui %1:gpr32, %stack.1.ipwr2.addr, 0 :: (store 4 into %ir.ipwr2.addr)
128B	  $w0 = COPY %4:gpr32, debug-location !1754; cg.c:843:42
144B	  RET_ReallyLR implicit $w0, debug-location !1754; cg.c:843:42

# End machine code for function icnvrt.

Before post-MI-sched:
# Machine code for function icnvrt: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $d0, $w0

bb.0.entry:
  liveins: $d0, $w0
  $sp = frame-setup SUBXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa_offset <mcsymbol >16
  STRDui renamable $d0, $sp, 1 :: (store 8 into %ir.x.addr)
  renamable $d1 = SCVTFUWDri renamable $w0, debug-location !1750; cg.c:843:55
  renamable $d0 = FMULDrr killed renamable $d1, killed renamable $d0, debug-location !1752; cg.c:843:61
  renamable $w8 = FCVTZSUWDr killed renamable $d0, debug-location !1753; cg.c:843:49
  STRWui killed renamable $w0, $sp, 1 :: (store 4 into %ir.ipwr2.addr)
  $w0 = ORRWrs $wzr, killed $w8, 0, debug-location !1754; cg.c:843:42
  $sp = frame-destroy ADDXri $sp, 16, 0, debug-location !1754; cg.c:843:42
  RET undef $lr, implicit $w0, debug-location !1754; cg.c:843:42

# End machine code for function icnvrt.

********** MI Scheduling **********
icnvrt:%bb.0 entry
  From: STRDui renamable $d0, $sp, 1 :: (store 8 into %ir.x.addr)
    To: $sp = frame-destroy ADDXri $sp, 16, 0, debug-location !1754; cg.c:843:42
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   STRDui renamable $d0, $sp, 1 :: (store 8 into %ir.x.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Anti Latency=0
SU(1):   renamable $d1 = SCVTFUWDri renamable $w0, debug-location !1750; cg.c:843:55
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(2): Data Latency=1 Reg=$d1
    SU(5): Anti Latency=0
SU(2):   renamable $d0 = FMULDrr renamable $d1, renamable $d0, debug-location !1752; cg.c:843:61
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(1): Data Latency=1 Reg=$d1
    SU(0): Anti Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=$d0
SU(3):   renamable $w8 = FCVTZSUWDr renamable $d0, debug-location !1753; cg.c:843:49
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=$d0
  Successors:
    SU(5): Data Latency=1 Reg=$w8
SU(4):   STRWui renamable $w0, $sp, 1 :: (store 4 into %ir.ipwr2.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Successors:
    SU(5): Anti Latency=0
SU(5):   $w0 = ORRWrs $wzr, $w8, 0, debug-location !1754; cg.c:843:42
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(4): Anti Latency=0
    SU(3): Data Latency=1 Reg=$w8
    SU(1): Anti Latency=0
ExitSU:   $sp = frame-destroy ADDXri $sp, 16, 0, debug-location !1754; cg.c:843:42
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Disabled scoreboard hazard recognizer
Critical Path: (PGS-RR) 3
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d1 = SCVTFUWDri renamable $w0, debug-location !1750; cg.c:843:55
  Ready @0c
  TopQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 4 
  TopQ.A RemainingLatency 0 + 1c > CritPath 3
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) STRDui renamable $d0, $sp, 1 :: (store 8 into %ir.x.addr)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 3
  Cand SU(4) ORDER                              
  Cand SU(2) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d0 = FMULDrr renamable $d1, renamable $d0, debug-location !1752; cg.c:843:61
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  TopQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 3
  Cand SU(4) ORDER                              
  Cand SU(3) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $w8 = FCVTZSUWDr renamable $d0, debug-location !1753; cg.c:843:49
  Ready @3c
  TopQ.A TopLatency SU(3) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) STRWui renamable $w0, $sp, 1 :: (store 4 into %ir.ipwr2.addr)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $w0 = ORRWrs $wzr, $w8, 0, debug-location !1754; cg.c:843:42
  Ready @5c
  TopQ.A TopLatency SU(5) 3c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(1):   renamable $d1 = SCVTFUWDri renamable $w0, debug-location !1750; cg.c:843:55
SU(0):   STRDui renamable $d0, $sp, 1 :: (store 8 into %ir.x.addr)
SU(2):   renamable $d0 = FMULDrr renamable $d1, renamable $d0, debug-location !1752; cg.c:843:61
SU(3):   renamable $w8 = FCVTZSUWDr renamable $d0, debug-location !1753; cg.c:843:49
SU(4):   STRWui renamable $w0, $sp, 1 :: (store 4 into %ir.ipwr2.addr)
SU(5):   $w0 = ORRWrs $wzr, $w8, 0, debug-location !1754; cg.c:843:42

Fixup kills for %bb.0
