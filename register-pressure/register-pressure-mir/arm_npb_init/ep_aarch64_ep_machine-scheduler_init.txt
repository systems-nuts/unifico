Before MISched:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=8, align=8, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=8, align=8, at location [SP]
  fi#4: size=8, align=8, at location [SP]
  fi#5: size=8, align=8, at location [SP]
  fi#6: size=8, align=8, at location [SP]
  fi#7: size=8, align=8, at location [SP]
  fi#8: size=8, align=8, at location [SP]
  fi#9: size=8, align=8, at location [SP]
  fi#10: size=8, align=8, at location [SP]
  fi#11: size=8, align=8, at location [SP]
  fi#12: size=8, align=8, at location [SP]
  fi#13: size=8, align=8, at location [SP]
  fi#14: size=8, align=8, at location [SP]
  fi#15: size=8, align=8, at location [SP]
  fi#16: size=8, align=8, at location [SP]
  fi#17: size=8, align=8, at location [SP]
  fi#18: size=4, align=4, at location [SP]
  fi#19: size=4, align=4, at location [SP]
  fi#20: size=4, align=4, at location [SP]
  fi#21: size=4, align=4, at location [SP]
  fi#22: size=4, align=4, at location [SP]
  fi#23: size=4, align=4, at location [SP]
  fi#24: size=4, align=4, at location [SP]
  fi#25: size=4, align=4, at location [SP]
  fi#26: size=4, align=4, at location [SP]
  fi#27: size=4, align=4, at location [SP]
  fi#28: size=4, align=4, at location [SP]
  fi#29: size=24, align=16, at location [SP]
  fi#30: size=16, align=16, at location [SP]
  fi#31: size=8, align=8, at location [SP]
Constant Pool:
  cp#0: 0x41D2309CE5400000, align=8
  cp#1: 1.000000e-08, align=8

bb.0.entry:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)

  STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
  %10:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.dum, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.dum, debug-location !93; ep.c:82:12
  %11:fpr128 = LDRQui %10:gpr64common, 0, debug-location !93 :: (dereferenceable load 16 from `i8* bitcast ([3 x double]* @__const.main.dum to i8*)`); ep.c:82:12
  STRQui %11:fpr128, %stack.29.dum, 0, debug-location !93 :: (store 16 into %ir.0); ep.c:82:12
  %12:gpr64 = LDRXui %10:gpr64common, 2, debug-location !93 :: (dereferenceable load 8 from `i8* bitcast ([3 x double]* @__const.main.dum to i8*)` + 16, align 16); ep.c:82:12
  STRXui %12:gpr64, %stack.29.dum, 2, debug-location !93 :: (store 8 into %ir.0 + 16, align 16); ep.c:82:12
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !106; ep.c:87:15
  %13:gpr64 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str, debug-location !106; ep.c:87:15
  %14:gpr64 = MOVaddr target-flags(aarch64-page) @.str.1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1, debug-location !106; ep.c:87:15
  $x0 = COPY %13:gpr64, debug-location !106; ep.c:87:15
  $x1 = COPY %14:gpr64, debug-location !106; ep.c:87:15
  BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $x0, debug-location !106; ep.c:87:15
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !106; ep.c:87:15
  %15:gpr64 = COPY killed $x0, debug-location !106; ep.c:87:15
  STRXui %15:gpr64, %stack.31.fp, 0, debug-location !108 :: (store 8 into %ir.fp); ep.c:87:13
  CBNZX %15:gpr64, %bb.2, debug-location !110; ep.c:87:9
  B %bb.1, debug-location !110; ep.c:87:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  STRWui $wzr, %stack.28.timers_enabled, 0, debug-location !111 :: (store 4 into %ir.timers_enabled); ep.c:88:24
  B %bb.3, debug-location !113; ep.c:89:5

bb.2.if.else:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %16:gpr32 = MOVi32imm 1
  STRWui %16:gpr32, %stack.28.timers_enabled, 0, debug-location !114 :: (store 4 into %ir.timers_enabled); ep.c:91:24
  %17:gpr64 = LDRXui %stack.31.fp, 0, debug-location !116 :: (dereferenceable load 8 from %ir.fp); ep.c:92:16
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !117; ep.c:92:9
  $x0 = COPY %17:gpr64, debug-location !117; ep.c:92:9
  BL @fclose, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp, implicit-def dead $w0, debug-location !117; ep.c:92:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !117; ep.c:92:9

bb.3.if.end:
; predecessors: %bb.2, %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !119; ep.c:102:30
  %20:fpr64 = FMOVDi 0
  %21:fpr64 = FMOVDi 63
  $d0 = COPY %20:fpr64, debug-location !119; ep.c:102:30
  $d1 = COPY %21:fpr64, debug-location !119; ep.c:102:30
  BL @pow, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def $d0, debug-location !119; ep.c:102:30
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !119; ep.c:102:30
  %22:fpr64 = COPY killed $d0, debug-location !119; ep.c:102:30
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !120; ep.c:102:5
  %23:gpr64 = MOVaddr target-flags(aarch64-page) @.str.2, target-flags(aarch64-pageoff, aarch64-nc) @.str.2, debug-location !120; ep.c:102:5
  %24:gpr64common = ADDXri %stack.30.size, 0, 0
  $x0 = ADDXri %stack.30.size, 0, 0, debug-location !120; ep.c:102:5
  $x1 = COPY %23:gpr64, debug-location !120; ep.c:102:5
  $d0 = COPY %22:fpr64, debug-location !120; ep.c:102:5
  BL @sprintf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $d0, implicit-def $sp, implicit-def dead $w0, debug-location !120; ep.c:102:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !120; ep.c:102:5
  %26:gpr32 = MOVi32imm 14
  STRWui %26:gpr32, %stack.26.j, 0, debug-location !121 :: (store 4 into %ir.j); ep.c:103:7
  %27:gpr32common = LDRSBWui %stack.30.size, 14, debug-location !124 :: (load 1 from %ir.arrayidx, align 2); ep.c:104:9
  dead $wzr = SUBSWri %27:gpr32common, 46, 0, implicit-def $nzcv, debug-location !126; ep.c:104:9
  Bcc 1, %bb.5, implicit killed $nzcv, debug-location !126; ep.c:104:9
  B %bb.4, debug-location !126; ep.c:104:9

bb.4.if.then6:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %29:gpr32common = LDRWui %stack.26.j, 0, debug-location !127 :: (dereferenceable load 4 from %ir.j); ep.c:105:10
  %30:gpr32common = nsw SUBWri %29:gpr32common, 1, 0, debug-location !127; ep.c:105:10
  STRWui %30:gpr32common, %stack.26.j, 0, debug-location !127 :: (store 4 into %ir.j); ep.c:105:10

bb.5.if.end7:
; predecessors: %bb.3, %bb.4
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %31:gpr64 = LDRSWui %stack.26.j, 0, debug-location !129 :: (dereferenceable load 4 from %ir.j); ep.c:106:10
  %33:gpr64common = ADDXrr %31:gpr64, %24:gpr64common, debug-location !130; ep.c:106:12
  STRBBui $wzr, %33:gpr64common, 1, debug-location !132 :: (store 1 into %ir.arrayidx9); ep.c:106:17
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !133; ep.c:107:5
  %35:gpr64 = MOVaddr target-flags(aarch64-page) @.str.3, target-flags(aarch64-pageoff, aarch64-nc) @.str.3, debug-location !133; ep.c:107:5
  $x0 = COPY %35:gpr64, debug-location !133; ep.c:107:5
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp, implicit-def dead $w0, debug-location !133; ep.c:107:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !133; ep.c:107:5
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !135; ep.c:108:5
  %37:gpr64 = MOVaddr target-flags(aarch64-page) @.str.4, target-flags(aarch64-pageoff, aarch64-nc) @.str.4, debug-location !135; ep.c:108:5
  $x0 = COPY %37:gpr64, debug-location !135; ep.c:108:5
  $x1 = ADDXri %stack.30.size, 0, 0, debug-location !135; ep.c:108:5
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def dead $w0, debug-location !135; ep.c:108:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !135; ep.c:108:5
  STRWui $wzr, %stack.27.verified, 0, debug-location !136 :: (store 4 into %ir.verified); ep.c:110:14
  %39:gpr32 = MOVi32imm 16384
  STRWui %39:gpr32, %stack.18.np, 0, debug-location !137 :: (store 4 into %ir.np); ep.c:118:8
  %40:gpr64common = ADDXri %stack.29.dum, 0, 0
  %41:gpr64sp = ORRXri %40:gpr64common, 8000, debug-location !139; ep.c:127:24
  %42:fpr64 = LDRDui %stack.29.dum, 1, debug-location !139 :: (dereferenceable load 8 from %ir.arrayidx14); ep.c:127:24
  %43:gpr64sp = nuw ADDXri %40:gpr64common, 16, 0, debug-location !140; ep.c:127:33
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !141; ep.c:127:5
  $w0 = COPY $wzr, debug-location !141; ep.c:127:5
  $x1 = ADDXri %stack.29.dum, 0, 0, debug-location !141; ep.c:127:5
  $d0 = COPY %42:fpr64, debug-location !141; ep.c:127:5
  $x2 = COPY %43:gpr64sp, debug-location !141; ep.c:127:5
  BL @vranlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit killed $x1, implicit killed $d0, implicit killed $x2, implicit-def $sp, debug-location !141; ep.c:127:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !141; ep.c:127:5
  %44:fpr64 = LDRDui %stack.29.dum, 2, debug-location !143 :: (dereferenceable load 8 from %ir.arrayidx17, align 16); ep.c:128:30
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !144; ep.c:128:14
  $x0 = COPY %41:gpr64sp, debug-location !144; ep.c:128:14
  $d0 = COPY %44:fpr64, debug-location !144; ep.c:128:14
  BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $d0, implicit-def $sp, implicit-def $d0, debug-location !144; ep.c:128:14
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !144; ep.c:128:14
  %45:fpr64 = COPY killed $d0, debug-location !144; ep.c:128:14
  STRDui %45:fpr64, %stack.29.dum, 0, debug-location !146 :: (store 8 into %ir.arrayidx195, align 16); ep.c:128:12
  STRWui $wzr, %stack.19.i, 0, debug-location !147 :: (store 4 into %ir.i); ep.c:129:12
  %276:gpr64common = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x
  %277:gpr64 = MOVi64imm -3135276447761457362

bb.6.for.cond:
; predecessors: %bb.5, %bb.7
  successors: %bb.7(0x7c000000), %bb.8(0x04000000); %bb.7(96.88%), %bb.8(3.12%)

  %46:gpr32common = LDRWui %stack.19.i, 0, debug-location !150 :: (dereferenceable load 4 from %ir.i); ep.c:129:17
  dead $wzr = SUBSWri %46:gpr32common, 32, 12, implicit-def $nzcv, debug-location !153; ep.c:129:5
  Bcc 10, %bb.8, implicit killed $nzcv, debug-location !153; ep.c:129:5
  B %bb.7, debug-location !153; ep.c:129:5

bb.7.for.body:
; predecessors: %bb.6
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %274:gpr64common = LDRSWui %stack.19.i, 0, debug-location !154 :: (dereferenceable load 4 from %ir.i); ep.c:130:11
  STRXroX %277:gpr64, %276:gpr64common, %274:gpr64common, 0, 1, debug-location !157 :: (store 8 into %ir.arrayidx23); ep.c:130:14
  %278:gpr32common = nsw ADDWri %274.sub_32:gpr64common, 1, 0, debug-location !158; ep.c:129:30
  STRWui %278:gpr32common, %stack.19.i, 0, debug-location !158 :: (store 4 into %ir.i); ep.c:129:30
  B %bb.6, debug-location !159; ep.c:129:5

bb.8.for.end:
; predecessors: %bb.6
  successors: %bb.10(0x50000000), %bb.9(0x30000000); %bb.10(62.50%), %bb.9(37.50%)

  %0:fpr64 = FMOVDi 112
  %279:fpr64 = FSQRTDr %0:fpr64, debug-location !163; ep.c:132:16
  FCMPDrr %279:fpr64, %279:fpr64, implicit-def $nzcv, debug-location !164; ep.c:132:12
  Bcc 7, %bb.10, implicit killed $nzcv, debug-location !164; ep.c:132:12
  B %bb.9, debug-location !164; ep.c:132:12

bb.9.call.sqrt:
; predecessors: %bb.8
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !164; ep.c:132:12
  $d0 = COPY %0:fpr64, debug-location !164; ep.c:132:12
  BL @sqrt, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $d0, implicit-def $sp, implicit-def $d0, debug-location !164; ep.c:132:12
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !164; ep.c:132:12
  %279:fpr64 = COPY killed $d0, debug-location !164; ep.c:132:12

bb.10.for.end.split:
; predecessors: %bb.8, %bb.9
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !164; ep.c:132:12
  $d0 = COPY %279:fpr64, debug-location !164; ep.c:132:12
  BL @log, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $d0, implicit-def $sp, implicit-def $d0, debug-location !164; ep.c:132:12
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !164; ep.c:132:12
  %49:fpr64 = COPY killed $d0, debug-location !164; ep.c:132:12
  STRDui %49:fpr64, %stack.1.Mops, 0, debug-location !165 :: (store 8 into %ir.Mops); ep.c:132:10
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !166; ep.c:134:5
  $w0 = COPY $wzr, debug-location !166; ep.c:134:5
  BL @timer_clear, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, debug-location !166; ep.c:134:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !166; ep.c:134:5
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !167; ep.c:135:5
  $w0 = MOVi32imm 1, debug-location !167; ep.c:135:5
  BL @timer_clear, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, debug-location !167; ep.c:135:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !167; ep.c:135:5
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !168; ep.c:136:5
  $w0 = MOVi32imm 2, debug-location !168; ep.c:136:5
  BL @timer_clear, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, debug-location !168; ep.c:136:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !168; ep.c:136:5
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !169; ep.c:137:5
  $w0 = COPY $wzr, debug-location !169; ep.c:137:5
  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, debug-location !169; ep.c:137:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !169; ep.c:137:5
  %53:gpr64 = MOVi64imm 4742906807993761792
  STRXui %53:gpr64, %stack.2.t1, 0, debug-location !170 :: (store 8 into %ir.t1); ep.c:141:8
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !171; ep.c:142:5
  %54:gpr64 = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x, debug-location !171; ep.c:142:5
  %55:gpr64common = ADRP target-flags(aarch64-page) %const.0
  %56:fpr64 = LDRDui %55:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  $w0 = COPY $wzr, debug-location !171; ep.c:142:5
  $x1 = ADDXri %stack.2.t1, 0, 0, debug-location !171; ep.c:142:5
  $d0 = COPY %56:fpr64, debug-location !171; ep.c:142:5
  $x2 = COPY %54:gpr64, debug-location !171; ep.c:142:5
  BL @vranlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit killed $x1, implicit killed $d0, implicit killed $x2, implicit-def $sp, debug-location !171; ep.c:142:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !171; ep.c:142:5
  STRXui %53:gpr64, %stack.2.t1, 0, debug-location !172 :: (store 8 into %ir.t1); ep.c:148:8
  STRWui $wzr, %stack.19.i, 0, debug-location !173 :: (store 4 into %ir.i); ep.c:150:12

bb.11.for.cond26:
; predecessors: %bb.10, %bb.12
  successors: %bb.12(0x7c000000), %bb.13(0x04000000); %bb.12(96.88%), %bb.13(3.12%)

  %58:gpr32common = LDRWui %stack.19.i, 0, debug-location !176 :: (dereferenceable load 4 from %ir.i); ep.c:150:17
  %4:fpr64 = LDRDui %stack.2.t1, 0, debug-location !179 :: (dereferenceable load 8 from %ir.t1); ep.c:0
  dead $wzr = SUBSWri %58:gpr32common, 16, 0, implicit-def $nzcv, debug-location !180; ep.c:150:5
  Bcc 12, %bb.13, implicit killed $nzcv, debug-location !180; ep.c:150:5
  B %bb.12, debug-location !180; ep.c:150:5

bb.12.for.body29:
; predecessors: %bb.11
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !181; ep.c:151:14
  $x0 = ADDXri %stack.2.t1, 0, 0, debug-location !181; ep.c:151:14
  $d0 = COPY %4:fpr64, debug-location !181; ep.c:151:14
  BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $d0, implicit-def $sp, implicit-def $d0, debug-location !181; ep.c:151:14
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !181; ep.c:151:14
  %271:fpr64 = COPY killed $d0, debug-location !181; ep.c:151:14
  STRDui %271:fpr64, %stack.3.t2, 0, debug-location !183 :: (store 8 into %ir.t2); ep.c:151:12
  %272:gpr32common = LDRWui %stack.19.i, 0, debug-location !184 :: (dereferenceable load 4 from %ir.i); ep.c:150:30
  %273:gpr32common = nsw ADDWri %272:gpr32common, 1, 0, debug-location !184; ep.c:150:30
  STRWui %273:gpr32common, %stack.19.i, 0, debug-location !184 :: (store 4 into %ir.i); ep.c:150:30
  B %bb.11, debug-location !185; ep.c:150:5

bb.13.for.end33:
; predecessors: %bb.11
  successors: %bb.14(0x80000000); %bb.14(100.00%)

  STRDui %4:fpr64, %stack.11.an, 0, debug-location !188 :: (store 8 into %ir.an); ep.c:154:8
  %60:gpr64 = MOVi64imm 4733340128880099328
  STRXui %60:gpr64, %stack.12.tt, 0, debug-location !189 :: (store 8 into %ir.tt); ep.c:155:8
  STRXui $xzr, %stack.13.gc, 0, debug-location !190 :: (store 8 into %ir.gc); ep.c:156:8
  STRXui $xzr, %stack.8.sx, 0, debug-location !191 :: (store 8 into %ir.sx); ep.c:157:8
  STRXui $xzr, %stack.9.sy, 0, debug-location !192 :: (store 8 into %ir.sy); ep.c:158:8
  STRWui $wzr, %stack.19.i, 0, debug-location !193 :: (store 4 into %ir.i); ep.c:160:12
  %267:gpr64common = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q

bb.14.for.cond34:
; predecessors: %bb.13, %bb.15
  successors: %bb.15(0x7c000000), %bb.16(0x04000000); %bb.15(96.88%), %bb.16(3.12%)

  %63:gpr32common = LDRWui %stack.19.i, 0, debug-location !196 :: (dereferenceable load 4 from %ir.i); ep.c:160:17
  dead $wzr = SUBSWri %63:gpr32common, 9, 0, implicit-def $nzcv, debug-location !199; ep.c:160:5
  Bcc 12, %bb.16, implicit killed $nzcv, debug-location !199; ep.c:160:5
  B %bb.15, debug-location !199; ep.c:160:5

bb.15.for.body37:
; predecessors: %bb.14
  successors: %bb.14(0x80000000); %bb.14(100.00%)

  %265:gpr64common = LDRSWui %stack.19.i, 0, debug-location !200 :: (dereferenceable load 4 from %ir.i); ep.c:161:11
  STRXroX $xzr, %267:gpr64common, %265:gpr64common, 0, 1, debug-location !203 :: (store 8 into %ir.arrayidx39); ep.c:161:14
  %269:gpr32common = nsw ADDWri %265.sub_32:gpr64common, 1, 0, debug-location !204; ep.c:160:26
  STRWui %269:gpr32common, %stack.19.i, 0, debug-location !204 :: (store 4 into %ir.i); ep.c:160:26
  B %bb.14, debug-location !205; ep.c:160:5

bb.16.for.end42:
; predecessors: %bb.14
  successors: %bb.17(0x80000000); %bb.17(100.00%)

  %65:gpr32 = MOVi32imm -1
  STRWui %65:gpr32, %stack.25.k_offset, 0, debug-location !208 :: (store 4 into %ir.k_offset); ep.c:170:14
  %66:gpr32 = MOVi32imm 1
  STRWui %66:gpr32, %stack.23.k, 0, debug-location !209 :: (store 4 into %ir.k); ep.c:172:12
  %185:gpr64 = MOVi64imm 4733340128880099328
  %239:fpr64 = FMOVDi 128

bb.17.for.cond43:
; predecessors: %bb.16, %bb.39
  successors: %bb.18(0x7c000000), %bb.40(0x04000000); %bb.18(96.88%), %bb.40(3.12%)

  %67:gpr32 = LDRWui %stack.23.k, 0, debug-location !212 :: (dereferenceable load 4 from %ir.k); ep.c:172:17
  %68:gpr32 = LDRWui %stack.18.np, 0, debug-location !214 :: (dereferenceable load 4 from %ir.np); ep.c:172:22
  dead $wzr = SUBSWrr %67:gpr32, %68:gpr32, implicit-def $nzcv, debug-location !216; ep.c:172:5
  Bcc 12, %bb.40, implicit killed $nzcv, debug-location !216; ep.c:172:5
  B %bb.18, debug-location !216; ep.c:172:5

bb.18.for.body46:
; predecessors: %bb.17
  successors: %bb.19(0x80000000); %bb.19(100.00%)

  %182:gpr32 = LDRWui %stack.25.k_offset, 0, debug-location !217 :: (dereferenceable load 4 from %ir.k_offset); ep.c:173:14
  %183:gpr32 = LDRWui %stack.23.k, 0, debug-location !219 :: (dereferenceable load 4 from %ir.k); ep.c:173:25
  %184:gpr32 = nsw ADDWrr %182:gpr32, %183:gpr32, debug-location !220; ep.c:173:23
  STRWui %184:gpr32, %stack.21.kk, 0, debug-location !221 :: (store 4 into %ir.kk); ep.c:173:12
  STRXui %185:gpr64, %stack.2.t1, 0, debug-location !222 :: (store 8 into %ir.t1); ep.c:174:12
  %186:fpr64 = LDRDui %stack.11.an, 0, debug-location !223 :: (dereferenceable load 8 from %ir.an); ep.c:175:14
  STRDui %186:fpr64, %stack.3.t2, 0, debug-location !224 :: (store 8 into %ir.t2); ep.c:175:12
  STRWui %66:gpr32, %stack.19.i, 0, debug-location !225 :: (store 4 into %ir.i); ep.c:179:16

bb.19.for.cond48:
; predecessors: %bb.18, %bb.23
  successors: %bb.20(0x7c000000), %bb.24(0x04000000); %bb.20(96.88%), %bb.24(3.12%)

  %188:gpr32common = LDRWui %stack.19.i, 0, debug-location !228 :: (dereferenceable load 4 from %ir.i); ep.c:179:21
  dead $wzr = SUBSWri %188:gpr32common, 100, 0, implicit-def $nzcv, debug-location !231; ep.c:179:9
  Bcc 12, %bb.24, implicit killed $nzcv, debug-location !231; ep.c:179:9
  B %bb.20, debug-location !231; ep.c:179:9

bb.20.for.body51:
; predecessors: %bb.19
  successors: %bb.21(0x40000000), %bb.22(0x40000000); %bb.21(50.00%), %bb.22(50.00%)

  %190:gpr32common = LDRWui %stack.21.kk, 0, debug-location !232 :: (dereferenceable load 4 from %ir.kk); ep.c:180:18
  dead $wzr = SUBSWri %190:gpr32common, 0, 0, implicit-def $nzcv, debug-location !234; ep.c:180:21
  %192:gpr32 = CSINCWr %190:gpr32common, %190:gpr32common, 10, implicit killed $nzcv, debug-location !234; ep.c:180:21
  %193:gpr32 = SBFMWri %192:gpr32, 1, 31, debug-location !234; ep.c:180:21
  STRWui %193:gpr32, %stack.20.ik, 0, debug-location !235 :: (store 4 into %ir.ik); ep.c:180:16
  %194:gpr32common = ANDWri %192:gpr32, 2014, debug-location !238; ep.c:181:20
  dead $wzr = SUBSWrr %194:gpr32common, %190:gpr32common, implicit-def $nzcv, debug-location !241; ep.c:181:17
  Bcc 0, %bb.22, implicit killed $nzcv, debug-location !241; ep.c:181:17
  B %bb.21, debug-location !241; ep.c:181:17

bb.21.if.then54:
; predecessors: %bb.20
  successors: %bb.22(0x80000000); %bb.22(100.00%)

  %196:fpr64 = LDRDui %stack.3.t2, 0, debug-location !242 :: (dereferenceable load 8 from %ir.t2); ep.c:182:34
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !243; ep.c:182:22
  $x0 = ADDXri %stack.2.t1, 0, 0, debug-location !243; ep.c:182:22
  $d0 = COPY %196:fpr64, debug-location !243; ep.c:182:22
  BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $d0, implicit-def $sp, implicit-def $d0, debug-location !243; ep.c:182:22
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !243; ep.c:182:22
  %198:fpr64 = COPY killed $d0, debug-location !243; ep.c:182:22
  STRDui %198:fpr64, %stack.4.t3, 0, debug-location !244 :: (store 8 into %ir.t3); ep.c:182:20

bb.22.if.end56:
; predecessors: %bb.20, %bb.21
  successors: %bb.24(0x04000000), %bb.23(0x7c000000); %bb.24(3.12%), %bb.23(96.88%)

  %199:gpr32 = LDRWui %stack.20.ik, 0, debug-location !246 :: (dereferenceable load 4 from %ir.ik); ep.c:183:17
  CBZW %199:gpr32, %bb.24, debug-location !249; ep.c:183:17
  B %bb.23, debug-location !249; ep.c:183:17

bb.23.if.end60:
; predecessors: %bb.22
  successors: %bb.19(0x80000000); %bb.19(100.00%)

  %200:fpr64 = LDRDui %stack.3.t2, 0, debug-location !250 :: (dereferenceable load 8 from %ir.t2); ep.c:185:30
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !251; ep.c:185:18
  $x0 = ADDXri %stack.3.t2, 0, 0, debug-location !251; ep.c:185:18
  $d0 = COPY %200:fpr64, debug-location !251; ep.c:185:18
  BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $d0, implicit-def $sp, implicit-def $d0, debug-location !251; ep.c:185:18
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !251; ep.c:185:18
  %202:fpr64 = COPY killed $d0, debug-location !251; ep.c:185:18
  STRDui %202:fpr64, %stack.4.t3, 0, debug-location !252 :: (store 8 into %ir.t3); ep.c:185:16
  %203:gpr32 = LDRWui %stack.20.ik, 0, debug-location !253 :: (dereferenceable load 4 from %ir.ik); ep.c:186:18
  STRWui %203:gpr32, %stack.21.kk, 0, debug-location !254 :: (store 4 into %ir.kk); ep.c:186:16
  %204:gpr32common = LDRWui %stack.19.i, 0, debug-location !255 :: (dereferenceable load 4 from %ir.i); ep.c:179:32
  %205:gpr32common = nsw ADDWri %204:gpr32common, 1, 0, debug-location !255; ep.c:179:32
  STRWui %205:gpr32common, %stack.19.i, 0, debug-location !255 :: (store 4 into %ir.i); ep.c:179:32
  B %bb.19, debug-location !256; ep.c:179:9

bb.24.for.end64:
; predecessors: %bb.19, %bb.22
  successors: %bb.25(0x50000000), %bb.26(0x30000000); %bb.25(62.50%), %bb.26(37.50%)

  %206:gpr32 = LDRWui %stack.28.timers_enabled, 0, debug-location !259 :: (dereferenceable load 4 from %ir.timers_enabled); ep.c:192:13
  CBZW %206:gpr32, %bb.26, debug-location !261; ep.c:192:13
  B %bb.25, debug-location !261; ep.c:192:13

bb.25.if.then65:
; predecessors: %bb.24
  successors: %bb.26(0x80000000); %bb.26(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !262; ep.c:193:13
  $w0 = MOVi32imm 2, debug-location !262; ep.c:193:13
  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, debug-location !262; ep.c:193:13
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !262; ep.c:193:13

bb.26.if.end66:
; predecessors: %bb.24, %bb.25
  successors: %bb.27(0x50000000), %bb.28(0x30000000); %bb.27(62.50%), %bb.28(37.50%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !263; ep.c:194:9
  $w0 = MOVi32imm 131072, debug-location !263; ep.c:194:9
  $x1 = ADDXri %stack.2.t1, 0, 0, debug-location !263; ep.c:194:9
  $d0 = COPY %56:fpr64, debug-location !263; ep.c:194:9
  $x2 = COPY %54:gpr64, debug-location !263; ep.c:194:9
  BL @vranlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit killed $x1, implicit killed $d0, implicit killed $x2, implicit-def $sp, debug-location !263; ep.c:194:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !263; ep.c:194:9
  %213:gpr32 = LDRWui %stack.28.timers_enabled, 0, debug-location !264 :: (dereferenceable load 4 from %ir.timers_enabled); ep.c:195:13
  CBZW %213:gpr32, %bb.28, debug-location !266; ep.c:195:13
  B %bb.27, debug-location !266; ep.c:195:13

bb.27.if.then68:
; predecessors: %bb.26
  successors: %bb.28(0x80000000); %bb.28(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !267; ep.c:196:13
  $w0 = MOVi32imm 2, debug-location !267; ep.c:196:13
  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, debug-location !267; ep.c:196:13
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !267; ep.c:196:13

bb.28.if.end69:
; predecessors: %bb.26, %bb.27
  successors: %bb.29(0x50000000), %bb.30(0x30000000); %bb.29(62.50%), %bb.30(37.50%)

  %215:gpr32 = LDRWui %stack.28.timers_enabled, 0, debug-location !268 :: (dereferenceable load 4 from %ir.timers_enabled); ep.c:203:13
  CBZW %215:gpr32, %bb.30, debug-location !270; ep.c:203:13
  B %bb.29, debug-location !270; ep.c:203:13

bb.29.if.then71:
; predecessors: %bb.28
  successors: %bb.30(0x80000000); %bb.30(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !271; ep.c:204:13
  $w0 = MOVi32imm 1, debug-location !271; ep.c:204:13
  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, debug-location !271; ep.c:204:13
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !271; ep.c:204:13

bb.30.if.end72:
; predecessors: %bb.28, %bb.29
  successors: %bb.31(0x80000000); %bb.31(100.00%)

  STRWui $wzr, %stack.19.i, 0, debug-location !272 :: (store 4 into %ir.i); ep.c:206:16

bb.31.for.cond73:
; predecessors: %bb.30, %bb.36
  successors: %bb.32(0x7c000000), %bb.37(0x04000000); %bb.32(96.88%), %bb.37(3.12%)

  %218:gpr32common = LDRWui %stack.19.i, 0, debug-location !275 :: (dereferenceable load 4 from %ir.i); ep.c:206:21
  dead $wzr = SUBSWri %218:gpr32common, 16, 12, implicit-def $nzcv, debug-location !278; ep.c:206:9
  Bcc 10, %bb.37, implicit killed $nzcv, debug-location !278; ep.c:206:9
  B %bb.32, debug-location !278; ep.c:206:9

bb.32.for.body76:
; predecessors: %bb.31
  successors: %bb.33(0x40000000), %bb.36(0x40000000); %bb.33(50.00%), %bb.36(50.00%)

  %225:gpr64 = LDRSWui %stack.19.i, 0, debug-location !279 :: (dereferenceable load 4 from %ir.i); ep.c:207:30
  %226:gpr64common = ADDXrs %54:gpr64, %225:gpr64, 4, debug-location !282; ep.c:207:24
  %227:fpr64 = LDRDui %226:gpr64common, 0, debug-location !282 :: (load 8 from %ir.arrayidx79); ep.c:207:24
  %228:fpr64 = FADDDrr %227:fpr64, %227:fpr64, debug-location !283; ep.c:207:22
  %230:fpr64 = FSUBDrr %228:fpr64, %0:fpr64, debug-location !284; ep.c:207:33
  STRDui %230:fpr64, %stack.6.x1, 0, debug-location !285 :: (store 8 into %ir.x1); ep.c:207:16
  %231:fpr64 = LDRDui %226:gpr64common, 1, debug-location !289 :: (load 8 from %ir.arrayidx84); ep.c:208:24
  %232:fpr64 = FADDDrr %231:fpr64, %231:fpr64, debug-location !290; ep.c:208:22
  %233:fpr64 = FSUBDrr %232:fpr64, %0:fpr64, debug-location !291; ep.c:208:37
  STRDui %233:fpr64, %stack.7.x2, 0, debug-location !292 :: (store 8 into %ir.x2); ep.c:208:16
  %234:fpr64 = FMULDrr %230:fpr64, %230:fpr64, debug-location !295; ep.c:209:21
  %235:fpr64 = FMULDrr %233:fpr64, %233:fpr64, debug-location !298; ep.c:209:31
  %236:fpr64 = FADDDrr %234:fpr64, %235:fpr64, debug-location !299; ep.c:209:26
  STRDui %236:fpr64, %stack.2.t1, 0, debug-location !300 :: (store 8 into %ir.t1); ep.c:209:16
  FCMPDrr %236:fpr64, %0:fpr64, implicit-def $nzcv, debug-location !304; ep.c:210:17
  Bcc 8, %bb.36, implicit killed $nzcv, debug-location !304; ep.c:210:17
  B %bb.33, debug-location !304; ep.c:210:17

bb.33.if.then92:
; predecessors: %bb.32
  successors: %bb.35(0x50000000), %bb.34(0x30000000); %bb.35(62.50%), %bb.34(37.50%)

  %237:fpr64 = LDRDui %stack.2.t1, 0, debug-location !305 :: (dereferenceable load 8 from %ir.t1); ep.c:211:38
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !307; ep.c:211:34
  $d0 = COPY %237:fpr64, debug-location !307; ep.c:211:34
  BL @log, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $d0, implicit-def $sp, implicit-def $d0, debug-location !307; ep.c:211:34
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !307; ep.c:211:34
  %238:fpr64 = COPY killed $d0, debug-location !307; ep.c:211:34
  %240:fpr64 = FMULDrr %238:fpr64, %239:fpr64, debug-location !308; ep.c:211:32
  %241:fpr64 = LDRDui %stack.2.t1, 0, debug-location !309 :: (dereferenceable load 8 from %ir.t1); ep.c:211:44
  %5:fpr64 = FDIVDrr %240:fpr64, %241:fpr64, debug-location !310; ep.c:211:42
  %280:fpr64 = FSQRTDr %5:fpr64, debug-location !311; ep.c:211:22
  FCMPDrr %280:fpr64, %280:fpr64, implicit-def $nzcv, debug-location !312; ep.c:211:20
  Bcc 7, %bb.35, implicit killed $nzcv, debug-location !312; ep.c:211:20
  B %bb.34, debug-location !312; ep.c:211:20

bb.34.call.sqrt1:
; predecessors: %bb.33
  successors: %bb.35(0x80000000); %bb.35(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !312; ep.c:211:20
  $d0 = COPY %5:fpr64, debug-location !312; ep.c:211:20
  BL @sqrt, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $d0, implicit-def $sp, implicit-def $d0, debug-location !312; ep.c:211:20
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !312; ep.c:211:20
  %280:fpr64 = COPY killed $d0, debug-location !312; ep.c:211:20

bb.35.if.then92.split:
; predecessors: %bb.33, %bb.34
  successors: %bb.36(0x80000000); %bb.36(100.00%)

  STRDui %280:fpr64, %stack.3.t2, 0, debug-location !312 :: (store 8 into %ir.t2); ep.c:211:20
  %243:fpr64 = LDRDui %stack.6.x1, 0, debug-location !313 :: (dereferenceable load 8 from %ir.x1); ep.c:212:23
  %244:fpr64 = FMULDrr %243:fpr64, %280:fpr64, debug-location !315; ep.c:212:26
  STRDui %244:fpr64, %stack.4.t3, 0, debug-location !316 :: (store 8 into %ir.t3); ep.c:212:20
  %245:fpr64 = LDRDui %stack.7.x2, 0, debug-location !317 :: (dereferenceable load 8 from %ir.x2); ep.c:213:23
  %246:fpr64 = FMULDrr %245:fpr64, %280:fpr64, debug-location !319; ep.c:213:26
  STRDui %246:fpr64, %stack.5.t4, 0, debug-location !320 :: (store 8 into %ir.t4); ep.c:213:20
  %247:fpr64 = FABSDr %244:fpr64, debug-location !321; ep.c:214:21
  %248:fpr64 = FABSDr %246:fpr64, debug-location !321; ep.c:214:21
  FCMPDrr %247:fpr64, %248:fpr64, implicit-def $nzcv, debug-location !321; ep.c:214:21
  %249:fpr64 = FCSELDrrr %244:fpr64, %246:fpr64, 12, implicit killed $nzcv, debug-location !321; ep.c:214:21
  %250:fpr64 = FABSDr %249:fpr64, debug-location !321; ep.c:214:21
  undef %252.sub_32:gpr64 = FCVTZSUWDr %250:fpr64, debug-location !321; ep.c:214:21
  STRWui %252.sub_32:gpr64, %stack.22.l, 0, debug-location !322 :: (store 4 into %ir.l); ep.c:214:19
  %254:gpr64 = SBFMXri %252:gpr64, 61, 31, debug-location !324; ep.c:215:24
  %256:fpr64 = LDRDroX %267:gpr64common, %254:gpr64, 0, 0, debug-location !324 :: (load 8 from %ir.arrayidx103); ep.c:215:24
  %258:fpr64 = FADDDrr %256:fpr64, %0:fpr64, debug-location !325; ep.c:215:29
  STRDroX %258:fpr64, %267:gpr64common, %254:gpr64, 0, 0, debug-location !328 :: (store 8 into %ir.arrayidx106); ep.c:215:22
  %259:fpr64 = LDRDui %stack.8.sx, 0, debug-location !329 :: (dereferenceable load 8 from %ir.sx); ep.c:216:22
  %260:fpr64 = FADDDrr %259:fpr64, %244:fpr64, debug-location !331; ep.c:216:25
  STRDui %260:fpr64, %stack.8.sx, 0, debug-location !332 :: (store 8 into %ir.sx); ep.c:216:20
  %261:fpr64 = LDRDui %stack.9.sy, 0, debug-location !333 :: (dereferenceable load 8 from %ir.sy); ep.c:217:22
  %262:fpr64 = FADDDrr %261:fpr64, %246:fpr64, debug-location !335; ep.c:217:25
  STRDui %262:fpr64, %stack.9.sy, 0, debug-location !336 :: (store 8 into %ir.sy); ep.c:217:20

bb.36.for.inc110:
; predecessors: %bb.32, %bb.35
  successors: %bb.31(0x80000000); %bb.31(100.00%)

  %263:gpr32common = LDRWui %stack.19.i, 0, debug-location !338 :: (dereferenceable load 4 from %ir.i); ep.c:206:30
  %264:gpr32common = nsw ADDWri %263:gpr32common, 1, 0, debug-location !338; ep.c:206:30
  STRWui %264:gpr32common, %stack.19.i, 0, debug-location !338 :: (store 4 into %ir.i); ep.c:206:30
  B %bb.31, debug-location !339; ep.c:206:9

bb.37.for.end112:
; predecessors: %bb.31
  successors: %bb.38(0x50000000), %bb.39(0x30000000); %bb.38(62.50%), %bb.39(37.50%)

  %220:gpr32 = LDRWui %stack.28.timers_enabled, 0, debug-location !342 :: (dereferenceable load 4 from %ir.timers_enabled); ep.c:221:13
  CBZW %220:gpr32, %bb.39, debug-location !344; ep.c:221:13
  B %bb.38, debug-location !344; ep.c:221:13

bb.38.if.then114:
; predecessors: %bb.37
  successors: %bb.39(0x80000000); %bb.39(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !345; ep.c:222:13
  $w0 = MOVi32imm 1, debug-location !345; ep.c:222:13
  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, debug-location !345; ep.c:222:13
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !345; ep.c:222:13

bb.39.for.inc116:
; predecessors: %bb.37, %bb.38
  successors: %bb.17(0x80000000); %bb.17(100.00%)

  %222:gpr32common = LDRWui %stack.23.k, 0, debug-location !346 :: (dereferenceable load 4 from %ir.k); ep.c:172:27
  %223:gpr32common = nsw ADDWri %222:gpr32common, 1, 0, debug-location !346; ep.c:172:27
  STRWui %223:gpr32common, %stack.23.k, 0, debug-location !346 :: (store 4 into %ir.k); ep.c:172:27
  B %bb.17, debug-location !347; ep.c:172:5

bb.40.for.end118:
; predecessors: %bb.17
  successors: %bb.41(0x80000000); %bb.41(100.00%)

  STRWui $wzr, %stack.19.i, 0, debug-location !350 :: (store 4 into %ir.i); ep.c:225:12

bb.41.for.cond119:
; predecessors: %bb.40, %bb.42
  successors: %bb.42(0x7c000000), %bb.43(0x04000000); %bb.42(96.88%), %bb.43(3.12%)

  %71:gpr32common = LDRWui %stack.19.i, 0, debug-location !353 :: (dereferenceable load 4 from %ir.i); ep.c:225:17
  dead $wzr = SUBSWri %71:gpr32common, 9, 0, implicit-def $nzcv, debug-location !356; ep.c:225:5
  Bcc 12, %bb.43, implicit killed $nzcv, debug-location !356; ep.c:225:5
  B %bb.42, debug-location !356; ep.c:225:5

bb.42.for.body122:
; predecessors: %bb.41
  successors: %bb.41(0x80000000); %bb.41(100.00%)

  %175:fpr64 = LDRDui %stack.13.gc, 0, debug-location !357 :: (dereferenceable load 8 from %ir.gc); ep.c:226:14
  %176:gpr64common = LDRSWui %stack.19.i, 0, debug-location !359 :: (dereferenceable load 4 from %ir.i); ep.c:226:21
  %179:fpr64 = LDRDroX %267:gpr64common, %176:gpr64common, 0, 1, debug-location !360 :: (load 8 from %ir.arrayidx124); ep.c:226:19
  %180:fpr64 = FADDDrr %175:fpr64, %179:fpr64, debug-location !361; ep.c:226:17
  STRDui %180:fpr64, %stack.13.gc, 0, debug-location !362 :: (store 8 into %ir.gc); ep.c:226:12
  %181:gpr32common = nsw ADDWri %176.sub_32:gpr64common, 1, 0, debug-location !363; ep.c:225:26
  STRWui %181:gpr32common, %stack.19.i, 0, debug-location !363 :: (store 4 into %ir.i); ep.c:225:26
  B %bb.41, debug-location !364; ep.c:225:5

bb.43.do.end130:
; predecessors: %bb.41
  successors: %bb.44(0x50000000), %bb.45(0x30000000); %bb.44(62.50%), %bb.45(37.50%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !367; ep.c:231:5
  $w0 = COPY $wzr, debug-location !367; ep.c:231:5
  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, debug-location !367; ep.c:231:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !367; ep.c:231:5
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !368; ep.c:232:10
  $w0 = COPY $wzr, debug-location !368; ep.c:232:10
  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def $d0, debug-location !368; ep.c:232:10
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !368; ep.c:232:10
  %74:fpr64 = COPY killed $d0, debug-location !368; ep.c:232:10
  STRDui %74:fpr64, %stack.10.tm, 0, debug-location !369 :: (store 8 into %ir.tm); ep.c:232:8
  STRWui $wzr, %stack.24.nit, 0, debug-location !370 :: (store 4 into %ir.nit); ep.c:234:9
  %75:gpr32 = MOVi32imm 1
  STRWui %75:gpr32, %stack.27.verified, 0, debug-location !371 :: (store 4 into %ir.verified); ep.c:235:14
  %76:gpr64 = MOVi64imm 4675776847449726827
  STRXui %76:gpr64, %stack.14.sx_verify_value, 0, debug-location !372 :: (store 8 into %ir.sx_verify_value); ep.c:249:25
  %77:gpr64 = MOVi64imm -4550329231111044107
  STRXui %77:gpr64, %stack.15.sy_verify_value, 0, debug-location !378 :: (store 8 into %ir.sy_verify_value); ep.c:250:25
  CBZW %75:gpr32, %bb.45, debug-location !381; ep.c:268:9
  B %bb.44, debug-location !381; ep.c:268:9

bb.44.if.then133:
; predecessors: %bb.43
  successors: %bb.45(0x80000000); %bb.45(100.00%)

  %78:fpr64 = LDRDui %stack.8.sx, 0, debug-location !382 :: (dereferenceable load 8 from %ir.sx); ep.c:269:24
  %79:fpr64 = LDRDui %stack.14.sx_verify_value, 0, debug-location !384 :: (dereferenceable load 8 from %ir.sx_verify_value); ep.c:269:29
  %80:fpr64 = FSUBDrr %78:fpr64, %79:fpr64, debug-location !385; ep.c:269:27
  %81:fpr64 = FDIVDrr %80:fpr64, %79:fpr64, debug-location !387; ep.c:269:46
  %82:fpr64 = FABSDr %81:fpr64, debug-location !388; ep.c:269:18
  STRDui %82:fpr64, %stack.16.sx_err, 0, debug-location !389 :: (store 8 into %ir.sx_err); ep.c:269:16
  %83:fpr64 = LDRDui %stack.9.sy, 0, debug-location !390 :: (dereferenceable load 8 from %ir.sy); ep.c:270:24
  %84:fpr64 = LDRDui %stack.15.sy_verify_value, 0, debug-location !391 :: (dereferenceable load 8 from %ir.sy_verify_value); ep.c:270:29
  %85:fpr64 = FSUBDrr %83:fpr64, %84:fpr64, debug-location !392; ep.c:270:27
  %86:fpr64 = FDIVDrr %85:fpr64, %84:fpr64, debug-location !394; ep.c:270:46
  %87:fpr64 = FABSDr %86:fpr64, debug-location !395; ep.c:270:18
  STRDui %87:fpr64, %stack.17.sy_err, 0, debug-location !396 :: (store 8 into %ir.sy_err); ep.c:270:16
  %88:gpr64common = ADRP target-flags(aarch64-page) %const.1
  %89:fpr64 = LDRDui %88:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  FCMPDrr %82:fpr64, %89:fpr64, implicit-def $nzcv, debug-location !398; ep.c:271:29
  %90:gpr32 = CSINCWr $wzr, $wzr, 8, implicit killed $nzcv, debug-location !398; ep.c:271:29
  FCMPDrr %87:fpr64, %89:fpr64, implicit-def $nzcv, debug-location !399; ep.c:271:41
  %91:gpr32 = CSINCWr $wzr, $wzr, 8, implicit killed $nzcv, debug-location !399; ep.c:271:41
  %92:gpr32 = ANDWrr %90:gpr32, %91:gpr32, debug-location !399; ep.c:271:41
  STRWui %92:gpr32, %stack.27.verified, 0, debug-location !400 :: (store 4 into %ir.verified); ep.c:271:18

bb.45.if.end142:
; predecessors: %bb.43, %bb.44
  successors: %bb.46(0x80000000); %bb.46(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !402; ep.c:274:12
  %93:fpr64 = FMOVDi 0
  %94:fpr64 = FMOVDi 63
  $d0 = COPY %93:fpr64, debug-location !402; ep.c:274:12
  $d1 = COPY %94:fpr64, debug-location !402; ep.c:274:12
  BL @pow, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def $d0, debug-location !402; ep.c:274:12
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !402; ep.c:274:12
  %95:fpr64 = COPY killed $d0, debug-location !402; ep.c:274:12
  %96:fpr64 = LDRDui %stack.10.tm, 0, debug-location !403 :: (dereferenceable load 8 from %ir.tm); ep.c:274:30
  %97:fpr64 = FDIVDrr %95:fpr64, %96:fpr64, debug-location !404; ep.c:274:28
  %98:gpr64 = MOVi64imm 4696837146684686336
  %99:fpr64 = COPY %98:gpr64
  %100:fpr64 = FDIVDrr %97:fpr64, %99:fpr64, debug-location !405; ep.c:274:33
  STRDui %100:fpr64, %stack.1.Mops, 0, debug-location !406 :: (store 8 into %ir.Mops); ep.c:274:10
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !407; ep.c:276:5
  %101:gpr64 = MOVaddr target-flags(aarch64-page) @.str.5, target-flags(aarch64-pageoff, aarch64-nc) @.str.5, debug-location !407; ep.c:276:5
  $x0 = COPY %101:gpr64, debug-location !407; ep.c:276:5
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp, implicit-def dead $w0, debug-location !407; ep.c:276:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !407; ep.c:276:5
  %103:fpr64 = LDRDui %stack.10.tm, 0, debug-location !408 :: (dereferenceable load 8 from %ir.tm); ep.c:277:35
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !409; ep.c:277:5
  %104:gpr64 = MOVaddr target-flags(aarch64-page) @.str.6, target-flags(aarch64-pageoff, aarch64-nc) @.str.6, debug-location !409; ep.c:277:5
  $x0 = COPY %104:gpr64, debug-location !409; ep.c:277:5
  $d0 = COPY %103:fpr64, debug-location !409; ep.c:277:5
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $d0, implicit-def $sp, implicit-def dead $w0, debug-location !409; ep.c:277:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !409; ep.c:277:5
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !410; ep.c:278:5
  %106:gpr64 = MOVaddr target-flags(aarch64-page) @.str.7, target-flags(aarch64-pageoff, aarch64-nc) @.str.7, debug-location !410; ep.c:278:5
  $x0 = COPY %106:gpr64, debug-location !410; ep.c:278:5
  $w1 = MOVi32imm 30, debug-location !410; ep.c:278:5
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $sp, implicit-def dead $w0, debug-location !410; ep.c:278:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !410; ep.c:278:5
  %109:fpr64 = LDRDui %stack.13.gc, 0, debug-location !411 :: (dereferenceable load 8 from %ir.gc); ep.c:279:46
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !412; ep.c:279:5
  %110:gpr64 = MOVaddr target-flags(aarch64-page) @.str.8, target-flags(aarch64-pageoff, aarch64-nc) @.str.8, debug-location !412; ep.c:279:5
  $x0 = COPY %110:gpr64, debug-location !412; ep.c:279:5
  $d0 = COPY %109:fpr64, debug-location !412; ep.c:279:5
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $d0, implicit-def $sp, implicit-def dead $w0, debug-location !412; ep.c:279:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !412; ep.c:279:5
  %112:fpr64 = LDRDui %stack.8.sx, 0, debug-location !413 :: (dereferenceable load 8 from %ir.sx); ep.c:280:42
  %113:fpr64 = LDRDui %stack.9.sy, 0, debug-location !414 :: (dereferenceable load 8 from %ir.sy); ep.c:280:46
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !415; ep.c:280:5
  %114:gpr64 = MOVaddr target-flags(aarch64-page) @.str.9, target-flags(aarch64-pageoff, aarch64-nc) @.str.9, debug-location !415; ep.c:280:5
  $x0 = COPY %114:gpr64, debug-location !415; ep.c:280:5
  $d0 = COPY %112:fpr64, debug-location !415; ep.c:280:5
  $d1 = COPY %113:fpr64, debug-location !415; ep.c:280:5
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0, debug-location !415; ep.c:280:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !415; ep.c:280:5
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !416; ep.c:281:5
  %116:gpr64 = MOVaddr target-flags(aarch64-page) @.str.10, target-flags(aarch64-pageoff, aarch64-nc) @.str.10, debug-location !416; ep.c:281:5
  $x0 = COPY %116:gpr64, debug-location !416; ep.c:281:5
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp, implicit-def dead $w0, debug-location !416; ep.c:281:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !416; ep.c:281:5
  STRWui $wzr, %stack.19.i, 0, debug-location !417 :: (store 4 into %ir.i); ep.c:282:12
  %171:gpr64 = MOVaddr target-flags(aarch64-page) @.str.11, target-flags(aarch64-pageoff, aarch64-nc) @.str.11

bb.46.for.cond152:
; predecessors: %bb.45, %bb.47
  successors: %bb.47(0x7c000000), %bb.48(0x04000000); %bb.47(96.88%), %bb.48(3.12%)

  %119:gpr32common = LDRWui %stack.19.i, 0, debug-location !420 :: (dereferenceable load 4 from %ir.i); ep.c:282:17
  dead $wzr = SUBSWri %119:gpr32common, 9, 0, implicit-def $nzcv, debug-location !423; ep.c:282:5
  Bcc 12, %bb.48, implicit killed $nzcv, debug-location !423; ep.c:282:5
  B %bb.47, debug-location !423; ep.c:282:5

bb.47.for.body155:
; predecessors: %bb.46
  successors: %bb.46(0x80000000); %bb.46(100.00%)

  %167:gpr64 = LDRSWui %stack.19.i, 0, debug-location !424 :: (dereferenceable load 4 from %ir.i); ep.c:283:32
  %170:fpr64 = LDRDroX %267:gpr64common, %167:gpr64, 0, 1, debug-location !427 :: (load 8 from %ir.arrayidx157); ep.c:283:35
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !428; ep.c:283:9
  $x0 = COPY %171:gpr64, debug-location !428; ep.c:283:9
  $w1 = COPY %167.sub_32:gpr64, debug-location !428; ep.c:283:9
  $d0 = COPY %170:fpr64, debug-location !428; ep.c:283:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit killed $d0, implicit-def $sp, implicit-def dead $w0, debug-location !428; ep.c:283:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !428; ep.c:283:9
  %173:gpr32common = LDRWui %stack.19.i, 0, debug-location !429 :: (dereferenceable load 4 from %ir.i); ep.c:282:26
  %174:gpr32common = nsw ADDWri %173:gpr32common, 1, 0, debug-location !429; ep.c:282:26
  STRWui %174:gpr32common, %stack.19.i, 0, debug-location !429 :: (store 4 into %ir.i); ep.c:282:26
  B %bb.46, debug-location !430; ep.c:282:5

bb.48.for.end161:
; predecessors: %bb.46
  successors: %bb.49(0x50000000), %bb.52(0x30000000); %bb.49(62.50%), %bb.52(37.50%)

  %121:gpr32 = LDRWui %stack.24.nit, 0, debug-location !433 :: (dereferenceable load 4 from %ir.nit); ep.c:286:45
  %122:fpr64 = LDRDui %stack.10.tm, 0, debug-location !434 :: (dereferenceable load 8 from %ir.tm); ep.c:286:50
  %123:fpr64 = LDRDui %stack.1.Mops, 0, debug-location !435 :: (dereferenceable load 8 from %ir.Mops); ep.c:286:54
  %124:gpr32 = LDRWui %stack.27.verified, 0, debug-location !436 :: (dereferenceable load 4 from %ir.verified); ep.c:287:47
  ADJCALLSTACKDOWN 72, 0, implicit-def dead $sp, implicit $sp, debug-location !437; ep.c:286:5
  %125:gpr64 = MOVaddr target-flags(aarch64-page) @.str.22, target-flags(aarch64-pageoff, aarch64-nc) @.str.22, debug-location !437; ep.c:286:5
  STRXui %125:gpr64, $sp, 8, debug-location !437 :: (store 8 into stack + 64); ep.c:286:5
  %127:gpr64 = MOVaddr target-flags(aarch64-page) @.str.21, target-flags(aarch64-pageoff, aarch64-nc) @.str.21, debug-location !437; ep.c:286:5
  STRXui %127:gpr64, $sp, 7, debug-location !437 :: (store 8 into stack + 56); ep.c:286:5
  %128:gpr64 = MOVaddr target-flags(aarch64-page) @.str.20, target-flags(aarch64-pageoff, aarch64-nc) @.str.20, debug-location !437; ep.c:286:5
  STRXui %128:gpr64, $sp, 6, debug-location !437 :: (store 8 into stack + 48); ep.c:286:5
  %129:gpr64 = MOVaddr target-flags(aarch64-page) @.str.19, target-flags(aarch64-pageoff, aarch64-nc) @.str.19, debug-location !437; ep.c:286:5
  STRXui %129:gpr64, $sp, 5, debug-location !437 :: (store 8 into stack + 40); ep.c:286:5
  %130:gpr64 = MOVaddr target-flags(aarch64-page) @.str.18, target-flags(aarch64-pageoff, aarch64-nc) @.str.18, debug-location !437; ep.c:286:5
  STRXui %130:gpr64, $sp, 4, debug-location !437 :: (store 8 into stack + 32); ep.c:286:5
  %131:gpr64 = MOVaddr target-flags(aarch64-page) @.str.17, target-flags(aarch64-pageoff, aarch64-nc) @.str.17, debug-location !437; ep.c:286:5
  STRXui %131:gpr64, $sp, 3, debug-location !437 :: (store 8 into stack + 24); ep.c:286:5
  %132:gpr64 = MOVaddr target-flags(aarch64-page) @.str.16, target-flags(aarch64-pageoff, aarch64-nc) @.str.16, debug-location !437; ep.c:286:5
  STRXui %132:gpr64, $sp, 2, debug-location !437 :: (store 8 into stack + 16); ep.c:286:5
  %133:gpr64 = MOVaddr target-flags(aarch64-page) @.str.15, target-flags(aarch64-pageoff, aarch64-nc) @.str.15, debug-location !437; ep.c:286:5
  STRXui %133:gpr64, $sp, 1, debug-location !437 :: (store 8 into stack + 8); ep.c:286:5
  %134:gpr64 = MOVaddr target-flags(aarch64-page) @.str.14, target-flags(aarch64-pageoff, aarch64-nc) @.str.14, debug-location !437; ep.c:286:5
  STRXui %134:gpr64, $sp, 0, debug-location !437 :: (store 8 into stack); ep.c:286:5
  %135:gpr64 = MOVaddr target-flags(aarch64-page) @.str.12, target-flags(aarch64-pageoff, aarch64-nc) @.str.12, debug-location !437; ep.c:286:5
  %136:gpr64 = MOVaddr target-flags(aarch64-page) @.str.13, target-flags(aarch64-pageoff, aarch64-nc) @.str.13, debug-location !437; ep.c:286:5
  $x0 = COPY %135:gpr64, debug-location !437; ep.c:286:5
  $w1 = MOVi32imm 66, debug-location !437; ep.c:286:5
  $w2 = MOVi32imm 31, debug-location !437; ep.c:286:5
  $w3 = COPY $wzr, debug-location !437; ep.c:286:5
  $w4 = COPY $wzr, debug-location !437; ep.c:286:5
  $w5 = COPY %121:gpr32, debug-location !437; ep.c:286:5
  $d0 = COPY %122:fpr64, debug-location !437; ep.c:286:5
  $d1 = COPY %123:fpr64, debug-location !437; ep.c:286:5
  $x6 = COPY %136:gpr64, debug-location !437; ep.c:286:5
  $w7 = COPY %124:gpr32, debug-location !437; ep.c:286:5
  BL @print_results, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit killed $w2, implicit killed $w3, implicit killed $w4, implicit killed $w5, implicit killed $d0, implicit killed $d1, implicit killed $x6, implicit killed $w7, implicit-def $sp, debug-location !437; ep.c:286:5
  ADJCALLSTACKUP 72, 0, implicit-def dead $sp, implicit $sp, debug-location !437; ep.c:286:5
  %140:gpr32 = LDRWui %stack.28.timers_enabled, 0, debug-location !438 :: (dereferenceable load 4 from %ir.timers_enabled); ep.c:290:9
  CBZW %140:gpr32, %bb.52, debug-location !440; ep.c:290:9
  B %bb.49, debug-location !440; ep.c:290:9

bb.49.if.then163:
; predecessors: %bb.48
  successors: %bb.50(0x40000000), %bb.51(0x40000000); %bb.50(50.00%), %bb.51(50.00%)

  %141:fpr64 = LDRDui %stack.10.tm, 0, debug-location !441 :: (dereferenceable load 8 from %ir.tm); ep.c:291:13
  FCMPDri %141:fpr64, implicit-def $nzcv, debug-location !445; ep.c:291:13
  Bcc 8, %bb.51, implicit killed $nzcv, debug-location !445; ep.c:291:13
  B %bb.50, debug-location !445; ep.c:291:13

bb.50.if.then166:
; predecessors: %bb.49
  successors: %bb.51(0x80000000); %bb.51(100.00%)

  %142:gpr64 = MOVi64imm 4607182418800017408
  STRXui %142:gpr64, %stack.10.tm, 0, debug-location !446 :: (store 8 into %ir.tm); ep.c:292:16

bb.51.if.end167:
; predecessors: %bb.49, %bb.50
  successors: %bb.52(0x80000000); %bb.52(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !448; ep.c:293:14
  $w0 = COPY $wzr, debug-location !448; ep.c:293:14
  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def $d0, debug-location !448; ep.c:293:14
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !448; ep.c:293:14
  %144:fpr64 = COPY killed $d0, debug-location !448; ep.c:293:14
  STRDui %144:fpr64, %stack.12.tt, 0, debug-location !449 :: (store 8 into %ir.tt); ep.c:293:12
  %145:gpr64 = MOVi64imm 4636737291354636288
  %146:fpr64 = COPY %145:gpr64
  %147:fpr64 = FMULDrr %144:fpr64, %146:fpr64, debug-location !452; ep.c:294:62
  %148:fpr64 = LDRDui %stack.10.tm, 0, debug-location !453 :: (dereferenceable load 8 from %ir.tm); ep.c:294:72
  %149:fpr64 = FDIVDrr %147:fpr64, %148:fpr64, debug-location !454; ep.c:294:70
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !455; ep.c:294:9
  %150:gpr64 = MOVaddr target-flags(aarch64-page) @.str.23, target-flags(aarch64-pageoff, aarch64-nc) @.str.23, debug-location !455; ep.c:294:9
  $x0 = COPY %150:gpr64, debug-location !455; ep.c:294:9
  $d0 = COPY %144:fpr64, debug-location !455; ep.c:294:9
  $d1 = COPY %149:fpr64, debug-location !455; ep.c:294:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0, debug-location !455; ep.c:294:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !455; ep.c:294:9
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !456; ep.c:295:14
  $w0 = MOVi32imm 1, debug-location !456; ep.c:295:14
  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def $d0, debug-location !456; ep.c:295:14
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !456; ep.c:295:14
  %153:fpr64 = COPY killed $d0, debug-location !456; ep.c:295:14
  STRDui %153:fpr64, %stack.12.tt, 0, debug-location !457 :: (store 8 into %ir.tt); ep.c:295:12
  %154:fpr64 = FMULDrr %153:fpr64, %146:fpr64, debug-location !460; ep.c:296:60
  %155:fpr64 = LDRDui %stack.10.tm, 0, debug-location !461 :: (dereferenceable load 8 from %ir.tm); ep.c:296:70
  %156:fpr64 = FDIVDrr %154:fpr64, %155:fpr64, debug-location !462; ep.c:296:68
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !463; ep.c:296:9
  %157:gpr64 = MOVaddr target-flags(aarch64-page) @.str.24, target-flags(aarch64-pageoff, aarch64-nc) @.str.24, debug-location !463; ep.c:296:9
  $x0 = COPY %157:gpr64, debug-location !463; ep.c:296:9
  $d0 = COPY %153:fpr64, debug-location !463; ep.c:296:9
  $d1 = COPY %156:fpr64, debug-location !463; ep.c:296:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0, debug-location !463; ep.c:296:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !463; ep.c:296:9
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !464; ep.c:297:14
  $w0 = MOVi32imm 2, debug-location !464; ep.c:297:14
  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def $d0, debug-location !464; ep.c:297:14
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !464; ep.c:297:14
  %160:fpr64 = COPY killed $d0, debug-location !464; ep.c:297:14
  STRDui %160:fpr64, %stack.12.tt, 0, debug-location !465 :: (store 8 into %ir.tt); ep.c:297:12
  %161:fpr64 = FMULDrr %160:fpr64, %146:fpr64, debug-location !468; ep.c:298:60
  %162:fpr64 = LDRDui %stack.10.tm, 0, debug-location !469 :: (dereferenceable load 8 from %ir.tm); ep.c:298:70
  %163:fpr64 = FDIVDrr %161:fpr64, %162:fpr64, debug-location !470; ep.c:298:68
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !471; ep.c:298:9
  %164:gpr64 = MOVaddr target-flags(aarch64-page) @.str.25, target-flags(aarch64-pageoff, aarch64-nc) @.str.25, debug-location !471; ep.c:298:9
  $x0 = COPY %164:gpr64, debug-location !471; ep.c:298:9
  $d0 = COPY %160:fpr64, debug-location !471; ep.c:298:9
  $d1 = COPY %163:fpr64, debug-location !471; ep.c:298:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0, debug-location !471; ep.c:298:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !471; ep.c:298:9

bb.52.if.end180:
; predecessors: %bb.48, %bb.51

  $w0 = COPY $wzr, debug-location !473; ep.c:301:5
  RET_ReallyLR implicit killed $w0, debug-location !473; ep.c:301:5

# End machine code for function main.

********** MI Scheduling **********
main:%bb.0 entry
  From: %15:gpr64 = COPY killed $x0, debug-location !106; ep.c:87:15
    To: CBNZX %15:gpr64, %bb.2, debug-location !110; ep.c:87:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %15:gpr64 = COPY killed $x0, debug-location !106; ep.c:87:15
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Data Latency=0 Reg=%15
    SU(1): Data Latency=0 Reg=%15
  Single Issue       : false;
SU(1):   STRXui %15:gpr64, %stack.31.fp, 0, debug-location !108 :: (store 8 into %ir.fp); ep.c:87:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%15
  Single Issue       : false;
ExitSU:   CBNZX %15:gpr64, %bb.2, debug-location !110; ep.c:87:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%15
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRXui %15:gpr64, %stack.31.fp, 0, debug-location !108 :: (store 8 into %ir.fp); ep.c:87:13
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %15:gpr64 = COPY killed $x0, debug-location !106; ep.c:87:15
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %15:gpr64 = COPY killed $x0, debug-location !106; ep.c:87:15
SU(1):   STRXui %15:gpr64, %stack.31.fp, 0, debug-location !108 :: (store 8 into %ir.fp); ep.c:87:13

********** MI Scheduling **********
main:%bb.0 entry
  From: %13:gpr64 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str, debug-location !106; ep.c:87:15
    To: BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $x0, debug-location !106; ep.c:87:15
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %13:gpr64 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str, debug-location !106; ep.c:87:15
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%13
  Single Issue       : false;
SU(1):   %14:gpr64 = MOVaddr target-flags(aarch64-page) @.str.1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1, debug-location !106; ep.c:87:15
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%14
  Single Issue       : false;
SU(2):   $x0 = COPY %13:gpr64, debug-location !106; ep.c:87:15
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%13
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $x1 = COPY %14:gpr64, debug-location !106; ep.c:87:15
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%14
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $x0, debug-location !106; ep.c:87:15
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $x1 = COPY %14:gpr64, debug-location !106; ep.c:87:15
  Ready @0c
  BotQ.A TopLatency SU(3) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $x0 = COPY %13:gpr64, debug-location !106; ep.c:87:15
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %14:gpr64 = MOVaddr target-flags(aarch64-page) @.str.1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1, debug-location !106; ep.c:87:15
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %13:gpr64 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str, debug-location !106; ep.c:87:15
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %13:gpr64 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str, debug-location !106; ep.c:87:15
SU(1):   %14:gpr64 = MOVaddr target-flags(aarch64-page) @.str.1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1, debug-location !106; ep.c:87:15
SU(2):   $x0 = COPY %13:gpr64, debug-location !106; ep.c:87:15
SU(3):   $x1 = COPY %14:gpr64, debug-location !106; ep.c:87:15

********** MI Scheduling **********
main:%bb.0 entry
  From: STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !106; ep.c:87:15
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %10:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.dum, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.dum, debug-location !93; ep.c:82:12
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=1 Reg=%10
    SU(2): Data Latency=1 Reg=%10
  Single Issue       : false;
SU(2):   %11:fpr128 = LDRQui %10:gpr64common, 0, debug-location !93 :: (dereferenceable load 16 from `i8* bitcast ([3 x double]* @__const.main.dum to i8*)`); ep.c:82:12
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%10
  Successors:
    SU(3): Data Latency=4 Reg=%11
  Single Issue       : false;
SU(3):   STRQui %11:fpr128, %stack.29.dum, 0, debug-location !93 :: (store 16 into %ir.0); ep.c:82:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%11
  Single Issue       : false;
SU(4):   %12:gpr64 = LDRXui %10:gpr64common, 2, debug-location !93 :: (dereferenceable load 8 from `i8* bitcast ([3 x double]* @__const.main.dum to i8*)` + 16, align 16); ep.c:82:12
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%10
  Successors:
    SU(5): Data Latency=4 Reg=%12
  Single Issue       : false;
SU(5):   STRXui %12:gpr64, %stack.29.dum, 2, debug-location !93 :: (store 8 into %ir.0 + 16, align 16); ep.c:82:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=4 Reg=%12
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !106; ep.c:87:15
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) STRXui %12:gpr64, %stack.29.dum, 2, debug-location !93 :: (store 8 into %ir.0 + 16, align 16); ep.c:82:12
  Ready @0c
  BotQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 0 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(3) 5c
BotQ.A RemLatency SU(4) 1c
  BotQ.A RemainingLatency 5 + 1c > CritPath 5
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(3) STRQui %11:fpr128, %stack.29.dum, 0, debug-location !93 :: (store 16 into %ir.0); ep.c:82:12
  Ready @1c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 4 BotQ.A
Queue BotQ.P: 2 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %12:gpr64 = LDRXui %10:gpr64common, 2, debug-location !93 :: (dereferenceable load 8 from `i8* bitcast ([3 x double]* @__const.main.dum to i8*)` + 16, align 16); ep.c:82:12
  Ready @4c
  BotQ.A BotLatency SU(4) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %11:fpr128 = LDRQui %10:gpr64common, 0, debug-location !93 :: (dereferenceable load 16 from `i8* bitcast ([3 x double]* @__const.main.dum to i8*)`); ep.c:82:12
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %10:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.dum, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.dum, debug-location !93; ep.c:82:12
  Ready @6c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(1):   %10:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.dum, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.dum, debug-location !93; ep.c:82:12
SU(2):   %11:fpr128 = LDRQui %10:gpr64common, 0, debug-location !93 :: (dereferenceable load 16 from `i8* bitcast ([3 x double]* @__const.main.dum to i8*)`); ep.c:82:12
SU(4):   %12:gpr64 = LDRXui %10:gpr64common, 2, debug-location !93 :: (dereferenceable load 8 from `i8* bitcast ([3 x double]* @__const.main.dum to i8*)` + 16, align 16); ep.c:82:12
SU(0):   STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
SU(3):   STRQui %11:fpr128, %stack.29.dum, 0, debug-location !93 :: (store 16 into %ir.0); ep.c:82:12
SU(5):   STRXui %12:gpr64, %stack.29.dum, 2, debug-location !93 :: (store 8 into %ir.0 + 16, align 16); ep.c:82:12

********** MI Scheduling **********
main:%bb.2 if.else
  From: %16:gpr32 = MOVi32imm 1
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !117; ep.c:92:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %16:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%16
  Single Issue       : false;
SU(1):   STRWui %16:gpr32, %stack.28.timers_enabled, 0, debug-location !114 :: (store 4 into %ir.timers_enabled); ep.c:91:24
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%16
  Single Issue       : false;
SU(2):   %17:gpr64 = LDRXui %stack.31.fp, 0, debug-location !116 :: (dereferenceable load 8 from %ir.fp); ep.c:92:16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !117; ep.c:92:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %16:gpr32, %stack.28.timers_enabled, 0, debug-location !114 :: (store 4 into %ir.timers_enabled); ep.c:91:24
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %16:gpr32 = MOVi32imm 1
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %17:gpr64 = LDRXui %stack.31.fp, 0, debug-location !116 :: (dereferenceable load 8 from %ir.fp); ep.c:92:16
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(2):   %17:gpr64 = LDRXui %stack.31.fp, 0, debug-location !116 :: (dereferenceable load 8 from %ir.fp); ep.c:92:16
SU(0):   %16:gpr32 = MOVi32imm 1
SU(1):   STRWui %16:gpr32, %stack.28.timers_enabled, 0, debug-location !114 :: (store 4 into %ir.timers_enabled); ep.c:91:24

********** MI Scheduling **********
main:%bb.3 if.end
  From: %26:gpr32 = MOVi32imm 14
    To: Bcc 1, %bb.5, implicit killed $nzcv, debug-location !126; ep.c:104:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %26:gpr32 = MOVi32imm 14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%26
  Single Issue       : false;
SU(1):   STRWui %26:gpr32, %stack.26.j, 0, debug-location !121 :: (store 4 into %ir.j); ep.c:103:7
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%26
  Single Issue       : false;
SU(2):   %27:gpr32common = LDRSBWui %stack.30.size, 14, debug-location !124 :: (load 1 from %ir.arrayidx, align 2); ep.c:104:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=%27
  Single Issue       : false;
SU(3):   dead $wzr = SUBSWri %27:gpr32common, 46, 0, implicit-def $nzcv, debug-location !126; ep.c:104:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=%27
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.5, implicit killed $nzcv, debug-location !126; ep.c:104:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %26:gpr32, %stack.26.j, 0, debug-location !121 :: (store 4 into %ir.j); ep.c:103:7
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
BotQ.A RemLatency SU(3) 4c
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) dead $wzr = SUBSWri %27:gpr32common, 46, 0, implicit-def $nzcv, debug-location !126; ep.c:104:9
  Ready @1c
  BotQ.A TopLatency SU(3) 4c
  BotQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %26:gpr32 = MOVi32imm 14
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %27:gpr32common = LDRSBWui %stack.30.size, 14, debug-location !124 :: (load 1 from %ir.arrayidx, align 2); ep.c:104:9
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(2):   %27:gpr32common = LDRSBWui %stack.30.size, 14, debug-location !124 :: (load 1 from %ir.arrayidx, align 2); ep.c:104:9
SU(0):   %26:gpr32 = MOVi32imm 14
SU(3):   dead $wzr = SUBSWri %27:gpr32common, 46, 0, implicit-def $nzcv, debug-location !126; ep.c:104:9
SU(1):   STRWui %26:gpr32, %stack.26.j, 0, debug-location !121 :: (store 4 into %ir.j); ep.c:103:7

********** MI Scheduling **********
main:%bb.3 if.end
  From: %23:gpr64 = MOVaddr target-flags(aarch64-page) @.str.2, target-flags(aarch64-pageoff, aarch64-nc) @.str.2, debug-location !120; ep.c:102:5
    To: BL @sprintf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $d0, implicit-def $sp, implicit-def dead $w0, debug-location !120; ep.c:102:5
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %23:gpr64 = MOVaddr target-flags(aarch64-page) @.str.2, target-flags(aarch64-pageoff, aarch64-nc) @.str.2, debug-location !120; ep.c:102:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%23
  Single Issue       : false;
SU(1):   %24:gpr64common = ADDXri %stack.30.size, 0, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   $x0 = ADDXri %stack.30.size, 0, 0, debug-location !120; ep.c:102:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(3):   $x1 = COPY %23:gpr64, debug-location !120; ep.c:102:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%23
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $d0 = COPY %22:fpr64, debug-location !120; ep.c:102:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @sprintf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $d0, implicit-def $sp, implicit-def dead $w0, debug-location !120; ep.c:102:5
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=0 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 4 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(4) PHYS-REG                           
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(4) $d0 = COPY %22:fpr64, debug-location !120; ep.c:102:5
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) PHYS-REG                           
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(3) $x1 = COPY %23:gpr64, debug-location !120; ep.c:102:5
  Ready @0c
  BotQ.A TopLatency SU(3) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %24:gpr64common = ADDXri %stack.30.size, 0, 0
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) $x0 = ADDXri %stack.30.size, 0, 0, debug-location !120; ep.c:102:5
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %23:gpr64 = MOVaddr target-flags(aarch64-page) @.str.2, target-flags(aarch64-pageoff, aarch64-nc) @.str.2, debug-location !120; ep.c:102:5
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %23:gpr64 = MOVaddr target-flags(aarch64-page) @.str.2, target-flags(aarch64-pageoff, aarch64-nc) @.str.2, debug-location !120; ep.c:102:5
SU(2):   $x0 = ADDXri %stack.30.size, 0, 0, debug-location !120; ep.c:102:5
SU(1):   %24:gpr64common = ADDXri %stack.30.size, 0, 0
SU(3):   $x1 = COPY %23:gpr64, debug-location !120; ep.c:102:5
SU(4):   $d0 = COPY %22:fpr64, debug-location !120; ep.c:102:5

********** MI Scheduling **********
main:%bb.3 if.end
  From: %20:fpr64 = FMOVDi 0
    To: BL @pow, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def $d0, debug-location !119; ep.c:102:30
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %20:fpr64 = FMOVDi 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%20
  Single Issue       : false;
SU(1):   %21:fpr64 = FMOVDi 63
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%21
  Single Issue       : false;
SU(2):   $d0 = COPY %20:fpr64, debug-location !119; ep.c:102:30
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%20
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $d1 = COPY %21:fpr64, debug-location !119; ep.c:102:30
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%21
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @pow, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def $d0, debug-location !119; ep.c:102:30
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $d1 = COPY %21:fpr64, debug-location !119; ep.c:102:30
  Ready @0c
  BotQ.A TopLatency SU(3) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $d0 = COPY %20:fpr64, debug-location !119; ep.c:102:30
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %21:fpr64 = FMOVDi 63
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %20:fpr64 = FMOVDi 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %20:fpr64 = FMOVDi 0
SU(1):   %21:fpr64 = FMOVDi 63
SU(2):   $d0 = COPY %20:fpr64, debug-location !119; ep.c:102:30
SU(3):   $d1 = COPY %21:fpr64, debug-location !119; ep.c:102:30

********** MI Scheduling **********
main:%bb.4 if.then6
  From: %29:gpr32common = LDRWui %stack.26.j, 0, debug-location !127 :: (dereferenceable load 4 from %ir.j); ep.c:105:10
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %29:gpr32common = LDRWui %stack.26.j, 0, debug-location !127 :: (dereferenceable load 4 from %ir.j); ep.c:105:10
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%29
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %30:gpr32common = nsw SUBWri %29:gpr32common, 1, 0, debug-location !127; ep.c:105:10
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%29
  Successors:
    SU(2): Data Latency=1 Reg=%30
  Single Issue       : false;
SU(2):   STRWui %30:gpr32common, %stack.26.j, 0, debug-location !127 :: (store 4 into %ir.j); ep.c:105:10
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%30
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %30:gpr32common, %stack.26.j, 0, debug-location !127 :: (store 4 into %ir.j); ep.c:105:10
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %30:gpr32common = nsw SUBWri %29:gpr32common, 1, 0, debug-location !127; ep.c:105:10
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %29:gpr32common = LDRWui %stack.26.j, 0, debug-location !127 :: (dereferenceable load 4 from %ir.j); ep.c:105:10
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %29:gpr32common = LDRWui %stack.26.j, 0, debug-location !127 :: (dereferenceable load 4 from %ir.j); ep.c:105:10
SU(1):   %30:gpr32common = nsw SUBWri %29:gpr32common, 1, 0, debug-location !127; ep.c:105:10
SU(2):   STRWui %30:gpr32common, %stack.26.j, 0, debug-location !127 :: (store 4 into %ir.j); ep.c:105:10

********** MI Scheduling **********
main:%bb.5 if.end7
  From: %45:fpr64 = COPY killed $d0, debug-location !144; ep.c:128:14
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %45:fpr64 = COPY killed $d0, debug-location !144; ep.c:128:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%45
  Single Issue       : false;
SU(1):   STRDui %45:fpr64, %stack.29.dum, 0, debug-location !146 :: (store 8 into %ir.arrayidx195, align 16); ep.c:128:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%45
  Single Issue       : false;
SU(2):   STRWui $wzr, %stack.19.i, 0, debug-location !147 :: (store 4 into %ir.i); ep.c:129:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %276:gpr64common = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   %277:gpr64 = MOVi64imm -3135276447761457362
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %45:fpr64 = COPY killed $d0, debug-location !144; ep.c:128:14
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 4 2 3 1 
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(4) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %277:gpr64 = MOVi64imm -3135276447761457362
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 2 
Queue TopQ.P: 
Queue TopQ.A: 1 2 3 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %276:gpr64common = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 1 2 
  BotQ.A RemainingLatency 0 + 2c > CritPath 0
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) STRWui $wzr, %stack.19.i, 0, debug-location !147 :: (store 4 into %ir.i); ep.c:129:12
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %45:fpr64, %stack.29.dum, 0, debug-location !146 :: (store 8 into %ir.arrayidx195, align 16); ep.c:128:12
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %45:fpr64 = COPY killed $d0, debug-location !144; ep.c:128:14
SU(1):   STRDui %45:fpr64, %stack.29.dum, 0, debug-location !146 :: (store 8 into %ir.arrayidx195, align 16); ep.c:128:12
SU(2):   STRWui $wzr, %stack.19.i, 0, debug-location !147 :: (store 4 into %ir.i); ep.c:129:12
SU(3):   %276:gpr64common = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x
SU(4):   %277:gpr64 = MOVi64imm -3135276447761457362

********** MI Scheduling **********
main:%bb.5 if.end7
  From: $x0 = COPY %41:gpr64sp, debug-location !144; ep.c:128:14
    To: BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $d0, implicit-def $sp, implicit-def $d0, debug-location !144; ep.c:128:14
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %41:gpr64sp, debug-location !144; ep.c:128:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $d0 = COPY %44:fpr64, debug-location !144; ep.c:128:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $d0, implicit-def $sp, implicit-def $d0, debug-location !144; ep.c:128:14
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) $d0 = COPY %44:fpr64, debug-location !144; ep.c:128:14
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %41:gpr64sp, debug-location !144; ep.c:128:14
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   $x0 = COPY %41:gpr64sp, debug-location !144; ep.c:128:14
SU(1):   $d0 = COPY %44:fpr64, debug-location !144; ep.c:128:14

********** MI Scheduling **********
main:%bb.5 if.end7
  From: $w0 = COPY $wzr, debug-location !141; ep.c:127:5
    To: BL @vranlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit killed $x1, implicit killed $d0, implicit killed $x2, implicit-def $sp, debug-location !141; ep.c:127:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $w0 = COPY $wzr, debug-location !141; ep.c:127:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $x1 = ADDXri %stack.29.dum, 0, 0, debug-location !141; ep.c:127:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %42:fpr64, debug-location !141; ep.c:127:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $x2 = COPY %43:gpr64sp, debug-location !141; ep.c:127:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @vranlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit killed $x1, implicit killed $d0, implicit killed $x2, implicit-def $sp, debug-location !141; ep.c:127:5
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 3 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $x2 = COPY %43:gpr64sp, debug-location !141; ep.c:127:5
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 0 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) $d0 = COPY %42:fpr64, debug-location !141; ep.c:127:5
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $w0 = COPY $wzr, debug-location !141; ep.c:127:5
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x1 = ADDXri %stack.29.dum, 0, 0, debug-location !141; ep.c:127:5
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(1):   $x1 = ADDXri %stack.29.dum, 0, 0, debug-location !141; ep.c:127:5
SU(0):   $w0 = COPY $wzr, debug-location !141; ep.c:127:5
SU(2):   $d0 = COPY %42:fpr64, debug-location !141; ep.c:127:5
SU(3):   $x2 = COPY %43:gpr64sp, debug-location !141; ep.c:127:5

********** MI Scheduling **********
main:%bb.5 if.end7
  From: STRWui $wzr, %stack.27.verified, 0, debug-location !136 :: (store 4 into %ir.verified); ep.c:110:14
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !141; ep.c:127:5
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui $wzr, %stack.27.verified, 0, debug-location !136 :: (store 4 into %ir.verified); ep.c:110:14
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %39:gpr32 = MOVi32imm 16384
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%39
  Single Issue       : false;
SU(2):   STRWui %39:gpr32, %stack.18.np, 0, debug-location !137 :: (store 4 into %ir.np); ep.c:118:8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%39
  Single Issue       : false;
SU(3):   %40:gpr64common = ADDXri %stack.29.dum, 0, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(6): Data Latency=1 Reg=%40
    SU(4): Data Latency=1 Reg=%40
  Single Issue       : false;
SU(4):   %41:gpr64sp = ORRXri %40:gpr64common, 8000, debug-location !139; ep.c:127:24
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%40
  Single Issue       : false;
SU(5):   %42:fpr64 = LDRDui %stack.29.dum, 1, debug-location !139 :: (dereferenceable load 8 from %ir.arrayidx14); ep.c:127:24
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(6):   %43:gpr64sp = nuw ADDXri %40:gpr64common, 16, 0, debug-location !140; ep.c:127:33
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%40
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !141; ep.c:127:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 6 4 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %43:gpr64sp = nuw ADDXri %40:gpr64common, 16, 0, debug-location !140; ep.c:127:33
  Ready @0c
  BotQ.A TopLatency SU(6) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 0 4 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 
BotQ.A RemLatency SU(4) 1c
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %41:gpr64sp = ORRXri %40:gpr64common, 8000, debug-location !139; ep.c:127:24
  Ready @1c
  BotQ.A TopLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 0 2 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 
BotQ.A RemLatency SU(2) 1c
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %40:gpr64common = ADDXri %stack.29.dum, 0, 0
  Ready @2c
  BotQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 
BotQ.A RemLatency SU(2) 1c
  BotQ.A RemainingLatency 1 + 3c > CritPath 3
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) STRWui %39:gpr32, %stack.18.np, 0, debug-location !137 :: (store 4 into %ir.np); ep.c:118:8
  Ready @3c
  BotQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 5 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 
  BotQ.A RemainingLatency 0 + 4c > CritPath 3
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %42:fpr64 = LDRDui %stack.29.dum, 1, debug-location !139 :: (dereferenceable load 8 from %ir.arrayidx14); ep.c:127:24
  Ready @4c
  BotQ.A BotLatency SU(5) 3c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 5c > CritPath 3
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %39:gpr32 = MOVi32imm 16384
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.27.verified, 0, debug-location !136 :: (store 4 into %ir.verified); ep.c:110:14
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   STRWui $wzr, %stack.27.verified, 0, debug-location !136 :: (store 4 into %ir.verified); ep.c:110:14
SU(1):   %39:gpr32 = MOVi32imm 16384
SU(5):   %42:fpr64 = LDRDui %stack.29.dum, 1, debug-location !139 :: (dereferenceable load 8 from %ir.arrayidx14); ep.c:127:24
SU(2):   STRWui %39:gpr32, %stack.18.np, 0, debug-location !137 :: (store 4 into %ir.np); ep.c:118:8
SU(3):   %40:gpr64common = ADDXri %stack.29.dum, 0, 0
SU(4):   %41:gpr64sp = ORRXri %40:gpr64common, 8000, debug-location !139; ep.c:127:24
SU(6):   %43:gpr64sp = nuw ADDXri %40:gpr64common, 16, 0, debug-location !140; ep.c:127:33

********** MI Scheduling **********
main:%bb.5 if.end7
  From: %37:gpr64 = MOVaddr target-flags(aarch64-page) @.str.4, target-flags(aarch64-pageoff, aarch64-nc) @.str.4, debug-location !135; ep.c:108:5
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit-def $sp, implicit-def dead $w0, debug-location !135; ep.c:108:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %37:gpr64 = MOVaddr target-flags(aarch64-page) @.str.4, target-flags(aarch64-pageoff, aarch64-nc) @.str.4, debug-location !135; ep.c:108:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%37
  Single Issue       : false;
SU(1):   $x0 = COPY %37:gpr64, debug-location !135; ep.c:108:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%37
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $x1 = ADDXri %stack.30.size, 0, 0, debug-location !135; ep.c:108:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit-def $sp, implicit-def dead $w0, debug-location !135; ep.c:108:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %37:gpr64, debug-location !135; ep.c:108:5
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $x1 = ADDXri %stack.30.size, 0, 0, debug-location !135; ep.c:108:5
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %37:gpr64 = MOVaddr target-flags(aarch64-page) @.str.4, target-flags(aarch64-pageoff, aarch64-nc) @.str.4, debug-location !135; ep.c:108:5
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %37:gpr64 = MOVaddr target-flags(aarch64-page) @.str.4, target-flags(aarch64-pageoff, aarch64-nc) @.str.4, debug-location !135; ep.c:108:5
SU(2):   $x1 = ADDXri %stack.30.size, 0, 0, debug-location !135; ep.c:108:5
SU(1):   $x0 = COPY %37:gpr64, debug-location !135; ep.c:108:5

********** MI Scheduling **********
main:%bb.5 if.end7
  From: %35:gpr64 = MOVaddr target-flags(aarch64-page) @.str.3, target-flags(aarch64-pageoff, aarch64-nc) @.str.3, debug-location !133; ep.c:107:5
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !133; ep.c:107:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %35:gpr64 = MOVaddr target-flags(aarch64-page) @.str.3, target-flags(aarch64-pageoff, aarch64-nc) @.str.3, debug-location !133; ep.c:107:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%35
  Single Issue       : false;
SU(1):   $x0 = COPY %35:gpr64, debug-location !133; ep.c:107:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%35
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !133; ep.c:107:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %35:gpr64, debug-location !133; ep.c:107:5
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %35:gpr64 = MOVaddr target-flags(aarch64-page) @.str.3, target-flags(aarch64-pageoff, aarch64-nc) @.str.3, debug-location !133; ep.c:107:5
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %35:gpr64 = MOVaddr target-flags(aarch64-page) @.str.3, target-flags(aarch64-pageoff, aarch64-nc) @.str.3, debug-location !133; ep.c:107:5
SU(1):   $x0 = COPY %35:gpr64, debug-location !133; ep.c:107:5

********** MI Scheduling **********
main:%bb.5 if.end7
  From: %31:gpr64 = LDRSWui %stack.26.j, 0, debug-location !129 :: (dereferenceable load 4 from %ir.j); ep.c:106:10
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !133; ep.c:107:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %31:gpr64 = LDRSWui %stack.26.j, 0, debug-location !129 :: (dereferenceable load 4 from %ir.j); ep.c:106:10
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%31
  Single Issue       : false;
SU(1):   %33:gpr64common = ADDXrr %31:gpr64, %24:gpr64common, debug-location !130; ep.c:106:12
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%31
  Successors:
    SU(2): Data Latency=1 Reg=%33
  Single Issue       : false;
SU(2):   STRBBui $wzr, %33:gpr64common, 1, debug-location !132 :: (store 1 into %ir.arrayidx9); ep.c:106:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%33
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !133; ep.c:107:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRBBui $wzr, %33:gpr64common, 1, debug-location !132 :: (store 1 into %ir.arrayidx9); ep.c:106:17
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %33:gpr64common = ADDXrr %31:gpr64, %24:gpr64common, debug-location !130; ep.c:106:12
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %31:gpr64 = LDRSWui %stack.26.j, 0, debug-location !129 :: (dereferenceable load 4 from %ir.j); ep.c:106:10
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %31:gpr64 = LDRSWui %stack.26.j, 0, debug-location !129 :: (dereferenceable load 4 from %ir.j); ep.c:106:10
SU(1):   %33:gpr64common = ADDXrr %31:gpr64, %24:gpr64common, debug-location !130; ep.c:106:12
SU(2):   STRBBui $wzr, %33:gpr64common, 1, debug-location !132 :: (store 1 into %ir.arrayidx9); ep.c:106:17

********** MI Scheduling **********
main:%bb.6 for.cond
  From: %46:gpr32common = LDRWui %stack.19.i, 0, debug-location !150 :: (dereferenceable load 4 from %ir.i); ep.c:129:17
    To: Bcc 10, %bb.8, implicit killed $nzcv, debug-location !153; ep.c:129:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %46:gpr32common = LDRWui %stack.19.i, 0, debug-location !150 :: (dereferenceable load 4 from %ir.i); ep.c:129:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%46
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %46:gpr32common, 32, 12, implicit-def $nzcv, debug-location !153; ep.c:129:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%46
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.8, implicit killed $nzcv, debug-location !153; ep.c:129:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %46:gpr32common, 32, 12, implicit-def $nzcv, debug-location !153; ep.c:129:5
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %46:gpr32common = LDRWui %stack.19.i, 0, debug-location !150 :: (dereferenceable load 4 from %ir.i); ep.c:129:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %46:gpr32common = LDRWui %stack.19.i, 0, debug-location !150 :: (dereferenceable load 4 from %ir.i); ep.c:129:17
SU(1):   dead $wzr = SUBSWri %46:gpr32common, 32, 12, implicit-def $nzcv, debug-location !153; ep.c:129:5

********** MI Scheduling **********
main:%bb.7 for.body
  From: %274:gpr64common = LDRSWui %stack.19.i, 0, debug-location !154 :: (dereferenceable load 4 from %ir.i); ep.c:130:11
    To: B %bb.6, debug-location !159; ep.c:129:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %274:gpr64common = LDRSWui %stack.19.i, 0, debug-location !154 :: (dereferenceable load 4 from %ir.i); ep.c:130:11
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%274
    SU(1): Data Latency=4 Reg=%274
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   STRXroX %277:gpr64, %276:gpr64common, %274:gpr64common, 0, 1, debug-location !157 :: (store 8 into %ir.arrayidx23); ep.c:130:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%274
  Single Issue       : false;
SU(2):   %278:gpr32common = nsw ADDWri %274.sub_32:gpr64common, 1, 0, debug-location !158; ep.c:129:30
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%274
  Successors:
    SU(3): Data Latency=1 Reg=%278
  Single Issue       : false;
SU(3):   STRWui %278:gpr32common, %stack.19.i, 0, debug-location !158 :: (store 4 into %ir.i); ep.c:129:30
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%278
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.6, debug-location !159; ep.c:129:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) %274:gpr64common = LDRSWui %stack.19.i, 0, debug-location !154 :: (dereferenceable load 4 from %ir.i); ep.c:130:11
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 1 
TopQ.A RemLatency SU(2) 1c
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) STRWui %278:gpr32common, %stack.19.i, 0, debug-location !158 :: (store 4 into %ir.i); ep.c:129:30
  Ready @0c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
BotQ.A RemLatency SU(1) 4c
TopQ.A RemLatency SU(2) 1c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %278:gpr32common = nsw ADDWri %274.sub_32:gpr64common, 1, 0, debug-location !158; ep.c:129:30
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRXroX %277:gpr64, %276:gpr64common, %274:gpr64common, 0, 1, debug-location !157 :: (store 8 into %ir.arrayidx23); ep.c:130:14
  Ready @2c
  BotQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %274:gpr64common = LDRSWui %stack.19.i, 0, debug-location !154 :: (dereferenceable load 4 from %ir.i); ep.c:130:11
SU(1):   STRXroX %277:gpr64, %276:gpr64common, %274:gpr64common, 0, 1, debug-location !157 :: (store 8 into %ir.arrayidx23); ep.c:130:14
SU(2):   %278:gpr32common = nsw ADDWri %274.sub_32:gpr64common, 1, 0, debug-location !158; ep.c:129:30
SU(3):   STRWui %278:gpr32common, %stack.19.i, 0, debug-location !158 :: (store 4 into %ir.i); ep.c:129:30

********** MI Scheduling **********
main:%bb.8 for.end
  From: %0:fpr64 = FMOVDi 112
    To: Bcc 7, %bb.10, implicit killed $nzcv, debug-location !164; ep.c:132:12
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %0:fpr64 = FMOVDi 112
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(1): Data Latency=1 Reg=%0
  Single Issue       : false;
SU(1):   %279:fpr64 = FSQRTDr %0:fpr64, debug-location !163; ep.c:132:16
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(0): Data Latency=1 Reg=%0
  Successors:
    SU(2): Data Latency=1 Reg=%279
  Single Issue       : false;
SU(2):   FCMPDrr %279:fpr64, %279:fpr64, implicit-def $nzcv, debug-location !164; ep.c:132:12
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=%279
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 7, %bb.10, implicit killed $nzcv, debug-location !164; ep.c:132:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) FCMPDrr %279:fpr64, %279:fpr64, implicit-def $nzcv, debug-location !164; ep.c:132:12
  Ready @1c
  BotQ.A TopLatency SU(2) 2c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %279:fpr64 = FSQRTDr %0:fpr64, debug-location !163; ep.c:132:16
  Ready @2c
  BotQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %0:fpr64 = FMOVDi 112
  Ready @3c
  BotQ.A BotLatency SU(0) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   %0:fpr64 = FMOVDi 112
SU(1):   %279:fpr64 = FSQRTDr %0:fpr64, debug-location !163; ep.c:132:16
SU(2):   FCMPDrr %279:fpr64, %279:fpr64, implicit-def $nzcv, debug-location !164; ep.c:132:12

********** MI Scheduling **********
main:%bb.10 for.end.split
  From: STRXui %53:gpr64, %stack.2.t1, 0, debug-location !172 :: (store 8 into %ir.t1); ep.c:148:8
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRXui %53:gpr64, %stack.2.t1, 0, debug-location !172 :: (store 8 into %ir.t1); ep.c:148:8
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   STRWui $wzr, %stack.19.i, 0, debug-location !173 :: (store 4 into %ir.i); ep.c:150:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) STRWui $wzr, %stack.19.i, 0, debug-location !173 :: (store 4 into %ir.i); ep.c:150:12
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRXui %53:gpr64, %stack.2.t1, 0, debug-location !172 :: (store 8 into %ir.t1); ep.c:148:8
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   STRXui %53:gpr64, %stack.2.t1, 0, debug-location !172 :: (store 8 into %ir.t1); ep.c:148:8
SU(1):   STRWui $wzr, %stack.19.i, 0, debug-location !173 :: (store 4 into %ir.i); ep.c:150:12

********** MI Scheduling **********
main:%bb.10 for.end.split
  From: %54:gpr64 = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x, debug-location !171; ep.c:142:5
    To: BL @vranlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit killed $x1, implicit killed $d0, implicit killed $x2, implicit-def $sp, debug-location !171; ep.c:142:5
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %54:gpr64 = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x, debug-location !171; ep.c:142:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(6): Data Latency=1 Reg=%54
  Single Issue       : false;
SU(1):   %55:gpr64common = ADRP target-flags(aarch64-page) %const.0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=1 Reg=%55
  Single Issue       : false;
SU(2):   %56:fpr64 = LDRDui %55:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%55
  Successors:
    SU(5): Data Latency=4 Reg=%56
  Single Issue       : false;
SU(3):   $w0 = COPY $wzr, debug-location !171; ep.c:142:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $x1 = ADDXri %stack.2.t1, 0, 0, debug-location !171; ep.c:142:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(5):   $d0 = COPY %56:fpr64, debug-location !171; ep.c:142:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%56
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(6):   $x2 = COPY %54:gpr64, debug-location !171; ep.c:142:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%54
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @vranlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit killed $x1, implicit killed $d0, implicit killed $x2, implicit-def $sp, debug-location !171; ep.c:142:5
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=0 Artificial
    SU(5): Ord  Latency=0 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 6 5 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(3) PHYS-REG                           
Pick Bot ORDER     
Scheduling SU(6) $x2 = COPY %54:gpr64, debug-location !171; ep.c:142:5
  Ready @0c
  BotQ.A TopLatency SU(6) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 0 
Queue BotQ.A: 3 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(3) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) $d0 = COPY %56:fpr64, debug-location !171; ep.c:142:5
  Ready @0c
  BotQ.A TopLatency SU(5) 5c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 0 2 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) $w0 = COPY $wzr, debug-location !171; ep.c:142:5
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 2 
Queue BotQ.A: 4 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 
BotQ.A RemLatency SU(2) 1c
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) $x1 = ADDXri %stack.2.t1, 0, 0, debug-location !171; ep.c:142:5
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %54:gpr64 = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x, debug-location !171; ep.c:142:5
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %56:fpr64 = LDRDui %55:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %55:gpr64common = ADRP target-flags(aarch64-page) %const.0
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(1):   %55:gpr64common = ADRP target-flags(aarch64-page) %const.0
SU(2):   %56:fpr64 = LDRDui %55:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
SU(0):   %54:gpr64 = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x, debug-location !171; ep.c:142:5
SU(4):   $x1 = ADDXri %stack.2.t1, 0, 0, debug-location !171; ep.c:142:5
SU(3):   $w0 = COPY $wzr, debug-location !171; ep.c:142:5
SU(5):   $d0 = COPY %56:fpr64, debug-location !171; ep.c:142:5
SU(6):   $x2 = COPY %54:gpr64, debug-location !171; ep.c:142:5

********** MI Scheduling **********
main:%bb.10 for.end.split
  From: %53:gpr64 = MOVi64imm 4742906807993761792
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !171; ep.c:142:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %53:gpr64 = MOVi64imm 4742906807993761792
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%53
  Single Issue       : false;
SU(1):   STRXui %53:gpr64, %stack.2.t1, 0, debug-location !170 :: (store 8 into %ir.t1); ep.c:141:8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%53
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !171; ep.c:142:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRXui %53:gpr64, %stack.2.t1, 0, debug-location !170 :: (store 8 into %ir.t1); ep.c:141:8
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %53:gpr64 = MOVi64imm 4742906807993761792
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   %53:gpr64 = MOVi64imm 4742906807993761792
SU(1):   STRXui %53:gpr64, %stack.2.t1, 0, debug-location !170 :: (store 8 into %ir.t1); ep.c:141:8

********** MI Scheduling **********
main:%bb.10 for.end.split
  From: %49:fpr64 = COPY killed $d0, debug-location !164; ep.c:132:12
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !166; ep.c:134:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %49:fpr64 = COPY killed $d0, debug-location !164; ep.c:132:12
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%49
  Single Issue       : false;
SU(1):   STRDui %49:fpr64, %stack.1.Mops, 0, debug-location !165 :: (store 8 into %ir.Mops); ep.c:132:10
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%49
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !166; ep.c:134:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %49:fpr64, %stack.1.Mops, 0, debug-location !165 :: (store 8 into %ir.Mops); ep.c:132:10
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %49:fpr64 = COPY killed $d0, debug-location !164; ep.c:132:12
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   %49:fpr64 = COPY killed $d0, debug-location !164; ep.c:132:12
SU(1):   STRDui %49:fpr64, %stack.1.Mops, 0, debug-location !165 :: (store 8 into %ir.Mops); ep.c:132:10

********** MI Scheduling **********
main:%bb.11 for.cond26
  From: %58:gpr32common = LDRWui %stack.19.i, 0, debug-location !176 :: (dereferenceable load 4 from %ir.i); ep.c:150:17
    To: Bcc 12, %bb.13, implicit killed $nzcv, debug-location !180; ep.c:150:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %58:gpr32common = LDRWui %stack.19.i, 0, debug-location !176 :: (dereferenceable load 4 from %ir.i); ep.c:150:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%58
  Single Issue       : false;
SU(1):   %4:fpr64 = LDRDui %stack.2.t1, 0, debug-location !179 :: (dereferenceable load 8 from %ir.t1); ep.c:0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWri %58:gpr32common, 16, 0, implicit-def $nzcv, debug-location !180; ep.c:150:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%58
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.13, implicit killed $nzcv, debug-location !180; ep.c:150:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 1 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWri %58:gpr32common, 16, 0, implicit-def $nzcv, debug-location !180; ep.c:150:5
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %4:fpr64 = LDRDui %stack.2.t1, 0, debug-location !179 :: (dereferenceable load 8 from %ir.t1); ep.c:0
  Ready @3c
  BotQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 2
  Executed: 4c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %58:gpr32common = LDRWui %stack.19.i, 0, debug-location !176 :: (dereferenceable load 4 from %ir.i); ep.c:150:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   %58:gpr32common = LDRWui %stack.19.i, 0, debug-location !176 :: (dereferenceable load 4 from %ir.i); ep.c:150:17
SU(1):   %4:fpr64 = LDRDui %stack.2.t1, 0, debug-location !179 :: (dereferenceable load 8 from %ir.t1); ep.c:0
SU(2):   dead $wzr = SUBSWri %58:gpr32common, 16, 0, implicit-def $nzcv, debug-location !180; ep.c:150:5

********** MI Scheduling **********
main:%bb.12 for.body29
  From: %271:fpr64 = COPY killed $d0, debug-location !181; ep.c:151:14
    To: B %bb.11, debug-location !185; ep.c:150:5
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %271:fpr64 = COPY killed $d0, debug-location !181; ep.c:151:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%271
  Single Issue       : false;
SU(1):   STRDui %271:fpr64, %stack.3.t2, 0, debug-location !183 :: (store 8 into %ir.t2); ep.c:151:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%271
  Single Issue       : false;
SU(2):   %272:gpr32common = LDRWui %stack.19.i, 0, debug-location !184 :: (dereferenceable load 4 from %ir.i); ep.c:150:30
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=%272
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   %273:gpr32common = nsw ADDWri %272:gpr32common, 1, 0, debug-location !184; ep.c:150:30
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=%272
  Successors:
    SU(4): Data Latency=1 Reg=%273
  Single Issue       : false;
SU(4):   STRWui %273:gpr32common, %stack.19.i, 0, debug-location !184 :: (store 4 into %ir.i); ep.c:150:30
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%273
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.11, debug-location !185; ep.c:150:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %271:fpr64 = COPY killed $d0, debug-location !181; ep.c:151:14
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) STRWui %273:gpr32common, %stack.19.i, 0, debug-location !184 :: (store 4 into %ir.i); ep.c:150:30
  Ready @0c
  BotQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
BotQ.A RemLatency SU(3) 4c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %273:gpr32common = nsw ADDWri %272:gpr32common, 1, 0, debug-location !184; ep.c:150:30
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %271:fpr64, %stack.3.t2, 0, debug-location !183 :: (store 8 into %ir.t2); ep.c:151:12
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %272:gpr32common = LDRWui %stack.19.i, 0, debug-location !184 :: (dereferenceable load 4 from %ir.i); ep.c:150:30
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   %271:fpr64 = COPY killed $d0, debug-location !181; ep.c:151:14
SU(2):   %272:gpr32common = LDRWui %stack.19.i, 0, debug-location !184 :: (dereferenceable load 4 from %ir.i); ep.c:150:30
SU(1):   STRDui %271:fpr64, %stack.3.t2, 0, debug-location !183 :: (store 8 into %ir.t2); ep.c:151:12
SU(3):   %273:gpr32common = nsw ADDWri %272:gpr32common, 1, 0, debug-location !184; ep.c:150:30
SU(4):   STRWui %273:gpr32common, %stack.19.i, 0, debug-location !184 :: (store 4 into %ir.i); ep.c:150:30

********** MI Scheduling **********
main:%bb.12 for.body29
  From: $x0 = ADDXri %stack.2.t1, 0, 0, debug-location !181; ep.c:151:14
    To: BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $d0, implicit-def $sp, implicit-def $d0, debug-location !181; ep.c:151:14
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = ADDXri %stack.2.t1, 0, 0, debug-location !181; ep.c:151:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $d0 = COPY %4:fpr64, debug-location !181; ep.c:151:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $d0, implicit-def $sp, implicit-def $d0, debug-location !181; ep.c:151:14
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $d0 = COPY %4:fpr64, debug-location !181; ep.c:151:14
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = ADDXri %stack.2.t1, 0, 0, debug-location !181; ep.c:151:14
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   $x0 = ADDXri %stack.2.t1, 0, 0, debug-location !181; ep.c:151:14
SU(1):   $d0 = COPY %4:fpr64, debug-location !181; ep.c:151:14

********** MI Scheduling **********
main:%bb.13 for.end33
  From: STRDui %4:fpr64, %stack.11.an, 0, debug-location !188 :: (store 8 into %ir.an); ep.c:154:8
    To: End RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRDui %4:fpr64, %stack.11.an, 0, debug-location !188 :: (store 8 into %ir.an); ep.c:154:8
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %60:gpr64 = MOVi64imm 4733340128880099328
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%60
  Single Issue       : false;
SU(2):   STRXui %60:gpr64, %stack.12.tt, 0, debug-location !189 :: (store 8 into %ir.tt); ep.c:155:8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%60
  Single Issue       : false;
SU(3):   STRXui $xzr, %stack.13.gc, 0, debug-location !190 :: (store 8 into %ir.gc); ep.c:156:8
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   STRXui $xzr, %stack.8.sx, 0, debug-location !191 :: (store 8 into %ir.sx); ep.c:157:8
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   STRXui $xzr, %stack.9.sy, 0, debug-location !192 :: (store 8 into %ir.sy); ep.c:158:8
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(6):   STRWui $wzr, %stack.19.i, 0, debug-location !193 :: (store 4 into %ir.i); ep.c:160:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(7):   %267:gpr64common = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 6 5 4 3 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 5 6 7 
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %267:gpr64common = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 6 5 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 5 6 
BotQ.A RemLatency SU(2) 1c
  BotQ.A RemainingLatency 1 + 1c > CritPath 1
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(2) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) STRXui %60:gpr64, %stack.12.tt, 0, debug-location !189 :: (store 8 into %ir.tt); ep.c:155:8
  Ready @1c
  BotQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 6 5 4 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 5 6 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) STRWui $wzr, %stack.19.i, 0, debug-location !193 :: (store 4 into %ir.i); ep.c:160:12
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 5 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 5 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) STRXui $xzr, %stack.9.sy, 0, debug-location !192 :: (store 8 into %ir.sy); ep.c:158:8
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 3 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 
  BotQ.A RemainingLatency 0 + 4c > CritPath 1
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) STRXui $xzr, %stack.8.sx, 0, debug-location !191 :: (store 8 into %ir.sx); ep.c:157:8
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  BotQ.A RemainingLatency 0 + 5c > CritPath 1
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) STRXui $xzr, %stack.13.gc, 0, debug-location !190 :: (store 8 into %ir.gc); ep.c:156:8
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 6c > CritPath 1
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %60:gpr64 = MOVi64imm 4733340128880099328
  Ready @6c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRDui %4:fpr64, %stack.11.an, 0, debug-location !188 :: (store 8 into %ir.an); ep.c:154:8
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   STRDui %4:fpr64, %stack.11.an, 0, debug-location !188 :: (store 8 into %ir.an); ep.c:154:8
SU(1):   %60:gpr64 = MOVi64imm 4733340128880099328
SU(3):   STRXui $xzr, %stack.13.gc, 0, debug-location !190 :: (store 8 into %ir.gc); ep.c:156:8
SU(4):   STRXui $xzr, %stack.8.sx, 0, debug-location !191 :: (store 8 into %ir.sx); ep.c:157:8
SU(5):   STRXui $xzr, %stack.9.sy, 0, debug-location !192 :: (store 8 into %ir.sy); ep.c:158:8
SU(6):   STRWui $wzr, %stack.19.i, 0, debug-location !193 :: (store 4 into %ir.i); ep.c:160:12
SU(2):   STRXui %60:gpr64, %stack.12.tt, 0, debug-location !189 :: (store 8 into %ir.tt); ep.c:155:8
SU(7):   %267:gpr64common = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q

********** MI Scheduling **********
main:%bb.14 for.cond34
  From: %63:gpr32common = LDRWui %stack.19.i, 0, debug-location !196 :: (dereferenceable load 4 from %ir.i); ep.c:160:17
    To: Bcc 12, %bb.16, implicit killed $nzcv, debug-location !199; ep.c:160:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %63:gpr32common = LDRWui %stack.19.i, 0, debug-location !196 :: (dereferenceable load 4 from %ir.i); ep.c:160:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%63
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %63:gpr32common, 9, 0, implicit-def $nzcv, debug-location !199; ep.c:160:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%63
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.16, implicit killed $nzcv, debug-location !199; ep.c:160:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %63:gpr32common, 9, 0, implicit-def $nzcv, debug-location !199; ep.c:160:5
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %63:gpr32common = LDRWui %stack.19.i, 0, debug-location !196 :: (dereferenceable load 4 from %ir.i); ep.c:160:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   %63:gpr32common = LDRWui %stack.19.i, 0, debug-location !196 :: (dereferenceable load 4 from %ir.i); ep.c:160:17
SU(1):   dead $wzr = SUBSWri %63:gpr32common, 9, 0, implicit-def $nzcv, debug-location !199; ep.c:160:5

********** MI Scheduling **********
main:%bb.15 for.body37
  From: %265:gpr64common = LDRSWui %stack.19.i, 0, debug-location !200 :: (dereferenceable load 4 from %ir.i); ep.c:161:11
    To: B %bb.14, debug-location !205; ep.c:160:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %265:gpr64common = LDRSWui %stack.19.i, 0, debug-location !200 :: (dereferenceable load 4 from %ir.i); ep.c:161:11
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%265
    SU(1): Data Latency=4 Reg=%265
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   STRXroX $xzr, %267:gpr64common, %265:gpr64common, 0, 1, debug-location !203 :: (store 8 into %ir.arrayidx39); ep.c:161:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%265
  Single Issue       : false;
SU(2):   %269:gpr32common = nsw ADDWri %265.sub_32:gpr64common, 1, 0, debug-location !204; ep.c:160:26
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%265
  Successors:
    SU(3): Data Latency=1 Reg=%269
  Single Issue       : false;
SU(3):   STRWui %269:gpr32common, %stack.19.i, 0, debug-location !204 :: (store 4 into %ir.i); ep.c:160:26
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%269
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.14, debug-location !205; ep.c:160:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) %265:gpr64common = LDRSWui %stack.19.i, 0, debug-location !200 :: (dereferenceable load 4 from %ir.i); ep.c:161:11
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 1 
TopQ.A RemLatency SU(2) 1c
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) STRWui %269:gpr32common, %stack.19.i, 0, debug-location !204 :: (store 4 into %ir.i); ep.c:160:26
  Ready @0c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
BotQ.A RemLatency SU(1) 4c
TopQ.A RemLatency SU(2) 1c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %269:gpr32common = nsw ADDWri %265.sub_32:gpr64common, 1, 0, debug-location !204; ep.c:160:26
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRXroX $xzr, %267:gpr64common, %265:gpr64common, 0, 1, debug-location !203 :: (store 8 into %ir.arrayidx39); ep.c:161:14
  Ready @2c
  BotQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   %265:gpr64common = LDRSWui %stack.19.i, 0, debug-location !200 :: (dereferenceable load 4 from %ir.i); ep.c:161:11
SU(1):   STRXroX $xzr, %267:gpr64common, %265:gpr64common, 0, 1, debug-location !203 :: (store 8 into %ir.arrayidx39); ep.c:161:14
SU(2):   %269:gpr32common = nsw ADDWri %265.sub_32:gpr64common, 1, 0, debug-location !204; ep.c:160:26
SU(3):   STRWui %269:gpr32common, %stack.19.i, 0, debug-location !204 :: (store 4 into %ir.i); ep.c:160:26

********** MI Scheduling **********
main:%bb.16 for.end42
  From: %65:gpr32 = MOVi32imm -1
    To: End RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %65:gpr32 = MOVi32imm -1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%65
  Single Issue       : false;
SU(1):   STRWui %65:gpr32, %stack.25.k_offset, 0, debug-location !208 :: (store 4 into %ir.k_offset); ep.c:170:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%65
  Single Issue       : false;
SU(2):   %66:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%66
  Single Issue       : false;
SU(3):   STRWui %66:gpr32, %stack.23.k, 0, debug-location !209 :: (store 4 into %ir.k); ep.c:172:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%66
  Single Issue       : false;
SU(4):   %185:gpr64 = MOVi64imm 4733340128880099328
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   %239:fpr64 = FMOVDi 128
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 5 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %239:fpr64 = FMOVDi 128
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 
BotQ.A RemLatency SU(1) 1c
  BotQ.A RemainingLatency 1 + 1c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) STRWui %66:gpr32, %stack.23.k, 0, debug-location !209 :: (store 4 into %ir.k); ep.c:172:12
  Ready @1c
  BotQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) STRWui %65:gpr32, %stack.25.k_offset, 0, debug-location !208 :: (store 4 into %ir.k_offset); ep.c:170:14
  Ready @2c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %185:gpr64 = MOVi64imm 4733340128880099328
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  BotQ.A RemainingLatency 0 + 4c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %66:gpr32 = MOVi32imm 1
  Ready @4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %65:gpr32 = MOVi32imm -1
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.16 ***
SU(0):   %65:gpr32 = MOVi32imm -1
SU(2):   %66:gpr32 = MOVi32imm 1
SU(4):   %185:gpr64 = MOVi64imm 4733340128880099328
SU(1):   STRWui %65:gpr32, %stack.25.k_offset, 0, debug-location !208 :: (store 4 into %ir.k_offset); ep.c:170:14
SU(3):   STRWui %66:gpr32, %stack.23.k, 0, debug-location !209 :: (store 4 into %ir.k); ep.c:172:12
SU(5):   %239:fpr64 = FMOVDi 128

********** MI Scheduling **********
main:%bb.17 for.cond43
  From: %67:gpr32 = LDRWui %stack.23.k, 0, debug-location !212 :: (dereferenceable load 4 from %ir.k); ep.c:172:17
    To: Bcc 12, %bb.40, implicit killed $nzcv, debug-location !216; ep.c:172:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %67:gpr32 = LDRWui %stack.23.k, 0, debug-location !212 :: (dereferenceable load 4 from %ir.k); ep.c:172:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%67
  Single Issue       : false;
SU(1):   %68:gpr32 = LDRWui %stack.18.np, 0, debug-location !214 :: (dereferenceable load 4 from %ir.np); ep.c:172:22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%68
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %67:gpr32, %68:gpr32, implicit-def $nzcv, debug-location !216; ep.c:172:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%68
    SU(0): Data Latency=4 Reg=%67
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.40, implicit killed $nzcv, debug-location !216; ep.c:172:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %67:gpr32, %68:gpr32, implicit-def $nzcv, debug-location !216; ep.c:172:5
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %68:gpr32 = LDRWui %stack.18.np, 0, debug-location !214 :: (dereferenceable load 4 from %ir.np); ep.c:172:22
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %67:gpr32 = LDRWui %stack.23.k, 0, debug-location !212 :: (dereferenceable load 4 from %ir.k); ep.c:172:17
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   %67:gpr32 = LDRWui %stack.23.k, 0, debug-location !212 :: (dereferenceable load 4 from %ir.k); ep.c:172:17
SU(1):   %68:gpr32 = LDRWui %stack.18.np, 0, debug-location !214 :: (dereferenceable load 4 from %ir.np); ep.c:172:22
SU(2):   dead $wzr = SUBSWrr %67:gpr32, %68:gpr32, implicit-def $nzcv, debug-location !216; ep.c:172:5

********** MI Scheduling **********
main:%bb.18 for.body46
  From: %182:gpr32 = LDRWui %stack.25.k_offset, 0, debug-location !217 :: (dereferenceable load 4 from %ir.k_offset); ep.c:173:14
    To: End RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %182:gpr32 = LDRWui %stack.25.k_offset, 0, debug-location !217 :: (dereferenceable load 4 from %ir.k_offset); ep.c:173:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%182
  Single Issue       : false;
SU(1):   %183:gpr32 = LDRWui %stack.23.k, 0, debug-location !219 :: (dereferenceable load 4 from %ir.k); ep.c:173:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%183
  Single Issue       : false;
SU(2):   %184:gpr32 = nsw ADDWrr %182:gpr32, %183:gpr32, debug-location !220; ep.c:173:23
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%183
    SU(0): Data Latency=4 Reg=%182
  Successors:
    SU(3): Data Latency=1 Reg=%184
  Single Issue       : false;
SU(3):   STRWui %184:gpr32, %stack.21.kk, 0, debug-location !221 :: (store 4 into %ir.kk); ep.c:173:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%184
  Single Issue       : false;
SU(4):   STRXui %185:gpr64, %stack.2.t1, 0, debug-location !222 :: (store 8 into %ir.t1); ep.c:174:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   %186:fpr64 = LDRDui %stack.11.an, 0, debug-location !223 :: (dereferenceable load 8 from %ir.an); ep.c:175:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(6): Data Latency=4 Reg=%186
  Single Issue       : false;
SU(6):   STRDui %186:fpr64, %stack.3.t2, 0, debug-location !224 :: (store 8 into %ir.t2); ep.c:175:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(5): Data Latency=4 Reg=%186
  Single Issue       : false;
SU(7):   STRWui %66:gpr32, %stack.19.i, 0, debug-location !225 :: (store 4 into %ir.i); ep.c:179:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 6 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 5 7 
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) STRWui %66:gpr32, %stack.19.i, 0, debug-location !225 :: (store 4 into %ir.i); ep.c:179:16
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 6 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 5 
BotQ.A RemLatency SU(3) 5c
  BotQ.A RemainingLatency 5 + 1c > CritPath 5
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(3) STRWui %184:gpr32, %stack.21.kk, 0, debug-location !221 :: (store 4 into %ir.kk); ep.c:173:12
  Ready @1c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 6 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 5 
BotQ.A RemLatency SU(6) 4c
  BotQ.A RemainingLatency 4 + 2c > CritPath 5
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(6) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(6) STRDui %186:fpr64, %stack.3.t2, 0, debug-location !224 :: (store 8 into %ir.t2); ep.c:175:12
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 4 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 5 
BotQ.A RemLatency SU(2) 4c
  BotQ.A RemainingLatency 4 + 3c > CritPath 5
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(2) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) %184:gpr32 = nsw ADDWrr %182:gpr32, %183:gpr32, debug-location !220; ep.c:173:23
  Ready @3c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 1 0 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) STRXui %185:gpr64, %stack.2.t1, 0, debug-location !222 :: (store 8 into %ir.t1); ep.c:174:12
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 0 1 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %186:fpr64 = LDRDui %stack.11.an, 0, debug-location !223 :: (dereferenceable load 8 from %ir.an); ep.c:175:14
  Ready @6c
  BotQ.A BotLatency SU(5) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 7c > CritPath 5
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %183:gpr32 = LDRWui %stack.23.k, 0, debug-location !219 :: (dereferenceable load 4 from %ir.k); ep.c:173:25
  Ready @7c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %182:gpr32 = LDRWui %stack.25.k_offset, 0, debug-location !217 :: (dereferenceable load 4 from %ir.k_offset); ep.c:173:14
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 8
  Executed: 9c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.18 ***
SU(0):   %182:gpr32 = LDRWui %stack.25.k_offset, 0, debug-location !217 :: (dereferenceable load 4 from %ir.k_offset); ep.c:173:14
SU(1):   %183:gpr32 = LDRWui %stack.23.k, 0, debug-location !219 :: (dereferenceable load 4 from %ir.k); ep.c:173:25
SU(5):   %186:fpr64 = LDRDui %stack.11.an, 0, debug-location !223 :: (dereferenceable load 8 from %ir.an); ep.c:175:14
SU(4):   STRXui %185:gpr64, %stack.2.t1, 0, debug-location !222 :: (store 8 into %ir.t1); ep.c:174:12
SU(2):   %184:gpr32 = nsw ADDWrr %182:gpr32, %183:gpr32, debug-location !220; ep.c:173:23
SU(6):   STRDui %186:fpr64, %stack.3.t2, 0, debug-location !224 :: (store 8 into %ir.t2); ep.c:175:12
SU(3):   STRWui %184:gpr32, %stack.21.kk, 0, debug-location !221 :: (store 4 into %ir.kk); ep.c:173:12
SU(7):   STRWui %66:gpr32, %stack.19.i, 0, debug-location !225 :: (store 4 into %ir.i); ep.c:179:16

********** MI Scheduling **********
main:%bb.19 for.cond48
  From: %188:gpr32common = LDRWui %stack.19.i, 0, debug-location !228 :: (dereferenceable load 4 from %ir.i); ep.c:179:21
    To: Bcc 12, %bb.24, implicit killed $nzcv, debug-location !231; ep.c:179:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %188:gpr32common = LDRWui %stack.19.i, 0, debug-location !228 :: (dereferenceable load 4 from %ir.i); ep.c:179:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%188
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %188:gpr32common, 100, 0, implicit-def $nzcv, debug-location !231; ep.c:179:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%188
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.24, implicit killed $nzcv, debug-location !231; ep.c:179:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %188:gpr32common, 100, 0, implicit-def $nzcv, debug-location !231; ep.c:179:9
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %188:gpr32common = LDRWui %stack.19.i, 0, debug-location !228 :: (dereferenceable load 4 from %ir.i); ep.c:179:21
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   %188:gpr32common = LDRWui %stack.19.i, 0, debug-location !228 :: (dereferenceable load 4 from %ir.i); ep.c:179:21
SU(1):   dead $wzr = SUBSWri %188:gpr32common, 100, 0, implicit-def $nzcv, debug-location !231; ep.c:179:9

********** MI Scheduling **********
main:%bb.20 for.body51
  From: %190:gpr32common = LDRWui %stack.21.kk, 0, debug-location !232 :: (dereferenceable load 4 from %ir.kk); ep.c:180:18
    To: Bcc 0, %bb.22, implicit killed $nzcv, debug-location !241; ep.c:181:17
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %190:gpr32common = LDRWui %stack.21.kk, 0, debug-location !232 :: (dereferenceable load 4 from %ir.kk); ep.c:180:18
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(6): Data Latency=4 Reg=%190
    SU(2): Data Latency=4 Reg=%190
    SU(1): Data Latency=4 Reg=%190
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %190:gpr32common, 0, 0, implicit-def $nzcv, debug-location !234; ep.c:180:21
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%190
  Successors:
    SU(6): Out  Latency=1
    SU(2): Data Latency=1 Reg=$nzcv
  Single Issue       : false;
SU(2):   %192:gpr32 = CSINCWr %190:gpr32common, %190:gpr32common, 10, implicit killed $nzcv, debug-location !234; ep.c:180:21
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(1): Data Latency=1 Reg=$nzcv
    SU(0): Data Latency=4 Reg=%190
  Successors:
    SU(5): Data Latency=1 Reg=%192
    SU(3): Data Latency=1 Reg=%192
    SU(6): Anti Latency=0
  Single Issue       : false;
SU(3):   %193:gpr32 = SBFMWri %192:gpr32, 1, 31, debug-location !234; ep.c:180:21
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=%192
  Successors:
    SU(4): Data Latency=1 Reg=%193
  Single Issue       : false;
SU(4):   STRWui %193:gpr32, %stack.20.ik, 0, debug-location !235 :: (store 4 into %ir.ik); ep.c:180:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%193
  Single Issue       : false;
SU(5):   %194:gpr32common = ANDWri %192:gpr32, 2014, debug-location !238; ep.c:181:20
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 2
  Predecessors:
    SU(2): Data Latency=1 Reg=%192
  Successors:
    SU(6): Data Latency=1 Reg=%194
  Single Issue       : false;
SU(6):   dead $wzr = SUBSWrr %194:gpr32common, %190:gpr32common, implicit-def $nzcv, debug-location !241; ep.c:181:17
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 1
  Predecessors:
    SU(5): Data Latency=1 Reg=%194
    SU(2): Anti Latency=0
    SU(1): Out  Latency=1
    SU(0): Data Latency=4 Reg=%190
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 0, %bb.22, implicit killed $nzcv, debug-location !241; ep.c:181:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) STRWui %193:gpr32, %stack.20.ik, 0, debug-location !235 :: (store 4 into %ir.ik); ep.c:180:16
  Ready @0c
  BotQ.A TopLatency SU(4) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 6 
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) %190:gpr32common = LDRWui %stack.21.kk, 0, debug-location !232 :: (dereferenceable load 4 from %ir.kk); ep.c:180:18
  Ready @0c
  TopQ.A BotLatency SU(0) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 6 
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %190:gpr32common, 0, 0, implicit-def $nzcv, debug-location !234; ep.c:180:21
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 6 
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) %192:gpr32 = CSINCWr %190:gpr32common, %190:gpr32common, 10, implicit killed $nzcv, debug-location !234; ep.c:180:21
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 6 
Queue TopQ.P: 
Queue TopQ.A: 5 3 
BotQ.A RemLatency SU(6) 7c
TopQ.A RemLatency SU(5) 2c
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(5) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) dead $wzr = SUBSWrr %194:gpr32common, %190:gpr32common, implicit-def $nzcv, debug-location !241; ep.c:181:17
  Ready @1c
  BotQ.A TopLatency SU(6) 7c
  BotQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 
Queue TopQ.P: 
Queue TopQ.A: 5 3 
BotQ.A RemLatency SU(3) 6c
TopQ.A RemLatency SU(5) 2c
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(3) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %194:gpr32common = ANDWri %192:gpr32, 2014, debug-location !238; ep.c:181:20
  Ready @2c
  BotQ.A BotLatency SU(5) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %193:gpr32 = SBFMWri %192:gpr32, 1, 31, debug-location !234; ep.c:180:21
  Ready @3c
  BotQ.A TopLatency SU(3) 6c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   %190:gpr32common = LDRWui %stack.21.kk, 0, debug-location !232 :: (dereferenceable load 4 from %ir.kk); ep.c:180:18
SU(1):   dead $wzr = SUBSWri %190:gpr32common, 0, 0, implicit-def $nzcv, debug-location !234; ep.c:180:21
SU(2):   %192:gpr32 = CSINCWr %190:gpr32common, %190:gpr32common, 10, implicit killed $nzcv, debug-location !234; ep.c:180:21
SU(3):   %193:gpr32 = SBFMWri %192:gpr32, 1, 31, debug-location !234; ep.c:180:21
SU(5):   %194:gpr32common = ANDWri %192:gpr32, 2014, debug-location !238; ep.c:181:20
SU(6):   dead $wzr = SUBSWrr %194:gpr32common, %190:gpr32common, implicit-def $nzcv, debug-location !241; ep.c:181:17
SU(4):   STRWui %193:gpr32, %stack.20.ik, 0, debug-location !235 :: (store 4 into %ir.ik); ep.c:180:16

********** MI Scheduling **********
main:%bb.21 if.then54
  From: %198:fpr64 = COPY killed $d0, debug-location !243; ep.c:182:22
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %198:fpr64 = COPY killed $d0, debug-location !243; ep.c:182:22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%198
  Single Issue       : false;
SU(1):   STRDui %198:fpr64, %stack.4.t3, 0, debug-location !244 :: (store 8 into %ir.t3); ep.c:182:20
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%198
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %198:fpr64, %stack.4.t3, 0, debug-location !244 :: (store 8 into %ir.t3); ep.c:182:20
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %198:fpr64 = COPY killed $d0, debug-location !243; ep.c:182:22
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.21 ***
SU(0):   %198:fpr64 = COPY killed $d0, debug-location !243; ep.c:182:22
SU(1):   STRDui %198:fpr64, %stack.4.t3, 0, debug-location !244 :: (store 8 into %ir.t3); ep.c:182:20

********** MI Scheduling **********
main:%bb.21 if.then54
  From: $x0 = ADDXri %stack.2.t1, 0, 0, debug-location !243; ep.c:182:22
    To: BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $d0, implicit-def $sp, implicit-def $d0, debug-location !243; ep.c:182:22
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = ADDXri %stack.2.t1, 0, 0, debug-location !243; ep.c:182:22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $d0 = COPY %196:fpr64, debug-location !243; ep.c:182:22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $d0, implicit-def $sp, implicit-def $d0, debug-location !243; ep.c:182:22
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $d0 = COPY %196:fpr64, debug-location !243; ep.c:182:22
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = ADDXri %stack.2.t1, 0, 0, debug-location !243; ep.c:182:22
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.21 ***
SU(0):   $x0 = ADDXri %stack.2.t1, 0, 0, debug-location !243; ep.c:182:22
SU(1):   $d0 = COPY %196:fpr64, debug-location !243; ep.c:182:22

********** MI Scheduling **********
main:%bb.23 if.end60
  From: %202:fpr64 = COPY killed $d0, debug-location !251; ep.c:185:18
    To: B %bb.19, debug-location !256; ep.c:179:9
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %202:fpr64 = COPY killed $d0, debug-location !251; ep.c:185:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%202
  Single Issue       : false;
SU(1):   STRDui %202:fpr64, %stack.4.t3, 0, debug-location !252 :: (store 8 into %ir.t3); ep.c:185:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%202
  Single Issue       : false;
SU(2):   %203:gpr32 = LDRWui %stack.20.ik, 0, debug-location !253 :: (dereferenceable load 4 from %ir.ik); ep.c:186:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%203
  Single Issue       : false;
SU(3):   STRWui %203:gpr32, %stack.21.kk, 0, debug-location !254 :: (store 4 into %ir.kk); ep.c:186:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%203
  Single Issue       : false;
SU(4):   %204:gpr32common = LDRWui %stack.19.i, 0, debug-location !255 :: (dereferenceable load 4 from %ir.i); ep.c:179:32
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=%204
    SU(6): Ord  Latency=0 Memory
  Single Issue       : false;
SU(5):   %205:gpr32common = nsw ADDWri %204:gpr32common, 1, 0, debug-location !255; ep.c:179:32
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(4): Data Latency=4 Reg=%204
  Successors:
    SU(6): Data Latency=1 Reg=%205
  Single Issue       : false;
SU(6):   STRWui %205:gpr32common, %stack.19.i, 0, debug-location !255 :: (store 4 into %ir.i); ep.c:179:32
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%205
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.19, debug-location !256; ep.c:179:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %202:fpr64 = COPY killed $d0, debug-location !251; ep.c:185:18
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 3 1 
Queue TopQ.P: 
Queue TopQ.A: 4 2 1 
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(4) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) STRWui %205:gpr32common, %stack.19.i, 0, debug-location !255 :: (store 4 into %ir.i); ep.c:179:32
  Ready @0c
  BotQ.A TopLatency SU(6) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 
Queue TopQ.P: 
Queue TopQ.A: 4 2 1 
BotQ.A RemLatency SU(3) 4c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %205:gpr32common = nsw ADDWri %204:gpr32common, 1, 0, debug-location !255; ep.c:179:32
  Ready @1c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 1 3 
Queue TopQ.P: 
Queue TopQ.A: 4 2 1 
BotQ.A RemLatency SU(3) 4c
  BotQ.A RemainingLatency 4 + 2c > CritPath 5
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(3) STRWui %203:gpr32, %stack.21.kk, 0, debug-location !254 :: (store 4 into %ir.kk); ep.c:186:16
  Ready @2c
  BotQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %202:fpr64, %stack.4.t3, 0, debug-location !252 :: (store 8 into %ir.t3); ep.c:185:16
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 2 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %204:gpr32common = LDRWui %stack.19.i, 0, debug-location !255 :: (dereferenceable load 4 from %ir.i); ep.c:179:32
  Ready @5c
  BotQ.A BotLatency SU(4) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %203:gpr32 = LDRWui %stack.20.ik, 0, debug-location !253 :: (dereferenceable load 4 from %ir.ik); ep.c:186:18
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.23 ***
SU(0):   %202:fpr64 = COPY killed $d0, debug-location !251; ep.c:185:18
SU(2):   %203:gpr32 = LDRWui %stack.20.ik, 0, debug-location !253 :: (dereferenceable load 4 from %ir.ik); ep.c:186:18
SU(4):   %204:gpr32common = LDRWui %stack.19.i, 0, debug-location !255 :: (dereferenceable load 4 from %ir.i); ep.c:179:32
SU(1):   STRDui %202:fpr64, %stack.4.t3, 0, debug-location !252 :: (store 8 into %ir.t3); ep.c:185:16
SU(3):   STRWui %203:gpr32, %stack.21.kk, 0, debug-location !254 :: (store 4 into %ir.kk); ep.c:186:16
SU(5):   %205:gpr32common = nsw ADDWri %204:gpr32common, 1, 0, debug-location !255; ep.c:179:32
SU(6):   STRWui %205:gpr32common, %stack.19.i, 0, debug-location !255 :: (store 4 into %ir.i); ep.c:179:32

********** MI Scheduling **********
main:%bb.23 if.end60
  From: $x0 = ADDXri %stack.3.t2, 0, 0, debug-location !251; ep.c:185:18
    To: BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $d0, implicit-def $sp, implicit-def $d0, debug-location !251; ep.c:185:18
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = ADDXri %stack.3.t2, 0, 0, debug-location !251; ep.c:185:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $d0 = COPY %200:fpr64, debug-location !251; ep.c:185:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $d0, implicit-def $sp, implicit-def $d0, debug-location !251; ep.c:185:18
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $d0 = COPY %200:fpr64, debug-location !251; ep.c:185:18
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = ADDXri %stack.3.t2, 0, 0, debug-location !251; ep.c:185:18
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.23 ***
SU(0):   $x0 = ADDXri %stack.3.t2, 0, 0, debug-location !251; ep.c:185:18
SU(1):   $d0 = COPY %200:fpr64, debug-location !251; ep.c:185:18

********** MI Scheduling **********
main:%bb.26 if.end66
  From: $w0 = MOVi32imm 131072, debug-location !263; ep.c:194:9
    To: BL @vranlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit killed $x1, implicit killed $d0, implicit killed $x2, implicit-def $sp, debug-location !263; ep.c:194:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $w0 = MOVi32imm 131072, debug-location !263; ep.c:194:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = ADDXri %stack.2.t1, 0, 0, debug-location !263; ep.c:194:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %56:fpr64, debug-location !263; ep.c:194:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $x2 = COPY %54:gpr64, debug-location !263; ep.c:194:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @vranlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit killed $x1, implicit killed $d0, implicit killed $x2, implicit-def $sp, debug-location !263; ep.c:194:9
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(3) $x2 = COPY %54:gpr64, debug-location !263; ep.c:194:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $d0 = COPY %56:fpr64, debug-location !263; ep.c:194:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(0) PHYS-REG                           
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(0) $w0 = MOVi32imm 131072, debug-location !263; ep.c:194:9
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x1 = ADDXri %stack.2.t1, 0, 0, debug-location !263; ep.c:194:9
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.26 ***
SU(1):   $x1 = ADDXri %stack.2.t1, 0, 0, debug-location !263; ep.c:194:9
SU(0):   $w0 = MOVi32imm 131072, debug-location !263; ep.c:194:9
SU(2):   $d0 = COPY %56:fpr64, debug-location !263; ep.c:194:9
SU(3):   $x2 = COPY %54:gpr64, debug-location !263; ep.c:194:9

********** MI Scheduling **********
main:%bb.31 for.cond73
  From: %218:gpr32common = LDRWui %stack.19.i, 0, debug-location !275 :: (dereferenceable load 4 from %ir.i); ep.c:206:21
    To: Bcc 10, %bb.37, implicit killed $nzcv, debug-location !278; ep.c:206:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %218:gpr32common = LDRWui %stack.19.i, 0, debug-location !275 :: (dereferenceable load 4 from %ir.i); ep.c:206:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%218
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %218:gpr32common, 16, 12, implicit-def $nzcv, debug-location !278; ep.c:206:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%218
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.37, implicit killed $nzcv, debug-location !278; ep.c:206:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %218:gpr32common, 16, 12, implicit-def $nzcv, debug-location !278; ep.c:206:9
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %218:gpr32common = LDRWui %stack.19.i, 0, debug-location !275 :: (dereferenceable load 4 from %ir.i); ep.c:206:21
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.31 ***
SU(0):   %218:gpr32common = LDRWui %stack.19.i, 0, debug-location !275 :: (dereferenceable load 4 from %ir.i); ep.c:206:21
SU(1):   dead $wzr = SUBSWri %218:gpr32common, 16, 12, implicit-def $nzcv, debug-location !278; ep.c:206:9

********** MI Scheduling **********
main:%bb.32 for.body76
  From: %225:gpr64 = LDRSWui %stack.19.i, 0, debug-location !279 :: (dereferenceable load 4 from %ir.i); ep.c:207:30
    To: Bcc 8, %bb.36, implicit killed $nzcv, debug-location !304; ep.c:210:17
 RegionInstrs: 15
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Cluster ld/st SU(2) - SU(6)
  Copy Succ SU(3)
SU(0):   %225:gpr64 = LDRSWui %stack.19.i, 0, debug-location !279 :: (dereferenceable load 4 from %ir.i); ep.c:207:30
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(1): Data Latency=4 Reg=%225
  Single Issue       : false;
SU(1):   %226:gpr64common = ADDXrs %54:gpr64, %225:gpr64, 4, debug-location !282; ep.c:207:24
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 10
  Predecessors:
    SU(0): Data Latency=4 Reg=%225
  Successors:
    SU(6): Data Latency=1 Reg=%226
    SU(2): Data Latency=1 Reg=%226
  Single Issue       : false;
SU(2):   %227:fpr64 = LDRDui %226:gpr64common, 0, debug-location !282 :: (load 8 from %ir.arrayidx79); ep.c:207:24
  # preds left       : 1
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 9
  Predecessors:
    SU(1): Data Latency=1 Reg=%226
  Successors:
    SU(3): Data Latency=4 Reg=%227
    SU(6): Ord  Latency=0 Cluster
  Single Issue       : false;
SU(3):   %228:fpr64 = FADDDrr %227:fpr64, %227:fpr64, debug-location !283; ep.c:207:22
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 5
  Predecessors:
    SU(2): Data Latency=4 Reg=%227
    SU(6): Ord  Latency=0 Artificial
  Successors:
    SU(4): Data Latency=1 Reg=%228
  Single Issue       : false;
SU(4):   %230:fpr64 = FSUBDrr %228:fpr64, %0:fpr64, debug-location !284; ep.c:207:33
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 4
  Predecessors:
    SU(3): Data Latency=1 Reg=%228
  Successors:
    SU(10): Data Latency=1 Reg=%230
    SU(5): Data Latency=1 Reg=%230
  Single Issue       : false;
SU(5):   STRDui %230:fpr64, %stack.6.x1, 0, debug-location !285 :: (store 8 into %ir.x1); ep.c:207:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%230
  Single Issue       : false;
SU(6):   %231:fpr64 = LDRDui %226:gpr64common, 1, debug-location !289 :: (load 8 from %ir.arrayidx84); ep.c:208:24
  # preds left       : 1
  # succs left       : 2
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 9
  Predecessors:
    SU(1): Data Latency=1 Reg=%226
    SU(2): Ord  Latency=0 Cluster
  Successors:
    SU(7): Data Latency=4 Reg=%231
    SU(3): Ord  Latency=0 Artificial
  Single Issue       : false;
SU(7):   %232:fpr64 = FADDDrr %231:fpr64, %231:fpr64, debug-location !290; ep.c:208:22
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 5
  Predecessors:
    SU(6): Data Latency=4 Reg=%231
  Successors:
    SU(8): Data Latency=1 Reg=%232
  Single Issue       : false;
SU(8):   %233:fpr64 = FSUBDrr %232:fpr64, %0:fpr64, debug-location !291; ep.c:208:37
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 4
  Predecessors:
    SU(7): Data Latency=1 Reg=%232
  Successors:
    SU(11): Data Latency=1 Reg=%233
    SU(9): Data Latency=1 Reg=%233
  Single Issue       : false;
SU(9):   STRDui %233:fpr64, %stack.7.x2, 0, debug-location !292 :: (store 8 into %ir.x2); ep.c:208:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%233
  Single Issue       : false;
SU(10):   %234:fpr64 = FMULDrr %230:fpr64, %230:fpr64, debug-location !295; ep.c:209:21
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 3
  Predecessors:
    SU(4): Data Latency=1 Reg=%230
  Successors:
    SU(12): Data Latency=1 Reg=%234
  Single Issue       : false;
SU(11):   %235:fpr64 = FMULDrr %233:fpr64, %233:fpr64, debug-location !298; ep.c:209:31
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 3
  Predecessors:
    SU(8): Data Latency=1 Reg=%233
  Successors:
    SU(12): Data Latency=1 Reg=%235
  Single Issue       : false;
SU(12):   %236:fpr64 = FADDDrr %234:fpr64, %235:fpr64, debug-location !299; ep.c:209:26
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 2
  Predecessors:
    SU(11): Data Latency=1 Reg=%235
    SU(10): Data Latency=1 Reg=%234
  Successors:
    SU(14): Data Latency=1 Reg=%236
    SU(13): Data Latency=1 Reg=%236
  Single Issue       : false;
SU(13):   STRDui %236:fpr64, %stack.2.t1, 0, debug-location !300 :: (store 8 into %ir.t1); ep.c:209:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%236
  Single Issue       : false;
SU(14):   FCMPDrr %236:fpr64, %0:fpr64, implicit-def $nzcv, debug-location !304; ep.c:210:17
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 1
  Predecessors:
    SU(12): Data Latency=1 Reg=%236
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 8, %bb.36, implicit killed $nzcv, debug-location !304; ep.c:210:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 14
  Height             : 0
  Predecessors:
    SU(14): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 14
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 14 
Queue BotQ.A: 13 9 5 
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) %225:gpr64 = LDRSWui %stack.19.i, 0, debug-location !279 :: (dereferenceable load 4 from %ir.i); ep.c:207:30
  Ready @0c
  TopQ.A BotLatency SU(0) 14c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 14 
Queue BotQ.A: 13 9 5 
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) %226:gpr64common = ADDXrs %54:gpr64, %225:gpr64, 4, debug-location !282; ep.c:207:24
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 14 
Queue BotQ.A: 13 9 5 
Queue TopQ.P: 
Queue TopQ.A: 6 2 
TopQ.A RemLatency SU(6) 9c
Picking from Bot:
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(6) ORDER                              
  Cand SU(2) WEAK                               
Pick Bot ORDER     
Scheduling SU(13) STRDui %236:fpr64, %stack.2.t1, 0, debug-location !300 :: (store 8 into %ir.t1); ep.c:209:16
  Ready @0c
  BotQ.A TopLatency SU(13) 13c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 9 14 
Queue TopQ.P: 
Queue TopQ.A: 6 2 
BotQ.A RemLatency SU(14) 13c
TopQ.A RemLatency SU(6) 9c
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(14) FCMPDrr %236:fpr64, %0:fpr64, implicit-def $nzcv, debug-location !304; ep.c:210:17
  Ready @1c
  BotQ.A TopLatency SU(14) 13c
  BotQ.A BotLatency SU(14) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 9 12 
Queue TopQ.P: 
Queue TopQ.A: 6 2 
BotQ.A RemLatency SU(12) 12c
TopQ.A RemLatency SU(6) 9c
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(12) %236:fpr64 = FADDDrr %234:fpr64, %235:fpr64, debug-location !299; ep.c:209:26
  Ready @2c
  BotQ.A BotLatency SU(12) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 9 11 10 
Queue TopQ.P: 
Queue TopQ.A: 6 2 
BotQ.A RemLatency SU(5) 11c
TopQ.A RemLatency SU(6) 9c
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(11) %235:fpr64 = FMULDrr %233:fpr64, %233:fpr64, debug-location !298; ep.c:209:31
  Ready @3c
  BotQ.A BotLatency SU(11) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 9 10 
Queue TopQ.P: 
Queue TopQ.A: 6 2 
BotQ.A RemLatency SU(5) 11c
  BotQ.A RemainingLatency 11 + 4c > CritPath 14
TopQ.A RemLatency SU(6) 9c
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(10) %234:fpr64 = FMULDrr %230:fpr64, %230:fpr64, debug-location !295; ep.c:209:21
  Ready @4c
  BotQ.A TopLatency SU(10) 11c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 9 
Queue TopQ.P: 
Queue TopQ.A: 6 2 
BotQ.A RemLatency SU(5) 11c
  BotQ.A RemainingLatency 11 + 5c > CritPath 14
TopQ.A RemLatency SU(6) 9c
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(9) STRDui %233:fpr64, %stack.7.x2, 0, debug-location !292 :: (store 8 into %ir.x2); ep.c:208:16
  Ready @5c
  BotQ.A TopLatency SU(9) 11c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 8 
Queue TopQ.P: 
Queue TopQ.A: 6 2 
BotQ.A RemLatency SU(5) 11c
  BotQ.A RemainingLatency 11 + 6c > CritPath 14
TopQ.A RemLatency SU(6) 9c
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) STRDui %230:fpr64, %stack.6.x1, 0, debug-location !285 :: (store 8 into %ir.x1); ep.c:207:16
  Ready @6c
  BotQ.A TopLatency SU(5) 11c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 4 
Queue TopQ.P: 
Queue TopQ.A: 6 2 
BotQ.A RemLatency SU(8) 10c
  BotQ.A RemainingLatency 10 + 7c > CritPath 14
TopQ.A RemLatency SU(6) 9c
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %233:fpr64 = FSUBDrr %232:fpr64, %0:fpr64, debug-location !291; ep.c:208:37
  Ready @7c
  BotQ.A BotLatency SU(8) 4c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 7 
Queue TopQ.P: 
Queue TopQ.A: 6 2 
BotQ.A RemLatency SU(4) 10c
  BotQ.A RemainingLatency 10 + 8c > CritPath 14
TopQ.A RemLatency SU(6) 9c
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) %230:fpr64 = FSUBDrr %228:fpr64, %0:fpr64, debug-location !284; ep.c:207:33
  Ready @8c
  BotQ.A TopLatency SU(4) 10c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 3 
Queue TopQ.P: 
Queue TopQ.A: 6 2 
BotQ.A RemLatency SU(7) 9c
  BotQ.A RemainingLatency 9 + 9c > CritPath 14
TopQ.A RemLatency SU(6) 9c
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %232:fpr64 = FADDDrr %231:fpr64, %231:fpr64, debug-location !290; ep.c:208:22
  Ready @9c
  BotQ.A BotLatency SU(7) 5c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %228:fpr64 = FADDDrr %227:fpr64, %227:fpr64, debug-location !283; ep.c:207:22
  Ready @10c
  BotQ.A TopLatency SU(3) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 13 BotQ.A
Queue BotQ.P: 2 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %231:fpr64 = LDRDui %226:gpr64common, 1, debug-location !289 :: (load 8 from %ir.arrayidx84); ep.c:208:24
  Ready @13c
  BotQ.A BotLatency SU(6) 9c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 12
  Executed: 14c
  Critical: 12c, 12 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %227:fpr64 = LDRDui %226:gpr64common, 0, debug-location !282 :: (load 8 from %ir.arrayidx79); ep.c:207:24
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 13
  Executed: 15c
  Critical: 13c, 13 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   %225:gpr64 = LDRSWui %stack.19.i, 0, debug-location !279 :: (dereferenceable load 4 from %ir.i); ep.c:207:30
SU(1):   %226:gpr64common = ADDXrs %54:gpr64, %225:gpr64, 4, debug-location !282; ep.c:207:24
SU(2):   %227:fpr64 = LDRDui %226:gpr64common, 0, debug-location !282 :: (load 8 from %ir.arrayidx79); ep.c:207:24
SU(6):   %231:fpr64 = LDRDui %226:gpr64common, 1, debug-location !289 :: (load 8 from %ir.arrayidx84); ep.c:208:24
SU(3):   %228:fpr64 = FADDDrr %227:fpr64, %227:fpr64, debug-location !283; ep.c:207:22
SU(7):   %232:fpr64 = FADDDrr %231:fpr64, %231:fpr64, debug-location !290; ep.c:208:22
SU(4):   %230:fpr64 = FSUBDrr %228:fpr64, %0:fpr64, debug-location !284; ep.c:207:33
SU(8):   %233:fpr64 = FSUBDrr %232:fpr64, %0:fpr64, debug-location !291; ep.c:208:37
SU(5):   STRDui %230:fpr64, %stack.6.x1, 0, debug-location !285 :: (store 8 into %ir.x1); ep.c:207:16
SU(9):   STRDui %233:fpr64, %stack.7.x2, 0, debug-location !292 :: (store 8 into %ir.x2); ep.c:208:16
SU(10):   %234:fpr64 = FMULDrr %230:fpr64, %230:fpr64, debug-location !295; ep.c:209:21
SU(11):   %235:fpr64 = FMULDrr %233:fpr64, %233:fpr64, debug-location !298; ep.c:209:31
SU(12):   %236:fpr64 = FADDDrr %234:fpr64, %235:fpr64, debug-location !299; ep.c:209:26
SU(14):   FCMPDrr %236:fpr64, %0:fpr64, implicit-def $nzcv, debug-location !304; ep.c:210:17
SU(13):   STRDui %236:fpr64, %stack.2.t1, 0, debug-location !300 :: (store 8 into %ir.t1); ep.c:209:16

********** MI Scheduling **********
main:%bb.33 if.then92
  From: %238:fpr64 = COPY killed $d0, debug-location !307; ep.c:211:34
    To: Bcc 7, %bb.35, implicit killed $nzcv, debug-location !312; ep.c:211:20
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %238:fpr64 = COPY killed $d0, debug-location !307; ep.c:211:34
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=0 Reg=%238
  Single Issue       : false;
SU(1):   %240:fpr64 = FMULDrr %238:fpr64, %239:fpr64, debug-location !308; ep.c:211:32
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Predecessors:
    SU(0): Data Latency=0 Reg=%238
  Successors:
    SU(3): Data Latency=1 Reg=%240
  Single Issue       : false;
SU(2):   %241:fpr64 = LDRDui %stack.2.t1, 0, debug-location !309 :: (dereferenceable load 8 from %ir.t1); ep.c:211:44
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%241
  Single Issue       : false;
SU(3):   %5:fpr64 = FDIVDrr %240:fpr64, %241:fpr64, debug-location !310; ep.c:211:42
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(2): Data Latency=4 Reg=%241
    SU(1): Data Latency=1 Reg=%240
  Successors:
    SU(4): Data Latency=1 Reg=%5
  Single Issue       : false;
SU(4):   %280:fpr64 = FSQRTDr %5:fpr64, debug-location !311; ep.c:211:22
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1 Reg=%5
  Successors:
    SU(5): Data Latency=1 Reg=%280
  Single Issue       : false;
SU(5):   FCMPDrr %280:fpr64, %280:fpr64, implicit-def $nzcv, debug-location !312; ep.c:211:20
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%280
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 7, %bb.35, implicit killed $nzcv, debug-location !312; ep.c:211:20
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) FCMPDrr %280:fpr64, %280:fpr64, implicit-def $nzcv, debug-location !312; ep.c:211:20
  Ready @1c
  BotQ.A TopLatency SU(5) 6c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %280:fpr64 = FSQRTDr %5:fpr64, debug-location !311; ep.c:211:22
  Ready @2c
  BotQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %5:fpr64 = FDIVDrr %240:fpr64, %241:fpr64, debug-location !310; ep.c:211:42
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %240:fpr64 = FMULDrr %238:fpr64, %239:fpr64, debug-location !308; ep.c:211:32
  Ready @4c
  BotQ.A BotLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %238:fpr64 = COPY killed $d0, debug-location !307; ep.c:211:34
  Ready @5c
BotQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %241:fpr64 = LDRDui %stack.2.t1, 0, debug-location !309 :: (dereferenceable load 8 from %ir.t1); ep.c:211:44
  Ready @7c
  BotQ.A BotLatency SU(2) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.33 ***
SU(2):   %241:fpr64 = LDRDui %stack.2.t1, 0, debug-location !309 :: (dereferenceable load 8 from %ir.t1); ep.c:211:44
SU(0):   %238:fpr64 = COPY $d0, debug-location !307; ep.c:211:34
SU(1):   %240:fpr64 = FMULDrr %238:fpr64, %239:fpr64, debug-location !308; ep.c:211:32
SU(3):   %5:fpr64 = FDIVDrr %240:fpr64, %241:fpr64, debug-location !310; ep.c:211:42
SU(4):   %280:fpr64 = FSQRTDr %5:fpr64, debug-location !311; ep.c:211:22
SU(5):   FCMPDrr %280:fpr64, %280:fpr64, implicit-def $nzcv, debug-location !312; ep.c:211:20

********** MI Scheduling **********
main:%bb.35 if.then92.split
  From: STRDui %280:fpr64, %stack.3.t2, 0, debug-location !312 :: (store 8 into %ir.t2); ep.c:211:20
    To: End RegionInstrs: 24
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=5
GPR32=2
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
FPR8+ZPR_4b=5
FPR8+ZPR4_with_zsub2_in_ZPR_4b=5
FPR8+ZPR4_with_zsub3_in_ZPR_4b=5
FPR8+ZPR4_with_zsub_in_FPR128_lo=5
ZPR=5
Live In: %267 %0 %280 
Live Out: %267 %0 
Live Thru: FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %267
  UpdateRegP: SU(15) %256:fpr64 = LDRDroX %267:gpr64common, %254:gpr64, 0, 0, debug-location !324 :: (load 8 from %ir.arrayidx103); ep.c:215:24
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(17) STRDroX %258:fpr64, %267:gpr64common, %254:gpr64, 0, 0, debug-location !328 :: (store 8 into %ir.arrayidx106); ep.c:215:22
              to FPR8 1    GPR32 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  LiveReg: %0
  UpdateRegP: SU(16) %258:fpr64 = FADDDrr %256:fpr64, %0:fpr64, debug-location !325; ep.c:215:29
              to 
Top Pressure:
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
Bottom Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
Excess PSets: 
SU(0):   STRDui %280:fpr64, %stack.3.t2, 0, debug-location !312 :: (store 8 into %ir.t2); ep.c:211:20
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(1):   %243:fpr64 = LDRDui %stack.6.x1, 0, debug-location !313 :: (dereferenceable load 8 from %ir.x1); ep.c:212:23
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(2): Data Latency=4 Reg=%243
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(2):   %244:fpr64 = FMULDrr %243:fpr64, %280:fpr64, debug-location !315; ep.c:212:26
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(1): Data Latency=4 Reg=%243
  Successors:
    SU(19): Data Latency=1 Reg=%244
    SU(10): Data Latency=1 Reg=%244
    SU(7): Data Latency=1 Reg=%244
    SU(3): Data Latency=1 Reg=%244
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(3):   STRDui %244:fpr64, %stack.4.t3, 0, debug-location !316 :: (store 8 into %ir.t3); ep.c:212:20
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%244
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(4):   %245:fpr64 = LDRDui %stack.7.x2, 0, debug-location !317 :: (dereferenceable load 8 from %ir.x2); ep.c:213:23
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(5): Data Latency=4 Reg=%245
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(5):   %246:fpr64 = FMULDrr %245:fpr64, %280:fpr64, debug-location !319; ep.c:213:26
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(4): Data Latency=4 Reg=%245
  Successors:
    SU(22): Data Latency=1 Reg=%246
    SU(10): Data Latency=1 Reg=%246
    SU(8): Data Latency=1 Reg=%246
    SU(6): Data Latency=1 Reg=%246
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(6):   STRDui %246:fpr64, %stack.5.t4, 0, debug-location !320 :: (store 8 into %ir.t4); ep.c:213:20
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%246
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(7):   %247:fpr64 = FABSDr %244:fpr64, debug-location !321; ep.c:214:21
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 11
  Predecessors:
    SU(2): Data Latency=1 Reg=%244
  Successors:
    SU(9): Data Latency=1 Reg=%247
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   %248:fpr64 = FABSDr %246:fpr64, debug-location !321; ep.c:214:21
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 11
  Predecessors:
    SU(5): Data Latency=1 Reg=%246
  Successors:
    SU(9): Data Latency=1 Reg=%248
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   FCMPDrr %247:fpr64, %248:fpr64, implicit-def $nzcv, debug-location !321; ep.c:214:21
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 10
  Predecessors:
    SU(8): Data Latency=1 Reg=%248
    SU(7): Data Latency=1 Reg=%247
  Successors:
    SU(10): Data Latency=1 Reg=$nzcv
  Pressure Diff      : FPR8 2    FPR8+ZPR_3b 2    FPR8+ZPR4_with_zsub1_in_ZPR_3b 2    FPR8+ZPR4_with_zsub2_in_ZPR_3b 2    FPR8+ZPR4_with_zsub3_in_ZPR_3b 2    FPR8+ZPR_4b 2    FPR8+ZPR4_with_zsub2_in_ZPR_4b 2    FPR8+ZPR4_with_zsub3_in_ZPR_4b 2    FPR8+ZPR4_with_zsub_in_FPR128_lo 2    ZPR 2
  Single Issue       : false;
SU(10):   %249:fpr64 = FCSELDrrr %244:fpr64, %246:fpr64, 12, implicit killed $nzcv, debug-location !321; ep.c:214:21
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 9
  Predecessors:
    SU(9): Data Latency=1 Reg=$nzcv
    SU(5): Data Latency=1 Reg=%246
    SU(2): Data Latency=1 Reg=%244
  Successors:
    SU(11): Data Latency=1 Reg=%249
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(11):   %250:fpr64 = FABSDr %249:fpr64, debug-location !321; ep.c:214:21
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 8
  Predecessors:
    SU(10): Data Latency=1 Reg=%249
  Successors:
    SU(12): Data Latency=1 Reg=%250
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   undef %252.sub_32:gpr64 = FCVTZSUWDr %250:fpr64, debug-location !321; ep.c:214:21
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 7
  Predecessors:
    SU(11): Data Latency=1 Reg=%250
  Successors:
    SU(14): Data Latency=1 Reg=%252
    SU(13): Data Latency=1 Reg=%252
  Pressure Diff      : FPR8 1    GPR32 -1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(13):   STRWui %252.sub_32:gpr64, %stack.22.l, 0, debug-location !322 :: (store 4 into %ir.l); ep.c:214:19
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%252
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(14):   %254:gpr64 = SBFMXri %252:gpr64, 61, 31, debug-location !324; ep.c:215:24
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 6
  Predecessors:
    SU(12): Data Latency=1 Reg=%252
  Successors:
    SU(17): Data Latency=1 Reg=%254
    SU(15): Data Latency=1 Reg=%254
  Pressure Diff      : 
  Single Issue       : false;
SU(15):   %256:fpr64 = LDRDroX %267:gpr64common, %254:gpr64, 0, 0, debug-location !324 :: (load 8 from %ir.arrayidx103); ep.c:215:24
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 5
  Predecessors:
    SU(14): Data Latency=1 Reg=%254
  Successors:
    SU(16): Data Latency=4 Reg=%256
    SU(17): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(16):   %258:fpr64 = FADDDrr %256:fpr64, %0:fpr64, debug-location !325; ep.c:215:29
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 1
  Predecessors:
    SU(15): Data Latency=4 Reg=%256
  Successors:
    SU(17): Data Latency=1 Reg=%258
  Pressure Diff      : 
  Single Issue       : false;
SU(17):   STRDroX %258:fpr64, %267:gpr64common, %254:gpr64, 0, 0, debug-location !328 :: (store 8 into %ir.arrayidx106); ep.c:215:22
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(16): Data Latency=1 Reg=%258
    SU(15): Ord  Latency=0 Memory
    SU(14): Data Latency=1 Reg=%254
  Pressure Diff      : FPR8 1    GPR32 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(18):   %259:fpr64 = LDRDui %stack.8.sx, 0, debug-location !329 :: (dereferenceable load 8 from %ir.sx); ep.c:216:22
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(19): Data Latency=4 Reg=%259
    SU(20): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(19):   %260:fpr64 = FADDDrr %259:fpr64, %244:fpr64, debug-location !331; ep.c:216:25
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=%244
    SU(18): Data Latency=4 Reg=%259
  Successors:
    SU(20): Data Latency=1 Reg=%260
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(20):   STRDui %260:fpr64, %stack.8.sx, 0, debug-location !332 :: (store 8 into %ir.sx); ep.c:216:20
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(19): Data Latency=1 Reg=%260
    SU(18): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(21):   %261:fpr64 = LDRDui %stack.9.sy, 0, debug-location !333 :: (dereferenceable load 8 from %ir.sy); ep.c:217:22
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(22): Data Latency=4 Reg=%261
    SU(23): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(22):   %262:fpr64 = FADDDrr %261:fpr64, %246:fpr64, debug-location !335; ep.c:217:25
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(5): Data Latency=1 Reg=%246
    SU(21): Data Latency=4 Reg=%261
  Successors:
    SU(23): Data Latency=1 Reg=%262
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(23):   STRDui %262:fpr64, %stack.9.sy, 0, debug-location !336 :: (store 8 into %ir.sy); ep.c:217:20
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(22): Data Latency=1 Reg=%262
    SU(21): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
Critical Path(GS-RR ): 16
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 23 20 17 13 6 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 18 21 
Picking from Bot:
  Cand SU(23) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(23) STRDui %262:fpr64, %stack.9.sy, 0, debug-location !336 :: (store 8 into %ir.sy); ep.c:217:20
Bottom Pressure:
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %262
  UpdateRegP: SU(23) STRDui %262:fpr64, %stack.9.sy, 0, debug-location !336 :: (store 8 into %ir.sy); ep.c:217:20
              to 
  Ready @0c
  BotQ.A TopLatency SU(23) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 20 17 13 6 3 22 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 18 21 
BotQ.A RemLatency SU(17) 16c
  BotQ.A RemainingLatency 16 + 1c > CritPath 16
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(20) BOT-PATH                  6 cycles 
  Cand SU(17) BOT-PATH                  16 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(17) STRDroX %258:fpr64, %267:gpr64common, %254:gpr64, 0, 0, debug-location !328 :: (store 8 into %ir.arrayidx106); ep.c:215:22
Bottom Pressure:
FPR8=3
GPR32=2
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  LiveReg: %258
  UpdateRegP: SU(17) STRDroX %258:fpr64, %267:gpr64common, %254:gpr64, 0, 0, debug-location !328 :: (store 8 into %ir.arrayidx106); ep.c:215:22
              to GPR32 1
  LiveReg: %254
  UpdateRegP: SU(15) %256:fpr64 = LDRDroX %267:gpr64common, %254:gpr64, 0, 0, debug-location !324 :: (load 8 from %ir.arrayidx103); ep.c:215:24
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(17) STRDroX %258:fpr64, %267:gpr64common, %254:gpr64, 0, 0, debug-location !328 :: (store 8 into %ir.arrayidx106); ep.c:215:22
              to 
  Ready @1c
  BotQ.A TopLatency SU(17) 16c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 20 22 13 6 3 16 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 18 21 
BotQ.A RemLatency SU(16) 15c
  BotQ.A RemainingLatency 15 + 2c > CritPath 16
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(20) BOT-PATH                  6 cycles 
  Cand SU(16) BOT-PATH                  15 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(16) %258:fpr64 = FADDDrr %256:fpr64, %0:fpr64, debug-location !325; ep.c:215:29
Bottom Pressure:
FPR8=3
GPR32=2
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  LiveReg: %256
  UpdateRegP: SU(16) %258:fpr64 = FADDDrr %256:fpr64, %0:fpr64, debug-location !325; ep.c:215:29
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @2c
  BotQ.A BotLatency SU(16) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 15 
Queue BotQ.A: 0 20 22 13 6 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 18 21 
BotQ.A RemLatency SU(13) 10c
BotQ.A RemLatency SU(15) 11c
  BotQ.A RemainingLatency 14 + 3c > CritPath 16
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(20) BOT-PATH                  6 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(20) STRDui %260:fpr64, %stack.8.sx, 0, debug-location !332 :: (store 8 into %ir.sx); ep.c:216:20
Bottom Pressure:
FPR8=4
GPR32=2
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  LiveReg: %260
  UpdateRegP: SU(20) STRDui %260:fpr64, %stack.8.sx, 0, debug-location !332 :: (store 8 into %ir.sx); ep.c:216:20
              to 
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 15 
Queue BotQ.A: 0 3 22 13 6 19 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 18 21 
BotQ.A RemLatency SU(13) 10c
BotQ.A RemLatency SU(15) 11c
  BotQ.A RemainingLatency 13 + 4c > CritPath 16
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) BOT-PATH                  5 cycles 
  Cand SU(22) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(22) %262:fpr64 = FADDDrr %261:fpr64, %246:fpr64, debug-location !335; ep.c:217:25
Bottom Pressure:
FPR8=5
GPR32=2
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
FPR8+ZPR_4b=5
FPR8+ZPR4_with_zsub2_in_ZPR_4b=5
FPR8+ZPR4_with_zsub3_in_ZPR_4b=5
FPR8+ZPR4_with_zsub_in_FPR128_lo=5
ZPR=5
  LiveReg: %261
  UpdateRegP: SU(22) %262:fpr64 = FADDDrr %261:fpr64, %246:fpr64, debug-location !335; ep.c:217:25
              to 
  LiveReg: %246
  UpdateRegP: SU(6) STRDui %246:fpr64, %stack.5.t4, 0, debug-location !320 :: (store 8 into %ir.t4); ep.c:213:20
              to 
  UpdateRegP: SU(8) %248:fpr64 = FABSDr %246:fpr64, debug-location !321; ep.c:214:21
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(10) %249:fpr64 = FCSELDrrr %244:fpr64, %246:fpr64, 12, implicit killed $nzcv, debug-location !321; ep.c:214:21
              to 
  UpdateRegP: SU(22) %262:fpr64 = FADDDrr %261:fpr64, %246:fpr64, debug-location !335; ep.c:217:25
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 15 21 
Queue BotQ.A: 0 3 19 13 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 18 21 
BotQ.A RemLatency SU(13) 10c
BotQ.A RemLatency SU(15) 11c
  BotQ.A RemainingLatency 12 + 5c > CritPath 16
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) BOT-PATH                  5 cycles 
  Cand SU(19) ORDER                              
  Cand SU(13) REG-MAX    GPR32:1                    
  Cand SU(6) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(6) STRDui %246:fpr64, %stack.5.t4, 0, debug-location !320 :: (store 8 into %ir.t4); ep.c:213:20
Bottom Pressure:
FPR8=5
GPR32=2
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
FPR8+ZPR_4b=5
FPR8+ZPR4_with_zsub2_in_ZPR_4b=5
FPR8+ZPR4_with_zsub3_in_ZPR_4b=5
FPR8+ZPR4_with_zsub_in_FPR128_lo=5
ZPR=5
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 21 
Queue BotQ.A: 0 3 19 13 15 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 18 21 
BotQ.A RemLatency SU(15) 11c
  BotQ.A RemainingLatency 11 + 6c > CritPath 16
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) BOT-PATH                  5 cycles 
  Cand SU(19) ORDER                              
  Cand SU(13) REG-MAX    GPR32:1                    
  Cand SU(15) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(15) %256:fpr64 = LDRDroX %267:gpr64common, %254:gpr64, 0, 0, debug-location !324 :: (load 8 from %ir.arrayidx103); ep.c:215:24
Bottom Pressure:
FPR8=4
GPR32=2
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  Ready @6c
  BotQ.A BotLatency SU(15) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 21 
Queue BotQ.A: 0 3 19 13 14 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 18 21 
BotQ.A RemLatency SU(13) 10c
  BotQ.A RemainingLatency 10 + 7c > CritPath 16
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) BOT-PATH                  5 cycles 
  Cand SU(19) ORDER                              
  Cand SU(14) BOT-PATH                  10 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(14) %254:gpr64 = SBFMXri %252:gpr64, 61, 31, debug-location !324; ep.c:215:24
Bottom Pressure:
FPR8=4
GPR32=2
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  LiveReg: %252
  UpdateRegP: SU(13) STRWui %252.sub_32:gpr64, %stack.22.l, 0, debug-location !322 :: (store 4 into %ir.l); ep.c:214:19
              to 
  UpdateRegP: SU(14) %254:gpr64 = SBFMXri %252:gpr64, 61, 31, debug-location !324; ep.c:215:24
              to GPR32 -1
  Ready @7c
  BotQ.A BotLatency SU(14) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 19 13 21 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 18 21 
BotQ.A RemLatency SU(13) 10c
  BotQ.A RemainingLatency 10 + 8c > CritPath 16
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) BOT-PATH                  5 cycles 
  Cand SU(19) ORDER                              
  Cand SU(13) BOT-PATH                  10 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(13) STRWui %252.sub_32:gpr64, %stack.22.l, 0, debug-location !322 :: (store 4 into %ir.l); ep.c:214:19
Bottom Pressure:
FPR8=4
GPR32=2
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  Ready @8c
  BotQ.A TopLatency SU(13) 10c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 19 21 12 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 18 21 
BotQ.A RemLatency SU(12) 9c
  BotQ.A RemainingLatency 9 + 9c > CritPath 16
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) BOT-PATH                  5 cycles 
  Cand SU(19) ORDER                              
  Cand SU(12) BOT-PATH                  9 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(12) undef %252.sub_32:gpr64 = FCVTZSUWDr %250:fpr64, debug-location !321; ep.c:214:21
Bottom Pressure:
FPR8=5
GPR32=1
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
FPR8+ZPR_4b=5
FPR8+ZPR4_with_zsub2_in_ZPR_4b=5
FPR8+ZPR4_with_zsub3_in_ZPR_4b=5
FPR8+ZPR4_with_zsub_in_FPR128_lo=5
ZPR=5
  LiveReg: %250
  UpdateRegP: SU(12) undef %252.sub_32:gpr64 = FCVTZSUWDr %250:fpr64, debug-location !321; ep.c:214:21
              to GPR32 -1
  Ready @9c
  BotQ.A BotLatency SU(12) 7c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 19 21 11 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 18 21 
BotQ.A RemLatency SU(11) 8c
  BotQ.A RemainingLatency 8 + 10c > CritPath 16
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) BOT-PATH                  5 cycles 
  Cand SU(19) ORDER                              
  Cand SU(21) REG-MAX                            
  Cand SU(11) BOT-PATH                  8 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(11) %250:fpr64 = FABSDr %249:fpr64, debug-location !321; ep.c:214:21
Bottom Pressure:
FPR8=5
GPR32=1
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
FPR8+ZPR_4b=5
FPR8+ZPR4_with_zsub2_in_ZPR_4b=5
FPR8+ZPR4_with_zsub3_in_ZPR_4b=5
FPR8+ZPR4_with_zsub_in_FPR128_lo=5
ZPR=5
  LiveReg: %249
  UpdateRegP: SU(11) %250:fpr64 = FABSDr %249:fpr64, debug-location !321; ep.c:214:21
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @10c
  BotQ.A BotLatency SU(11) 8c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 19 21 10 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 18 21 
BotQ.A RemLatency SU(10) 7c
  BotQ.A RemainingLatency 7 + 11c > CritPath 16
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) BOT-PATH                  5 cycles 
  Cand SU(19) ORDER                              
  Cand SU(21) REG-MAX                            
  Cand SU(10) BOT-PATH                  7 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(10) %249:fpr64 = FCSELDrrr %244:fpr64, %246:fpr64, 12, implicit killed $nzcv, debug-location !321; ep.c:214:21
Bottom Pressure:
FPR8=5
GPR32=1
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
FPR8+ZPR_4b=5
FPR8+ZPR4_with_zsub2_in_ZPR_4b=5
FPR8+ZPR4_with_zsub3_in_ZPR_4b=5
FPR8+ZPR4_with_zsub_in_FPR128_lo=5
ZPR=5
  LiveReg: %244
  UpdateRegP: SU(3) STRDui %244:fpr64, %stack.4.t3, 0, debug-location !316 :: (store 8 into %ir.t3); ep.c:212:20
              to 
  UpdateRegP: SU(7) %247:fpr64 = FABSDr %244:fpr64, debug-location !321; ep.c:214:21
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(10) %249:fpr64 = FCSELDrrr %244:fpr64, %246:fpr64, 12, implicit $nzcv, debug-location !321; ep.c:214:21
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(19) %260:fpr64 = FADDDrr %259:fpr64, %244:fpr64, debug-location !331; ep.c:216:25
              to 
  Ready @11c
  BotQ.A BotLatency SU(10) 9c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 19 21 9 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 18 21 
BotQ.A RemLatency SU(9) 6c
  BotQ.A RemainingLatency 6 + 12c > CritPath 16
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) REG-MAX                            
  Cand SU(19) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(19) %260:fpr64 = FADDDrr %259:fpr64, %244:fpr64, debug-location !331; ep.c:216:25
Bottom Pressure:
FPR8=5
GPR32=1
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
FPR8+ZPR_4b=5
FPR8+ZPR4_with_zsub2_in_ZPR_4b=5
FPR8+ZPR4_with_zsub3_in_ZPR_4b=5
FPR8+ZPR4_with_zsub_in_FPR128_lo=5
ZPR=5
  LiveReg: %259
  UpdateRegP: SU(19) %260:fpr64 = FADDDrr %259:fpr64, %244:fpr64, debug-location !331; ep.c:216:25
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 18 
Queue BotQ.A: 0 3 9 21 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 18 21 
BotQ.A RemLatency SU(9) 6c
  BotQ.A RemainingLatency 6 + 13c > CritPath 16
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(3) STRDui %244:fpr64, %stack.4.t3, 0, debug-location !316 :: (store 8 into %ir.t3); ep.c:212:20
Bottom Pressure:
FPR8=5
GPR32=1
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
FPR8+ZPR_4b=5
FPR8+ZPR4_with_zsub2_in_ZPR_4b=5
FPR8+ZPR4_with_zsub3_in_ZPR_4b=5
FPR8+ZPR4_with_zsub_in_FPR128_lo=5
ZPR=5
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 18 
Queue BotQ.A: 0 21 9 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 18 21 
BotQ.A RemLatency SU(9) 6c
  BotQ.A RemainingLatency 6 + 14c > CritPath 16
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(21) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(21) %261:fpr64 = LDRDui %stack.9.sy, 0, debug-location !333 :: (dereferenceable load 8 from %ir.sy); ep.c:217:22
Bottom Pressure:
FPR8=4
GPR32=1
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 18 
Queue BotQ.A: 0 9 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 18 
BotQ.A RemLatency SU(9) 6c
  BotQ.A RemainingLatency 6 + 15c > CritPath 16
Picking from Bot:
  Cand SU(0) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(0) STRDui %280:fpr64, %stack.3.t2, 0, debug-location !312 :: (store 8 into %ir.t2); ep.c:211:20
Bottom Pressure:
FPR8=5
GPR32=1
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
FPR8+ZPR_4b=5
FPR8+ZPR4_with_zsub2_in_ZPR_4b=5
FPR8+ZPR4_with_zsub3_in_ZPR_4b=5
FPR8+ZPR4_with_zsub_in_FPR128_lo=5
ZPR=5
  LiveReg: %280
  UpdateRegP: SU(0) STRDui %280:fpr64, %stack.3.t2, 0, debug-location !312 :: (store 8 into %ir.t2); ep.c:211:20
              to 
  UpdateRegP: SU(2) %244:fpr64 = FMULDrr %243:fpr64, %280:fpr64, debug-location !315; ep.c:212:26
              to 
  UpdateRegP: SU(5) %246:fpr64 = FMULDrr %245:fpr64, %280:fpr64, debug-location !319; ep.c:213:26
              to 
  Ready @15c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 18 
Queue TopQ.P: 
Queue TopQ.A: 18 1 4 
BotQ.A RemLatency SU(9) 6c
  BotQ.A RemainingLatency 6 + 16c > CritPath 16
Picking from Bot:
  Cand SU(9) ORDER                              
  Cand SU(18) REG-MAX                            
Picking from Top:
  Cand SU(18) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(18) %259:fpr64 = LDRDui %stack.8.sx, 0, debug-location !329 :: (dereferenceable load 8 from %ir.sx); ep.c:216:22
Bottom Pressure:
FPR8=4
GPR32=1
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Pick Bot ONLY1     
Scheduling SU(9) FCMPDrr %247:fpr64, %248:fpr64, implicit-def $nzcv, debug-location !321; ep.c:214:21
Bottom Pressure:
FPR8=6
GPR32=1
FPR8+ZPR_3b=6
FPR8+ZPR4_with_zsub1_in_ZPR_3b=6
FPR8+ZPR4_with_zsub2_in_ZPR_3b=6
FPR8+ZPR4_with_zsub3_in_ZPR_3b=6
FPR8+ZPR_4b=6
FPR8+ZPR4_with_zsub2_in_ZPR_4b=6
FPR8+ZPR4_with_zsub3_in_ZPR_4b=6
FPR8+ZPR4_with_zsub_in_FPR128_lo=6
ZPR=6
  LiveReg: %247
  UpdateRegP: SU(9) FCMPDrr %247:fpr64, %248:fpr64, implicit-def $nzcv, debug-location !321; ep.c:214:21
              to FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  LiveReg: %248
  UpdateRegP: SU(9) FCMPDrr %247:fpr64, %248:fpr64, implicit-def $nzcv, debug-location !321; ep.c:214:21
              to 
  Ready @17c
  BotQ.A TopLatency SU(9) 6c
  BotQ.A BotLatency SU(9) 10c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 7 
Queue TopQ.P: 
Queue TopQ.A: 4 1 
  BotQ.A RemainingLatency 0 + 18c > CritPath 16
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %248:fpr64 = FABSDr %246:fpr64, debug-location !321; ep.c:214:21
Bottom Pressure:
FPR8=5
GPR32=1
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
FPR8+ZPR_4b=5
FPR8+ZPR4_with_zsub2_in_ZPR_4b=5
FPR8+ZPR4_with_zsub3_in_ZPR_4b=5
FPR8+ZPR4_with_zsub_in_FPR128_lo=5
ZPR=5
  Ready @18c
  BotQ.A BotLatency SU(8) 11c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 5 
Queue TopQ.P: 
Queue TopQ.A: 4 1 
  BotQ.A RemainingLatency 0 + 19c > CritPath 16
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(7) %247:fpr64 = FABSDr %244:fpr64, debug-location !321; ep.c:214:21
Bottom Pressure:
FPR8=4
GPR32=1
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  Ready @19c
  BotQ.A TopLatency SU(7) 5c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 2 
Queue TopQ.P: 
Queue TopQ.A: 4 1 
  BotQ.A RemainingLatency 0 + 20c > CritPath 16
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %246:fpr64 = FMULDrr %245:fpr64, %280:fpr64, debug-location !319; ep.c:213:26
Bottom Pressure:
FPR8=4
GPR32=1
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  LiveReg: %245
  UpdateRegP: SU(5) %246:fpr64 = FMULDrr %245:fpr64, %280:fpr64, debug-location !319; ep.c:213:26
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @20c
  BotQ.A BotLatency SU(5) 12c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %244:fpr64 = FMULDrr %243:fpr64, %280:fpr64, debug-location !315; ep.c:212:26
Bottom Pressure:
FPR8=4
GPR32=1
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  LiveReg: %243
  UpdateRegP: SU(2) %244:fpr64 = FMULDrr %243:fpr64, %280:fpr64, debug-location !315; ep.c:212:26
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @21c
  BotQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 24 BotQ.A
Queue BotQ.P: 1 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %245:fpr64 = LDRDui %stack.7.x2, 0, debug-location !317 :: (dereferenceable load 8 from %ir.x2); ep.c:213:23
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  Ready @24c
  BotQ.A BotLatency SU(4) 16c
  *** Max MOps 1 at cycle 24
Cycle: 25 BotQ.A
BotQ.A @25c
  Retired: 23
  Executed: 25c
  Critical: 23c, 23 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %243:fpr64 = LDRDui %stack.6.x1, 0, debug-location !313 :: (dereferenceable load 8 from %ir.x1); ep.c:212:23
Bottom Pressure:
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @25c
  *** Max MOps 1 at cycle 25
Cycle: 26 BotQ.A
BotQ.A @26c
  Retired: 24
  Executed: 26c
  Critical: 24c, 24 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.35 ***
SU(1):   %243:fpr64 = LDRDui %stack.6.x1, 0, debug-location !313 :: (dereferenceable load 8 from %ir.x1); ep.c:212:23
SU(4):   %245:fpr64 = LDRDui %stack.7.x2, 0, debug-location !317 :: (dereferenceable load 8 from %ir.x2); ep.c:213:23
SU(2):   %244:fpr64 = FMULDrr %243:fpr64, %280:fpr64, debug-location !315; ep.c:212:26
SU(5):   %246:fpr64 = FMULDrr %245:fpr64, %280:fpr64, debug-location !319; ep.c:213:26
SU(7):   %247:fpr64 = FABSDr %244:fpr64, debug-location !321; ep.c:214:21
SU(8):   %248:fpr64 = FABSDr %246:fpr64, debug-location !321; ep.c:214:21
SU(9):   FCMPDrr %247:fpr64, %248:fpr64, implicit-def $nzcv, debug-location !321; ep.c:214:21
SU(18):   %259:fpr64 = LDRDui %stack.8.sx, 0, debug-location !329 :: (dereferenceable load 8 from %ir.sx); ep.c:216:22
SU(0):   STRDui %280:fpr64, %stack.3.t2, 0, debug-location !312 :: (store 8 into %ir.t2); ep.c:211:20
SU(21):   %261:fpr64 = LDRDui %stack.9.sy, 0, debug-location !333 :: (dereferenceable load 8 from %ir.sy); ep.c:217:22
SU(3):   STRDui %244:fpr64, %stack.4.t3, 0, debug-location !316 :: (store 8 into %ir.t3); ep.c:212:20
SU(19):   %260:fpr64 = FADDDrr %259:fpr64, %244:fpr64, debug-location !331; ep.c:216:25
SU(10):   %249:fpr64 = FCSELDrrr %244:fpr64, %246:fpr64, 12, implicit $nzcv, debug-location !321; ep.c:214:21
SU(11):   %250:fpr64 = FABSDr %249:fpr64, debug-location !321; ep.c:214:21
SU(12):   undef %252.sub_32:gpr64 = FCVTZSUWDr %250:fpr64, debug-location !321; ep.c:214:21
SU(13):   STRWui %252.sub_32:gpr64, %stack.22.l, 0, debug-location !322 :: (store 4 into %ir.l); ep.c:214:19
SU(14):   %254:gpr64 = SBFMXri %252:gpr64, 61, 31, debug-location !324; ep.c:215:24
SU(15):   %256:fpr64 = LDRDroX %267:gpr64common, %254:gpr64, 0, 0, debug-location !324 :: (load 8 from %ir.arrayidx103); ep.c:215:24
SU(6):   STRDui %246:fpr64, %stack.5.t4, 0, debug-location !320 :: (store 8 into %ir.t4); ep.c:213:20
SU(22):   %262:fpr64 = FADDDrr %261:fpr64, %246:fpr64, debug-location !335; ep.c:217:25
SU(20):   STRDui %260:fpr64, %stack.8.sx, 0, debug-location !332 :: (store 8 into %ir.sx); ep.c:216:20
SU(16):   %258:fpr64 = FADDDrr %256:fpr64, %0:fpr64, debug-location !325; ep.c:215:29
SU(17):   STRDroX %258:fpr64, %267:gpr64common, %254:gpr64, 0, 0, debug-location !328 :: (store 8 into %ir.arrayidx106); ep.c:215:22
SU(23):   STRDui %262:fpr64, %stack.9.sy, 0, debug-location !336 :: (store 8 into %ir.sy); ep.c:217:20

********** MI Scheduling **********
main:%bb.36 for.inc110
  From: %263:gpr32common = LDRWui %stack.19.i, 0, debug-location !338 :: (dereferenceable load 4 from %ir.i); ep.c:206:30
    To: B %bb.31, debug-location !339; ep.c:206:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %263:gpr32common = LDRWui %stack.19.i, 0, debug-location !338 :: (dereferenceable load 4 from %ir.i); ep.c:206:30
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%263
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %264:gpr32common = nsw ADDWri %263:gpr32common, 1, 0, debug-location !338; ep.c:206:30
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%263
  Successors:
    SU(2): Data Latency=1 Reg=%264
  Single Issue       : false;
SU(2):   STRWui %264:gpr32common, %stack.19.i, 0, debug-location !338 :: (store 4 into %ir.i); ep.c:206:30
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%264
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.31, debug-location !339; ep.c:206:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %264:gpr32common, %stack.19.i, 0, debug-location !338 :: (store 4 into %ir.i); ep.c:206:30
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %264:gpr32common = nsw ADDWri %263:gpr32common, 1, 0, debug-location !338; ep.c:206:30
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %263:gpr32common = LDRWui %stack.19.i, 0, debug-location !338 :: (dereferenceable load 4 from %ir.i); ep.c:206:30
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.36 ***
SU(0):   %263:gpr32common = LDRWui %stack.19.i, 0, debug-location !338 :: (dereferenceable load 4 from %ir.i); ep.c:206:30
SU(1):   %264:gpr32common = nsw ADDWri %263:gpr32common, 1, 0, debug-location !338; ep.c:206:30
SU(2):   STRWui %264:gpr32common, %stack.19.i, 0, debug-location !338 :: (store 4 into %ir.i); ep.c:206:30

********** MI Scheduling **********
main:%bb.39 for.inc116
  From: %222:gpr32common = LDRWui %stack.23.k, 0, debug-location !346 :: (dereferenceable load 4 from %ir.k); ep.c:172:27
    To: B %bb.17, debug-location !347; ep.c:172:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %222:gpr32common = LDRWui %stack.23.k, 0, debug-location !346 :: (dereferenceable load 4 from %ir.k); ep.c:172:27
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%222
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %223:gpr32common = nsw ADDWri %222:gpr32common, 1, 0, debug-location !346; ep.c:172:27
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%222
  Successors:
    SU(2): Data Latency=1 Reg=%223
  Single Issue       : false;
SU(2):   STRWui %223:gpr32common, %stack.23.k, 0, debug-location !346 :: (store 4 into %ir.k); ep.c:172:27
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%223
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.17, debug-location !347; ep.c:172:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %223:gpr32common, %stack.23.k, 0, debug-location !346 :: (store 4 into %ir.k); ep.c:172:27
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %223:gpr32common = nsw ADDWri %222:gpr32common, 1, 0, debug-location !346; ep.c:172:27
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %222:gpr32common = LDRWui %stack.23.k, 0, debug-location !346 :: (dereferenceable load 4 from %ir.k); ep.c:172:27
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.39 ***
SU(0):   %222:gpr32common = LDRWui %stack.23.k, 0, debug-location !346 :: (dereferenceable load 4 from %ir.k); ep.c:172:27
SU(1):   %223:gpr32common = nsw ADDWri %222:gpr32common, 1, 0, debug-location !346; ep.c:172:27
SU(2):   STRWui %223:gpr32common, %stack.23.k, 0, debug-location !346 :: (store 4 into %ir.k); ep.c:172:27

********** MI Scheduling **********
main:%bb.41 for.cond119
  From: %71:gpr32common = LDRWui %stack.19.i, 0, debug-location !353 :: (dereferenceable load 4 from %ir.i); ep.c:225:17
    To: Bcc 12, %bb.43, implicit $nzcv, debug-location !356; ep.c:225:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %71:gpr32common = LDRWui %stack.19.i, 0, debug-location !353 :: (dereferenceable load 4 from %ir.i); ep.c:225:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%71
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %71:gpr32common, 9, 0, implicit-def $nzcv, debug-location !356; ep.c:225:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%71
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.43, implicit $nzcv, debug-location !356; ep.c:225:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %71:gpr32common, 9, 0, implicit-def $nzcv, debug-location !356; ep.c:225:5
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %71:gpr32common = LDRWui %stack.19.i, 0, debug-location !353 :: (dereferenceable load 4 from %ir.i); ep.c:225:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.41 ***
SU(0):   %71:gpr32common = LDRWui %stack.19.i, 0, debug-location !353 :: (dereferenceable load 4 from %ir.i); ep.c:225:17
SU(1):   dead $wzr = SUBSWri %71:gpr32common, 9, 0, implicit-def $nzcv, debug-location !356; ep.c:225:5

********** MI Scheduling **********
main:%bb.42 for.body122
  From: %175:fpr64 = LDRDui %stack.13.gc, 0, debug-location !357 :: (dereferenceable load 8 from %ir.gc); ep.c:226:14
    To: B %bb.41, debug-location !364; ep.c:225:5
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %175:fpr64 = LDRDui %stack.13.gc, 0, debug-location !357 :: (dereferenceable load 8 from %ir.gc); ep.c:226:14
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=%175
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %176:gpr64common = LDRSWui %stack.19.i, 0, debug-location !359 :: (dereferenceable load 4 from %ir.i); ep.c:226:21
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(5): Data Latency=4 Reg=%176
    SU(2): Data Latency=4 Reg=%176
    SU(6): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %179:fpr64 = LDRDroX %267:gpr64common, %176:gpr64common, 0, 1, debug-location !360 :: (load 8 from %ir.arrayidx124); ep.c:226:19
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%176
  Successors:
    SU(3): Data Latency=4 Reg=%179
  Single Issue       : false;
SU(3):   %180:fpr64 = FADDDrr %175:fpr64, %179:fpr64, debug-location !361; ep.c:226:17
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=%179
    SU(0): Data Latency=4 Reg=%175
  Successors:
    SU(4): Data Latency=1 Reg=%180
  Single Issue       : false;
SU(4):   STRDui %180:fpr64, %stack.13.gc, 0, debug-location !362 :: (store 8 into %ir.gc); ep.c:226:12
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%180
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
SU(5):   %181:gpr32common = nsw ADDWri %176.sub_32:gpr64common, 1, 0, debug-location !363; ep.c:225:26
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%176
  Successors:
    SU(6): Data Latency=1 Reg=%181
  Single Issue       : false;
SU(6):   STRWui %181:gpr32common, %stack.19.i, 0, debug-location !363 :: (store 4 into %ir.i); ep.c:225:26
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%181
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.41, debug-location !364; ep.c:225:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) STRWui %181:gpr32common, %stack.19.i, 0, debug-location !363 :: (store 4 into %ir.i); ep.c:225:26
  Ready @0c
  BotQ.A TopLatency SU(6) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(4) 9c
  BotQ.A RemainingLatency 9 + 1c > CritPath 9
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) STRDui %180:fpr64, %stack.13.gc, 0, debug-location !362 :: (store 8 into %ir.gc); ep.c:226:12
  Ready @1c
  BotQ.A TopLatency SU(4) 9c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(3) 8c
  BotQ.A RemainingLatency 8 + 2c > CritPath 9
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(3) BOT-PATH                  8 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(3) %180:fpr64 = FADDDrr %175:fpr64, %179:fpr64, debug-location !361; ep.c:226:17
  Ready @2c
  BotQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 0 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %181:gpr32common = nsw ADDWri %176.sub_32:gpr64common, 1, 0, debug-location !363; ep.c:225:26
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(2) 4c
  BotQ.A RemainingLatency 4 + 6c > CritPath 9
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) %179:fpr64 = LDRDroX %267:gpr64common, %176:gpr64common, 0, 1, debug-location !360 :: (load 8 from %ir.arrayidx124); ep.c:226:19
  Ready @6c
  BotQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %175:fpr64 = LDRDui %stack.13.gc, 0, debug-location !357 :: (dereferenceable load 8 from %ir.gc); ep.c:226:14
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %176:gpr64common = LDRSWui %stack.19.i, 0, debug-location !359 :: (dereferenceable load 4 from %ir.i); ep.c:226:21
  Ready @10c
  BotQ.A BotLatency SU(1) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 7
  Executed: 11c
  Critical: 7c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.42 ***
SU(1):   %176:gpr64common = LDRSWui %stack.19.i, 0, debug-location !359 :: (dereferenceable load 4 from %ir.i); ep.c:226:21
SU(0):   %175:fpr64 = LDRDui %stack.13.gc, 0, debug-location !357 :: (dereferenceable load 8 from %ir.gc); ep.c:226:14
SU(2):   %179:fpr64 = LDRDroX %267:gpr64common, %176:gpr64common, 0, 1, debug-location !360 :: (load 8 from %ir.arrayidx124); ep.c:226:19
SU(5):   %181:gpr32common = nsw ADDWri %176.sub_32:gpr64common, 1, 0, debug-location !363; ep.c:225:26
SU(3):   %180:fpr64 = FADDDrr %175:fpr64, %179:fpr64, debug-location !361; ep.c:226:17
SU(4):   STRDui %180:fpr64, %stack.13.gc, 0, debug-location !362 :: (store 8 into %ir.gc); ep.c:226:12
SU(6):   STRWui %181:gpr32common, %stack.19.i, 0, debug-location !363 :: (store 4 into %ir.i); ep.c:225:26

********** MI Scheduling **********
main:%bb.43 do.end130
  From: %74:fpr64 = COPY $d0, debug-location !368; ep.c:232:10
    To: CBZW %75:gpr32, %bb.45, debug-location !381; ep.c:268:9
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %74:fpr64 = COPY $d0, debug-location !368; ep.c:232:10
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%74
  Single Issue       : false;
SU(1):   STRDui %74:fpr64, %stack.10.tm, 0, debug-location !369 :: (store 8 into %ir.tm); ep.c:232:8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%74
  Single Issue       : false;
SU(2):   STRWui $wzr, %stack.24.nit, 0, debug-location !370 :: (store 4 into %ir.nit); ep.c:234:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %75:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Data Latency=1 Reg=%75
    SU(4): Data Latency=1 Reg=%75
  Single Issue       : false;
SU(4):   STRWui %75:gpr32, %stack.27.verified, 0, debug-location !371 :: (store 4 into %ir.verified); ep.c:235:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%75
  Single Issue       : false;
SU(5):   %76:gpr64 = MOVi64imm 4675776847449726827
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(6): Data Latency=1 Reg=%76
  Single Issue       : false;
SU(6):   STRXui %76:gpr64, %stack.14.sx_verify_value, 0, debug-location !372 :: (store 8 into %ir.sx_verify_value); ep.c:249:25
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%76
  Single Issue       : false;
SU(7):   %77:gpr64 = MOVi64imm -4550329231111044107
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(8): Data Latency=1 Reg=%77
  Single Issue       : false;
SU(8):   STRXui %77:gpr64, %stack.15.sy_verify_value, 0, debug-location !378 :: (store 8 into %ir.sy_verify_value); ep.c:250:25
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=%77
  Single Issue       : false;
ExitSU:   CBZW %75:gpr32, %bb.45, debug-location !381; ep.c:268:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%75
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 6 4 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 7 
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %74:fpr64 = COPY $d0, debug-location !368; ep.c:232:10
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 6 4 2 1 
Queue TopQ.P: 
Queue TopQ.A: 7 2 3 5 1 
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(7) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) STRXui %77:gpr64, %stack.15.sy_verify_value, 0, debug-location !378 :: (store 8 into %ir.sy_verify_value); ep.c:250:25
  Ready @0c
  BotQ.A TopLatency SU(8) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 6 4 2 7 
Queue TopQ.P: 
Queue TopQ.A: 7 2 3 5 1 
BotQ.A RemLatency SU(6) 1c
  BotQ.A RemainingLatency 1 + 1c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(6) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(6) STRXui %76:gpr64, %stack.14.sx_verify_value, 0, debug-location !372 :: (store 8 into %ir.sx_verify_value); ep.c:249:25
  Ready @1c
  BotQ.A TopLatency SU(6) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 7 4 2 5 
Queue TopQ.P: 
Queue TopQ.A: 7 2 3 5 1 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(4) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) STRWui %75:gpr32, %stack.27.verified, 0, debug-location !371 :: (store 4 into %ir.verified); ep.c:235:14
  Ready @2c
  BotQ.A TopLatency SU(4) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 7 5 2 3 
Queue TopQ.P: 
Queue TopQ.A: 7 2 3 5 1 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %77:gpr64 = MOVi64imm -4550329231111044107
  Ready @3c
  BotQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 2 
Queue TopQ.P: 
Queue TopQ.A: 1 2 3 5 
  BotQ.A RemainingLatency 0 + 4c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %76:gpr64 = MOVi64imm 4675776847449726827
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 2 
Queue TopQ.P: 
Queue TopQ.A: 1 2 3 
  BotQ.A RemainingLatency 0 + 5c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %75:gpr32 = MOVi32imm 1
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 1 2 
  BotQ.A RemainingLatency 0 + 6c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) STRWui $wzr, %stack.24.nit, 0, debug-location !370 :: (store 4 into %ir.nit); ep.c:234:9
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %74:fpr64, %stack.10.tm, 0, debug-location !369 :: (store 8 into %ir.tm); ep.c:232:8
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.43 ***
SU(0):   %74:fpr64 = COPY $d0, debug-location !368; ep.c:232:10
SU(1):   STRDui %74:fpr64, %stack.10.tm, 0, debug-location !369 :: (store 8 into %ir.tm); ep.c:232:8
SU(2):   STRWui $wzr, %stack.24.nit, 0, debug-location !370 :: (store 4 into %ir.nit); ep.c:234:9
SU(3):   %75:gpr32 = MOVi32imm 1
SU(5):   %76:gpr64 = MOVi64imm 4675776847449726827
SU(7):   %77:gpr64 = MOVi64imm -4550329231111044107
SU(4):   STRWui %75:gpr32, %stack.27.verified, 0, debug-location !371 :: (store 4 into %ir.verified); ep.c:235:14
SU(6):   STRXui %76:gpr64, %stack.14.sx_verify_value, 0, debug-location !372 :: (store 8 into %ir.sx_verify_value); ep.c:249:25
SU(8):   STRXui %77:gpr64, %stack.15.sy_verify_value, 0, debug-location !378 :: (store 8 into %ir.sy_verify_value); ep.c:250:25

********** MI Scheduling **********
main:%bb.44 if.then133
  From: %78:fpr64 = LDRDui %stack.8.sx, 0, debug-location !382 :: (dereferenceable load 8 from %ir.sx); ep.c:269:24
    To: End RegionInstrs: 20
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=3
GPR32=2
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %78:fpr64 = LDRDui %stack.8.sx, 0, debug-location !382 :: (dereferenceable load 8 from %ir.sx); ep.c:269:24
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(2): Data Latency=4 Reg=%78
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(1):   %79:fpr64 = LDRDui %stack.14.sx_verify_value, 0, debug-location !384 :: (dereferenceable load 8 from %ir.sx_verify_value); ep.c:269:29
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(3): Data Latency=4 Reg=%79
    SU(2): Data Latency=4 Reg=%79
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(2):   %80:fpr64 = FSUBDrr %78:fpr64, %79:fpr64, debug-location !385; ep.c:269:27
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(1): Data Latency=4 Reg=%79
    SU(0): Data Latency=4 Reg=%78
  Successors:
    SU(3): Data Latency=1 Reg=%80
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(3):   %81:fpr64 = FDIVDrr %80:fpr64, %79:fpr64, debug-location !387; ep.c:269:46
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(2): Data Latency=1 Reg=%80
    SU(1): Data Latency=4 Reg=%79
  Successors:
    SU(4): Data Latency=1 Reg=%81
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(4):   %82:fpr64 = FABSDr %81:fpr64, debug-location !388; ep.c:269:18
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 5
  Predecessors:
    SU(3): Data Latency=1 Reg=%81
  Successors:
    SU(14): Data Latency=1 Reg=%82
    SU(5): Data Latency=1 Reg=%82
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   STRDui %82:fpr64, %stack.16.sx_err, 0, debug-location !389 :: (store 8 into %ir.sx_err); ep.c:269:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%82
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(6):   %83:fpr64 = LDRDui %stack.9.sy, 0, debug-location !390 :: (dereferenceable load 8 from %ir.sy); ep.c:270:24
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(8): Data Latency=4 Reg=%83
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(7):   %84:fpr64 = LDRDui %stack.15.sy_verify_value, 0, debug-location !391 :: (dereferenceable load 8 from %ir.sy_verify_value); ep.c:270:29
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(9): Data Latency=4 Reg=%84
    SU(8): Data Latency=4 Reg=%84
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(8):   %85:fpr64 = FSUBDrr %83:fpr64, %84:fpr64, debug-location !392; ep.c:270:27
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(7): Data Latency=4 Reg=%84
    SU(6): Data Latency=4 Reg=%83
  Successors:
    SU(9): Data Latency=1 Reg=%85
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(9):   %86:fpr64 = FDIVDrr %85:fpr64, %84:fpr64, debug-location !394; ep.c:270:46
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(8): Data Latency=1 Reg=%85
    SU(7): Data Latency=4 Reg=%84
  Successors:
    SU(10): Data Latency=1 Reg=%86
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(10):   %87:fpr64 = FABSDr %86:fpr64, debug-location !395; ep.c:270:18
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 4
  Predecessors:
    SU(9): Data Latency=1 Reg=%86
  Successors:
    SU(16): Data Latency=1 Reg=%87
    SU(11): Data Latency=1 Reg=%87
  Pressure Diff      : 
  Single Issue       : false;
SU(11):   STRDui %87:fpr64, %stack.17.sy_err, 0, debug-location !396 :: (store 8 into %ir.sy_err); ep.c:270:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%87
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(12):   %88:gpr64common = ADRP target-flags(aarch64-page) %const.1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 9
  Successors:
    SU(13): Data Latency=1 Reg=%88
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(13):   %89:fpr64 = LDRDui %88:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 8
  Predecessors:
    SU(12): Data Latency=1 Reg=%88
  Successors:
    SU(16): Data Latency=4 Reg=%89
    SU(14): Data Latency=4 Reg=%89
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(14):   FCMPDrr %82:fpr64, %89:fpr64, implicit-def $nzcv, debug-location !398; ep.c:271:29
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 4
  Predecessors:
    SU(4): Data Latency=1 Reg=%82
    SU(13): Data Latency=4 Reg=%89
  Successors:
    SU(16): Out  Latency=1
    SU(15): Data Latency=1 Reg=$nzcv
  Pressure Diff      : FPR8 2    FPR8+ZPR_3b 2    FPR8+ZPR4_with_zsub1_in_ZPR_3b 2    FPR8+ZPR4_with_zsub2_in_ZPR_3b 2    FPR8+ZPR4_with_zsub3_in_ZPR_3b 2    FPR8+ZPR_4b 2    FPR8+ZPR4_with_zsub2_in_ZPR_4b 2    FPR8+ZPR4_with_zsub3_in_ZPR_4b 2    FPR8+ZPR4_with_zsub_in_FPR128_lo 2    ZPR 2
  Single Issue       : false;
SU(15):   %90:gpr32 = CSINCWr $wzr, $wzr, 8, implicit $nzcv, debug-location !398; ep.c:271:29
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 3
  Predecessors:
    SU(14): Data Latency=1 Reg=$nzcv
  Successors:
    SU(18): Data Latency=1 Reg=%90
    SU(16): Anti Latency=0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(16):   FCMPDrr %87:fpr64, %89:fpr64, implicit-def $nzcv, debug-location !399; ep.c:271:41
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 3
  Predecessors:
    SU(15): Anti Latency=0
    SU(14): Out  Latency=1
    SU(13): Data Latency=4 Reg=%89
    SU(10): Data Latency=1 Reg=%87
  Successors:
    SU(17): Data Latency=1 Reg=$nzcv
  Pressure Diff      : FPR8 2    FPR8+ZPR_3b 2    FPR8+ZPR4_with_zsub1_in_ZPR_3b 2    FPR8+ZPR4_with_zsub2_in_ZPR_3b 2    FPR8+ZPR4_with_zsub3_in_ZPR_3b 2    FPR8+ZPR_4b 2    FPR8+ZPR4_with_zsub2_in_ZPR_4b 2    FPR8+ZPR4_with_zsub3_in_ZPR_4b 2    FPR8+ZPR4_with_zsub_in_FPR128_lo 2    ZPR 2
  Single Issue       : false;
SU(17):   %91:gpr32 = CSINCWr $wzr, $wzr, 8, implicit $nzcv, debug-location !399; ep.c:271:41
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 2
  Predecessors:
    SU(16): Data Latency=1 Reg=$nzcv
  Successors:
    SU(18): Data Latency=1 Reg=%91
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(18):   %92:gpr32 = ANDWrr %90:gpr32, %91:gpr32, debug-location !399; ep.c:271:41
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(17): Data Latency=1 Reg=%91
    SU(15): Data Latency=1 Reg=%90
  Successors:
    SU(19): Data Latency=1 Reg=%92
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(19):   STRWui %92:gpr32, %stack.27.verified, 0, debug-location !400 :: (store 4 into %ir.verified); ep.c:271:18
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(18): Data Latency=1 Reg=%92
  Pressure Diff      : GPR32 1
  Single Issue       : false;
Critical Path(GS-RR ): 11
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 19 11 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 7 12 
Picking from Bot:
  Cand SU(19) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(19) STRWui %92:gpr32, %stack.27.verified, 0, debug-location !400 :: (store 4 into %ir.verified); ep.c:271:18
Bottom Pressure:
GPR32=1
  LiveReg: %92
  UpdateRegP: SU(19) STRWui %92:gpr32, %stack.27.verified, 0, debug-location !400 :: (store 4 into %ir.verified); ep.c:271:18
              to 
  Ready @0c
  BotQ.A TopLatency SU(19) 11c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 11 18 
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 7 12 
BotQ.A RemLatency SU(18) 10c
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(18) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(18) %92:gpr32 = ANDWrr %90:gpr32, %91:gpr32, debug-location !399; ep.c:271:41
Bottom Pressure:
GPR32=2
  LiveReg: %90
  UpdateRegP: SU(18) %92:gpr32 = ANDWrr %90:gpr32, %91:gpr32, debug-location !399; ep.c:271:41
              to 
  LiveReg: %91
  UpdateRegP: SU(18) %92:gpr32 = ANDWrr %90:gpr32, %91:gpr32, debug-location !399; ep.c:271:41
              to GPR32 -1
  Ready @1c
  BotQ.A BotLatency SU(18) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 11 17 
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 7 12 
BotQ.A RemLatency SU(17) 9c
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(17) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(17) %91:gpr32 = CSINCWr $wzr, $wzr, 8, implicit $nzcv, debug-location !399; ep.c:271:41
Bottom Pressure:
GPR32=1
  Ready @2c
  BotQ.A BotLatency SU(17) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 11 16 
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 7 12 
BotQ.A RemLatency SU(16) 8c
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(16) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(16) FCMPDrr %87:fpr64, %89:fpr64, implicit-def $nzcv, debug-location !399; ep.c:271:41
Bottom Pressure:
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %87
  UpdateRegP: SU(11) STRDui %87:fpr64, %stack.17.sy_err, 0, debug-location !396 :: (store 8 into %ir.sy_err); ep.c:270:16
              to 
  UpdateRegP: SU(16) FCMPDrr %87:fpr64, %89:fpr64, implicit-def $nzcv, debug-location !399; ep.c:271:41
              to FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  LiveReg: %89
  UpdateRegP: SU(14) FCMPDrr %82:fpr64, %89:fpr64, implicit-def $nzcv, debug-location !398; ep.c:271:29
              to FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  UpdateRegP: SU(16) FCMPDrr %87:fpr64, %89:fpr64, implicit-def $nzcv, debug-location !399; ep.c:271:41
              to 
  Ready @3c
  BotQ.A BotLatency SU(16) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 11 15 
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 7 12 
BotQ.A RemLatency SU(15) 8c
  BotQ.A RemainingLatency 8 + 4c > CritPath 11
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(15) BOT-PATH                  8 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(15) %90:gpr32 = CSINCWr $wzr, $wzr, 8, implicit $nzcv, debug-location !398; ep.c:271:29
Bottom Pressure:
FPR8=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @4c
  BotQ.A TopLatency SU(15) 8c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 11 14 
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 7 12 
BotQ.A RemLatency SU(5) 7c
  BotQ.A RemainingLatency 7 + 5c > CritPath 11
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(14) FCMPDrr %82:fpr64, %89:fpr64, implicit-def $nzcv, debug-location !398; ep.c:271:29
Bottom Pressure:
FPR8=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  LiveReg: %82
  UpdateRegP: SU(5) STRDui %82:fpr64, %stack.16.sx_err, 0, debug-location !389 :: (store 8 into %ir.sx_err); ep.c:269:16
              to 
  UpdateRegP: SU(14) FCMPDrr %82:fpr64, %89:fpr64, implicit-def $nzcv, debug-location !398; ep.c:271:29
              to 
  Ready @5c
  BotQ.A BotLatency SU(14) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 13 
Queue BotQ.A: 5 11 
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 7 12 
BotQ.A RemLatency SU(5) 7c
BotQ.A RemLatency SU(13) 1c
  BotQ.A RemainingLatency 7 + 6c > CritPath 11
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(11) STRDui %87:fpr64, %stack.17.sy_err, 0, debug-location !396 :: (store 8 into %ir.sy_err); ep.c:270:16
Bottom Pressure:
FPR8=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  Ready @6c
  BotQ.A TopLatency SU(11) 7c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 13 
Queue BotQ.A: 5 10 
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 7 12 
BotQ.A RemLatency SU(5) 7c
BotQ.A RemLatency SU(13) 1c
  BotQ.A RemainingLatency 7 + 7c > CritPath 11
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) STRDui %82:fpr64, %stack.16.sx_err, 0, debug-location !389 :: (store 8 into %ir.sx_err); ep.c:269:16
Bottom Pressure:
FPR8=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  Ready @7c
  BotQ.A TopLatency SU(5) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 13 
Queue BotQ.A: 10 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 7 12 
BotQ.A RemLatency SU(10) 6c
BotQ.A RemLatency SU(13) 1c
  BotQ.A RemainingLatency 6 + 8c > CritPath 11
Picking from Bot:
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(10) %87:fpr64 = FABSDr %86:fpr64, debug-location !395; ep.c:270:18
Bottom Pressure:
FPR8=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  LiveReg: %86
  UpdateRegP: SU(10) %87:fpr64 = FABSDr %86:fpr64, debug-location !395; ep.c:270:18
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 9 13 
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 7 12 
BotQ.A RemLatency SU(4) 6c
  BotQ.A RemainingLatency 6 + 9c > CritPath 11
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(4) %82:fpr64 = FABSDr %81:fpr64, debug-location !388; ep.c:269:18
Bottom Pressure:
FPR8=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  LiveReg: %81
  UpdateRegP: SU(4) %82:fpr64 = FABSDr %81:fpr64, debug-location !388; ep.c:269:18
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @9c
  BotQ.A TopLatency SU(4) 6c
  BotQ.A BotLatency SU(4) 5c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 9 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 7 12 
BotQ.A RemLatency SU(9) 5c
  BotQ.A RemainingLatency 5 + 10c > CritPath 11
Picking from Bot:
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(13) %89:fpr64 = LDRDui %88:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
Bottom Pressure:
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %88
  UpdateRegP: SU(13) %89:fpr64 = LDRDui %88:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @10c
  BotQ.A BotLatency SU(13) 8c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 9 12 
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 7 12 
BotQ.A RemLatency SU(3) 5c
  BotQ.A RemainingLatency 5 + 11c > CritPath 11
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(9) %86:fpr64 = FDIVDrr %85:fpr64, %84:fpr64, debug-location !394; ep.c:270:46
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  LiveReg: %85
  UpdateRegP: SU(9) %86:fpr64 = FDIVDrr %85:fpr64, %84:fpr64, debug-location !394; ep.c:270:46
              to 
  LiveReg: %84
  UpdateRegP: SU(8) %85:fpr64 = FSUBDrr %83:fpr64, %84:fpr64, debug-location !392; ep.c:270:27
              to 
  UpdateRegP: SU(9) %86:fpr64 = FDIVDrr %85:fpr64, %84:fpr64, debug-location !394; ep.c:270:46
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @11c
  BotQ.A TopLatency SU(9) 5c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 12 8 
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 7 12 
  BotQ.A RemainingLatency 0 + 12c > CritPath 11
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(12) REG-MAX                            
  Cand SU(8) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(8) %85:fpr64 = FSUBDrr %83:fpr64, %84:fpr64, debug-location !392; ep.c:270:27
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  LiveReg: %83
  UpdateRegP: SU(8) %85:fpr64 = FSUBDrr %83:fpr64, %84:fpr64, debug-location !392; ep.c:270:27
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 6 
Queue BotQ.A: 3 12 
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 7 12 
  BotQ.A RemainingLatency 0 + 13c > CritPath 11
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(12) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(12) %88:gpr64common = ADRP target-flags(aarch64-page) %const.1
Bottom Pressure:
FPR8=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  Ready @13c
  BotQ.A BotLatency SU(12) 9c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 6 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %81:fpr64 = FDIVDrr %80:fpr64, %79:fpr64, debug-location !387; ep.c:269:46
Bottom Pressure:
FPR8=4
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  LiveReg: %80
  UpdateRegP: SU(3) %81:fpr64 = FDIVDrr %80:fpr64, %79:fpr64, debug-location !387; ep.c:269:46
              to 
  LiveReg: %79
  UpdateRegP: SU(2) %80:fpr64 = FSUBDrr %78:fpr64, %79:fpr64, debug-location !385; ep.c:269:27
              to 
  UpdateRegP: SU(3) %81:fpr64 = FDIVDrr %80:fpr64, %79:fpr64, debug-location !387; ep.c:269:46
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @14c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 6 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %80:fpr64 = FSUBDrr %78:fpr64, %79:fpr64, debug-location !385; ep.c:269:27
Bottom Pressure:
FPR8=4
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  LiveReg: %78
  UpdateRegP: SU(2) %80:fpr64 = FSUBDrr %78:fpr64, %79:fpr64, debug-location !385; ep.c:269:27
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @15c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 1 
Queue BotQ.A: 7 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 7 
  BotQ.A RemainingLatency 0 + 16c > CritPath 11
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %84:fpr64 = LDRDui %stack.15.sy_verify_value, 0, debug-location !391 :: (dereferenceable load 8 from %ir.sy_verify_value); ep.c:270:29
Bottom Pressure:
FPR8=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  Ready @16c
  BotQ.A BotLatency SU(7) 10c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 1 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %83:fpr64 = LDRDui %stack.9.sy, 0, debug-location !390 :: (dereferenceable load 8 from %ir.sy); ep.c:270:24
Bottom Pressure:
FPR8=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 19 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 19c > CritPath 11
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %79:fpr64 = LDRDui %stack.14.sx_verify_value, 0, debug-location !384 :: (dereferenceable load 8 from %ir.sx_verify_value); ep.c:269:29
Bottom Pressure:
FPR8=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  Ready @19c
  BotQ.A BotLatency SU(1) 11c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 19
  Executed: 20c
  Critical: 19c, 19 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %78:fpr64 = LDRDui %stack.8.sx, 0, debug-location !382 :: (dereferenceable load 8 from %ir.sx); ep.c:269:24
Bottom Pressure:

  Ready @20c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 20
  Executed: 21c
  Critical: 20c, 20 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   %78:fpr64 = LDRDui %stack.8.sx, 0, debug-location !382 :: (dereferenceable load 8 from %ir.sx); ep.c:269:24
SU(1):   %79:fpr64 = LDRDui %stack.14.sx_verify_value, 0, debug-location !384 :: (dereferenceable load 8 from %ir.sx_verify_value); ep.c:269:29
SU(6):   %83:fpr64 = LDRDui %stack.9.sy, 0, debug-location !390 :: (dereferenceable load 8 from %ir.sy); ep.c:270:24
SU(7):   %84:fpr64 = LDRDui %stack.15.sy_verify_value, 0, debug-location !391 :: (dereferenceable load 8 from %ir.sy_verify_value); ep.c:270:29
SU(2):   %80:fpr64 = FSUBDrr %78:fpr64, %79:fpr64, debug-location !385; ep.c:269:27
SU(3):   %81:fpr64 = FDIVDrr %80:fpr64, %79:fpr64, debug-location !387; ep.c:269:46
SU(12):   %88:gpr64common = ADRP target-flags(aarch64-page) %const.1
SU(8):   %85:fpr64 = FSUBDrr %83:fpr64, %84:fpr64, debug-location !392; ep.c:270:27
SU(9):   %86:fpr64 = FDIVDrr %85:fpr64, %84:fpr64, debug-location !394; ep.c:270:46
SU(13):   %89:fpr64 = LDRDui %88:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
SU(4):   %82:fpr64 = FABSDr %81:fpr64, debug-location !388; ep.c:269:18
SU(10):   %87:fpr64 = FABSDr %86:fpr64, debug-location !395; ep.c:270:18
SU(5):   STRDui %82:fpr64, %stack.16.sx_err, 0, debug-location !389 :: (store 8 into %ir.sx_err); ep.c:269:16
SU(11):   STRDui %87:fpr64, %stack.17.sy_err, 0, debug-location !396 :: (store 8 into %ir.sy_err); ep.c:270:16
SU(14):   FCMPDrr %82:fpr64, %89:fpr64, implicit-def $nzcv, debug-location !398; ep.c:271:29
SU(15):   %90:gpr32 = CSINCWr $wzr, $wzr, 8, implicit $nzcv, debug-location !398; ep.c:271:29
SU(16):   FCMPDrr %87:fpr64, %89:fpr64, implicit-def $nzcv, debug-location !399; ep.c:271:41
SU(17):   %91:gpr32 = CSINCWr $wzr, $wzr, 8, implicit $nzcv, debug-location !399; ep.c:271:41
SU(18):   %92:gpr32 = ANDWrr %90:gpr32, %91:gpr32, debug-location !399; ep.c:271:41
SU(19):   STRWui %92:gpr32, %stack.27.verified, 0, debug-location !400 :: (store 4 into %ir.verified); ep.c:271:18

********** MI Scheduling **********
main:%bb.45 if.end142
  From: STRWui $wzr, %stack.19.i, 0, debug-location !417 :: (store 4 into %ir.i); ep.c:282:12
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui $wzr, %stack.19.i, 0, debug-location !417 :: (store 4 into %ir.i); ep.c:282:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %171:gpr64 = MOVaddr target-flags(aarch64-page) @.str.11, target-flags(aarch64-pageoff, aarch64-nc) @.str.11
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %171:gpr64 = MOVaddr target-flags(aarch64-page) @.str.11, target-flags(aarch64-pageoff, aarch64-nc) @.str.11
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.19.i, 0, debug-location !417 :: (store 4 into %ir.i); ep.c:282:12
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   STRWui $wzr, %stack.19.i, 0, debug-location !417 :: (store 4 into %ir.i); ep.c:282:12
SU(1):   %171:gpr64 = MOVaddr target-flags(aarch64-page) @.str.11, target-flags(aarch64-pageoff, aarch64-nc) @.str.11

********** MI Scheduling **********
main:%bb.45 if.end142
  From: %116:gpr64 = MOVaddr target-flags(aarch64-page) @.str.10, target-flags(aarch64-pageoff, aarch64-nc) @.str.10, debug-location !416; ep.c:281:5
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !416; ep.c:281:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %116:gpr64 = MOVaddr target-flags(aarch64-page) @.str.10, target-flags(aarch64-pageoff, aarch64-nc) @.str.10, debug-location !416; ep.c:281:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%116
  Single Issue       : false;
SU(1):   $x0 = COPY %116:gpr64, debug-location !416; ep.c:281:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%116
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !416; ep.c:281:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %116:gpr64, debug-location !416; ep.c:281:5
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %116:gpr64 = MOVaddr target-flags(aarch64-page) @.str.10, target-flags(aarch64-pageoff, aarch64-nc) @.str.10, debug-location !416; ep.c:281:5
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   %116:gpr64 = MOVaddr target-flags(aarch64-page) @.str.10, target-flags(aarch64-pageoff, aarch64-nc) @.str.10, debug-location !416; ep.c:281:5
SU(1):   $x0 = COPY %116:gpr64, debug-location !416; ep.c:281:5

********** MI Scheduling **********
main:%bb.45 if.end142
  From: %114:gpr64 = MOVaddr target-flags(aarch64-page) @.str.9, target-flags(aarch64-pageoff, aarch64-nc) @.str.9, debug-location !415; ep.c:280:5
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0, debug-location !415; ep.c:280:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %114:gpr64 = MOVaddr target-flags(aarch64-page) @.str.9, target-flags(aarch64-pageoff, aarch64-nc) @.str.9, debug-location !415; ep.c:280:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%114
  Single Issue       : false;
SU(1):   $x0 = COPY %114:gpr64, debug-location !415; ep.c:280:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%114
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %112:fpr64, debug-location !415; ep.c:280:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $d1 = COPY %113:fpr64, debug-location !415; ep.c:280:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0, debug-location !415; ep.c:280:5
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $d1 = COPY %113:fpr64, debug-location !415; ep.c:280:5
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(2) $d0 = COPY %112:fpr64, debug-location !415; ep.c:280:5
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %114:gpr64, debug-location !415; ep.c:280:5
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %114:gpr64 = MOVaddr target-flags(aarch64-page) @.str.9, target-flags(aarch64-pageoff, aarch64-nc) @.str.9, debug-location !415; ep.c:280:5
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   %114:gpr64 = MOVaddr target-flags(aarch64-page) @.str.9, target-flags(aarch64-pageoff, aarch64-nc) @.str.9, debug-location !415; ep.c:280:5
SU(1):   $x0 = COPY %114:gpr64, debug-location !415; ep.c:280:5
SU(2):   $d0 = COPY %112:fpr64, debug-location !415; ep.c:280:5
SU(3):   $d1 = COPY %113:fpr64, debug-location !415; ep.c:280:5

********** MI Scheduling **********
main:%bb.45 if.end142
  From: %112:fpr64 = LDRDui %stack.8.sx, 0, debug-location !413 :: (dereferenceable load 8 from %ir.sx); ep.c:280:42
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !415; ep.c:280:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %112:fpr64 = LDRDui %stack.8.sx, 0, debug-location !413 :: (dereferenceable load 8 from %ir.sx); ep.c:280:42
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %113:fpr64 = LDRDui %stack.9.sy, 0, debug-location !414 :: (dereferenceable load 8 from %ir.sy); ep.c:280:46
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !415; ep.c:280:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %113:fpr64 = LDRDui %stack.9.sy, 0, debug-location !414 :: (dereferenceable load 8 from %ir.sy); ep.c:280:46
  Ready @3c
  BotQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 1
  Executed: 4c
  Critical: 1c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %112:fpr64 = LDRDui %stack.8.sx, 0, debug-location !413 :: (dereferenceable load 8 from %ir.sx); ep.c:280:42
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   %112:fpr64 = LDRDui %stack.8.sx, 0, debug-location !413 :: (dereferenceable load 8 from %ir.sx); ep.c:280:42
SU(1):   %113:fpr64 = LDRDui %stack.9.sy, 0, debug-location !414 :: (dereferenceable load 8 from %ir.sy); ep.c:280:46

********** MI Scheduling **********
main:%bb.45 if.end142
  From: %110:gpr64 = MOVaddr target-flags(aarch64-page) @.str.8, target-flags(aarch64-pageoff, aarch64-nc) @.str.8, debug-location !412; ep.c:279:5
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !412; ep.c:279:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %110:gpr64 = MOVaddr target-flags(aarch64-page) @.str.8, target-flags(aarch64-pageoff, aarch64-nc) @.str.8, debug-location !412; ep.c:279:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%110
  Single Issue       : false;
SU(1):   $x0 = COPY %110:gpr64, debug-location !412; ep.c:279:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%110
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %109:fpr64, debug-location !412; ep.c:279:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !412; ep.c:279:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $d0 = COPY %109:fpr64, debug-location !412; ep.c:279:5
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %110:gpr64, debug-location !412; ep.c:279:5
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %110:gpr64 = MOVaddr target-flags(aarch64-page) @.str.8, target-flags(aarch64-pageoff, aarch64-nc) @.str.8, debug-location !412; ep.c:279:5
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   %110:gpr64 = MOVaddr target-flags(aarch64-page) @.str.8, target-flags(aarch64-pageoff, aarch64-nc) @.str.8, debug-location !412; ep.c:279:5
SU(1):   $x0 = COPY %110:gpr64, debug-location !412; ep.c:279:5
SU(2):   $d0 = COPY %109:fpr64, debug-location !412; ep.c:279:5

********** MI Scheduling **********
main:%bb.45 if.end142
  From: %106:gpr64 = MOVaddr target-flags(aarch64-page) @.str.7, target-flags(aarch64-pageoff, aarch64-nc) @.str.7, debug-location !410; ep.c:278:5
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $w1, implicit-def $sp, implicit-def dead $w0, debug-location !410; ep.c:278:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %106:gpr64 = MOVaddr target-flags(aarch64-page) @.str.7, target-flags(aarch64-pageoff, aarch64-nc) @.str.7, debug-location !410; ep.c:278:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%106
  Single Issue       : false;
SU(1):   $x0 = COPY %106:gpr64, debug-location !410; ep.c:278:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%106
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $w1 = MOVi32imm 30, debug-location !410; ep.c:278:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $w1, implicit-def $sp, implicit-def dead $w0, debug-location !410; ep.c:278:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %106:gpr64, debug-location !410; ep.c:278:5
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $w1 = MOVi32imm 30, debug-location !410; ep.c:278:5
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %106:gpr64 = MOVaddr target-flags(aarch64-page) @.str.7, target-flags(aarch64-pageoff, aarch64-nc) @.str.7, debug-location !410; ep.c:278:5
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   %106:gpr64 = MOVaddr target-flags(aarch64-page) @.str.7, target-flags(aarch64-pageoff, aarch64-nc) @.str.7, debug-location !410; ep.c:278:5
SU(2):   $w1 = MOVi32imm 30, debug-location !410; ep.c:278:5
SU(1):   $x0 = COPY %106:gpr64, debug-location !410; ep.c:278:5

********** MI Scheduling **********
main:%bb.45 if.end142
  From: %104:gpr64 = MOVaddr target-flags(aarch64-page) @.str.6, target-flags(aarch64-pageoff, aarch64-nc) @.str.6, debug-location !409; ep.c:277:5
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !409; ep.c:277:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %104:gpr64 = MOVaddr target-flags(aarch64-page) @.str.6, target-flags(aarch64-pageoff, aarch64-nc) @.str.6, debug-location !409; ep.c:277:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%104
  Single Issue       : false;
SU(1):   $x0 = COPY %104:gpr64, debug-location !409; ep.c:277:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%104
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %103:fpr64, debug-location !409; ep.c:277:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !409; ep.c:277:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $d0 = COPY %103:fpr64, debug-location !409; ep.c:277:5
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %104:gpr64, debug-location !409; ep.c:277:5
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %104:gpr64 = MOVaddr target-flags(aarch64-page) @.str.6, target-flags(aarch64-pageoff, aarch64-nc) @.str.6, debug-location !409; ep.c:277:5
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   %104:gpr64 = MOVaddr target-flags(aarch64-page) @.str.6, target-flags(aarch64-pageoff, aarch64-nc) @.str.6, debug-location !409; ep.c:277:5
SU(1):   $x0 = COPY %104:gpr64, debug-location !409; ep.c:277:5
SU(2):   $d0 = COPY %103:fpr64, debug-location !409; ep.c:277:5

********** MI Scheduling **********
main:%bb.45 if.end142
  From: %101:gpr64 = MOVaddr target-flags(aarch64-page) @.str.5, target-flags(aarch64-pageoff, aarch64-nc) @.str.5, debug-location !407; ep.c:276:5
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !407; ep.c:276:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %101:gpr64 = MOVaddr target-flags(aarch64-page) @.str.5, target-flags(aarch64-pageoff, aarch64-nc) @.str.5, debug-location !407; ep.c:276:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%101
  Single Issue       : false;
SU(1):   $x0 = COPY %101:gpr64, debug-location !407; ep.c:276:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%101
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !407; ep.c:276:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %101:gpr64, debug-location !407; ep.c:276:5
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %101:gpr64 = MOVaddr target-flags(aarch64-page) @.str.5, target-flags(aarch64-pageoff, aarch64-nc) @.str.5, debug-location !407; ep.c:276:5
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   %101:gpr64 = MOVaddr target-flags(aarch64-page) @.str.5, target-flags(aarch64-pageoff, aarch64-nc) @.str.5, debug-location !407; ep.c:276:5
SU(1):   $x0 = COPY %101:gpr64, debug-location !407; ep.c:276:5

********** MI Scheduling **********
main:%bb.45 if.end142
  From: %95:fpr64 = COPY $d0, debug-location !402; ep.c:274:12
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !407; ep.c:276:5
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Constraining copy SU(4)
SU(0):   %95:fpr64 = COPY $d0, debug-location !402; ep.c:274:12
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Data Latency=0 Reg=%95
  Single Issue       : false;
SU(1):   %96:fpr64 = LDRDui %stack.10.tm, 0, debug-location !403 :: (dereferenceable load 8 from %ir.tm); ep.c:274:30
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Data Latency=4 Reg=%96
  Single Issue       : false;
SU(2):   %97:fpr64 = FDIVDrr %95:fpr64, %96:fpr64, debug-location !404; ep.c:274:28
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(1): Data Latency=4 Reg=%96
    SU(0): Data Latency=0 Reg=%95
  Successors:
    SU(5): Data Latency=1 Reg=%97
  Single Issue       : false;
SU(3):   %98:gpr64 = MOVi64imm 4696837146684686336
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(4): Data Latency=1 Reg=%98
  Single Issue       : false;
SU(4):   %99:fpr64 = COPY %98:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Data Latency=1 Reg=%98
  Successors:
    SU(5): Data Latency=0 Reg=%99
  Single Issue       : false;
SU(5):   %100:fpr64 = FDIVDrr %97:fpr64, %99:fpr64, debug-location !405; ep.c:274:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=%97
    SU(4): Data Latency=0 Reg=%99
  Successors:
    SU(6): Data Latency=1 Reg=%100
  Single Issue       : false;
SU(6):   STRDui %100:fpr64, %stack.1.Mops, 0, debug-location !406 :: (store 8 into %ir.Mops); ep.c:274:10
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%100
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !407; ep.c:276:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) STRDui %100:fpr64, %stack.1.Mops, 0, debug-location !406 :: (store 8 into %ir.Mops); ep.c:274:10
  Ready @0c
  BotQ.A TopLatency SU(6) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %100:fpr64 = FDIVDrr %97:fpr64, %99:fpr64, debug-location !405; ep.c:274:33
  Ready @1c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
BotQ.A RemLatency SU(2) 4c
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %95:fpr64 = COPY $d0, debug-location !402; ep.c:274:12
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 
Queue TopQ.P: 
Queue TopQ.A: 3 1 
BotQ.A RemLatency SU(2) 4c
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(3) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %99:fpr64 = COPY %98:gpr64
  Ready @2c
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %97:fpr64 = FDIVDrr %95:fpr64, %96:fpr64, debug-location !404; ep.c:274:28
  Ready @2c
  BotQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %98:gpr64 = MOVi64imm 4696837146684686336
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %96:fpr64 = LDRDui %stack.10.tm, 0, debug-location !403 :: (dereferenceable load 8 from %ir.tm); ep.c:274:30
  Ready @6c
  BotQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   %95:fpr64 = COPY $d0, debug-location !402; ep.c:274:12
SU(1):   %96:fpr64 = LDRDui %stack.10.tm, 0, debug-location !403 :: (dereferenceable load 8 from %ir.tm); ep.c:274:30
SU(3):   %98:gpr64 = MOVi64imm 4696837146684686336
SU(2):   %97:fpr64 = FDIVDrr %95:fpr64, %96:fpr64, debug-location !404; ep.c:274:28
SU(4):   %99:fpr64 = COPY %98:gpr64
SU(5):   %100:fpr64 = FDIVDrr %97:fpr64, %99:fpr64, debug-location !405; ep.c:274:33
SU(6):   STRDui %100:fpr64, %stack.1.Mops, 0, debug-location !406 :: (store 8 into %ir.Mops); ep.c:274:10

********** MI Scheduling **********
main:%bb.45 if.end142
  From: %93:fpr64 = FMOVDi 0
    To: BL @pow, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def $d0, debug-location !402; ep.c:274:12
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %93:fpr64 = FMOVDi 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%93
  Single Issue       : false;
SU(1):   %94:fpr64 = FMOVDi 63
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%94
  Single Issue       : false;
SU(2):   $d0 = COPY %93:fpr64, debug-location !402; ep.c:274:12
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%93
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $d1 = COPY %94:fpr64, debug-location !402; ep.c:274:12
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%94
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @pow, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def $d0, debug-location !402; ep.c:274:12
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $d1 = COPY %94:fpr64, debug-location !402; ep.c:274:12
  Ready @0c
  BotQ.A TopLatency SU(3) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $d0 = COPY %93:fpr64, debug-location !402; ep.c:274:12
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %94:fpr64 = FMOVDi 63
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %93:fpr64 = FMOVDi 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   %93:fpr64 = FMOVDi 0
SU(1):   %94:fpr64 = FMOVDi 63
SU(2):   $d0 = COPY %93:fpr64, debug-location !402; ep.c:274:12
SU(3):   $d1 = COPY %94:fpr64, debug-location !402; ep.c:274:12

********** MI Scheduling **********
main:%bb.46 for.cond152
  From: %119:gpr32common = LDRWui %stack.19.i, 0, debug-location !420 :: (dereferenceable load 4 from %ir.i); ep.c:282:17
    To: Bcc 12, %bb.48, implicit $nzcv, debug-location !423; ep.c:282:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %119:gpr32common = LDRWui %stack.19.i, 0, debug-location !420 :: (dereferenceable load 4 from %ir.i); ep.c:282:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%119
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %119:gpr32common, 9, 0, implicit-def $nzcv, debug-location !423; ep.c:282:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%119
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.48, implicit $nzcv, debug-location !423; ep.c:282:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %119:gpr32common, 9, 0, implicit-def $nzcv, debug-location !423; ep.c:282:5
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %119:gpr32common = LDRWui %stack.19.i, 0, debug-location !420 :: (dereferenceable load 4 from %ir.i); ep.c:282:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.46 ***
SU(0):   %119:gpr32common = LDRWui %stack.19.i, 0, debug-location !420 :: (dereferenceable load 4 from %ir.i); ep.c:282:17
SU(1):   dead $wzr = SUBSWri %119:gpr32common, 9, 0, implicit-def $nzcv, debug-location !423; ep.c:282:5

********** MI Scheduling **********
main:%bb.47 for.body155
  From: %173:gpr32common = LDRWui %stack.19.i, 0, debug-location !429 :: (dereferenceable load 4 from %ir.i); ep.c:282:26
    To: B %bb.46, debug-location !430; ep.c:282:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %173:gpr32common = LDRWui %stack.19.i, 0, debug-location !429 :: (dereferenceable load 4 from %ir.i); ep.c:282:26
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%173
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %174:gpr32common = nsw ADDWri %173:gpr32common, 1, 0, debug-location !429; ep.c:282:26
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%173
  Successors:
    SU(2): Data Latency=1 Reg=%174
  Single Issue       : false;
SU(2):   STRWui %174:gpr32common, %stack.19.i, 0, debug-location !429 :: (store 4 into %ir.i); ep.c:282:26
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%174
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.46, debug-location !430; ep.c:282:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %174:gpr32common, %stack.19.i, 0, debug-location !429 :: (store 4 into %ir.i); ep.c:282:26
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %174:gpr32common = nsw ADDWri %173:gpr32common, 1, 0, debug-location !429; ep.c:282:26
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %173:gpr32common = LDRWui %stack.19.i, 0, debug-location !429 :: (dereferenceable load 4 from %ir.i); ep.c:282:26
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.47 ***
SU(0):   %173:gpr32common = LDRWui %stack.19.i, 0, debug-location !429 :: (dereferenceable load 4 from %ir.i); ep.c:282:26
SU(1):   %174:gpr32common = nsw ADDWri %173:gpr32common, 1, 0, debug-location !429; ep.c:282:26
SU(2):   STRWui %174:gpr32common, %stack.19.i, 0, debug-location !429 :: (store 4 into %ir.i); ep.c:282:26

********** MI Scheduling **********
main:%bb.47 for.body155
  From: $x0 = COPY %171:gpr64, debug-location !428; ep.c:283:9
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $w1, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !428; ep.c:283:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %171:gpr64, debug-location !428; ep.c:283:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $w1 = COPY %167.sub_32:gpr64, debug-location !428; ep.c:283:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %170:fpr64, debug-location !428; ep.c:283:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $w1, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !428; ep.c:283:9
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $d0 = COPY %170:fpr64, debug-location !428; ep.c:283:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(1) $w1 = COPY %167.sub_32:gpr64, debug-location !428; ep.c:283:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %171:gpr64, debug-location !428; ep.c:283:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.47 ***
SU(0):   $x0 = COPY %171:gpr64, debug-location !428; ep.c:283:9
SU(1):   $w1 = COPY %167.sub_32:gpr64, debug-location !428; ep.c:283:9
SU(2):   $d0 = COPY %170:fpr64, debug-location !428; ep.c:283:9

********** MI Scheduling **********
main:%bb.47 for.body155
  From: %167:gpr64 = LDRSWui %stack.19.i, 0, debug-location !424 :: (dereferenceable load 4 from %ir.i); ep.c:283:32
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !428; ep.c:283:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %167:gpr64 = LDRSWui %stack.19.i, 0, debug-location !424 :: (dereferenceable load 4 from %ir.i); ep.c:283:32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(1): Data Latency=4 Reg=%167
  Single Issue       : false;
SU(1):   %170:fpr64 = LDRDroX %267:gpr64common, %167:gpr64, 0, 1, debug-location !427 :: (load 8 from %ir.arrayidx157); ep.c:283:35
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(0): Data Latency=4 Reg=%167
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !428; ep.c:283:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %170:fpr64 = LDRDroX %267:gpr64common, %167:gpr64, 0, 1, debug-location !427 :: (load 8 from %ir.arrayidx157); ep.c:283:35
  Ready @3c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 1
  Executed: 4c
  Critical: 1c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %167:gpr64 = LDRSWui %stack.19.i, 0, debug-location !424 :: (dereferenceable load 4 from %ir.i); ep.c:283:32
  Ready @7c
  BotQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 2
  Executed: 8c
  Critical: 2c, 2 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.47 ***
SU(0):   %167:gpr64 = LDRSWui %stack.19.i, 0, debug-location !424 :: (dereferenceable load 4 from %ir.i); ep.c:283:32
SU(1):   %170:fpr64 = LDRDroX %267:gpr64common, %167:gpr64, 0, 1, debug-location !427 :: (load 8 from %ir.arrayidx157); ep.c:283:35

********** MI Scheduling **********
main:%bb.48 for.end161
  From: %125:gpr64 = MOVaddr target-flags(aarch64-page) @.str.22, target-flags(aarch64-pageoff, aarch64-nc) @.str.22, debug-location !437; ep.c:286:5
    To: BL @print_results, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $w1, implicit killed $w2, implicit killed $w3, implicit killed $w4, implicit killed $w5, implicit $d0, implicit killed $d1, implicit killed $x6, implicit killed $w7, implicit-def $sp, debug-location !437; ep.c:286:5
 RegionInstrs: 30
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR32arg=8
tcGPR64=8
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=8
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
Live In: %124 %123 %122 %121 
Live Out: 
Live Thru: 
Top Pressure:
FPR8=2
GPR32=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
Bottom Pressure:
GPR32arg=8
tcGPR64=8
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=8
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
Excess PSets: 
Cluster ld/st SU(17) - SU(15)
Cluster ld/st SU(13) - SU(11)
Cluster ld/st SU(9) - SU(7)
Cluster ld/st SU(5) - SU(3)
SU(0):   %125:gpr64 = MOVaddr target-flags(aarch64-page) @.str.22, target-flags(aarch64-pageoff, aarch64-nc) @.str.22, debug-location !437; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%125
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   STRXui %125:gpr64, $sp, 8, debug-location !437 :: (store 8 into stack + 64); ep.c:286:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%125
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(2):   %127:gpr64 = MOVaddr target-flags(aarch64-page) @.str.21, target-flags(aarch64-pageoff, aarch64-nc) @.str.21, debug-location !437; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%127
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(3):   STRXui %127:gpr64, $sp, 7, debug-location !437 :: (store 8 into stack + 56); ep.c:286:5
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%127
    SU(5): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(4):   %128:gpr64 = MOVaddr target-flags(aarch64-page) @.str.20, target-flags(aarch64-pageoff, aarch64-nc) @.str.20, debug-location !437; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%128
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(5):   STRXui %128:gpr64, $sp, 6, debug-location !437 :: (store 8 into stack + 48); ep.c:286:5
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%128
  Successors:
    SU(3): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(6):   %129:gpr64 = MOVaddr target-flags(aarch64-page) @.str.19, target-flags(aarch64-pageoff, aarch64-nc) @.str.19, debug-location !437; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%129
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   STRXui %129:gpr64, $sp, 5, debug-location !437 :: (store 8 into stack + 40); ep.c:286:5
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%129
    SU(9): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(8):   %130:gpr64 = MOVaddr target-flags(aarch64-page) @.str.18, target-flags(aarch64-pageoff, aarch64-nc) @.str.18, debug-location !437; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(9): Data Latency=1 Reg=%130
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(9):   STRXui %130:gpr64, $sp, 4, debug-location !437 :: (store 8 into stack + 32); ep.c:286:5
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%130
  Successors:
    SU(7): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(10):   %131:gpr64 = MOVaddr target-flags(aarch64-page) @.str.17, target-flags(aarch64-pageoff, aarch64-nc) @.str.17, debug-location !437; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(11): Data Latency=1 Reg=%131
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(11):   STRXui %131:gpr64, $sp, 3, debug-location !437 :: (store 8 into stack + 24); ep.c:286:5
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%131
    SU(13): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(12):   %132:gpr64 = MOVaddr target-flags(aarch64-page) @.str.16, target-flags(aarch64-pageoff, aarch64-nc) @.str.16, debug-location !437; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(13): Data Latency=1 Reg=%132
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(13):   STRXui %132:gpr64, $sp, 2, debug-location !437 :: (store 8 into stack + 16); ep.c:286:5
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%132
  Successors:
    SU(11): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(14):   %133:gpr64 = MOVaddr target-flags(aarch64-page) @.str.15, target-flags(aarch64-pageoff, aarch64-nc) @.str.15, debug-location !437; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(15): Data Latency=1 Reg=%133
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(15):   STRXui %133:gpr64, $sp, 1, debug-location !437 :: (store 8 into stack + 8); ep.c:286:5
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(14): Data Latency=1 Reg=%133
    SU(17): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(16):   %134:gpr64 = MOVaddr target-flags(aarch64-page) @.str.14, target-flags(aarch64-pageoff, aarch64-nc) @.str.14, debug-location !437; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(17): Data Latency=1 Reg=%134
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(17):   STRXui %134:gpr64, $sp, 0, debug-location !437 :: (store 8 into stack); ep.c:286:5
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(16): Data Latency=1 Reg=%134
  Successors:
    SU(15): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(18):   %135:gpr64 = MOVaddr target-flags(aarch64-page) @.str.12, target-flags(aarch64-pageoff, aarch64-nc) @.str.12, debug-location !437; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(20): Data Latency=1 Reg=%135
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(19):   %136:gpr64 = MOVaddr target-flags(aarch64-page) @.str.13, target-flags(aarch64-pageoff, aarch64-nc) @.str.13, debug-location !437; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(28): Data Latency=1 Reg=%136
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(20):   $x0 = COPY %135:gpr64, debug-location !437; ep.c:286:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(18): Data Latency=1 Reg=%135
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1
  Single Issue       : false;
SU(21):   $w1 = MOVi32imm 66, debug-location !437; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1    GPR32 -1
  Single Issue       : false;
SU(22):   $w2 = MOVi32imm 31, debug-location !437; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1    GPR32 -1
  Single Issue       : false;
SU(23):   $w3 = COPY $wzr, debug-location !437; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1    GPR32 -1
  Single Issue       : false;
SU(24):   $w4 = COPY $wzr, debug-location !437; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1    GPR32 -1
  Single Issue       : false;
SU(25):   $w5 = COPY %121:gpr32, debug-location !437; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1
  Single Issue       : false;
SU(26):   $d0 = COPY %122:fpr64, debug-location !437; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : FPR128_lo -1    ZPR_3b -1    FPR128_lo+ZPR_3b -1    QQ_with_qsub1_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR4_with_zsub3_in_ZPR_4b -1    ZPR4_with_zsub_in_FPR128_lo -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1
  Single Issue       : false;
SU(27):   $d1 = COPY %123:fpr64, debug-location !437; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : FPR128_lo -1    ZPR_3b -1    FPR128_lo+ZPR_3b -1    QQ_with_qsub1_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR4_with_zsub3_in_ZPR_4b -1    ZPR4_with_zsub_in_FPR128_lo -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1
  Single Issue       : false;
SU(28):   $x6 = COPY %136:gpr64, debug-location !437; ep.c:286:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(19): Data Latency=1 Reg=%136
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1
  Single Issue       : false;
SU(29):   $w7 = COPY %124:gpr32, debug-location !437; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1
  Single Issue       : false;
ExitSU:   BL @print_results, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $w1, implicit killed $w2, implicit killed $w3, implicit killed $w4, implicit killed $w5, implicit $d0, implicit killed $d1, implicit killed $x6, implicit killed $w7, implicit-def $sp, debug-location !437; ep.c:286:5
  # preds left       : 10
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(29): Ord  Latency=0 Artificial
    SU(28): Ord  Latency=0 Artificial
    SU(27): Ord  Latency=0 Artificial
    SU(26): Ord  Latency=0 Artificial
    SU(25): Ord  Latency=0 Artificial
    SU(24): Ord  Latency=0 Artificial
    SU(23): Ord  Latency=0 Artificial
    SU(22): Ord  Latency=1 Artificial
    SU(21): Ord  Latency=1 Artificial
    SU(20): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 22 21 
Queue BotQ.A: 17 15 13 11 9 7 5 3 1 29 28 27 26 25 24 23 20 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 24 25 26 27 29 
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(15) WEAK                               
  Cand SU(29) PHYS-REG                           
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(23) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(29) $w7 = COPY %124:gpr32, debug-location !437; ep.c:286:5
Bottom Pressure:
GPR32arg=7
tcGPR64=7
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=8
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  LiveReg: %124
  UpdateRegP: SU(29) $w7 = COPY %124:gpr32, debug-location !437; ep.c:286:5
              to GPR32arg -1    tcGPR64 -1    GPR32 -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 22 21 
Queue BotQ.A: 17 15 13 11 9 7 5 3 1 20 28 27 26 25 24 23 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 24 25 26 27 
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(15) WEAK                               
  Cand SU(20) PHYS-REG                           
  Cand SU(28) ORDER                              
Picking from Top:
  Cand SU(23) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(28) $x6 = COPY %136:gpr64, debug-location !437; ep.c:286:5
Bottom Pressure:
GPR32arg=6
tcGPR64=6
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=8
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  LiveReg: %136
  UpdateRegP: SU(28) $x6 = COPY %136:gpr64, debug-location !437; ep.c:286:5
              to GPR32arg -1    tcGPR64 -1    GPR32 -1
  Ready @0c
  BotQ.A TopLatency SU(28) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 22 21 19 
Queue BotQ.A: 17 15 13 11 9 7 5 3 1 20 23 27 26 25 24 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 24 25 26 27 
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(15) WEAK                               
  Cand SU(20) PHYS-REG                           
  Cand SU(23) ORDER                              
  Cand SU(25) ORDER                              
Picking from Top:
  Cand SU(23) NOCAND                             
Pick Bot ORDER     
Scheduling SU(25) $w5 = COPY %121:gpr32, debug-location !437; ep.c:286:5
Bottom Pressure:
GPR32arg=5
tcGPR64=5
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=8
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  LiveReg: %121
  UpdateRegP: SU(25) $w5 = COPY %121:gpr32, debug-location !437; ep.c:286:5
              to GPR32arg -1    tcGPR64 -1    GPR32 -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 22 21 19 
Queue BotQ.A: 17 15 13 11 9 7 5 3 1 20 23 27 26 24 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 24 27 26 
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(15) WEAK                               
  Cand SU(20) PHYS-REG                           
  Cand SU(23) ORDER                              
  Cand SU(24) ORDER                              
Picking from Top:
  Cand SU(23) NOCAND                             
Pick Bot ORDER     
Scheduling SU(24) $w4 = COPY $wzr, debug-location !437; ep.c:286:5
Bottom Pressure:
GPR32arg=4
tcGPR64=4
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=7
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 22 21 19 
Queue BotQ.A: 17 15 13 11 9 7 5 3 1 20 23 27 26 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 26 27 
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(15) WEAK                               
  Cand SU(20) PHYS-REG                           
  Cand SU(23) ORDER                              
Picking from Top:
  Cand SU(23) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(23) $w3 = COPY $wzr, debug-location !437; ep.c:286:5
Bottom Pressure:
GPR32arg=3
tcGPR64=3
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=6
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 22 21 19 
Queue BotQ.A: 17 15 13 11 9 7 5 3 1 20 26 27 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 27 26 
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(15) WEAK                               
  Cand SU(20) PHYS-REG                           
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(20) $x0 = COPY %135:gpr64, debug-location !437; ep.c:286:5
Bottom Pressure:
GPR32arg=2
tcGPR64=2
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=6
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  LiveReg: %135
  UpdateRegP: SU(20) $x0 = COPY %135:gpr64, debug-location !437; ep.c:286:5
              to GPR32arg -1    tcGPR64 -1    GPR32 -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 22 21 19 18 
Queue BotQ.A: 17 15 13 11 9 7 5 3 1 27 26 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 27 26 
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(15) WEAK                               
  Cand SU(27) PHYS-REG                           
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(27) $d1 = COPY %123:fpr64, debug-location !437; ep.c:286:5
Bottom Pressure:
GPR32arg=2
tcGPR64=2
FPR128_lo=1
ZPR_3b=1
FPR128_lo+ZPR_3b=1
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=1
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=1
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=1
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=1
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=1
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=1
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=1
GPR32=6
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR4_with_zsub3_in_ZPR_4b=1
ZPR4_with_zsub_in_FPR128_lo=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=1
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %123
  UpdateRegP: SU(27) $d1 = COPY %123:fpr64, debug-location !437; ep.c:286:5
              to FPR128_lo -1    ZPR_3b -1    FPR128_lo+ZPR_3b -1    QQ_with_qsub1_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8 -1    FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR4_with_zsub3_in_ZPR_4b -1    ZPR4_with_zsub_in_FPR128_lo -1    FPR8+ZPR_3b -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 22 21 19 18 
Queue BotQ.A: 17 15 13 11 9 7 5 3 1 26 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 26 
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(15) WEAK                               
  Cand SU(26) PHYS-REG                           
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(26) $d0 = COPY %122:fpr64, debug-location !437; ep.c:286:5
Bottom Pressure:
GPR32arg=2
tcGPR64=2
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %122
  UpdateRegP: SU(26) $d0 = COPY %122:fpr64, debug-location !437; ep.c:286:5
              to FPR128_lo -1    ZPR_3b -1    FPR128_lo+ZPR_3b -1    QQ_with_qsub1_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8 -1    FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR4_with_zsub3_in_ZPR_4b -1    ZPR4_with_zsub_in_FPR128_lo -1    FPR8+ZPR_3b -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 22 21 19 18 
Queue BotQ.A: 17 15 13 11 9 7 5 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(15) WEAK                               
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(15) STRXui %133:gpr64, $sp, 1, debug-location !437 :: (store 8 into stack + 8); ep.c:286:5
Bottom Pressure:
GPR32arg=2
tcGPR64=2
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %133
  UpdateRegP: SU(15) STRXui %133:gpr64, $sp, 1, debug-location !437 :: (store 8 into stack + 8); ep.c:286:5
              to 
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 1 13 11 9 7 5 3 14 22 18 19 21 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 
BotQ.A RemLatency SU(17) 1c
  BotQ.A RemainingLatency 1 + 1c > CritPath 1
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(22) PHYS-REG                           
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(22) $w2 = MOVi32imm 31, debug-location !437; ep.c:286:5
Bottom Pressure:
GPR32arg=1
tcGPR64=1
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  Ready @1c
  BotQ.A BotLatency SU(22) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 1 13 11 9 7 5 3 14 21 18 19 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(21) PHYS-REG                           
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(21) $w1 = MOVi32imm 66, debug-location !437; ep.c:286:5
Bottom Pressure:
FPR8=2
GPR32=5
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 1 13 11 9 7 5 3 14 19 18 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Cand SU(17) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(17) STRXui %134:gpr64, $sp, 0, debug-location !437 :: (store 8 into stack); ep.c:286:5
Bottom Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %134
  UpdateRegP: SU(17) STRXui %134:gpr64, $sp, 0, debug-location !437 :: (store 8 into stack); ep.c:286:5
              to 
  Ready @3c
  BotQ.A TopLatency SU(17) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 1 13 11 9 7 5 3 14 19 16 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 
  BotQ.A RemainingLatency 0 + 4c > CritPath 1
Picking from Bot:
  Cand SU(18) ORDER                              
  Cand SU(1) BOT-PATH                  1 cycles 
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(11) STRXui %131:gpr64, $sp, 3, debug-location !437 :: (store 8 into stack + 24); ep.c:286:5
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %131
  UpdateRegP: SU(11) STRXui %131:gpr64, $sp, 3, debug-location !437 :: (store 8 into stack + 24); ep.c:286:5
              to 
  Ready @4c
  BotQ.A TopLatency SU(11) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 1 13 16 9 7 5 3 14 19 10 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 
  BotQ.A RemainingLatency 0 + 5c > CritPath 1
Picking from Bot:
  Cand SU(18) ORDER                              
  Cand SU(1) BOT-PATH                  1 cycles 
  Cand SU(13) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(13) STRXui %132:gpr64, $sp, 2, debug-location !437 :: (store 8 into stack + 16); ep.c:286:5
Bottom Pressure:
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %132
  UpdateRegP: SU(13) STRXui %132:gpr64, $sp, 2, debug-location !437 :: (store 8 into stack + 16); ep.c:286:5
              to 
  Ready @5c
  BotQ.A TopLatency SU(13) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 1 10 16 9 7 5 3 14 19 12 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 
  BotQ.A RemainingLatency 0 + 6c > CritPath 1
Picking from Bot:
  Cand SU(18) ORDER                              
  Cand SU(19) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(19) %136:gpr64 = MOVaddr target-flags(aarch64-page) @.str.13, target-flags(aarch64-pageoff, aarch64-nc) @.str.13, debug-location !437; ep.c:286:5
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 1 10 16 9 7 5 3 14 12 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 
  BotQ.A RemainingLatency 0 + 7c > CritPath 1
Picking from Bot:
  Cand SU(18) ORDER                              
  Cand SU(1) BOT-PATH                  1 cycles 
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(7) STRXui %129:gpr64, $sp, 5, debug-location !437 :: (store 8 into stack + 40); ep.c:286:5
Bottom Pressure:
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %129
  UpdateRegP: SU(7) STRXui %129:gpr64, $sp, 5, debug-location !437 :: (store 8 into stack + 40); ep.c:286:5
              to 
  Ready @7c
  BotQ.A TopLatency SU(7) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 1 10 16 9 12 5 3 14 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 
  BotQ.A RemainingLatency 0 + 8c > CritPath 1
Picking from Bot:
  Cand SU(18) ORDER                              
  Cand SU(9) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(9) STRXui %130:gpr64, $sp, 4, debug-location !437 :: (store 8 into stack + 32); ep.c:286:5
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %130
  UpdateRegP: SU(9) STRXui %130:gpr64, $sp, 4, debug-location !437 :: (store 8 into stack + 32); ep.c:286:5
              to 
  Ready @8c
  BotQ.A TopLatency SU(9) 1c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 1 10 16 6 12 5 3 14 8 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 
  BotQ.A RemainingLatency 0 + 9c > CritPath 1
Picking from Bot:
  Cand SU(18) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(18) %135:gpr64 = MOVaddr target-flags(aarch64-page) @.str.12, target-flags(aarch64-pageoff, aarch64-nc) @.str.12, debug-location !437; ep.c:286:5
Bottom Pressure:
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 1 10 16 6 12 5 3 14 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 
  BotQ.A RemainingLatency 0 + 10c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(1) BOT-PATH                  1 cycles 
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(3) STRXui %127:gpr64, $sp, 7, debug-location !437 :: (store 8 into stack + 56); ep.c:286:5
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %127
  UpdateRegP: SU(3) STRXui %127:gpr64, $sp, 7, debug-location !437 :: (store 8 into stack + 56); ep.c:286:5
              to 
  Ready @10c
  BotQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 1 10 16 6 12 5 14 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 
  BotQ.A RemainingLatency 0 + 11c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(5) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(5) STRXui %128:gpr64, $sp, 6, debug-location !437 :: (store 8 into stack + 48); ep.c:286:5
Bottom Pressure:
FPR8=2
GPR32=10
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %128
  UpdateRegP: SU(5) STRXui %128:gpr64, $sp, 6, debug-location !437 :: (store 8 into stack + 48); ep.c:286:5
              to 
  Ready @11c
  BotQ.A TopLatency SU(5) 1c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 1 10 16 6 12 2 14 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 
  BotQ.A RemainingLatency 0 + 12c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(16) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(16) %134:gpr64 = MOVaddr target-flags(aarch64-page) @.str.14, target-flags(aarch64-pageoff, aarch64-nc) @.str.14, debug-location !437; ep.c:286:5
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 1 10 4 6 12 2 14 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 
  BotQ.A RemainingLatency 0 + 13c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(1) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) STRXui %125:gpr64, $sp, 8, debug-location !437 :: (store 8 into stack + 64); ep.c:286:5
Bottom Pressure:
FPR8=2
GPR32=10
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %125
  UpdateRegP: SU(1) STRXui %125:gpr64, $sp, 8, debug-location !437 :: (store 8 into stack + 64); ep.c:286:5
              to 
  Ready @13c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 14 10 4 6 12 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 
  BotQ.A RemainingLatency 0 + 14c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(14) %133:gpr64 = MOVaddr target-flags(aarch64-page) @.str.15, target-flags(aarch64-pageoff, aarch64-nc) @.str.15, debug-location !437; ep.c:286:5
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 0 10 4 6 12 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 
  BotQ.A RemainingLatency 0 + 15c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(12) %132:gpr64 = MOVaddr target-flags(aarch64-page) @.str.16, target-flags(aarch64-pageoff, aarch64-nc) @.str.16, debug-location !437; ep.c:286:5
Bottom Pressure:
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @15c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 0 10 4 6 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 
  BotQ.A RemainingLatency 0 + 16c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(10) %131:gpr64 = MOVaddr target-flags(aarch64-page) @.str.17, target-flags(aarch64-pageoff, aarch64-nc) @.str.17, debug-location !437; ep.c:286:5
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 0 2 4 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 
  BotQ.A RemainingLatency 0 + 17c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %130:gpr64 = MOVaddr target-flags(aarch64-page) @.str.18, target-flags(aarch64-pageoff, aarch64-nc) @.str.18, debug-location !437; ep.c:286:5
Bottom Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 0 2 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 
  BotQ.A RemainingLatency 0 + 18c > CritPath 1
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %129:gpr64 = MOVaddr target-flags(aarch64-page) @.str.19, target-flags(aarch64-pageoff, aarch64-nc) @.str.19, debug-location !437; ep.c:286:5
Bottom Pressure:
FPR8=2
GPR32=5
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 0 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 
  BotQ.A RemainingLatency 0 + 19c > CritPath 1
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %128:gpr64 = MOVaddr target-flags(aarch64-page) @.str.20, target-flags(aarch64-pageoff, aarch64-nc) @.str.20, debug-location !437; ep.c:286:5
Bottom Pressure:
FPR8=2
GPR32=4
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @19c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  BotQ.A RemainingLatency 0 + 20c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %127:gpr64 = MOVaddr target-flags(aarch64-page) @.str.21, target-flags(aarch64-pageoff, aarch64-nc) @.str.21, debug-location !437; ep.c:286:5
Bottom Pressure:
FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @20c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %125:gpr64 = MOVaddr target-flags(aarch64-page) @.str.22, target-flags(aarch64-pageoff, aarch64-nc) @.str.22, debug-location !437; ep.c:286:5
Bottom Pressure:
FPR8=2
GPR32=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @21c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.48 ***
SU(0):   %125:gpr64 = MOVaddr target-flags(aarch64-page) @.str.22, target-flags(aarch64-pageoff, aarch64-nc) @.str.22, debug-location !437; ep.c:286:5
SU(2):   %127:gpr64 = MOVaddr target-flags(aarch64-page) @.str.21, target-flags(aarch64-pageoff, aarch64-nc) @.str.21, debug-location !437; ep.c:286:5
SU(4):   %128:gpr64 = MOVaddr target-flags(aarch64-page) @.str.20, target-flags(aarch64-pageoff, aarch64-nc) @.str.20, debug-location !437; ep.c:286:5
SU(6):   %129:gpr64 = MOVaddr target-flags(aarch64-page) @.str.19, target-flags(aarch64-pageoff, aarch64-nc) @.str.19, debug-location !437; ep.c:286:5
SU(8):   %130:gpr64 = MOVaddr target-flags(aarch64-page) @.str.18, target-flags(aarch64-pageoff, aarch64-nc) @.str.18, debug-location !437; ep.c:286:5
SU(10):   %131:gpr64 = MOVaddr target-flags(aarch64-page) @.str.17, target-flags(aarch64-pageoff, aarch64-nc) @.str.17, debug-location !437; ep.c:286:5
SU(12):   %132:gpr64 = MOVaddr target-flags(aarch64-page) @.str.16, target-flags(aarch64-pageoff, aarch64-nc) @.str.16, debug-location !437; ep.c:286:5
SU(14):   %133:gpr64 = MOVaddr target-flags(aarch64-page) @.str.15, target-flags(aarch64-pageoff, aarch64-nc) @.str.15, debug-location !437; ep.c:286:5
SU(1):   STRXui %125:gpr64, $sp, 8, debug-location !437 :: (store 8 into stack + 64); ep.c:286:5
SU(16):   %134:gpr64 = MOVaddr target-flags(aarch64-page) @.str.14, target-flags(aarch64-pageoff, aarch64-nc) @.str.14, debug-location !437; ep.c:286:5
SU(5):   STRXui %128:gpr64, $sp, 6, debug-location !437 :: (store 8 into stack + 48); ep.c:286:5
SU(3):   STRXui %127:gpr64, $sp, 7, debug-location !437 :: (store 8 into stack + 56); ep.c:286:5
SU(18):   %135:gpr64 = MOVaddr target-flags(aarch64-page) @.str.12, target-flags(aarch64-pageoff, aarch64-nc) @.str.12, debug-location !437; ep.c:286:5
SU(9):   STRXui %130:gpr64, $sp, 4, debug-location !437 :: (store 8 into stack + 32); ep.c:286:5
SU(7):   STRXui %129:gpr64, $sp, 5, debug-location !437 :: (store 8 into stack + 40); ep.c:286:5
SU(19):   %136:gpr64 = MOVaddr target-flags(aarch64-page) @.str.13, target-flags(aarch64-pageoff, aarch64-nc) @.str.13, debug-location !437; ep.c:286:5
SU(13):   STRXui %132:gpr64, $sp, 2, debug-location !437 :: (store 8 into stack + 16); ep.c:286:5
SU(11):   STRXui %131:gpr64, $sp, 3, debug-location !437 :: (store 8 into stack + 24); ep.c:286:5
SU(17):   STRXui %134:gpr64, $sp, 0, debug-location !437 :: (store 8 into stack); ep.c:286:5
SU(21):   $w1 = MOVi32imm 66, debug-location !437; ep.c:286:5
SU(22):   $w2 = MOVi32imm 31, debug-location !437; ep.c:286:5
SU(15):   STRXui %133:gpr64, $sp, 1, debug-location !437 :: (store 8 into stack + 8); ep.c:286:5
SU(26):   $d0 = COPY %122:fpr64, debug-location !437; ep.c:286:5
SU(27):   $d1 = COPY %123:fpr64, debug-location !437; ep.c:286:5
SU(20):   $x0 = COPY %135:gpr64, debug-location !437; ep.c:286:5
SU(23):   $w3 = COPY $wzr, debug-location !437; ep.c:286:5
SU(24):   $w4 = COPY $wzr, debug-location !437; ep.c:286:5
SU(25):   $w5 = COPY %121:gpr32, debug-location !437; ep.c:286:5
SU(28):   $x6 = COPY %136:gpr64, debug-location !437; ep.c:286:5
SU(29):   $w7 = COPY %124:gpr32, debug-location !437; ep.c:286:5

********** MI Scheduling **********
main:%bb.48 for.end161
  From: %121:gpr32 = LDRWui %stack.24.nit, 0, debug-location !433 :: (dereferenceable load 4 from %ir.nit); ep.c:286:45
    To: ADJCALLSTACKDOWN 72, 0, implicit-def dead $sp, implicit $sp, debug-location !437; ep.c:286:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %121:gpr32 = LDRWui %stack.24.nit, 0, debug-location !433 :: (dereferenceable load 4 from %ir.nit); ep.c:286:45
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %122:fpr64 = LDRDui %stack.10.tm, 0, debug-location !434 :: (dereferenceable load 8 from %ir.tm); ep.c:286:50
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %123:fpr64 = LDRDui %stack.1.Mops, 0, debug-location !435 :: (dereferenceable load 8 from %ir.Mops); ep.c:286:54
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %124:gpr32 = LDRWui %stack.27.verified, 0, debug-location !436 :: (dereferenceable load 4 from %ir.verified); ep.c:287:47
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 72, 0, implicit-def dead $sp, implicit $sp, debug-location !437; ep.c:286:5
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 0 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %124:gpr32 = LDRWui %stack.27.verified, 0, debug-location !436 :: (dereferenceable load 4 from %ir.verified); ep.c:287:47
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 1
  Executed: 4c
  Critical: 1c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  BotQ.A RemainingLatency 0 + 4c > CritPath 3
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %123:fpr64 = LDRDui %stack.1.Mops, 0, debug-location !435 :: (dereferenceable load 8 from %ir.Mops); ep.c:286:54
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 5c > CritPath 3
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %122:fpr64 = LDRDui %stack.10.tm, 0, debug-location !434 :: (dereferenceable load 8 from %ir.tm); ep.c:286:50
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %121:gpr32 = LDRWui %stack.24.nit, 0, debug-location !433 :: (dereferenceable load 4 from %ir.nit); ep.c:286:45
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.48 ***
SU(0):   %121:gpr32 = LDRWui %stack.24.nit, 0, debug-location !433 :: (dereferenceable load 4 from %ir.nit); ep.c:286:45
SU(1):   %122:fpr64 = LDRDui %stack.10.tm, 0, debug-location !434 :: (dereferenceable load 8 from %ir.tm); ep.c:286:50
SU(2):   %123:fpr64 = LDRDui %stack.1.Mops, 0, debug-location !435 :: (dereferenceable load 8 from %ir.Mops); ep.c:286:54
SU(3):   %124:gpr32 = LDRWui %stack.27.verified, 0, debug-location !436 :: (dereferenceable load 4 from %ir.verified); ep.c:287:47

********** MI Scheduling **********
main:%bb.49 if.then163
  From: %141:fpr64 = LDRDui %stack.10.tm, 0, debug-location !441 :: (dereferenceable load 8 from %ir.tm); ep.c:291:13
    To: Bcc 8, %bb.51, implicit $nzcv, debug-location !445; ep.c:291:13
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %141:fpr64 = LDRDui %stack.10.tm, 0, debug-location !441 :: (dereferenceable load 8 from %ir.tm); ep.c:291:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%141
  Single Issue       : false;
SU(1):   FCMPDri %141:fpr64, implicit-def $nzcv, debug-location !445; ep.c:291:13
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%141
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 8, %bb.51, implicit $nzcv, debug-location !445; ep.c:291:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) FCMPDri %141:fpr64, implicit-def $nzcv, debug-location !445; ep.c:291:13
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %141:fpr64 = LDRDui %stack.10.tm, 0, debug-location !441 :: (dereferenceable load 8 from %ir.tm); ep.c:291:13
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.49 ***
SU(0):   %141:fpr64 = LDRDui %stack.10.tm, 0, debug-location !441 :: (dereferenceable load 8 from %ir.tm); ep.c:291:13
SU(1):   FCMPDri %141:fpr64, implicit-def $nzcv, debug-location !445; ep.c:291:13

********** MI Scheduling **********
main:%bb.50 if.then166
  From: %142:gpr64 = MOVi64imm 4607182418800017408
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %142:gpr64 = MOVi64imm 4607182418800017408
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%142
  Single Issue       : false;
SU(1):   STRXui %142:gpr64, %stack.10.tm, 0, debug-location !446 :: (store 8 into %ir.tm); ep.c:292:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%142
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRXui %142:gpr64, %stack.10.tm, 0, debug-location !446 :: (store 8 into %ir.tm); ep.c:292:16
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %142:gpr64 = MOVi64imm 4607182418800017408
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.50 ***
SU(0):   %142:gpr64 = MOVi64imm 4607182418800017408
SU(1):   STRXui %142:gpr64, %stack.10.tm, 0, debug-location !446 :: (store 8 into %ir.tm); ep.c:292:16

********** MI Scheduling **********
main:%bb.51 if.end167
  From: %164:gpr64 = MOVaddr target-flags(aarch64-page) @.str.25, target-flags(aarch64-pageoff, aarch64-nc) @.str.25, debug-location !471; ep.c:298:9
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0, debug-location !471; ep.c:298:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %164:gpr64 = MOVaddr target-flags(aarch64-page) @.str.25, target-flags(aarch64-pageoff, aarch64-nc) @.str.25, debug-location !471; ep.c:298:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%164
  Single Issue       : false;
SU(1):   $x0 = COPY %164:gpr64, debug-location !471; ep.c:298:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%164
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %160:fpr64, debug-location !471; ep.c:298:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $d1 = COPY %163:fpr64, debug-location !471; ep.c:298:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0, debug-location !471; ep.c:298:9
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $d1 = COPY %163:fpr64, debug-location !471; ep.c:298:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(2) $d0 = COPY %160:fpr64, debug-location !471; ep.c:298:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %164:gpr64, debug-location !471; ep.c:298:9
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %164:gpr64 = MOVaddr target-flags(aarch64-page) @.str.25, target-flags(aarch64-pageoff, aarch64-nc) @.str.25, debug-location !471; ep.c:298:9
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.51 ***
SU(0):   %164:gpr64 = MOVaddr target-flags(aarch64-page) @.str.25, target-flags(aarch64-pageoff, aarch64-nc) @.str.25, debug-location !471; ep.c:298:9
SU(1):   $x0 = COPY %164:gpr64, debug-location !471; ep.c:298:9
SU(2):   $d0 = COPY %160:fpr64, debug-location !471; ep.c:298:9
SU(3):   $d1 = COPY %163:fpr64, debug-location !471; ep.c:298:9

********** MI Scheduling **********
main:%bb.51 if.end167
  From: %160:fpr64 = COPY $d0, debug-location !464; ep.c:297:14
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !471; ep.c:298:9
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %160:fpr64 = COPY $d0, debug-location !464; ep.c:297:14
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=0 Reg=%160
    SU(1): Data Latency=0 Reg=%160
  Single Issue       : false;
SU(1):   STRDui %160:fpr64, %stack.12.tt, 0, debug-location !465 :: (store 8 into %ir.tt); ep.c:297:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%160
  Single Issue       : false;
SU(2):   %161:fpr64 = FMULDrr %160:fpr64, %146:fpr64, debug-location !468; ep.c:298:60
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Data Latency=0 Reg=%160
  Successors:
    SU(4): Data Latency=1 Reg=%161
  Single Issue       : false;
SU(3):   %162:fpr64 = LDRDui %stack.10.tm, 0, debug-location !469 :: (dereferenceable load 8 from %ir.tm); ep.c:298:70
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(4): Data Latency=4 Reg=%162
  Single Issue       : false;
SU(4):   %163:fpr64 = FDIVDrr %161:fpr64, %162:fpr64, debug-location !470; ep.c:298:68
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Data Latency=4 Reg=%162
    SU(2): Data Latency=1 Reg=%161
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !471; ep.c:298:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 1 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %160:fpr64 = COPY $d0, debug-location !464; ep.c:297:14
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 1 
Queue TopQ.P: 
Queue TopQ.A: 3 2 1 
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %163:fpr64 = FDIVDrr %161:fpr64, %162:fpr64, debug-location !470; ep.c:298:68
  Ready @0c
  BotQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 3 2 1 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %161:fpr64 = FMULDrr %160:fpr64, %146:fpr64, debug-location !468; ep.c:298:60
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %160:fpr64, %stack.12.tt, 0, debug-location !465 :: (store 8 into %ir.tt); ep.c:297:12
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %162:fpr64 = LDRDui %stack.10.tm, 0, debug-location !469 :: (dereferenceable load 8 from %ir.tm); ep.c:298:70
  Ready @4c
  BotQ.A BotLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.51 ***
SU(0):   %160:fpr64 = COPY $d0, debug-location !464; ep.c:297:14
SU(3):   %162:fpr64 = LDRDui %stack.10.tm, 0, debug-location !469 :: (dereferenceable load 8 from %ir.tm); ep.c:298:70
SU(1):   STRDui %160:fpr64, %stack.12.tt, 0, debug-location !465 :: (store 8 into %ir.tt); ep.c:297:12
SU(2):   %161:fpr64 = FMULDrr %160:fpr64, %146:fpr64, debug-location !468; ep.c:298:60
SU(4):   %163:fpr64 = FDIVDrr %161:fpr64, %162:fpr64, debug-location !470; ep.c:298:68

********** MI Scheduling **********
main:%bb.51 if.end167
  From: %157:gpr64 = MOVaddr target-flags(aarch64-page) @.str.24, target-flags(aarch64-pageoff, aarch64-nc) @.str.24, debug-location !463; ep.c:296:9
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0, debug-location !463; ep.c:296:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %157:gpr64 = MOVaddr target-flags(aarch64-page) @.str.24, target-flags(aarch64-pageoff, aarch64-nc) @.str.24, debug-location !463; ep.c:296:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%157
  Single Issue       : false;
SU(1):   $x0 = COPY %157:gpr64, debug-location !463; ep.c:296:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%157
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %153:fpr64, debug-location !463; ep.c:296:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $d1 = COPY %156:fpr64, debug-location !463; ep.c:296:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0, debug-location !463; ep.c:296:9
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $d1 = COPY %156:fpr64, debug-location !463; ep.c:296:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(2) $d0 = COPY %153:fpr64, debug-location !463; ep.c:296:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %157:gpr64, debug-location !463; ep.c:296:9
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %157:gpr64 = MOVaddr target-flags(aarch64-page) @.str.24, target-flags(aarch64-pageoff, aarch64-nc) @.str.24, debug-location !463; ep.c:296:9
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.51 ***
SU(0):   %157:gpr64 = MOVaddr target-flags(aarch64-page) @.str.24, target-flags(aarch64-pageoff, aarch64-nc) @.str.24, debug-location !463; ep.c:296:9
SU(1):   $x0 = COPY %157:gpr64, debug-location !463; ep.c:296:9
SU(2):   $d0 = COPY %153:fpr64, debug-location !463; ep.c:296:9
SU(3):   $d1 = COPY %156:fpr64, debug-location !463; ep.c:296:9

********** MI Scheduling **********
main:%bb.51 if.end167
  From: %153:fpr64 = COPY $d0, debug-location !456; ep.c:295:14
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !463; ep.c:296:9
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %153:fpr64 = COPY $d0, debug-location !456; ep.c:295:14
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=0 Reg=%153
    SU(1): Data Latency=0 Reg=%153
  Single Issue       : false;
SU(1):   STRDui %153:fpr64, %stack.12.tt, 0, debug-location !457 :: (store 8 into %ir.tt); ep.c:295:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%153
  Single Issue       : false;
SU(2):   %154:fpr64 = FMULDrr %153:fpr64, %146:fpr64, debug-location !460; ep.c:296:60
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Data Latency=0 Reg=%153
  Successors:
    SU(4): Data Latency=1 Reg=%154
  Single Issue       : false;
SU(3):   %155:fpr64 = LDRDui %stack.10.tm, 0, debug-location !461 :: (dereferenceable load 8 from %ir.tm); ep.c:296:70
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(4): Data Latency=4 Reg=%155
  Single Issue       : false;
SU(4):   %156:fpr64 = FDIVDrr %154:fpr64, %155:fpr64, debug-location !462; ep.c:296:68
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Data Latency=4 Reg=%155
    SU(2): Data Latency=1 Reg=%154
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !463; ep.c:296:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 1 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %153:fpr64 = COPY $d0, debug-location !456; ep.c:295:14
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 1 
Queue TopQ.P: 
Queue TopQ.A: 3 2 1 
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %156:fpr64 = FDIVDrr %154:fpr64, %155:fpr64, debug-location !462; ep.c:296:68
  Ready @0c
  BotQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 3 2 1 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %154:fpr64 = FMULDrr %153:fpr64, %146:fpr64, debug-location !460; ep.c:296:60
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %153:fpr64, %stack.12.tt, 0, debug-location !457 :: (store 8 into %ir.tt); ep.c:295:12
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %155:fpr64 = LDRDui %stack.10.tm, 0, debug-location !461 :: (dereferenceable load 8 from %ir.tm); ep.c:296:70
  Ready @4c
  BotQ.A BotLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.51 ***
SU(0):   %153:fpr64 = COPY $d0, debug-location !456; ep.c:295:14
SU(3):   %155:fpr64 = LDRDui %stack.10.tm, 0, debug-location !461 :: (dereferenceable load 8 from %ir.tm); ep.c:296:70
SU(1):   STRDui %153:fpr64, %stack.12.tt, 0, debug-location !457 :: (store 8 into %ir.tt); ep.c:295:12
SU(2):   %154:fpr64 = FMULDrr %153:fpr64, %146:fpr64, debug-location !460; ep.c:296:60
SU(4):   %156:fpr64 = FDIVDrr %154:fpr64, %155:fpr64, debug-location !462; ep.c:296:68

********** MI Scheduling **********
main:%bb.51 if.end167
  From: %150:gpr64 = MOVaddr target-flags(aarch64-page) @.str.23, target-flags(aarch64-pageoff, aarch64-nc) @.str.23, debug-location !455; ep.c:294:9
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0, debug-location !455; ep.c:294:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %150:gpr64 = MOVaddr target-flags(aarch64-page) @.str.23, target-flags(aarch64-pageoff, aarch64-nc) @.str.23, debug-location !455; ep.c:294:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%150
  Single Issue       : false;
SU(1):   $x0 = COPY %150:gpr64, debug-location !455; ep.c:294:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%150
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %144:fpr64, debug-location !455; ep.c:294:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $d1 = COPY %149:fpr64, debug-location !455; ep.c:294:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0, debug-location !455; ep.c:294:9
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $d1 = COPY %149:fpr64, debug-location !455; ep.c:294:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(2) $d0 = COPY %144:fpr64, debug-location !455; ep.c:294:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %150:gpr64, debug-location !455; ep.c:294:9
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %150:gpr64 = MOVaddr target-flags(aarch64-page) @.str.23, target-flags(aarch64-pageoff, aarch64-nc) @.str.23, debug-location !455; ep.c:294:9
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.51 ***
SU(0):   %150:gpr64 = MOVaddr target-flags(aarch64-page) @.str.23, target-flags(aarch64-pageoff, aarch64-nc) @.str.23, debug-location !455; ep.c:294:9
SU(1):   $x0 = COPY %150:gpr64, debug-location !455; ep.c:294:9
SU(2):   $d0 = COPY %144:fpr64, debug-location !455; ep.c:294:9
SU(3):   $d1 = COPY %149:fpr64, debug-location !455; ep.c:294:9

********** MI Scheduling **********
main:%bb.51 if.end167
  From: %144:fpr64 = COPY $d0, debug-location !448; ep.c:293:14
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !455; ep.c:294:9
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Constraining copy SU(3)
SU(0):   %144:fpr64 = COPY $d0, debug-location !448; ep.c:293:14
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(4): Data Latency=0 Reg=%144
    SU(1): Data Latency=0 Reg=%144
  Single Issue       : false;
SU(1):   STRDui %144:fpr64, %stack.12.tt, 0, debug-location !449 :: (store 8 into %ir.tt); ep.c:293:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%144
  Single Issue       : false;
SU(2):   %145:gpr64 = MOVi64imm 4636737291354636288
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Data Latency=1 Reg=%145
  Single Issue       : false;
SU(3):   %146:fpr64 = COPY %145:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=%145
  Successors:
    SU(4): Data Latency=0 Reg=%146
  Single Issue       : false;
SU(4):   %147:fpr64 = FMULDrr %144:fpr64, %146:fpr64, debug-location !452; ep.c:294:62
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Data Latency=0 Reg=%146
    SU(0): Data Latency=0 Reg=%144
  Successors:
    SU(6): Data Latency=1 Reg=%147
  Single Issue       : false;
SU(5):   %148:fpr64 = LDRDui %stack.10.tm, 0, debug-location !453 :: (dereferenceable load 8 from %ir.tm); ep.c:294:72
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(6): Data Latency=4 Reg=%148
  Single Issue       : false;
SU(6):   %149:fpr64 = FDIVDrr %147:fpr64, %148:fpr64, debug-location !454; ep.c:294:70
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%147
    SU(5): Data Latency=4 Reg=%148
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !455; ep.c:294:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 5 
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %144:fpr64 = COPY $d0, debug-location !448; ep.c:293:14
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 1 
Queue TopQ.P: 
Queue TopQ.A: 5 2 1 
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(5) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %149:fpr64 = FDIVDrr %147:fpr64, %148:fpr64, debug-location !454; ep.c:294:70
  Ready @0c
  BotQ.A TopLatency SU(6) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 1 4 
Queue TopQ.P: 
Queue TopQ.A: 5 2 1 
BotQ.A RemLatency SU(4) 1c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %147:fpr64 = FMULDrr %144:fpr64, %146:fpr64, debug-location !452; ep.c:294:62
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 1 3 
Queue TopQ.P: 
Queue TopQ.A: 5 2 1 
BotQ.A RemLatency SU(3) 1c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %146:fpr64 = COPY %145:gpr64
  Ready @2c
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %144:fpr64, %stack.12.tt, 0, debug-location !449 :: (store 8 into %ir.tt); ep.c:293:12
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %145:gpr64 = MOVi64imm 4636737291354636288
  Ready @3c
  BotQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %148:fpr64 = LDRDui %stack.10.tm, 0, debug-location !453 :: (dereferenceable load 8 from %ir.tm); ep.c:294:72
  Ready @4c
  BotQ.A BotLatency SU(5) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.51 ***
SU(0):   %144:fpr64 = COPY $d0, debug-location !448; ep.c:293:14
SU(5):   %148:fpr64 = LDRDui %stack.10.tm, 0, debug-location !453 :: (dereferenceable load 8 from %ir.tm); ep.c:294:72
SU(2):   %145:gpr64 = MOVi64imm 4636737291354636288
SU(1):   STRDui %144:fpr64, %stack.12.tt, 0, debug-location !449 :: (store 8 into %ir.tt); ep.c:293:12
SU(3):   %146:fpr64 = COPY %145:gpr64
SU(4):   %147:fpr64 = FMULDrr %144:fpr64, %146:fpr64, debug-location !452; ep.c:294:62
SU(6):   %149:fpr64 = FDIVDrr %147:fpr64, %148:fpr64, debug-location !454; ep.c:294:70

********** INTERVALS **********
NZCV [816r,832r:17)[1616r,1632r:16)[1824r,1856r:15)[2736r,2752r:14)[3184r,3200r:13)[3584r,3600r:12)[3808r,3824r:6)[3888r,3904r:5)[3968r,3984r:4)[5088r,5104r:3)[5376r,5392r:2)[5600r,5632r:1)[5968r,6200r:0)[6608r,6624r:11)[7408r,7416r:10)[7424r,7440r:9)[8448r,8464r:8)[9472r,9488r:7)  0@5968r 1@5600r 2@5376r 3@5088r 4@3968r 5@3888r 6@3808r 7@9472r 8@8448r 9@7424r 10@7408r 11@6608r 12@3584r 13@3184r 14@2736r 15@1824r 16@1616r 17@816r
WSP [128r,128d:125)[208r,208d:124)[224r,224d:123)[432r,432d:122)[464r,464d:121)[480r,480d:120)[512r,512d:119)[592r,592d:118)[608r,608d:117)[640r,640d:116)[736r,736d:115)[752r,752d:114)[1008r,1008d:113)[1056r,1056d:112)[1072r,1072d:111)[1088r,1088d:110)[1152r,1152d:109)[1168r,1168d:108)[1304r,1304d:107)[1376r,1376d:106)[1392r,1392d:105)[1424r,1424d:104)[1472r,1472d:103)[1488r,1488d:102)[1904r,1904d:101)[1936r,1936d:100)[1952r,1952d:99)[2048r,2048d:98)[2080r,2080d:97)[2096r,2096d:96)[2144r,2144d:95)[2192r,2192d:94)[2208r,2208d:93)[2224r,2224d:92)[2272r,2272d:91)[2288r,2288d:90)[2304r,2304d:89)[2352r,2352d:88)[2368r,2368d:87)[2384r,2384d:86)[2416r,2416d:85)[2432r,2432d:84)[2480r,2480d:83)[2624r,2624d:82)[2640r,2640d:81)[2800r,2800d:2)[2848r,2848d:1)[2864r,2864d:0)[4048r,4048d:29)[4096r,4096d:28)[4112r,4112d:27)[4256r,4256d:26)[4304r,4304d:25)[4320r,4320d:24)[4544r,4544d:23)[4576r,4576d:22)[4592r,4592d:21)[4624r,4624d:20)[4704r,4704d:19)[4720r,4720d:18)[4800r,4800d:17)[4832r,4832d:16)[4848r,4848d:15)[4944r,4944d:14)[4976r,4976d:13)[4992r,4992d:12)[5456r,5456d:8)[5488r,5488d:7)[5504r,5504d:6)[5680r,5680d:5)[5712r,5712d:4)[5728r,5728d:3)[6384r,6384d:11)[6416r,6416d:10)[6432r,6432d:9)[6832r,6832d:80)[6880r,6880d:79)[6896r,6896d:78)[6912r,6912d:77)[6944r,6944d:76)[6960r,6960d:75)[7504r,7504d:74)[7584r,7584d:73)[7600r,7600d:72)[7728r,7728d:71)[7776r,7776d:70)[7792r,7792d:69)[7824r,7824d:68)[7888r,7888d:67)[7904r,7904d:66)[7920r,7920d:65)[8000r,8000d:64)[8016r,8016d:63)[8048r,8048d:62)[8112r,8112d:61)[8128r,8128d:60)[8176r,8176d:59)[8256r,8256d:58)[8272r,8272d:57)[8288r,8288d:56)[8336r,8336d:55)[8352r,8352d:54)[8560r,8560d:32)[8624r,8624d:31)[8640r,8640d:30)[8800r,8800d:53)[9360r,9360d:52)[9376r,9376d:51)[9584r,9584d:50)[9632r,9632d:49)[9648r,9648d:48)[9784r,9784d:47)[9856r,9856d:46)[9872r,9872d:45)[9888r,9888d:44)[9936r,9936d:43)[9952r,9952d:42)[10048r,10048d:41)[10128r,10128d:40)[10144r,10144d:39)[10160r,10160d:38)[10208r,10208d:37)[10224r,10224d:36)[10320r,10320d:35)[10400r,10400d:34)[10416r,10416d:33)  0@2864r 1@2848r 2@2800r 3@5728r 4@5712r 5@5680r 6@5504r 7@5488r 8@5456r 9@6432r 10@6416r 11@6384r 12@4992r 13@4976r 14@4944r 15@4848r 16@4832r 17@4800r 18@4720r 19@4704r 20@4624r 21@4592r 22@4576r 23@4544r 24@4320r 25@4304r 26@4256r 27@4112r 28@4096r 29@4048r 30@8640r 31@8624r 32@8560r 33@10416r 34@10400r 35@10320r 36@10224r 37@10208r 38@10160r 39@10144r 40@10128r 41@10048r 42@9952r 43@9936r 44@9888r 45@9872r 46@9856r 47@9784r 48@9648r 49@9632r 50@9584r 51@9376r 52@9360r 53@8800r 54@8352r 55@8336r 56@8288r 57@8272r 58@8256r 59@8176r 60@8128r 61@8112r 62@8048r 63@8016r 64@8000r 65@7920r 66@7904r 67@7888r 68@7824r 69@7792r 70@7776r 71@7728r 72@7600r 73@7584r 74@7504r 75@6960r 76@6944r 77@6912r 78@6896r 79@6880r 80@6832r 81@2640r 82@2624r 83@2480r 84@2432r 85@2416r 86@2384r 87@2368r 88@2352r 89@2304r 90@2288r 91@2272r 92@2224r 93@2208r 94@2192r 95@2144r 96@2096r 97@2080r 98@2048r 99@1952r 100@1936r 101@1904r 102@1488r 103@1472r 104@1424r 105@1392r 106@1376r 107@1304r 108@1168r 109@1152r 110@1088r 111@1072r 112@1056r 113@1008r 114@752r 115@736r 116@640r 117@608r 118@592r 119@512r 120@480r 121@464r 122@432r 123@224r 124@208r 125@128r
B0 [560r,592r:35)[592r,624r:34)[720r,736r:33)[1344r,1376r:32)[1456r,1472r:31)[1472r,1504r:30)[1920r,1936r:29)[1936r,1968r:28)[2064r,2080r:27)[2080r,2112r:26)[2592r,2624r:25)[2832r,2848r:1)[2848r,2880r:0)[4080r,4096r:10)[4096r,4128r:9)[4288r,4304r:8)[4304r,4336r:7)[4672r,4704r:6)[5472r,5488r:5)[5488r,5556r:4)[5696r,5712r:3)[5712r,5744r:2)[6944r,6976r:24)[7552r,7584r:23)[7584r,7616r:22)[7872r,7888r:21)[8096r,8112r:20)[8224r,8256r:19)[8608r,8624r:11)[9296r,9360r:18)[9632r,9664r:17)[9824r,9856r:16)[9936r,9968r:15)[10096r,10128r:14)[10208r,10240r:13)[10368r,10400r:12)  0@2848r 1@2832r 2@5712r 3@5696r 4@5488r 5@5472r 6@4672r 7@4304r 8@4288r 9@4096r 10@4080r 11@8608r 12@10368r 13@10208r 14@10096r 15@9936r 16@9824r 17@9632r 18@9296r 19@8224r 20@8096r 21@7872r 22@7584r 23@7552r 24@6944r 25@2592r 26@2080r 27@2064r 28@1936r 29@1920r 30@1472r 31@1456r 32@1344r 33@720r 34@592r 35@560r
W0 [176r,208r:51)[208r,240r:50)[448r,464r:49)[464r,464d:30)[688r,736r:31)[736r,736d:29)[1040r,1056r:48)[1056r,1056d:28)[1144r,1152r:47)[1152r,1152d:27)[1336r,1376r:26)[1440r,1472r:46)[2176r,2192r:25)[2256r,2272r:3)[2336r,2352r:2)[2400r,2416r:24)[2584r,2624r:23)[2816r,2848r:32)[4064r,4096r:34)[4272r,4304r:33)[4560r,4576r:7)[4664r,4704r:8)[4816r,4832r:6)[4960r,4976r:5)[6400r,6416r:4)[6864r,6880r:22)[6928r,6944r:21)[7760r,7776r:45)[7776r,7776d:20)[7856r,7888r:44)[7888r,7888d:19)[7992r,8000r:43)[8000r,8000d:18)[8080r,8112r:42)[8112r,8112d:17)[8208r,8256r:41)[8256r,8256d:16)[8320r,8336r:40)[8336r,8336d:15)[8576r,8624r:35)[8624r,8624d:9)[9316r,9360r:39)[9616r,9632r:14)[9808r,9856r:38)[9856r,9856d:13)[9920r,9936r:1)[10080r,10128r:37)[10128r,10128d:12)[10192r,10208r:0)[10352r,10400r:36)[10400r,10400d:11)[10464r,10480r:10)  0@10192r 1@9920r 2@2336r 3@2256r 4@6400r 5@4960r 6@4816r 7@4560r 8@4664r 9@8624r 10@10464r 11@10400r 12@10128r 13@9856r 14@9616r 15@8336r 16@8256r 17@8112r 18@8000r 19@7888r 20@7776r 21@6928r 22@6864r 23@2584r 24@2400r 25@2176r 26@1336r 27@1152r 28@1056r 29@736r 30@464r 31@688r 32@2816r 33@4272r 34@4064r 35@8576r 36@10352r 37@10080r 38@9808r 39@9316r 40@8320r 41@8208r 42@8080r 43@7992r 44@7856r 45@7760r 46@1440r 47@1144r 48@1040r 49@448r 50@208r 51@176r
W3 [9320r,9360r:0)  0@9320r
W4 [9328r,9360r:0)  0@9328r
W5 [9336r,9360r:0)  0@9336r
%0 [1792r,6528B:0)  0@1792r weight:0.000000e+00
%4 [2720r,2832r:0)[2976B,2992r:0)  0@2720r weight:0.000000e+00
%5 [5568r,5696r:0)  0@5568r weight:0.000000e+00
%10 [48r,96r:0)  0@48r weight:0.000000e+00
%11 [64r,104r:0)  0@64r weight:0.000000e+00
%12 [96r,112r:0)  0@96r weight:0.000000e+00
%13 [144r,176r:0)  0@144r weight:0.000000e+00
%14 [160r,192r:0)  0@160r weight:0.000000e+00
%15 [240r,272r:0)  0@240r weight:0.000000e+00
%16 [420r,424r:0)  0@420r weight:0.000000e+00
%17 [416r,448r:0)  0@416r weight:0.000000e+00
%20 [528r,560r:0)  0@528r weight:0.000000e+00
%21 [544r,576r:0)  0@544r weight:0.000000e+00
%22 [624r,720r:0)  0@624r weight:0.000000e+00
%23 [656r,704r:0)  0@656r weight:0.000000e+00
%24 [696r,960r:0)  0@696r weight:0.000000e+00
%26 [808r,824r:0)  0@808r weight:0.000000e+00
%27 [800r,816r:0)  0@800r weight:0.000000e+00
%29 [880r,896r:0)  0@880r weight:0.000000e+00
%30 [896r,912r:0)  0@896r weight:0.000000e+00
%31 [944r,960r:0)  0@944r weight:0.000000e+00
%33 [960r,992r:0)  0@960r weight:0.000000e+00
%35 [1024r,1040r:0)  0@1024r weight:0.000000e+00
%37 [1104r,1144r:0)  0@1104r weight:0.000000e+00
%39 [1200r,1272r:0)  0@1200r weight:0.000000e+00
%40 [1280r,1296r:0)  0@1280r weight:0.000000e+00
%41 [1288r,1440r:0)  0@1288r weight:0.000000e+00
%42 [1264r,1344r:0)  0@1264r weight:0.000000e+00
%43 [1296r,1360r:0)  0@1296r weight:0.000000e+00
%44 [1408r,1456r:0)  0@1408r weight:0.000000e+00
%45 [1504r,1520r:0)  0@1504r weight:0.000000e+00
%46 [1600r,1616r:0)  0@1600r weight:0.000000e+00
%49 [2112r,2128r:0)  0@2112r weight:0.000000e+00
%53 [2448r,2656r:0)  0@2448r weight:0.000000e+00
%54 [2536r,6528B:0)  0@2536r weight:0.000000e+00
%55 [2512r,2528r:0)  0@2512r weight:0.000000e+00
%56 [2528r,6528B:0)  0@2528r weight:0.000000e+00
%58 [2704r,2736r:0)  0@2704r weight:0.000000e+00
%60 [3008r,3128r:0)  0@3008r weight:0.000000e+00
%63 [3168r,3184r:0)  0@3168r weight:0.000000e+00
%65 [3376r,3444r:0)  0@3376r weight:0.000000e+00
%66 [3408r,6528B:0)  0@3408r weight:0.000000e+00
%67 [3552r,3584r:0)  0@3552r weight:0.000000e+00
%68 [3568r,3584r:0)  0@3568r weight:0.000000e+00
%71 [6592r,6608r:0)  0@6592r weight:0.000000e+00
%74 [6976r,6992r:0)  0@6976r weight:0.000000e+00
%75 [7024r,7120r:0)  0@7024r weight:0.000000e+00
%76 [7056r,7096r:0)  0@7056r weight:0.000000e+00
%77 [7088r,7104r:0)  0@7088r weight:0.000000e+00
%78 [7168r,7284r:0)  0@7168r weight:0.000000e+00
%79 [7184r,7288r:0)  0@7184r weight:0.000000e+00
%80 [7284r,7288r:0)  0@7284r weight:0.000000e+00
%81 [7288r,7380r:0)  0@7288r weight:0.000000e+00
%82 [7380r,7408r:0)  0@7380r weight:0.000000e+00
%83 [7264r,7364r:0)  0@7264r weight:0.000000e+00
%84 [7280r,7368r:0)  0@7280r weight:0.000000e+00
%85 [7364r,7368r:0)  0@7364r weight:0.000000e+00
%86 [7368r,7384r:0)  0@7368r weight:0.000000e+00
%87 [7384r,7424r:0)  0@7384r weight:0.000000e+00
%88 [7360r,7376r:0)  0@7360r weight:0.000000e+00
%89 [7376r,7424r:0)  0@7376r weight:0.000000e+00
%90 [7416r,7456r:0)  0@7416r weight:0.000000e+00
%91 [7440r,7456r:0)  0@7440r weight:0.000000e+00
%92 [7456r,7472r:0)  0@7456r weight:0.000000e+00
%93 [7520r,7552r:0)  0@7520r weight:0.000000e+00
%94 [7536r,7568r:0)  0@7536r weight:0.000000e+00
%95 [7616r,7672r:0)  0@7616r weight:0.000000e+00
%96 [7632r,7672r:0)  0@7632r weight:0.000000e+00
%97 [7672r,7696r:0)  0@7672r weight:0.000000e+00
%98 [7664r,7680r:0)  0@7664r weight:0.000000e+00
%99 [7680r,7696r:0)  0@7680r weight:0.000000e+00
%100 [7696r,7712r:0)  0@7696r weight:0.000000e+00
%101 [7744r,7760r:0)  0@7744r weight:0.000000e+00
%103 [7808r,7872r:0)  0@7808r weight:0.000000e+00
%104 [7840r,7856r:0)  0@7840r weight:0.000000e+00
%106 [7936r,7992r:0)  0@7936r weight:0.000000e+00
%109 [8032r,8096r:0)  0@8032r weight:0.000000e+00
%110 [8064r,8080r:0)  0@8064r weight:0.000000e+00
%112 [8144r,8224r:0)  0@8144r weight:0.000000e+00
%113 [8160r,8240r:0)  0@8160r weight:0.000000e+00
%114 [8192r,8208r:0)  0@8192r weight:0.000000e+00
%116 [8304r,8320r:0)  0@8304r weight:0.000000e+00
%119 [8432r,8448r:0)  0@8432r weight:0.000000e+00
%121 [8736r,9336r:0)  0@8736r weight:0.000000e+00
%122 [8752r,9296r:0)  0@8752r weight:0.000000e+00
%123 [8768r,9312r:0)  0@8768r weight:0.000000e+00
%124 [8784r,9352r:0)  0@8784r weight:0.000000e+00
%125 [8816r,9064r:0)  0@8816r weight:0.000000e+00
%127 [8864r,9096r:0)  0@8864r weight:0.000000e+00
%128 [8896r,9092r:0)  0@8896r weight:0.000000e+00
%129 [8928r,9128r:0)  0@8928r weight:0.000000e+00
%130 [8960r,9124r:0)  0@8960r weight:0.000000e+00
%131 [8992r,9152r:0)  0@8992r weight:0.000000e+00
%132 [9024r,9144r:0)  0@9024r weight:0.000000e+00
%133 [9056r,9240r:0)  0@9056r weight:0.000000e+00
%134 [9088r,9160r:0)  0@9088r weight:0.000000e+00
%135 [9120r,9316r:0)  0@9120r weight:0.000000e+00
%136 [9136r,9344r:0)  0@9136r weight:0.000000e+00
%140 [9392r,9408r:0)  0@9392r weight:0.000000e+00
%141 [9456r,9472r:0)  0@9456r weight:0.000000e+00
%142 [9536r,9552r:0)  0@9536r weight:0.000000e+00
%144 [9664r,9824r:0)  0@9664r weight:0.000000e+00
%145 [9748r,9760r:0)  0@9748r weight:0.000000e+00
%146 [9760r,10296r:0)  0@9760r weight:0.000000e+00
%147 [9768r,9776r:0)  0@9768r weight:0.000000e+00
%148 [9744r,9776r:0)  0@9744r weight:0.000000e+00
%149 [9776r,9840r:0)  0@9776r weight:0.000000e+00
%150 [9792r,9808r:0)  0@9792r weight:0.000000e+00
%153 [9968r,10096r:0)  0@9968r weight:0.000000e+00
%154 [10024r,10032r:0)  0@10024r weight:0.000000e+00
%155 [10016r,10032r:0)  0@10016r weight:0.000000e+00
%156 [10032r,10112r:0)  0@10032r weight:0.000000e+00
%157 [10064r,10080r:0)  0@10064r weight:0.000000e+00
%160 [10240r,10368r:0)  0@10240r weight:0.000000e+00
%161 [10296r,10304r:0)  0@10296r weight:0.000000e+00
%162 [10288r,10304r:0)  0@10288r weight:0.000000e+00
%163 [10304r,10384r:0)  0@10304r weight:0.000000e+00
%164 [10336r,10352r:0)  0@10336r weight:0.000000e+00
%167 [8512r,8592r:0)  0@8512r weight:0.000000e+00
%170 [8544r,8608r:0)  0@8544r weight:0.000000e+00
%171 [8400r,8720B:0)  0@8400r weight:0.000000e+00
%173 [8656r,8672r:0)  0@8656r weight:0.000000e+00
%174 [8672r,8688r:0)  0@8672r weight:0.000000e+00
%175 [6696r,6772r:0)  0@6696r weight:0.000000e+00
%176 [6688r,6768r:0)  0@6688r weight:0.000000e+00
%179 [6720r,6772r:0)  0@6720r weight:0.000000e+00
%180 [6772r,6776r:0)  0@6772r weight:0.000000e+00
%181 [6768r,6784r:0)  0@6768r weight:0.000000e+00
%182 [3648r,3736r:0)  0@3648r weight:0.000000e+00
%183 [3664r,3736r:0)  0@3664r weight:0.000000e+00
%184 [3736r,3752r:0)  0@3736r weight:0.000000e+00
%185 [3440r,6528B:0)  0@3440r weight:0.000000e+00
%186 [3728r,3744r:0)  0@3728r weight:0.000000e+00
%188 [3792r,3808r:0)  0@3792r weight:0.000000e+00
%190 [3872r,3968r:0)  0@3872r weight:0.000000e+00
%192 [3904r,3952r:0)  0@3904r weight:0.000000e+00
%193 [3920r,3976r:0)  0@3920r weight:0.000000e+00
%194 [3952r,3968r:0)  0@3952r weight:0.000000e+00
%196 [4032r,4080r:0)  0@4032r weight:0.000000e+00
%198 [4128r,4144r:0)  0@4128r weight:0.000000e+00
%199 [4176r,4192r:0)  0@4176r weight:0.000000e+00
%200 [4240r,4288r:0)  0@4240r weight:0.000000e+00
%202 [4336r,4404r:0)  0@4336r weight:0.000000e+00
%203 [4368r,4408r:0)  0@4368r weight:0.000000e+00
%204 [4400r,4416r:0)  0@4400r weight:0.000000e+00
%205 [4416r,4432r:0)  0@4416r weight:0.000000e+00
%206 [4480r,4496r:0)  0@4480r weight:0.000000e+00
%213 [4736r,4752r:0)  0@4736r weight:0.000000e+00
%215 [4880r,4896r:0)  0@4880r weight:0.000000e+00
%218 [5072r,5088r:0)  0@5072r weight:0.000000e+00
%220 [6344r,6352r:0)  0@6344r weight:0.000000e+00
%222 [6464r,6480r:0)  0@6464r weight:0.000000e+00
%223 [6480r,6496r:0)  0@6480r weight:0.000000e+00
%225 [5152r,5168r:0)  0@5152r weight:0.000000e+00
%226 [5168r,5248r:0)  0@5168r weight:0.000000e+00
%227 [5184r,5256r:0)  0@5184r weight:0.000000e+00
%228 [5256r,5272r:0)  0@5256r weight:0.000000e+00
%230 [5272r,5312r:0)  0@5272r weight:0.000000e+00
%231 [5248r,5264r:0)  0@5248r weight:0.000000e+00
%232 [5264r,5280r:0)  0@5264r weight:0.000000e+00
%233 [5280r,5328r:0)  0@5280r weight:0.000000e+00
%234 [5312r,5344r:0)  0@5312r weight:0.000000e+00
%235 [5328r,5344r:0)  0@5328r weight:0.000000e+00
%236 [5344r,5384r:0)  0@5344r weight:0.000000e+00
%237 [5440r,5472r:0)  0@5440r weight:0.000000e+00
%238 [5556r,5560r:0)  0@5556r weight:0.000000e+00
%239 [3520r,6528B:0)  0@3520r weight:0.000000e+00
%240 [5560r,5568r:0)  0@5560r weight:0.000000e+00
%241 [5552r,5568r:0)  0@5552r weight:0.000000e+00
%243 [5840r,5896r:0)  0@5840r weight:0.000000e+00
%244 [5896r,6200r:0)  0@5896r weight:0.000000e+00
%245 [5888r,5904r:0)  0@5888r weight:0.000000e+00
%246 [5904r,6256r:0)  0@5904r weight:0.000000e+00
%247 [5936r,5968r:0)  0@5936r weight:0.000000e+00
%248 [5952r,5968r:0)  0@5952r weight:0.000000e+00
%249 [6200r,6208r:0)  0@6200r weight:0.000000e+00
%250 [6208r,6216r:0)  0@6208r weight:0.000000e+00
%252 [6216r,6232r:0)  0@6216r weight:0.000000e+00
%254 [6232r,6280r:0)  0@6232r weight:0.000000e+00
%256 [6240r,6272r:0)  0@6240r weight:0.000000e+00
%258 [6272r,6280r:0)  0@6272r weight:0.000000e+00
%259 [6128r,6192r:0)  0@6128r weight:0.000000e+00
%260 [6192r,6264r:0)  0@6192r weight:0.000000e+00
%261 [6176r,6256r:0)  0@6176r weight:0.000000e+00
%262 [6256r,6288r:0)  0@6256r weight:0.000000e+00
%263 [6304r,6312r:0)  0@6304r weight:0.000000e+00
%264 [6312r,6320r:0)  0@6312r weight:0.000000e+00
%265 [3248r,3312r:0)  0@3248r weight:0.000000e+00
%267 [3136r,8720B:0)  0@3136r weight:0.000000e+00
%269 [3312r,3328r:0)  0@3312r weight:0.000000e+00
%271 [2880r,2920r:0)  0@2880r weight:0.000000e+00
%272 [2912r,2928r:0)  0@2912r weight:0.000000e+00
%273 [2928r,2944r:0)  0@2928r weight:0.000000e+00
%274 [1680r,1728r:0)  0@1680r weight:0.000000e+00
%276 [1552r,1776B:0)  0@1552r weight:0.000000e+00
%277 [1568r,1776B:0)  0@1568r weight:0.000000e+00
%278 [1728r,1744r:0)  0@1728r weight:0.000000e+00
%279 [1808r,1888B:0)[1968r,2016B:1)[2016B,2064r:2)  0@1808r 1@1968r 2@2016B-phi weight:0.000000e+00
%280 [5584r,5664B:0)[5744r,5792B:1)[5792B,6136r:2)  0@5584r 1@5744r 2@5792B-phi weight:0.000000e+00
RegMasks: 208r 464r 592r 736r 1056r 1152r 1376r 1472r 1936r 2080r 2192r 2272r 2352r 2416r 2624r 2848r 4096r 4304r 4576r 4704r 4832r 4976r 5488r 5712r 6416r 6880r 6944r 7584r 7776r 7888r 8000r 8112r 8256r 8336r 8624r 9360r 9632r 9856r 9936r 10128r 10208r 10400r
********** MACHINEINSTRS **********
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=8, align=8, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=8, align=8, at location [SP]
  fi#4: size=8, align=8, at location [SP]
  fi#5: size=8, align=8, at location [SP]
  fi#6: size=8, align=8, at location [SP]
  fi#7: size=8, align=8, at location [SP]
  fi#8: size=8, align=8, at location [SP]
  fi#9: size=8, align=8, at location [SP]
  fi#10: size=8, align=8, at location [SP]
  fi#11: size=8, align=8, at location [SP]
  fi#12: size=8, align=8, at location [SP]
  fi#13: size=8, align=8, at location [SP]
  fi#14: size=8, align=8, at location [SP]
  fi#15: size=8, align=8, at location [SP]
  fi#16: size=8, align=8, at location [SP]
  fi#17: size=8, align=8, at location [SP]
  fi#18: size=4, align=4, at location [SP]
  fi#19: size=4, align=4, at location [SP]
  fi#20: size=4, align=4, at location [SP]
  fi#21: size=4, align=4, at location [SP]
  fi#22: size=4, align=4, at location [SP]
  fi#23: size=4, align=4, at location [SP]
  fi#24: size=4, align=4, at location [SP]
  fi#25: size=4, align=4, at location [SP]
  fi#26: size=4, align=4, at location [SP]
  fi#27: size=4, align=4, at location [SP]
  fi#28: size=4, align=4, at location [SP]
  fi#29: size=24, align=16, at location [SP]
  fi#30: size=16, align=16, at location [SP]
  fi#31: size=8, align=8, at location [SP]
Constant Pool:
  cp#0: 0x41D2309CE5400000, align=8
  cp#1: 1.000000e-08, align=8

0B	bb.0.entry:
	  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)

48B	  %10:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.dum, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.dum, debug-location !93; ep.c:82:12
64B	  %11:fpr128 = LDRQui %10:gpr64common, 0, debug-location !93 :: (dereferenceable load 16 from `i8* bitcast ([3 x double]* @__const.main.dum to i8*)`); ep.c:82:12
96B	  %12:gpr64 = LDRXui %10:gpr64common, 2, debug-location !93 :: (dereferenceable load 8 from `i8* bitcast ([3 x double]* @__const.main.dum to i8*)` + 16, align 16); ep.c:82:12
100B	  STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
104B	  STRQui %11:fpr128, %stack.29.dum, 0, debug-location !93 :: (store 16 into %ir.0); ep.c:82:12
112B	  STRXui %12:gpr64, %stack.29.dum, 2, debug-location !93 :: (store 8 into %ir.0 + 16, align 16); ep.c:82:12
128B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !106; ep.c:87:15
144B	  %13:gpr64 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str, debug-location !106; ep.c:87:15
160B	  %14:gpr64 = MOVaddr target-flags(aarch64-page) @.str.1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1, debug-location !106; ep.c:87:15
176B	  $x0 = COPY %13:gpr64, debug-location !106; ep.c:87:15
192B	  $x1 = COPY %14:gpr64, debug-location !106; ep.c:87:15
208B	  BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit-def $sp, implicit-def $x0, debug-location !106; ep.c:87:15
224B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !106; ep.c:87:15
240B	  %15:gpr64 = COPY $x0, debug-location !106; ep.c:87:15
256B	  STRXui %15:gpr64, %stack.31.fp, 0, debug-location !108 :: (store 8 into %ir.fp); ep.c:87:13
272B	  CBNZX %15:gpr64, %bb.2, debug-location !110; ep.c:87:9
288B	  B %bb.1, debug-location !110; ep.c:87:9

304B	bb.1.if.then:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

336B	  STRWui $wzr, %stack.28.timers_enabled, 0, debug-location !111 :: (store 4 into %ir.timers_enabled); ep.c:88:24
352B	  B %bb.3, debug-location !113; ep.c:89:5

368B	bb.2.if.else:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

416B	  %17:gpr64 = LDRXui %stack.31.fp, 0, debug-location !116 :: (dereferenceable load 8 from %ir.fp); ep.c:92:16
420B	  %16:gpr32 = MOVi32imm 1
424B	  STRWui %16:gpr32, %stack.28.timers_enabled, 0, debug-location !114 :: (store 4 into %ir.timers_enabled); ep.c:91:24
432B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !117; ep.c:92:9
448B	  $x0 = COPY %17:gpr64, debug-location !117; ep.c:92:9
464B	  BL @fclose, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !117; ep.c:92:9
480B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !117; ep.c:92:9

496B	bb.3.if.end:
	; predecessors: %bb.2, %bb.1
	  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)

512B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !119; ep.c:102:30
528B	  %20:fpr64 = FMOVDi 0
544B	  %21:fpr64 = FMOVDi 63
560B	  $d0 = COPY %20:fpr64, debug-location !119; ep.c:102:30
576B	  $d1 = COPY %21:fpr64, debug-location !119; ep.c:102:30
592B	  BL @pow, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def $d0, debug-location !119; ep.c:102:30
608B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !119; ep.c:102:30
624B	  %22:fpr64 = COPY $d0, debug-location !119; ep.c:102:30
640B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !120; ep.c:102:5
656B	  %23:gpr64 = MOVaddr target-flags(aarch64-page) @.str.2, target-flags(aarch64-pageoff, aarch64-nc) @.str.2, debug-location !120; ep.c:102:5
688B	  $x0 = ADDXri %stack.30.size, 0, 0, debug-location !120; ep.c:102:5
696B	  %24:gpr64common = ADDXri %stack.30.size, 0, 0
704B	  $x1 = COPY %23:gpr64, debug-location !120; ep.c:102:5
720B	  $d0 = COPY %22:fpr64, debug-location !120; ep.c:102:5
736B	  BL @sprintf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !120; ep.c:102:5
752B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !120; ep.c:102:5
800B	  %27:gpr32common = LDRSBWui %stack.30.size, 14, debug-location !124 :: (load 1 from %ir.arrayidx, align 2); ep.c:104:9
808B	  %26:gpr32 = MOVi32imm 14
816B	  dead $wzr = SUBSWri %27:gpr32common, 46, 0, implicit-def $nzcv, debug-location !126; ep.c:104:9
824B	  STRWui %26:gpr32, %stack.26.j, 0, debug-location !121 :: (store 4 into %ir.j); ep.c:103:7
832B	  Bcc 1, %bb.5, implicit $nzcv, debug-location !126; ep.c:104:9
848B	  B %bb.4, debug-location !126; ep.c:104:9

864B	bb.4.if.then6:
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

880B	  %29:gpr32common = LDRWui %stack.26.j, 0, debug-location !127 :: (dereferenceable load 4 from %ir.j); ep.c:105:10
896B	  %30:gpr32common = nsw SUBWri %29:gpr32common, 1, 0, debug-location !127; ep.c:105:10
912B	  STRWui %30:gpr32common, %stack.26.j, 0, debug-location !127 :: (store 4 into %ir.j); ep.c:105:10

928B	bb.5.if.end7:
	; predecessors: %bb.3, %bb.4
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

944B	  %31:gpr64 = LDRSWui %stack.26.j, 0, debug-location !129 :: (dereferenceable load 4 from %ir.j); ep.c:106:10
960B	  %33:gpr64common = ADDXrr %31:gpr64, %24:gpr64common, debug-location !130; ep.c:106:12
992B	  STRBBui $wzr, %33:gpr64common, 1, debug-location !132 :: (store 1 into %ir.arrayidx9); ep.c:106:17
1008B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !133; ep.c:107:5
1024B	  %35:gpr64 = MOVaddr target-flags(aarch64-page) @.str.3, target-flags(aarch64-pageoff, aarch64-nc) @.str.3, debug-location !133; ep.c:107:5
1040B	  $x0 = COPY %35:gpr64, debug-location !133; ep.c:107:5
1056B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !133; ep.c:107:5
1072B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !133; ep.c:107:5
1088B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !135; ep.c:108:5
1104B	  %37:gpr64 = MOVaddr target-flags(aarch64-page) @.str.4, target-flags(aarch64-pageoff, aarch64-nc) @.str.4, debug-location !135; ep.c:108:5
1136B	  $x1 = ADDXri %stack.30.size, 0, 0, debug-location !135; ep.c:108:5
1144B	  $x0 = COPY %37:gpr64, debug-location !135; ep.c:108:5
1152B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit-def $sp, implicit-def dead $w0, debug-location !135; ep.c:108:5
1168B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !135; ep.c:108:5
1184B	  STRWui $wzr, %stack.27.verified, 0, debug-location !136 :: (store 4 into %ir.verified); ep.c:110:14
1200B	  %39:gpr32 = MOVi32imm 16384
1264B	  %42:fpr64 = LDRDui %stack.29.dum, 1, debug-location !139 :: (dereferenceable load 8 from %ir.arrayidx14); ep.c:127:24
1272B	  STRWui %39:gpr32, %stack.18.np, 0, debug-location !137 :: (store 4 into %ir.np); ep.c:118:8
1280B	  %40:gpr64common = ADDXri %stack.29.dum, 0, 0
1288B	  %41:gpr64sp = ORRXri %40:gpr64common, 8000, debug-location !139; ep.c:127:24
1296B	  %43:gpr64sp = nuw ADDXri %40:gpr64common, 16, 0, debug-location !140; ep.c:127:33
1304B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !141; ep.c:127:5
1328B	  $x1 = ADDXri %stack.29.dum, 0, 0, debug-location !141; ep.c:127:5
1336B	  $w0 = COPY $wzr, debug-location !141; ep.c:127:5
1344B	  $d0 = COPY %42:fpr64, debug-location !141; ep.c:127:5
1360B	  $x2 = COPY %43:gpr64sp, debug-location !141; ep.c:127:5
1376B	  BL @vranlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit killed $x1, implicit $d0, implicit killed $x2, implicit-def $sp, debug-location !141; ep.c:127:5
1392B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !141; ep.c:127:5
1408B	  %44:fpr64 = LDRDui %stack.29.dum, 2, debug-location !143 :: (dereferenceable load 8 from %ir.arrayidx17, align 16); ep.c:128:30
1424B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !144; ep.c:128:14
1440B	  $x0 = COPY %41:gpr64sp, debug-location !144; ep.c:128:14
1456B	  $d0 = COPY %44:fpr64, debug-location !144; ep.c:128:14
1472B	  BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !144; ep.c:128:14
1488B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !144; ep.c:128:14
1504B	  %45:fpr64 = COPY $d0, debug-location !144; ep.c:128:14
1520B	  STRDui %45:fpr64, %stack.29.dum, 0, debug-location !146 :: (store 8 into %ir.arrayidx195, align 16); ep.c:128:12
1536B	  STRWui $wzr, %stack.19.i, 0, debug-location !147 :: (store 4 into %ir.i); ep.c:129:12
1552B	  %276:gpr64common = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x
1568B	  %277:gpr64 = MOVi64imm -3135276447761457362

1584B	bb.6.for.cond:
	; predecessors: %bb.5, %bb.7
	  successors: %bb.7(0x7c000000), %bb.8(0x04000000); %bb.7(96.88%), %bb.8(3.12%)

1600B	  %46:gpr32common = LDRWui %stack.19.i, 0, debug-location !150 :: (dereferenceable load 4 from %ir.i); ep.c:129:17
1616B	  dead $wzr = SUBSWri %46:gpr32common, 32, 12, implicit-def $nzcv, debug-location !153; ep.c:129:5
1632B	  Bcc 10, %bb.8, implicit $nzcv, debug-location !153; ep.c:129:5
1648B	  B %bb.7, debug-location !153; ep.c:129:5

1664B	bb.7.for.body:
	; predecessors: %bb.6
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

1680B	  %274:gpr64common = LDRSWui %stack.19.i, 0, debug-location !154 :: (dereferenceable load 4 from %ir.i); ep.c:130:11
1712B	  STRXroX %277:gpr64, %276:gpr64common, %274:gpr64common, 0, 1, debug-location !157 :: (store 8 into %ir.arrayidx23); ep.c:130:14
1728B	  %278:gpr32common = nsw ADDWri %274.sub_32:gpr64common, 1, 0, debug-location !158; ep.c:129:30
1744B	  STRWui %278:gpr32common, %stack.19.i, 0, debug-location !158 :: (store 4 into %ir.i); ep.c:129:30
1760B	  B %bb.6, debug-location !159; ep.c:129:5

1776B	bb.8.for.end:
	; predecessors: %bb.6
	  successors: %bb.10(0x50000000), %bb.9(0x30000000); %bb.10(62.50%), %bb.9(37.50%)

1792B	  %0:fpr64 = FMOVDi 112
1808B	  %279:fpr64 = FSQRTDr %0:fpr64, debug-location !163; ep.c:132:16
1824B	  FCMPDrr %279:fpr64, %279:fpr64, implicit-def $nzcv, debug-location !164; ep.c:132:12
1856B	  Bcc 7, %bb.10, implicit $nzcv, debug-location !164; ep.c:132:12
1872B	  B %bb.9, debug-location !164; ep.c:132:12

1888B	bb.9.call.sqrt:
	; predecessors: %bb.8
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

1904B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !164; ep.c:132:12
1920B	  $d0 = COPY %0:fpr64, debug-location !164; ep.c:132:12
1936B	  BL @sqrt, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !164; ep.c:132:12
1952B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !164; ep.c:132:12
1968B	  %279:fpr64 = COPY $d0, debug-location !164; ep.c:132:12

2016B	bb.10.for.end.split:
	; predecessors: %bb.8, %bb.9
	  successors: %bb.11(0x80000000); %bb.11(100.00%)

2048B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !164; ep.c:132:12
2064B	  $d0 = COPY %279:fpr64, debug-location !164; ep.c:132:12
2080B	  BL @log, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !164; ep.c:132:12
2096B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !164; ep.c:132:12
2112B	  %49:fpr64 = COPY $d0, debug-location !164; ep.c:132:12
2128B	  STRDui %49:fpr64, %stack.1.Mops, 0, debug-location !165 :: (store 8 into %ir.Mops); ep.c:132:10
2144B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !166; ep.c:134:5
2176B	  $w0 = COPY $wzr, debug-location !166; ep.c:134:5
2192B	  BL @timer_clear, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !166; ep.c:134:5
2208B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !166; ep.c:134:5
2224B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !167; ep.c:135:5
2256B	  $w0 = MOVi32imm 1, debug-location !167; ep.c:135:5
2272B	  BL @timer_clear, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !167; ep.c:135:5
2288B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !167; ep.c:135:5
2304B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !168; ep.c:136:5
2336B	  $w0 = MOVi32imm 2, debug-location !168; ep.c:136:5
2352B	  BL @timer_clear, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !168; ep.c:136:5
2368B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !168; ep.c:136:5
2384B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !169; ep.c:137:5
2400B	  $w0 = COPY $wzr, debug-location !169; ep.c:137:5
2416B	  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !169; ep.c:137:5
2432B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !169; ep.c:137:5
2448B	  %53:gpr64 = MOVi64imm 4742906807993761792
2464B	  STRXui %53:gpr64, %stack.2.t1, 0, debug-location !170 :: (store 8 into %ir.t1); ep.c:141:8
2480B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !171; ep.c:142:5
2512B	  %55:gpr64common = ADRP target-flags(aarch64-page) %const.0
2528B	  %56:fpr64 = LDRDui %55:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
2536B	  %54:gpr64 = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x, debug-location !171; ep.c:142:5
2576B	  $x1 = ADDXri %stack.2.t1, 0, 0, debug-location !171; ep.c:142:5
2584B	  $w0 = COPY $wzr, debug-location !171; ep.c:142:5
2592B	  $d0 = COPY %56:fpr64, debug-location !171; ep.c:142:5
2608B	  $x2 = COPY %54:gpr64, debug-location !171; ep.c:142:5
2624B	  BL @vranlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit killed $x1, implicit $d0, implicit killed $x2, implicit-def $sp, debug-location !171; ep.c:142:5
2640B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !171; ep.c:142:5
2656B	  STRXui %53:gpr64, %stack.2.t1, 0, debug-location !172 :: (store 8 into %ir.t1); ep.c:148:8
2672B	  STRWui $wzr, %stack.19.i, 0, debug-location !173 :: (store 4 into %ir.i); ep.c:150:12

2688B	bb.11.for.cond26:
	; predecessors: %bb.10, %bb.12
	  successors: %bb.12(0x7c000000), %bb.13(0x04000000); %bb.12(96.88%), %bb.13(3.12%)

2704B	  %58:gpr32common = LDRWui %stack.19.i, 0, debug-location !176 :: (dereferenceable load 4 from %ir.i); ep.c:150:17
2720B	  %4:fpr64 = LDRDui %stack.2.t1, 0, debug-location !179 :: (dereferenceable load 8 from %ir.t1); ep.c:0
2736B	  dead $wzr = SUBSWri %58:gpr32common, 16, 0, implicit-def $nzcv, debug-location !180; ep.c:150:5
2752B	  Bcc 12, %bb.13, implicit $nzcv, debug-location !180; ep.c:150:5
2768B	  B %bb.12, debug-location !180; ep.c:150:5

2784B	bb.12.for.body29:
	; predecessors: %bb.11
	  successors: %bb.11(0x80000000); %bb.11(100.00%)

2800B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !181; ep.c:151:14
2816B	  $x0 = ADDXri %stack.2.t1, 0, 0, debug-location !181; ep.c:151:14
2832B	  $d0 = COPY %4:fpr64, debug-location !181; ep.c:151:14
2848B	  BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !181; ep.c:151:14
2864B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !181; ep.c:151:14
2880B	  %271:fpr64 = COPY $d0, debug-location !181; ep.c:151:14
2912B	  %272:gpr32common = LDRWui %stack.19.i, 0, debug-location !184 :: (dereferenceable load 4 from %ir.i); ep.c:150:30
2920B	  STRDui %271:fpr64, %stack.3.t2, 0, debug-location !183 :: (store 8 into %ir.t2); ep.c:151:12
2928B	  %273:gpr32common = nsw ADDWri %272:gpr32common, 1, 0, debug-location !184; ep.c:150:30
2944B	  STRWui %273:gpr32common, %stack.19.i, 0, debug-location !184 :: (store 4 into %ir.i); ep.c:150:30
2960B	  B %bb.11, debug-location !185; ep.c:150:5

2976B	bb.13.for.end33:
	; predecessors: %bb.11
	  successors: %bb.14(0x80000000); %bb.14(100.00%)

2992B	  STRDui %4:fpr64, %stack.11.an, 0, debug-location !188 :: (store 8 into %ir.an); ep.c:154:8
3008B	  %60:gpr64 = MOVi64imm 4733340128880099328
3056B	  STRXui $xzr, %stack.13.gc, 0, debug-location !190 :: (store 8 into %ir.gc); ep.c:156:8
3072B	  STRXui $xzr, %stack.8.sx, 0, debug-location !191 :: (store 8 into %ir.sx); ep.c:157:8
3088B	  STRXui $xzr, %stack.9.sy, 0, debug-location !192 :: (store 8 into %ir.sy); ep.c:158:8
3120B	  STRWui $wzr, %stack.19.i, 0, debug-location !193 :: (store 4 into %ir.i); ep.c:160:12
3128B	  STRXui %60:gpr64, %stack.12.tt, 0, debug-location !189 :: (store 8 into %ir.tt); ep.c:155:8
3136B	  %267:gpr64common = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q

3152B	bb.14.for.cond34:
	; predecessors: %bb.13, %bb.15
	  successors: %bb.15(0x7c000000), %bb.16(0x04000000); %bb.15(96.88%), %bb.16(3.12%)

3168B	  %63:gpr32common = LDRWui %stack.19.i, 0, debug-location !196 :: (dereferenceable load 4 from %ir.i); ep.c:160:17
3184B	  dead $wzr = SUBSWri %63:gpr32common, 9, 0, implicit-def $nzcv, debug-location !199; ep.c:160:5
3200B	  Bcc 12, %bb.16, implicit $nzcv, debug-location !199; ep.c:160:5
3216B	  B %bb.15, debug-location !199; ep.c:160:5

3232B	bb.15.for.body37:
	; predecessors: %bb.14
	  successors: %bb.14(0x80000000); %bb.14(100.00%)

3248B	  %265:gpr64common = LDRSWui %stack.19.i, 0, debug-location !200 :: (dereferenceable load 4 from %ir.i); ep.c:161:11
3296B	  STRXroX $xzr, %267:gpr64common, %265:gpr64common, 0, 1, debug-location !203 :: (store 8 into %ir.arrayidx39); ep.c:161:14
3312B	  %269:gpr32common = nsw ADDWri %265.sub_32:gpr64common, 1, 0, debug-location !204; ep.c:160:26
3328B	  STRWui %269:gpr32common, %stack.19.i, 0, debug-location !204 :: (store 4 into %ir.i); ep.c:160:26
3344B	  B %bb.14, debug-location !205; ep.c:160:5

3360B	bb.16.for.end42:
	; predecessors: %bb.14
	  successors: %bb.17(0x80000000); %bb.17(100.00%)

3376B	  %65:gpr32 = MOVi32imm -1
3408B	  %66:gpr32 = MOVi32imm 1
3440B	  %185:gpr64 = MOVi64imm 4733340128880099328
3444B	  STRWui %65:gpr32, %stack.25.k_offset, 0, debug-location !208 :: (store 4 into %ir.k_offset); ep.c:170:14
3448B	  STRWui %66:gpr32, %stack.23.k, 0, debug-location !209 :: (store 4 into %ir.k); ep.c:172:12
3520B	  %239:fpr64 = FMOVDi 128

3536B	bb.17.for.cond43:
	; predecessors: %bb.16, %bb.39
	  successors: %bb.18(0x7c000000), %bb.40(0x04000000); %bb.18(96.88%), %bb.40(3.12%)

3552B	  %67:gpr32 = LDRWui %stack.23.k, 0, debug-location !212 :: (dereferenceable load 4 from %ir.k); ep.c:172:17
3568B	  %68:gpr32 = LDRWui %stack.18.np, 0, debug-location !214 :: (dereferenceable load 4 from %ir.np); ep.c:172:22
3584B	  dead $wzr = SUBSWrr %67:gpr32, %68:gpr32, implicit-def $nzcv, debug-location !216; ep.c:172:5
3600B	  Bcc 12, %bb.40, implicit $nzcv, debug-location !216; ep.c:172:5
3616B	  B %bb.18, debug-location !216; ep.c:172:5

3632B	bb.18.for.body46:
	; predecessors: %bb.17
	  successors: %bb.19(0x80000000); %bb.19(100.00%)

3648B	  %182:gpr32 = LDRWui %stack.25.k_offset, 0, debug-location !217 :: (dereferenceable load 4 from %ir.k_offset); ep.c:173:14
3664B	  %183:gpr32 = LDRWui %stack.23.k, 0, debug-location !219 :: (dereferenceable load 4 from %ir.k); ep.c:173:25
3728B	  %186:fpr64 = LDRDui %stack.11.an, 0, debug-location !223 :: (dereferenceable load 8 from %ir.an); ep.c:175:14
3732B	  STRXui %185:gpr64, %stack.2.t1, 0, debug-location !222 :: (store 8 into %ir.t1); ep.c:174:12
3736B	  %184:gpr32 = nsw ADDWrr %182:gpr32, %183:gpr32, debug-location !220; ep.c:173:23
3744B	  STRDui %186:fpr64, %stack.3.t2, 0, debug-location !224 :: (store 8 into %ir.t2); ep.c:175:12
3752B	  STRWui %184:gpr32, %stack.21.kk, 0, debug-location !221 :: (store 4 into %ir.kk); ep.c:173:12
3760B	  STRWui %66:gpr32, %stack.19.i, 0, debug-location !225 :: (store 4 into %ir.i); ep.c:179:16

3776B	bb.19.for.cond48:
	; predecessors: %bb.18, %bb.23
	  successors: %bb.20(0x7c000000), %bb.24(0x04000000); %bb.20(96.88%), %bb.24(3.12%)

3792B	  %188:gpr32common = LDRWui %stack.19.i, 0, debug-location !228 :: (dereferenceable load 4 from %ir.i); ep.c:179:21
3808B	  dead $wzr = SUBSWri %188:gpr32common, 100, 0, implicit-def $nzcv, debug-location !231; ep.c:179:9
3824B	  Bcc 12, %bb.24, implicit $nzcv, debug-location !231; ep.c:179:9
3840B	  B %bb.20, debug-location !231; ep.c:179:9

3856B	bb.20.for.body51:
	; predecessors: %bb.19
	  successors: %bb.21(0x40000000), %bb.22(0x40000000); %bb.21(50.00%), %bb.22(50.00%)

3872B	  %190:gpr32common = LDRWui %stack.21.kk, 0, debug-location !232 :: (dereferenceable load 4 from %ir.kk); ep.c:180:18
3888B	  dead $wzr = SUBSWri %190:gpr32common, 0, 0, implicit-def $nzcv, debug-location !234; ep.c:180:21
3904B	  %192:gpr32 = CSINCWr %190:gpr32common, %190:gpr32common, 10, implicit $nzcv, debug-location !234; ep.c:180:21
3920B	  %193:gpr32 = SBFMWri %192:gpr32, 1, 31, debug-location !234; ep.c:180:21
3952B	  %194:gpr32common = ANDWri %192:gpr32, 2014, debug-location !238; ep.c:181:20
3968B	  dead $wzr = SUBSWrr %194:gpr32common, %190:gpr32common, implicit-def $nzcv, debug-location !241; ep.c:181:17
3976B	  STRWui %193:gpr32, %stack.20.ik, 0, debug-location !235 :: (store 4 into %ir.ik); ep.c:180:16
3984B	  Bcc 0, %bb.22, implicit $nzcv, debug-location !241; ep.c:181:17
4000B	  B %bb.21, debug-location !241; ep.c:181:17

4016B	bb.21.if.then54:
	; predecessors: %bb.20
	  successors: %bb.22(0x80000000); %bb.22(100.00%)

4032B	  %196:fpr64 = LDRDui %stack.3.t2, 0, debug-location !242 :: (dereferenceable load 8 from %ir.t2); ep.c:182:34
4048B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !243; ep.c:182:22
4064B	  $x0 = ADDXri %stack.2.t1, 0, 0, debug-location !243; ep.c:182:22
4080B	  $d0 = COPY %196:fpr64, debug-location !243; ep.c:182:22
4096B	  BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !243; ep.c:182:22
4112B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !243; ep.c:182:22
4128B	  %198:fpr64 = COPY $d0, debug-location !243; ep.c:182:22
4144B	  STRDui %198:fpr64, %stack.4.t3, 0, debug-location !244 :: (store 8 into %ir.t3); ep.c:182:20

4160B	bb.22.if.end56:
	; predecessors: %bb.20, %bb.21
	  successors: %bb.24(0x04000000), %bb.23(0x7c000000); %bb.24(3.12%), %bb.23(96.88%)

4176B	  %199:gpr32 = LDRWui %stack.20.ik, 0, debug-location !246 :: (dereferenceable load 4 from %ir.ik); ep.c:183:17
4192B	  CBZW %199:gpr32, %bb.24, debug-location !249; ep.c:183:17
4208B	  B %bb.23, debug-location !249; ep.c:183:17

4224B	bb.23.if.end60:
	; predecessors: %bb.22
	  successors: %bb.19(0x80000000); %bb.19(100.00%)

4240B	  %200:fpr64 = LDRDui %stack.3.t2, 0, debug-location !250 :: (dereferenceable load 8 from %ir.t2); ep.c:185:30
4256B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !251; ep.c:185:18
4272B	  $x0 = ADDXri %stack.3.t2, 0, 0, debug-location !251; ep.c:185:18
4288B	  $d0 = COPY %200:fpr64, debug-location !251; ep.c:185:18
4304B	  BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !251; ep.c:185:18
4320B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !251; ep.c:185:18
4336B	  %202:fpr64 = COPY $d0, debug-location !251; ep.c:185:18
4368B	  %203:gpr32 = LDRWui %stack.20.ik, 0, debug-location !253 :: (dereferenceable load 4 from %ir.ik); ep.c:186:18
4400B	  %204:gpr32common = LDRWui %stack.19.i, 0, debug-location !255 :: (dereferenceable load 4 from %ir.i); ep.c:179:32
4404B	  STRDui %202:fpr64, %stack.4.t3, 0, debug-location !252 :: (store 8 into %ir.t3); ep.c:185:16
4408B	  STRWui %203:gpr32, %stack.21.kk, 0, debug-location !254 :: (store 4 into %ir.kk); ep.c:186:16
4416B	  %205:gpr32common = nsw ADDWri %204:gpr32common, 1, 0, debug-location !255; ep.c:179:32
4432B	  STRWui %205:gpr32common, %stack.19.i, 0, debug-location !255 :: (store 4 into %ir.i); ep.c:179:32
4448B	  B %bb.19, debug-location !256; ep.c:179:9

4464B	bb.24.for.end64:
	; predecessors: %bb.19, %bb.22
	  successors: %bb.25(0x50000000), %bb.26(0x30000000); %bb.25(62.50%), %bb.26(37.50%)

4480B	  %206:gpr32 = LDRWui %stack.28.timers_enabled, 0, debug-location !259 :: (dereferenceable load 4 from %ir.timers_enabled); ep.c:192:13
4496B	  CBZW %206:gpr32, %bb.26, debug-location !261; ep.c:192:13
4512B	  B %bb.25, debug-location !261; ep.c:192:13

4528B	bb.25.if.then65:
	; predecessors: %bb.24
	  successors: %bb.26(0x80000000); %bb.26(100.00%)

4544B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !262; ep.c:193:13
4560B	  $w0 = MOVi32imm 2, debug-location !262; ep.c:193:13
4576B	  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !262; ep.c:193:13
4592B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !262; ep.c:193:13

4608B	bb.26.if.end66:
	; predecessors: %bb.24, %bb.25
	  successors: %bb.27(0x50000000), %bb.28(0x30000000); %bb.27(62.50%), %bb.28(37.50%)

4624B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !263; ep.c:194:9
4656B	  $x1 = ADDXri %stack.2.t1, 0, 0, debug-location !263; ep.c:194:9
4664B	  $w0 = MOVi32imm 131072, debug-location !263; ep.c:194:9
4672B	  $d0 = COPY %56:fpr64, debug-location !263; ep.c:194:9
4688B	  $x2 = COPY %54:gpr64, debug-location !263; ep.c:194:9
4704B	  BL @vranlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit killed $x1, implicit $d0, implicit killed $x2, implicit-def $sp, debug-location !263; ep.c:194:9
4720B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !263; ep.c:194:9
4736B	  %213:gpr32 = LDRWui %stack.28.timers_enabled, 0, debug-location !264 :: (dereferenceable load 4 from %ir.timers_enabled); ep.c:195:13
4752B	  CBZW %213:gpr32, %bb.28, debug-location !266; ep.c:195:13
4768B	  B %bb.27, debug-location !266; ep.c:195:13

4784B	bb.27.if.then68:
	; predecessors: %bb.26
	  successors: %bb.28(0x80000000); %bb.28(100.00%)

4800B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !267; ep.c:196:13
4816B	  $w0 = MOVi32imm 2, debug-location !267; ep.c:196:13
4832B	  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !267; ep.c:196:13
4848B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !267; ep.c:196:13

4864B	bb.28.if.end69:
	; predecessors: %bb.26, %bb.27
	  successors: %bb.29(0x50000000), %bb.30(0x30000000); %bb.29(62.50%), %bb.30(37.50%)

4880B	  %215:gpr32 = LDRWui %stack.28.timers_enabled, 0, debug-location !268 :: (dereferenceable load 4 from %ir.timers_enabled); ep.c:203:13
4896B	  CBZW %215:gpr32, %bb.30, debug-location !270; ep.c:203:13
4912B	  B %bb.29, debug-location !270; ep.c:203:13

4928B	bb.29.if.then71:
	; predecessors: %bb.28
	  successors: %bb.30(0x80000000); %bb.30(100.00%)

4944B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !271; ep.c:204:13
4960B	  $w0 = MOVi32imm 1, debug-location !271; ep.c:204:13
4976B	  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !271; ep.c:204:13
4992B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !271; ep.c:204:13

5008B	bb.30.if.end72:
	; predecessors: %bb.28, %bb.29
	  successors: %bb.31(0x80000000); %bb.31(100.00%)

5040B	  STRWui $wzr, %stack.19.i, 0, debug-location !272 :: (store 4 into %ir.i); ep.c:206:16

5056B	bb.31.for.cond73:
	; predecessors: %bb.30, %bb.36
	  successors: %bb.32(0x7c000000), %bb.37(0x04000000); %bb.32(96.88%), %bb.37(3.12%)

5072B	  %218:gpr32common = LDRWui %stack.19.i, 0, debug-location !275 :: (dereferenceable load 4 from %ir.i); ep.c:206:21
5088B	  dead $wzr = SUBSWri %218:gpr32common, 16, 12, implicit-def $nzcv, debug-location !278; ep.c:206:9
5104B	  Bcc 10, %bb.37, implicit $nzcv, debug-location !278; ep.c:206:9
5120B	  B %bb.32, debug-location !278; ep.c:206:9

5136B	bb.32.for.body76:
	; predecessors: %bb.31
	  successors: %bb.33(0x40000000), %bb.36(0x40000000); %bb.33(50.00%), %bb.36(50.00%)

5152B	  %225:gpr64 = LDRSWui %stack.19.i, 0, debug-location !279 :: (dereferenceable load 4 from %ir.i); ep.c:207:30
5168B	  %226:gpr64common = ADDXrs %54:gpr64, %225:gpr64, 4, debug-location !282; ep.c:207:24
5184B	  %227:fpr64 = LDRDui %226:gpr64common, 0, debug-location !282 :: (load 8 from %ir.arrayidx79); ep.c:207:24
5248B	  %231:fpr64 = LDRDui %226:gpr64common, 1, debug-location !289 :: (load 8 from %ir.arrayidx84); ep.c:208:24
5256B	  %228:fpr64 = FADDDrr %227:fpr64, %227:fpr64, debug-location !283; ep.c:207:22
5264B	  %232:fpr64 = FADDDrr %231:fpr64, %231:fpr64, debug-location !290; ep.c:208:22
5272B	  %230:fpr64 = FSUBDrr %228:fpr64, %0:fpr64, debug-location !284; ep.c:207:33
5280B	  %233:fpr64 = FSUBDrr %232:fpr64, %0:fpr64, debug-location !291; ep.c:208:37
5288B	  STRDui %230:fpr64, %stack.6.x1, 0, debug-location !285 :: (store 8 into %ir.x1); ep.c:207:16
5296B	  STRDui %233:fpr64, %stack.7.x2, 0, debug-location !292 :: (store 8 into %ir.x2); ep.c:208:16
5312B	  %234:fpr64 = FMULDrr %230:fpr64, %230:fpr64, debug-location !295; ep.c:209:21
5328B	  %235:fpr64 = FMULDrr %233:fpr64, %233:fpr64, debug-location !298; ep.c:209:31
5344B	  %236:fpr64 = FADDDrr %234:fpr64, %235:fpr64, debug-location !299; ep.c:209:26
5376B	  FCMPDrr %236:fpr64, %0:fpr64, implicit-def $nzcv, debug-location !304; ep.c:210:17
5384B	  STRDui %236:fpr64, %stack.2.t1, 0, debug-location !300 :: (store 8 into %ir.t1); ep.c:209:16
5392B	  Bcc 8, %bb.36, implicit $nzcv, debug-location !304; ep.c:210:17
5408B	  B %bb.33, debug-location !304; ep.c:210:17

5424B	bb.33.if.then92:
	; predecessors: %bb.32
	  successors: %bb.35(0x50000000), %bb.34(0x30000000); %bb.35(62.50%), %bb.34(37.50%)

5440B	  %237:fpr64 = LDRDui %stack.2.t1, 0, debug-location !305 :: (dereferenceable load 8 from %ir.t1); ep.c:211:38
5456B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !307; ep.c:211:34
5472B	  $d0 = COPY %237:fpr64, debug-location !307; ep.c:211:34
5488B	  BL @log, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !307; ep.c:211:34
5504B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !307; ep.c:211:34
5552B	  %241:fpr64 = LDRDui %stack.2.t1, 0, debug-location !309 :: (dereferenceable load 8 from %ir.t1); ep.c:211:44
5556B	  %238:fpr64 = COPY $d0, debug-location !307; ep.c:211:34
5560B	  %240:fpr64 = FMULDrr %238:fpr64, %239:fpr64, debug-location !308; ep.c:211:32
5568B	  %5:fpr64 = FDIVDrr %240:fpr64, %241:fpr64, debug-location !310; ep.c:211:42
5584B	  %280:fpr64 = FSQRTDr %5:fpr64, debug-location !311; ep.c:211:22
5600B	  FCMPDrr %280:fpr64, %280:fpr64, implicit-def $nzcv, debug-location !312; ep.c:211:20
5632B	  Bcc 7, %bb.35, implicit $nzcv, debug-location !312; ep.c:211:20
5648B	  B %bb.34, debug-location !312; ep.c:211:20

5664B	bb.34.call.sqrt1:
	; predecessors: %bb.33
	  successors: %bb.35(0x80000000); %bb.35(100.00%)

5680B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !312; ep.c:211:20
5696B	  $d0 = COPY %5:fpr64, debug-location !312; ep.c:211:20
5712B	  BL @sqrt, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !312; ep.c:211:20
5728B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !312; ep.c:211:20
5744B	  %280:fpr64 = COPY $d0, debug-location !312; ep.c:211:20

5792B	bb.35.if.then92.split:
	; predecessors: %bb.33, %bb.34
	  successors: %bb.36(0x80000000); %bb.36(100.00%)

5840B	  %243:fpr64 = LDRDui %stack.6.x1, 0, debug-location !313 :: (dereferenceable load 8 from %ir.x1); ep.c:212:23
5888B	  %245:fpr64 = LDRDui %stack.7.x2, 0, debug-location !317 :: (dereferenceable load 8 from %ir.x2); ep.c:213:23
5896B	  %244:fpr64 = FMULDrr %243:fpr64, %280:fpr64, debug-location !315; ep.c:212:26
5904B	  %246:fpr64 = FMULDrr %245:fpr64, %280:fpr64, debug-location !319; ep.c:213:26
5936B	  %247:fpr64 = FABSDr %244:fpr64, debug-location !321; ep.c:214:21
5952B	  %248:fpr64 = FABSDr %246:fpr64, debug-location !321; ep.c:214:21
5968B	  FCMPDrr %247:fpr64, %248:fpr64, implicit-def $nzcv, debug-location !321; ep.c:214:21
6128B	  %259:fpr64 = LDRDui %stack.8.sx, 0, debug-location !329 :: (dereferenceable load 8 from %ir.sx); ep.c:216:22
6136B	  STRDui %280:fpr64, %stack.3.t2, 0, debug-location !312 :: (store 8 into %ir.t2); ep.c:211:20
6176B	  %261:fpr64 = LDRDui %stack.9.sy, 0, debug-location !333 :: (dereferenceable load 8 from %ir.sy); ep.c:217:22
6184B	  STRDui %244:fpr64, %stack.4.t3, 0, debug-location !316 :: (store 8 into %ir.t3); ep.c:212:20
6192B	  %260:fpr64 = FADDDrr %259:fpr64, %244:fpr64, debug-location !331; ep.c:216:25
6200B	  %249:fpr64 = FCSELDrrr %244:fpr64, %246:fpr64, 12, implicit $nzcv, debug-location !321; ep.c:214:21
6208B	  %250:fpr64 = FABSDr %249:fpr64, debug-location !321; ep.c:214:21
6216B	  undef %252.sub_32:gpr64 = FCVTZSUWDr %250:fpr64, debug-location !321; ep.c:214:21
6224B	  STRWui %252.sub_32:gpr64, %stack.22.l, 0, debug-location !322 :: (store 4 into %ir.l); ep.c:214:19
6232B	  %254:gpr64 = SBFMXri %252:gpr64, 61, 31, debug-location !324; ep.c:215:24
6240B	  %256:fpr64 = LDRDroX %267:gpr64common, %254:gpr64, 0, 0, debug-location !324 :: (load 8 from %ir.arrayidx103); ep.c:215:24
6248B	  STRDui %246:fpr64, %stack.5.t4, 0, debug-location !320 :: (store 8 into %ir.t4); ep.c:213:20
6256B	  %262:fpr64 = FADDDrr %261:fpr64, %246:fpr64, debug-location !335; ep.c:217:25
6264B	  STRDui %260:fpr64, %stack.8.sx, 0, debug-location !332 :: (store 8 into %ir.sx); ep.c:216:20
6272B	  %258:fpr64 = FADDDrr %256:fpr64, %0:fpr64, debug-location !325; ep.c:215:29
6280B	  STRDroX %258:fpr64, %267:gpr64common, %254:gpr64, 0, 0, debug-location !328 :: (store 8 into %ir.arrayidx106); ep.c:215:22
6288B	  STRDui %262:fpr64, %stack.9.sy, 0, debug-location !336 :: (store 8 into %ir.sy); ep.c:217:20

6296B	bb.36.for.inc110:
	; predecessors: %bb.32, %bb.35
	  successors: %bb.31(0x80000000); %bb.31(100.00%)

6304B	  %263:gpr32common = LDRWui %stack.19.i, 0, debug-location !338 :: (dereferenceable load 4 from %ir.i); ep.c:206:30
6312B	  %264:gpr32common = nsw ADDWri %263:gpr32common, 1, 0, debug-location !338; ep.c:206:30
6320B	  STRWui %264:gpr32common, %stack.19.i, 0, debug-location !338 :: (store 4 into %ir.i); ep.c:206:30
6328B	  B %bb.31, debug-location !339; ep.c:206:9

6336B	bb.37.for.end112:
	; predecessors: %bb.31
	  successors: %bb.38(0x50000000), %bb.39(0x30000000); %bb.38(62.50%), %bb.39(37.50%)

6344B	  %220:gpr32 = LDRWui %stack.28.timers_enabled, 0, debug-location !342 :: (dereferenceable load 4 from %ir.timers_enabled); ep.c:221:13
6352B	  CBZW %220:gpr32, %bb.39, debug-location !344; ep.c:221:13
6360B	  B %bb.38, debug-location !344; ep.c:221:13

6368B	bb.38.if.then114:
	; predecessors: %bb.37
	  successors: %bb.39(0x80000000); %bb.39(100.00%)

6384B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !345; ep.c:222:13
6400B	  $w0 = MOVi32imm 1, debug-location !345; ep.c:222:13
6416B	  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !345; ep.c:222:13
6432B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !345; ep.c:222:13

6448B	bb.39.for.inc116:
	; predecessors: %bb.37, %bb.38
	  successors: %bb.17(0x80000000); %bb.17(100.00%)

6464B	  %222:gpr32common = LDRWui %stack.23.k, 0, debug-location !346 :: (dereferenceable load 4 from %ir.k); ep.c:172:27
6480B	  %223:gpr32common = nsw ADDWri %222:gpr32common, 1, 0, debug-location !346; ep.c:172:27
6496B	  STRWui %223:gpr32common, %stack.23.k, 0, debug-location !346 :: (store 4 into %ir.k); ep.c:172:27
6512B	  B %bb.17, debug-location !347; ep.c:172:5

6528B	bb.40.for.end118:
	; predecessors: %bb.17
	  successors: %bb.41(0x80000000); %bb.41(100.00%)

6560B	  STRWui $wzr, %stack.19.i, 0, debug-location !350 :: (store 4 into %ir.i); ep.c:225:12

6576B	bb.41.for.cond119:
	; predecessors: %bb.40, %bb.42
	  successors: %bb.42(0x7c000000), %bb.43(0x04000000); %bb.42(96.88%), %bb.43(3.12%)

6592B	  %71:gpr32common = LDRWui %stack.19.i, 0, debug-location !353 :: (dereferenceable load 4 from %ir.i); ep.c:225:17
6608B	  dead $wzr = SUBSWri %71:gpr32common, 9, 0, implicit-def $nzcv, debug-location !356; ep.c:225:5
6624B	  Bcc 12, %bb.43, implicit $nzcv, debug-location !356; ep.c:225:5
6640B	  B %bb.42, debug-location !356; ep.c:225:5

6656B	bb.42.for.body122:
	; predecessors: %bb.41
	  successors: %bb.41(0x80000000); %bb.41(100.00%)

6688B	  %176:gpr64common = LDRSWui %stack.19.i, 0, debug-location !359 :: (dereferenceable load 4 from %ir.i); ep.c:226:21
6696B	  %175:fpr64 = LDRDui %stack.13.gc, 0, debug-location !357 :: (dereferenceable load 8 from %ir.gc); ep.c:226:14
6720B	  %179:fpr64 = LDRDroX %267:gpr64common, %176:gpr64common, 0, 1, debug-location !360 :: (load 8 from %ir.arrayidx124); ep.c:226:19
6768B	  %181:gpr32common = nsw ADDWri %176.sub_32:gpr64common, 1, 0, debug-location !363; ep.c:225:26
6772B	  %180:fpr64 = FADDDrr %175:fpr64, %179:fpr64, debug-location !361; ep.c:226:17
6776B	  STRDui %180:fpr64, %stack.13.gc, 0, debug-location !362 :: (store 8 into %ir.gc); ep.c:226:12
6784B	  STRWui %181:gpr32common, %stack.19.i, 0, debug-location !363 :: (store 4 into %ir.i); ep.c:225:26
6800B	  B %bb.41, debug-location !364; ep.c:225:5

6816B	bb.43.do.end130:
	; predecessors: %bb.41
	  successors: %bb.44(0x50000000), %bb.45(0x30000000); %bb.44(62.50%), %bb.45(37.50%)

6832B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !367; ep.c:231:5
6864B	  $w0 = COPY $wzr, debug-location !367; ep.c:231:5
6880B	  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !367; ep.c:231:5
6896B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !367; ep.c:231:5
6912B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !368; ep.c:232:10
6928B	  $w0 = COPY $wzr, debug-location !368; ep.c:232:10
6944B	  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !368; ep.c:232:10
6960B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !368; ep.c:232:10
6976B	  %74:fpr64 = COPY $d0, debug-location !368; ep.c:232:10
6992B	  STRDui %74:fpr64, %stack.10.tm, 0, debug-location !369 :: (store 8 into %ir.tm); ep.c:232:8
7008B	  STRWui $wzr, %stack.24.nit, 0, debug-location !370 :: (store 4 into %ir.nit); ep.c:234:9
7024B	  %75:gpr32 = MOVi32imm 1
7056B	  %76:gpr64 = MOVi64imm 4675776847449726827
7088B	  %77:gpr64 = MOVi64imm -4550329231111044107
7092B	  STRWui %75:gpr32, %stack.27.verified, 0, debug-location !371 :: (store 4 into %ir.verified); ep.c:235:14
7096B	  STRXui %76:gpr64, %stack.14.sx_verify_value, 0, debug-location !372 :: (store 8 into %ir.sx_verify_value); ep.c:249:25
7104B	  STRXui %77:gpr64, %stack.15.sy_verify_value, 0, debug-location !378 :: (store 8 into %ir.sy_verify_value); ep.c:250:25
7120B	  CBZW %75:gpr32, %bb.45, debug-location !381; ep.c:268:9
7136B	  B %bb.44, debug-location !381; ep.c:268:9

7152B	bb.44.if.then133:
	; predecessors: %bb.43
	  successors: %bb.45(0x80000000); %bb.45(100.00%)

7168B	  %78:fpr64 = LDRDui %stack.8.sx, 0, debug-location !382 :: (dereferenceable load 8 from %ir.sx); ep.c:269:24
7184B	  %79:fpr64 = LDRDui %stack.14.sx_verify_value, 0, debug-location !384 :: (dereferenceable load 8 from %ir.sx_verify_value); ep.c:269:29
7264B	  %83:fpr64 = LDRDui %stack.9.sy, 0, debug-location !390 :: (dereferenceable load 8 from %ir.sy); ep.c:270:24
7280B	  %84:fpr64 = LDRDui %stack.15.sy_verify_value, 0, debug-location !391 :: (dereferenceable load 8 from %ir.sy_verify_value); ep.c:270:29
7284B	  %80:fpr64 = FSUBDrr %78:fpr64, %79:fpr64, debug-location !385; ep.c:269:27
7288B	  %81:fpr64 = FDIVDrr %80:fpr64, %79:fpr64, debug-location !387; ep.c:269:46
7360B	  %88:gpr64common = ADRP target-flags(aarch64-page) %const.1
7364B	  %85:fpr64 = FSUBDrr %83:fpr64, %84:fpr64, debug-location !392; ep.c:270:27
7368B	  %86:fpr64 = FDIVDrr %85:fpr64, %84:fpr64, debug-location !394; ep.c:270:46
7376B	  %89:fpr64 = LDRDui %88:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
7380B	  %82:fpr64 = FABSDr %81:fpr64, debug-location !388; ep.c:269:18
7384B	  %87:fpr64 = FABSDr %86:fpr64, debug-location !395; ep.c:270:18
7392B	  STRDui %82:fpr64, %stack.16.sx_err, 0, debug-location !389 :: (store 8 into %ir.sx_err); ep.c:269:16
7400B	  STRDui %87:fpr64, %stack.17.sy_err, 0, debug-location !396 :: (store 8 into %ir.sy_err); ep.c:270:16
7408B	  FCMPDrr %82:fpr64, %89:fpr64, implicit-def $nzcv, debug-location !398; ep.c:271:29
7416B	  %90:gpr32 = CSINCWr $wzr, $wzr, 8, implicit $nzcv, debug-location !398; ep.c:271:29
7424B	  FCMPDrr %87:fpr64, %89:fpr64, implicit-def $nzcv, debug-location !399; ep.c:271:41
7440B	  %91:gpr32 = CSINCWr $wzr, $wzr, 8, implicit $nzcv, debug-location !399; ep.c:271:41
7456B	  %92:gpr32 = ANDWrr %90:gpr32, %91:gpr32, debug-location !399; ep.c:271:41
7472B	  STRWui %92:gpr32, %stack.27.verified, 0, debug-location !400 :: (store 4 into %ir.verified); ep.c:271:18

7488B	bb.45.if.end142:
	; predecessors: %bb.43, %bb.44
	  successors: %bb.46(0x80000000); %bb.46(100.00%)

7504B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !402; ep.c:274:12
7520B	  %93:fpr64 = FMOVDi 0
7536B	  %94:fpr64 = FMOVDi 63
7552B	  $d0 = COPY %93:fpr64, debug-location !402; ep.c:274:12
7568B	  $d1 = COPY %94:fpr64, debug-location !402; ep.c:274:12
7584B	  BL @pow, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def $d0, debug-location !402; ep.c:274:12
7600B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !402; ep.c:274:12
7616B	  %95:fpr64 = COPY $d0, debug-location !402; ep.c:274:12
7632B	  %96:fpr64 = LDRDui %stack.10.tm, 0, debug-location !403 :: (dereferenceable load 8 from %ir.tm); ep.c:274:30
7664B	  %98:gpr64 = MOVi64imm 4696837146684686336
7672B	  %97:fpr64 = FDIVDrr %95:fpr64, %96:fpr64, debug-location !404; ep.c:274:28
7680B	  %99:fpr64 = COPY %98:gpr64
7696B	  %100:fpr64 = FDIVDrr %97:fpr64, %99:fpr64, debug-location !405; ep.c:274:33
7712B	  STRDui %100:fpr64, %stack.1.Mops, 0, debug-location !406 :: (store 8 into %ir.Mops); ep.c:274:10
7728B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !407; ep.c:276:5
7744B	  %101:gpr64 = MOVaddr target-flags(aarch64-page) @.str.5, target-flags(aarch64-pageoff, aarch64-nc) @.str.5, debug-location !407; ep.c:276:5
7760B	  $x0 = COPY %101:gpr64, debug-location !407; ep.c:276:5
7776B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !407; ep.c:276:5
7792B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !407; ep.c:276:5
7808B	  %103:fpr64 = LDRDui %stack.10.tm, 0, debug-location !408 :: (dereferenceable load 8 from %ir.tm); ep.c:277:35
7824B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !409; ep.c:277:5
7840B	  %104:gpr64 = MOVaddr target-flags(aarch64-page) @.str.6, target-flags(aarch64-pageoff, aarch64-nc) @.str.6, debug-location !409; ep.c:277:5
7856B	  $x0 = COPY %104:gpr64, debug-location !409; ep.c:277:5
7872B	  $d0 = COPY %103:fpr64, debug-location !409; ep.c:277:5
7888B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !409; ep.c:277:5
7904B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !409; ep.c:277:5
7920B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !410; ep.c:278:5
7936B	  %106:gpr64 = MOVaddr target-flags(aarch64-page) @.str.7, target-flags(aarch64-pageoff, aarch64-nc) @.str.7, debug-location !410; ep.c:278:5
7984B	  $w1 = MOVi32imm 30, debug-location !410; ep.c:278:5
7992B	  $x0 = COPY %106:gpr64, debug-location !410; ep.c:278:5
8000B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $w1, implicit-def $sp, implicit-def dead $w0, debug-location !410; ep.c:278:5
8016B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !410; ep.c:278:5
8032B	  %109:fpr64 = LDRDui %stack.13.gc, 0, debug-location !411 :: (dereferenceable load 8 from %ir.gc); ep.c:279:46
8048B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !412; ep.c:279:5
8064B	  %110:gpr64 = MOVaddr target-flags(aarch64-page) @.str.8, target-flags(aarch64-pageoff, aarch64-nc) @.str.8, debug-location !412; ep.c:279:5
8080B	  $x0 = COPY %110:gpr64, debug-location !412; ep.c:279:5
8096B	  $d0 = COPY %109:fpr64, debug-location !412; ep.c:279:5
8112B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !412; ep.c:279:5
8128B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !412; ep.c:279:5
8144B	  %112:fpr64 = LDRDui %stack.8.sx, 0, debug-location !413 :: (dereferenceable load 8 from %ir.sx); ep.c:280:42
8160B	  %113:fpr64 = LDRDui %stack.9.sy, 0, debug-location !414 :: (dereferenceable load 8 from %ir.sy); ep.c:280:46
8176B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !415; ep.c:280:5
8192B	  %114:gpr64 = MOVaddr target-flags(aarch64-page) @.str.9, target-flags(aarch64-pageoff, aarch64-nc) @.str.9, debug-location !415; ep.c:280:5
8208B	  $x0 = COPY %114:gpr64, debug-location !415; ep.c:280:5
8224B	  $d0 = COPY %112:fpr64, debug-location !415; ep.c:280:5
8240B	  $d1 = COPY %113:fpr64, debug-location !415; ep.c:280:5
8256B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0, debug-location !415; ep.c:280:5
8272B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !415; ep.c:280:5
8288B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !416; ep.c:281:5
8304B	  %116:gpr64 = MOVaddr target-flags(aarch64-page) @.str.10, target-flags(aarch64-pageoff, aarch64-nc) @.str.10, debug-location !416; ep.c:281:5
8320B	  $x0 = COPY %116:gpr64, debug-location !416; ep.c:281:5
8336B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !416; ep.c:281:5
8352B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !416; ep.c:281:5
8384B	  STRWui $wzr, %stack.19.i, 0, debug-location !417 :: (store 4 into %ir.i); ep.c:282:12
8400B	  %171:gpr64 = MOVaddr target-flags(aarch64-page) @.str.11, target-flags(aarch64-pageoff, aarch64-nc) @.str.11

8416B	bb.46.for.cond152:
	; predecessors: %bb.45, %bb.47
	  successors: %bb.47(0x7c000000), %bb.48(0x04000000); %bb.47(96.88%), %bb.48(3.12%)

8432B	  %119:gpr32common = LDRWui %stack.19.i, 0, debug-location !420 :: (dereferenceable load 4 from %ir.i); ep.c:282:17
8448B	  dead $wzr = SUBSWri %119:gpr32common, 9, 0, implicit-def $nzcv, debug-location !423; ep.c:282:5
8464B	  Bcc 12, %bb.48, implicit $nzcv, debug-location !423; ep.c:282:5
8480B	  B %bb.47, debug-location !423; ep.c:282:5

8496B	bb.47.for.body155:
	; predecessors: %bb.46
	  successors: %bb.46(0x80000000); %bb.46(100.00%)

8512B	  %167:gpr64 = LDRSWui %stack.19.i, 0, debug-location !424 :: (dereferenceable load 4 from %ir.i); ep.c:283:32
8544B	  %170:fpr64 = LDRDroX %267:gpr64common, %167:gpr64, 0, 1, debug-location !427 :: (load 8 from %ir.arrayidx157); ep.c:283:35
8560B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !428; ep.c:283:9
8576B	  $x0 = COPY %171:gpr64, debug-location !428; ep.c:283:9
8592B	  $w1 = COPY %167.sub_32:gpr64, debug-location !428; ep.c:283:9
8608B	  $d0 = COPY %170:fpr64, debug-location !428; ep.c:283:9
8624B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $w1, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !428; ep.c:283:9
8640B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !428; ep.c:283:9
8656B	  %173:gpr32common = LDRWui %stack.19.i, 0, debug-location !429 :: (dereferenceable load 4 from %ir.i); ep.c:282:26
8672B	  %174:gpr32common = nsw ADDWri %173:gpr32common, 1, 0, debug-location !429; ep.c:282:26
8688B	  STRWui %174:gpr32common, %stack.19.i, 0, debug-location !429 :: (store 4 into %ir.i); ep.c:282:26
8704B	  B %bb.46, debug-location !430; ep.c:282:5

8720B	bb.48.for.end161:
	; predecessors: %bb.46
	  successors: %bb.49(0x50000000), %bb.52(0x30000000); %bb.49(62.50%), %bb.52(37.50%)

8736B	  %121:gpr32 = LDRWui %stack.24.nit, 0, debug-location !433 :: (dereferenceable load 4 from %ir.nit); ep.c:286:45
8752B	  %122:fpr64 = LDRDui %stack.10.tm, 0, debug-location !434 :: (dereferenceable load 8 from %ir.tm); ep.c:286:50
8768B	  %123:fpr64 = LDRDui %stack.1.Mops, 0, debug-location !435 :: (dereferenceable load 8 from %ir.Mops); ep.c:286:54
8784B	  %124:gpr32 = LDRWui %stack.27.verified, 0, debug-location !436 :: (dereferenceable load 4 from %ir.verified); ep.c:287:47
8800B	  ADJCALLSTACKDOWN 72, 0, implicit-def dead $sp, implicit $sp, debug-location !437; ep.c:286:5
8816B	  %125:gpr64 = MOVaddr target-flags(aarch64-page) @.str.22, target-flags(aarch64-pageoff, aarch64-nc) @.str.22, debug-location !437; ep.c:286:5
8864B	  %127:gpr64 = MOVaddr target-flags(aarch64-page) @.str.21, target-flags(aarch64-pageoff, aarch64-nc) @.str.21, debug-location !437; ep.c:286:5
8896B	  %128:gpr64 = MOVaddr target-flags(aarch64-page) @.str.20, target-flags(aarch64-pageoff, aarch64-nc) @.str.20, debug-location !437; ep.c:286:5
8928B	  %129:gpr64 = MOVaddr target-flags(aarch64-page) @.str.19, target-flags(aarch64-pageoff, aarch64-nc) @.str.19, debug-location !437; ep.c:286:5
8960B	  %130:gpr64 = MOVaddr target-flags(aarch64-page) @.str.18, target-flags(aarch64-pageoff, aarch64-nc) @.str.18, debug-location !437; ep.c:286:5
8992B	  %131:gpr64 = MOVaddr target-flags(aarch64-page) @.str.17, target-flags(aarch64-pageoff, aarch64-nc) @.str.17, debug-location !437; ep.c:286:5
9024B	  %132:gpr64 = MOVaddr target-flags(aarch64-page) @.str.16, target-flags(aarch64-pageoff, aarch64-nc) @.str.16, debug-location !437; ep.c:286:5
9056B	  %133:gpr64 = MOVaddr target-flags(aarch64-page) @.str.15, target-flags(aarch64-pageoff, aarch64-nc) @.str.15, debug-location !437; ep.c:286:5
9064B	  STRXui %125:gpr64, $sp, 8, debug-location !437 :: (store 8 into stack + 64); ep.c:286:5
9088B	  %134:gpr64 = MOVaddr target-flags(aarch64-page) @.str.14, target-flags(aarch64-pageoff, aarch64-nc) @.str.14, debug-location !437; ep.c:286:5
9092B	  STRXui %128:gpr64, $sp, 6, debug-location !437 :: (store 8 into stack + 48); ep.c:286:5
9096B	  STRXui %127:gpr64, $sp, 7, debug-location !437 :: (store 8 into stack + 56); ep.c:286:5
9120B	  %135:gpr64 = MOVaddr target-flags(aarch64-page) @.str.12, target-flags(aarch64-pageoff, aarch64-nc) @.str.12, debug-location !437; ep.c:286:5
9124B	  STRXui %130:gpr64, $sp, 4, debug-location !437 :: (store 8 into stack + 32); ep.c:286:5
9128B	  STRXui %129:gpr64, $sp, 5, debug-location !437 :: (store 8 into stack + 40); ep.c:286:5
9136B	  %136:gpr64 = MOVaddr target-flags(aarch64-page) @.str.13, target-flags(aarch64-pageoff, aarch64-nc) @.str.13, debug-location !437; ep.c:286:5
9144B	  STRXui %132:gpr64, $sp, 2, debug-location !437 :: (store 8 into stack + 16); ep.c:286:5
9152B	  STRXui %131:gpr64, $sp, 3, debug-location !437 :: (store 8 into stack + 24); ep.c:286:5
9160B	  STRXui %134:gpr64, $sp, 0, debug-location !437 :: (store 8 into stack); ep.c:286:5
9216B	  $w1 = MOVi32imm 66, debug-location !437; ep.c:286:5
9232B	  $w2 = MOVi32imm 31, debug-location !437; ep.c:286:5
9240B	  STRXui %133:gpr64, $sp, 1, debug-location !437 :: (store 8 into stack + 8); ep.c:286:5
9296B	  $d0 = COPY %122:fpr64, debug-location !437; ep.c:286:5
9312B	  $d1 = COPY %123:fpr64, debug-location !437; ep.c:286:5
9316B	  $x0 = COPY %135:gpr64, debug-location !437; ep.c:286:5
9320B	  $w3 = COPY $wzr, debug-location !437; ep.c:286:5
9328B	  $w4 = COPY $wzr, debug-location !437; ep.c:286:5
9336B	  $w5 = COPY %121:gpr32, debug-location !437; ep.c:286:5
9344B	  $x6 = COPY %136:gpr64, debug-location !437; ep.c:286:5
9352B	  $w7 = COPY %124:gpr32, debug-location !437; ep.c:286:5
9360B	  BL @print_results, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $w1, implicit killed $w2, implicit $w3, implicit $w4, implicit $w5, implicit $d0, implicit killed $d1, implicit killed $x6, implicit killed $w7, implicit-def $sp, debug-location !437; ep.c:286:5
9376B	  ADJCALLSTACKUP 72, 0, implicit-def dead $sp, implicit $sp, debug-location !437; ep.c:286:5
9392B	  %140:gpr32 = LDRWui %stack.28.timers_enabled, 0, debug-location !438 :: (dereferenceable load 4 from %ir.timers_enabled); ep.c:290:9
9408B	  CBZW %140:gpr32, %bb.52, debug-location !440; ep.c:290:9
9424B	  B %bb.49, debug-location !440; ep.c:290:9

9440B	bb.49.if.then163:
	; predecessors: %bb.48
	  successors: %bb.50(0x40000000), %bb.51(0x40000000); %bb.50(50.00%), %bb.51(50.00%)

9456B	  %141:fpr64 = LDRDui %stack.10.tm, 0, debug-location !441 :: (dereferenceable load 8 from %ir.tm); ep.c:291:13
9472B	  FCMPDri %141:fpr64, implicit-def $nzcv, debug-location !445; ep.c:291:13
9488B	  Bcc 8, %bb.51, implicit $nzcv, debug-location !445; ep.c:291:13
9504B	  B %bb.50, debug-location !445; ep.c:291:13

9520B	bb.50.if.then166:
	; predecessors: %bb.49
	  successors: %bb.51(0x80000000); %bb.51(100.00%)

9536B	  %142:gpr64 = MOVi64imm 4607182418800017408
9552B	  STRXui %142:gpr64, %stack.10.tm, 0, debug-location !446 :: (store 8 into %ir.tm); ep.c:292:16

9568B	bb.51.if.end167:
	; predecessors: %bb.49, %bb.50
	  successors: %bb.52(0x80000000); %bb.52(100.00%)

9584B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !448; ep.c:293:14
9616B	  $w0 = COPY $wzr, debug-location !448; ep.c:293:14
9632B	  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !448; ep.c:293:14
9648B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !448; ep.c:293:14
9664B	  %144:fpr64 = COPY $d0, debug-location !448; ep.c:293:14
9744B	  %148:fpr64 = LDRDui %stack.10.tm, 0, debug-location !453 :: (dereferenceable load 8 from %ir.tm); ep.c:294:72
9748B	  %145:gpr64 = MOVi64imm 4636737291354636288
9752B	  STRDui %144:fpr64, %stack.12.tt, 0, debug-location !449 :: (store 8 into %ir.tt); ep.c:293:12
9760B	  %146:fpr64 = COPY %145:gpr64
9768B	  %147:fpr64 = FMULDrr %144:fpr64, %146:fpr64, debug-location !452; ep.c:294:62
9776B	  %149:fpr64 = FDIVDrr %147:fpr64, %148:fpr64, debug-location !454; ep.c:294:70
9784B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !455; ep.c:294:9
9792B	  %150:gpr64 = MOVaddr target-flags(aarch64-page) @.str.23, target-flags(aarch64-pageoff, aarch64-nc) @.str.23, debug-location !455; ep.c:294:9
9808B	  $x0 = COPY %150:gpr64, debug-location !455; ep.c:294:9
9824B	  $d0 = COPY %144:fpr64, debug-location !455; ep.c:294:9
9840B	  $d1 = COPY %149:fpr64, debug-location !455; ep.c:294:9
9856B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0, debug-location !455; ep.c:294:9
9872B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !455; ep.c:294:9
9888B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !456; ep.c:295:14
9920B	  $w0 = MOVi32imm 1, debug-location !456; ep.c:295:14
9936B	  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !456; ep.c:295:14
9952B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !456; ep.c:295:14
9968B	  %153:fpr64 = COPY $d0, debug-location !456; ep.c:295:14
10016B	  %155:fpr64 = LDRDui %stack.10.tm, 0, debug-location !461 :: (dereferenceable load 8 from %ir.tm); ep.c:296:70
10020B	  STRDui %153:fpr64, %stack.12.tt, 0, debug-location !457 :: (store 8 into %ir.tt); ep.c:295:12
10024B	  %154:fpr64 = FMULDrr %153:fpr64, %146:fpr64, debug-location !460; ep.c:296:60
10032B	  %156:fpr64 = FDIVDrr %154:fpr64, %155:fpr64, debug-location !462; ep.c:296:68
10048B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !463; ep.c:296:9
10064B	  %157:gpr64 = MOVaddr target-flags(aarch64-page) @.str.24, target-flags(aarch64-pageoff, aarch64-nc) @.str.24, debug-location !463; ep.c:296:9
10080B	  $x0 = COPY %157:gpr64, debug-location !463; ep.c:296:9
10096B	  $d0 = COPY %153:fpr64, debug-location !463; ep.c:296:9
10112B	  $d1 = COPY %156:fpr64, debug-location !463; ep.c:296:9
10128B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0, debug-location !463; ep.c:296:9
10144B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !463; ep.c:296:9
10160B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !464; ep.c:297:14
10192B	  $w0 = MOVi32imm 2, debug-location !464; ep.c:297:14
10208B	  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !464; ep.c:297:14
10224B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !464; ep.c:297:14
10240B	  %160:fpr64 = COPY $d0, debug-location !464; ep.c:297:14
10288B	  %162:fpr64 = LDRDui %stack.10.tm, 0, debug-location !469 :: (dereferenceable load 8 from %ir.tm); ep.c:298:70
10292B	  STRDui %160:fpr64, %stack.12.tt, 0, debug-location !465 :: (store 8 into %ir.tt); ep.c:297:12
10296B	  %161:fpr64 = FMULDrr %160:fpr64, %146:fpr64, debug-location !468; ep.c:298:60
10304B	  %163:fpr64 = FDIVDrr %161:fpr64, %162:fpr64, debug-location !470; ep.c:298:68
10320B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !471; ep.c:298:9
10336B	  %164:gpr64 = MOVaddr target-flags(aarch64-page) @.str.25, target-flags(aarch64-pageoff, aarch64-nc) @.str.25, debug-location !471; ep.c:298:9
10352B	  $x0 = COPY %164:gpr64, debug-location !471; ep.c:298:9
10368B	  $d0 = COPY %160:fpr64, debug-location !471; ep.c:298:9
10384B	  $d1 = COPY %163:fpr64, debug-location !471; ep.c:298:9
10400B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0, debug-location !471; ep.c:298:9
10416B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !471; ep.c:298:9

10432B	bb.52.if.end180:
	; predecessors: %bb.48, %bb.51

10464B	  $w0 = COPY $wzr, debug-location !473; ep.c:301:5
10480B	  RET_ReallyLR implicit $w0, debug-location !473; ep.c:301:5

# End machine code for function main.

Before post-MI-sched:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-84]
  fi#1: size=8, align=8, at location [SP-96]
  fi#2: size=8, align=8, at location [SP-104]
  fi#3: size=8, align=8, at location [SP-112]
  fi#4: size=8, align=8, at location [SP-120]
  fi#5: size=8, align=8, at location [SP-128]
  fi#6: size=8, align=8, at location [SP-136]
  fi#7: size=8, align=8, at location [SP-144]
  fi#8: size=8, align=8, at location [SP-152]
  fi#9: size=8, align=8, at location [SP-160]
  fi#10: size=8, align=8, at location [SP-168]
  fi#11: size=8, align=8, at location [SP-176]
  fi#12: size=8, align=8, at location [SP-184]
  fi#13: size=8, align=8, at location [SP-192]
  fi#14: size=8, align=8, at location [SP-200]
  fi#15: size=8, align=8, at location [SP-208]
  fi#16: size=8, align=8, at location [SP-216]
  fi#17: size=8, align=8, at location [SP-224]
  fi#18: size=4, align=4, at location [SP-228]
  fi#19: size=4, align=4, at location [SP-232]
  fi#20: size=4, align=4, at location [SP-236]
  fi#21: size=4, align=4, at location [SP-240]
  fi#22: size=4, align=4, at location [SP-244]
  fi#23: size=4, align=4, at location [SP-248]
  fi#24: size=4, align=4, at location [SP-252]
  fi#25: size=4, align=4, at location [SP-256]
  fi#26: size=4, align=4, at location [SP-260]
  fi#27: size=4, align=4, at location [SP-264]
  fi#28: size=4, align=4, at location [SP-268]
  fi#29: size=24, align=16, at location [SP-304]
  fi#30: size=16, align=16, at location [SP-320]
  fi#31: size=8, align=8, at location [SP-328]
  fi#32: size=8, align=8, at location [SP-8]
  fi#33: size=8, align=8, at location [SP-16]
  fi#34: size=8, align=8, at location [SP-24]
  fi#35: size=8, align=8, at location [SP-32]
  fi#36: size=8, align=8, at location [SP-40]
  fi#37: size=8, align=8, at location [SP-48]
  fi#38: size=8, align=8, at location [SP-56]
  fi#39: size=8, align=8, at location [SP-64]
  fi#40: size=8, align=8, at location [SP-72]
  fi#41: size=8, align=8, at location [SP-80]
Constant Pool:
  cp#0: 0x41D2309CE5400000, align=8
  cp#1: 1.000000e-08, align=8

bb.0.entry:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $d10, $d8, $d9, $x28, $x21, $x22, $x19, $x20, $lr
  $sp = frame-setup SUBXri $sp, 400, 0
  frame-setup STRDui killed $d10, $sp, 40 :: (store 8 into %stack.41)
  frame-setup STPDi killed $d9, killed $d8, $sp, 41 :: (store 8 into %stack.40), (store 8 into %stack.39)
  frame-setup STRXui killed $x28, $sp, 43 :: (store 8 into %stack.38)
  frame-setup STPXi killed $x22, killed $x21, $sp, 44 :: (store 8 into %stack.37), (store 8 into %stack.36)
  frame-setup STPXi killed $x20, killed $x19, $sp, 46 :: (store 8 into %stack.35), (store 8 into %stack.34)
  frame-setup STPXi killed $fp, killed $lr, $sp, 48 :: (store 8 into %stack.33), (store 8 into %stack.32)
  $fp = frame-setup ADDXri $sp, 384, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8, debug-location !93; ep.c:82:12
  frame-setup CFI_INSTRUCTION offset $w29, -16, debug-location !93; ep.c:82:12
  frame-setup CFI_INSTRUCTION offset $w19, -24, debug-location !93; ep.c:82:12
  frame-setup CFI_INSTRUCTION offset $w20, -32, debug-location !93; ep.c:82:12
  frame-setup CFI_INSTRUCTION offset $w21, -40, debug-location !93; ep.c:82:12
  frame-setup CFI_INSTRUCTION offset $w22, -48, debug-location !93; ep.c:82:12
  frame-setup CFI_INSTRUCTION offset $w28, -56, debug-location !93; ep.c:82:12
  frame-setup CFI_INSTRUCTION offset $b8, -64, debug-location !93; ep.c:82:12
  frame-setup CFI_INSTRUCTION offset $b9, -72, debug-location !93; ep.c:82:12
  frame-setup CFI_INSTRUCTION offset $b10, -80, debug-location !93; ep.c:82:12
  $x8 = ADRP target-flags(aarch64-page) @__const.main.dum, debug-location !93; ep.c:82:12
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.dum, 0, debug-location !93; ep.c:82:12
  renamable $q0 = LDRQui renamable $x8, 0, debug-location !93 :: (dereferenceable load 16 from `i8* bitcast ([3 x double]* @__const.main.dum to i8*)`); ep.c:82:12
  renamable $x8 = LDRXui killed renamable $x8, 2, debug-location !93 :: (dereferenceable load 8 from `i8* bitcast ([3 x double]* @__const.main.dum to i8*)` + 16, align 16); ep.c:82:12
  STURWi $wzr, $fp, -68 :: (store 4 into %ir.retval)
  STRQui killed renamable $q0, $sp, 6, debug-location !93 :: (store 16 into %ir.0); ep.c:82:12
  STRXui killed renamable $x8, $sp, 14, debug-location !93 :: (store 8 into %ir.0 + 16, align 16); ep.c:82:12
  $x0 = ADRP target-flags(aarch64-page) @.str, debug-location !106; ep.c:87:15
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str, 0, debug-location !106; ep.c:87:15
  $x1 = ADRP target-flags(aarch64-page) @.str.1, debug-location !106; ep.c:87:15
  renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1, 0, debug-location !106; ep.c:87:15
  BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0, debug-location !106; ep.c:87:15
  STRXui renamable $x0, $sp, 9, debug-location !108 :: (store 8 into %ir.fp); ep.c:87:13
  CBNZX killed renamable $x0, %bb.2, debug-location !110; ep.c:87:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  STRWui $wzr, $sp, 33, debug-location !111 :: (store 4 into %ir.timers_enabled); ep.c:88:24
  B %bb.3

bb.2.if.else:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $x0 = LDRXui $sp, 9, debug-location !116 :: (dereferenceable load 8 from %ir.fp); ep.c:92:16
  $w8 = MOVZWi 1, 0
  STRWui killed renamable $w8, $sp, 33, debug-location !114 :: (store 4 into %ir.timers_enabled); ep.c:91:24
  BL @fclose, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !117; ep.c:92:9

bb.3.if.end:
; predecessors: %bb.2, %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)

  renamable $d0 = FMOVDi 0
  renamable $d1 = FMOVDi 63
  BL @pow, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $d1, implicit-def $sp, implicit-def $d0, debug-location !119; ep.c:102:30
  $x1 = ADRP target-flags(aarch64-page) @.str.2, debug-location !120; ep.c:102:5
  renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.2, 0, debug-location !120; ep.c:102:5
  $x0 = ADDXri $sp, 80, 0, debug-location !120; ep.c:102:5
  $x19 = ADDXri $sp, 80, 0
  BL @sprintf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !120; ep.c:102:5
  renamable $w8 = LDRSBWui $sp, 94, debug-location !124 :: (load 1 from %ir.arrayidx, align 2); ep.c:104:9
  $w9 = MOVZWi 14, 0
  dead $wzr = SUBSWri killed renamable $w8, 46, 0, implicit-def $nzcv, debug-location !126; ep.c:104:9
  STRWui killed renamable $w9, $sp, 35, debug-location !121 :: (store 4 into %ir.j); ep.c:103:7
  Bcc 1, %bb.5, implicit $nzcv, debug-location !126; ep.c:104:9

bb.4.if.then6:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)
  liveins: $x19
  renamable $w8 = LDRWui $sp, 35, debug-location !127 :: (dereferenceable load 4 from %ir.j); ep.c:105:10
  renamable $w8 = nsw SUBWri killed renamable $w8, 1, 0, debug-location !127; ep.c:105:10
  STRWui killed renamable $w8, $sp, 35, debug-location !127 :: (store 4 into %ir.j); ep.c:105:10

bb.5.if.end7:
; predecessors: %bb.3, %bb.4
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $x19
  renamable $x8 = LDRSWui $sp, 35, debug-location !129 :: (dereferenceable load 4 from %ir.j); ep.c:106:10
  $x8 = ADDXrs killed renamable $x8, killed renamable $x19, 0, debug-location !130; ep.c:106:12
  STRBBui $wzr, killed renamable $x8, 1, debug-location !132 :: (store 1 into %ir.arrayidx9); ep.c:106:17
  $x0 = ADRP target-flags(aarch64-page) @.str.3, debug-location !133; ep.c:107:5
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.3, 0, debug-location !133; ep.c:107:5
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !133; ep.c:107:5
  $x0 = ADRP target-flags(aarch64-page) @.str.4, debug-location !135; ep.c:108:5
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.4, 0, debug-location !135; ep.c:108:5
  $x1 = ADDXri $sp, 80, 0, debug-location !135; ep.c:108:5
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def dead $w0, debug-location !135; ep.c:108:5
  STRWui $wzr, $sp, 34, debug-location !136 :: (store 4 into %ir.verified); ep.c:110:14
  $w8 = MOVZWi 16384, 0
  renamable $d0 = LDRDui $sp, 13, debug-location !139 :: (dereferenceable load 8 from %ir.arrayidx14); ep.c:127:24
  STRWui killed renamable $w8, $sp, 43, debug-location !137 :: (store 4 into %ir.np); ep.c:118:8
  $x8 = ADDXri $sp, 96, 0
  renamable $x19 = ORRXri renamable $x8, 8000, debug-location !139; ep.c:127:24
  renamable $x2 = nuw ADDXri killed renamable $x8, 16, 0, debug-location !140; ep.c:127:33
  $x1 = ADDXri $sp, 96, 0, debug-location !141; ep.c:127:5
  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !141; ep.c:127:5
  BL @vranlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit $d0, implicit $x2, implicit-def $sp, debug-location !141; ep.c:127:5
  renamable $d0 = LDRDui $sp, 14, debug-location !143 :: (dereferenceable load 8 from %ir.arrayidx17, align 16); ep.c:128:30
  $x0 = ORRXrs $xzr, killed $x19, 0, debug-location !144; ep.c:128:14
  BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !144; ep.c:128:14
  STRDui killed renamable $d0, $sp, 12, debug-location !146 :: (store 8 into %ir.arrayidx195, align 16); ep.c:128:12
  STRWui $wzr, $sp, 42, debug-location !147 :: (store 4 into %ir.i); ep.c:129:12
  $x8 = ADRP target-flags(aarch64-page) @x
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @x, 0
  $x9 = MOVZXi 40750, 0
  $x9 = MOVKXi $x9(tied-def 0), 41607, 16
  $x9 = MOVKXi $x9(tied-def 0), 17070, 32
  $x9 = MOVKXi $x9(tied-def 0), 54397, 48

bb.6.for.cond:
; predecessors: %bb.5, %bb.7
  successors: %bb.7(0x7c000000), %bb.8(0x04000000); %bb.7(96.88%), %bb.8(3.12%)
  liveins: $x8, $x9
  renamable $w10 = LDRWui $sp, 42, debug-location !150 :: (dereferenceable load 4 from %ir.i); ep.c:129:17
  dead $wzr = SUBSWri killed renamable $w10, 32, 12, implicit-def $nzcv, debug-location !153; ep.c:129:5
  Bcc 10, %bb.8, implicit $nzcv, debug-location !153; ep.c:129:5

bb.7.for.body:
; predecessors: %bb.6
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $x8, $x9
  renamable $x10 = LDRSWui $sp, 42, debug-location !154 :: (dereferenceable load 4 from %ir.i); ep.c:130:11
  STRXroX renamable $x9, renamable $x8, renamable $x10, 0, 1, debug-location !157 :: (store 8 into %ir.arrayidx23); ep.c:130:14
  renamable $w10 = nsw ADDWri renamable $w10, 1, 0, implicit killed $x10, debug-location !158; ep.c:129:30
  STRWui killed renamable $w10, $sp, 42, debug-location !158 :: (store 4 into %ir.i); ep.c:129:30
  B %bb.6

bb.8.for.end:
; predecessors: %bb.6
  successors: %bb.10(0x50000000), %bb.9(0x30000000); %bb.10(62.50%), %bb.9(37.50%)

  renamable $d8 = FMOVDi 112
  renamable $d0 = FSQRTDr renamable $d8, debug-location !163; ep.c:132:16
  FCMPDrr renamable $d0, renamable $d0, implicit-def $nzcv, debug-location !164; ep.c:132:12
  Bcc 7, %bb.10, implicit $nzcv, debug-location !164; ep.c:132:12

bb.9.call.sqrt:
; predecessors: %bb.8
  successors: %bb.10(0x80000000); %bb.10(100.00%)
  liveins: $d8
  $q0 = ORRv16i8 $q8, $q8, debug-location !164; ep.c:132:12
  BL @sqrt, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !164; ep.c:132:12

bb.10.for.end.split:
; predecessors: %bb.8, %bb.9
  successors: %bb.11(0x80000000); %bb.11(100.00%)
  liveins: $d0, $d8
  BL @log, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !164; ep.c:132:12
  STURDi killed renamable $d0, $fp, -80, debug-location !165 :: (store 8 into %ir.Mops); ep.c:132:10
  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !166; ep.c:134:5
  BL @timer_clear, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !166; ep.c:134:5
  $w0 = MOVZWi 1, 0, debug-location !167; ep.c:135:5
  BL @timer_clear, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !167; ep.c:135:5
  $w0 = MOVZWi 2, 0, debug-location !168; ep.c:136:5
  BL @timer_clear, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !168; ep.c:136:5
  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !169; ep.c:137:5
  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !169; ep.c:137:5
  $x20 = MOVZXi 58688, 16
  $x20 = MOVKXi $x20(tied-def 0), 12444, 32
  $x20 = MOVKXi $x20(tied-def 0), 16850, 48
  STURXi renamable $x20, $fp, -88, debug-location !170 :: (store 8 into %ir.t1); ep.c:141:8
  renamable $x8 = ADRP target-flags(aarch64-page) %const.0
  renamable $d9 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  $x19 = ADRP target-flags(aarch64-page) @x, debug-location !171; ep.c:142:5
  renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @x, 0, debug-location !171; ep.c:142:5
  $x1 = SUBXri $fp, 88, 0, debug-location !171; ep.c:142:5
  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !171; ep.c:142:5
  $q0 = ORRv16i8 $q9, $q9, debug-location !171; ep.c:142:5
  $x2 = ORRXrs $xzr, $x19, 0, debug-location !171; ep.c:142:5
  BL @vranlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit $d0, implicit $x2, implicit-def $sp, debug-location !171; ep.c:142:5
  STURXi killed renamable $x20, $fp, -88, debug-location !172 :: (store 8 into %ir.t1); ep.c:148:8
  STRWui $wzr, $sp, 42, debug-location !173 :: (store 4 into %ir.i); ep.c:150:12

bb.11.for.cond26:
; predecessors: %bb.10, %bb.12
  successors: %bb.12(0x7c000000), %bb.13(0x04000000); %bb.12(96.88%), %bb.13(3.12%)
  liveins: $d8, $d9, $x19
  renamable $w8 = LDRWui $sp, 42, debug-location !176 :: (dereferenceable load 4 from %ir.i); ep.c:150:17
  renamable $d0 = LDURDi $fp, -88, debug-location !179 :: (dereferenceable load 8 from %ir.t1); ep.c:0
  dead $wzr = SUBSWri killed renamable $w8, 16, 0, implicit-def $nzcv, debug-location !180; ep.c:150:5
  Bcc 12, %bb.13, implicit $nzcv, debug-location !180; ep.c:150:5

bb.12.for.body29:
; predecessors: %bb.11
  successors: %bb.11(0x80000000); %bb.11(100.00%)
  liveins: $d0, $d8, $d9, $x19
  $x0 = SUBXri $fp, 88, 0, debug-location !181; ep.c:151:14
  BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !181; ep.c:151:14
  renamable $w8 = LDRWui $sp, 42, debug-location !184 :: (dereferenceable load 4 from %ir.i); ep.c:150:30
  STURDi killed renamable $d0, $fp, -96, debug-location !183 :: (store 8 into %ir.t2); ep.c:151:12
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !184; ep.c:150:30
  STRWui killed renamable $w8, $sp, 42, debug-location !184 :: (store 4 into %ir.i); ep.c:150:30
  B %bb.11

bb.13.for.end33:
; predecessors: %bb.11
  successors: %bb.14(0x80000000); %bb.14(100.00%)
  liveins: $d0, $d8, $d9, $x19
  STURDi killed renamable $d0, $fp, -160, debug-location !188 :: (store 8 into %ir.an); ep.c:154:8
  $x8 = MOVZXi 55040, 16
  $x8 = MOVKXi $x8(tied-def 0), 13252, 32
  $x8 = MOVKXi $x8(tied-def 0), 16816, 48
  STPXi $xzr, renamable $x8, $fp, -22, debug-location !190 :: (store 8 into %ir.gc), (store 8 into %ir.tt); ep.c:156:8
  STPXi $xzr, $xzr, $fp, -18, debug-location !191 :: (store 8 into %ir.sx), (store 8 into %ir.sy); ep.c:157:8
  STRWui $wzr, $sp, 42, debug-location !193 :: (store 4 into %ir.i); ep.c:160:12
  $x20 = ADRP target-flags(aarch64-page) @q
  renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @q, 0

bb.14.for.cond34:
; predecessors: %bb.13, %bb.15
  successors: %bb.15(0x7c000000), %bb.16(0x04000000); %bb.15(96.88%), %bb.16(3.12%)
  liveins: $d8, $d9, $x19, $x20
  renamable $w8 = LDRWui $sp, 42, debug-location !196 :: (dereferenceable load 4 from %ir.i); ep.c:160:17
  dead $wzr = SUBSWri killed renamable $w8, 9, 0, implicit-def $nzcv, debug-location !199; ep.c:160:5
  Bcc 12, %bb.16, implicit $nzcv, debug-location !199; ep.c:160:5

bb.15.for.body37:
; predecessors: %bb.14
  successors: %bb.14(0x80000000); %bb.14(100.00%)
  liveins: $d8, $d9, $x19, $x20
  renamable $x8 = LDRSWui $sp, 42, debug-location !200 :: (dereferenceable load 4 from %ir.i); ep.c:161:11
  STRXroX $xzr, renamable $x20, renamable $x8, 0, 1, debug-location !203 :: (store 8 into %ir.arrayidx39); ep.c:161:14
  renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit killed $x8, debug-location !204; ep.c:160:26
  STRWui killed renamable $w8, $sp, 42, debug-location !204 :: (store 4 into %ir.i); ep.c:160:26
  B %bb.14

bb.16.for.end42:
; predecessors: %bb.14
  successors: %bb.17(0x80000000); %bb.17(100.00%)
  liveins: $d8, $d9, $x19, $x20
  $w8 = MOVNWi 0, 0
  $w21 = MOVZWi 1, 0
  $x22 = MOVZXi 55040, 16
  $x22 = MOVKXi $x22(tied-def 0), 13252, 32
  $x22 = MOVKXi $x22(tied-def 0), 16816, 48
  STRWui killed renamable $w8, $sp, 36, debug-location !208 :: (store 4 into %ir.k_offset); ep.c:170:14
  STRWui renamable $w21, $sp, 38, debug-location !209 :: (store 4 into %ir.k); ep.c:172:12
  renamable $d10 = FMOVDi 128

bb.17.for.cond43:
; predecessors: %bb.16, %bb.39
  successors: %bb.18(0x7c000000), %bb.40(0x04000000); %bb.18(96.88%), %bb.40(3.12%)
  liveins: $d8, $d9, $d10, $w21, $x19, $x20, $x22
  renamable $w8 = LDRWui $sp, 38, debug-location !212 :: (dereferenceable load 4 from %ir.k); ep.c:172:17
  renamable $w9 = LDRWui $sp, 43, debug-location !214 :: (dereferenceable load 4 from %ir.np); ep.c:172:22
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !216; ep.c:172:5
  Bcc 12, %bb.40, implicit $nzcv, debug-location !216; ep.c:172:5

bb.18.for.body46:
; predecessors: %bb.17
  successors: %bb.19(0x80000000); %bb.19(100.00%)
  liveins: $d8, $d9, $d10, $w21, $x19, $x20, $x22
  renamable $w8 = LDRWui $sp, 36, debug-location !217 :: (dereferenceable load 4 from %ir.k_offset); ep.c:173:14
  renamable $w9 = LDRWui $sp, 38, debug-location !219 :: (dereferenceable load 4 from %ir.k); ep.c:173:25
  renamable $d0 = LDURDi $fp, -160, debug-location !223 :: (dereferenceable load 8 from %ir.an); ep.c:175:14
  STURXi renamable $x22, $fp, -88, debug-location !222 :: (store 8 into %ir.t1); ep.c:174:12
  $w8 = ADDWrs killed renamable $w8, killed renamable $w9, 0, debug-location !220; ep.c:173:23
  STURDi killed renamable $d0, $fp, -96, debug-location !224 :: (store 8 into %ir.t2); ep.c:175:12
  STRWui killed renamable $w8, $sp, 40, debug-location !221 :: (store 4 into %ir.kk); ep.c:173:12
  STRWui renamable $w21, $sp, 42, debug-location !225 :: (store 4 into %ir.i); ep.c:179:16

bb.19.for.cond48:
; predecessors: %bb.18, %bb.23
  successors: %bb.20(0x7c000000), %bb.24(0x04000000); %bb.20(96.88%), %bb.24(3.12%)
  liveins: $d8, $d9, $d10, $w21, $x19, $x20, $x22
  renamable $w8 = LDRWui $sp, 42, debug-location !228 :: (dereferenceable load 4 from %ir.i); ep.c:179:21
  dead $wzr = SUBSWri killed renamable $w8, 100, 0, implicit-def $nzcv, debug-location !231; ep.c:179:9
  Bcc 12, %bb.24, implicit $nzcv, debug-location !231; ep.c:179:9

bb.20.for.body51:
; predecessors: %bb.19
  successors: %bb.21(0x40000000), %bb.22(0x40000000); %bb.21(50.00%), %bb.22(50.00%)
  liveins: $d8, $d9, $d10, $w21, $x19, $x20, $x22
  renamable $w8 = LDRWui $sp, 40, debug-location !232 :: (dereferenceable load 4 from %ir.kk); ep.c:180:18
  dead $wzr = SUBSWri renamable $w8, 0, 0, implicit-def $nzcv, debug-location !234; ep.c:180:21
  renamable $w9 = CSINCWr renamable $w8, renamable $w8, 10, implicit $nzcv, debug-location !234; ep.c:180:21
  renamable $w10 = SBFMWri renamable $w9, 1, 31, debug-location !234; ep.c:180:21
  renamable $w9 = ANDWri killed renamable $w9, 2014, debug-location !238; ep.c:181:20
  $wzr = SUBSWrs killed renamable $w9, killed renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !241; ep.c:181:17
  STRWui killed renamable $w10, $sp, 41, debug-location !235 :: (store 4 into %ir.ik); ep.c:180:16
  Bcc 0, %bb.22, implicit $nzcv, debug-location !241; ep.c:181:17

bb.21.if.then54:
; predecessors: %bb.20
  successors: %bb.22(0x80000000); %bb.22(100.00%)
  liveins: $d8, $d9, $d10, $w21, $x19, $x20, $x22
  renamable $d0 = LDURDi $fp, -96, debug-location !242 :: (dereferenceable load 8 from %ir.t2); ep.c:182:34
  $x0 = SUBXri $fp, 88, 0, debug-location !243; ep.c:182:22
  BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !243; ep.c:182:22
  STURDi killed renamable $d0, $fp, -104, debug-location !244 :: (store 8 into %ir.t3); ep.c:182:20

bb.22.if.end56:
; predecessors: %bb.20, %bb.21
  successors: %bb.24(0x04000000), %bb.23(0x7c000000); %bb.24(3.12%), %bb.23(96.88%)
  liveins: $d8, $d9, $d10, $w21, $x19, $x20, $x22
  renamable $w8 = LDRWui $sp, 41, debug-location !246 :: (dereferenceable load 4 from %ir.ik); ep.c:183:17
  CBZW killed renamable $w8, %bb.24, debug-location !249; ep.c:183:17

bb.23.if.end60:
; predecessors: %bb.22
  successors: %bb.19(0x80000000); %bb.19(100.00%)
  liveins: $d8, $d9, $d10, $w21, $x19, $x20, $x22
  renamable $d0 = LDURDi $fp, -96, debug-location !250 :: (dereferenceable load 8 from %ir.t2); ep.c:185:30
  $x0 = SUBXri $fp, 96, 0, debug-location !251; ep.c:185:18
  BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !251; ep.c:185:18
  renamable $w8, renamable $w9 = LDPWi $sp, 41, debug-location !253 :: (dereferenceable load 4 from %ir.ik), (dereferenceable load 4 from %ir.i); ep.c:186:18
  STURDi killed renamable $d0, $fp, -104, debug-location !252 :: (store 8 into %ir.t3); ep.c:185:16
  STRWui killed renamable $w8, $sp, 40, debug-location !254 :: (store 4 into %ir.kk); ep.c:186:16
  renamable $w8 = nsw ADDWri killed renamable $w9, 1, 0, debug-location !255; ep.c:179:32
  STRWui killed renamable $w8, $sp, 42, debug-location !255 :: (store 4 into %ir.i); ep.c:179:32
  B %bb.19

bb.24.for.end64:
; predecessors: %bb.19, %bb.22
  successors: %bb.25(0x50000000), %bb.26(0x30000000); %bb.25(62.50%), %bb.26(37.50%)
  liveins: $d8, $d9, $d10, $w21, $x19, $x20, $x22
  renamable $w8 = LDRWui $sp, 33, debug-location !259 :: (dereferenceable load 4 from %ir.timers_enabled); ep.c:192:13
  CBZW killed renamable $w8, %bb.26, debug-location !261; ep.c:192:13

bb.25.if.then65:
; predecessors: %bb.24
  successors: %bb.26(0x80000000); %bb.26(100.00%)
  liveins: $d8, $d9, $d10, $w21, $x19, $x20, $x22
  $w0 = MOVZWi 2, 0, debug-location !262; ep.c:193:13
  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !262; ep.c:193:13

bb.26.if.end66:
; predecessors: %bb.24, %bb.25
  successors: %bb.27(0x50000000), %bb.28(0x30000000); %bb.27(62.50%), %bb.28(37.50%)
  liveins: $d8, $d9, $d10, $w21, $x19, $x20, $x22
  $x1 = SUBXri $fp, 88, 0, debug-location !263; ep.c:194:9
  $w0 = MOVZWi 2, 16, debug-location !263; ep.c:194:9
  $q0 = ORRv16i8 $q9, $q9, debug-location !263; ep.c:194:9
  $x2 = ORRXrs $xzr, $x19, 0, debug-location !263; ep.c:194:9
  BL @vranlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit $d0, implicit $x2, implicit-def $sp, debug-location !263; ep.c:194:9
  renamable $w8 = LDRWui $sp, 33, debug-location !264 :: (dereferenceable load 4 from %ir.timers_enabled); ep.c:195:13
  CBZW killed renamable $w8, %bb.28, debug-location !266; ep.c:195:13

bb.27.if.then68:
; predecessors: %bb.26
  successors: %bb.28(0x80000000); %bb.28(100.00%)
  liveins: $d8, $d9, $d10, $w21, $x19, $x20, $x22
  $w0 = MOVZWi 2, 0, debug-location !267; ep.c:196:13
  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !267; ep.c:196:13

bb.28.if.end69:
; predecessors: %bb.26, %bb.27
  successors: %bb.29(0x50000000), %bb.30(0x30000000); %bb.29(62.50%), %bb.30(37.50%)
  liveins: $d8, $d9, $d10, $w21, $x19, $x20, $x22
  renamable $w8 = LDRWui $sp, 33, debug-location !268 :: (dereferenceable load 4 from %ir.timers_enabled); ep.c:203:13
  CBZW killed renamable $w8, %bb.30, debug-location !270; ep.c:203:13

bb.29.if.then71:
; predecessors: %bb.28
  successors: %bb.30(0x80000000); %bb.30(100.00%)
  liveins: $d8, $d9, $d10, $w21, $x19, $x20, $x22
  $w0 = MOVZWi 1, 0, debug-location !271; ep.c:204:13
  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !271; ep.c:204:13

bb.30.if.end72:
; predecessors: %bb.28, %bb.29
  successors: %bb.31(0x80000000); %bb.31(100.00%)
  liveins: $d8, $d9, $d10, $w21, $x19, $x20, $x22
  STRWui $wzr, $sp, 42, debug-location !272 :: (store 4 into %ir.i); ep.c:206:16

bb.31.for.cond73:
; predecessors: %bb.30, %bb.36
  successors: %bb.32(0x7c000000), %bb.37(0x04000000); %bb.32(96.88%), %bb.37(3.12%)
  liveins: $d8, $d9, $d10, $w21, $x19, $x20, $x22
  renamable $w8 = LDRWui $sp, 42, debug-location !275 :: (dereferenceable load 4 from %ir.i); ep.c:206:21
  dead $wzr = SUBSWri killed renamable $w8, 16, 12, implicit-def $nzcv, debug-location !278; ep.c:206:9
  Bcc 10, %bb.37, implicit $nzcv, debug-location !278; ep.c:206:9

bb.32.for.body76:
; predecessors: %bb.31
  successors: %bb.33(0x40000000), %bb.36(0x40000000); %bb.33(50.00%), %bb.36(50.00%)
  liveins: $d8, $d9, $d10, $w21, $x19, $x20, $x22
  renamable $x8 = LDRSWui $sp, 42, debug-location !279 :: (dereferenceable load 4 from %ir.i); ep.c:207:30
  renamable $x8 = ADDXrs renamable $x19, killed renamable $x8, 4, debug-location !282; ep.c:207:24
  renamable $d0, renamable $d1 = LDPDi renamable $x8, 0, debug-location !282 :: (load 8 from %ir.arrayidx79), (load 8 from %ir.arrayidx84); ep.c:207:24
  renamable $d0 = FADDDrr killed renamable $d0, renamable $d0, debug-location !283; ep.c:207:22
  renamable $d1 = FADDDrr killed renamable $d1, renamable $d1, debug-location !290; ep.c:208:22
  renamable $d0 = FSUBDrr killed renamable $d0, renamable $d8, debug-location !284; ep.c:207:33
  renamable $d1 = FSUBDrr killed renamable $d1, renamable $d8, debug-location !291; ep.c:208:37
  STPDi renamable $d1, renamable $d0, $fp, -16, debug-location !285 :: (store 8 into %ir.x1), (store 8 into %ir.x2); ep.c:207:16
  renamable $d0 = FMULDrr killed renamable $d0, renamable $d0, debug-location !295; ep.c:209:21
  renamable $d1 = FMULDrr killed renamable $d1, renamable $d1, debug-location !298; ep.c:209:31
  renamable $d0 = FADDDrr killed renamable $d0, killed renamable $d1, debug-location !299; ep.c:209:26
  FCMPDrr renamable $d0, renamable $d8, implicit-def $nzcv, debug-location !304; ep.c:210:17
  STURDi killed renamable $d0, $fp, -88, debug-location !300 :: (store 8 into %ir.t1); ep.c:209:16
  Bcc 8, %bb.36, implicit $nzcv, debug-location !304; ep.c:210:17

bb.33.if.then92:
; predecessors: %bb.32
  successors: %bb.35(0x50000000), %bb.34(0x30000000); %bb.35(62.50%), %bb.34(37.50%)
  liveins: $d8, $d9, $d10, $w21, $x19, $x20, $x22
  renamable $d0 = LDURDi $fp, -88, debug-location !305 :: (dereferenceable load 8 from %ir.t1); ep.c:211:38
  BL @log, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !307; ep.c:211:34
  renamable $d1 = LDURDi $fp, -88, debug-location !309 :: (dereferenceable load 8 from %ir.t1); ep.c:211:44
  renamable $d0 = FMULDrr killed renamable $d0, renamable $d10, debug-location !308; ep.c:211:32
  renamable $d1 = FDIVDrr killed renamable $d0, killed renamable $d1, debug-location !310; ep.c:211:42
  renamable $d0 = FSQRTDr renamable $d1, debug-location !311; ep.c:211:22
  FCMPDrr renamable $d0, renamable $d0, implicit-def $nzcv, debug-location !312; ep.c:211:20
  Bcc 7, %bb.35, implicit $nzcv, debug-location !312; ep.c:211:20

bb.34.call.sqrt1:
; predecessors: %bb.33
  successors: %bb.35(0x80000000); %bb.35(100.00%)
  liveins: $d1, $d8, $d9, $d10, $w21, $x19, $x20, $x22
  $q0 = ORRv16i8 $q1, killed $q1, debug-location !312; ep.c:211:20
  BL @sqrt, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !312; ep.c:211:20

bb.35.if.then92.split:
; predecessors: %bb.33, %bb.34
  successors: %bb.36(0x80000000); %bb.36(100.00%)
  liveins: $d0, $d8, $d9, $d10, $w21, $x19, $x20, $x22
  renamable $d2, renamable $d1 = LDPDi $fp, -16, debug-location !313 :: (dereferenceable load 8 from %ir.x1), (dereferenceable load 8 from %ir.x2); ep.c:212:23
  renamable $d1 = FMULDrr killed renamable $d1, renamable $d0, debug-location !315; ep.c:212:26
  renamable $d2 = FMULDrr killed renamable $d2, renamable $d0, debug-location !319; ep.c:213:26
  renamable $d3 = FABSDr renamable $d1, debug-location !321; ep.c:214:21
  renamable $d4 = FABSDr renamable $d2, debug-location !321; ep.c:214:21
  FCMPDrr killed renamable $d3, killed renamable $d4, implicit-def $nzcv, debug-location !321; ep.c:214:21
  STPDi renamable $d1, renamable $d0, $fp, -13, debug-location !312 :: (store 8 into %ir.t2), (store 8 into %ir.t3); ep.c:211:20
  renamable $d0, renamable $d3 = LDPDi $fp, -18, debug-location !329 :: (dereferenceable load 8 from %ir.sx), (dereferenceable load 8 from %ir.sy); ep.c:216:22
  renamable $d3 = FADDDrr killed renamable $d3, renamable $d1, debug-location !331; ep.c:216:25
  renamable $d1 = FCSELDrrr killed renamable $d1, renamable $d2, 12, implicit $nzcv, debug-location !321; ep.c:214:21
  renamable $d1 = FABSDr killed renamable $d1, debug-location !321; ep.c:214:21
  renamable $w8 = FCVTZSUWDr killed renamable $d1, implicit-def $x8, debug-location !321; ep.c:214:21
  STRWui renamable $w8, $sp, 39, debug-location !322 :: (store 4 into %ir.l); ep.c:214:19
  renamable $x8 = SBFMXri killed renamable $x8, 61, 31, debug-location !324; ep.c:215:24
  renamable $d1 = LDRDroX renamable $x20, renamable $x8, 0, 0, debug-location !324 :: (load 8 from %ir.arrayidx103); ep.c:215:24
  STURDi renamable $d2, $fp, -112, debug-location !320 :: (store 8 into %ir.t4); ep.c:213:20
  renamable $d0 = FADDDrr killed renamable $d0, killed renamable $d2, debug-location !335; ep.c:217:25
  STPDi renamable $d0, renamable $d3, $fp, -18, debug-location !332 :: (store 8 into %ir.sx), (store 8 into %ir.sy); ep.c:216:20
  renamable $d1 = FADDDrr killed renamable $d1, renamable $d8, debug-location !325; ep.c:215:29
  STRDroX killed renamable $d1, renamable $x20, killed renamable $x8, 0, 0, debug-location !328 :: (store 8 into %ir.arrayidx106); ep.c:215:22

bb.36.for.inc110:
; predecessors: %bb.32, %bb.35
  successors: %bb.31(0x80000000); %bb.31(100.00%)
  liveins: $d8, $d9, $d10, $w21, $x19, $x20, $x22
  renamable $w8 = LDRWui $sp, 42, debug-location !338 :: (dereferenceable load 4 from %ir.i); ep.c:206:30
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !338; ep.c:206:30
  STRWui killed renamable $w8, $sp, 42, debug-location !338 :: (store 4 into %ir.i); ep.c:206:30
  B %bb.31

bb.37.for.end112:
; predecessors: %bb.31
  successors: %bb.38(0x50000000), %bb.39(0x30000000); %bb.38(62.50%), %bb.39(37.50%)
  liveins: $d8, $d9, $d10, $w21, $x19, $x20, $x22
  renamable $w8 = LDRWui $sp, 33, debug-location !342 :: (dereferenceable load 4 from %ir.timers_enabled); ep.c:221:13
  CBZW killed renamable $w8, %bb.39, debug-location !344; ep.c:221:13

bb.38.if.then114:
; predecessors: %bb.37
  successors: %bb.39(0x80000000); %bb.39(100.00%)
  liveins: $d8, $d9, $d10, $w21, $x19, $x20, $x22
  $w0 = MOVZWi 1, 0, debug-location !345; ep.c:222:13
  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !345; ep.c:222:13

bb.39.for.inc116:
; predecessors: %bb.37, %bb.38
  successors: %bb.17(0x80000000); %bb.17(100.00%)
  liveins: $d8, $d9, $d10, $w21, $x19, $x20, $x22
  renamable $w8 = LDRWui $sp, 38, debug-location !346 :: (dereferenceable load 4 from %ir.k); ep.c:172:27
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !346; ep.c:172:27
  STRWui killed renamable $w8, $sp, 38, debug-location !346 :: (store 4 into %ir.k); ep.c:172:27
  B %bb.17

bb.40.for.end118:
; predecessors: %bb.17
  successors: %bb.41(0x80000000); %bb.41(100.00%)
  liveins: $x20
  STRWui $wzr, $sp, 42, debug-location !350 :: (store 4 into %ir.i); ep.c:225:12

bb.41.for.cond119:
; predecessors: %bb.40, %bb.42
  successors: %bb.42(0x7c000000), %bb.43(0x04000000); %bb.42(96.88%), %bb.43(3.12%)
  liveins: $x20
  renamable $w8 = LDRWui $sp, 42, debug-location !353 :: (dereferenceable load 4 from %ir.i); ep.c:225:17
  dead $wzr = SUBSWri killed renamable $w8, 9, 0, implicit-def $nzcv, debug-location !356; ep.c:225:5
  Bcc 12, %bb.43, implicit $nzcv, debug-location !356; ep.c:225:5

bb.42.for.body122:
; predecessors: %bb.41
  successors: %bb.41(0x80000000); %bb.41(100.00%)
  liveins: $x20
  renamable $x8 = LDRSWui $sp, 42, debug-location !359 :: (dereferenceable load 4 from %ir.i); ep.c:226:21
  renamable $d0 = LDURDi $fp, -176, debug-location !357 :: (dereferenceable load 8 from %ir.gc); ep.c:226:14
  renamable $d1 = LDRDroX renamable $x20, renamable $x8, 0, 1, debug-location !360 :: (load 8 from %ir.arrayidx124); ep.c:226:19
  renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit killed $x8, debug-location !363; ep.c:225:26
  renamable $d0 = FADDDrr killed renamable $d0, killed renamable $d1, debug-location !361; ep.c:226:17
  STURDi killed renamable $d0, $fp, -176, debug-location !362 :: (store 8 into %ir.gc); ep.c:226:12
  STRWui killed renamable $w8, $sp, 42, debug-location !363 :: (store 4 into %ir.i); ep.c:225:26
  B %bb.41

bb.43.do.end130:
; predecessors: %bb.41
  successors: %bb.44(0x50000000), %bb.45(0x30000000); %bb.44(62.50%), %bb.45(37.50%)
  liveins: $x20
  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !367; ep.c:231:5
  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !367; ep.c:231:5
  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !368; ep.c:232:10
  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !368; ep.c:232:10
  STURDi killed renamable $d0, $fp, -152, debug-location !369 :: (store 8 into %ir.tm); ep.c:232:8
  STRWui $wzr, $sp, 37, debug-location !370 :: (store 4 into %ir.nit); ep.c:234:9
  $w8 = MOVZWi 1, 0
  $x9 = MOVZXi 40811, 0
  $x9 = MOVKXi $x9(tied-def 0), 63804, 16
  $x9 = MOVKXi $x9(tied-def 0), 45636, 32
  $x9 = MOVKXi $x9(tied-def 0), 16611, 48
  $x10 = MOVZXi 50165, 0
  $x10 = MOVKXi $x10(tied-def 0), 18572, 16
  $x10 = MOVKXi $x10(tied-def 0), 64428, 32
  $x10 = MOVKXi $x10(tied-def 0), 49369, 48
  STRWui renamable $w8, $sp, 34, debug-location !371 :: (store 4 into %ir.verified); ep.c:235:14
  STURXi killed renamable $x9, $fp, -184, debug-location !372 :: (store 8 into %ir.sx_verify_value); ep.c:249:25
  STRXui killed renamable $x10, $sp, 24, debug-location !378 :: (store 8 into %ir.sy_verify_value); ep.c:250:25
  CBZW killed renamable $w8, %bb.45, debug-location !381; ep.c:268:9

bb.44.if.then133:
; predecessors: %bb.43
  successors: %bb.45(0x80000000); %bb.45(100.00%)
  liveins: $x20
  renamable $d2, renamable $d0 = LDPDi $fp, -18, debug-location !382 :: (dereferenceable load 8 from %ir.sx), (dereferenceable load 8 from %ir.sy); ep.c:269:24
  renamable $d1 = LDURDi $fp, -184, debug-location !384 :: (dereferenceable load 8 from %ir.sx_verify_value); ep.c:269:29
  renamable $d3 = LDRDui $sp, 24, debug-location !391 :: (dereferenceable load 8 from %ir.sy_verify_value); ep.c:270:29
  renamable $d0 = FSUBDrr killed renamable $d0, renamable $d1, debug-location !385; ep.c:269:27
  renamable $d0 = FDIVDrr killed renamable $d0, killed renamable $d1, debug-location !387; ep.c:269:46
  renamable $x8 = ADRP target-flags(aarch64-page) %const.1
  renamable $d1 = FSUBDrr killed renamable $d2, renamable $d3, debug-location !392; ep.c:270:27
  renamable $d1 = FDIVDrr killed renamable $d1, killed renamable $d3, debug-location !394; ep.c:270:46
  renamable $d2 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  renamable $d0 = FABSDr killed renamable $d0, debug-location !388; ep.c:269:18
  renamable $d1 = FABSDr killed renamable $d1, debug-location !395; ep.c:270:18
  STPDi renamable $d1, renamable $d0, $sp, 22, debug-location !389 :: (store 8 into %ir.sx_err), (store 8 into %ir.sy_err); ep.c:269:16
  FCMPDrr killed renamable $d0, renamable $d2, implicit-def $nzcv, debug-location !398; ep.c:271:29
  renamable $w8 = CSINCWr $wzr, $wzr, 8, implicit $nzcv, debug-location !398; ep.c:271:29
  FCMPDrr killed renamable $d1, killed renamable $d2, implicit-def $nzcv, debug-location !399; ep.c:271:41
  renamable $w9 = CSINCWr $wzr, $wzr, 8, implicit $nzcv, debug-location !399; ep.c:271:41
  $w8 = ANDWrs killed renamable $w8, killed renamable $w9, 0, debug-location !399; ep.c:271:41
  STRWui killed renamable $w8, $sp, 34, debug-location !400 :: (store 4 into %ir.verified); ep.c:271:18

bb.45.if.end142:
; predecessors: %bb.43, %bb.44
  successors: %bb.46(0x80000000); %bb.46(100.00%)
  liveins: $x20
  renamable $d0 = FMOVDi 0
  renamable $d1 = FMOVDi 63
  BL @pow, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $d1, implicit-def $sp, implicit-def $d0, debug-location !402; ep.c:274:12
  renamable $d1 = LDURDi $fp, -152, debug-location !403 :: (dereferenceable load 8 from %ir.tm); ep.c:274:30
  $x8 = MOVZXi 33920, 32
  $x8 = MOVKXi $x8(tied-def 0), 16686, 48
  renamable $d0 = FDIVDrr killed renamable $d0, killed renamable $d1, debug-location !404; ep.c:274:28
  $d1 = FMOVXDr killed $x8
  renamable $d0 = FDIVDrr killed renamable $d0, killed renamable $d1, debug-location !405; ep.c:274:33
  STURDi killed renamable $d0, $fp, -80, debug-location !406 :: (store 8 into %ir.Mops); ep.c:274:10
  $x0 = ADRP target-flags(aarch64-page) @.str.5, debug-location !407; ep.c:276:5
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.5, 0, debug-location !407; ep.c:276:5
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !407; ep.c:276:5
  renamable $d0 = LDURDi $fp, -152, debug-location !408 :: (dereferenceable load 8 from %ir.tm); ep.c:277:35
  $x0 = ADRP target-flags(aarch64-page) @.str.6, debug-location !409; ep.c:277:5
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.6, 0, debug-location !409; ep.c:277:5
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !409; ep.c:277:5
  $x0 = ADRP target-flags(aarch64-page) @.str.7, debug-location !410; ep.c:278:5
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.7, 0, debug-location !410; ep.c:278:5
  $w1 = MOVZWi 30, 0, debug-location !410; ep.c:278:5
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !410; ep.c:278:5
  renamable $d0 = LDURDi $fp, -176, debug-location !411 :: (dereferenceable load 8 from %ir.gc); ep.c:279:46
  $x0 = ADRP target-flags(aarch64-page) @.str.8, debug-location !412; ep.c:279:5
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.8, 0, debug-location !412; ep.c:279:5
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !412; ep.c:279:5
  renamable $d1, renamable $d0 = LDPDi $fp, -18, debug-location !413 :: (dereferenceable load 8 from %ir.sx), (dereferenceable load 8 from %ir.sy); ep.c:280:42
  $x0 = ADRP target-flags(aarch64-page) @.str.9, debug-location !415; ep.c:280:5
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.9, 0, debug-location !415; ep.c:280:5
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w0, debug-location !415; ep.c:280:5
  $x0 = ADRP target-flags(aarch64-page) @.str.10, debug-location !416; ep.c:281:5
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.10, 0, debug-location !416; ep.c:281:5
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !416; ep.c:281:5
  STRWui $wzr, $sp, 42, debug-location !417 :: (store 4 into %ir.i); ep.c:282:12
  $x19 = ADRP target-flags(aarch64-page) @.str.11
  renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str.11, 0

bb.46.for.cond152:
; predecessors: %bb.45, %bb.47
  successors: %bb.47(0x7c000000), %bb.48(0x04000000); %bb.47(96.88%), %bb.48(3.12%)
  liveins: $x19, $x20
  renamable $w8 = LDRWui $sp, 42, debug-location !420 :: (dereferenceable load 4 from %ir.i); ep.c:282:17
  dead $wzr = SUBSWri killed renamable $w8, 9, 0, implicit-def $nzcv, debug-location !423; ep.c:282:5
  Bcc 12, %bb.48, implicit $nzcv, debug-location !423; ep.c:282:5

bb.47.for.body155:
; predecessors: %bb.46
  successors: %bb.46(0x80000000); %bb.46(100.00%)
  liveins: $x19, $x20
  renamable $x1 = LDRSWui $sp, 42, debug-location !424 :: (dereferenceable load 4 from %ir.i); ep.c:283:32
  renamable $d0 = LDRDroX renamable $x20, renamable $x1, 0, 1, debug-location !427 :: (load 8 from %ir.arrayidx157); ep.c:283:35
  $x0 = ORRXrs $xzr, $x19, 0, debug-location !428; ep.c:283:9
  $w1 = KILL renamable $w1, implicit killed $x1, debug-location !428; ep.c:283:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !428; ep.c:283:9
  renamable $w8 = LDRWui $sp, 42, debug-location !429 :: (dereferenceable load 4 from %ir.i); ep.c:282:26
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !429; ep.c:282:26
  STRWui killed renamable $w8, $sp, 42, debug-location !429 :: (store 4 into %ir.i); ep.c:282:26
  B %bb.46

bb.48.for.end161:
; predecessors: %bb.46
  successors: %bb.49(0x50000000), %bb.52(0x30000000); %bb.49(62.50%), %bb.52(37.50%)

  renamable $w5 = LDRWui $sp, 37, debug-location !433 :: (dereferenceable load 4 from %ir.nit); ep.c:286:45
  renamable $d0 = LDURDi $fp, -152, debug-location !434 :: (dereferenceable load 8 from %ir.tm); ep.c:286:50
  renamable $d1 = LDURDi $fp, -80, debug-location !435 :: (dereferenceable load 8 from %ir.Mops); ep.c:286:54
  renamable $w7 = LDRWui $sp, 34, debug-location !436 :: (dereferenceable load 4 from %ir.verified); ep.c:287:47
  $x8 = ADRP target-flags(aarch64-page) @.str.22, debug-location !437; ep.c:286:5
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.22, 0, debug-location !437; ep.c:286:5
  $x9 = ADRP target-flags(aarch64-page) @.str.21, debug-location !437; ep.c:286:5
  renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.21, 0, debug-location !437; ep.c:286:5
  $x10 = ADRP target-flags(aarch64-page) @.str.20, debug-location !437; ep.c:286:5
  renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.20, 0, debug-location !437; ep.c:286:5
  $x11 = ADRP target-flags(aarch64-page) @.str.19, debug-location !437; ep.c:286:5
  renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @.str.19, 0, debug-location !437; ep.c:286:5
  $x12 = ADRP target-flags(aarch64-page) @.str.18, debug-location !437; ep.c:286:5
  renamable $x12 = ADDXri $x12, target-flags(aarch64-pageoff, aarch64-nc) @.str.18, 0, debug-location !437; ep.c:286:5
  $x13 = ADRP target-flags(aarch64-page) @.str.17, debug-location !437; ep.c:286:5
  renamable $x13 = ADDXri $x13, target-flags(aarch64-pageoff, aarch64-nc) @.str.17, 0, debug-location !437; ep.c:286:5
  $x14 = ADRP target-flags(aarch64-page) @.str.16, debug-location !437; ep.c:286:5
  renamable $x14 = ADDXri $x14, target-flags(aarch64-pageoff, aarch64-nc) @.str.16, 0, debug-location !437; ep.c:286:5
  $x15 = ADRP target-flags(aarch64-page) @.str.15, debug-location !437; ep.c:286:5
  renamable $x15 = ADDXri $x15, target-flags(aarch64-pageoff, aarch64-nc) @.str.15, 0, debug-location !437; ep.c:286:5
  STPXi renamable $x9, renamable $x8, $sp, 7, debug-location !437 :: (store 8 into stack + 64), (store 8 into stack + 56); ep.c:286:5
  $x8 = ADRP target-flags(aarch64-page) @.str.14, debug-location !437; ep.c:286:5
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.14, 0, debug-location !437; ep.c:286:5
  STPXi renamable $x11, renamable $x10, $sp, 5, debug-location !437 :: (store 8 into stack + 48), (store 8 into stack + 40); ep.c:286:5
  $x0 = ADRP target-flags(aarch64-page) @.str.12, debug-location !437; ep.c:286:5
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.12, 0, debug-location !437; ep.c:286:5
  STPXi renamable $x13, renamable $x12, $sp, 3, debug-location !437 :: (store 8 into stack + 32), (store 8 into stack + 24); ep.c:286:5
  $x6 = ADRP target-flags(aarch64-page) @.str.13, debug-location !437; ep.c:286:5
  renamable $x6 = ADDXri $x6, target-flags(aarch64-pageoff, aarch64-nc) @.str.13, 0, debug-location !437; ep.c:286:5
  STPXi renamable $x15, renamable $x14, $sp, 1, debug-location !437 :: (store 8 into stack + 16), (store 8 into stack + 8); ep.c:286:5
  STRXui killed renamable $x8, $sp, 0, debug-location !437 :: (store 8 into stack); ep.c:286:5
  $w1 = MOVZWi 66, 0, debug-location !437; ep.c:286:5
  $w2 = MOVZWi 31, 0, debug-location !437; ep.c:286:5
  $w3 = ORRWrs $wzr, $wzr, 0, debug-location !437; ep.c:286:5
  $w4 = ORRWrs $wzr, $wzr, 0, debug-location !437; ep.c:286:5
  BL @print_results, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit $w4, implicit $w5, implicit $d0, implicit $d1, implicit $x6, implicit $w7, implicit-def $sp, debug-location !437; ep.c:286:5
  renamable $w8 = LDRWui $sp, 33, debug-location !438 :: (dereferenceable load 4 from %ir.timers_enabled); ep.c:290:9
  CBZW killed renamable $w8, %bb.52, debug-location !440; ep.c:290:9

bb.49.if.then163:
; predecessors: %bb.48
  successors: %bb.50(0x40000000), %bb.51(0x40000000); %bb.50(50.00%), %bb.51(50.00%)

  renamable $d0 = LDURDi $fp, -152, debug-location !441 :: (dereferenceable load 8 from %ir.tm); ep.c:291:13
  FCMPDri killed renamable $d0, implicit-def $nzcv, debug-location !445; ep.c:291:13
  Bcc 8, %bb.51, implicit $nzcv, debug-location !445; ep.c:291:13

bb.50.if.then166:
; predecessors: %bb.49
  successors: %bb.51(0x80000000); %bb.51(100.00%)

  $x8 = MOVZXi 16368, 48
  STURXi killed renamable $x8, $fp, -152, debug-location !446 :: (store 8 into %ir.tm); ep.c:292:16

bb.51.if.end167:
; predecessors: %bb.49, %bb.50
  successors: %bb.52(0x80000000); %bb.52(100.00%)

  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !448; ep.c:293:14
  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !448; ep.c:293:14
  renamable $d1 = LDURDi $fp, -152, debug-location !453 :: (dereferenceable load 8 from %ir.tm); ep.c:294:72
  $x8 = MOVZXi 16473, 48
  STURDi renamable $d0, $fp, -168, debug-location !449 :: (store 8 into %ir.tt); ep.c:293:12
  $d8 = FMOVXDr killed $x8
  renamable $d2 = FMULDrr renamable $d0, renamable $d8, debug-location !452; ep.c:294:62
  renamable $d1 = FDIVDrr killed renamable $d2, killed renamable $d1, debug-location !454; ep.c:294:70
  $x0 = ADRP target-flags(aarch64-page) @.str.23, debug-location !455; ep.c:294:9
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.23, 0, debug-location !455; ep.c:294:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w0, debug-location !455; ep.c:294:9
  $w0 = MOVZWi 1, 0, debug-location !456; ep.c:295:14
  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !456; ep.c:295:14
  renamable $d1 = LDURDi $fp, -152, debug-location !461 :: (dereferenceable load 8 from %ir.tm); ep.c:296:70
  STURDi renamable $d0, $fp, -168, debug-location !457 :: (store 8 into %ir.tt); ep.c:295:12
  renamable $d2 = FMULDrr renamable $d0, renamable $d8, debug-location !460; ep.c:296:60
  renamable $d1 = FDIVDrr killed renamable $d2, killed renamable $d1, debug-location !462; ep.c:296:68
  $x0 = ADRP target-flags(aarch64-page) @.str.24, debug-location !463; ep.c:296:9
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.24, 0, debug-location !463; ep.c:296:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w0, debug-location !463; ep.c:296:9
  $w0 = MOVZWi 2, 0, debug-location !464; ep.c:297:14
  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !464; ep.c:297:14
  renamable $d1 = LDURDi $fp, -152, debug-location !469 :: (dereferenceable load 8 from %ir.tm); ep.c:298:70
  STURDi renamable $d0, $fp, -168, debug-location !465 :: (store 8 into %ir.tt); ep.c:297:12
  renamable $d2 = FMULDrr renamable $d0, killed renamable $d8, debug-location !468; ep.c:298:60
  renamable $d1 = FDIVDrr killed renamable $d2, killed renamable $d1, debug-location !470; ep.c:298:68
  $x0 = ADRP target-flags(aarch64-page) @.str.25, debug-location !471; ep.c:298:9
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.25, 0, debug-location !471; ep.c:298:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w0, debug-location !471; ep.c:298:9

bb.52.if.end180:
; predecessors: %bb.48, %bb.51

  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !473; ep.c:301:5
  $fp, $lr = frame-destroy LDPXi $sp, 48, debug-location !473 :: (load 8 from %stack.33), (load 8 from %stack.32); ep.c:301:5
  $x20, $x19 = frame-destroy LDPXi $sp, 46, debug-location !473 :: (load 8 from %stack.35), (load 8 from %stack.34); ep.c:301:5
  $x22, $x21 = frame-destroy LDPXi $sp, 44, debug-location !473 :: (load 8 from %stack.37), (load 8 from %stack.36); ep.c:301:5
  $x28 = frame-destroy LDRXui $sp, 43, debug-location !473 :: (load 8 from %stack.38); ep.c:301:5
  $d9, $d8 = frame-destroy LDPDi $sp, 41, debug-location !473 :: (load 8 from %stack.40), (load 8 from %stack.39); ep.c:301:5
  $d10 = frame-destroy LDRDui $sp, 40, debug-location !473 :: (load 8 from %stack.41); ep.c:301:5
  $sp = frame-destroy ADDXri $sp, 400, 0, debug-location !473; ep.c:301:5
  RET undef $lr, implicit $w0, debug-location !473; ep.c:301:5

# End machine code for function main.

********** MI Scheduling **********
main:%bb.0 entry
  From: $x8 = ADRP target-flags(aarch64-page) @__const.main.dum, debug-location !93; ep.c:82:12
    To: BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0, debug-location !106; ep.c:87:15
 RegionInstrs: 11
ScheduleDAGMI::schedule starting
SU(0):   $x8 = ADRP target-flags(aarch64-page) @__const.main.dum, debug-location !93; ep.c:82:12
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.dum, 0, debug-location !93; ep.c:82:12
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x8
    SU(2): Data Latency=1 Reg=$x8
SU(2):   renamable $q0 = LDRQui renamable $x8, 0, debug-location !93 :: (dereferenceable load 16 from `i8* bitcast ([3 x double]* @__const.main.dum to i8*)`); ep.c:82:12
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 2
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    SU(5): Data Latency=4 Reg=$q0
    SU(3): Anti Latency=0
SU(3):   renamable $x8 = LDRXui renamable $x8, 2, debug-location !93 :: (dereferenceable load 8 from `i8* bitcast ([3 x double]* @__const.main.dum to i8*)` + 16, align 16); ep.c:82:12
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 2
  Height             : 4
  Predecessors:
    SU(2): Anti Latency=0
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    SU(6): Data Latency=4 Reg=$x8
SU(4):   STURWi $wzr, $fp, -68 :: (store 4 into %ir.retval)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(5):   STRQui renamable $q0, $sp, 6, debug-location !93 :: (store 16 into %ir.0); ep.c:82:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=$q0
SU(6):   STRXui renamable $x8, $sp, 14, debug-location !93 :: (store 8 into %ir.0 + 16, align 16); ep.c:82:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(3): Data Latency=4 Reg=$x8
SU(7):   $x0 = ADRP target-flags(aarch64-page) @.str, debug-location !106; ep.c:87:15
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x0
SU(8):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str, 0, debug-location !106; ep.c:87:15
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(9):   $x1 = ADRP target-flags(aarch64-page) @.str.1, debug-location !106; ep.c:87:15
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x1
SU(10):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1, 0, debug-location !106; ep.c:87:15
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0, debug-location !106; ep.c:87:15
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(10): Ord  Latency=1 Artificial
    SU(8): Ord  Latency=1 Artificial
Disabled scoreboard hazard recognizer
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 4 7 9 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $x8 = ADRP target-flags(aarch64-page) @__const.main.dum, debug-location !93; ep.c:82:12
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 4 7 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(9) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(1) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.dum, 0, debug-location !93; ep.c:82:12
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 4 7 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 6
  Cand SU(9) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(2) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $q0 = LDRQui renamable $x8, 0, debug-location !93 :: (dereferenceable load 16 from `i8* bitcast ([3 x double]* @__const.main.dum to i8*)`); ep.c:82:12
  Ready @2c
  TopQ.A TopLatency SU(2) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 9 4 7 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 6
  Cand SU(9) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(3) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $x8 = LDRXui renamable $x8, 2, debug-location !93 :: (dereferenceable load 8 from `i8* bitcast ([3 x double]* @__const.main.dum to i8*)` + 16, align 16); ep.c:82:12
  Ready @3c
  TopQ.A BotLatency SU(3) 4c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 6 
Queue TopQ.A: 9 4 7 
  TopQ.A RemainingLatency 0 + 4c > CritPath 6
  Cand SU(9) ORDER                              
  Cand SU(7) ORDER                              
Pick Top ORDER     
Scheduling SU(7) $x0 = ADRP target-flags(aarch64-page) @.str, debug-location !106; ep.c:87:15
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 6 
Queue TopQ.A: 9 4 8 
  TopQ.A RemainingLatency 0 + 5c > CritPath 6
  Cand SU(9) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(9) $x1 = ADRP target-flags(aarch64-page) @.str.1, debug-location !106; ep.c:87:15
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 8 4 10 5 
  TopQ.A RemainingLatency 0 + 6c > CritPath 6
  Cand SU(8) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(8) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str, 0, debug-location !106; ep.c:87:15
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 10 6 
  TopQ.A RemainingLatency 0 + 7c > CritPath 6
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(10) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(10) renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1, 0, debug-location !106; ep.c:87:15
  Ready @7c
  TopQ.A BotLatency SU(10) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 6 
  TopQ.A RemainingLatency 0 + 8c > CritPath 6
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) STURWi $wzr, $fp, -68 :: (store 4 into %ir.retval)
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 6 
  TopQ.A RemainingLatency 0 + 9c > CritPath 6
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) STRQui renamable $q0, $sp, 6, debug-location !93 :: (store 16 into %ir.0); ep.c:82:12
  Ready @9c
  TopQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) STRXui renamable $x8, $sp, 14, debug-location !93 :: (store 8 into %ir.0 + 16, align 16); ep.c:82:12
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   $x8 = ADRP target-flags(aarch64-page) @__const.main.dum, debug-location !93; ep.c:82:12
SU(1):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.dum, 0, debug-location !93; ep.c:82:12
SU(2):   renamable $q0 = LDRQui renamable $x8, 0, debug-location !93 :: (dereferenceable load 16 from `i8* bitcast ([3 x double]* @__const.main.dum to i8*)`); ep.c:82:12
SU(3):   renamable $x8 = LDRXui renamable $x8, 2, debug-location !93 :: (dereferenceable load 8 from `i8* bitcast ([3 x double]* @__const.main.dum to i8*)` + 16, align 16); ep.c:82:12
SU(7):   $x0 = ADRP target-flags(aarch64-page) @.str, debug-location !106; ep.c:87:15
SU(9):   $x1 = ADRP target-flags(aarch64-page) @.str.1, debug-location !106; ep.c:87:15
SU(8):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str, 0, debug-location !106; ep.c:87:15
SU(10):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1, 0, debug-location !106; ep.c:87:15
SU(4):   STURWi $wzr, $fp, -68 :: (store 4 into %ir.retval)
SU(5):   STRQui renamable $q0, $sp, 6, debug-location !93 :: (store 16 into %ir.0); ep.c:82:12
SU(6):   STRXui renamable $x8, $sp, 14, debug-location !93 :: (store 8 into %ir.0 + 16, align 16); ep.c:82:12

********** MI Scheduling **********
main:%bb.0 entry
  From: frame-setup STRDui killed $d10, $sp, 40 :: (store 8 into %stack.41)
    To: frame-setup CFI_INSTRUCTION def_cfa $w29, 16
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   frame-setup STRDui $d10, $sp, 40 :: (store 8 into %stack.41)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   frame-setup STPDi $d9, $d8, $sp, 41 :: (store 8 into %stack.40), (store 8 into %stack.39)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   frame-setup STRXui $x28, $sp, 43 :: (store 8 into %stack.38)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(3):   frame-setup STPXi $x22, $x21, $sp, 44 :: (store 8 into %stack.37), (store 8 into %stack.36)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(4):   frame-setup STPXi $x20, $x19, $sp, 46 :: (store 8 into %stack.35), (store 8 into %stack.34)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(5):   frame-setup STPXi $fp, $lr, $sp, 48 :: (store 8 into %stack.33), (store 8 into %stack.32)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Successors:
    SU(6): Anti Latency=0
SU(6):   $fp = frame-setup ADDXri $sp, 384, 0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(5): Anti Latency=0
ExitSU:   frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 
  TopQ.A RemainingLatency 0 + 0c > CritPath 0
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) frame-setup STRDui $d10, $sp, 40 :: (store 8 into %stack.41)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 1 2 3 4 
  TopQ.A RemainingLatency 0 + 1c > CritPath 0
  Cand SU(5) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) frame-setup STPDi $d9, $d8, $sp, 41 :: (store 8 into %stack.40), (store 8 into %stack.39)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 2 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 0
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) frame-setup STRXui $x28, $sp, 43 :: (store 8 into %stack.38)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 0
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) frame-setup STPXi $x22, $x21, $sp, 44 :: (store 8 into %stack.37), (store 8 into %stack.36)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 
  TopQ.A RemainingLatency 0 + 4c > CritPath 0
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) frame-setup STPXi $x20, $x19, $sp, 46 :: (store 8 into %stack.35), (store 8 into %stack.34)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) frame-setup STPXi $fp, $lr, $sp, 48 :: (store 8 into %stack.33), (store 8 into %stack.32)
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) $fp = frame-setup ADDXri $sp, 384, 0
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   frame-setup STRDui $d10, $sp, 40 :: (store 8 into %stack.41)
SU(1):   frame-setup STPDi $d9, $d8, $sp, 41 :: (store 8 into %stack.40), (store 8 into %stack.39)
SU(2):   frame-setup STRXui $x28, $sp, 43 :: (store 8 into %stack.38)
SU(3):   frame-setup STPXi $x22, $x21, $sp, 44 :: (store 8 into %stack.37), (store 8 into %stack.36)
SU(4):   frame-setup STPXi $x20, $x19, $sp, 46 :: (store 8 into %stack.35), (store 8 into %stack.34)
SU(5):   frame-setup STPXi $fp, $lr, $sp, 48 :: (store 8 into %stack.33), (store 8 into %stack.32)
SU(6):   $fp = frame-setup ADDXri $sp, 384, 0

Fixup kills for %bb.0
Fixup kills for %bb.1
********** MI Scheduling **********
main:%bb.2 if.else
  From: renamable $x0 = LDRXui $sp, 9, debug-location !116 :: (dereferenceable load 8 from %ir.fp); ep.c:92:16
    To: BL @fclose, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !117; ep.c:92:9
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $x0 = LDRXui $sp, 9, debug-location !116 :: (dereferenceable load 8 from %ir.fp); ep.c:92:16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(1):   $w8 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STRWui renamable $w8, $sp, 33, debug-location !114 :: (store 4 into %ir.timers_enabled); ep.c:91:24
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
ExitSU:   BL @fclose, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !117; ep.c:92:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x0 = LDRXui $sp, 9, debug-location !116 :: (dereferenceable load 8 from %ir.fp); ep.c:92:16
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w8 = MOVZWi 1, 0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w8, $sp, 33, debug-location !114 :: (store 4 into %ir.timers_enabled); ep.c:91:24
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   renamable $x0 = LDRXui $sp, 9, debug-location !116 :: (dereferenceable load 8 from %ir.fp); ep.c:92:16
SU(1):   $w8 = MOVZWi 1, 0
SU(2):   STRWui renamable $w8, $sp, 33, debug-location !114 :: (store 4 into %ir.timers_enabled); ep.c:91:24

Fixup kills for %bb.2
********** MI Scheduling **********
main:%bb.3 if.end
  From: renamable $w8 = LDRSBWui $sp, 94, debug-location !124 :: (load 1 from %ir.arrayidx, align 2); ep.c:104:9
    To: Bcc 1, %bb.5, implicit $nzcv, debug-location !126; ep.c:104:9
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRSBWui $sp, 94, debug-location !124 :: (load 1 from %ir.arrayidx, align 2); ep.c:104:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w8
SU(1):   $w9 = MOVZWi 14, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=$w9
SU(2):   dead $wzr = SUBSWri renamable $w8, 46, 0, implicit-def $nzcv, debug-location !126; ep.c:104:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   STRWui renamable $w9, $sp, 35, debug-location !121 :: (store 4 into %ir.j); ep.c:103:7
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w9
ExitSU:   Bcc 1, %bb.5, implicit $nzcv, debug-location !126; ep.c:104:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w8 = LDRSBWui $sp, 94, debug-location !124 :: (load 1 from %ir.arrayidx, align 2); ep.c:104:9
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w9 = MOVZWi 14, 0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STRWui renamable $w9, $sp, 35, debug-location !121 :: (store 4 into %ir.j); ep.c:103:7
  Ready @2c
  TopQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) dead $wzr = SUBSWri renamable $w8, 46, 0, implicit-def $nzcv, debug-location !126; ep.c:104:9
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   renamable $w8 = LDRSBWui $sp, 94, debug-location !124 :: (load 1 from %ir.arrayidx, align 2); ep.c:104:9
SU(1):   $w9 = MOVZWi 14, 0
SU(3):   STRWui renamable $w9, $sp, 35, debug-location !121 :: (store 4 into %ir.j); ep.c:103:7
SU(2):   dead $wzr = SUBSWri renamable $w8, 46, 0, implicit-def $nzcv, debug-location !126; ep.c:104:9

********** MI Scheduling **********
main:%bb.3 if.end
  From: $x1 = ADRP target-flags(aarch64-page) @.str.2, debug-location !120; ep.c:102:5
    To: BL @sprintf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !120; ep.c:102:5
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   $x1 = ADRP target-flags(aarch64-page) @.str.2, debug-location !120; ep.c:102:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x1
SU(1):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.2, 0, debug-location !120; ep.c:102:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $x0 = ADDXri $sp, 80, 0, debug-location !120; ep.c:102:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $x19 = ADDXri $sp, 80, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
ExitSU:   BL @sprintf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !120; ep.c:102:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $x1 = ADRP target-flags(aarch64-page) @.str.2, debug-location !120; ep.c:102:5
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(3) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.2, 0, debug-location !120; ep.c:102:5
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(3) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x0 = ADDXri $sp, 80, 0, debug-location !120; ep.c:102:5
  Ready @2c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $x19 = ADDXri $sp, 80, 0
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   $x1 = ADRP target-flags(aarch64-page) @.str.2, debug-location !120; ep.c:102:5
SU(1):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.2, 0, debug-location !120; ep.c:102:5
SU(2):   $x0 = ADDXri $sp, 80, 0, debug-location !120; ep.c:102:5
SU(3):   $x19 = ADDXri $sp, 80, 0

********** MI Scheduling **********
main:%bb.3 if.end
  From: renamable $d0 = FMOVDi 0
    To: BL @pow, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $d1, implicit-def $sp, implicit-def $d0, debug-location !119; ep.c:102:30
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = FMOVDi 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(1):   renamable $d1 = FMOVDi 63
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @pow, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $d1, implicit-def $sp, implicit-def $d0, debug-location !119; ep.c:102:30
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $d0 = FMOVDi 0
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $d1 = FMOVDi 63
  Ready @1c
  TopQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   renamable $d0 = FMOVDi 0
SU(1):   renamable $d1 = FMOVDi 63

Fixup kills for %bb.3
********** MI Scheduling **********
main:%bb.4 if.then6
  From: renamable $w8 = LDRWui $sp, 35, debug-location !127 :: (dereferenceable load 4 from %ir.j); ep.c:105:10
    To: End RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 35, debug-location !127 :: (dereferenceable load 4 from %ir.j); ep.c:105:10
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw SUBWri renamable $w8, 1, 0, debug-location !127; ep.c:105:10
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STRWui renamable $w8, $sp, 35, debug-location !127 :: (store 4 into %ir.j); ep.c:105:10
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 35, debug-location !127 :: (dereferenceable load 4 from %ir.j); ep.c:105:10
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw SUBWri renamable $w8, 1, 0, debug-location !127; ep.c:105:10
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w8, $sp, 35, debug-location !127 :: (store 4 into %ir.j); ep.c:105:10
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   renamable $w8 = LDRWui $sp, 35, debug-location !127 :: (dereferenceable load 4 from %ir.j); ep.c:105:10
SU(1):   renamable $w8 = nsw SUBWri renamable $w8, 1, 0, debug-location !127; ep.c:105:10
SU(2):   STRWui renamable $w8, $sp, 35, debug-location !127 :: (store 4 into %ir.j); ep.c:105:10

Fixup kills for %bb.4
********** MI Scheduling **********
main:%bb.5 if.end7
  From: STRDui killed renamable $d0, $sp, 12, debug-location !146 :: (store 8 into %ir.arrayidx195, align 16); ep.c:128:12
    To: End RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   STRDui renamable $d0, $sp, 12, debug-location !146 :: (store 8 into %ir.arrayidx195, align 16); ep.c:128:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   STRWui $wzr, $sp, 42, debug-location !147 :: (store 4 into %ir.i); ep.c:129:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   $x8 = ADRP target-flags(aarch64-page) @x
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x8
SU(3):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @x, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $x9 = MOVZXi 40750, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x9
SU(5):   $x9 = MOVKXi $x9(tied-def 0), 41607, 16
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x9
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x9
SU(6):   $x9 = MOVKXi $x9(tied-def 0), 17070, 32
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x9
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x9
SU(7):   $x9 = MOVKXi $x9(tied-def 0), 54397, 48
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x9
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  2 cycles 
  Cand SU(4) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) $x9 = MOVZXi 40750, 0
  Ready @0c
  TopQ.A BotLatency SU(4) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 5 
  TopQ.A RemainingLatency 0 + 1c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  2 cycles 
  Cand SU(5) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) $x9 = MOVKXi $x9(tied-def 0), 41607, 16
  Ready @1c
  TopQ.A TopLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 6 
  TopQ.A RemainingLatency 0 + 2c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x8 = ADRP target-flags(aarch64-page) @x
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) $x9 = MOVKXi $x9(tied-def 0), 17070, 32
  Ready @3c
  TopQ.A TopLatency SU(6) 2c
  TopQ.A BotLatency SU(6) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 
  TopQ.A RemainingLatency 0 + 4c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(3) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @x, 0
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 7 
  TopQ.A RemainingLatency 0 + 5c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(7) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) $x9 = MOVKXi $x9(tied-def 0), 54397, 48
  Ready @5c
  TopQ.A TopLatency SU(7) 3c
  TopQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 6c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STRDui renamable $d0, $sp, 12, debug-location !146 :: (store 8 into %ir.arrayidx195, align 16); ep.c:128:12
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRWui $wzr, $sp, 42, debug-location !147 :: (store 4 into %ir.i); ep.c:129:12
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.5 ***
SU(4):   $x9 = MOVZXi 40750, 0
SU(5):   $x9 = MOVKXi $x9(tied-def 0), 41607, 16
SU(2):   $x8 = ADRP target-flags(aarch64-page) @x
SU(6):   $x9 = MOVKXi $x9(tied-def 0), 17070, 32
SU(3):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @x, 0
SU(7):   $x9 = MOVKXi $x9(tied-def 0), 54397, 48
SU(0):   STRDui renamable $d0, $sp, 12, debug-location !146 :: (store 8 into %ir.arrayidx195, align 16); ep.c:128:12
SU(1):   STRWui $wzr, $sp, 42, debug-location !147 :: (store 4 into %ir.i); ep.c:129:12

********** MI Scheduling **********
main:%bb.5 if.end7
  From: renamable $d0 = LDRDui $sp, 14, debug-location !143 :: (dereferenceable load 8 from %ir.arrayidx17, align 16); ep.c:128:30
    To: BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !144; ep.c:128:14
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDRDui $sp, 14, debug-location !143 :: (dereferenceable load 8 from %ir.arrayidx17, align 16); ep.c:128:30
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(1):   $x0 = ORRXrs $xzr, $x19, 0, debug-location !144; ep.c:128:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !144; ep.c:128:14
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0 = LDRDui $sp, 14, debug-location !143 :: (dereferenceable load 8 from %ir.arrayidx17, align 16); ep.c:128:30
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ORRXrs $xzr, $x19, 0, debug-location !144; ep.c:128:14
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   renamable $d0 = LDRDui $sp, 14, debug-location !143 :: (dereferenceable load 8 from %ir.arrayidx17, align 16); ep.c:128:30
SU(1):   $x0 = ORRXrs $xzr, $x19, 0, debug-location !144; ep.c:128:14

********** MI Scheduling **********
main:%bb.5 if.end7
  From: STRWui $wzr, $sp, 34, debug-location !136 :: (store 4 into %ir.verified); ep.c:110:14
    To: BL @vranlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit $d0, implicit $x2, implicit-def $sp, debug-location !141; ep.c:127:5
 RegionInstrs: 9
ScheduleDAGMI::schedule starting
SU(0):   STRWui $wzr, $sp, 34, debug-location !136 :: (store 4 into %ir.verified); ep.c:110:14
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $w8 = MOVZWi 16384, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(4): Out  Latency=1
    SU(3): Data Latency=1 Reg=$w8
SU(2):   renamable $d0 = LDRDui $sp, 13, debug-location !139 :: (dereferenceable load 8 from %ir.arrayidx14); ep.c:127:24
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(3):   STRWui renamable $w8, $sp, 43, debug-location !137 :: (store 4 into %ir.np); ep.c:118:8
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
  Successors:
    SU(4): Anti Latency=0
SU(4):   $x8 = ADDXri $sp, 96, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(3): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    SU(6): Data Latency=1 Reg=$x8
    SU(5): Data Latency=1 Reg=$x8
SU(5):   renamable $x19 = ORRXri renamable $x8, 8000, debug-location !139; ep.c:127:24
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=$x8
SU(6):   renamable $x2 = nuw ADDXri renamable $x8, 16, 0, debug-location !140; ep.c:127:33
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(7):   $x1 = ADDXri $sp, 96, 0, debug-location !141; ep.c:127:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(8):   $w0 = ORRWrs $wzr, $wzr, 0, debug-location !141; ep.c:127:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @vranlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit $d0, implicit $x2, implicit-def $sp, debug-location !141; ep.c:127:5
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=1 Artificial
    SU(7): Ord  Latency=1 Artificial
    SU(6): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 7 8 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  3 cycles 
  Cand SU(2) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d0 = LDRDui $sp, 13, debug-location !139 :: (dereferenceable load 8 from %ir.arrayidx14); ep.c:127:24
  Ready @0c
  TopQ.A BotLatency SU(2) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 8 7 
  TopQ.A RemainingLatency 0 + 1c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $w8 = MOVZWi 16384, 0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 7 8 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(7) TOP-PATH                  1 cycles 
  Cand SU(3) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) STRWui renamable $w8, $sp, 43, debug-location !137 :: (store 4 into %ir.np); ep.c:118:8
  Ready @2c
  TopQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 7 8 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(7) TOP-PATH                  1 cycles 
  Cand SU(4) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) $x8 = ADDXri $sp, 96, 0
  Ready @3c
  TopQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 7 8 6 5 
  TopQ.A RemainingLatency 0 + 4c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(7) TOP-PATH                  1 cycles 
  Cand SU(6) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(6) renamable $x2 = nuw ADDXri renamable $x8, 16, 0, debug-location !140; ep.c:127:33
  Ready @4c
  TopQ.A TopLatency SU(6) 2c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 7 8 5 
  TopQ.A RemainingLatency 0 + 5c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(7) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) $x1 = ADDXri $sp, 96, 0, debug-location !141; ep.c:127:5
  Ready @5c
  TopQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 5 8 
  TopQ.A RemainingLatency 0 + 6c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(8) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) $w0 = ORRWrs $wzr, $wzr, 0, debug-location !141; ep.c:127:5
  Ready @6c
  TopQ.A BotLatency SU(8) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 5 
  TopQ.A RemainingLatency 0 + 7c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STRWui $wzr, $sp, 34, debug-location !136 :: (store 4 into %ir.verified); ep.c:110:14
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $x19 = ORRXri renamable $x8, 8000, debug-location !139; ep.c:127:24
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.5 ***
SU(2):   renamable $d0 = LDRDui $sp, 13, debug-location !139 :: (dereferenceable load 8 from %ir.arrayidx14); ep.c:127:24
SU(1):   $w8 = MOVZWi 16384, 0
SU(3):   STRWui renamable $w8, $sp, 43, debug-location !137 :: (store 4 into %ir.np); ep.c:118:8
SU(4):   $x8 = ADDXri $sp, 96, 0
SU(6):   renamable $x2 = nuw ADDXri renamable $x8, 16, 0, debug-location !140; ep.c:127:33
SU(7):   $x1 = ADDXri $sp, 96, 0, debug-location !141; ep.c:127:5
SU(8):   $w0 = ORRWrs $wzr, $wzr, 0, debug-location !141; ep.c:127:5
SU(0):   STRWui $wzr, $sp, 34, debug-location !136 :: (store 4 into %ir.verified); ep.c:110:14
SU(5):   renamable $x19 = ORRXri renamable $x8, 8000, debug-location !139; ep.c:127:24

********** MI Scheduling **********
main:%bb.5 if.end7
  From: $x0 = ADRP target-flags(aarch64-page) @.str.4, debug-location !135; ep.c:108:5
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def dead $w0, debug-location !135; ep.c:108:5
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.4, debug-location !135; ep.c:108:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.4, 0, debug-location !135; ep.c:108:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $x1 = ADDXri $sp, 80, 0, debug-location !135; ep.c:108:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def dead $w0, debug-location !135; ep.c:108:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @.str.4, debug-location !135; ep.c:108:5
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.4, 0, debug-location !135; ep.c:108:5
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $x1 = ADDXri $sp, 80, 0, debug-location !135; ep.c:108:5
  Ready @2c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.4, debug-location !135; ep.c:108:5
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.4, 0, debug-location !135; ep.c:108:5
SU(2):   $x1 = ADDXri $sp, 80, 0, debug-location !135; ep.c:108:5

********** MI Scheduling **********
main:%bb.5 if.end7
  From: renamable $x8 = LDRSWui $sp, 35, debug-location !129 :: (dereferenceable load 4 from %ir.j); ep.c:106:10
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !133; ep.c:107:5
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRSWui $sp, 35, debug-location !129 :: (dereferenceable load 4 from %ir.j); ep.c:106:10
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x8
SU(1):   $x8 = ADDXrs renamable $x8, renamable $x19, 0, debug-location !130; ep.c:106:12
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(2): Data Latency=1 Reg=$x8
SU(2):   STRBBui $wzr, renamable $x8, 1, debug-location !132 :: (store 1 into %ir.arrayidx9); ep.c:106:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
SU(3):   $x0 = ADRP target-flags(aarch64-page) @.str.3, debug-location !133; ep.c:107:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x0
SU(4):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.3, 0, debug-location !133; ep.c:107:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !133; ep.c:107:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDRSWui $sp, 35, debug-location !129 :: (dereferenceable load 4 from %ir.j); ep.c:106:10
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $x0 = ADRP target-flags(aarch64-page) @.str.3, debug-location !133; ep.c:107:5
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.3, 0, debug-location !133; ep.c:107:5
  Ready @2c
  TopQ.A TopLatency SU(4) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x8 = ADDXrs renamable $x8, renamable $x19, 0, debug-location !130; ep.c:106:12
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRBBui $wzr, renamable $x8, 1, debug-location !132 :: (store 1 into %ir.arrayidx9); ep.c:106:17
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   renamable $x8 = LDRSWui $sp, 35, debug-location !129 :: (dereferenceable load 4 from %ir.j); ep.c:106:10
SU(3):   $x0 = ADRP target-flags(aarch64-page) @.str.3, debug-location !133; ep.c:107:5
SU(4):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.3, 0, debug-location !133; ep.c:107:5
SU(1):   $x8 = ADDXrs renamable $x8, renamable $x19, 0, debug-location !130; ep.c:106:12
SU(2):   STRBBui $wzr, renamable $x8, 1, debug-location !132 :: (store 1 into %ir.arrayidx9); ep.c:106:17

Fixup kills for %bb.5
********** MI Scheduling **********
main:%bb.6 for.cond
  From: renamable $w10 = LDRWui $sp, 42, debug-location !150 :: (dereferenceable load 4 from %ir.i); ep.c:129:17
    To: Bcc 10, %bb.8, implicit $nzcv, debug-location !153; ep.c:129:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w10 = LDRWui $sp, 42, debug-location !150 :: (dereferenceable load 4 from %ir.i); ep.c:129:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w10
SU(1):   dead $wzr = SUBSWri renamable $w10, 32, 12, implicit-def $nzcv, debug-location !153; ep.c:129:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w10
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.8, implicit $nzcv, debug-location !153; ep.c:129:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w10 = LDRWui $sp, 42, debug-location !150 :: (dereferenceable load 4 from %ir.i); ep.c:129:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w10, 32, 12, implicit-def $nzcv, debug-location !153; ep.c:129:5
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   renamable $w10 = LDRWui $sp, 42, debug-location !150 :: (dereferenceable load 4 from %ir.i); ep.c:129:17
SU(1):   dead $wzr = SUBSWri renamable $w10, 32, 12, implicit-def $nzcv, debug-location !153; ep.c:129:5

Fixup kills for %bb.6
********** MI Scheduling **********
main:%bb.7 for.body
  From: renamable $x10 = LDRSWui $sp, 42, debug-location !154 :: (dereferenceable load 4 from %ir.i); ep.c:130:11
    To: B %bb.6
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $x10 = LDRSWui $sp, 42, debug-location !154 :: (dereferenceable load 4 from %ir.i); ep.c:130:11
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$w10
    SU(2): Data Latency=0 Reg=$x10
    SU(1): Data Latency=4 Reg=$x10
    SU(3): Ord  Latency=0 Memory
SU(1):   STRXroX renamable $x9, renamable $x8, renamable $x10, 0, 1, debug-location !157 :: (store 8 into %ir.arrayidx23); ep.c:130:14
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$x10
  Successors:
    SU(2): Anti Latency=0
SU(2):   renamable $w10 = nsw ADDWri renamable $w10, 1, 0, implicit $x10, debug-location !158; ep.c:129:30
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w10
    SU(0): Data Latency=0 Reg=$x10
  Successors:
    SU(3): Data Latency=1 Reg=$w10
SU(3):   STRWui renamable $w10, $sp, 42, debug-location !158 :: (store 4 into %ir.i); ep.c:129:30
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=$w10
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.6
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x10 = LDRSWui $sp, 42, debug-location !154 :: (dereferenceable load 4 from %ir.i); ep.c:130:11
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRXroX renamable $x9, renamable $x8, renamable $x10, 0, 1, debug-location !157 :: (store 8 into %ir.arrayidx23); ep.c:130:14
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w10 = nsw ADDWri renamable $w10, 1, 0, implicit $x10, debug-location !158; ep.c:129:30
  Ready @5c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STRWui renamable $w10, $sp, 42, debug-location !158 :: (store 4 into %ir.i); ep.c:129:30
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   renamable $x10 = LDRSWui $sp, 42, debug-location !154 :: (dereferenceable load 4 from %ir.i); ep.c:130:11
SU(1):   STRXroX renamable $x9, renamable $x8, renamable $x10, 0, 1, debug-location !157 :: (store 8 into %ir.arrayidx23); ep.c:130:14
SU(2):   renamable $w10 = nsw ADDWri renamable $w10, 1, 0, implicit $x10, debug-location !158; ep.c:129:30
SU(3):   STRWui renamable $w10, $sp, 42, debug-location !158 :: (store 4 into %ir.i); ep.c:129:30

Fixup kills for %bb.7
********** MI Scheduling **********
main:%bb.8 for.end
  From: renamable $d8 = FMOVDi 112
    To: Bcc 7, %bb.10, implicit $nzcv, debug-location !164; ep.c:132:12
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $d8 = FMOVDi 112
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(1): Data Latency=1 Reg=$d8
SU(1):   renamable $d0 = FSQRTDr renamable $d8, debug-location !163; ep.c:132:16
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(0): Data Latency=1 Reg=$d8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(2): Data Latency=1 Reg=$d0
SU(2):   FCMPDrr renamable $d0, renamable $d0, implicit-def $nzcv, debug-location !164; ep.c:132:12
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=$d0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 7, %bb.10, implicit $nzcv, debug-location !164; ep.c:132:12
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 3
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $d8 = FMOVDi 112
  Ready @0c
  TopQ.A BotLatency SU(0) 3c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $d0 = FSQRTDr renamable $d8, debug-location !163; ep.c:132:16
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) FCMPDrr renamable $d0, renamable $d0, implicit-def $nzcv, debug-location !164; ep.c:132:12
  Ready @2c
  TopQ.A TopLatency SU(2) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   renamable $d8 = FMOVDi 112
SU(1):   renamable $d0 = FSQRTDr renamable $d8, debug-location !163; ep.c:132:16
SU(2):   FCMPDrr renamable $d0, renamable $d0, implicit-def $nzcv, debug-location !164; ep.c:132:12

Fixup kills for %bb.8
Fixup kills for %bb.9
********** MI Scheduling **********
main:%bb.10 for.end.split
  From: STURXi killed renamable $x20, $fp, -88, debug-location !172 :: (store 8 into %ir.t1); ep.c:148:8
    To: End RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   STURXi renamable $x20, $fp, -88, debug-location !172 :: (store 8 into %ir.t1); ep.c:148:8
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   STRWui $wzr, $sp, 42, debug-location !173 :: (store 4 into %ir.i); ep.c:150:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 0
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STURXi renamable $x20, $fp, -88, debug-location !172 :: (store 8 into %ir.t1); ep.c:148:8
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRWui $wzr, $sp, 42, debug-location !173 :: (store 4 into %ir.i); ep.c:150:12
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   STURXi renamable $x20, $fp, -88, debug-location !172 :: (store 8 into %ir.t1); ep.c:148:8
SU(1):   STRWui $wzr, $sp, 42, debug-location !173 :: (store 4 into %ir.i); ep.c:150:12

********** MI Scheduling **********
main:%bb.10 for.end.split
  From: $x20 = MOVZXi 58688, 16
    To: BL @vranlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit $d0, implicit $x2, implicit-def $sp, debug-location !171; ep.c:142:5
 RegionInstrs: 12
ScheduleDAGMI::schedule starting
SU(0):   $x20 = MOVZXi 58688, 16
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x20
SU(1):   $x20 = MOVKXi $x20(tied-def 0), 12444, 32
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x20
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x20
SU(2):   $x20 = MOVKXi $x20(tied-def 0), 16850, 48
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x20
  Successors:
    SU(3): Data Latency=1 Reg=$x20
SU(3):   STURXi renamable $x20, $fp, -88, debug-location !170 :: (store 8 into %ir.t1); ep.c:141:8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=$x20
SU(4):   renamable $x8 = ADRP target-flags(aarch64-page) %const.0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(5): Data Latency=1 Reg=$x8
SU(5):   renamable $d9 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(4): Data Latency=1 Reg=$x8
  Successors:
    SU(10): Data Latency=4 Reg=$q9
SU(6):   $x19 = ADRP target-flags(aarch64-page) @x, debug-location !171; ep.c:142:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x19
SU(7):   renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @x, 0, debug-location !171; ep.c:142:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x19
  Successors:
    SU(11): Data Latency=1 Reg=$x19
SU(8):   $x1 = SUBXri $fp, 88, 0, debug-location !171; ep.c:142:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(9):   $w0 = ORRWrs $wzr, $wzr, 0, debug-location !171; ep.c:142:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(10):   $q0 = ORRv16i8 $q9, $q9, debug-location !171; ep.c:142:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(5): Data Latency=4 Reg=$q9
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(11):   $x2 = ORRXrs $xzr, $x19, 0, debug-location !171; ep.c:142:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(7): Data Latency=1 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @vranlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit $d0, implicit $x2, implicit-def $sp, debug-location !171; ep.c:142:5
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(11): Ord  Latency=1 Artificial
    SU(10): Ord  Latency=1 Artificial
    SU(9): Ord  Latency=1 Artificial
    SU(8): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 4 6 8 9 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(4) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $x8 = ADRP target-flags(aarch64-page) %const.0
  Ready @0c
  TopQ.A BotLatency SU(4) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 9 6 8 5 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(5) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $d9 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  Ready @1c
  TopQ.A TopLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 10 
Queue TopQ.A: 0 9 6 8 
  TopQ.A RemainingLatency 0 + 2c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $x20 = MOVZXi 58688, 16
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 10 
Queue TopQ.A: 8 9 6 1 
  TopQ.A RemainingLatency 0 + 3c > CritPath 6
  Cand SU(8) ORDER                              
  Cand SU(6) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) $x19 = ADRP target-flags(aarch64-page) @x, debug-location !171; ep.c:142:5
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 10 
Queue TopQ.A: 8 9 1 7 
  TopQ.A RemainingLatency 0 + 4c > CritPath 6
  Cand SU(8) ORDER                              
  Cand SU(1) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $x20 = MOVKXi $x20(tied-def 0), 12444, 32
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 9 7 2 10 
  TopQ.A RemainingLatency 0 + 5c > CritPath 6
  Cand SU(8) ORDER                              
  Cand SU(7) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @x, 0, debug-location !171; ep.c:142:5
  Ready @5c
  TopQ.A BotLatency SU(7) 2c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 9 10 2 11 
  TopQ.A RemainingLatency 0 + 6c > CritPath 6
  Cand SU(8) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) $x20 = MOVKXi $x20(tied-def 0), 16850, 48
  Ready @6c
  TopQ.A TopLatency SU(2) 2c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 9 10 11 3 
  TopQ.A RemainingLatency 0 + 7c > CritPath 6
  Cand SU(8) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(8) $x1 = SUBXri $fp, 88, 0, debug-location !171; ep.c:142:5
  Ready @7c
  TopQ.A BotLatency SU(8) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 9 10 11 
  TopQ.A RemainingLatency 0 + 8c > CritPath 6
  Cand SU(3) ORDER                              
  Cand SU(9) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(9) $w0 = ORRWrs $wzr, $wzr, 0, debug-location !171; ep.c:142:5
  Ready @8c
  TopQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 11 10 
  TopQ.A RemainingLatency 0 + 9c > CritPath 6
  Cand SU(3) ORDER                              
  Cand SU(11) TOP-PATH                  1 cycles 
  Cand SU(10) ORDER                              
Pick Top ORDER     
Scheduling SU(10) $q0 = ORRv16i8 $q9, $q9, debug-location !171; ep.c:142:5
  Ready @9c
  TopQ.A TopLatency SU(10) 5c
  TopQ.A BotLatency SU(10) 1c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 11 
  TopQ.A RemainingLatency 0 + 10c > CritPath 6
  Cand SU(3) ORDER                              
  Cand SU(11) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(11) $x2 = ORRXrs $xzr, $x19, 0, debug-location !171; ep.c:142:5
  Ready @10c
  TopQ.A BotLatency SU(11) 1c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STURXi renamable $x20, $fp, -88, debug-location !170 :: (store 8 into %ir.t1); ep.c:141:8
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.10 ***
SU(4):   renamable $x8 = ADRP target-flags(aarch64-page) %const.0
SU(5):   renamable $d9 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
SU(0):   $x20 = MOVZXi 58688, 16
SU(6):   $x19 = ADRP target-flags(aarch64-page) @x, debug-location !171; ep.c:142:5
SU(1):   $x20 = MOVKXi $x20(tied-def 0), 12444, 32
SU(7):   renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @x, 0, debug-location !171; ep.c:142:5
SU(2):   $x20 = MOVKXi $x20(tied-def 0), 16850, 48
SU(8):   $x1 = SUBXri $fp, 88, 0, debug-location !171; ep.c:142:5
SU(9):   $w0 = ORRWrs $wzr, $wzr, 0, debug-location !171; ep.c:142:5
SU(10):   $q0 = ORRv16i8 $q9, $q9, debug-location !171; ep.c:142:5
SU(11):   $x2 = ORRXrs $xzr, $x19, 0, debug-location !171; ep.c:142:5
SU(3):   STURXi renamable $x20, $fp, -88, debug-location !170 :: (store 8 into %ir.t1); ep.c:141:8

********** MI Scheduling **********
main:%bb.10 for.end.split
  From: STURDi killed renamable $d0, $fp, -80, debug-location !165 :: (store 8 into %ir.Mops); ep.c:132:10
    To: BL @timer_clear, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !166; ep.c:134:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   STURDi renamable $d0, $fp, -80, debug-location !165 :: (store 8 into %ir.Mops); ep.c:132:10
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $w0 = ORRWrs $wzr, $wzr, 0, debug-location !166; ep.c:134:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @timer_clear, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !166; ep.c:134:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $w0 = ORRWrs $wzr, $wzr, 0, debug-location !166; ep.c:134:5
  Ready @0c
  TopQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURDi renamable $d0, $fp, -80, debug-location !165 :: (store 8 into %ir.Mops); ep.c:132:10
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.10 ***
SU(1):   $w0 = ORRWrs $wzr, $wzr, 0, debug-location !166; ep.c:134:5
SU(0):   STURDi renamable $d0, $fp, -80, debug-location !165 :: (store 8 into %ir.Mops); ep.c:132:10

Fixup kills for %bb.10
********** MI Scheduling **********
main:%bb.11 for.cond26
  From: renamable $w8 = LDRWui $sp, 42, debug-location !176 :: (dereferenceable load 4 from %ir.i); ep.c:150:17
    To: Bcc 12, %bb.13, implicit $nzcv, debug-location !180; ep.c:150:5
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 42, debug-location !176 :: (dereferenceable load 4 from %ir.i); ep.c:150:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w8
SU(1):   renamable $d0 = LDURDi $fp, -88, debug-location !179 :: (dereferenceable load 8 from %ir.t1); ep.c:0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(2):   dead $wzr = SUBSWri renamable $w8, 16, 0, implicit-def $nzcv, debug-location !180; ep.c:150:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.13, implicit $nzcv, debug-location !180; ep.c:150:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w8 = LDRWui $sp, 42, debug-location !176 :: (dereferenceable load 4 from %ir.i); ep.c:150:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $d0 = LDURDi $fp, -88, debug-location !179 :: (dereferenceable load 8 from %ir.t1); ep.c:0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) dead $wzr = SUBSWri renamable $w8, 16, 0, implicit-def $nzcv, debug-location !180; ep.c:150:5
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   renamable $w8 = LDRWui $sp, 42, debug-location !176 :: (dereferenceable load 4 from %ir.i); ep.c:150:17
SU(1):   renamable $d0 = LDURDi $fp, -88, debug-location !179 :: (dereferenceable load 8 from %ir.t1); ep.c:0
SU(2):   dead $wzr = SUBSWri renamable $w8, 16, 0, implicit-def $nzcv, debug-location !180; ep.c:150:5

Fixup kills for %bb.11
********** MI Scheduling **********
main:%bb.12 for.body29
  From: renamable $w8 = LDRWui $sp, 42, debug-location !184 :: (dereferenceable load 4 from %ir.i); ep.c:150:30
    To: B %bb.11
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 42, debug-location !184 :: (dereferenceable load 4 from %ir.i); ep.c:150:30
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$w8
    SU(3): Ord  Latency=0 Memory
SU(1):   STURDi renamable $d0, $fp, -96, debug-location !183 :: (store 8 into %ir.t2); ep.c:151:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !184; ep.c:150:30
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(3): Data Latency=1 Reg=$w8
SU(3):   STRWui renamable $w8, $sp, 42, debug-location !184 :: (store 4 into %ir.i); ep.c:150:30
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.11
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w8 = LDRWui $sp, 42, debug-location !184 :: (dereferenceable load 4 from %ir.i); ep.c:150:30
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STURDi renamable $d0, $fp, -96, debug-location !183 :: (store 8 into %ir.t2); ep.c:151:12
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !184; ep.c:150:30
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STRWui renamable $w8, $sp, 42, debug-location !184 :: (store 4 into %ir.i); ep.c:150:30
  Ready @5c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   renamable $w8 = LDRWui $sp, 42, debug-location !184 :: (dereferenceable load 4 from %ir.i); ep.c:150:30
SU(1):   STURDi renamable $d0, $fp, -96, debug-location !183 :: (store 8 into %ir.t2); ep.c:151:12
SU(2):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !184; ep.c:150:30
SU(3):   STRWui renamable $w8, $sp, 42, debug-location !184 :: (store 4 into %ir.i); ep.c:150:30

Fixup kills for %bb.12
********** MI Scheduling **********
main:%bb.13 for.end33
  From: STURDi killed renamable $d0, $fp, -160, debug-location !188 :: (store 8 into %ir.an); ep.c:154:8
    To: End RegionInstrs: 9
ScheduleDAGMI::schedule starting
SU(0):   STURDi renamable $d0, $fp, -160, debug-location !188 :: (store 8 into %ir.an); ep.c:154:8
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $x8 = MOVZXi 55040, 16
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x8
SU(2):   $x8 = MOVKXi $x8(tied-def 0), 13252, 32
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x8
SU(3):   $x8 = MOVKXi $x8(tied-def 0), 16816, 48
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x8
  Successors:
    SU(4): Data Latency=1 Reg=$x8
SU(4):   STPXi $xzr, renamable $x8, $fp, -22, debug-location !190 :: (store 8 into %ir.gc), (store 8 into %ir.tt); ep.c:156:8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=$x8
SU(5):   STPXi $xzr, $xzr, $fp, -18, debug-location !191 :: (store 8 into %ir.sx), (store 8 into %ir.sy); ep.c:157:8
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(6):   STRWui $wzr, $sp, 42, debug-location !193 :: (store 4 into %ir.i); ep.c:160:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(7):   $x20 = ADRP target-flags(aarch64-page) @q
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x20
SU(8):   renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @q, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x20
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 3
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 6 7 
  TopQ.A RemainingLatency 0 + 0c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $x8 = MOVZXi 55040, 16
  Ready @0c
  TopQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 7 5 6 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(7) TOP-PATH                  2 cycles 
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) $x8 = MOVKXi $x8(tied-def 0), 13252, 32
  Ready @1c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 7 5 6 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(7) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) $x20 = ADRP target-flags(aarch64-page) @q
  Ready @2c
  TopQ.A BotLatency SU(7) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 5 6 8 
  TopQ.A RemainingLatency 0 + 3c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(3) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) $x8 = MOVKXi $x8(tied-def 0), 16816, 48
  Ready @3c
  TopQ.A TopLatency SU(3) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 8 5 6 4 
  TopQ.A RemainingLatency 0 + 4c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(8) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @q, 0
  Ready @4c
  TopQ.A BotLatency SU(8) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 4 5 6 
  TopQ.A RemainingLatency 0 + 5c > CritPath 3
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STURDi renamable $d0, $fp, -160, debug-location !188 :: (store 8 into %ir.an); ep.c:154:8
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 4 5 
  TopQ.A RemainingLatency 0 + 6c > CritPath 3
  Cand SU(6) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) STPXi $xzr, renamable $x8, $fp, -22, debug-location !190 :: (store 8 into %ir.gc), (store 8 into %ir.tt); ep.c:156:8
  Ready @6c
  TopQ.A TopLatency SU(4) 3c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 5 
  TopQ.A RemainingLatency 0 + 7c > CritPath 3
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) STPXi $xzr, $xzr, $fp, -18, debug-location !191 :: (store 8 into %ir.sx), (store 8 into %ir.sy); ep.c:157:8
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) STRWui $wzr, $sp, 42, debug-location !193 :: (store 4 into %ir.i); ep.c:160:12
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.13 ***
SU(1):   $x8 = MOVZXi 55040, 16
SU(2):   $x8 = MOVKXi $x8(tied-def 0), 13252, 32
SU(7):   $x20 = ADRP target-flags(aarch64-page) @q
SU(3):   $x8 = MOVKXi $x8(tied-def 0), 16816, 48
SU(8):   renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @q, 0
SU(0):   STURDi renamable $d0, $fp, -160, debug-location !188 :: (store 8 into %ir.an); ep.c:154:8
SU(4):   STPXi $xzr, renamable $x8, $fp, -22, debug-location !190 :: (store 8 into %ir.gc), (store 8 into %ir.tt); ep.c:156:8
SU(5):   STPXi $xzr, $xzr, $fp, -18, debug-location !191 :: (store 8 into %ir.sx), (store 8 into %ir.sy); ep.c:157:8
SU(6):   STRWui $wzr, $sp, 42, debug-location !193 :: (store 4 into %ir.i); ep.c:160:12

Fixup kills for %bb.13
********** MI Scheduling **********
main:%bb.14 for.cond34
  From: renamable $w8 = LDRWui $sp, 42, debug-location !196 :: (dereferenceable load 4 from %ir.i); ep.c:160:17
    To: Bcc 12, %bb.16, implicit $nzcv, debug-location !199; ep.c:160:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 42, debug-location !196 :: (dereferenceable load 4 from %ir.i); ep.c:160:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 9, 0, implicit-def $nzcv, debug-location !199; ep.c:160:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.16, implicit $nzcv, debug-location !199; ep.c:160:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 42, debug-location !196 :: (dereferenceable load 4 from %ir.i); ep.c:160:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 9, 0, implicit-def $nzcv, debug-location !199; ep.c:160:5
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   renamable $w8 = LDRWui $sp, 42, debug-location !196 :: (dereferenceable load 4 from %ir.i); ep.c:160:17
SU(1):   dead $wzr = SUBSWri renamable $w8, 9, 0, implicit-def $nzcv, debug-location !199; ep.c:160:5

Fixup kills for %bb.14
********** MI Scheduling **********
main:%bb.15 for.body37
  From: renamable $x8 = LDRSWui $sp, 42, debug-location !200 :: (dereferenceable load 4 from %ir.i); ep.c:161:11
    To: B %bb.14
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRSWui $sp, 42, debug-location !200 :: (dereferenceable load 4 from %ir.i); ep.c:161:11
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$w8
    SU(2): Data Latency=0 Reg=$x8
    SU(1): Data Latency=4 Reg=$x8
    SU(3): Ord  Latency=0 Memory
SU(1):   STRXroX $xzr, renamable $x20, renamable $x8, 0, 1, debug-location !203 :: (store 8 into %ir.arrayidx39); ep.c:161:14
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(2): Anti Latency=0
SU(2):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8, debug-location !204; ep.c:160:26
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
    SU(0): Data Latency=0 Reg=$x8
  Successors:
    SU(3): Data Latency=1 Reg=$w8
SU(3):   STRWui renamable $w8, $sp, 42, debug-location !204 :: (store 4 into %ir.i); ep.c:160:26
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.14
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = LDRSWui $sp, 42, debug-location !200 :: (dereferenceable load 4 from %ir.i); ep.c:161:11
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRXroX $xzr, renamable $x20, renamable $x8, 0, 1, debug-location !203 :: (store 8 into %ir.arrayidx39); ep.c:161:14
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8, debug-location !204; ep.c:160:26
  Ready @5c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STRWui renamable $w8, $sp, 42, debug-location !204 :: (store 4 into %ir.i); ep.c:160:26
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   renamable $x8 = LDRSWui $sp, 42, debug-location !200 :: (dereferenceable load 4 from %ir.i); ep.c:161:11
SU(1):   STRXroX $xzr, renamable $x20, renamable $x8, 0, 1, debug-location !203 :: (store 8 into %ir.arrayidx39); ep.c:161:14
SU(2):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8, debug-location !204; ep.c:160:26
SU(3):   STRWui renamable $w8, $sp, 42, debug-location !204 :: (store 4 into %ir.i); ep.c:160:26

Fixup kills for %bb.15
********** MI Scheduling **********
main:%bb.16 for.end42
  From: $w8 = MOVNWi 0, 0
    To: End RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   $w8 = MOVNWi 0, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=$w8
SU(1):   $w21 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(6): Data Latency=1 Reg=$w21
SU(2):   $x22 = MOVZXi 55040, 16
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x22
SU(3):   $x22 = MOVKXi $x22(tied-def 0), 13252, 32
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x22
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x22
SU(4):   $x22 = MOVKXi $x22(tied-def 0), 16816, 48
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x22
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   STRWui renamable $w8, $sp, 36, debug-location !208 :: (store 4 into %ir.k_offset); ep.c:170:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$w8
SU(6):   STRWui renamable $w21, $sp, 38, debug-location !209 :: (store 4 into %ir.k); ep.c:172:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w21
SU(7):   renamable $d10 = FMOVDi 128
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 3
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 7 
  TopQ.A RemainingLatency 0 + 0c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x22 = MOVZXi 55040, 16
  Ready @0c
  TopQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 7 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(3) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) $x22 = MOVKXi $x22(tied-def 0), 13252, 32
  Ready @1c
  TopQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 7 4 
  TopQ.A RemainingLatency 0 + 2c > CritPath 3
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $w8 = MOVNWi 0, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 1 7 5 
  TopQ.A RemainingLatency 0 + 3c > CritPath 3
  Cand SU(4) ORDER                              
  Cand SU(1) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(1) $w21 = MOVZWi 1, 0
  Ready @3c
  TopQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 5 7 6 
  TopQ.A RemainingLatency 0 + 4c > CritPath 3
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) $x22 = MOVKXi $x22(tied-def 0), 16816, 48
  Ready @4c
  TopQ.A TopLatency SU(4) 2c
  TopQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 5 7 
  TopQ.A RemainingLatency 0 + 5c > CritPath 3
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) renamable $d10 = FMOVDi 128
  Ready @5c
  TopQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 5 
  TopQ.A RemainingLatency 0 + 6c > CritPath 3
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) STRWui renamable $w8, $sp, 36, debug-location !208 :: (store 4 into %ir.k_offset); ep.c:170:14
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) STRWui renamable $w21, $sp, 38, debug-location !209 :: (store 4 into %ir.k); ep.c:172:12
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.16 ***
SU(2):   $x22 = MOVZXi 55040, 16
SU(3):   $x22 = MOVKXi $x22(tied-def 0), 13252, 32
SU(0):   $w8 = MOVNWi 0, 0
SU(1):   $w21 = MOVZWi 1, 0
SU(4):   $x22 = MOVKXi $x22(tied-def 0), 16816, 48
SU(7):   renamable $d10 = FMOVDi 128
SU(5):   STRWui renamable $w8, $sp, 36, debug-location !208 :: (store 4 into %ir.k_offset); ep.c:170:14
SU(6):   STRWui renamable $w21, $sp, 38, debug-location !209 :: (store 4 into %ir.k); ep.c:172:12

Fixup kills for %bb.16
********** MI Scheduling **********
main:%bb.17 for.cond43
  From: renamable $w8 = LDRWui $sp, 38, debug-location !212 :: (dereferenceable load 4 from %ir.k); ep.c:172:17
    To: Bcc 12, %bb.40, implicit $nzcv, debug-location !216; ep.c:172:5
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 38, debug-location !212 :: (dereferenceable load 4 from %ir.k); ep.c:172:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w8
SU(1):   renamable $w9 = LDRWui $sp, 43, debug-location !214 :: (dereferenceable load 4 from %ir.np); ep.c:172:22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w9
SU(2):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !216; ep.c:172:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=$w9
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.40, implicit $nzcv, debug-location !216; ep.c:172:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 38, debug-location !212 :: (dereferenceable load 4 from %ir.k); ep.c:172:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w9 = LDRWui $sp, 43, debug-location !214 :: (dereferenceable load 4 from %ir.np); ep.c:172:22
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !216; ep.c:172:5
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   renamable $w8 = LDRWui $sp, 38, debug-location !212 :: (dereferenceable load 4 from %ir.k); ep.c:172:17
SU(1):   renamable $w9 = LDRWui $sp, 43, debug-location !214 :: (dereferenceable load 4 from %ir.np); ep.c:172:22
SU(2):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !216; ep.c:172:5

Fixup kills for %bb.17
********** MI Scheduling **********
main:%bb.18 for.body46
  From: renamable $w8 = LDRWui $sp, 36, debug-location !217 :: (dereferenceable load 4 from %ir.k_offset); ep.c:173:14
    To: End RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 36, debug-location !217 :: (dereferenceable load 4 from %ir.k_offset); ep.c:173:14
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$w8
SU(1):   renamable $w9 = LDRWui $sp, 38, debug-location !219 :: (dereferenceable load 4 from %ir.k); ep.c:173:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=$w9
SU(2):   renamable $d0 = LDURDi $fp, -160, debug-location !223 :: (dereferenceable load 8 from %ir.an); ep.c:175:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(5): Data Latency=4 Reg=$d0
SU(3):   STURXi renamable $x22, $fp, -88, debug-location !222 :: (store 8 into %ir.t1); ep.c:174:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(4):   $w8 = ADDWrs renamable $w8, renamable $w9, 0, debug-location !220; ep.c:173:23
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=$w9
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(6): Data Latency=1 Reg=$w8
SU(5):   STURDi renamable $d0, $fp, -96, debug-location !224 :: (store 8 into %ir.t2); ep.c:175:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=$d0
SU(6):   STRWui renamable $w8, $sp, 40, debug-location !221 :: (store 4 into %ir.kk); ep.c:173:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=$w8
SU(7):   STRWui renamable $w21, $sp, 42, debug-location !225 :: (store 4 into %ir.i); ep.c:179:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 7 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w8 = LDRWui $sp, 36, debug-location !217 :: (dereferenceable load 4 from %ir.k_offset); ep.c:173:14
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 1 2 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(7) ORDER                              
  Cand SU(1) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w9 = LDRWui $sp, 38, debug-location !219 :: (dereferenceable load 4 from %ir.k); ep.c:173:25
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 7 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(7) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(2) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d0 = LDURDi $fp, -160, debug-location !223 :: (dereferenceable load 8 from %ir.an); ep.c:175:14
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 5 
Queue TopQ.A: 7 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(7) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) STURXi renamable $x22, $fp, -88, debug-location !222 :: (store 8 into %ir.t1); ep.c:174:12
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 5 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) STRWui renamable $w21, $sp, 42, debug-location !225 :: (store 4 into %ir.i); ep.c:179:16
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $w8 = ADDWrs renamable $w8, renamable $w9, 0, debug-location !220; ep.c:173:23
  Ready @5c
  TopQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 5 
  TopQ.A RemainingLatency 0 + 6c > CritPath 5
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) STURDi renamable $d0, $fp, -96, debug-location !224 :: (store 8 into %ir.t2); ep.c:175:12
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) STRWui renamable $w8, $sp, 40, debug-location !221 :: (store 4 into %ir.kk); ep.c:173:12
  Ready @7c
  TopQ.A TopLatency SU(6) 5c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.18 ***
SU(0):   renamable $w8 = LDRWui $sp, 36, debug-location !217 :: (dereferenceable load 4 from %ir.k_offset); ep.c:173:14
SU(1):   renamable $w9 = LDRWui $sp, 38, debug-location !219 :: (dereferenceable load 4 from %ir.k); ep.c:173:25
SU(2):   renamable $d0 = LDURDi $fp, -160, debug-location !223 :: (dereferenceable load 8 from %ir.an); ep.c:175:14
SU(3):   STURXi renamable $x22, $fp, -88, debug-location !222 :: (store 8 into %ir.t1); ep.c:174:12
SU(7):   STRWui renamable $w21, $sp, 42, debug-location !225 :: (store 4 into %ir.i); ep.c:179:16
SU(4):   $w8 = ADDWrs renamable $w8, renamable $w9, 0, debug-location !220; ep.c:173:23
SU(5):   STURDi renamable $d0, $fp, -96, debug-location !224 :: (store 8 into %ir.t2); ep.c:175:12
SU(6):   STRWui renamable $w8, $sp, 40, debug-location !221 :: (store 4 into %ir.kk); ep.c:173:12

Fixup kills for %bb.18
********** MI Scheduling **********
main:%bb.19 for.cond48
  From: renamable $w8 = LDRWui $sp, 42, debug-location !228 :: (dereferenceable load 4 from %ir.i); ep.c:179:21
    To: Bcc 12, %bb.24, implicit $nzcv, debug-location !231; ep.c:179:9
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 42, debug-location !228 :: (dereferenceable load 4 from %ir.i); ep.c:179:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 100, 0, implicit-def $nzcv, debug-location !231; ep.c:179:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.24, implicit $nzcv, debug-location !231; ep.c:179:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 42, debug-location !228 :: (dereferenceable load 4 from %ir.i); ep.c:179:21
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 100, 0, implicit-def $nzcv, debug-location !231; ep.c:179:9
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   renamable $w8 = LDRWui $sp, 42, debug-location !228 :: (dereferenceable load 4 from %ir.i); ep.c:179:21
SU(1):   dead $wzr = SUBSWri renamable $w8, 100, 0, implicit-def $nzcv, debug-location !231; ep.c:179:9

Fixup kills for %bb.19
********** MI Scheduling **********
main:%bb.20 for.body51
  From: renamable $w8 = LDRWui $sp, 40, debug-location !232 :: (dereferenceable load 4 from %ir.kk); ep.c:180:18
    To: Bcc 0, %bb.22, implicit $nzcv, debug-location !241; ep.c:181:17
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 40, debug-location !232 :: (dereferenceable load 4 from %ir.kk); ep.c:180:18
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(5): Data Latency=4 Reg=$w8
    SU(2): Data Latency=4 Reg=$w8
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 0, 0, implicit-def $nzcv, debug-location !234; ep.c:180:21
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(5): Out  Latency=1
    SU(2): Data Latency=1 Reg=$nzcv
SU(2):   renamable $w9 = CSINCWr renamable $w8, renamable $w8, 10, implicit $nzcv, debug-location !234; ep.c:180:21
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(1): Data Latency=1 Reg=$nzcv
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$w9
    SU(3): Data Latency=1 Reg=$w9
    SU(5): Anti Latency=0
SU(3):   renamable $w10 = SBFMWri renamable $w9, 1, 31, debug-location !234; ep.c:180:21
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 2
  Predecessors:
    SU(2): Data Latency=1 Reg=$w9
  Successors:
    SU(6): Data Latency=1 Reg=$w10
    SU(4): Anti Latency=0
SU(4):   renamable $w9 = ANDWri renamable $w9, 2014, debug-location !238; ep.c:181:20
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 2
  Predecessors:
    SU(3): Anti Latency=0
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$w9
  Successors:
    SU(5): Data Latency=1 Reg=$w9
SU(5):   $wzr = SUBSWrs renamable $w9, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !241; ep.c:181:17
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=$w9
    SU(2): Anti Latency=0
    SU(1): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(6):   STRWui renamable $w10, $sp, 41, debug-location !235 :: (store 4 into %ir.ik); ep.c:180:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=$w10
ExitSU:   Bcc 0, %bb.22, implicit $nzcv, debug-location !241; ep.c:181:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 8
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 40, debug-location !232 :: (dereferenceable load 4 from %ir.kk); ep.c:180:18
  Ready @0c
  TopQ.A BotLatency SU(0) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 0, 0, implicit-def $nzcv, debug-location !234; ep.c:180:21
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w9 = CSINCWr renamable $w8, renamable $w8, 10, implicit $nzcv, debug-location !234; ep.c:180:21
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w10 = SBFMWri renamable $w9, 1, 31, debug-location !234; ep.c:180:21
  Ready @6c
  TopQ.A TopLatency SU(3) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 4 
  TopQ.A RemainingLatency 0 + 7c > CritPath 8
  Cand SU(6) ORDER                              
  Cand SU(4) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $w9 = ANDWri renamable $w9, 2014, debug-location !238; ep.c:181:20
  Ready @7c
  TopQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 5 
  TopQ.A RemainingLatency 0 + 8c > CritPath 8
  Cand SU(6) ORDER                              
  Cand SU(5) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) $wzr = SUBSWrs renamable $w9, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !241; ep.c:181:17
  Ready @8c
  TopQ.A TopLatency SU(5) 7c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) STRWui renamable $w10, $sp, 41, debug-location !235 :: (store 4 into %ir.ik); ep.c:180:16
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 7
  Executed: 10c
  Critical: 7c, 7 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   renamable $w8 = LDRWui $sp, 40, debug-location !232 :: (dereferenceable load 4 from %ir.kk); ep.c:180:18
SU(1):   dead $wzr = SUBSWri renamable $w8, 0, 0, implicit-def $nzcv, debug-location !234; ep.c:180:21
SU(2):   renamable $w9 = CSINCWr renamable $w8, renamable $w8, 10, implicit $nzcv, debug-location !234; ep.c:180:21
SU(3):   renamable $w10 = SBFMWri renamable $w9, 1, 31, debug-location !234; ep.c:180:21
SU(4):   renamable $w9 = ANDWri renamable $w9, 2014, debug-location !238; ep.c:181:20
SU(5):   $wzr = SUBSWrs renamable $w9, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !241; ep.c:181:17
SU(6):   STRWui renamable $w10, $sp, 41, debug-location !235 :: (store 4 into %ir.ik); ep.c:180:16

Fixup kills for %bb.20
********** MI Scheduling **********
main:%bb.21 if.then54
  From: renamable $d0 = LDURDi $fp, -96, debug-location !242 :: (dereferenceable load 8 from %ir.t2); ep.c:182:34
    To: BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !243; ep.c:182:22
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDURDi $fp, -96, debug-location !242 :: (dereferenceable load 8 from %ir.t2); ep.c:182:34
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(1):   $x0 = SUBXri $fp, 88, 0, debug-location !243; ep.c:182:22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !243; ep.c:182:22
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0 = LDURDi $fp, -96, debug-location !242 :: (dereferenceable load 8 from %ir.t2); ep.c:182:34
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = SUBXri $fp, 88, 0, debug-location !243; ep.c:182:22
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.21 ***
SU(0):   renamable $d0 = LDURDi $fp, -96, debug-location !242 :: (dereferenceable load 8 from %ir.t2); ep.c:182:34
SU(1):   $x0 = SUBXri $fp, 88, 0, debug-location !243; ep.c:182:22

Fixup kills for %bb.21
Fixup kills for %bb.22
********** MI Scheduling **********
main:%bb.23 if.end60
  From: renamable $w8, renamable $w9 = LDPWi $sp, 41, debug-location !253 :: (dereferenceable load 4 from %ir.ik), (dereferenceable load 4 from %ir.i); ep.c:186:18
    To: B %bb.19
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8, renamable $w9 = LDPWi $sp, 41, debug-location !253 :: (dereferenceable load 4 from %ir.ik), (dereferenceable load 4 from %ir.i); ep.c:186:18
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Out  Latency=1
    SU(2): Data Latency=4 Reg=$w8
    SU(3): Data Latency=4 Reg=$w9
    SU(4): Ord  Latency=0 Memory
SU(1):   STURDi renamable $d0, $fp, -104, debug-location !252 :: (store 8 into %ir.t3); ep.c:185:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   STRWui renamable $w8, $sp, 40, debug-location !254 :: (store 4 into %ir.kk); ep.c:186:16
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(3): Anti Latency=0
SU(3):   renamable $w8 = nsw ADDWri renamable $w9, 1, 0, debug-location !255; ep.c:179:32
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w9
  Successors:
    SU(4): Data Latency=1 Reg=$w8
SU(4):   STRWui renamable $w8, $sp, 42, debug-location !255 :: (store 4 into %ir.i); ep.c:179:32
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.19
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w8, renamable $w9 = LDPWi $sp, 41, debug-location !253 :: (dereferenceable load 4 from %ir.ik), (dereferenceable load 4 from %ir.i); ep.c:186:18
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STURDi renamable $d0, $fp, -104, debug-location !252 :: (store 8 into %ir.t3); ep.c:185:16
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w8, $sp, 40, debug-location !254 :: (store 4 into %ir.kk); ep.c:186:16
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w8 = nsw ADDWri renamable $w9, 1, 0, debug-location !255; ep.c:179:32
  Ready @5c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) STRWui renamable $w8, $sp, 42, debug-location !255 :: (store 4 into %ir.i); ep.c:179:32
  Ready @6c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.23 ***
SU(0):   renamable $w8, renamable $w9 = LDPWi $sp, 41, debug-location !253 :: (dereferenceable load 4 from %ir.ik), (dereferenceable load 4 from %ir.i); ep.c:186:18
SU(1):   STURDi renamable $d0, $fp, -104, debug-location !252 :: (store 8 into %ir.t3); ep.c:185:16
SU(2):   STRWui renamable $w8, $sp, 40, debug-location !254 :: (store 4 into %ir.kk); ep.c:186:16
SU(3):   renamable $w8 = nsw ADDWri renamable $w9, 1, 0, debug-location !255; ep.c:179:32
SU(4):   STRWui renamable $w8, $sp, 42, debug-location !255 :: (store 4 into %ir.i); ep.c:179:32

********** MI Scheduling **********
main:%bb.23 if.end60
  From: renamable $d0 = LDURDi $fp, -96, debug-location !250 :: (dereferenceable load 8 from %ir.t2); ep.c:185:30
    To: BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !251; ep.c:185:18
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDURDi $fp, -96, debug-location !250 :: (dereferenceable load 8 from %ir.t2); ep.c:185:30
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(1):   $x0 = SUBXri $fp, 96, 0, debug-location !251; ep.c:185:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @randlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !251; ep.c:185:18
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0 = LDURDi $fp, -96, debug-location !250 :: (dereferenceable load 8 from %ir.t2); ep.c:185:30
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = SUBXri $fp, 96, 0, debug-location !251; ep.c:185:18
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.23 ***
SU(0):   renamable $d0 = LDURDi $fp, -96, debug-location !250 :: (dereferenceable load 8 from %ir.t2); ep.c:185:30
SU(1):   $x0 = SUBXri $fp, 96, 0, debug-location !251; ep.c:185:18

Fixup kills for %bb.23
Fixup kills for %bb.24
Fixup kills for %bb.25
********** MI Scheduling **********
main:%bb.26 if.end66
  From: $x1 = SUBXri $fp, 88, 0, debug-location !263; ep.c:194:9
    To: BL @vranlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit $d0, implicit $x2, implicit-def $sp, debug-location !263; ep.c:194:9
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   $x1 = SUBXri $fp, 88, 0, debug-location !263; ep.c:194:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(1):   $w0 = MOVZWi 2, 16, debug-location !263; ep.c:194:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $q0 = ORRv16i8 $q9, $q9, debug-location !263; ep.c:194:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $x2 = ORRXrs $xzr, $x19, 0, debug-location !263; ep.c:194:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @vranlc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit $d0, implicit $x2, implicit-def $sp, debug-location !263; ep.c:194:9
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $x1 = SUBXri $fp, 88, 0, debug-location !263; ep.c:194:9
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 1
  Cand SU(3) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) $w0 = MOVZWi 2, 16, debug-location !263; ep.c:194:9
  Ready @1c
  TopQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 1
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) $q0 = ORRv16i8 $q9, $q9, debug-location !263; ep.c:194:9
  Ready @2c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $x2 = ORRXrs $xzr, $x19, 0, debug-location !263; ep.c:194:9
  Ready @3c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.26 ***
SU(0):   $x1 = SUBXri $fp, 88, 0, debug-location !263; ep.c:194:9
SU(1):   $w0 = MOVZWi 2, 16, debug-location !263; ep.c:194:9
SU(2):   $q0 = ORRv16i8 $q9, $q9, debug-location !263; ep.c:194:9
SU(3):   $x2 = ORRXrs $xzr, $x19, 0, debug-location !263; ep.c:194:9

Fixup kills for %bb.26
Fixup kills for %bb.27
Fixup kills for %bb.28
Fixup kills for %bb.29
Fixup kills for %bb.30
********** MI Scheduling **********
main:%bb.31 for.cond73
  From: renamable $w8 = LDRWui $sp, 42, debug-location !275 :: (dereferenceable load 4 from %ir.i); ep.c:206:21
    To: Bcc 10, %bb.37, implicit $nzcv, debug-location !278; ep.c:206:9
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 42, debug-location !275 :: (dereferenceable load 4 from %ir.i); ep.c:206:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 16, 12, implicit-def $nzcv, debug-location !278; ep.c:206:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.37, implicit $nzcv, debug-location !278; ep.c:206:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 42, debug-location !275 :: (dereferenceable load 4 from %ir.i); ep.c:206:21
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 16, 12, implicit-def $nzcv, debug-location !278; ep.c:206:9
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.31 ***
SU(0):   renamable $w8 = LDRWui $sp, 42, debug-location !275 :: (dereferenceable load 4 from %ir.i); ep.c:206:21
SU(1):   dead $wzr = SUBSWri renamable $w8, 16, 12, implicit-def $nzcv, debug-location !278; ep.c:206:9

Fixup kills for %bb.31
********** MI Scheduling **********
main:%bb.32 for.body76
  From: renamable $x8 = LDRSWui $sp, 42, debug-location !279 :: (dereferenceable load 4 from %ir.i); ep.c:207:30
    To: Bcc 8, %bb.36, implicit $nzcv, debug-location !304; ep.c:210:17
 RegionInstrs: 13
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRSWui $sp, 42, debug-location !279 :: (dereferenceable load 4 from %ir.i); ep.c:207:30
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x8
SU(1):   renamable $x8 = ADDXrs renamable $x19, renamable $x8, 4, debug-location !282; ep.c:207:24
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 10
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(2): Data Latency=1 Reg=$x8
SU(2):   renamable $d0, renamable $d1 = LDPDi renamable $x8, 0, debug-location !282 :: (load 8 from %ir.arrayidx79), (load 8 from %ir.arrayidx84); ep.c:207:24
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 9
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d0
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d1
SU(3):   renamable $d0 = FADDDrr renamable $d0, renamable $d0, debug-location !283; ep.c:207:22
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 5
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d0
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$d0
SU(4):   renamable $d1 = FADDDrr renamable $d1, renamable $d1, debug-location !290; ep.c:208:22
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 5
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d1
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$d1
SU(5):   renamable $d0 = FSUBDrr renamable $d0, renamable $d8, debug-location !284; ep.c:207:33
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 4
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$d0
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$d0
    SU(7): Data Latency=1 Reg=$d0
SU(6):   renamable $d1 = FSUBDrr renamable $d1, renamable $d8, debug-location !291; ep.c:208:37
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 4
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$d1
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$d1
    SU(7): Data Latency=1 Reg=$d1
SU(7):   STPDi renamable $d1, renamable $d0, $fp, -16, debug-location !285 :: (store 8 into %ir.x1), (store 8 into %ir.x2); ep.c:207:16
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 3
  Predecessors:
    SU(6): Data Latency=1 Reg=$d1
    SU(5): Data Latency=1 Reg=$d0
  Successors:
    SU(9): Anti Latency=0
    SU(8): Anti Latency=0
SU(8):   renamable $d0 = FMULDrr renamable $d0, renamable $d0, debug-location !295; ep.c:209:21
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 3
  Predecessors:
    SU(7): Anti Latency=0
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$d0
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$d0
SU(9):   renamable $d1 = FMULDrr renamable $d1, renamable $d1, debug-location !298; ep.c:209:31
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 3
  Predecessors:
    SU(7): Anti Latency=0
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$d1
  Successors:
    SU(10): Data Latency=1 Reg=$d1
SU(10):   renamable $d0 = FADDDrr renamable $d0, renamable $d1, debug-location !299; ep.c:209:26
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 2
  Predecessors:
    SU(9): Data Latency=1 Reg=$d1
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$d0
  Successors:
    SU(12): Data Latency=1 Reg=$d0
    SU(11): Data Latency=1 Reg=$d0
SU(11):   FCMPDrr renamable $d0, renamable $d8, implicit-def $nzcv, debug-location !304; ep.c:210:17
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 1
  Predecessors:
    SU(10): Data Latency=1 Reg=$d0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(12):   STURDi renamable $d0, $fp, -88, debug-location !300 :: (store 8 into %ir.t1); ep.c:209:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=$d0
ExitSU:   Bcc 8, %bb.36, implicit $nzcv, debug-location !304; ep.c:210:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 14
  Height             : 0
  Predecessors:
    SU(11): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 14
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = LDRSWui $sp, 42, debug-location !279 :: (dereferenceable load 4 from %ir.i); ep.c:207:30
  Ready @0c
  TopQ.A BotLatency SU(0) 14c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x8 = ADDXrs renamable $x19, renamable $x8, 4, debug-location !282; ep.c:207:24
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $d0, renamable $d1 = LDPDi renamable $x8, 0, debug-location !282 :: (load 8 from %ir.arrayidx79), (load 8 from %ir.arrayidx84); ep.c:207:24
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 9 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 4 
  TopQ.A RemainingLatency 0 + 9c > CritPath 14
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) renamable $d0 = FADDDrr renamable $d0, renamable $d0, debug-location !283; ep.c:207:22
  Ready @9c
  TopQ.A TopLatency SU(3) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 4
  Executed: 10c
  Critical: 4c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 5 
  TopQ.A RemainingLatency 0 + 10c > CritPath 14
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) renamable $d1 = FADDDrr renamable $d1, renamable $d1, debug-location !290; ep.c:208:22
  Ready @10c
  TopQ.A BotLatency SU(4) 5c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 6 
  TopQ.A RemainingLatency 0 + 11c > CritPath 14
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $d0 = FSUBDrr renamable $d0, renamable $d8, debug-location !284; ep.c:207:33
  Ready @11c
  TopQ.A TopLatency SU(5) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $d1 = FSUBDrr renamable $d1, renamable $d8, debug-location !291; ep.c:208:37
  Ready @12c
  TopQ.A BotLatency SU(6) 4c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 7
  Executed: 13c
  Critical: 7c, 7 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) STPDi renamable $d1, renamable $d0, $fp, -16, debug-location !285 :: (store 8 into %ir.x1), (store 8 into %ir.x2); ep.c:207:16
  Ready @13c
  TopQ.A TopLatency SU(7) 11c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 8
  Executed: 14c
  Critical: 8c, 8 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 8 
  TopQ.A RemainingLatency 0 + 14c > CritPath 14
  Cand SU(9) ORDER                              
  Cand SU(8) ORDER                              
Pick Top ORDER     
Scheduling SU(8) renamable $d0 = FMULDrr renamable $d0, renamable $d0, debug-location !295; ep.c:209:21
  Ready @14c
  TopQ.A BotLatency SU(8) 3c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 9
  Executed: 15c
  Critical: 9c, 9 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) renamable $d1 = FMULDrr renamable $d1, renamable $d1, debug-location !298; ep.c:209:31
  Ready @15c
  TopQ.A BotLatency SU(9) 3c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 10
  Executed: 16c
  Critical: 10c, 10 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) renamable $d0 = FADDDrr renamable $d0, renamable $d1, debug-location !299; ep.c:209:26
  Ready @16c
  TopQ.A TopLatency SU(10) 12c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 11
  Executed: 17c
  Critical: 11c, 11 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 11 
  TopQ.A RemainingLatency 0 + 17c > CritPath 14
  Cand SU(12) ORDER                              
  Cand SU(11) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(11) FCMPDrr renamable $d0, renamable $d8, implicit-def $nzcv, debug-location !304; ep.c:210:17
  Ready @17c
  TopQ.A TopLatency SU(11) 13c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 12
  Executed: 18c
  Critical: 12c, 12 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 
Pick Top ONLY1     
Scheduling SU(12) STURDi renamable $d0, $fp, -88, debug-location !300 :: (store 8 into %ir.t1); ep.c:209:16
  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 13
  Executed: 19c
  Critical: 13c, 13 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   renamable $x8 = LDRSWui $sp, 42, debug-location !279 :: (dereferenceable load 4 from %ir.i); ep.c:207:30
SU(1):   renamable $x8 = ADDXrs renamable $x19, renamable $x8, 4, debug-location !282; ep.c:207:24
SU(2):   renamable $d0, renamable $d1 = LDPDi renamable $x8, 0, debug-location !282 :: (load 8 from %ir.arrayidx79), (load 8 from %ir.arrayidx84); ep.c:207:24
SU(3):   renamable $d0 = FADDDrr renamable $d0, renamable $d0, debug-location !283; ep.c:207:22
SU(4):   renamable $d1 = FADDDrr renamable $d1, renamable $d1, debug-location !290; ep.c:208:22
SU(5):   renamable $d0 = FSUBDrr renamable $d0, renamable $d8, debug-location !284; ep.c:207:33
SU(6):   renamable $d1 = FSUBDrr renamable $d1, renamable $d8, debug-location !291; ep.c:208:37
SU(7):   STPDi renamable $d1, renamable $d0, $fp, -16, debug-location !285 :: (store 8 into %ir.x1), (store 8 into %ir.x2); ep.c:207:16
SU(8):   renamable $d0 = FMULDrr renamable $d0, renamable $d0, debug-location !295; ep.c:209:21
SU(9):   renamable $d1 = FMULDrr renamable $d1, renamable $d1, debug-location !298; ep.c:209:31
SU(10):   renamable $d0 = FADDDrr renamable $d0, renamable $d1, debug-location !299; ep.c:209:26
SU(11):   FCMPDrr renamable $d0, renamable $d8, implicit-def $nzcv, debug-location !304; ep.c:210:17
SU(12):   STURDi renamable $d0, $fp, -88, debug-location !300 :: (store 8 into %ir.t1); ep.c:209:16

Fixup kills for %bb.32
********** MI Scheduling **********
main:%bb.33 if.then92
  From: renamable $d1 = LDURDi $fp, -88, debug-location !309 :: (dereferenceable load 8 from %ir.t1); ep.c:211:44
    To: Bcc 7, %bb.35, implicit $nzcv, debug-location !312; ep.c:211:20
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $d1 = LDURDi $fp, -88, debug-location !309 :: (dereferenceable load 8 from %ir.t1); ep.c:211:44
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d1
SU(1):   renamable $d0 = FMULDrr renamable $d0, renamable $d10, debug-location !308; ep.c:211:32
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Out  Latency=1
    SU(2): Data Latency=1 Reg=$d0
SU(2):   renamable $d1 = FDIVDrr renamable $d0, renamable $d1, debug-location !310; ep.c:211:42
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=1 Reg=$d0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(3): Data Latency=1 Reg=$d1
    SU(3): Anti Latency=0
SU(3):   renamable $d0 = FSQRTDr renamable $d1, debug-location !311; ep.c:211:22
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(2): Data Latency=1 Reg=$d1
    SU(2): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(4): Data Latency=1 Reg=$d0
SU(4):   FCMPDrr renamable $d0, renamable $d0, implicit-def $nzcv, debug-location !312; ep.c:211:20
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(3): Data Latency=1 Reg=$d0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 7, %bb.35, implicit $nzcv, debug-location !312; ep.c:211:20
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 7
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d1 = LDURDi $fp, -88, debug-location !309 :: (dereferenceable load 8 from %ir.t1); ep.c:211:44
  Ready @0c
  TopQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $d0 = FMULDrr renamable $d0, renamable $d10, debug-location !308; ep.c:211:32
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $d1 = FDIVDrr renamable $d0, renamable $d1, debug-location !310; ep.c:211:42
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $d0 = FSQRTDr renamable $d1, debug-location !311; ep.c:211:22
  Ready @5c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) FCMPDrr renamable $d0, renamable $d0, implicit-def $nzcv, debug-location !312; ep.c:211:20
  Ready @6c
  TopQ.A TopLatency SU(4) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.33 ***
SU(0):   renamable $d1 = LDURDi $fp, -88, debug-location !309 :: (dereferenceable load 8 from %ir.t1); ep.c:211:44
SU(1):   renamable $d0 = FMULDrr renamable $d0, renamable $d10, debug-location !308; ep.c:211:32
SU(2):   renamable $d1 = FDIVDrr renamable $d0, renamable $d1, debug-location !310; ep.c:211:42
SU(3):   renamable $d0 = FSQRTDr renamable $d1, debug-location !311; ep.c:211:22
SU(4):   FCMPDrr renamable $d0, renamable $d0, implicit-def $nzcv, debug-location !312; ep.c:211:20

Fixup kills for %bb.33
Fixup kills for %bb.34
********** MI Scheduling **********
main:%bb.35 if.then92.split
  From: renamable $d2, renamable $d1 = LDPDi $fp, -16, debug-location !313 :: (dereferenceable load 8 from %ir.x1), (dereferenceable load 8 from %ir.x2); ep.c:212:23
    To: End RegionInstrs: 20
ScheduleDAGMI::schedule starting
SU(0):   renamable $d2, renamable $d1 = LDPDi $fp, -16, debug-location !313 :: (dereferenceable load 8 from %ir.x1), (dereferenceable load 8 from %ir.x2); ep.c:212:23
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 19
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d2
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$d1
SU(1):   renamable $d1 = FMULDrr renamable $d1, renamable $d0, debug-location !315; ep.c:212:26
  # preds left       : 2
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 15
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d1
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$d1
    SU(8): Data Latency=1 Reg=$d1
    SU(6): Data Latency=1 Reg=$d1
    SU(3): Data Latency=1 Reg=$d1
    SU(7): Anti Latency=0
SU(2):   renamable $d2 = FMULDrr renamable $d2, renamable $d0, debug-location !319; ep.c:213:26
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 15
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d2
  Successors:
    SU(16): Data Latency=1 Reg=$d2
    SU(15): Data Latency=1 Reg=$d2
    SU(9): Data Latency=1 Reg=$d2
    SU(4): Data Latency=1 Reg=$d2
    SU(7): Anti Latency=0
SU(3):   renamable $d3 = FABSDr renamable $d1, debug-location !321; ep.c:214:21
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 14
  Predecessors:
    SU(1): Data Latency=1 Reg=$d1
  Successors:
    SU(7): Out  Latency=1
    SU(5): Data Latency=1 Reg=$d3
    SU(9): Anti Latency=0
SU(4):   renamable $d4 = FABSDr renamable $d2, debug-location !321; ep.c:214:21
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 14
  Predecessors:
    SU(2): Data Latency=1 Reg=$d2
  Successors:
    SU(5): Data Latency=1 Reg=$d4
SU(5):   FCMPDrr renamable $d3, renamable $d4, implicit-def $nzcv, debug-location !321; ep.c:214:21
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 13
  Predecessors:
    SU(4): Data Latency=1 Reg=$d4
    SU(3): Data Latency=1 Reg=$d3
  Successors:
    SU(9): Data Latency=1 Reg=$nzcv
    SU(7): Anti Latency=0
SU(6):   STPDi renamable $d1, renamable $d0, $fp, -13, debug-location !312 :: (store 8 into %ir.t2), (store 8 into %ir.t3); ep.c:211:20
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 13
  Predecessors:
    SU(1): Data Latency=1 Reg=$d1
  Successors:
    SU(9): Anti Latency=0
    SU(7): Anti Latency=0
SU(7):   renamable $d0, renamable $d3 = LDPDi $fp, -18, debug-location !329 :: (dereferenceable load 8 from %ir.sx), (dereferenceable load 8 from %ir.sy); ep.c:216:22
  # preds left       : 5
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 13
  Predecessors:
    SU(6): Anti Latency=0
    SU(5): Anti Latency=0
    SU(3): Out  Latency=1
    SU(2): Anti Latency=0
    SU(1): Anti Latency=0
  Successors:
    SU(16): Out  Latency=1
    SU(16): Data Latency=4 Reg=$d0
    SU(8): Out  Latency=1
    SU(8): Data Latency=4 Reg=$d3
    SU(17): Ord  Latency=0 Memory
SU(8):   renamable $d3 = FADDDrr renamable $d3, renamable $d1, debug-location !331; ep.c:216:25
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 9
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$d3
    SU(1): Data Latency=1 Reg=$d1
  Successors:
    SU(17): Data Latency=1 Reg=$d3
    SU(9): Anti Latency=0
SU(9):   renamable $d1 = FCSELDrrr renamable $d1, renamable $d2, 12, implicit $nzcv, debug-location !321; ep.c:214:21
  # preds left       : 7
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 9
  Predecessors:
    SU(8): Anti Latency=0
    SU(6): Anti Latency=0
    SU(5): Data Latency=1 Reg=$nzcv
    SU(3): Anti Latency=0
    SU(2): Data Latency=1 Reg=$d2
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$d1
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$d1
SU(10):   renamable $d1 = FABSDr renamable $d1, debug-location !321; ep.c:214:21
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 8
  Predecessors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$d1
  Successors:
    SU(14): Out  Latency=1
    SU(11): Data Latency=1 Reg=$d1
SU(11):   renamable $w8 = FCVTZSUWDr renamable $d1, implicit-def $x8, debug-location !321; ep.c:214:21
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 7
  Predecessors:
    SU(10): Data Latency=1 Reg=$d1
  Successors:
    SU(13): Out  Latency=1
    SU(12): Data Latency=1 Reg=$w8
    SU(13): Data Latency=1 Reg=$x8
    SU(14): Anti Latency=0
SU(12):   STRWui renamable $w8, $sp, 39, debug-location !322 :: (store 4 into %ir.l); ep.c:214:19
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 6
  Predecessors:
    SU(11): Data Latency=1 Reg=$w8
  Successors:
    SU(13): Anti Latency=0
SU(13):   renamable $x8 = SBFMXri renamable $x8, 61, 31, debug-location !324; ep.c:215:24
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 6
  Predecessors:
    SU(12): Anti Latency=0
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x8
  Successors:
    SU(19): Data Latency=1 Reg=$x8
    SU(14): Data Latency=1 Reg=$x8
SU(14):   renamable $d1 = LDRDroX renamable $x20, renamable $x8, 0, 0, debug-location !324 :: (load 8 from %ir.arrayidx103); ep.c:215:24
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 14
  Height             : 5
  Predecessors:
    SU(13): Data Latency=1 Reg=$x8
    SU(11): Anti Latency=0
    SU(10): Out  Latency=1
  Successors:
    SU(18): Out  Latency=1
    SU(18): Data Latency=4 Reg=$d1
    SU(19): Ord  Latency=0 Memory
SU(15):   STURDi renamable $d2, $fp, -112, debug-location !320 :: (store 8 into %ir.t4); ep.c:213:20
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=$d2
SU(16):   renamable $d0 = FADDDrr renamable $d0, renamable $d2, debug-location !335; ep.c:217:25
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$d0
    SU(2): Data Latency=1 Reg=$d2
  Successors:
    SU(17): Data Latency=1 Reg=$d0
SU(17):   STPDi renamable $d0, renamable $d3, $fp, -18, debug-location !332 :: (store 8 into %ir.sx), (store 8 into %ir.sy); ep.c:216:20
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(16): Data Latency=1 Reg=$d0
    SU(8): Data Latency=1 Reg=$d3
    SU(7): Ord  Latency=0 Memory
SU(18):   renamable $d1 = FADDDrr renamable $d1, renamable $d8, debug-location !325; ep.c:215:29
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 18
  Height             : 1
  Predecessors:
    SU(14): Out  Latency=1
    SU(14): Data Latency=4 Reg=$d1
  Successors:
    SU(19): Data Latency=1 Reg=$d1
SU(19):   STRDroX renamable $d1, renamable $x20, renamable $x8, 0, 0, debug-location !328 :: (store 8 into %ir.arrayidx106); ep.c:215:22
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 19
  Height             : 0
  Predecessors:
    SU(18): Data Latency=1 Reg=$d1
    SU(14): Ord  Latency=0 Memory
    SU(13): Data Latency=1 Reg=$x8
Critical Path: (PGS-RR) 19
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $d2, renamable $d1 = LDPDi $fp, -16, debug-location !313 :: (dereferenceable load 8 from %ir.x1), (dereferenceable load 8 from %ir.x2); ep.c:212:23
  Ready @0c
  TopQ.A BotLatency SU(0) 19c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 4c > CritPath 19
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) renamable $d1 = FMULDrr renamable $d1, renamable $d0, debug-location !315; ep.c:212:26
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 6 3 
  TopQ.A RemainingLatency 0 + 5c > CritPath 19
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d2 = FMULDrr renamable $d2, renamable $d0, debug-location !319; ep.c:213:26
  Ready @5c
  TopQ.A BotLatency SU(2) 15c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 6 15 4 
  TopQ.A RemainingLatency 0 + 6c > CritPath 19
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d3 = FABSDr renamable $d1, debug-location !321; ep.c:214:21
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 6 15 
  TopQ.A RemainingLatency 0 + 7c > CritPath 19
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) renamable $d4 = FABSDr renamable $d2, debug-location !321; ep.c:214:21
  Ready @7c
  TopQ.A BotLatency SU(4) 14c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 6 5 
  TopQ.A RemainingLatency 0 + 8c > CritPath 19
  Cand SU(15) ORDER                              
  Cand SU(6) TOP-PATH                  13 cycles 
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) FCMPDrr renamable $d3, renamable $d4, implicit-def $nzcv, debug-location !321; ep.c:214:21
  Ready @8c
  TopQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 6 
  TopQ.A RemainingLatency 0 + 9c > CritPath 19
  Cand SU(15) ORDER                              
  Cand SU(6) TOP-PATH                  13 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) STPDi renamable $d1, renamable $d0, $fp, -13, debug-location !312 :: (store 8 into %ir.t2), (store 8 into %ir.t3); ep.c:211:20
  Ready @9c
  TopQ.A BotLatency SU(6) 13c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 7
  Executed: 10c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 7 
  TopQ.A RemainingLatency 0 + 10c > CritPath 19
  Cand SU(15) ORDER                              
  Cand SU(7) TOP-PATH                  13 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) renamable $d0, renamable $d3 = LDPDi $fp, -18, debug-location !329 :: (dereferenceable load 8 from %ir.sx), (dereferenceable load 8 from %ir.sy); ep.c:216:22
  Ready @10c
  TopQ.A BotLatency SU(7) 13c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 8
  Executed: 11c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 16 8 
Queue TopQ.A: 15 
Pick Top ONLY1     
Scheduling SU(15) STURDi renamable $d2, $fp, -112, debug-location !320 :: (store 8 into %ir.t4); ep.c:213:20
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 9
  Executed: 12c
  Critical: 9c, 9 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 14 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 16 8 
  TopQ.A RemainingLatency 0 + 14c > CritPath 19
  Cand SU(16) ORDER                              
  Cand SU(8) TOP-PATH                  9 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $d3 = FADDDrr renamable $d3, renamable $d1, debug-location !331; ep.c:216:25
  Ready @14c
  TopQ.A TopLatency SU(8) 10c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 10
  Executed: 15c
  Critical: 10c, 10 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 16 9 
  TopQ.A RemainingLatency 0 + 15c > CritPath 19
  Cand SU(16) ORDER                              
  Cand SU(9) TOP-PATH                  9 cycles 
Pick Top TOP-PATH  
Scheduling SU(9) renamable $d1 = FCSELDrrr renamable $d1, renamable $d2, 12, implicit $nzcv, debug-location !321; ep.c:214:21
  Ready @15c
  TopQ.A BotLatency SU(9) 9c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 11
  Executed: 16c
  Critical: 11c, 11 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 16 10 
  TopQ.A RemainingLatency 0 + 16c > CritPath 19
  Cand SU(16) ORDER                              
  Cand SU(10) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(10) renamable $d1 = FABSDr renamable $d1, debug-location !321; ep.c:214:21
  Ready @16c
  TopQ.A TopLatency SU(10) 11c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 12
  Executed: 17c
  Critical: 12c, 12 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 16 11 
  TopQ.A RemainingLatency 0 + 17c > CritPath 19
  Cand SU(16) ORDER                              
  Cand SU(11) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(11) renamable $w8 = FCVTZSUWDr renamable $d1, implicit-def $x8, debug-location !321; ep.c:214:21
  Ready @17c
  TopQ.A TopLatency SU(11) 12c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 13
  Executed: 18c
  Critical: 13c, 13 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 16 12 
  TopQ.A RemainingLatency 0 + 18c > CritPath 19
  Cand SU(16) ORDER                              
  Cand SU(12) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(12) STRWui renamable $w8, $sp, 39, debug-location !322 :: (store 4 into %ir.l); ep.c:214:19
  Ready @18c
  TopQ.A TopLatency SU(12) 13c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 14
  Executed: 19c
  Critical: 14c, 14 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 16 13 
  TopQ.A RemainingLatency 0 + 19c > CritPath 19
  Cand SU(16) ORDER                              
  Cand SU(13) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(13) renamable $x8 = SBFMXri renamable $x8, 61, 31, debug-location !324; ep.c:215:24
  Ready @19c
  TopQ.A BotLatency SU(13) 6c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 15
  Executed: 20c
  Critical: 15c, 15 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 16 14 
  TopQ.A RemainingLatency 0 + 20c > CritPath 19
  Cand SU(16) ORDER                              
  Cand SU(14) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(14) renamable $d1 = LDRDroX renamable $x20, renamable $x8, 0, 0, debug-location !324 :: (load 8 from %ir.arrayidx103); ep.c:215:24
  Ready @20c
  TopQ.A TopLatency SU(14) 14c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 16
  Executed: 21c
  Critical: 16c, 16 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 18 
Queue TopQ.A: 16 
Pick Top ONLY1     
Scheduling SU(16) renamable $d0 = FADDDrr renamable $d0, renamable $d2, debug-location !335; ep.c:217:25
  Ready @21c
  *** Max MOps 1 at cycle 21
Cycle: 22 TopQ.A
TopQ.A @22c
  Retired: 17
  Executed: 22c
  Critical: 17c, 17 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 18 
Queue TopQ.A: 17 
Pick Top ONLY1     
Scheduling SU(17) STPDi renamable $d0, renamable $d3, $fp, -18, debug-location !332 :: (store 8 into %ir.sx), (store 8 into %ir.sy); ep.c:216:20
  Ready @22c
  *** Max MOps 1 at cycle 22
Cycle: 23 TopQ.A
TopQ.A @23c
  Retired: 18
  Executed: 23c
  Critical: 18c, 18 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 24 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 18 
Pick Top ONLY1     
Scheduling SU(18) renamable $d1 = FADDDrr renamable $d1, renamable $d8, debug-location !325; ep.c:215:29
  Ready @24c
  TopQ.A TopLatency SU(18) 18c
  *** Max MOps 1 at cycle 24
Cycle: 25 TopQ.A
TopQ.A @25c
  Retired: 19
  Executed: 25c
  Critical: 19c, 19 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 19 
Pick Top ONLY1     
Scheduling SU(19) STRDroX renamable $d1, renamable $x20, renamable $x8, 0, 0, debug-location !328 :: (store 8 into %ir.arrayidx106); ep.c:215:22
  Ready @25c
  TopQ.A TopLatency SU(19) 19c
  *** Max MOps 1 at cycle 25
Cycle: 26 TopQ.A
TopQ.A @26c
  Retired: 20
  Executed: 26c
  Critical: 20c, 20 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.35 ***
SU(0):   renamable $d2, renamable $d1 = LDPDi $fp, -16, debug-location !313 :: (dereferenceable load 8 from %ir.x1), (dereferenceable load 8 from %ir.x2); ep.c:212:23
SU(1):   renamable $d1 = FMULDrr renamable $d1, renamable $d0, debug-location !315; ep.c:212:26
SU(2):   renamable $d2 = FMULDrr renamable $d2, renamable $d0, debug-location !319; ep.c:213:26
SU(3):   renamable $d3 = FABSDr renamable $d1, debug-location !321; ep.c:214:21
SU(4):   renamable $d4 = FABSDr renamable $d2, debug-location !321; ep.c:214:21
SU(5):   FCMPDrr renamable $d3, renamable $d4, implicit-def $nzcv, debug-location !321; ep.c:214:21
SU(6):   STPDi renamable $d1, renamable $d0, $fp, -13, debug-location !312 :: (store 8 into %ir.t2), (store 8 into %ir.t3); ep.c:211:20
SU(7):   renamable $d0, renamable $d3 = LDPDi $fp, -18, debug-location !329 :: (dereferenceable load 8 from %ir.sx), (dereferenceable load 8 from %ir.sy); ep.c:216:22
SU(15):   STURDi renamable $d2, $fp, -112, debug-location !320 :: (store 8 into %ir.t4); ep.c:213:20
SU(8):   renamable $d3 = FADDDrr renamable $d3, renamable $d1, debug-location !331; ep.c:216:25
SU(9):   renamable $d1 = FCSELDrrr renamable $d1, renamable $d2, 12, implicit $nzcv, debug-location !321; ep.c:214:21
SU(10):   renamable $d1 = FABSDr renamable $d1, debug-location !321; ep.c:214:21
SU(11):   renamable $w8 = FCVTZSUWDr renamable $d1, implicit-def $x8, debug-location !321; ep.c:214:21
SU(12):   STRWui renamable $w8, $sp, 39, debug-location !322 :: (store 4 into %ir.l); ep.c:214:19
SU(13):   renamable $x8 = SBFMXri renamable $x8, 61, 31, debug-location !324; ep.c:215:24
SU(14):   renamable $d1 = LDRDroX renamable $x20, renamable $x8, 0, 0, debug-location !324 :: (load 8 from %ir.arrayidx103); ep.c:215:24
SU(16):   renamable $d0 = FADDDrr renamable $d0, renamable $d2, debug-location !335; ep.c:217:25
SU(17):   STPDi renamable $d0, renamable $d3, $fp, -18, debug-location !332 :: (store 8 into %ir.sx), (store 8 into %ir.sy); ep.c:216:20
SU(18):   renamable $d1 = FADDDrr renamable $d1, renamable $d8, debug-location !325; ep.c:215:29
SU(19):   STRDroX renamable $d1, renamable $x20, renamable $x8, 0, 0, debug-location !328 :: (store 8 into %ir.arrayidx106); ep.c:215:22

Fixup kills for %bb.35
********** MI Scheduling **********
main:%bb.36 for.inc110
  From: renamable $w8 = LDRWui $sp, 42, debug-location !338 :: (dereferenceable load 4 from %ir.i); ep.c:206:30
    To: B %bb.31
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 42, debug-location !338 :: (dereferenceable load 4 from %ir.i); ep.c:206:30
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !338; ep.c:206:30
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STRWui renamable $w8, $sp, 42, debug-location !338 :: (store 4 into %ir.i); ep.c:206:30
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.31
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 42, debug-location !338 :: (dereferenceable load 4 from %ir.i); ep.c:206:30
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !338; ep.c:206:30
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w8, $sp, 42, debug-location !338 :: (store 4 into %ir.i); ep.c:206:30
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.36 ***
SU(0):   renamable $w8 = LDRWui $sp, 42, debug-location !338 :: (dereferenceable load 4 from %ir.i); ep.c:206:30
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !338; ep.c:206:30
SU(2):   STRWui renamable $w8, $sp, 42, debug-location !338 :: (store 4 into %ir.i); ep.c:206:30

Fixup kills for %bb.36
Fixup kills for %bb.37
Fixup kills for %bb.38
********** MI Scheduling **********
main:%bb.39 for.inc116
  From: renamable $w8 = LDRWui $sp, 38, debug-location !346 :: (dereferenceable load 4 from %ir.k); ep.c:172:27
    To: B %bb.17
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 38, debug-location !346 :: (dereferenceable load 4 from %ir.k); ep.c:172:27
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !346; ep.c:172:27
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STRWui renamable $w8, $sp, 38, debug-location !346 :: (store 4 into %ir.k); ep.c:172:27
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.17
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 38, debug-location !346 :: (dereferenceable load 4 from %ir.k); ep.c:172:27
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !346; ep.c:172:27
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w8, $sp, 38, debug-location !346 :: (store 4 into %ir.k); ep.c:172:27
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.39 ***
SU(0):   renamable $w8 = LDRWui $sp, 38, debug-location !346 :: (dereferenceable load 4 from %ir.k); ep.c:172:27
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !346; ep.c:172:27
SU(2):   STRWui renamable $w8, $sp, 38, debug-location !346 :: (store 4 into %ir.k); ep.c:172:27

Fixup kills for %bb.39
Fixup kills for %bb.40
********** MI Scheduling **********
main:%bb.41 for.cond119
  From: renamable $w8 = LDRWui $sp, 42, debug-location !353 :: (dereferenceable load 4 from %ir.i); ep.c:225:17
    To: Bcc 12, %bb.43, implicit $nzcv, debug-location !356; ep.c:225:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 42, debug-location !353 :: (dereferenceable load 4 from %ir.i); ep.c:225:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 9, 0, implicit-def $nzcv, debug-location !356; ep.c:225:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.43, implicit $nzcv, debug-location !356; ep.c:225:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 42, debug-location !353 :: (dereferenceable load 4 from %ir.i); ep.c:225:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 9, 0, implicit-def $nzcv, debug-location !356; ep.c:225:5
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.41 ***
SU(0):   renamable $w8 = LDRWui $sp, 42, debug-location !353 :: (dereferenceable load 4 from %ir.i); ep.c:225:17
SU(1):   dead $wzr = SUBSWri renamable $w8, 9, 0, implicit-def $nzcv, debug-location !356; ep.c:225:5

Fixup kills for %bb.41
********** MI Scheduling **********
main:%bb.42 for.body122
  From: renamable $x8 = LDRSWui $sp, 42, debug-location !359 :: (dereferenceable load 4 from %ir.i); ep.c:226:21
    To: B %bb.41
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRSWui $sp, 42, debug-location !359 :: (dereferenceable load 4 from %ir.i); ep.c:226:21
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w8
    SU(3): Data Latency=0 Reg=$x8
    SU(2): Data Latency=4 Reg=$x8
    SU(6): Ord  Latency=0 Memory
SU(1):   renamable $d0 = LDURDi $fp, -176, debug-location !357 :: (dereferenceable load 8 from %ir.gc); ep.c:226:14
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d0
    SU(5): Ord  Latency=0 Memory
SU(2):   renamable $d1 = LDRDroX renamable $x20, renamable $x8, 0, 1, debug-location !360 :: (load 8 from %ir.arrayidx124); ep.c:226:19
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(4): Data Latency=4 Reg=$d1
    SU(3): Anti Latency=0
SU(3):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8, debug-location !363; ep.c:225:26
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
    SU(0): Data Latency=0 Reg=$x8
  Successors:
    SU(6): Data Latency=1 Reg=$w8
SU(4):   renamable $d0 = FADDDrr renamable $d0, renamable $d1, debug-location !361; ep.c:226:17
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=$d1
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$d0
  Successors:
    SU(5): Data Latency=1 Reg=$d0
SU(5):   STURDi renamable $d0, $fp, -176, debug-location !362 :: (store 8 into %ir.gc); ep.c:226:12
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=$d0
    SU(1): Ord  Latency=0 Memory
SU(6):   STRWui renamable $w8, $sp, 42, debug-location !363 :: (store 4 into %ir.i); ep.c:225:26
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.41
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 9
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 9
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDRSWui $sp, 42, debug-location !359 :: (dereferenceable load 4 from %ir.i); ep.c:226:21
  Ready @0c
  TopQ.A BotLatency SU(0) 9c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $d0 = LDURDi $fp, -176, debug-location !357 :: (dereferenceable load 8 from %ir.gc); ep.c:226:14
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $d1 = LDRDroX renamable $x20, renamable $x8, 0, 1, debug-location !360 :: (load 8 from %ir.arrayidx124); ep.c:226:19
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8, debug-location !363; ep.c:225:26
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) STRWui renamable $w8, $sp, 42, debug-location !363 :: (store 4 into %ir.i); ep.c:225:26
  Ready @6c
  TopQ.A TopLatency SU(6) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 8 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $d0 = FADDDrr renamable $d0, renamable $d1, debug-location !361; ep.c:226:17
  Ready @8c
  TopQ.A TopLatency SU(4) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) STURDi renamable $d0, $fp, -176, debug-location !362 :: (store 8 into %ir.gc); ep.c:226:12
  Ready @9c
  TopQ.A TopLatency SU(5) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 7
  Executed: 10c
  Critical: 7c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.42 ***
SU(0):   renamable $x8 = LDRSWui $sp, 42, debug-location !359 :: (dereferenceable load 4 from %ir.i); ep.c:226:21
SU(1):   renamable $d0 = LDURDi $fp, -176, debug-location !357 :: (dereferenceable load 8 from %ir.gc); ep.c:226:14
SU(2):   renamable $d1 = LDRDroX renamable $x20, renamable $x8, 0, 1, debug-location !360 :: (load 8 from %ir.arrayidx124); ep.c:226:19
SU(3):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8, debug-location !363; ep.c:225:26
SU(6):   STRWui renamable $w8, $sp, 42, debug-location !363 :: (store 4 into %ir.i); ep.c:225:26
SU(4):   renamable $d0 = FADDDrr renamable $d0, renamable $d1, debug-location !361; ep.c:226:17
SU(5):   STURDi renamable $d0, $fp, -176, debug-location !362 :: (store 8 into %ir.gc); ep.c:226:12

Fixup kills for %bb.42
********** MI Scheduling **********
main:%bb.43 do.end130
  From: STURDi killed renamable $d0, $fp, -152, debug-location !369 :: (store 8 into %ir.tm); ep.c:232:8
    To: CBZW killed renamable $w8, %bb.45, debug-location !381; ep.c:268:9
 RegionInstrs: 14
ScheduleDAGMI::schedule starting
SU(0):   STURDi renamable $d0, $fp, -152, debug-location !369 :: (store 8 into %ir.tm); ep.c:232:8
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   STRWui $wzr, $sp, 37, debug-location !370 :: (store 4 into %ir.nit); ep.c:234:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   $w8 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(11): Data Latency=1 Reg=$w8
SU(3):   $x9 = MOVZXi 40811, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x9
SU(4):   $x9 = MOVKXi $x9(tied-def 0), 63804, 16
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x9
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x9
SU(5):   $x9 = MOVKXi $x9(tied-def 0), 45636, 32
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x9
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x9
SU(6):   $x9 = MOVKXi $x9(tied-def 0), 16611, 48
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x9
  Successors:
    SU(12): Data Latency=1 Reg=$x9
SU(7):   $x10 = MOVZXi 50165, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x10
SU(8):   $x10 = MOVKXi $x10(tied-def 0), 18572, 16
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x10
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x10
SU(9):   $x10 = MOVKXi $x10(tied-def 0), 64428, 32
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x10
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x10
SU(10):   $x10 = MOVKXi $x10(tied-def 0), 49369, 48
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x10
  Successors:
    SU(13): Data Latency=1 Reg=$x10
SU(11):   STRWui renamable $w8, $sp, 34, debug-location !371 :: (store 4 into %ir.verified); ep.c:235:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=$w8
SU(12):   STURXi renamable $x9, $fp, -184, debug-location !372 :: (store 8 into %ir.sx_verify_value); ep.c:249:25
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=$x9
SU(13):   STRXui renamable $x10, $sp, 24, debug-location !378 :: (store 8 into %ir.sy_verify_value); ep.c:250:25
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=$x10
ExitSU:   CBZW killed renamable $w8, %bb.45, debug-location !381; ep.c:268:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 7 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
  Cand SU(3) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) $x9 = MOVZXi 40811, 0
  Ready @0c
  TopQ.A BotLatency SU(3) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 7 4 
  TopQ.A RemainingLatency 0 + 1c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
  Cand SU(7) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) $x10 = MOVZXi 50165, 0
  Ready @1c
  TopQ.A BotLatency SU(7) 4c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 4 8 
  TopQ.A RemainingLatency 0 + 2c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
  Cand SU(4) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) $x9 = MOVKXi $x9(tied-def 0), 63804, 16
  Ready @2c
  TopQ.A TopLatency SU(4) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 8 5 
  TopQ.A RemainingLatency 0 + 3c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
  Cand SU(8) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) $x10 = MOVKXi $x10(tied-def 0), 18572, 16
  Ready @3c
  TopQ.A BotLatency SU(8) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 5 9 
  TopQ.A RemainingLatency 0 + 4c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
  Cand SU(5) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) $x9 = MOVKXi $x9(tied-def 0), 45636, 32
  Ready @4c
  TopQ.A TopLatency SU(5) 2c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 9 6 
  TopQ.A RemainingLatency 0 + 5c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
  Cand SU(9) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(9) $x10 = MOVKXi $x10(tied-def 0), 64428, 32
  Ready @5c
  TopQ.A BotLatency SU(9) 2c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 6 10 
  TopQ.A RemainingLatency 0 + 6c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $w8 = MOVZWi 1, 0
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 6 11 
  TopQ.A RemainingLatency 0 + 7c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(10) TOP-PATH                  1 cycles 
  Cand SU(6) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(6) $x9 = MOVKXi $x9(tied-def 0), 16611, 48
  Ready @7c
  TopQ.A TopLatency SU(6) 3c
  TopQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 11 12 
  TopQ.A RemainingLatency 0 + 8c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(10) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(10) $x10 = MOVKXi $x10(tied-def 0), 49369, 48
  Ready @8c
  TopQ.A BotLatency SU(10) 1c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 12 11 13 
  TopQ.A RemainingLatency 0 + 9c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STURDi renamable $d0, $fp, -152, debug-location !369 :: (store 8 into %ir.tm); ep.c:232:8
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 1 12 11 
  TopQ.A RemainingLatency 0 + 10c > CritPath 4
  Cand SU(13) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) STRWui $wzr, $sp, 37, debug-location !370 :: (store 4 into %ir.nit); ep.c:234:9
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 11 12 
  TopQ.A RemainingLatency 0 + 11c > CritPath 4
  Cand SU(13) ORDER                              
  Cand SU(11) ORDER                              
Pick Top ORDER     
Scheduling SU(11) STRWui renamable $w8, $sp, 34, debug-location !371 :: (store 4 into %ir.verified); ep.c:235:14
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 12 
  TopQ.A RemainingLatency 0 + 12c > CritPath 4
  Cand SU(13) ORDER                              
  Cand SU(12) ORDER                              
Pick Top ORDER     
Scheduling SU(12) STURXi renamable $x9, $fp, -184, debug-location !372 :: (store 8 into %ir.sx_verify_value); ep.c:249:25
  Ready @12c
  TopQ.A TopLatency SU(12) 4c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 
Pick Top ONLY1     
Scheduling SU(13) STRXui renamable $x10, $sp, 24, debug-location !378 :: (store 8 into %ir.sy_verify_value); ep.c:250:25
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.43 ***
SU(3):   $x9 = MOVZXi 40811, 0
SU(7):   $x10 = MOVZXi 50165, 0
SU(4):   $x9 = MOVKXi $x9(tied-def 0), 63804, 16
SU(8):   $x10 = MOVKXi $x10(tied-def 0), 18572, 16
SU(5):   $x9 = MOVKXi $x9(tied-def 0), 45636, 32
SU(9):   $x10 = MOVKXi $x10(tied-def 0), 64428, 32
SU(2):   $w8 = MOVZWi 1, 0
SU(6):   $x9 = MOVKXi $x9(tied-def 0), 16611, 48
SU(10):   $x10 = MOVKXi $x10(tied-def 0), 49369, 48
SU(0):   STURDi renamable $d0, $fp, -152, debug-location !369 :: (store 8 into %ir.tm); ep.c:232:8
SU(1):   STRWui $wzr, $sp, 37, debug-location !370 :: (store 4 into %ir.nit); ep.c:234:9
SU(11):   STRWui renamable $w8, $sp, 34, debug-location !371 :: (store 4 into %ir.verified); ep.c:235:14
SU(12):   STURXi renamable $x9, $fp, -184, debug-location !372 :: (store 8 into %ir.sx_verify_value); ep.c:249:25
SU(13):   STRXui renamable $x10, $sp, 24, debug-location !378 :: (store 8 into %ir.sy_verify_value); ep.c:250:25

Fixup kills for %bb.43
********** MI Scheduling **********
main:%bb.44 if.then133
  From: renamable $d2, renamable $d0 = LDPDi $fp, -18, debug-location !382 :: (dereferenceable load 8 from %ir.sx), (dereferenceable load 8 from %ir.sy); ep.c:269:24
    To: End RegionInstrs: 18
ScheduleDAGMI::schedule starting
SU(0):   renamable $d2, renamable $d0 = LDPDi $fp, -18, debug-location !382 :: (dereferenceable load 8 from %ir.sx), (dereferenceable load 8 from %ir.sy); ep.c:269:24
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(8): Out  Latency=1
    SU(6): Data Latency=4 Reg=$d2
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d0
SU(1):   renamable $d1 = LDURDi $fp, -184, debug-location !384 :: (dereferenceable load 8 from %ir.sx_verify_value); ep.c:269:29
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(6): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d1
    SU(3): Data Latency=4 Reg=$d1
SU(2):   renamable $d3 = LDRDui $sp, 24, debug-location !391 :: (dereferenceable load 8 from %ir.sy_verify_value); ep.c:270:29
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(7): Data Latency=4 Reg=$d3
    SU(6): Data Latency=4 Reg=$d3
SU(3):   renamable $d0 = FSUBDrr renamable $d0, renamable $d1, debug-location !385; ep.c:269:27
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(1): Data Latency=4 Reg=$d1
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d0
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$d0
    SU(6): Anti Latency=0
SU(4):   renamable $d0 = FDIVDrr renamable $d0, renamable $d1, debug-location !387; ep.c:269:46
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$d0
    SU(1): Data Latency=4 Reg=$d1
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$d0
    SU(6): Anti Latency=0
SU(5):   renamable $x8 = ADRP target-flags(aarch64-page) %const.1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 9
  Successors:
    SU(13): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x8
SU(6):   renamable $d1 = FSUBDrr renamable $d2, renamable $d3, debug-location !392; ep.c:270:27
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(4): Anti Latency=0
    SU(3): Anti Latency=0
    SU(2): Data Latency=4 Reg=$d3
    SU(1): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d2
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$d1
    SU(8): Anti Latency=0
SU(7):   renamable $d1 = FDIVDrr renamable $d1, renamable $d3, debug-location !394; ep.c:270:46
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 5
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$d1
    SU(2): Data Latency=4 Reg=$d3
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$d1
SU(8):   renamable $d2 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(6): Anti Latency=0
    SU(5): Data Latency=1 Reg=$x8
    SU(0): Out  Latency=1
  Successors:
    SU(14): Data Latency=4 Reg=$d2
    SU(12): Data Latency=4 Reg=$d2
    SU(13): Anti Latency=0
SU(9):   renamable $d0 = FABSDr renamable $d0, debug-location !388; ep.c:269:18
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 5
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$d0
  Successors:
    SU(12): Data Latency=1 Reg=$d0
    SU(11): Data Latency=1 Reg=$d0
SU(10):   renamable $d1 = FABSDr renamable $d1, debug-location !395; ep.c:270:18
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 4
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$d1
  Successors:
    SU(14): Data Latency=1 Reg=$d1
    SU(11): Data Latency=1 Reg=$d1
SU(11):   STPDi renamable $d1, renamable $d0, $sp, 22, debug-location !389 :: (store 8 into %ir.sx_err), (store 8 into %ir.sy_err); ep.c:269:16
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=$d1
    SU(9): Data Latency=1 Reg=$d0
SU(12):   FCMPDrr renamable $d0, renamable $d2, implicit-def $nzcv, debug-location !398; ep.c:271:29
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(9): Data Latency=1 Reg=$d0
    SU(8): Data Latency=4 Reg=$d2
  Successors:
    SU(14): Out  Latency=1
    SU(13): Data Latency=1 Reg=$nzcv
SU(13):   renamable $w8 = CSINCWr $wzr, $wzr, 8, implicit $nzcv, debug-location !398; ep.c:271:29
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 3
  Predecessors:
    SU(12): Data Latency=1 Reg=$nzcv
    SU(8): Anti Latency=0
    SU(5): Out  Latency=1
  Successors:
    SU(16): Out  Latency=1
    SU(16): Data Latency=1 Reg=$w8
    SU(14): Anti Latency=0
SU(14):   FCMPDrr renamable $d1, renamable $d2, implicit-def $nzcv, debug-location !399; ep.c:271:41
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 3
  Predecessors:
    SU(13): Anti Latency=0
    SU(12): Out  Latency=1
    SU(10): Data Latency=1 Reg=$d1
    SU(8): Data Latency=4 Reg=$d2
  Successors:
    SU(15): Data Latency=1 Reg=$nzcv
SU(15):   renamable $w9 = CSINCWr $wzr, $wzr, 8, implicit $nzcv, debug-location !399; ep.c:271:41
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 2
  Predecessors:
    SU(14): Data Latency=1 Reg=$nzcv
  Successors:
    SU(16): Data Latency=1 Reg=$w9
SU(16):   $w8 = ANDWrs renamable $w8, renamable $w9, 0, debug-location !399; ep.c:271:41
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 1
  Predecessors:
    SU(15): Data Latency=1 Reg=$w9
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$w8
  Successors:
    SU(17): Data Latency=1 Reg=$w8
SU(17):   STRWui renamable $w8, $sp, 34, debug-location !400 :: (store 4 into %ir.verified); ep.c:271:18
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(16): Data Latency=1 Reg=$w8
Critical Path: (PGS-RR) 13
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 5 
  TopQ.A RemainingLatency 0 + 0c > CritPath 13
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d2, renamable $d0 = LDPDi $fp, -18, debug-location !382 :: (dereferenceable load 8 from %ir.sx), (dereferenceable load 8 from %ir.sy); ep.c:269:24
  Ready @0c
  TopQ.A BotLatency SU(0) 13c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 13
  Cand SU(5) ORDER                              
  Cand SU(1) TOP-PATH                  13 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d1 = LDURDi $fp, -184, debug-location !384 :: (dereferenceable load 8 from %ir.sx_verify_value); ep.c:269:29
  Ready @1c
  TopQ.A BotLatency SU(1) 13c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 5 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 13
  Cand SU(5) ORDER                              
  Cand SU(2) TOP-PATH                  12 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d3 = LDRDui $sp, 24, debug-location !391 :: (dereferenceable load 8 from %ir.sy_verify_value); ep.c:270:29
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $x8 = ADRP target-flags(aarch64-page) %const.1
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $d0 = FSUBDrr renamable $d0, renamable $d1, debug-location !385; ep.c:269:27
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $d0 = FDIVDrr renamable $d0, renamable $d1, debug-location !387; ep.c:269:46
  Ready @6c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 6 
  TopQ.A RemainingLatency 0 + 7c > CritPath 13
  Cand SU(9) ORDER                              
  Cand SU(6) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) renamable $d1 = FSUBDrr renamable $d2, renamable $d3, debug-location !392; ep.c:270:27
  Ready @7c
  TopQ.A BotLatency SU(6) 8c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 7 8 
  TopQ.A RemainingLatency 0 + 8c > CritPath 13
  Cand SU(9) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $d2 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  Ready @8c
  TopQ.A BotLatency SU(8) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 8
  Executed: 9c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 7 
  TopQ.A RemainingLatency 0 + 9c > CritPath 13
  Cand SU(9) ORDER                              
  Cand SU(7) ORDER                              
Pick Top ORDER     
Scheduling SU(7) renamable $d1 = FDIVDrr renamable $d1, renamable $d3, debug-location !394; ep.c:270:46
  Ready @9c
  TopQ.A TopLatency SU(7) 6c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 9
  Executed: 10c
  Critical: 9c, 9 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 10 
  TopQ.A RemainingLatency 0 + 10c > CritPath 13
  Cand SU(9) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(9) renamable $d0 = FABSDr renamable $d0, debug-location !388; ep.c:269:18
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 10
  Executed: 11c
  Critical: 10c, 10 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 12 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) renamable $d1 = FABSDr renamable $d1, debug-location !395; ep.c:270:18
  Ready @11c
  TopQ.A TopLatency SU(10) 7c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 11
  Executed: 12c
  Critical: 11c, 11 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 12 
  TopQ.A RemainingLatency 0 + 12c > CritPath 13
  Cand SU(11) ORDER                              
  Cand SU(12) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(12) FCMPDrr renamable $d0, renamable $d2, implicit-def $nzcv, debug-location !398; ep.c:271:29
  Ready @12c
  TopQ.A TopLatency SU(12) 9c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 12
  Executed: 13c
  Critical: 12c, 12 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 13 
  TopQ.A RemainingLatency 0 + 13c > CritPath 13
  Cand SU(11) ORDER                              
  Cand SU(13) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(13) renamable $w8 = CSINCWr $wzr, $wzr, 8, implicit $nzcv, debug-location !398; ep.c:271:29
  Ready @13c
  TopQ.A TopLatency SU(13) 10c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 13
  Executed: 14c
  Critical: 13c, 13 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 14 
  TopQ.A RemainingLatency 0 + 14c > CritPath 13
  Cand SU(11) ORDER                              
  Cand SU(14) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(14) FCMPDrr renamable $d1, renamable $d2, implicit-def $nzcv, debug-location !399; ep.c:271:41
  Ready @14c
  TopQ.A BotLatency SU(14) 3c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 14
  Executed: 15c
  Critical: 14c, 14 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 15 
  TopQ.A RemainingLatency 0 + 15c > CritPath 13
  Cand SU(11) ORDER                              
  Cand SU(15) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(15) renamable $w9 = CSINCWr $wzr, $wzr, 8, implicit $nzcv, debug-location !399; ep.c:271:41
  Ready @15c
  TopQ.A TopLatency SU(15) 11c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 15
  Executed: 16c
  Critical: 15c, 15 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 16 
  TopQ.A RemainingLatency 0 + 16c > CritPath 13
  Cand SU(11) ORDER                              
  Cand SU(16) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(16) $w8 = ANDWrs renamable $w8, renamable $w9, 0, debug-location !399; ep.c:271:41
  Ready @16c
  TopQ.A TopLatency SU(16) 12c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 16
  Executed: 17c
  Critical: 16c, 16 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 17 
  TopQ.A RemainingLatency 0 + 17c > CritPath 13
  Cand SU(11) ORDER                              
Pick Top ORDER     
Scheduling SU(11) STPDi renamable $d1, renamable $d0, $sp, 22, debug-location !389 :: (store 8 into %ir.sx_err), (store 8 into %ir.sy_err); ep.c:269:16
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 17
  Executed: 18c
  Critical: 17c, 17 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 17 
Pick Top ONLY1     
Scheduling SU(17) STRWui renamable $w8, $sp, 34, debug-location !400 :: (store 4 into %ir.verified); ep.c:271:18
  Ready @18c
  TopQ.A TopLatency SU(17) 13c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 18
  Executed: 19c
  Critical: 18c, 18 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   renamable $d2, renamable $d0 = LDPDi $fp, -18, debug-location !382 :: (dereferenceable load 8 from %ir.sx), (dereferenceable load 8 from %ir.sy); ep.c:269:24
SU(1):   renamable $d1 = LDURDi $fp, -184, debug-location !384 :: (dereferenceable load 8 from %ir.sx_verify_value); ep.c:269:29
SU(2):   renamable $d3 = LDRDui $sp, 24, debug-location !391 :: (dereferenceable load 8 from %ir.sy_verify_value); ep.c:270:29
SU(5):   renamable $x8 = ADRP target-flags(aarch64-page) %const.1
SU(3):   renamable $d0 = FSUBDrr renamable $d0, renamable $d1, debug-location !385; ep.c:269:27
SU(4):   renamable $d0 = FDIVDrr renamable $d0, renamable $d1, debug-location !387; ep.c:269:46
SU(6):   renamable $d1 = FSUBDrr renamable $d2, renamable $d3, debug-location !392; ep.c:270:27
SU(8):   renamable $d2 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
SU(7):   renamable $d1 = FDIVDrr renamable $d1, renamable $d3, debug-location !394; ep.c:270:46
SU(9):   renamable $d0 = FABSDr renamable $d0, debug-location !388; ep.c:269:18
SU(10):   renamable $d1 = FABSDr renamable $d1, debug-location !395; ep.c:270:18
SU(12):   FCMPDrr renamable $d0, renamable $d2, implicit-def $nzcv, debug-location !398; ep.c:271:29
SU(13):   renamable $w8 = CSINCWr $wzr, $wzr, 8, implicit $nzcv, debug-location !398; ep.c:271:29
SU(14):   FCMPDrr renamable $d1, renamable $d2, implicit-def $nzcv, debug-location !399; ep.c:271:41
SU(15):   renamable $w9 = CSINCWr $wzr, $wzr, 8, implicit $nzcv, debug-location !399; ep.c:271:41
SU(16):   $w8 = ANDWrs renamable $w8, renamable $w9, 0, debug-location !399; ep.c:271:41
SU(11):   STPDi renamable $d1, renamable $d0, $sp, 22, debug-location !389 :: (store 8 into %ir.sx_err), (store 8 into %ir.sy_err); ep.c:269:16
SU(17):   STRWui renamable $w8, $sp, 34, debug-location !400 :: (store 4 into %ir.verified); ep.c:271:18

Fixup kills for %bb.44
********** MI Scheduling **********
main:%bb.45 if.end142
  From: STRWui $wzr, $sp, 42, debug-location !417 :: (store 4 into %ir.i); ep.c:282:12
    To: End RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   STRWui $wzr, $sp, 42, debug-location !417 :: (store 4 into %ir.i); ep.c:282:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $x19 = ADRP target-flags(aarch64-page) @.str.11
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x19
SU(2):   renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str.11, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $x19 = ADRP target-flags(aarch64-page) @.str.11
  Ready @0c
  TopQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str.11, 0
  Ready @1c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STRWui $wzr, $sp, 42, debug-location !417 :: (store 4 into %ir.i); ep.c:282:12
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.45 ***
SU(1):   $x19 = ADRP target-flags(aarch64-page) @.str.11
SU(2):   renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str.11, 0
SU(0):   STRWui $wzr, $sp, 42, debug-location !417 :: (store 4 into %ir.i); ep.c:282:12

********** MI Scheduling **********
main:%bb.45 if.end142
  From: $x0 = ADRP target-flags(aarch64-page) @.str.10, debug-location !416; ep.c:281:5
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !416; ep.c:281:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.10, debug-location !416; ep.c:281:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.10, 0, debug-location !416; ep.c:281:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !416; ep.c:281:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @.str.10, debug-location !416; ep.c:281:5
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.10, 0, debug-location !416; ep.c:281:5
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.10, debug-location !416; ep.c:281:5
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.10, 0, debug-location !416; ep.c:281:5

********** MI Scheduling **********
main:%bb.45 if.end142
  From: renamable $d1, renamable $d0 = LDPDi $fp, -18, debug-location !413 :: (dereferenceable load 8 from %ir.sx), (dereferenceable load 8 from %ir.sy); ep.c:280:42
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w0, debug-location !415; ep.c:280:5
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $d1, renamable $d0 = LDPDi $fp, -18, debug-location !413 :: (dereferenceable load 8 from %ir.sx), (dereferenceable load 8 from %ir.sy); ep.c:280:42
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(1):   $x0 = ADRP target-flags(aarch64-page) @.str.9, debug-location !415; ep.c:280:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
SU(2):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.9, 0, debug-location !415; ep.c:280:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w0, debug-location !415; ep.c:280:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d1, renamable $d0 = LDPDi $fp, -18, debug-location !413 :: (dereferenceable load 8 from %ir.sx), (dereferenceable load 8 from %ir.sy); ep.c:280:42
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ADRP target-flags(aarch64-page) @.str.9, debug-location !415; ep.c:280:5
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.9, 0, debug-location !415; ep.c:280:5
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   renamable $d1, renamable $d0 = LDPDi $fp, -18, debug-location !413 :: (dereferenceable load 8 from %ir.sx), (dereferenceable load 8 from %ir.sy); ep.c:280:42
SU(1):   $x0 = ADRP target-flags(aarch64-page) @.str.9, debug-location !415; ep.c:280:5
SU(2):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.9, 0, debug-location !415; ep.c:280:5

********** MI Scheduling **********
main:%bb.45 if.end142
  From: renamable $d0 = LDURDi $fp, -176, debug-location !411 :: (dereferenceable load 8 from %ir.gc); ep.c:279:46
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !412; ep.c:279:5
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDURDi $fp, -176, debug-location !411 :: (dereferenceable load 8 from %ir.gc); ep.c:279:46
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(1):   $x0 = ADRP target-flags(aarch64-page) @.str.8, debug-location !412; ep.c:279:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
SU(2):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.8, 0, debug-location !412; ep.c:279:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !412; ep.c:279:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0 = LDURDi $fp, -176, debug-location !411 :: (dereferenceable load 8 from %ir.gc); ep.c:279:46
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ADRP target-flags(aarch64-page) @.str.8, debug-location !412; ep.c:279:5
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.8, 0, debug-location !412; ep.c:279:5
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   renamable $d0 = LDURDi $fp, -176, debug-location !411 :: (dereferenceable load 8 from %ir.gc); ep.c:279:46
SU(1):   $x0 = ADRP target-flags(aarch64-page) @.str.8, debug-location !412; ep.c:279:5
SU(2):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.8, 0, debug-location !412; ep.c:279:5

********** MI Scheduling **********
main:%bb.45 if.end142
  From: $x0 = ADRP target-flags(aarch64-page) @.str.7, debug-location !410; ep.c:278:5
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !410; ep.c:278:5
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.7, debug-location !410; ep.c:278:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.7, 0, debug-location !410; ep.c:278:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $w1 = MOVZWi 30, 0, debug-location !410; ep.c:278:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !410; ep.c:278:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @.str.7, debug-location !410; ep.c:278:5
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.7, 0, debug-location !410; ep.c:278:5
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $w1 = MOVZWi 30, 0, debug-location !410; ep.c:278:5
  Ready @2c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.7, debug-location !410; ep.c:278:5
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.7, 0, debug-location !410; ep.c:278:5
SU(2):   $w1 = MOVZWi 30, 0, debug-location !410; ep.c:278:5

********** MI Scheduling **********
main:%bb.45 if.end142
  From: renamable $d0 = LDURDi $fp, -152, debug-location !408 :: (dereferenceable load 8 from %ir.tm); ep.c:277:35
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !409; ep.c:277:5
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDURDi $fp, -152, debug-location !408 :: (dereferenceable load 8 from %ir.tm); ep.c:277:35
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(1):   $x0 = ADRP target-flags(aarch64-page) @.str.6, debug-location !409; ep.c:277:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
SU(2):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.6, 0, debug-location !409; ep.c:277:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !409; ep.c:277:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0 = LDURDi $fp, -152, debug-location !408 :: (dereferenceable load 8 from %ir.tm); ep.c:277:35
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ADRP target-flags(aarch64-page) @.str.6, debug-location !409; ep.c:277:5
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.6, 0, debug-location !409; ep.c:277:5
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   renamable $d0 = LDURDi $fp, -152, debug-location !408 :: (dereferenceable load 8 from %ir.tm); ep.c:277:35
SU(1):   $x0 = ADRP target-flags(aarch64-page) @.str.6, debug-location !409; ep.c:277:5
SU(2):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.6, 0, debug-location !409; ep.c:277:5

********** MI Scheduling **********
main:%bb.45 if.end142
  From: renamable $d1 = LDURDi $fp, -152, debug-location !403 :: (dereferenceable load 8 from %ir.tm); ep.c:274:30
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !407; ep.c:276:5
 RegionInstrs: 9
ScheduleDAGMI::schedule starting
SU(0):   renamable $d1 = LDURDi $fp, -152, debug-location !403 :: (dereferenceable load 8 from %ir.tm); ep.c:274:30
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(4): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d1
SU(1):   $x8 = MOVZXi 33920, 32
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x8
SU(2):   $x8 = MOVKXi $x8(tied-def 0), 16686, 48
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    SU(4): Data Latency=1 Reg=$x8
SU(3):   renamable $d0 = FDIVDrr renamable $d0, renamable $d1, debug-location !404; ep.c:274:28
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(0): Data Latency=4 Reg=$d1
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$d0
    SU(4): Anti Latency=0
SU(4):   $d1 = FMOVXDr $x8
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(3): Anti Latency=0
    SU(2): Data Latency=1 Reg=$x8
    SU(0): Out  Latency=1
  Successors:
    SU(5): Data Latency=1 Reg=$d1
SU(5):   renamable $d0 = FDIVDrr renamable $d0, renamable $d1, debug-location !405; ep.c:274:33
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=$d1
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$d0
  Successors:
    SU(6): Data Latency=1 Reg=$d0
SU(6):   STURDi renamable $d0, $fp, -80, debug-location !406 :: (store 8 into %ir.Mops); ep.c:274:10
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=$d0
SU(7):   $x0 = ADRP target-flags(aarch64-page) @.str.5, debug-location !407; ep.c:276:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x0
SU(8):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.5, 0, debug-location !407; ep.c:276:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0, debug-location !407; ep.c:276:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 7 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d1 = LDURDi $fp, -152, debug-location !403 :: (dereferenceable load 8 from %ir.tm); ep.c:274:30
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 7 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(7) ORDER                              
  Cand SU(1) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $x8 = MOVZXi 33920, 32
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 7 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 6
  Cand SU(7) ORDER                              
  Cand SU(2) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x8 = MOVKXi $x8(tied-def 0), 16686, 48
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) $x0 = ADRP target-flags(aarch64-page) @.str.5, debug-location !407; ep.c:276:5
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 3 
  TopQ.A RemainingLatency 0 + 4c > CritPath 6
  Cand SU(8) ORDER                              
  Cand SU(3) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d0 = FDIVDrr renamable $d0, renamable $d1, debug-location !404; ep.c:274:28
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 4 
  TopQ.A RemainingLatency 0 + 5c > CritPath 6
  Cand SU(8) ORDER                              
  Cand SU(4) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) $d1 = FMOVXDr $x8
  Ready @5c
  TopQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 5 
  TopQ.A RemainingLatency 0 + 6c > CritPath 6
  Cand SU(8) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $d0 = FDIVDrr renamable $d0, renamable $d1, debug-location !405; ep.c:274:33
  Ready @6c
  TopQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 6 
  TopQ.A RemainingLatency 0 + 7c > CritPath 6
  Cand SU(8) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(8) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.5, 0, debug-location !407; ep.c:276:5
  Ready @7c
  TopQ.A BotLatency SU(8) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) STURDi renamable $d0, $fp, -80, debug-location !406 :: (store 8 into %ir.Mops); ep.c:274:10
  Ready @8c
  TopQ.A TopLatency SU(6) 6c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   renamable $d1 = LDURDi $fp, -152, debug-location !403 :: (dereferenceable load 8 from %ir.tm); ep.c:274:30
SU(1):   $x8 = MOVZXi 33920, 32
SU(2):   $x8 = MOVKXi $x8(tied-def 0), 16686, 48
SU(7):   $x0 = ADRP target-flags(aarch64-page) @.str.5, debug-location !407; ep.c:276:5
SU(3):   renamable $d0 = FDIVDrr renamable $d0, renamable $d1, debug-location !404; ep.c:274:28
SU(4):   $d1 = FMOVXDr $x8
SU(5):   renamable $d0 = FDIVDrr renamable $d0, renamable $d1, debug-location !405; ep.c:274:33
SU(8):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.5, 0, debug-location !407; ep.c:276:5
SU(6):   STURDi renamable $d0, $fp, -80, debug-location !406 :: (store 8 into %ir.Mops); ep.c:274:10

********** MI Scheduling **********
main:%bb.45 if.end142
  From: renamable $d0 = FMOVDi 0
    To: BL @pow, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $d1, implicit-def $sp, implicit-def $d0, debug-location !402; ep.c:274:12
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = FMOVDi 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(1):   renamable $d1 = FMOVDi 63
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @pow, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $d1, implicit-def $sp, implicit-def $d0, debug-location !402; ep.c:274:12
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $d0 = FMOVDi 0
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $d1 = FMOVDi 63
  Ready @1c
  TopQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   renamable $d0 = FMOVDi 0
SU(1):   renamable $d1 = FMOVDi 63

Fixup kills for %bb.45
********** MI Scheduling **********
main:%bb.46 for.cond152
  From: renamable $w8 = LDRWui $sp, 42, debug-location !420 :: (dereferenceable load 4 from %ir.i); ep.c:282:17
    To: Bcc 12, %bb.48, implicit $nzcv, debug-location !423; ep.c:282:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 42, debug-location !420 :: (dereferenceable load 4 from %ir.i); ep.c:282:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 9, 0, implicit-def $nzcv, debug-location !423; ep.c:282:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.48, implicit $nzcv, debug-location !423; ep.c:282:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 42, debug-location !420 :: (dereferenceable load 4 from %ir.i); ep.c:282:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 9, 0, implicit-def $nzcv, debug-location !423; ep.c:282:5
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.46 ***
SU(0):   renamable $w8 = LDRWui $sp, 42, debug-location !420 :: (dereferenceable load 4 from %ir.i); ep.c:282:17
SU(1):   dead $wzr = SUBSWri renamable $w8, 9, 0, implicit-def $nzcv, debug-location !423; ep.c:282:5

Fixup kills for %bb.46
********** MI Scheduling **********
main:%bb.47 for.body155
  From: renamable $w8 = LDRWui $sp, 42, debug-location !429 :: (dereferenceable load 4 from %ir.i); ep.c:282:26
    To: B %bb.46
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 42, debug-location !429 :: (dereferenceable load 4 from %ir.i); ep.c:282:26
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !429; ep.c:282:26
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STRWui renamable $w8, $sp, 42, debug-location !429 :: (store 4 into %ir.i); ep.c:282:26
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.46
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 42, debug-location !429 :: (dereferenceable load 4 from %ir.i); ep.c:282:26
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !429; ep.c:282:26
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w8, $sp, 42, debug-location !429 :: (store 4 into %ir.i); ep.c:282:26
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.47 ***
SU(0):   renamable $w8 = LDRWui $sp, 42, debug-location !429 :: (dereferenceable load 4 from %ir.i); ep.c:282:26
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !429; ep.c:282:26
SU(2):   STRWui renamable $w8, $sp, 42, debug-location !429 :: (store 4 into %ir.i); ep.c:282:26

********** MI Scheduling **********
main:%bb.47 for.body155
  From: renamable $x1 = LDRSWui $sp, 42, debug-location !424 :: (dereferenceable load 4 from %ir.i); ep.c:283:32
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !428; ep.c:283:9
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $x1 = LDRSWui $sp, 42, debug-location !424 :: (dereferenceable load 4 from %ir.i); ep.c:283:32
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=0 Reg=$w1
    SU(3): Data Latency=0 Reg=$x1
    SU(1): Data Latency=4 Reg=$x1
SU(1):   renamable $d0 = LDRDroX renamable $x20, renamable $x1, 0, 1, debug-location !427 :: (load 8 from %ir.arrayidx157); ep.c:283:35
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(3): Anti Latency=0
SU(2):   $x0 = ORRXrs $xzr, $x19, 0, debug-location !428; ep.c:283:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $w1 = KILL renamable $w1, implicit $x1, debug-location !428; ep.c:283:9
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=0 Reg=$w1
    SU(0): Data Latency=0 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=0 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp, implicit-def dead $w0, debug-location !428; ep.c:283:9
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 8
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 8
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x1 = LDRSWui $sp, 42, debug-location !424 :: (dereferenceable load 4 from %ir.i); ep.c:283:32
  Ready @0c
  TopQ.A BotLatency SU(0) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $x0 = ORRXrs $xzr, $x19, 0, debug-location !428; ep.c:283:9
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $d0 = LDRDroX renamable $x20, renamable $x1, 0, 1, debug-location !427 :: (load 8 from %ir.arrayidx157); ep.c:283:35
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $w1 = KILL renamable $w1, implicit $x1, debug-location !428; ep.c:283:9
  Ready @5c
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.47 ***
SU(0):   renamable $x1 = LDRSWui $sp, 42, debug-location !424 :: (dereferenceable load 4 from %ir.i); ep.c:283:32
SU(2):   $x0 = ORRXrs $xzr, $x19, 0, debug-location !428; ep.c:283:9
SU(1):   renamable $d0 = LDRDroX renamable $x20, renamable $x1, 0, 1, debug-location !427 :: (load 8 from %ir.arrayidx157); ep.c:283:35
SU(3):   $w1 = KILL renamable $w1, implicit $x1, debug-location !428; ep.c:283:9

Fixup kills for %bb.47
********** MI Scheduling **********
main:%bb.48 for.end161
  From: renamable $w5 = LDRWui $sp, 37, debug-location !433 :: (dereferenceable load 4 from %ir.nit); ep.c:286:45
    To: BL @print_results, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit $w4, implicit $w5, implicit $d0, implicit $d1, implicit $x6, implicit $w7, implicit-def $sp, debug-location !437; ep.c:286:5
 RegionInstrs: 35
ScheduleDAGMI::schedule starting
SU(0):   renamable $w5 = LDRWui $sp, 37, debug-location !433 :: (dereferenceable load 4 from %ir.nit); ep.c:286:45
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(1):   renamable $d0 = LDURDi $fp, -152, debug-location !434 :: (dereferenceable load 8 from %ir.tm); ep.c:286:50
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(2):   renamable $d1 = LDURDi $fp, -80, debug-location !435 :: (dereferenceable load 8 from %ir.Mops); ep.c:286:54
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(3):   renamable $w7 = LDRWui $sp, 34, debug-location !436 :: (dereferenceable load 4 from %ir.verified); ep.c:287:47
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(4):   $x8 = ADRP target-flags(aarch64-page) @.str.22, debug-location !437; ep.c:286:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x8
SU(5):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.22, 0, debug-location !437; ep.c:286:5
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x8
  Successors:
    SU(21): Out  Latency=1
    SU(20): Data Latency=1 Reg=$x8
SU(6):   $x9 = ADRP target-flags(aarch64-page) @.str.21, debug-location !437; ep.c:286:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x9
SU(7):   renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.21, 0, debug-location !437; ep.c:286:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x9
  Successors:
    SU(20): Data Latency=1 Reg=$x9
SU(8):   $x10 = ADRP target-flags(aarch64-page) @.str.20, debug-location !437; ep.c:286:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x10
SU(9):   renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.20, 0, debug-location !437; ep.c:286:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x10
  Successors:
    SU(23): Data Latency=1 Reg=$x10
SU(10):   $x11 = ADRP target-flags(aarch64-page) @.str.19, debug-location !437; ep.c:286:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x11
SU(11):   renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @.str.19, 0, debug-location !437; ep.c:286:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x11
  Successors:
    SU(23): Data Latency=1 Reg=$x11
SU(12):   $x12 = ADRP target-flags(aarch64-page) @.str.18, debug-location !437; ep.c:286:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x12
SU(13):   renamable $x12 = ADDXri $x12, target-flags(aarch64-pageoff, aarch64-nc) @.str.18, 0, debug-location !437; ep.c:286:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x12
  Successors:
    SU(26): Data Latency=1 Reg=$x12
SU(14):   $x13 = ADRP target-flags(aarch64-page) @.str.17, debug-location !437; ep.c:286:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(15): Out  Latency=1
    SU(15): Data Latency=1 Reg=$x13
SU(15):   renamable $x13 = ADDXri $x13, target-flags(aarch64-pageoff, aarch64-nc) @.str.17, 0, debug-location !437; ep.c:286:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(14): Out  Latency=1
    SU(14): Data Latency=1 Reg=$x13
  Successors:
    SU(26): Data Latency=1 Reg=$x13
SU(16):   $x14 = ADRP target-flags(aarch64-page) @.str.16, debug-location !437; ep.c:286:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(17): Out  Latency=1
    SU(17): Data Latency=1 Reg=$x14
SU(17):   renamable $x14 = ADDXri $x14, target-flags(aarch64-pageoff, aarch64-nc) @.str.16, 0, debug-location !437; ep.c:286:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(16): Out  Latency=1
    SU(16): Data Latency=1 Reg=$x14
  Successors:
    SU(29): Data Latency=1 Reg=$x14
SU(18):   $x15 = ADRP target-flags(aarch64-page) @.str.15, debug-location !437; ep.c:286:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(19): Out  Latency=1
    SU(19): Data Latency=1 Reg=$x15
SU(19):   renamable $x15 = ADDXri $x15, target-flags(aarch64-pageoff, aarch64-nc) @.str.15, 0, debug-location !437; ep.c:286:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(18): Out  Latency=1
    SU(18): Data Latency=1 Reg=$x15
  Successors:
    SU(29): Data Latency=1 Reg=$x15
SU(20):   STPXi renamable $x9, renamable $x8, $sp, 7, debug-location !437 :: (store 8 into stack + 64), (store 8 into stack + 56); ep.c:286:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(7): Data Latency=1 Reg=$x9
    SU(5): Data Latency=1 Reg=$x8
  Successors:
    SU(21): Anti Latency=0
SU(21):   $x8 = ADRP target-flags(aarch64-page) @.str.14, debug-location !437; ep.c:286:5
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(20): Anti Latency=0
    SU(5): Out  Latency=1
  Successors:
    SU(22): Out  Latency=1
    SU(22): Data Latency=1 Reg=$x8
SU(22):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.14, 0, debug-location !437; ep.c:286:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
    SU(21): Out  Latency=1
    SU(21): Data Latency=1 Reg=$x8
  Successors:
    SU(30): Data Latency=1 Reg=$x8
SU(23):   STPXi renamable $x11, renamable $x10, $sp, 5, debug-location !437 :: (store 8 into stack + 48), (store 8 into stack + 40); ep.c:286:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(11): Data Latency=1 Reg=$x11
    SU(9): Data Latency=1 Reg=$x10
SU(24):   $x0 = ADRP target-flags(aarch64-page) @.str.12, debug-location !437; ep.c:286:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(25): Out  Latency=1
    SU(25): Data Latency=1 Reg=$x0
SU(25):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.12, 0, debug-location !437; ep.c:286:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(24): Out  Latency=1
    SU(24): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(26):   STPXi renamable $x13, renamable $x12, $sp, 3, debug-location !437 :: (store 8 into stack + 32), (store 8 into stack + 24); ep.c:286:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(15): Data Latency=1 Reg=$x13
    SU(13): Data Latency=1 Reg=$x12
SU(27):   $x6 = ADRP target-flags(aarch64-page) @.str.13, debug-location !437; ep.c:286:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(28): Out  Latency=1
    SU(28): Data Latency=1 Reg=$x6
SU(28):   renamable $x6 = ADDXri $x6, target-flags(aarch64-pageoff, aarch64-nc) @.str.13, 0, debug-location !437; ep.c:286:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(27): Out  Latency=1
    SU(27): Data Latency=1 Reg=$x6
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(29):   STPXi renamable $x15, renamable $x14, $sp, 1, debug-location !437 :: (store 8 into stack + 16), (store 8 into stack + 8); ep.c:286:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(19): Data Latency=1 Reg=$x15
    SU(17): Data Latency=1 Reg=$x14
SU(30):   STRXui renamable $x8, $sp, 0, debug-location !437 :: (store 8 into stack); ep.c:286:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(22): Data Latency=1 Reg=$x8
SU(31):   $w1 = MOVZWi 66, 0, debug-location !437; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(32):   $w2 = MOVZWi 31, 0, debug-location !437; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(33):   $w3 = ORRWrs $wzr, $wzr, 0, debug-location !437; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(34):   $w4 = ORRWrs $wzr, $wzr, 0, debug-location !437; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @print_results, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit $w4, implicit $w5, implicit $d0, implicit $d1, implicit $x6, implicit $w7, implicit-def $sp, debug-location !437; ep.c:286:5
  # preds left       : 10
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(34): Ord  Latency=1 Artificial
    SU(33): Ord  Latency=1 Artificial
    SU(32): Ord  Latency=1 Artificial
    SU(31): Ord  Latency=1 Artificial
    SU(28): Ord  Latency=1 Artificial
    SU(25): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=4 Artificial
    SU(2): Ord  Latency=4 Artificial
    SU(1): Ord  Latency=4 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 6 8 10 12 14 16 18 24 27 31 32 33 34 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w5 = LDRWui $sp, 37, debug-location !433 :: (dereferenceable load 4 from %ir.nit); ep.c:286:45
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 1 2 3 4 6 8 10 12 14 16 18 24 27 31 32 33 
  TopQ.A RemainingLatency 0 + 1c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(1) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d0 = LDURDi $fp, -152, debug-location !434 :: (dereferenceable load 8 from %ir.tm); ep.c:286:50
  Ready @1c
  TopQ.A BotLatency SU(1) 4c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 2 3 4 6 8 10 12 14 16 18 24 27 31 32 
  TopQ.A RemainingLatency 0 + 2c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(2) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d1 = LDURDi $fp, -80, debug-location !435 :: (dereferenceable load 8 from %ir.Mops); ep.c:286:54
  Ready @2c
  TopQ.A BotLatency SU(2) 4c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 3 4 6 8 10 12 14 16 18 24 27 31 
  TopQ.A RemainingLatency 0 + 3c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(3) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $w7 = LDRWui $sp, 34, debug-location !436 :: (dereferenceable load 4 from %ir.verified); ep.c:287:47
  Ready @3c
  TopQ.A BotLatency SU(3) 4c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 31 4 6 8 10 12 14 16 18 24 27 
  TopQ.A RemainingLatency 0 + 4c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(31) ORDER                              
  Cand SU(4) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) $x8 = ADRP target-flags(aarch64-page) @.str.22, debug-location !437; ep.c:286:5
  Ready @4c
  TopQ.A BotLatency SU(4) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 31 27 6 8 10 12 14 16 18 24 5 
  TopQ.A RemainingLatency 0 + 5c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(31) ORDER                              
  Cand SU(27) TOP-PATH                  2 cycles 
  Cand SU(6) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) $x9 = ADRP target-flags(aarch64-page) @.str.21, debug-location !437; ep.c:286:5
  Ready @5c
  TopQ.A BotLatency SU(6) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 31 27 5 8 10 12 14 16 18 24 7 
  TopQ.A RemainingLatency 0 + 6c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(31) ORDER                              
  Cand SU(27) TOP-PATH                  2 cycles 
  Cand SU(5) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.22, 0, debug-location !437; ep.c:286:5
  Ready @6c
  TopQ.A TopLatency SU(5) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 31 27 7 8 10 12 14 16 18 24 
  TopQ.A RemainingLatency 0 + 7c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(31) ORDER                              
  Cand SU(27) TOP-PATH                  2 cycles 
  Cand SU(7) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.21, 0, debug-location !437; ep.c:286:5
  Ready @7c
  TopQ.A BotLatency SU(7) 3c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 31 27 24 8 10 12 14 16 18 20 
  TopQ.A RemainingLatency 0 + 8c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(31) ORDER                              
  Cand SU(27) TOP-PATH                  2 cycles 
  Cand SU(24) ORDER                              
  Cand SU(8) ORDER                              
Pick Top ORDER     
Scheduling SU(8) $x10 = ADRP target-flags(aarch64-page) @.str.20, debug-location !437; ep.c:286:5
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 31 27 24 20 10 12 14 16 18 9 
  TopQ.A RemainingLatency 0 + 9c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(31) ORDER                              
  Cand SU(27) TOP-PATH                  2 cycles 
  Cand SU(24) ORDER                              
  Cand SU(20) ORDER                              
  Cand SU(10) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(10) $x11 = ADRP target-flags(aarch64-page) @.str.19, debug-location !437; ep.c:286:5
  Ready @9c
  TopQ.A BotLatency SU(10) 2c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 31 27 24 20 9 12 14 16 18 11 
  TopQ.A RemainingLatency 0 + 10c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(31) ORDER                              
  Cand SU(27) TOP-PATH                  2 cycles 
  Cand SU(24) ORDER                              
  Cand SU(20) ORDER                              
  Cand SU(12) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(12) $x12 = ADRP target-flags(aarch64-page) @.str.18, debug-location !437; ep.c:286:5
  Ready @10c
  TopQ.A BotLatency SU(12) 2c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 31 27 24 20 9 11 14 16 18 13 
  TopQ.A RemainingLatency 0 + 11c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(31) ORDER                              
  Cand SU(27) TOP-PATH                  2 cycles 
  Cand SU(24) ORDER                              
  Cand SU(20) ORDER                              
  Cand SU(14) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(14) $x13 = ADRP target-flags(aarch64-page) @.str.17, debug-location !437; ep.c:286:5
  Ready @11c
  TopQ.A BotLatency SU(14) 2c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 31 27 24 20 9 11 13 16 18 15 
  TopQ.A RemainingLatency 0 + 12c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(31) ORDER                              
  Cand SU(27) TOP-PATH                  2 cycles 
  Cand SU(24) ORDER                              
  Cand SU(20) ORDER                              
  Cand SU(16) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(16) $x14 = ADRP target-flags(aarch64-page) @.str.16, debug-location !437; ep.c:286:5
  Ready @12c
  TopQ.A BotLatency SU(16) 2c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 31 27 24 20 9 11 13 15 18 17 
  TopQ.A RemainingLatency 0 + 13c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(31) ORDER                              
  Cand SU(27) TOP-PATH                  2 cycles 
  Cand SU(24) ORDER                              
  Cand SU(20) ORDER                              
  Cand SU(18) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(18) $x15 = ADRP target-flags(aarch64-page) @.str.15, debug-location !437; ep.c:286:5
  Ready @13c
  TopQ.A BotLatency SU(18) 2c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 31 27 24 20 9 11 13 15 17 19 
  TopQ.A RemainingLatency 0 + 14c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(31) ORDER                              
  Cand SU(27) TOP-PATH                  2 cycles 
  Cand SU(24) ORDER                              
  Cand SU(20) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(20) STPXi renamable $x9, renamable $x8, $sp, 7, debug-location !437 :: (store 8 into stack + 64), (store 8 into stack + 56); ep.c:286:5
  Ready @14c
  TopQ.A TopLatency SU(20) 2c
  TopQ.A BotLatency SU(20) 2c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 31 27 24 19 9 11 13 15 17 21 
  TopQ.A RemainingLatency 0 + 15c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(31) ORDER                              
  Cand SU(27) TOP-PATH                  2 cycles 
  Cand SU(24) ORDER                              
  Cand SU(21) ORDER                              
Pick Top ORDER     
Scheduling SU(21) $x8 = ADRP target-flags(aarch64-page) @.str.14, debug-location !437; ep.c:286:5
  Ready @15c
  TopQ.A BotLatency SU(21) 2c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 31 27 24 19 9 11 13 15 17 22 
  TopQ.A RemainingLatency 0 + 16c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(31) ORDER                              
  Cand SU(27) TOP-PATH                  2 cycles 
  Cand SU(24) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(24) $x0 = ADRP target-flags(aarch64-page) @.str.12, debug-location !437; ep.c:286:5
  Ready @16c
  TopQ.A BotLatency SU(24) 2c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 31 27 22 19 9 11 13 15 17 25 
  TopQ.A RemainingLatency 0 + 17c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(31) ORDER                              
  Cand SU(27) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(27) $x6 = ADRP target-flags(aarch64-page) @.str.13, debug-location !437; ep.c:286:5
  Ready @17c
  TopQ.A BotLatency SU(27) 2c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 31 25 22 19 9 11 13 15 17 28 
  TopQ.A RemainingLatency 0 + 18c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(31) ORDER                              
  Cand SU(25) ORDER                              
  Cand SU(22) ORDER                              
  Cand SU(19) ORDER                              
  Cand SU(9) ORDER                              
Pick Top ORDER     
Scheduling SU(9) renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.20, 0, debug-location !437; ep.c:286:5
  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 31 25 22 19 28 11 13 15 17 
  TopQ.A RemainingLatency 0 + 19c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(31) ORDER                              
  Cand SU(25) ORDER                              
  Cand SU(22) ORDER                              
  Cand SU(19) ORDER                              
  Cand SU(11) ORDER                              
Pick Top ORDER     
Scheduling SU(11) renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @.str.19, 0, debug-location !437; ep.c:286:5
  Ready @19c
  TopQ.A BotLatency SU(11) 1c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 31 25 22 19 28 17 13 15 23 
  TopQ.A RemainingLatency 0 + 20c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(31) ORDER                              
  Cand SU(25) ORDER                              
  Cand SU(22) ORDER                              
  Cand SU(19) ORDER                              
  Cand SU(17) ORDER                              
  Cand SU(13) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(13) renamable $x12 = ADDXri $x12, target-flags(aarch64-pageoff, aarch64-nc) @.str.18, 0, debug-location !437; ep.c:286:5
  Ready @20c
  TopQ.A BotLatency SU(13) 1c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 31 25 22 19 28 17 23 15 
  TopQ.A RemainingLatency 0 + 21c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(31) ORDER                              
  Cand SU(25) ORDER                              
  Cand SU(22) ORDER                              
  Cand SU(19) ORDER                              
  Cand SU(17) ORDER                              
  Cand SU(15) ORDER                              
Pick Top ORDER     
Scheduling SU(15) renamable $x13 = ADDXri $x13, target-flags(aarch64-pageoff, aarch64-nc) @.str.17, 0, debug-location !437; ep.c:286:5
  Ready @21c
  TopQ.A BotLatency SU(15) 1c
  *** Max MOps 1 at cycle 21
Cycle: 22 TopQ.A
TopQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 31 25 22 19 28 17 23 26 
  TopQ.A RemainingLatency 0 + 22c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(31) ORDER                              
  Cand SU(25) ORDER                              
  Cand SU(22) ORDER                              
  Cand SU(19) ORDER                              
  Cand SU(17) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(17) renamable $x14 = ADDXri $x14, target-flags(aarch64-pageoff, aarch64-nc) @.str.16, 0, debug-location !437; ep.c:286:5
  Ready @22c
  TopQ.A BotLatency SU(17) 1c
  *** Max MOps 1 at cycle 22
Cycle: 23 TopQ.A
TopQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 31 25 22 19 28 26 23 
  TopQ.A RemainingLatency 0 + 23c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(31) ORDER                              
  Cand SU(25) ORDER                              
  Cand SU(22) ORDER                              
  Cand SU(19) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(19) renamable $x15 = ADDXri $x15, target-flags(aarch64-pageoff, aarch64-nc) @.str.15, 0, debug-location !437; ep.c:286:5
  Ready @23c
  TopQ.A BotLatency SU(19) 1c
  *** Max MOps 1 at cycle 23
Cycle: 24 TopQ.A
TopQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 31 25 22 23 28 26 29 
  TopQ.A RemainingLatency 0 + 24c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(31) ORDER                              
  Cand SU(25) ORDER                              
  Cand SU(22) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(22) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.14, 0, debug-location !437; ep.c:286:5
  Ready @24c
  TopQ.A TopLatency SU(22) 3c
  TopQ.A BotLatency SU(22) 1c
  *** Max MOps 1 at cycle 24
Cycle: 25 TopQ.A
TopQ.A @25c
  Retired: 25
  Executed: 25c
  Critical: 25c, 25 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 31 25 29 23 28 26 30 
  TopQ.A RemainingLatency 0 + 25c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(31) ORDER                              
  Cand SU(25) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(25) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.12, 0, debug-location !437; ep.c:286:5
  Ready @25c
  TopQ.A BotLatency SU(25) 1c
  *** Max MOps 1 at cycle 25
Cycle: 26 TopQ.A
TopQ.A @26c
  Retired: 26
  Executed: 26c
  Critical: 26c, 26 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 31 30 29 23 28 26 
  TopQ.A RemainingLatency 0 + 26c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(31) ORDER                              
  Cand SU(28) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(28) renamable $x6 = ADDXri $x6, target-flags(aarch64-pageoff, aarch64-nc) @.str.13, 0, debug-location !437; ep.c:286:5
  Ready @26c
  TopQ.A BotLatency SU(28) 1c
  *** Max MOps 1 at cycle 26
Cycle: 27 TopQ.A
TopQ.A @27c
  Retired: 27
  Executed: 27c
  Critical: 27c, 27 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 31 30 29 23 26 
  TopQ.A RemainingLatency 0 + 27c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
  Cand SU(31) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(31) $w1 = MOVZWi 66, 0, debug-location !437; ep.c:286:5
  Ready @27c
  TopQ.A BotLatency SU(31) 1c
  *** Max MOps 1 at cycle 27
Cycle: 28 TopQ.A
TopQ.A @28c
  Retired: 28
  Executed: 28c
  Critical: 28c, 28 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 32 26 30 29 23 
  TopQ.A RemainingLatency 0 + 28c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(32) $w2 = MOVZWi 31, 0, debug-location !437; ep.c:286:5
  Ready @28c
  TopQ.A BotLatency SU(32) 1c
  *** Max MOps 1 at cycle 28
Cycle: 29 TopQ.A
TopQ.A @29c
  Retired: 29
  Executed: 29c
  Critical: 29c, 29 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 23 26 30 29 
  TopQ.A RemainingLatency 0 + 29c > CritPath 4
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(33) $w3 = ORRWrs $wzr, $wzr, 0, debug-location !437; ep.c:286:5
  Ready @29c
  TopQ.A BotLatency SU(33) 1c
  *** Max MOps 1 at cycle 29
Cycle: 30 TopQ.A
TopQ.A @30c
  Retired: 30
  Executed: 30c
  Critical: 30c, 30 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 29 23 26 30 
  TopQ.A RemainingLatency 0 + 30c > CritPath 4
  Cand SU(34) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(34) $w4 = ORRWrs $wzr, $wzr, 0, debug-location !437; ep.c:286:5
  Ready @30c
  TopQ.A BotLatency SU(34) 1c
  *** Max MOps 1 at cycle 30
Cycle: 31 TopQ.A
TopQ.A @31c
  Retired: 31
  Executed: 31c
  Critical: 31c, 31 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 30 29 23 26 
  TopQ.A RemainingLatency 0 + 31c > CritPath 4
  Cand SU(30) ORDER                              
  Cand SU(29) ORDER                              
  Cand SU(23) ORDER                              
Pick Top ORDER     
Scheduling SU(23) STPXi renamable $x11, renamable $x10, $sp, 5, debug-location !437 :: (store 8 into stack + 48), (store 8 into stack + 40); ep.c:286:5
  Ready @31c
  *** Max MOps 1 at cycle 31
Cycle: 32 TopQ.A
TopQ.A @32c
  Retired: 32
  Executed: 32c
  Critical: 32c, 32 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 30 29 26 
  TopQ.A RemainingLatency 0 + 32c > CritPath 4
  Cand SU(30) ORDER                              
  Cand SU(29) ORDER                              
  Cand SU(26) ORDER                              
Pick Top ORDER     
Scheduling SU(26) STPXi renamable $x13, renamable $x12, $sp, 3, debug-location !437 :: (store 8 into stack + 32), (store 8 into stack + 24); ep.c:286:5
  Ready @32c
  *** Max MOps 1 at cycle 32
Cycle: 33 TopQ.A
TopQ.A @33c
  Retired: 33
  Executed: 33c
  Critical: 33c, 33 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 30 29 
  TopQ.A RemainingLatency 0 + 33c > CritPath 4
  Cand SU(30) ORDER                              
  Cand SU(29) ORDER                              
Pick Top ORDER     
Scheduling SU(29) STPXi renamable $x15, renamable $x14, $sp, 1, debug-location !437 :: (store 8 into stack + 16), (store 8 into stack + 8); ep.c:286:5
  Ready @33c
  *** Max MOps 1 at cycle 33
Cycle: 34 TopQ.A
TopQ.A @34c
  Retired: 34
  Executed: 34c
  Critical: 34c, 34 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 30 
Pick Top ONLY1     
Scheduling SU(30) STRXui renamable $x8, $sp, 0, debug-location !437 :: (store 8 into stack); ep.c:286:5
  Ready @34c
  TopQ.A TopLatency SU(30) 4c
  *** Max MOps 1 at cycle 34
Cycle: 35 TopQ.A
TopQ.A @35c
  Retired: 35
  Executed: 35c
  Critical: 35c, 35 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.48 ***
SU(0):   renamable $w5 = LDRWui $sp, 37, debug-location !433 :: (dereferenceable load 4 from %ir.nit); ep.c:286:45
SU(1):   renamable $d0 = LDURDi $fp, -152, debug-location !434 :: (dereferenceable load 8 from %ir.tm); ep.c:286:50
SU(2):   renamable $d1 = LDURDi $fp, -80, debug-location !435 :: (dereferenceable load 8 from %ir.Mops); ep.c:286:54
SU(3):   renamable $w7 = LDRWui $sp, 34, debug-location !436 :: (dereferenceable load 4 from %ir.verified); ep.c:287:47
SU(4):   $x8 = ADRP target-flags(aarch64-page) @.str.22, debug-location !437; ep.c:286:5
SU(6):   $x9 = ADRP target-flags(aarch64-page) @.str.21, debug-location !437; ep.c:286:5
SU(5):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.22, 0, debug-location !437; ep.c:286:5
SU(7):   renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.21, 0, debug-location !437; ep.c:286:5
SU(8):   $x10 = ADRP target-flags(aarch64-page) @.str.20, debug-location !437; ep.c:286:5
SU(10):   $x11 = ADRP target-flags(aarch64-page) @.str.19, debug-location !437; ep.c:286:5
SU(12):   $x12 = ADRP target-flags(aarch64-page) @.str.18, debug-location !437; ep.c:286:5
SU(14):   $x13 = ADRP target-flags(aarch64-page) @.str.17, debug-location !437; ep.c:286:5
SU(16):   $x14 = ADRP target-flags(aarch64-page) @.str.16, debug-location !437; ep.c:286:5
SU(18):   $x15 = ADRP target-flags(aarch64-page) @.str.15, debug-location !437; ep.c:286:5
SU(20):   STPXi renamable $x9, renamable $x8, $sp, 7, debug-location !437 :: (store 8 into stack + 64), (store 8 into stack + 56); ep.c:286:5
SU(21):   $x8 = ADRP target-flags(aarch64-page) @.str.14, debug-location !437; ep.c:286:5
SU(24):   $x0 = ADRP target-flags(aarch64-page) @.str.12, debug-location !437; ep.c:286:5
SU(27):   $x6 = ADRP target-flags(aarch64-page) @.str.13, debug-location !437; ep.c:286:5
SU(9):   renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.20, 0, debug-location !437; ep.c:286:5
SU(11):   renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @.str.19, 0, debug-location !437; ep.c:286:5
SU(13):   renamable $x12 = ADDXri $x12, target-flags(aarch64-pageoff, aarch64-nc) @.str.18, 0, debug-location !437; ep.c:286:5
SU(15):   renamable $x13 = ADDXri $x13, target-flags(aarch64-pageoff, aarch64-nc) @.str.17, 0, debug-location !437; ep.c:286:5
SU(17):   renamable $x14 = ADDXri $x14, target-flags(aarch64-pageoff, aarch64-nc) @.str.16, 0, debug-location !437; ep.c:286:5
SU(19):   renamable $x15 = ADDXri $x15, target-flags(aarch64-pageoff, aarch64-nc) @.str.15, 0, debug-location !437; ep.c:286:5
SU(22):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.14, 0, debug-location !437; ep.c:286:5
SU(25):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.12, 0, debug-location !437; ep.c:286:5
SU(28):   renamable $x6 = ADDXri $x6, target-flags(aarch64-pageoff, aarch64-nc) @.str.13, 0, debug-location !437; ep.c:286:5
SU(31):   $w1 = MOVZWi 66, 0, debug-location !437; ep.c:286:5
SU(32):   $w2 = MOVZWi 31, 0, debug-location !437; ep.c:286:5
SU(33):   $w3 = ORRWrs $wzr, $wzr, 0, debug-location !437; ep.c:286:5
SU(34):   $w4 = ORRWrs $wzr, $wzr, 0, debug-location !437; ep.c:286:5
SU(23):   STPXi renamable $x11, renamable $x10, $sp, 5, debug-location !437 :: (store 8 into stack + 48), (store 8 into stack + 40); ep.c:286:5
SU(26):   STPXi renamable $x13, renamable $x12, $sp, 3, debug-location !437 :: (store 8 into stack + 32), (store 8 into stack + 24); ep.c:286:5
SU(29):   STPXi renamable $x15, renamable $x14, $sp, 1, debug-location !437 :: (store 8 into stack + 16), (store 8 into stack + 8); ep.c:286:5
SU(30):   STRXui renamable $x8, $sp, 0, debug-location !437 :: (store 8 into stack); ep.c:286:5

Fixup kills for %bb.48
********** MI Scheduling **********
main:%bb.49 if.then163
  From: renamable $d0 = LDURDi $fp, -152, debug-location !441 :: (dereferenceable load 8 from %ir.tm); ep.c:291:13
    To: Bcc 8, %bb.51, implicit $nzcv, debug-location !445; ep.c:291:13
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDURDi $fp, -152, debug-location !441 :: (dereferenceable load 8 from %ir.tm); ep.c:291:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$d0
SU(1):   FCMPDri renamable $d0, implicit-def $nzcv, debug-location !445; ep.c:291:13
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$d0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 8, %bb.51, implicit $nzcv, debug-location !445; ep.c:291:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $d0 = LDURDi $fp, -152, debug-location !441 :: (dereferenceable load 8 from %ir.tm); ep.c:291:13
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) FCMPDri renamable $d0, implicit-def $nzcv, debug-location !445; ep.c:291:13
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.49 ***
SU(0):   renamable $d0 = LDURDi $fp, -152, debug-location !441 :: (dereferenceable load 8 from %ir.tm); ep.c:291:13
SU(1):   FCMPDri renamable $d0, implicit-def $nzcv, debug-location !445; ep.c:291:13

Fixup kills for %bb.49
********** MI Scheduling **********
main:%bb.50 if.then166
  From: $x8 = MOVZXi 16368, 48
    To: End RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x8 = MOVZXi 16368, 48
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=$x8
SU(1):   STURXi renamable $x8, $fp, -152, debug-location !446 :: (store 8 into %ir.tm); ep.c:292:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x8 = MOVZXi 16368, 48
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STURXi renamable $x8, $fp, -152, debug-location !446 :: (store 8 into %ir.tm); ep.c:292:16
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.50 ***
SU(0):   $x8 = MOVZXi 16368, 48
SU(1):   STURXi renamable $x8, $fp, -152, debug-location !446 :: (store 8 into %ir.tm); ep.c:292:16

Fixup kills for %bb.50
********** MI Scheduling **********
main:%bb.51 if.end167
  From: renamable $d1 = LDURDi $fp, -152, debug-location !469 :: (dereferenceable load 8 from %ir.tm); ep.c:298:70
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w0, debug-location !471; ep.c:298:9
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $d1 = LDURDi $fp, -152, debug-location !469 :: (dereferenceable load 8 from %ir.tm); ep.c:298:70
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d1
SU(1):   STURDi renamable $d0, $fp, -168, debug-location !465 :: (store 8 into %ir.tt); ep.c:297:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   renamable $d2 = FMULDrr renamable $d0, renamable $d8, debug-location !468; ep.c:298:60
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Data Latency=1 Reg=$d2
SU(3):   renamable $d1 = FDIVDrr renamable $d2, renamable $d1, debug-location !470; ep.c:298:68
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=$d2
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $x0 = ADRP target-flags(aarch64-page) @.str.25, debug-location !471; ep.c:298:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x0
SU(5):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.25, 0, debug-location !471; ep.c:298:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w0, debug-location !471; ep.c:298:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d1 = LDURDi $fp, -152, debug-location !469 :: (dereferenceable load 8 from %ir.tm); ep.c:298:70
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(4) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) renamable $d2 = FMULDrr renamable $d0, renamable $d8, debug-location !468; ep.c:298:60
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 4 1 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) $x0 = ADRP target-flags(aarch64-page) @.str.25, debug-location !471; ep.c:298:9
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 1 5 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(1) ORDER                              
  Cand SU(5) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.25, 0, debug-location !471; ep.c:298:9
  Ready @3c
  TopQ.A TopLatency SU(5) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 3 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(1) ORDER                              
  Cand SU(3) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d1 = FDIVDrr renamable $d2, renamable $d1, debug-location !470; ep.c:298:68
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STURDi renamable $d0, $fp, -168, debug-location !465 :: (store 8 into %ir.tt); ep.c:297:12
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.51 ***
SU(0):   renamable $d1 = LDURDi $fp, -152, debug-location !469 :: (dereferenceable load 8 from %ir.tm); ep.c:298:70
SU(2):   renamable $d2 = FMULDrr renamable $d0, renamable $d8, debug-location !468; ep.c:298:60
SU(4):   $x0 = ADRP target-flags(aarch64-page) @.str.25, debug-location !471; ep.c:298:9
SU(5):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.25, 0, debug-location !471; ep.c:298:9
SU(3):   renamable $d1 = FDIVDrr renamable $d2, renamable $d1, debug-location !470; ep.c:298:68
SU(1):   STURDi renamable $d0, $fp, -168, debug-location !465 :: (store 8 into %ir.tt); ep.c:297:12

********** MI Scheduling **********
main:%bb.51 if.end167
  From: renamable $d1 = LDURDi $fp, -152, debug-location !461 :: (dereferenceable load 8 from %ir.tm); ep.c:296:70
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w0, debug-location !463; ep.c:296:9
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $d1 = LDURDi $fp, -152, debug-location !461 :: (dereferenceable load 8 from %ir.tm); ep.c:296:70
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d1
SU(1):   STURDi renamable $d0, $fp, -168, debug-location !457 :: (store 8 into %ir.tt); ep.c:295:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   renamable $d2 = FMULDrr renamable $d0, renamable $d8, debug-location !460; ep.c:296:60
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Data Latency=1 Reg=$d2
SU(3):   renamable $d1 = FDIVDrr renamable $d2, renamable $d1, debug-location !462; ep.c:296:68
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=$d2
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $x0 = ADRP target-flags(aarch64-page) @.str.24, debug-location !463; ep.c:296:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x0
SU(5):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.24, 0, debug-location !463; ep.c:296:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w0, debug-location !463; ep.c:296:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d1 = LDURDi $fp, -152, debug-location !461 :: (dereferenceable load 8 from %ir.tm); ep.c:296:70
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(4) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) renamable $d2 = FMULDrr renamable $d0, renamable $d8, debug-location !460; ep.c:296:60
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 4 1 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) $x0 = ADRP target-flags(aarch64-page) @.str.24, debug-location !463; ep.c:296:9
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 1 5 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(1) ORDER                              
  Cand SU(5) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.24, 0, debug-location !463; ep.c:296:9
  Ready @3c
  TopQ.A TopLatency SU(5) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 3 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(1) ORDER                              
  Cand SU(3) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d1 = FDIVDrr renamable $d2, renamable $d1, debug-location !462; ep.c:296:68
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STURDi renamable $d0, $fp, -168, debug-location !457 :: (store 8 into %ir.tt); ep.c:295:12
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.51 ***
SU(0):   renamable $d1 = LDURDi $fp, -152, debug-location !461 :: (dereferenceable load 8 from %ir.tm); ep.c:296:70
SU(2):   renamable $d2 = FMULDrr renamable $d0, renamable $d8, debug-location !460; ep.c:296:60
SU(4):   $x0 = ADRP target-flags(aarch64-page) @.str.24, debug-location !463; ep.c:296:9
SU(5):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.24, 0, debug-location !463; ep.c:296:9
SU(3):   renamable $d1 = FDIVDrr renamable $d2, renamable $d1, debug-location !462; ep.c:296:68
SU(1):   STURDi renamable $d0, $fp, -168, debug-location !457 :: (store 8 into %ir.tt); ep.c:295:12

********** MI Scheduling **********
main:%bb.51 if.end167
  From: renamable $d1 = LDURDi $fp, -152, debug-location !453 :: (dereferenceable load 8 from %ir.tm); ep.c:294:72
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w0, debug-location !455; ep.c:294:9
 RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   renamable $d1 = LDURDi $fp, -152, debug-location !453 :: (dereferenceable load 8 from %ir.tm); ep.c:294:72
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$d1
SU(1):   $x8 = MOVZXi 16473, 48
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=1 Reg=$x8
SU(2):   STURDi renamable $d0, $fp, -168, debug-location !449 :: (store 8 into %ir.tt); ep.c:293:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(3):   $d8 = FMOVXDr $x8
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    SU(4): Data Latency=1 Reg=$d8
SU(4):   renamable $d2 = FMULDrr renamable $d0, renamable $d8, debug-location !452; ep.c:294:62
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1 Reg=$d8
  Successors:
    SU(5): Data Latency=1 Reg=$d2
SU(5):   renamable $d1 = FDIVDrr renamable $d2, renamable $d1, debug-location !454; ep.c:294:70
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=$d2
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(6):   $x0 = ADRP target-flags(aarch64-page) @.str.23, debug-location !455; ep.c:294:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x0
SU(7):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.23, 0, debug-location !455; ep.c:294:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w0, debug-location !455; ep.c:294:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=1 Artificial
    SU(5): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 6 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d1 = LDURDi $fp, -152, debug-location !453 :: (dereferenceable load 8 from %ir.tm); ep.c:294:72
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(6) ORDER                              
  Cand SU(1) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $x8 = MOVZXi 16473, 48
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 2 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(6) ORDER                              
  Cand SU(3) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) $d8 = FMOVXDr $x8
  Ready @2c
  TopQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 2 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(6) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) renamable $d2 = FMULDrr renamable $d0, renamable $d8, debug-location !452; ep.c:294:62
  Ready @3c
  TopQ.A TopLatency SU(4) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 2 5 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(6) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(6) $x0 = ADRP target-flags(aarch64-page) @.str.23, debug-location !455; ep.c:294:9
  Ready @4c
  TopQ.A BotLatency SU(6) 2c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 2 7 
  TopQ.A RemainingLatency 0 + 5c > CritPath 5
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) renamable $d1 = FDIVDrr renamable $d2, renamable $d1, debug-location !454; ep.c:294:70
  Ready @5c
  TopQ.A TopLatency SU(5) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 2 
  TopQ.A RemainingLatency 0 + 6c > CritPath 5
  Cand SU(7) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(7) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.23, 0, debug-location !455; ep.c:294:9
  Ready @6c
  TopQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURDi renamable $d0, $fp, -168, debug-location !449 :: (store 8 into %ir.tt); ep.c:293:12
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.51 ***
SU(0):   renamable $d1 = LDURDi $fp, -152, debug-location !453 :: (dereferenceable load 8 from %ir.tm); ep.c:294:72
SU(1):   $x8 = MOVZXi 16473, 48
SU(3):   $d8 = FMOVXDr $x8
SU(4):   renamable $d2 = FMULDrr renamable $d0, renamable $d8, debug-location !452; ep.c:294:62
SU(6):   $x0 = ADRP target-flags(aarch64-page) @.str.23, debug-location !455; ep.c:294:9
SU(5):   renamable $d1 = FDIVDrr renamable $d2, renamable $d1, debug-location !454; ep.c:294:70
SU(7):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.23, 0, debug-location !455; ep.c:294:9
SU(2):   STURDi renamable $d0, $fp, -168, debug-location !449 :: (store 8 into %ir.tt); ep.c:293:12

Fixup kills for %bb.51
********** MI Scheduling **********
main:%bb.52 if.end180
  From: $w0 = ORRWrs $wzr, $wzr, 0, debug-location !473; ep.c:301:5
    To: $sp = frame-destroy ADDXri $sp, 400, 0, debug-location !473; ep.c:301:5
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   $w0 = ORRWrs $wzr, $wzr, 0, debug-location !473; ep.c:301:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $fp, $lr = frame-destroy LDPXi $sp, 48, debug-location !473 :: (load 8 from %stack.33), (load 8 from %stack.32); ep.c:301:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(2):   $x20, $x19 = frame-destroy LDPXi $sp, 46, debug-location !473 :: (load 8 from %stack.35), (load 8 from %stack.34); ep.c:301:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(3):   $x22, $x21 = frame-destroy LDPXi $sp, 44, debug-location !473 :: (load 8 from %stack.37), (load 8 from %stack.36); ep.c:301:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(4):   $x28 = frame-destroy LDRXui $sp, 43, debug-location !473 :: (load 8 from %stack.38); ep.c:301:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(5):   $d9, $d8 = frame-destroy LDPDi $sp, 41, debug-location !473 :: (load 8 from %stack.40), (load 8 from %stack.39); ep.c:301:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(6):   $d10 = frame-destroy LDRDui $sp, 40, debug-location !473 :: (load 8 from %stack.41); ep.c:301:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
ExitSU:   $sp = frame-destroy ADDXri $sp, 400, 0, debug-location !473; ep.c:301:5
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=3 Artificial
    SU(5): Ord  Latency=3 Artificial
    SU(4): Ord  Latency=3 Artificial
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
Critical Path: (PGS-RR) 3
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 
  TopQ.A RemainingLatency 0 + 0c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $fp, $lr = frame-destroy LDPXi $sp, 48, debug-location !473 :: (load 8 from %stack.33), (load 8 from %stack.32); ep.c:301:5
  Ready @0c
  TopQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 6 2 3 4 5 
  TopQ.A RemainingLatency 0 + 1c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  3 cycles 
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) $x20, $x19 = frame-destroy LDPXi $sp, 46, debug-location !473 :: (load 8 from %stack.35), (load 8 from %stack.34); ep.c:301:5
  Ready @1c
  TopQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 6 5 3 4 
  TopQ.A RemainingLatency 0 + 2c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  3 cycles 
  Cand SU(5) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) $x22, $x21 = frame-destroy LDPXi $sp, 44, debug-location !473 :: (load 8 from %stack.37), (load 8 from %stack.36); ep.c:301:5
  Ready @2c
  TopQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 6 5 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  3 cycles 
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) $x28 = frame-destroy LDRXui $sp, 43, debug-location !473 :: (load 8 from %stack.38); ep.c:301:5
  Ready @3c
  TopQ.A BotLatency SU(4) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 6 5 
  TopQ.A RemainingLatency 0 + 4c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  3 cycles 
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) $d9, $d8 = frame-destroy LDPDi $sp, 41, debug-location !473 :: (load 8 from %stack.40), (load 8 from %stack.39); ep.c:301:5
  Ready @4c
  TopQ.A BotLatency SU(5) 3c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 6 
  TopQ.A RemainingLatency 0 + 5c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) $d10 = frame-destroy LDRDui $sp, 40, debug-location !473 :: (load 8 from %stack.41); ep.c:301:5
  Ready @5c
  TopQ.A BotLatency SU(6) 3c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $w0 = ORRWrs $wzr, $wzr, 0, debug-location !473; ep.c:301:5
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.52 ***
SU(1):   $fp, $lr = frame-destroy LDPXi $sp, 48, debug-location !473 :: (load 8 from %stack.33), (load 8 from %stack.32); ep.c:301:5
SU(2):   $x20, $x19 = frame-destroy LDPXi $sp, 46, debug-location !473 :: (load 8 from %stack.35), (load 8 from %stack.34); ep.c:301:5
SU(3):   $x22, $x21 = frame-destroy LDPXi $sp, 44, debug-location !473 :: (load 8 from %stack.37), (load 8 from %stack.36); ep.c:301:5
SU(4):   $x28 = frame-destroy LDRXui $sp, 43, debug-location !473 :: (load 8 from %stack.38); ep.c:301:5
SU(5):   $d9, $d8 = frame-destroy LDPDi $sp, 41, debug-location !473 :: (load 8 from %stack.40), (load 8 from %stack.39); ep.c:301:5
SU(6):   $d10 = frame-destroy LDRDui $sp, 40, debug-location !473 :: (load 8 from %stack.41); ep.c:301:5
SU(0):   $w0 = ORRWrs $wzr, $wzr, 0, debug-location !473; ep.c:301:5

Fixup kills for %bb.52
