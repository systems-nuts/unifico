Before MISched:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
  fi#6: size=4, align=4, at location [SP]
  fi#7: size=4, align=4, at location [SP]
  fi#8: size=4, align=4, at location [SP]
  fi#9: size=8, align=8, at location [SP]
  fi#10: size=8, align=8, at location [SP]
  fi#11: size=8, align=8, at location [SP]
  fi#12: size=1, align=4, at location [SP]
  fi#13: size=4, align=4, at location [SP]
  fi#14: size=4, align=4, at location [SP]
  fi#15: size=8, align=8, at location [SP]
  fi#16: size=88, align=16, at location [SP]
  fi#17: size=88, align=16, at location [SP]
  fi#18: size=8, align=8, at location [SP]
  fi#19: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: 4.000000e-02, align=8
Function Live Ins: $w0 in %1, $x1 in %2

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $w0, $x1
  %393:gpr64sp = ADDXri %stack.16.trecs, 0, 0
  %2:gpr64 = COPY $x1
  %1:gpr32 = COPY $w0
  STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
  STRWui %1:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
  STRXui %2:gpr64, %393:gpr64sp, 20 :: (store 8 into %ir.argv.addr)
  STRXui $xzr, %393:gpr64sp, 14 :: (store 8 into %ir.nelt_tot)
  STRWui $wzr, %stack.13.ifmortar, 0 :: (store 4 into %ir.ifmortar)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %5:gpr64 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
  %6:gpr64 = MOVaddr target-flags(aarch64-page) @.str.1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1
  $x0 = COPY %5:gpr64
  $x1 = COPY %6:gpr64
  BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %7:gpr64 = COPY $x0
  STRXui %7:gpr64, %stack.18.fp, 0 :: (store 8 into %ir.fp)
  %399:gpr64common = ADRP target-flags(aarch64-page) @timeron
  CBZX %7:gpr64, %bb.2
  B %bb.1

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %11:gpr32 = MOVi32imm 1
  STRWui %11:gpr32, %399:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
  %12:gpr64 = MOVaddr target-flags(aarch64-page) @.str.2, target-flags(aarch64-pageoff, aarch64-nc) @.str.2
  STRXui %12:gpr64, %stack.17.t_names, 1 :: (store 8 into %ir.arrayidx)
  %13:gpr64 = MOVaddr target-flags(aarch64-page) @.str.3, target-flags(aarch64-pageoff, aarch64-nc) @.str.3
  STRXui %13:gpr64, %stack.17.t_names, 2 :: (store 8 into %ir.arrayidx1, align 16)
  %14:gpr64 = MOVaddr target-flags(aarch64-page) @.str.4, target-flags(aarch64-pageoff, aarch64-nc) @.str.4
  STRXui %14:gpr64, %stack.17.t_names, 3 :: (store 8 into %ir.arrayidx2)
  %15:gpr64 = MOVaddr target-flags(aarch64-page) @.str.5, target-flags(aarch64-pageoff, aarch64-nc) @.str.5
  STRXui %15:gpr64, %stack.17.t_names, 4 :: (store 8 into %ir.arrayidx3, align 16)
  %16:gpr64 = MOVaddr target-flags(aarch64-page) @.str.6, target-flags(aarch64-pageoff, aarch64-nc) @.str.6
  STRXui %16:gpr64, %stack.17.t_names, 5 :: (store 8 into %ir.arrayidx4)
  %17:gpr64 = MOVaddr target-flags(aarch64-page) @.str.7, target-flags(aarch64-pageoff, aarch64-nc) @.str.7
  STRXui %17:gpr64, %stack.17.t_names, 6 :: (store 8 into %ir.arrayidx5, align 16)
  %18:gpr64 = MOVaddr target-flags(aarch64-page) @.str.8, target-flags(aarch64-pageoff, aarch64-nc) @.str.8
  STRXui %18:gpr64, %stack.17.t_names, 7 :: (store 8 into %ir.arrayidx6)
  %19:gpr64 = MOVaddr target-flags(aarch64-page) @.str.9, target-flags(aarch64-pageoff, aarch64-nc) @.str.9
  STRXui %19:gpr64, %stack.17.t_names, 8 :: (store 8 into %ir.arrayidx7, align 16)
  %20:gpr64 = MOVaddr target-flags(aarch64-page) @.str.10, target-flags(aarch64-pageoff, aarch64-nc) @.str.10
  STRXui %20:gpr64, %stack.17.t_names, 9 :: (store 8 into %ir.arrayidx8)
  %21:gpr64 = MOVaddr target-flags(aarch64-page) @.str.11, target-flags(aarch64-pageoff, aarch64-nc) @.str.11
  STRXui %21:gpr64, %stack.17.t_names, 10 :: (store 8 into %ir.arrayidx9, align 16)
  %22:gpr64 = LDRXui %stack.18.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %22:gpr64
  BL @fclose, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  B %bb.3

bb.2.if.else:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  STRWui $wzr, %399:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)

bb.3.if.end:
; predecessors: %bb.2, %bb.1
  successors: %bb.4(0x50000000), %bb.11(0x30000000); %bb.4(62.50%), %bb.11(37.50%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %24:gpr64 = MOVaddr target-flags(aarch64-page) @.str.12, target-flags(aarch64-pageoff, aarch64-nc) @.str.12
  $x0 = COPY %24:gpr64
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %26:gpr64 = MOVaddr target-flags(aarch64-page) @.str.13, target-flags(aarch64-pageoff, aarch64-nc) @.str.13
  %27:gpr64 = MOVaddr target-flags(aarch64-page) @.str.1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1
  $x0 = COPY %26:gpr64
  $x1 = COPY %27:gpr64
  BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %28:gpr64 = COPY $x0
  STRXui %28:gpr64, %stack.18.fp, 0 :: (store 8 into %ir.fp)
  %395:gpr64common = ADRP target-flags(aarch64-page) @fre
  %396:gpr64common = ADRP target-flags(aarch64-page) @niter
  %397:gpr64common = ADRP target-flags(aarch64-page) @nmxh
  %398:gpr64common = ADRP target-flags(aarch64-page) @alpha
  CBZX %28:gpr64, %bb.11
  B %bb.4

bb.4.if.then14:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %40:gpr64 = MOVaddr target-flags(aarch64-page) @.str.14, target-flags(aarch64-pageoff, aarch64-nc) @.str.14
  $x0 = COPY %40:gpr64
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %42:gpr64 = LDRXui %stack.18.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %43:gpr64 = MOVaddr target-flags(aarch64-page) @.str.15, target-flags(aarch64-pageoff, aarch64-nc) @.str.15
  %44:gpr64 = MOVaddr target-flags(aarch64-page) @fre, target-flags(aarch64-pageoff, aarch64-nc) @fre
  $x0 = COPY %42:gpr64
  $x1 = COPY %43:gpr64
  $x2 = COPY %44:gpr64
  BL @fscanf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %45:gpr32 = COPY $w0
  STRWui %45:gpr32, %stack.19.result, 0 :: (store 4 into %ir.result)

bb.5.while.cond:
; predecessors: %bb.4, %bb.5
  successors: %bb.5(0x7c000000), %bb.6(0x04000000); %bb.5(96.88%), %bb.6(3.12%)

  %46:gpr64 = LDRXui %stack.18.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %46:gpr64
  BL @fgetc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %47:gpr32sp = COPY $w0
  dead $wzr = SUBSWri %47:gpr32sp, 10, 0, implicit-def $nzcv
  Bcc 1, %bb.5, implicit killed $nzcv
  B %bb.6

bb.6.while.end:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %49:gpr64 = LDRXui %stack.18.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %50:gpr64 = MOVaddr target-flags(aarch64-page) @.str.15, target-flags(aarch64-pageoff, aarch64-nc) @.str.15
  %51:gpr64 = MOVaddr target-flags(aarch64-page) @niter, target-flags(aarch64-pageoff, aarch64-nc) @niter
  $x0 = COPY %49:gpr64
  $x1 = COPY %50:gpr64
  $x2 = COPY %51:gpr64
  BL @fscanf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %52:gpr32 = COPY $w0
  STRWui %52:gpr32, %stack.19.result, 0 :: (store 4 into %ir.result)

bb.7.while.cond20:
; predecessors: %bb.6, %bb.7
  successors: %bb.7(0x7c000000), %bb.8(0x04000000); %bb.7(96.88%), %bb.8(3.12%)

  %53:gpr64 = LDRXui %stack.18.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %53:gpr64
  BL @fgetc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %54:gpr32sp = COPY $w0
  dead $wzr = SUBSWri %54:gpr32sp, 10, 0, implicit-def $nzcv
  Bcc 1, %bb.7, implicit killed $nzcv
  B %bb.8

bb.8.while.end24:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %56:gpr64 = LDRXui %stack.18.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %57:gpr64 = MOVaddr target-flags(aarch64-page) @.str.15, target-flags(aarch64-pageoff, aarch64-nc) @.str.15
  %58:gpr64 = MOVaddr target-flags(aarch64-page) @nmxh, target-flags(aarch64-pageoff, aarch64-nc) @nmxh
  $x0 = COPY %56:gpr64
  $x1 = COPY %57:gpr64
  $x2 = COPY %58:gpr64
  BL @fscanf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %59:gpr32 = COPY $w0
  STRWui %59:gpr32, %stack.19.result, 0 :: (store 4 into %ir.result)

bb.9.while.cond26:
; predecessors: %bb.8, %bb.9
  successors: %bb.9(0x7c000000), %bb.10(0x04000000); %bb.9(96.88%), %bb.10(3.12%)

  %60:gpr64 = LDRXui %stack.18.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %60:gpr64
  BL @fgetc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %61:gpr32sp = COPY $w0
  dead $wzr = SUBSWri %61:gpr32sp, 10, 0, implicit-def $nzcv
  Bcc 1, %bb.9, implicit killed $nzcv
  B %bb.10

bb.10.while.end30:
; predecessors: %bb.9
  successors: %bb.12(0x80000000); %bb.12(100.00%)

  %63:gpr64 = LDRXui %stack.18.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %64:gpr64 = MOVaddr target-flags(aarch64-page) @.str.16, target-flags(aarch64-pageoff, aarch64-nc) @.str.16
  %65:gpr64 = MOVaddr target-flags(aarch64-page) @alpha, target-flags(aarch64-pageoff, aarch64-nc) @alpha
  $x0 = COPY %63:gpr64
  $x1 = COPY %64:gpr64
  $x2 = COPY %65:gpr64
  BL @fscanf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %66:gpr32 = COPY $w0
  STRWui %66:gpr32, %stack.19.result, 0 :: (store 4 into %ir.result)
  %67:gpr32 = MOVi32imm 85
  STRBBui %67:gpr32, %stack.12.Class, 0 :: (store 1 into %ir.Class, align 4)
  %68:gpr64 = LDRXui %stack.18.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %68:gpr64
  BL @fclose, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  B %bb.12

bb.11.if.else33:
; predecessors: %bb.3
  successors: %bb.12(0x80000000); %bb.12(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %29:gpr64 = MOVaddr target-flags(aarch64-page) @.str.17, target-flags(aarch64-pageoff, aarch64-nc) @.str.17
  $x0 = COPY %29:gpr64
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %32:gpr32 = MOVi32imm 5
  STRWui %32:gpr32, %395:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (store 4 into @fre)
  %34:gpr32 = MOVi32imm 200
  STRWui %34:gpr32, %396:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (store 4 into @niter)
  %36:gpr32 = MOVi32imm 10
  STRWui %36:gpr32, %397:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (store 4 into @nmxh)
  %38:gpr64 = MOVi64imm 4590140797810047451
  STRXui %38:gpr64, %398:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @alpha :: (store 8 into @alpha)
  %39:gpr32 = MOVi32imm 66
  STRBBui %39:gpr32, %stack.12.Class, 0 :: (store 1 into %ir.Class, align 4)

bb.12.if.end35:
; predecessors: %bb.11, %bb.10
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %70:fpr64 = FMOVDi 96
  %71:fpr64 = FMOVDi 28
  $d0 = COPY %70:fpr64
  $d1 = COPY %71:fpr64
  BL @pow, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def $d0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %72:fpr64 = COPY killed $d0
  %73:gpr64common = ADRP target-flags(aarch64-page) @dlmin
  STRDui %72:fpr64, %73:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @dlmin :: (store 8 into @dlmin)
  %74:gpr64common = ADRP target-flags(aarch64-page) %const.0
  %75:fpr64 = LDRDui %74:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  %76:fpr64 = FMULDrr %72:fpr64, %75:fpr64
  %77:gpr64common = ADRP target-flags(aarch64-page) @dtime
  STRDui %76:fpr64, %77:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (store 8 into @dtime)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %78:gpr64 = MOVaddr target-flags(aarch64-page) @.str.18, target-flags(aarch64-pageoff, aarch64-nc) @.str.18
  $x0 = COPY %78:gpr64
  $w1 = MOVi32imm 7
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %82:gpr32 = LDRWui %395:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (dereferenceable load 4 from @fre)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %83:gpr64 = MOVaddr target-flags(aarch64-page) @.str.19, target-flags(aarch64-pageoff, aarch64-nc) @.str.19
  $x0 = COPY %83:gpr64
  $w1 = COPY %82:gpr32
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %86:gpr32 = LDRWui %396:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
  %87:fpr64 = LDRDui %77:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %88:gpr64 = MOVaddr target-flags(aarch64-page) @.str.20, target-flags(aarch64-pageoff, aarch64-nc) @.str.20
  $x0 = COPY %88:gpr64
  $w1 = COPY %86:gpr32
  $d0 = COPY %87:fpr64
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %91:gpr32 = LDRWui %397:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %92:gpr64 = MOVaddr target-flags(aarch64-page) @.str.21, target-flags(aarch64-pageoff, aarch64-nc) @.str.21
  $x0 = COPY %92:gpr64
  $w1 = COPY %91:gpr32
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %95:fpr64 = LDRDui %398:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @alpha :: (dereferenceable load 8 from @alpha)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %96:gpr64 = MOVaddr target-flags(aarch64-page) @.str.22, target-flags(aarch64-pageoff, aarch64-nc) @.str.22
  $x0 = COPY %96:gpr64
  $d0 = COPY %95:fpr64
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $d0, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @top_constants, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %98:gpr32 = MOVi32imm 1
  STRWui %98:gpr32, %stack.6.i, 0 :: (store 4 into %ir.i)

bb.13.for.cond:
; predecessors: %bb.12, %bb.14
  successors: %bb.14(0x7c000000), %bb.15(0x04000000); %bb.14(96.88%), %bb.15(3.12%)

  %99:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %99:gpr32common, 10, 0, implicit-def $nzcv
  Bcc 12, %bb.15, implicit killed $nzcv
  B %bb.14

bb.14.for.body:
; predecessors: %bb.13
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  %390:gpr32 = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = COPY %390:gpr32
  BL @timer_clear, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %391:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  %392:gpr32common = nsw ADDWri %391:gpr32common, 1, 0
  STRWui %392:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)
  B %bb.13

bb.15.for.end:
; predecessors: %bb.13
  successors: %bb.16(0x50000000), %bb.17(0x30000000); %bb.16(62.50%), %bb.17(37.50%)

  %102:gpr32 = LDRWui %399:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW %102:gpr32, %bb.17
  B %bb.16

bb.16.if.then43:
; predecessors: %bb.15
  successors: %bb.17(0x80000000); %bb.17(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = MOVi32imm 2
  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.17.if.end44:
; predecessors: %bb.15, %bb.16
  successors: %bb.18(0x50000000), %bb.19(0x30000000); %bb.18(62.50%), %bb.19(37.50%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @create_initial_grid, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %104:gpr64common = ADRP target-flags(aarch64-page) @ntot
  %105:gpr32 = LDRWui %104:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %106:gpr64 = MOVaddr target-flags(aarch64-page) @ta1, target-flags(aarch64-pageoff, aarch64-nc) @ta1
  $x0 = COPY %106:gpr64
  $w1 = COPY %105:gpr32
  $d0 = FMOVD0
  BL @r_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %108:gpr64common = ADRP target-flags(aarch64-page) @nelt
  %109:gpr32 = LDRWui %108:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  %110:gpr32 = ADDWrs %109:gpr32, %109:gpr32, 1
  %111:gpr32 = UBFMWri %110:gpr32, 29, 28
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %112:gpr64 = MOVaddr target-flags(aarch64-page) @sje, target-flags(aarch64-pageoff, aarch64-nc) @sje
  $x0 = COPY %112:gpr64
  $w1 = COPY %111:gpr32
  $w2 = MOVi32imm -1
  BL @nr_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @coef, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @geom1, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @setdef, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @setpcmo_pre, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %114:gpr64common = ADRP target-flags(aarch64-page) @time
  STRXui $xzr, %114:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @mortar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @prepwork, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = ADDXri %stack.13.ifmortar, 0, 0
  $w1 = COPY $wzr
  BL @adaptation, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %119:gpr32 = LDRWui %399:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW %119:gpr32, %bb.19
  B %bb.18

bb.18.if.then47:
; predecessors: %bb.17
  successors: %bb.19(0x80000000); %bb.19(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = MOVi32imm 2
  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.19.if.end48:
; predecessors: %bb.17, %bb.18
  successors: %bb.20(0x80000000); %bb.20(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %121:gpr32 = MOVi32imm 1
  $w0 = MOVi32imm 1
  BL @timer_clear, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  STRXui $xzr, %114:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
  STRWui $wzr, %stack.3.step, 0 :: (store 4 into %ir.step)
  %242:gpr64 = MOVaddr target-flags(aarch64-page) @tmort, target-flags(aarch64-pageoff, aarch64-nc) @tmort
  undef %375.sub_32:gpr64 = MOVi32imm 1000
  %377:gpr64 = MOVaddr target-flags(aarch64-page) @ta2, target-flags(aarch64-pageoff, aarch64-nc) @ta2
  %381:gpr64common = MOVaddr target-flags(aarch64-page) @size_e, target-flags(aarch64-pageoff, aarch64-nc) @size_e
  %351:gpr64 = MOVaddr target-flags(aarch64-page) @trhs, target-flags(aarch64-pageoff, aarch64-nc) @trhs
  undef %355.sub_32:gpr64 = MOVi32imm 200
  %254:gpr64 = MOVaddr target-flags(aarch64-page) @rmor, target-flags(aarch64-pageoff, aarch64-nc) @rmor
  undef %316.sub_32:gpr64 = MOVi32imm 24
  %318:gpr64 = MOVaddr target-flags(aarch64-page) @cbc, target-flags(aarch64-pageoff, aarch64-nc) @cbc
  %264:gpr64common = ADRP target-flags(aarch64-page) @nmor
  %267:gpr64 = MOVaddr target-flags(aarch64-page) @tmmor, target-flags(aarch64-pageoff, aarch64-nc) @tmmor
  %275:gpr64 = MOVaddr target-flags(aarch64-page) @t, target-flags(aarch64-pageoff, aarch64-nc) @t

bb.20.for.cond49:
; predecessors: %bb.19, %bb.64
  successors: %bb.21(0x7c000000), %bb.65(0x04000000); %bb.21(96.88%), %bb.65(3.12%)

  %125:gpr32 = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
  %127:gpr32 = LDRWui %396:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
  dead $wzr = SUBSWrr %125:gpr32, %127:gpr32, implicit-def $nzcv
  Bcc 12, %bb.65, implicit killed $nzcv
  B %bb.21

bb.21.for.body51:
; predecessors: %bb.20
  successors: %bb.22(0x40000000), %bb.28(0x40000000); %bb.22(50.00%), %bb.28(50.00%)

  %226:gpr32common = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
  dead $wzr = SUBSWri %226:gpr32common, 1, 0, implicit-def $nzcv
  Bcc 1, %bb.28, implicit killed $nzcv
  B %bb.22

bb.22.if.then53:
; predecessors: %bb.21
  successors: %bb.23(0x80000000); %bb.23(100.00%)

  %229:gpr32 = LDRWui %104:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %106:gpr64
  $w1 = COPY %229:gpr32
  $d0 = FMOVD0
  BL @r_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  STRXui $xzr, %114:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
  STRXui $xzr, %393:gpr64sp, 14 :: (store 8 into %ir.nelt_tot)
  STRWui %121:gpr32, %stack.6.i, 0 :: (store 4 into %ir.i)

bb.23.for.cond54:
; predecessors: %bb.22, %bb.26
  successors: %bb.24(0x7c000000), %bb.27(0x04000000); %bb.24(96.88%), %bb.27(3.12%)

  %235:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %235:gpr32common, 10, 0, implicit-def $nzcv
  Bcc 12, %bb.27, implicit killed $nzcv
  B %bb.24

bb.24.for.body56:
; predecessors: %bb.23
  successors: %bb.25(0x40000000), %bb.26(0x40000000); %bb.25(50.00%), %bb.26(50.00%)

  %385:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %385:gpr32common, 2, 0, implicit-def $nzcv
  Bcc 0, %bb.26, implicit killed $nzcv
  B %bb.25

bb.25.if.then58:
; predecessors: %bb.24
  successors: %bb.26(0x80000000); %bb.26(100.00%)

  %387:gpr32 = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = COPY %387:gpr32
  BL @timer_clear, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.26.for.inc60:
; predecessors: %bb.24, %bb.25
  successors: %bb.23(0x80000000); %bb.23(100.00%)

  %388:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  %389:gpr32common = nsw ADDWri %388:gpr32common, 1, 0
  STRWui %389:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)
  B %bb.23

bb.27.for.end62:
; predecessors: %bb.23
  successors: %bb.28(0x80000000); %bb.28(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = MOVi32imm 1
  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.28.if.end63:
; predecessors: %bb.21, %bb.27
  successors: %bb.29(0x50000000), %bb.30(0x30000000); %bb.29(62.50%), %bb.30(37.50%)

  %238:gpr32 = LDRWui %stack.13.ifmortar, 0 :: (dereferenceable load 4 from %ir.ifmortar)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = COPY %238:gpr32
  BL @convect, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %240:gpr32 = LDRWui %399:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW %240:gpr32, %bb.30
  B %bb.29

bb.29.if.then65:
; predecessors: %bb.28
  successors: %bb.30(0x80000000); %bb.30(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = MOVi32imm 9
  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.30.if.end66:
; predecessors: %bb.28, %bb.29
  successors: %bb.31(0x80000000); %bb.31(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %242:gpr64
  $x1 = COPY %106:gpr64
  BL @transf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  STRWui $wzr, %stack.4.ie, 0 :: (store 4 into %ir.ie)

bb.31.for.cond67:
; predecessors: %bb.30, %bb.32
  successors: %bb.32(0x7c000000), %bb.33(0x04000000); %bb.32(96.88%), %bb.33(3.12%)

  %245:gpr32 = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %247:gpr32 = LDRWui %108:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  dead $wzr = SUBSWrr %245:gpr32, %247:gpr32, implicit-def $nzcv
  Bcc 10, %bb.33, implicit killed $nzcv
  B %bb.32

bb.32.for.body69:
; predecessors: %bb.31
  successors: %bb.31(0x80000000); %bb.31(100.00%)

  %373:gpr64 = LDRSWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %376:gpr64 = MADDXrrr %373:gpr64, %375:gpr64, $xzr
  %378:gpr64 = ADDXrr %377:gpr64, %376:gpr64
  %380:gpr64 = ADDXrr %106:gpr64, %376:gpr64
  %382:gpr32 = LDRWroX %381:gpr64common, %373:gpr64, 0, 1 :: (load 4 from %ir.arrayidx75)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %378:gpr64
  $x1 = COPY %380:gpr64
  $w2 = COPY %382:gpr32
  BL @laplacian, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $w2, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %383:gpr32common = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %384:gpr32common = nsw ADDWri %383:gpr32common, 1, 0
  STRWui %384:gpr32common, %stack.4.ie, 0 :: (store 4 into %ir.ie)
  B %bb.31

bb.33.for.end78:
; predecessors: %bb.31
  successors: %bb.34(0x80000000); %bb.34(100.00%)

  STRWui $wzr, %stack.4.ie, 0 :: (store 4 into %ir.ie)

bb.34.for.cond79:
; predecessors: %bb.33, %bb.44
  successors: %bb.35(0x7c000000), %bb.45(0x04000000); %bb.35(96.88%), %bb.45(3.12%)

  %250:gpr32 = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %252:gpr32 = LDRWui %108:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  dead $wzr = SUBSWrr %250:gpr32, %252:gpr32, implicit-def $nzcv
  Bcc 10, %bb.45, implicit killed $nzcv
  B %bb.35

bb.35.for.body81:
; predecessors: %bb.34
  successors: %bb.36(0x80000000); %bb.36(100.00%)

  STRWui $wzr, %stack.8.k, 0 :: (store 4 into %ir.k)

bb.36.for.cond82:
; predecessors: %bb.35, %bb.43
  successors: %bb.37(0x7c000000), %bb.44(0x04000000); %bb.37(96.88%), %bb.44(3.12%)

  %333:gpr32common = LDRWui %stack.8.k, 0 :: (dereferenceable load 4 from %ir.k)
  dead $wzr = SUBSWri %333:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.44, implicit killed $nzcv
  B %bb.37

bb.37.for.body84:
; predecessors: %bb.36
  successors: %bb.38(0x80000000); %bb.38(100.00%)

  STRWui $wzr, %stack.7.j, 0 :: (store 4 into %ir.j)

bb.38.for.cond85:
; predecessors: %bb.37, %bb.42
  successors: %bb.39(0x7c000000), %bb.43(0x04000000); %bb.39(96.88%), %bb.43(3.12%)

  %338:gpr32common = LDRWui %stack.7.j, 0 :: (dereferenceable load 4 from %ir.j)
  dead $wzr = SUBSWri %338:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.43, implicit killed $nzcv
  B %bb.39

bb.39.for.body87:
; predecessors: %bb.38
  successors: %bb.40(0x80000000); %bb.40(100.00%)

  STRWui $wzr, %stack.6.i, 0 :: (store 4 into %ir.i)

bb.40.for.cond88:
; predecessors: %bb.39, %bb.41
  successors: %bb.41(0x7c000000), %bb.42(0x04000000); %bb.41(96.88%), %bb.42(3.12%)

  %343:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %343:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.42, implicit killed $nzcv
  B %bb.41

bb.41.for.body90:
; predecessors: %bb.40
  successors: %bb.40(0x80000000); %bb.40(100.00%)

  %347:gpr64 = LDRSWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %350:gpr64 = MADDXrrr %347:gpr64, %375:gpr64, $xzr
  %352:gpr64 = ADDXrr %351:gpr64, %350:gpr64
  %353:gpr64 = LDRSWui %stack.8.k, 0 :: (dereferenceable load 4 from %ir.k)
  %356:gpr64 = MADDXrrr %353:gpr64, %355:gpr64, $xzr
  %357:gpr64 = ADDXrr %352:gpr64, %356:gpr64
  %358:gpr64 = LDRSWui %stack.7.j, 0 :: (dereferenceable load 4 from %ir.j)
  %359:gpr64 = ADDXrs %358:gpr64, %358:gpr64, 2
  %360:gpr64 = UBFMXri %359:gpr64, 61, 60
  %361:gpr64common = ADDXrr %357:gpr64, %360:gpr64
  %362:gpr64 = LDRSWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  %363:gpr64 = UBFMXri %362:gpr64, 61, 60
  %364:fpr64 = LDRDroX %361:gpr64common, %363:gpr64, 0, 0 :: (load 8 from %ir.arrayidx98)
  %366:gpr64 = ADDXrr %377:gpr64, %350:gpr64
  %367:gpr64 = ADDXrr %366:gpr64, %356:gpr64
  %368:gpr64common = ADDXrr %367:gpr64, %360:gpr64
  %369:fpr64 = LDRDroX %368:gpr64common, %363:gpr64, 0, 0 :: (load 8 from %ir.arrayidx106)
  %370:fpr64 = FSUBDrr %364:fpr64, %369:fpr64
  STRDroX %370:fpr64, %361:gpr64common, %363:gpr64, 0, 0 :: (store 8 into %ir.arrayidx114)
  %371:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  %372:gpr32common = nsw ADDWri %371:gpr32common, 1, 0
  STRWui %372:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)
  B %bb.40

bb.42.for.inc118:
; predecessors: %bb.40
  successors: %bb.38(0x80000000); %bb.38(100.00%)

  %345:gpr32common = LDRWui %stack.7.j, 0 :: (dereferenceable load 4 from %ir.j)
  %346:gpr32common = nsw ADDWri %345:gpr32common, 1, 0
  STRWui %346:gpr32common, %stack.7.j, 0 :: (store 4 into %ir.j)
  B %bb.38

bb.43.for.inc121:
; predecessors: %bb.38
  successors: %bb.36(0x80000000); %bb.36(100.00%)

  %340:gpr32common = LDRWui %stack.8.k, 0 :: (dereferenceable load 4 from %ir.k)
  %341:gpr32common = nsw ADDWri %340:gpr32common, 1, 0
  STRWui %341:gpr32common, %stack.8.k, 0 :: (store 4 into %ir.k)
  B %bb.36

bb.44.for.inc124:
; predecessors: %bb.36
  successors: %bb.34(0x80000000); %bb.34(100.00%)

  %335:gpr32common = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %336:gpr32common = nsw ADDWri %335:gpr32common, 1, 0
  STRWui %336:gpr32common, %stack.4.ie, 0 :: (store 4 into %ir.ie)
  B %bb.34

bb.45.for.end126:
; predecessors: %bb.34
  successors: %bb.46(0x50000000), %bb.47(0x30000000); %bb.46(62.50%), %bb.47(37.50%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %254:gpr64
  $x1 = COPY %351:gpr64
  BL @transfb, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %257:gpr32 = LDRWui %399:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW %257:gpr32, %bb.47
  B %bb.46

bb.46.if.then128:
; predecessors: %bb.45
  successors: %bb.47(0x80000000); %bb.47(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = MOVi32imm 9
  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.47.if.end129:
; predecessors: %bb.45, %bb.46
  successors: %bb.48(0x80000000); %bb.48(100.00%)

  STRWui $wzr, %stack.4.ie, 0 :: (store 4 into %ir.ie)

bb.48.for.cond130:
; predecessors: %bb.47, %bb.54
  successors: %bb.49(0x7c000000), %bb.55(0x04000000); %bb.49(96.88%), %bb.55(3.12%)

  %260:gpr32 = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %262:gpr32 = LDRWui %108:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  dead $wzr = SUBSWrr %260:gpr32, %262:gpr32, implicit-def $nzcv
  Bcc 10, %bb.55, implicit killed $nzcv
  B %bb.49

bb.49.for.body132:
; predecessors: %bb.48
  successors: %bb.50(0x80000000); %bb.50(100.00%)

  STRWui $wzr, %stack.5.iside, 0 :: (store 4 into %ir.iside)

bb.50.for.cond133:
; predecessors: %bb.49, %bb.53
  successors: %bb.51(0x7c000000), %bb.54(0x04000000); %bb.51(96.88%), %bb.54(3.12%)

  %310:gpr32common = LDRWui %stack.5.iside, 0 :: (dereferenceable load 4 from %ir.iside)
  %311:gpr64common = LDRSWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  dead $wzr = SUBSWri %310:gpr32common, 5, 0, implicit-def $nzcv
  Bcc 12, %bb.54, implicit killed $nzcv
  B %bb.51

bb.51.for.body135:
; predecessors: %bb.50
  successors: %bb.52(0x30000000), %bb.53(0x50000000); %bb.52(37.50%), %bb.53(62.50%)

  %319:gpr64common = MADDXrrr %311:gpr64common, %316:gpr64, %318:gpr64
  %320:gpr64 = LDRSWui %stack.5.iside, 0 :: (dereferenceable load 4 from %ir.iside)
  %321:gpr32 = LDRWroX %319:gpr64common, %320:gpr64, 0, 1 :: (load 4 from %ir.arrayidx139)
  CBNZW %321:gpr32, %bb.53
  B %bb.52

bb.52.if.then141:
; predecessors: %bb.51
  successors: %bb.53(0x80000000); %bb.53(100.00%)

  %322:gpr64 = LDRSWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %327:gpr64 = MADDXrrr %322:gpr64, %375:gpr64, %351:gpr64
  %328:gpr32 = LDRWui %stack.5.iside, 0 :: (dereferenceable load 4 from %ir.iside)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %327:gpr64
  $w1 = COPY %328:gpr32
  $d0 = FMOVD0
  BL @facev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.53.for.inc146:
; predecessors: %bb.51, %bb.52
  successors: %bb.50(0x80000000); %bb.50(100.00%)

  %330:gpr32common = LDRWui %stack.5.iside, 0 :: (dereferenceable load 4 from %ir.iside)
  %331:gpr32common = nsw ADDWri %330:gpr32common, 1, 0
  STRWui %331:gpr32common, %stack.5.iside, 0 :: (store 4 into %ir.iside)
  B %bb.50

bb.54.for.inc149:
; predecessors: %bb.50
  successors: %bb.48(0x80000000); %bb.48(100.00%)

  %314:gpr32common = nsw ADDWri %311.sub_32:gpr64common, 1, 0
  STRWui %314:gpr32common, %stack.4.ie, 0 :: (store 4 into %ir.ie)
  B %bb.48

bb.55.for.end151:
; predecessors: %bb.48
  successors: %bb.56(0x50000000), %bb.57(0x30000000); %bb.56(62.50%), %bb.57(37.50%)

  %265:gpr32 = LDRWui %264:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %254:gpr64
  $x1 = COPY %267:gpr64
  $w2 = COPY %265:gpr32
  BL @col2, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $w2, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %268:gpr32 = LDRWui %stack.13.ifmortar, 0 :: (dereferenceable load 4 from %ir.ifmortar)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = COPY %268:gpr32
  BL @diffusion, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %270:gpr32 = LDRWui %399:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW %270:gpr32, %bb.57
  B %bb.56

bb.56.if.then153:
; predecessors: %bb.55
  successors: %bb.57(0x80000000); %bb.57(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = MOVi32imm 10
  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.57.if.end154:
; predecessors: %bb.55, %bb.56
  successors: %bb.58(0x50000000), %bb.59(0x30000000); %bb.58(62.50%), %bb.59(37.50%)

  %273:gpr32 = LDRWui %104:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %106:gpr64
  $x1 = COPY %275:gpr64
  $w2 = COPY %273:gpr32
  BL @add2, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $w2, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %277:gpr32 = LDRWui %399:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW %277:gpr32, %bb.59
  B %bb.58

bb.58.if.then156:
; predecessors: %bb.57
  successors: %bb.59(0x80000000); %bb.59(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = MOVi32imm 10
  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.59.if.end157:
; predecessors: %bb.57, %bb.58
  successors: %bb.60(0x50000000), %bb.63(0x30000000); %bb.60(62.50%), %bb.63(37.50%)

  %280:fpr64 = LDRDui %114:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @time :: (dereferenceable load 8 from @time)
  %282:fpr64 = LDRDui %77:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
  %283:fpr64 = FADDDrr %280:fpr64, %282:fpr64
  STRDui %283:fpr64, %114:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
  %284:gpr32 = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
  CBZW %284:gpr32, %bb.63
  B %bb.60

bb.60.land.lhs.true:
; predecessors: %bb.59
  successors: %bb.61(0x40000000), %bb.63(0x40000000); %bb.61(50.00%), %bb.63(50.00%)

  %285:gpr32 = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
  %287:gpr32 = LDRWui %395:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (dereferenceable load 4 from @fre)
  %288:gpr32 = SDIVWr %285:gpr32, %287:gpr32
  %289:gpr32 = nsw MADDWrrr %288:gpr32, %287:gpr32, $wzr
  dead $wzr = SUBSWrr %289:gpr32, %285:gpr32, implicit-def $nzcv
  Bcc 1, %bb.63, implicit killed $nzcv
  B %bb.61

bb.61.if.then161:
; predecessors: %bb.60
  successors: %bb.62(0x40000000), %bb.64(0x40000000); %bb.62(50.00%), %bb.64(50.00%)

  %292:gpr32 = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
  %294:gpr32 = LDRWui %396:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
  dead $wzr = SUBSWrr %292:gpr32, %294:gpr32, implicit-def $nzcv
  Bcc 0, %bb.64, implicit killed $nzcv
  B %bb.62

bb.62.if.then163:
; predecessors: %bb.61
  successors: %bb.64(0x80000000); %bb.64(100.00%)

  %296:gpr32 = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = ADDXri %stack.13.ifmortar, 0, 0
  $w1 = COPY %296:gpr32
  BL @adaptation, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  B %bb.64

bb.63.if.else165:
; predecessors: %bb.59, %bb.60
  successors: %bb.64(0x80000000); %bb.64(100.00%)

  STRWui $wzr, %stack.13.ifmortar, 0 :: (store 4 into %ir.ifmortar)

bb.64.if.end166:
; predecessors: %bb.63, %bb.61, %bb.62
  successors: %bb.20(0x80000000); %bb.20(100.00%)

  %298:fpr64 = LDRDui %393:gpr64sp, 14 :: (dereferenceable load 8 from %ir.nelt_tot)
  undef %301.ssub:fpr64 = LDRSui %108:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  %303:fpr128 = SSHLLv2i32_shift %301:fpr64, 0
  %305:fpr64 = SCVTFv1i64 %303.dsub:fpr128
  %306:fpr64 = FADDDrr %298:fpr64, %305:fpr64
  STRDui %306:fpr64, %393:gpr64sp, 14 :: (store 8 into %ir.nelt_tot)
  %307:gpr32common = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
  %308:gpr32common = nsw ADDWri %307:gpr32common, 1, 0
  STRWui %308:gpr32common, %stack.3.step, 0 :: (store 4 into %ir.step)
  B %bb.20

bb.65.for.end170:
; predecessors: %bb.20
  successors: %bb.66(0x50000000), %bb.78(0x30000000); %bb.66(62.50%), %bb.78(37.50%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %129:gpr32 = MOVi32imm 1
  $w0 = MOVi32imm 1
  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = MOVi32imm 1
  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %130:fpr64 = COPY killed $d0
  STRDui %130:fpr64, %393:gpr64sp, 15 :: (store 8 into %ir.tmax)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = ADDXri %stack.12.Class, 0, 0
  $x1 = ADDXri %stack.14.verified, 0, 0
  BL @verify, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %133:fpr64 = LDRDui %393:gpr64sp, 14 :: (dereferenceable load 8 from %ir.nelt_tot)
  %135:gpr32 = LDRWui %397:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
  %136:gpr32 = MOVi32imm 125
  %137:gpr32common = MADDWrrr %135:gpr32, %136:gpr32, $wzr
  %138:gpr32common = ADDWri %137:gpr32common, 125, 0
  %139:fpr64 = SCVTFUWDri %138:gpr32common
  %140:fpr64 = FMULDrr %133:fpr64, %139:fpr64
  %141:fpr64 = LDRDui %393:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
  %142:gpr64 = MOVi64imm 4696837146684686336
  %143:fpr64 = COPY %142:gpr64
  %144:fpr64 = FMULDrr %141:fpr64, %143:fpr64
  %145:fpr64 = FDIVDrr %140:fpr64, %144:fpr64
  STRDui %145:fpr64, %393:gpr64sp, 16 :: (store 8 into %ir.mflops)
  %146:gpr32 = LDRSBWui %stack.12.Class, 0 :: (dereferenceable load 1 from %ir.Class, align 4)
  %148:gpr32 = LDRWui %396:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
  %149:gpr32 = LDRWui %stack.14.verified, 0 :: (dereferenceable load 4 from %ir.verified)
  ADJCALLSTACKDOWN 72, 0, implicit-def dead $sp, implicit $sp
  %150:gpr64 = MOVaddr target-flags(aarch64-page) @.str.33, target-flags(aarch64-pageoff, aarch64-nc) @.str.33
  STRXui %150:gpr64, $sp, 8 :: (store 8 into stack + 64)
  %152:gpr64 = MOVaddr target-flags(aarch64-page) @.str.32, target-flags(aarch64-pageoff, aarch64-nc) @.str.32
  STRXui %152:gpr64, $sp, 7 :: (store 8 into stack + 56)
  %153:gpr64 = MOVaddr target-flags(aarch64-page) @.str.31, target-flags(aarch64-pageoff, aarch64-nc) @.str.31
  STRXui %153:gpr64, $sp, 6 :: (store 8 into stack + 48)
  %154:gpr64 = MOVaddr target-flags(aarch64-page) @.str.30, target-flags(aarch64-pageoff, aarch64-nc) @.str.30
  STRXui %154:gpr64, $sp, 5 :: (store 8 into stack + 40)
  %155:gpr64 = MOVaddr target-flags(aarch64-page) @.str.29, target-flags(aarch64-pageoff, aarch64-nc) @.str.29
  STRXui %155:gpr64, $sp, 4 :: (store 8 into stack + 32)
  %156:gpr64 = MOVaddr target-flags(aarch64-page) @.str.28, target-flags(aarch64-pageoff, aarch64-nc) @.str.28
  STRXui %156:gpr64, $sp, 3 :: (store 8 into stack + 24)
  %157:gpr64 = MOVaddr target-flags(aarch64-page) @.str.27, target-flags(aarch64-pageoff, aarch64-nc) @.str.27
  STRXui %157:gpr64, $sp, 2 :: (store 8 into stack + 16)
  %158:gpr64 = MOVaddr target-flags(aarch64-page) @.str.26, target-flags(aarch64-pageoff, aarch64-nc) @.str.26
  STRXui %158:gpr64, $sp, 1 :: (store 8 into stack + 8)
  %159:gpr64 = MOVaddr target-flags(aarch64-page) @.str.25, target-flags(aarch64-pageoff, aarch64-nc) @.str.25
  STRXui %159:gpr64, $sp, 0 :: (store 8 into stack)
  %160:gpr64 = MOVaddr target-flags(aarch64-page) @.str.23, target-flags(aarch64-pageoff, aarch64-nc) @.str.23
  %161:gpr64 = MOVaddr target-flags(aarch64-page) @.str.24, target-flags(aarch64-pageoff, aarch64-nc) @.str.24
  $x0 = COPY %160:gpr64
  $w1 = COPY %146:gpr32
  $w2 = MOVi32imm 7
  $w3 = COPY $wzr
  $w4 = COPY $wzr
  $w5 = COPY %148:gpr32
  $d0 = COPY %141:fpr64
  $d1 = COPY %145:fpr64
  $x6 = COPY %161:gpr64
  $w7 = COPY %149:gpr32
  BL @print_results, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit killed $w4, implicit killed $w5, implicit killed $d0, implicit killed $d1, implicit killed $x6, implicit killed $w7, implicit-def $sp
  ADJCALLSTACKUP 72, 0, implicit-def dead $sp, implicit $sp
  %165:gpr32 = LDRWui %399:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW %165:gpr32, %bb.78
  B %bb.66

bb.66.if.then179:
; predecessors: %bb.65
  successors: %bb.67(0x80000000); %bb.67(100.00%)

  STRWui %129:gpr32, %stack.6.i, 0 :: (store 4 into %ir.i)
  %223:gpr64sp = ADDXri %stack.16.trecs, 0, 0

bb.67.for.cond180:
; predecessors: %bb.66, %bb.68
  successors: %bb.68(0x7c000000), %bb.69(0x04000000); %bb.68(96.88%), %bb.69(3.12%)

  %167:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %167:gpr32common, 10, 0, implicit-def $nzcv
  Bcc 12, %bb.69, implicit killed $nzcv
  B %bb.68

bb.68.for.body183:
; predecessors: %bb.67
  successors: %bb.67(0x80000000); %bb.67(100.00%)

  %220:gpr32 = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = COPY %220:gpr32
  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %221:fpr64 = COPY killed $d0
  %222:gpr64 = LDRSWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  STRDroX %221:fpr64, %223:gpr64sp, %222:gpr64, 0, 1 :: (store 8 into %ir.arrayidx186)
  %224:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  %225:gpr32common = nsw ADDWri %224:gpr32common, 1, 0
  STRWui %225:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)
  B %bb.67

bb.69.for.end189:
; predecessors: %bb.67
  successors: %bb.70(0x50000000), %bb.71(0x30000000); %bb.70(62.50%), %bb.71(37.50%)

  %169:fpr64 = LDRDui %393:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
  FCMPDri %169:fpr64, implicit-def $nzcv
  Bcc 1, %bb.71, implicit killed $nzcv
  B %bb.70

bb.70.if.then192:
; predecessors: %bb.69
  successors: %bb.71(0x80000000); %bb.71(100.00%)

  %170:gpr64 = MOVi64imm 4607182418800017408
  STRXui %170:gpr64, %393:gpr64sp, 15 :: (store 8 into %ir.tmax)

bb.71.if.end193:
; predecessors: %bb.69, %bb.70
  successors: %bb.72(0x80000000); %bb.72(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %171:gpr64 = MOVaddr target-flags(aarch64-page) @.str.34, target-flags(aarch64-pageoff, aarch64-nc) @.str.34
  $x0 = COPY %171:gpr64
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %173:gpr32 = MOVi32imm 1
  STRWui %173:gpr32, %stack.6.i, 0 :: (store 4 into %ir.i)
  %179:gpr64sp = ADDXri %stack.17.t_names, 0, 0
  %181:gpr64sp = ADDXri %stack.16.trecs, 0, 0
  %183:gpr64 = MOVi64imm 4636737291354636288
  %188:gpr64 = MOVaddr target-flags(aarch64-page) @.str.35, target-flags(aarch64-pageoff, aarch64-nc) @.str.35
  %215:gpr64 = MOVaddr target-flags(aarch64-page) @.str.36, target-flags(aarch64-pageoff, aarch64-nc) @.str.36
  %216:gpr64 = MOVaddr target-flags(aarch64-page) @.str.37, target-flags(aarch64-pageoff, aarch64-nc) @.str.37
  %205:gpr64 = MOVaddr target-flags(aarch64-page) @.str.38, target-flags(aarch64-pageoff, aarch64-nc) @.str.38

bb.72.for.cond195:
; predecessors: %bb.71, %bb.77
  successors: %bb.73(0x7c000000), %bb.78(0x04000000); %bb.73(96.88%), %bb.78(3.12%)

  %174:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %174:gpr32common, 10, 0, implicit-def $nzcv
  Bcc 12, %bb.78, implicit killed $nzcv
  B %bb.73

bb.73.for.body198:
; predecessors: %bb.72
  successors: %bb.74(0x40000000), %bb.75(0x40000000); %bb.74(50.00%), %bb.75(50.00%)

  %177:gpr64 = LDRSWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  %178:gpr64 = UBFMXri %177:gpr64, 61, 60
  %180:gpr64 = LDRXroX %179:gpr64sp, %178:gpr64, 0, 0 :: (load 8 from %ir.arrayidx200)
  %182:fpr64 = LDRDroX %181:gpr64sp, %178:gpr64, 0, 0 :: (load 8 from %ir.arrayidx204)
  %184:fpr64 = COPY %183:gpr64
  %185:fpr64 = FMULDrr %182:fpr64, %184:fpr64
  %186:fpr64 = LDRDui %393:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
  %187:fpr64 = FDIVDrr %185:fpr64, %186:fpr64
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %188:gpr64
  $x1 = COPY %180:gpr64
  $d0 = COPY %182:fpr64
  $d1 = COPY %187:fpr64
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %190:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %190:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 1, %bb.75, implicit killed $nzcv
  B %bb.74

bb.74.if.then210:
; predecessors: %bb.73
  successors: %bb.77(0x80000000); %bb.77(100.00%)

  %207:fpr64 = LDRDui %393:gpr64sp, 3 :: (dereferenceable load 8 from %ir.arrayidx211)
  %208:fpr64 = LDRDui %393:gpr64sp, 4 :: (dereferenceable load 8 from %ir.arrayidx212, align 16)
  %209:fpr64 = FSUBDrr %207:fpr64, %208:fpr64
  STRDui %209:fpr64, %393:gpr64sp, 11 :: (store 8 into %ir.t2)
  %211:fpr64 = COPY %183:gpr64
  %212:fpr64 = FMULDrr %209:fpr64, %211:fpr64
  %213:fpr64 = LDRDui %393:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
  %214:fpr64 = FDIVDrr %212:fpr64, %213:fpr64
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %215:gpr64
  $x1 = COPY %216:gpr64
  $d0 = COPY %209:fpr64
  $d1 = COPY %214:fpr64
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  B %bb.77

bb.75.if.else217:
; predecessors: %bb.73
  successors: %bb.76(0x40000000), %bb.77(0x40000000); %bb.76(50.00%), %bb.77(50.00%)

  %192:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %192:gpr32common, 7, 0, implicit-def $nzcv
  Bcc 1, %bb.77, implicit killed $nzcv
  B %bb.76

bb.76.if.then220:
; predecessors: %bb.75
  successors: %bb.77(0x80000000); %bb.77(100.00%)

  %194:fpr64 = LDRDui %393:gpr64sp, 5 :: (dereferenceable load 8 from %ir.arrayidx221)
  %195:fpr64 = LDRDui %393:gpr64sp, 6 :: (dereferenceable load 8 from %ir.arrayidx222, align 16)
  %196:fpr64 = FSUBDrr %194:fpr64, %195:fpr64
  %197:fpr64 = LDRDui %393:gpr64sp, 7 :: (dereferenceable load 8 from %ir.arrayidx224)
  %198:fpr64 = FSUBDrr %196:fpr64, %197:fpr64
  STRDui %198:fpr64, %393:gpr64sp, 11 :: (store 8 into %ir.t2)
  %200:fpr64 = COPY %183:gpr64
  %201:fpr64 = FMULDrr %198:fpr64, %200:fpr64
  %202:fpr64 = LDRDui %393:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
  %203:fpr64 = FDIVDrr %201:fpr64, %202:fpr64
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %215:gpr64
  $x1 = COPY %205:gpr64
  $d0 = COPY %198:fpr64
  $d1 = COPY %203:fpr64
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.77.for.inc231:
; predecessors: %bb.75, %bb.76, %bb.74
  successors: %bb.72(0x80000000); %bb.72(100.00%)

  %218:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  %219:gpr32common = nsw ADDWri %218:gpr32common, 1, 0
  STRWui %219:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)
  B %bb.72

bb.78.if.end234:
; predecessors: %bb.65, %bb.72

  $w0 = COPY $wzr
  RET_ReallyLR implicit $w0

# End machine code for function main.

********** MI Scheduling **********
main:%bb.0 entry
  From: %7:gpr64 = COPY $x0
    To: CBZX %7:gpr64, %bb.2
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %7:gpr64 = COPY $x0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Data Latency=0 Reg=%7
    SU(1): Data Latency=0 Reg=%7
  Single Issue       : false;
SU(1):   STRXui %7:gpr64, %stack.18.fp, 0 :: (store 8 into %ir.fp)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%7
  Single Issue       : false;
SU(2):   %399:gpr64common = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
ExitSU:   CBZX %7:gpr64, %bb.2
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%7
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %7:gpr64 = COPY $x0
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %399:gpr64common = ADRP target-flags(aarch64-page) @timeron
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRXui %7:gpr64, %stack.18.fp, 0 :: (store 8 into %ir.fp)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %7:gpr64 = COPY $x0
SU(1):   STRXui %7:gpr64, %stack.18.fp, 0 :: (store 8 into %ir.fp)
SU(2):   %399:gpr64common = ADRP target-flags(aarch64-page) @timeron

********** MI Scheduling **********
main:%bb.0 entry
  From: %5:gpr64 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
    To: BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %5:gpr64 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%5
  Single Issue       : false;
SU(1):   %6:gpr64 = MOVaddr target-flags(aarch64-page) @.str.1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%6
  Single Issue       : false;
SU(2):   $x0 = COPY %5:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%5
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $x1 = COPY %6:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%6
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $x1 = COPY %6:gpr64
  Ready @0c
  BotQ.A TopLatency SU(3) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $x0 = COPY %5:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %6:gpr64 = MOVaddr target-flags(aarch64-page) @.str.1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %5:gpr64 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %5:gpr64 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
SU(1):   %6:gpr64 = MOVaddr target-flags(aarch64-page) @.str.1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1
SU(2):   $x0 = COPY %5:gpr64
SU(3):   $x1 = COPY %6:gpr64

********** MI Scheduling **********
main:%bb.0 entry
  From: %393:gpr64sp = ADDXri %stack.16.trecs, 0, 0
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %393:gpr64sp = ADDXri %stack.16.trecs, 0, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(6): Data Latency=1 Reg=%393
    SU(5): Data Latency=1 Reg=%393
  Single Issue       : false;
SU(1):   %2:gpr64 = COPY $x1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(5): Data Latency=0 Reg=%2
  Single Issue       : false;
SU(2):   %1:gpr32 = COPY $w0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(4): Data Latency=0 Reg=%1
  Single Issue       : false;
SU(3):   STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   STRWui %1:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Data Latency=0 Reg=%1
  Single Issue       : false;
SU(5):   STRXui %2:gpr64, %393:gpr64sp, 20 :: (store 8 into %ir.argv.addr)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%2
    SU(0): Data Latency=1 Reg=%393
  Single Issue       : false;
SU(6):   STRXui $xzr, %393:gpr64sp, 14 :: (store 8 into %ir.nelt_tot)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%393
  Single Issue       : false;
SU(7):   STRWui $wzr, %stack.13.ifmortar, 0 :: (store 4 into %ir.ifmortar)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 6 5 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 7 
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(1) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(1) %2:gpr64 = COPY $x1
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 6 5 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 7 2 3 
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
  Cand SU(2) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(2) %1:gpr32 = COPY $w0
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 6 5 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 7 3 4 
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) STRWui $wzr, %stack.13.ifmortar, 0 :: (store 4 into %ir.ifmortar)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 6 5 4 
Queue TopQ.P: 
Queue TopQ.A: 0 4 3 
BotQ.A RemLatency SU(6) 1c
  BotQ.A RemainingLatency 1 + 1c > CritPath 1
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(6) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(6) STRXui $xzr, %393:gpr64sp, 14 :: (store 8 into %ir.nelt_tot)
  Ready @1c
  BotQ.A TopLatency SU(6) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 5 
Queue TopQ.P: 
Queue TopQ.A: 0 4 3 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) STRXui %2:gpr64, %393:gpr64sp, 20 :: (store 8 into %ir.argv.addr)
  Ready @2c
  BotQ.A TopLatency SU(5) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 0 
Queue TopQ.P: 
Queue TopQ.A: 0 4 3 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) STRWui %1:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
  BotQ.A RemainingLatency 0 + 4c > CritPath 1
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %393:gpr64sp = ADDXri %stack.16.trecs, 0, 0
  Ready @5c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(1):   %2:gpr64 = COPY $x1
SU(2):   %1:gpr32 = COPY $w0
SU(0):   %393:gpr64sp = ADDXri %stack.16.trecs, 0, 0
SU(3):   STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
SU(4):   STRWui %1:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
SU(5):   STRXui %2:gpr64, %393:gpr64sp, 20 :: (store 8 into %ir.argv.addr)
SU(6):   STRXui $xzr, %393:gpr64sp, 14 :: (store 8 into %ir.nelt_tot)
SU(7):   STRWui $wzr, %stack.13.ifmortar, 0 :: (store 4 into %ir.ifmortar)

********** MI Scheduling **********
main:%bb.1 if.then
  From: %11:gpr32 = MOVi32imm 1
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 23
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR32=2
Live In: %399 
Live Out: %22 %399 
Live Thru: GPR32=1
  LiveReg: %22
  LiveReg: %399
  UpdateRegP: SU(1) STRWui %11:gpr32, %399:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
              to GPR32 1
Top Pressure:
GPR32=1
Bottom Pressure:
GPR32=2
Excess PSets: 
Cluster ld/st SU(21) - SU(19)
Cluster ld/st SU(17) - SU(15)
Cluster ld/st SU(13) - SU(11)
Cluster ld/st SU(9) - SU(7)
Cluster ld/st SU(5) - SU(3)
SU(0):   %11:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%11
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   STRWui %11:gpr32, %399:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%11
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(2):   %12:gpr64 = MOVaddr target-flags(aarch64-page) @.str.2, target-flags(aarch64-pageoff, aarch64-nc) @.str.2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%12
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(3):   STRXui %12:gpr64, %stack.17.t_names, 1 :: (store 8 into %ir.arrayidx)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%12
    SU(5): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(4):   %13:gpr64 = MOVaddr target-flags(aarch64-page) @.str.3, target-flags(aarch64-pageoff, aarch64-nc) @.str.3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%13
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(5):   STRXui %13:gpr64, %stack.17.t_names, 2 :: (store 8 into %ir.arrayidx1, align 16)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%13
  Successors:
    SU(3): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(6):   %14:gpr64 = MOVaddr target-flags(aarch64-page) @.str.4, target-flags(aarch64-pageoff, aarch64-nc) @.str.4
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%14
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   STRXui %14:gpr64, %stack.17.t_names, 3 :: (store 8 into %ir.arrayidx2)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%14
    SU(9): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(8):   %15:gpr64 = MOVaddr target-flags(aarch64-page) @.str.5, target-flags(aarch64-pageoff, aarch64-nc) @.str.5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(9): Data Latency=1 Reg=%15
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(9):   STRXui %15:gpr64, %stack.17.t_names, 4 :: (store 8 into %ir.arrayidx3, align 16)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%15
  Successors:
    SU(7): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(10):   %16:gpr64 = MOVaddr target-flags(aarch64-page) @.str.6, target-flags(aarch64-pageoff, aarch64-nc) @.str.6
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(11): Data Latency=1 Reg=%16
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(11):   STRXui %16:gpr64, %stack.17.t_names, 5 :: (store 8 into %ir.arrayidx4)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%16
    SU(13): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(12):   %17:gpr64 = MOVaddr target-flags(aarch64-page) @.str.7, target-flags(aarch64-pageoff, aarch64-nc) @.str.7
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(13): Data Latency=1 Reg=%17
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(13):   STRXui %17:gpr64, %stack.17.t_names, 6 :: (store 8 into %ir.arrayidx5, align 16)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%17
  Successors:
    SU(11): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(14):   %18:gpr64 = MOVaddr target-flags(aarch64-page) @.str.8, target-flags(aarch64-pageoff, aarch64-nc) @.str.8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(15): Data Latency=1 Reg=%18
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(15):   STRXui %18:gpr64, %stack.17.t_names, 7 :: (store 8 into %ir.arrayidx6)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(14): Data Latency=1 Reg=%18
    SU(17): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(16):   %19:gpr64 = MOVaddr target-flags(aarch64-page) @.str.9, target-flags(aarch64-pageoff, aarch64-nc) @.str.9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(17): Data Latency=1 Reg=%19
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(17):   STRXui %19:gpr64, %stack.17.t_names, 8 :: (store 8 into %ir.arrayidx7, align 16)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(16): Data Latency=1 Reg=%19
  Successors:
    SU(15): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(18):   %20:gpr64 = MOVaddr target-flags(aarch64-page) @.str.10, target-flags(aarch64-pageoff, aarch64-nc) @.str.10
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(19): Data Latency=1 Reg=%20
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(19):   STRXui %20:gpr64, %stack.17.t_names, 9 :: (store 8 into %ir.arrayidx8)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(18): Data Latency=1 Reg=%20
    SU(21): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(20):   %21:gpr64 = MOVaddr target-flags(aarch64-page) @.str.11, target-flags(aarch64-pageoff, aarch64-nc) @.str.11
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(21): Data Latency=1 Reg=%21
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(21):   STRXui %21:gpr64, %stack.17.t_names, 10 :: (store 8 into %ir.arrayidx9, align 16)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(20): Data Latency=1 Reg=%21
  Successors:
    SU(19): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(22):   %22:gpr64 = LDRXui %stack.18.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(22): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 22 
Queue BotQ.A: 21 19 17 15 13 11 9 7 5 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 20 22 
Picking from Bot:
  Cand SU(21) ORDER                              
  Cand SU(19) WEAK                               
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot WEAK      
Scheduling SU(19) STRXui %20:gpr64, %stack.17.t_names, 9 :: (store 8 into %ir.arrayidx8)
Bottom Pressure:
GPR32=3
  LiveReg: %20
  UpdateRegP: SU(19) STRXui %20:gpr64, %stack.17.t_names, 9 :: (store 8 into %ir.arrayidx8)
              to 
  Ready @0c
  BotQ.A TopLatency SU(19) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 22 
Queue BotQ.A: 21 1 17 15 13 11 9 7 5 3 18 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 20 22 
BotQ.A RemLatency SU(21) 1c
Picking from Bot:
  Cand SU(21) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(21) STRXui %21:gpr64, %stack.17.t_names, 10 :: (store 8 into %ir.arrayidx9, align 16)
Bottom Pressure:
GPR32=4
  LiveReg: %21
  UpdateRegP: SU(21) STRXui %21:gpr64, %stack.17.t_names, 10 :: (store 8 into %ir.arrayidx9, align 16)
              to 
  Ready @1c
  BotQ.A TopLatency SU(21) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 22 
Queue BotQ.A: 18 1 17 15 13 11 9 7 5 3 20 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 20 22 
BotQ.A RemLatency SU(1) 1c
Picking from Bot:
  Cand SU(18) ORDER                              
  Cand SU(20) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(20) %21:gpr64 = MOVaddr target-flags(aarch64-page) @.str.11, target-flags(aarch64-pageoff, aarch64-nc) @.str.11
Bottom Pressure:
GPR32=3
  Ready @2c
  BotQ.A BotLatency SU(20) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 1 17 15 13 11 9 7 5 3 22 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 22 
BotQ.A RemLatency SU(1) 1c
  BotQ.A RemainingLatency 1 + 3c > CritPath 3
Picking from Bot:
  Cand SU(18) ORDER                              
  Cand SU(1) BOT-PATH                  1 cycles 
  Cand SU(15) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(15) STRXui %18:gpr64, %stack.17.t_names, 7 :: (store 8 into %ir.arrayidx6)
Bottom Pressure:
GPR32=4
  LiveReg: %18
  UpdateRegP: SU(15) STRXui %18:gpr64, %stack.17.t_names, 7 :: (store 8 into %ir.arrayidx6)
              to 
  Ready @3c
  BotQ.A TopLatency SU(15) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 1 17 22 13 11 9 7 5 3 14 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 22 
  BotQ.A RemainingLatency 0 + 4c > CritPath 3
Picking from Bot:
  Cand SU(18) ORDER                              
  Cand SU(17) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(17) STRXui %19:gpr64, %stack.17.t_names, 8 :: (store 8 into %ir.arrayidx7, align 16)
Bottom Pressure:
GPR32=5
  LiveReg: %19
  UpdateRegP: SU(17) STRXui %19:gpr64, %stack.17.t_names, 8 :: (store 8 into %ir.arrayidx7, align 16)
              to 
  Ready @4c
  BotQ.A TopLatency SU(17) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 1 14 22 13 11 9 7 5 3 16 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 22 
  BotQ.A RemainingLatency 0 + 5c > CritPath 3
Picking from Bot:
  Cand SU(18) ORDER                              
  Cand SU(22) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(22) %22:gpr64 = LDRXui %stack.18.fp, 0 :: (dereferenceable load 8 from %ir.fp)
Bottom Pressure:
GPR32=4
  Ready @5c
  BotQ.A BotLatency SU(22) 3c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 1 14 16 13 11 9 7 5 3 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 
  BotQ.A RemainingLatency 0 + 6c > CritPath 3
Picking from Bot:
  Cand SU(18) ORDER                              
  Cand SU(1) BOT-PATH                  1 cycles 
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(11) STRXui %16:gpr64, %stack.17.t_names, 5 :: (store 8 into %ir.arrayidx4)
Bottom Pressure:
GPR32=5
  LiveReg: %16
  UpdateRegP: SU(11) STRXui %16:gpr64, %stack.17.t_names, 5 :: (store 8 into %ir.arrayidx4)
              to 
  Ready @6c
  BotQ.A TopLatency SU(11) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 1 14 16 13 3 9 7 5 10 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 
  BotQ.A RemainingLatency 0 + 7c > CritPath 3
Picking from Bot:
  Cand SU(18) ORDER                              
  Cand SU(13) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(13) STRXui %17:gpr64, %stack.17.t_names, 6 :: (store 8 into %ir.arrayidx5, align 16)
Bottom Pressure:
GPR32=6
  LiveReg: %17
  UpdateRegP: SU(13) STRXui %17:gpr64, %stack.17.t_names, 6 :: (store 8 into %ir.arrayidx5, align 16)
              to 
  Ready @7c
  BotQ.A TopLatency SU(13) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 1 14 16 10 3 9 7 5 12 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 
  BotQ.A RemainingLatency 0 + 8c > CritPath 3
Picking from Bot:
  Cand SU(18) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(18) %20:gpr64 = MOVaddr target-flags(aarch64-page) @.str.10, target-flags(aarch64-pageoff, aarch64-nc) @.str.10
Bottom Pressure:
GPR32=5
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 1 14 16 10 3 9 7 5 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 
  BotQ.A RemainingLatency 0 + 9c > CritPath 3
Picking from Bot:
  Cand SU(12) ORDER                              
  Cand SU(1) BOT-PATH                  1 cycles 
  Cand SU(3) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(7) STRXui %14:gpr64, %stack.17.t_names, 3 :: (store 8 into %ir.arrayidx2)
Bottom Pressure:
GPR32=6
  LiveReg: %14
  UpdateRegP: SU(7) STRXui %14:gpr64, %stack.17.t_names, 3 :: (store 8 into %ir.arrayidx2)
              to 
  Ready @9c
  BotQ.A TopLatency SU(7) 1c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 1 14 16 10 3 9 5 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 
  BotQ.A RemainingLatency 0 + 10c > CritPath 3
Picking from Bot:
  Cand SU(12) ORDER                              
  Cand SU(14) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(9) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(9) STRXui %15:gpr64, %stack.17.t_names, 4 :: (store 8 into %ir.arrayidx3, align 16)
Bottom Pressure:
GPR32=7
  LiveReg: %15
  UpdateRegP: SU(9) STRXui %15:gpr64, %stack.17.t_names, 4 :: (store 8 into %ir.arrayidx3, align 16)
              to 
  Ready @10c
  BotQ.A TopLatency SU(9) 1c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 1 14 16 10 3 6 5 8 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 
  BotQ.A RemainingLatency 0 + 11c > CritPath 3
Picking from Bot:
  Cand SU(12) ORDER                              
  Cand SU(14) ORDER                              
  Cand SU(16) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(16) %19:gpr64 = MOVaddr target-flags(aarch64-page) @.str.9, target-flags(aarch64-pageoff, aarch64-nc) @.str.9
Bottom Pressure:
GPR32=6
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 1 14 8 10 3 6 5 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 
  BotQ.A RemainingLatency 0 + 12c > CritPath 3
Picking from Bot:
  Cand SU(12) ORDER                              
  Cand SU(1) BOT-PATH                  1 cycles 
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(3) STRXui %12:gpr64, %stack.17.t_names, 1 :: (store 8 into %ir.arrayidx)
Bottom Pressure:
GPR32=7
  LiveReg: %12
  UpdateRegP: SU(3) STRXui %12:gpr64, %stack.17.t_names, 1 :: (store 8 into %ir.arrayidx)
              to 
  Ready @12c
  BotQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 1 14 8 10 5 6 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 
  BotQ.A RemainingLatency 0 + 13c > CritPath 3
Picking from Bot:
  Cand SU(12) ORDER                              
  Cand SU(14) ORDER                              
  Cand SU(5) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(5) STRXui %13:gpr64, %stack.17.t_names, 2 :: (store 8 into %ir.arrayidx1, align 16)
Bottom Pressure:
GPR32=8
  LiveReg: %13
  UpdateRegP: SU(5) STRXui %13:gpr64, %stack.17.t_names, 2 :: (store 8 into %ir.arrayidx1, align 16)
              to 
  Ready @13c
  BotQ.A TopLatency SU(5) 1c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 1 14 8 10 2 6 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 
  BotQ.A RemainingLatency 0 + 14c > CritPath 3
Picking from Bot:
  Cand SU(12) ORDER                              
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(14) %18:gpr64 = MOVaddr target-flags(aarch64-page) @.str.8, target-flags(aarch64-pageoff, aarch64-nc) @.str.8
Bottom Pressure:
GPR32=7
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 1 4 8 10 2 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 
  BotQ.A RemainingLatency 0 + 15c > CritPath 3
Picking from Bot:
  Cand SU(12) ORDER                              
  Cand SU(1) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) STRWui %11:gpr32, %399:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
Bottom Pressure:
GPR32=8
  LiveReg: %11
  UpdateRegP: SU(1) STRWui %11:gpr32, %399:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
              to 
  Ready @15c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 6 4 8 10 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 
  BotQ.A RemainingLatency 0 + 16c > CritPath 3
Picking from Bot:
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(12) %17:gpr64 = MOVaddr target-flags(aarch64-page) @.str.7, target-flags(aarch64-pageoff, aarch64-nc) @.str.7
Bottom Pressure:
GPR32=7
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 6 4 8 10 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 
  BotQ.A RemainingLatency 0 + 17c > CritPath 3
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(10) %16:gpr64 = MOVaddr target-flags(aarch64-page) @.str.6, target-flags(aarch64-pageoff, aarch64-nc) @.str.6
Bottom Pressure:
GPR32=6
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 6 4 8 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 
  BotQ.A RemainingLatency 0 + 18c > CritPath 3
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %15:gpr64 = MOVaddr target-flags(aarch64-page) @.str.5, target-flags(aarch64-pageoff, aarch64-nc) @.str.5
Bottom Pressure:
GPR32=5
  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 6 4 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 
  BotQ.A RemainingLatency 0 + 19c > CritPath 3
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %14:gpr64 = MOVaddr target-flags(aarch64-page) @.str.4, target-flags(aarch64-pageoff, aarch64-nc) @.str.4
Bottom Pressure:
GPR32=4
  Ready @19c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 
  BotQ.A RemainingLatency 0 + 20c > CritPath 3
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %13:gpr64 = MOVaddr target-flags(aarch64-page) @.str.3, target-flags(aarch64-pageoff, aarch64-nc) @.str.3
Bottom Pressure:
GPR32=3
  Ready @20c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  BotQ.A RemainingLatency 0 + 21c > CritPath 3
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %12:gpr64 = MOVaddr target-flags(aarch64-page) @.str.2, target-flags(aarch64-pageoff, aarch64-nc) @.str.2
Bottom Pressure:
GPR32=2
  Ready @21c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %11:gpr32 = MOVi32imm 1
Bottom Pressure:
GPR32=1
  Ready @22c
  *** Max MOps 1 at cycle 22
Cycle: 23 BotQ.A
BotQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   %11:gpr32 = MOVi32imm 1
SU(2):   %12:gpr64 = MOVaddr target-flags(aarch64-page) @.str.2, target-flags(aarch64-pageoff, aarch64-nc) @.str.2
SU(4):   %13:gpr64 = MOVaddr target-flags(aarch64-page) @.str.3, target-flags(aarch64-pageoff, aarch64-nc) @.str.3
SU(6):   %14:gpr64 = MOVaddr target-flags(aarch64-page) @.str.4, target-flags(aarch64-pageoff, aarch64-nc) @.str.4
SU(8):   %15:gpr64 = MOVaddr target-flags(aarch64-page) @.str.5, target-flags(aarch64-pageoff, aarch64-nc) @.str.5
SU(10):   %16:gpr64 = MOVaddr target-flags(aarch64-page) @.str.6, target-flags(aarch64-pageoff, aarch64-nc) @.str.6
SU(12):   %17:gpr64 = MOVaddr target-flags(aarch64-page) @.str.7, target-flags(aarch64-pageoff, aarch64-nc) @.str.7
SU(1):   STRWui %11:gpr32, %399:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
SU(14):   %18:gpr64 = MOVaddr target-flags(aarch64-page) @.str.8, target-flags(aarch64-pageoff, aarch64-nc) @.str.8
SU(5):   STRXui %13:gpr64, %stack.17.t_names, 2 :: (store 8 into %ir.arrayidx1, align 16)
SU(3):   STRXui %12:gpr64, %stack.17.t_names, 1 :: (store 8 into %ir.arrayidx)
SU(16):   %19:gpr64 = MOVaddr target-flags(aarch64-page) @.str.9, target-flags(aarch64-pageoff, aarch64-nc) @.str.9
SU(9):   STRXui %15:gpr64, %stack.17.t_names, 4 :: (store 8 into %ir.arrayidx3, align 16)
SU(7):   STRXui %14:gpr64, %stack.17.t_names, 3 :: (store 8 into %ir.arrayidx2)
SU(18):   %20:gpr64 = MOVaddr target-flags(aarch64-page) @.str.10, target-flags(aarch64-pageoff, aarch64-nc) @.str.10
SU(13):   STRXui %17:gpr64, %stack.17.t_names, 6 :: (store 8 into %ir.arrayidx5, align 16)
SU(11):   STRXui %16:gpr64, %stack.17.t_names, 5 :: (store 8 into %ir.arrayidx4)
SU(22):   %22:gpr64 = LDRXui %stack.18.fp, 0 :: (dereferenceable load 8 from %ir.fp)
SU(17):   STRXui %19:gpr64, %stack.17.t_names, 8 :: (store 8 into %ir.arrayidx7, align 16)
SU(15):   STRXui %18:gpr64, %stack.17.t_names, 7 :: (store 8 into %ir.arrayidx6)
SU(20):   %21:gpr64 = MOVaddr target-flags(aarch64-page) @.str.11, target-flags(aarch64-pageoff, aarch64-nc) @.str.11
SU(21):   STRXui %21:gpr64, %stack.17.t_names, 10 :: (store 8 into %ir.arrayidx9, align 16)
SU(19):   STRXui %20:gpr64, %stack.17.t_names, 9 :: (store 8 into %ir.arrayidx8)

********** MI Scheduling **********
main:%bb.3 if.end
  From: %28:gpr64 = COPY $x0
    To: CBZX %28:gpr64, %bb.11
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %28:gpr64 = COPY $x0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Data Latency=0 Reg=%28
    SU(1): Data Latency=0 Reg=%28
  Single Issue       : false;
SU(1):   STRXui %28:gpr64, %stack.18.fp, 0 :: (store 8 into %ir.fp)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%28
  Single Issue       : false;
SU(2):   %395:gpr64common = ADRP target-flags(aarch64-page) @fre
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %396:gpr64common = ADRP target-flags(aarch64-page) @niter
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   %397:gpr64common = ADRP target-flags(aarch64-page) @nmxh
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   %398:gpr64common = ADRP target-flags(aarch64-page) @alpha
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
ExitSU:   CBZX %28:gpr64, %bb.11
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%28
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %28:gpr64 = COPY $x0
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 5 2 3 4 1 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(5) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %398:gpr64common = ADRP target-flags(aarch64-page) @alpha
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 1 2 3 4 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %397:gpr64common = ADRP target-flags(aarch64-page) @nmxh
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 3 
Queue TopQ.P: 
Queue TopQ.A: 1 2 3 
  BotQ.A RemainingLatency 0 + 2c > CritPath 0
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %396:gpr64common = ADRP target-flags(aarch64-page) @niter
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 1 2 
  BotQ.A RemainingLatency 0 + 3c > CritPath 0
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %395:gpr64common = ADRP target-flags(aarch64-page) @fre
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRXui %28:gpr64, %stack.18.fp, 0 :: (store 8 into %ir.fp)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %28:gpr64 = COPY $x0
SU(1):   STRXui %28:gpr64, %stack.18.fp, 0 :: (store 8 into %ir.fp)
SU(2):   %395:gpr64common = ADRP target-flags(aarch64-page) @fre
SU(3):   %396:gpr64common = ADRP target-flags(aarch64-page) @niter
SU(4):   %397:gpr64common = ADRP target-flags(aarch64-page) @nmxh
SU(5):   %398:gpr64common = ADRP target-flags(aarch64-page) @alpha

********** MI Scheduling **********
main:%bb.3 if.end
  From: %26:gpr64 = MOVaddr target-flags(aarch64-page) @.str.13, target-flags(aarch64-pageoff, aarch64-nc) @.str.13
    To: BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %26:gpr64 = MOVaddr target-flags(aarch64-page) @.str.13, target-flags(aarch64-pageoff, aarch64-nc) @.str.13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%26
  Single Issue       : false;
SU(1):   %27:gpr64 = MOVaddr target-flags(aarch64-page) @.str.1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%27
  Single Issue       : false;
SU(2):   $x0 = COPY %26:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%26
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $x1 = COPY %27:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%27
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $x1 = COPY %27:gpr64
  Ready @0c
  BotQ.A TopLatency SU(3) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $x0 = COPY %26:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %27:gpr64 = MOVaddr target-flags(aarch64-page) @.str.1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %26:gpr64 = MOVaddr target-flags(aarch64-page) @.str.13, target-flags(aarch64-pageoff, aarch64-nc) @.str.13
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %26:gpr64 = MOVaddr target-flags(aarch64-page) @.str.13, target-flags(aarch64-pageoff, aarch64-nc) @.str.13
SU(1):   %27:gpr64 = MOVaddr target-flags(aarch64-page) @.str.1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1
SU(2):   $x0 = COPY %26:gpr64
SU(3):   $x1 = COPY %27:gpr64

********** MI Scheduling **********
main:%bb.3 if.end
  From: %24:gpr64 = MOVaddr target-flags(aarch64-page) @.str.12, target-flags(aarch64-pageoff, aarch64-nc) @.str.12
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %24:gpr64 = MOVaddr target-flags(aarch64-page) @.str.12, target-flags(aarch64-pageoff, aarch64-nc) @.str.12
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%24
  Single Issue       : false;
SU(1):   $x0 = COPY %24:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%24
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %24:gpr64
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %24:gpr64 = MOVaddr target-flags(aarch64-page) @.str.12, target-flags(aarch64-pageoff, aarch64-nc) @.str.12
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %24:gpr64 = MOVaddr target-flags(aarch64-page) @.str.12, target-flags(aarch64-pageoff, aarch64-nc) @.str.12
SU(1):   $x0 = COPY %24:gpr64

********** MI Scheduling **********
main:%bb.4 if.then14
  From: %45:gpr32 = COPY $w0
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %45:gpr32 = COPY $w0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%45
  Single Issue       : false;
SU(1):   STRWui %45:gpr32, %stack.19.result, 0 :: (store 4 into %ir.result)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%45
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %45:gpr32, %stack.19.result, 0 :: (store 4 into %ir.result)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %45:gpr32 = COPY $w0
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %45:gpr32 = COPY $w0
SU(1):   STRWui %45:gpr32, %stack.19.result, 0 :: (store 4 into %ir.result)

********** MI Scheduling **********
main:%bb.4 if.then14
  From: %43:gpr64 = MOVaddr target-flags(aarch64-page) @.str.15, target-flags(aarch64-pageoff, aarch64-nc) @.str.15
    To: BL @fscanf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w0
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %43:gpr64 = MOVaddr target-flags(aarch64-page) @.str.15, target-flags(aarch64-pageoff, aarch64-nc) @.str.15
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%43
  Single Issue       : false;
SU(1):   %44:gpr64 = MOVaddr target-flags(aarch64-page) @fre, target-flags(aarch64-pageoff, aarch64-nc) @fre
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(4): Data Latency=1 Reg=%44
  Single Issue       : false;
SU(2):   $x0 = COPY %42:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $x1 = COPY %43:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%43
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $x2 = COPY %44:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%44
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @fscanf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w0
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=0 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(4) $x2 = COPY %44:gpr64
  Ready @0c
  BotQ.A TopLatency SU(4) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 2 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(3) $x1 = COPY %43:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $x0 = COPY %42:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %44:gpr64 = MOVaddr target-flags(aarch64-page) @fre, target-flags(aarch64-pageoff, aarch64-nc) @fre
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %43:gpr64 = MOVaddr target-flags(aarch64-page) @.str.15, target-flags(aarch64-pageoff, aarch64-nc) @.str.15
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %43:gpr64 = MOVaddr target-flags(aarch64-page) @.str.15, target-flags(aarch64-pageoff, aarch64-nc) @.str.15
SU(1):   %44:gpr64 = MOVaddr target-flags(aarch64-page) @fre, target-flags(aarch64-pageoff, aarch64-nc) @fre
SU(2):   $x0 = COPY %42:gpr64
SU(3):   $x1 = COPY %43:gpr64
SU(4):   $x2 = COPY %44:gpr64

********** MI Scheduling **********
main:%bb.4 if.then14
  From: %40:gpr64 = MOVaddr target-flags(aarch64-page) @.str.14, target-flags(aarch64-pageoff, aarch64-nc) @.str.14
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %40:gpr64 = MOVaddr target-flags(aarch64-page) @.str.14, target-flags(aarch64-pageoff, aarch64-nc) @.str.14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%40
  Single Issue       : false;
SU(1):   $x0 = COPY %40:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%40
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %40:gpr64
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %40:gpr64 = MOVaddr target-flags(aarch64-page) @.str.14, target-flags(aarch64-pageoff, aarch64-nc) @.str.14
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %40:gpr64 = MOVaddr target-flags(aarch64-page) @.str.14, target-flags(aarch64-pageoff, aarch64-nc) @.str.14
SU(1):   $x0 = COPY %40:gpr64

********** MI Scheduling **********
main:%bb.5 while.cond
  From: %47:gpr32sp = COPY $w0
    To: Bcc 1, %bb.5, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %47:gpr32sp = COPY $w0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=0 Reg=%47
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %47:gpr32sp, 10, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Data Latency=0 Reg=%47
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.5, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %47:gpr32sp, 10, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %47:gpr32sp = COPY $w0
  Ready @2c
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %47:gpr32sp = COPY $w0
SU(1):   dead $wzr = SUBSWri %47:gpr32sp, 10, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.6 while.end
  From: %52:gpr32 = COPY $w0
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %52:gpr32 = COPY $w0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%52
  Single Issue       : false;
SU(1):   STRWui %52:gpr32, %stack.19.result, 0 :: (store 4 into %ir.result)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%52
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %52:gpr32, %stack.19.result, 0 :: (store 4 into %ir.result)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %52:gpr32 = COPY $w0
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %52:gpr32 = COPY $w0
SU(1):   STRWui %52:gpr32, %stack.19.result, 0 :: (store 4 into %ir.result)

********** MI Scheduling **********
main:%bb.6 while.end
  From: %50:gpr64 = MOVaddr target-flags(aarch64-page) @.str.15, target-flags(aarch64-pageoff, aarch64-nc) @.str.15
    To: BL @fscanf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w0
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %50:gpr64 = MOVaddr target-flags(aarch64-page) @.str.15, target-flags(aarch64-pageoff, aarch64-nc) @.str.15
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%50
  Single Issue       : false;
SU(1):   %51:gpr64 = MOVaddr target-flags(aarch64-page) @niter, target-flags(aarch64-pageoff, aarch64-nc) @niter
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(4): Data Latency=1 Reg=%51
  Single Issue       : false;
SU(2):   $x0 = COPY %49:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $x1 = COPY %50:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%50
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $x2 = COPY %51:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%51
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @fscanf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w0
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=0 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(4) $x2 = COPY %51:gpr64
  Ready @0c
  BotQ.A TopLatency SU(4) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 2 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(3) $x1 = COPY %50:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $x0 = COPY %49:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %51:gpr64 = MOVaddr target-flags(aarch64-page) @niter, target-flags(aarch64-pageoff, aarch64-nc) @niter
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %50:gpr64 = MOVaddr target-flags(aarch64-page) @.str.15, target-flags(aarch64-pageoff, aarch64-nc) @.str.15
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %50:gpr64 = MOVaddr target-flags(aarch64-page) @.str.15, target-flags(aarch64-pageoff, aarch64-nc) @.str.15
SU(1):   %51:gpr64 = MOVaddr target-flags(aarch64-page) @niter, target-flags(aarch64-pageoff, aarch64-nc) @niter
SU(2):   $x0 = COPY %49:gpr64
SU(3):   $x1 = COPY %50:gpr64
SU(4):   $x2 = COPY %51:gpr64

********** MI Scheduling **********
main:%bb.7 while.cond20
  From: %54:gpr32sp = COPY $w0
    To: Bcc 1, %bb.7, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %54:gpr32sp = COPY $w0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=0 Reg=%54
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %54:gpr32sp, 10, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Data Latency=0 Reg=%54
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.7, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %54:gpr32sp, 10, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %54:gpr32sp = COPY $w0
  Ready @2c
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %54:gpr32sp = COPY $w0
SU(1):   dead $wzr = SUBSWri %54:gpr32sp, 10, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.8 while.end24
  From: %59:gpr32 = COPY $w0
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %59:gpr32 = COPY $w0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%59
  Single Issue       : false;
SU(1):   STRWui %59:gpr32, %stack.19.result, 0 :: (store 4 into %ir.result)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%59
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %59:gpr32, %stack.19.result, 0 :: (store 4 into %ir.result)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %59:gpr32 = COPY $w0
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   %59:gpr32 = COPY $w0
SU(1):   STRWui %59:gpr32, %stack.19.result, 0 :: (store 4 into %ir.result)

********** MI Scheduling **********
main:%bb.8 while.end24
  From: %57:gpr64 = MOVaddr target-flags(aarch64-page) @.str.15, target-flags(aarch64-pageoff, aarch64-nc) @.str.15
    To: BL @fscanf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w0
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %57:gpr64 = MOVaddr target-flags(aarch64-page) @.str.15, target-flags(aarch64-pageoff, aarch64-nc) @.str.15
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%57
  Single Issue       : false;
SU(1):   %58:gpr64 = MOVaddr target-flags(aarch64-page) @nmxh, target-flags(aarch64-pageoff, aarch64-nc) @nmxh
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(4): Data Latency=1 Reg=%58
  Single Issue       : false;
SU(2):   $x0 = COPY %56:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $x1 = COPY %57:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%57
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $x2 = COPY %58:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%58
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @fscanf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w0
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=0 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(4) $x2 = COPY %58:gpr64
  Ready @0c
  BotQ.A TopLatency SU(4) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 2 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(3) $x1 = COPY %57:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $x0 = COPY %56:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %58:gpr64 = MOVaddr target-flags(aarch64-page) @nmxh, target-flags(aarch64-pageoff, aarch64-nc) @nmxh
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %57:gpr64 = MOVaddr target-flags(aarch64-page) @.str.15, target-flags(aarch64-pageoff, aarch64-nc) @.str.15
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   %57:gpr64 = MOVaddr target-flags(aarch64-page) @.str.15, target-flags(aarch64-pageoff, aarch64-nc) @.str.15
SU(1):   %58:gpr64 = MOVaddr target-flags(aarch64-page) @nmxh, target-flags(aarch64-pageoff, aarch64-nc) @nmxh
SU(2):   $x0 = COPY %56:gpr64
SU(3):   $x1 = COPY %57:gpr64
SU(4):   $x2 = COPY %58:gpr64

********** MI Scheduling **********
main:%bb.9 while.cond26
  From: %61:gpr32sp = COPY $w0
    To: Bcc 1, %bb.9, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %61:gpr32sp = COPY $w0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=0 Reg=%61
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %61:gpr32sp, 10, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Data Latency=0 Reg=%61
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.9, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %61:gpr32sp, 10, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %61:gpr32sp = COPY $w0
  Ready @2c
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   %61:gpr32sp = COPY $w0
SU(1):   dead $wzr = SUBSWri %61:gpr32sp, 10, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.10 while.end30
  From: %66:gpr32 = COPY $w0
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %66:gpr32 = COPY $w0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%66
  Single Issue       : false;
SU(1):   STRWui %66:gpr32, %stack.19.result, 0 :: (store 4 into %ir.result)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%66
  Single Issue       : false;
SU(2):   %67:gpr32 = MOVi32imm 85
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%67
  Single Issue       : false;
SU(3):   STRBBui %67:gpr32, %stack.12.Class, 0 :: (store 1 into %ir.Class, align 4)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%67
  Single Issue       : false;
SU(4):   %68:gpr64 = LDRXui %stack.18.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %66:gpr32 = COPY $w0
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 3 1 
Queue TopQ.P: 
Queue TopQ.A: 4 2 1 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(4) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) STRBBui %67:gpr32, %stack.12.Class, 0 :: (store 1 into %ir.Class, align 4)
  Ready @0c
  BotQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 4 2 1 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %67:gpr32 = MOVi32imm 85
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %66:gpr32, %stack.19.result, 0 :: (store 4 into %ir.result)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %68:gpr64 = LDRXui %stack.18.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  Ready @3c
  BotQ.A BotLatency SU(4) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   %66:gpr32 = COPY $w0
SU(4):   %68:gpr64 = LDRXui %stack.18.fp, 0 :: (dereferenceable load 8 from %ir.fp)
SU(1):   STRWui %66:gpr32, %stack.19.result, 0 :: (store 4 into %ir.result)
SU(2):   %67:gpr32 = MOVi32imm 85
SU(3):   STRBBui %67:gpr32, %stack.12.Class, 0 :: (store 1 into %ir.Class, align 4)

********** MI Scheduling **********
main:%bb.10 while.end30
  From: %64:gpr64 = MOVaddr target-flags(aarch64-page) @.str.16, target-flags(aarch64-pageoff, aarch64-nc) @.str.16
    To: BL @fscanf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w0
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %64:gpr64 = MOVaddr target-flags(aarch64-page) @.str.16, target-flags(aarch64-pageoff, aarch64-nc) @.str.16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%64
  Single Issue       : false;
SU(1):   %65:gpr64 = MOVaddr target-flags(aarch64-page) @alpha, target-flags(aarch64-pageoff, aarch64-nc) @alpha
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(4): Data Latency=1 Reg=%65
  Single Issue       : false;
SU(2):   $x0 = COPY %63:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $x1 = COPY %64:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%64
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $x2 = COPY %65:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%65
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @fscanf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w0
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=0 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(4) $x2 = COPY %65:gpr64
  Ready @0c
  BotQ.A TopLatency SU(4) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 2 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(3) $x1 = COPY %64:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $x0 = COPY %63:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %65:gpr64 = MOVaddr target-flags(aarch64-page) @alpha, target-flags(aarch64-pageoff, aarch64-nc) @alpha
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %64:gpr64 = MOVaddr target-flags(aarch64-page) @.str.16, target-flags(aarch64-pageoff, aarch64-nc) @.str.16
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   %64:gpr64 = MOVaddr target-flags(aarch64-page) @.str.16, target-flags(aarch64-pageoff, aarch64-nc) @.str.16
SU(1):   %65:gpr64 = MOVaddr target-flags(aarch64-page) @alpha, target-flags(aarch64-pageoff, aarch64-nc) @alpha
SU(2):   $x0 = COPY %63:gpr64
SU(3):   $x1 = COPY %64:gpr64
SU(4):   $x2 = COPY %65:gpr64

********** MI Scheduling **********
main:%bb.11 if.else33
  From: %32:gpr32 = MOVi32imm 5
    To: End RegionInstrs: 10
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %32:gpr32 = MOVi32imm 5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%32
  Single Issue       : false;
SU(1):   STRWui %32:gpr32, %395:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (store 4 into @fre)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%32
  Single Issue       : false;
SU(2):   %34:gpr32 = MOVi32imm 200
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%34
  Single Issue       : false;
SU(3):   STRWui %34:gpr32, %396:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (store 4 into @niter)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%34
  Single Issue       : false;
SU(4):   %36:gpr32 = MOVi32imm 10
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%36
  Single Issue       : false;
SU(5):   STRWui %36:gpr32, %397:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (store 4 into @nmxh)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%36
  Single Issue       : false;
SU(6):   %38:gpr64 = MOVi64imm 4590140797810047451
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%38
  Single Issue       : false;
SU(7):   STRXui %38:gpr64, %398:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @alpha :: (store 8 into @alpha)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%38
  Single Issue       : false;
SU(8):   %39:gpr32 = MOVi32imm 66
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(9): Data Latency=1 Reg=%39
  Single Issue       : false;
SU(9):   STRBBui %39:gpr32, %stack.12.Class, 0 :: (store 1 into %ir.Class, align 4)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%39
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 7 5 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 
Picking from Bot:
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) STRBBui %39:gpr32, %stack.12.Class, 0 :: (store 1 into %ir.Class, align 4)
  Ready @0c
  BotQ.A TopLatency SU(9) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 7 5 3 8 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 
BotQ.A RemLatency SU(1) 1c
  BotQ.A RemainingLatency 1 + 1c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(7) STRXui %38:gpr64, %398:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @alpha :: (store 8 into @alpha)
  Ready @1c
  BotQ.A TopLatency SU(7) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 8 5 3 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) STRWui %36:gpr32, %397:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (store 4 into @nmxh)
  Ready @2c
  BotQ.A TopLatency SU(5) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 8 6 3 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(3) STRWui %34:gpr32, %396:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (store 4 into @niter)
  Ready @3c
  BotQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 8 6 4 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 
  BotQ.A RemainingLatency 0 + 4c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) STRWui %32:gpr32, %395:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (store 4 into @fre)
  Ready @4c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 8 6 4 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 
  BotQ.A RemainingLatency 0 + 5c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %39:gpr32 = MOVi32imm 66
  Ready @5c
  BotQ.A BotLatency SU(8) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 6 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 
  BotQ.A RemainingLatency 0 + 6c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %38:gpr64 = MOVi64imm 4590140797810047451
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 
  BotQ.A RemainingLatency 0 + 7c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %36:gpr32 = MOVi32imm 10
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  BotQ.A RemainingLatency 0 + 8c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %34:gpr32 = MOVi32imm 200
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %32:gpr32 = MOVi32imm 5
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   %32:gpr32 = MOVi32imm 5
SU(2):   %34:gpr32 = MOVi32imm 200
SU(4):   %36:gpr32 = MOVi32imm 10
SU(6):   %38:gpr64 = MOVi64imm 4590140797810047451
SU(8):   %39:gpr32 = MOVi32imm 66
SU(1):   STRWui %32:gpr32, %395:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (store 4 into @fre)
SU(3):   STRWui %34:gpr32, %396:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (store 4 into @niter)
SU(5):   STRWui %36:gpr32, %397:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (store 4 into @nmxh)
SU(7):   STRXui %38:gpr64, %398:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @alpha :: (store 8 into @alpha)
SU(9):   STRBBui %39:gpr32, %stack.12.Class, 0 :: (store 1 into %ir.Class, align 4)

********** MI Scheduling **********
main:%bb.11 if.else33
  From: %29:gpr64 = MOVaddr target-flags(aarch64-page) @.str.17, target-flags(aarch64-pageoff, aarch64-nc) @.str.17
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %29:gpr64 = MOVaddr target-flags(aarch64-page) @.str.17, target-flags(aarch64-pageoff, aarch64-nc) @.str.17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%29
  Single Issue       : false;
SU(1):   $x0 = COPY %29:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%29
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %29:gpr64
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %29:gpr64 = MOVaddr target-flags(aarch64-page) @.str.17, target-flags(aarch64-pageoff, aarch64-nc) @.str.17
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   %29:gpr64 = MOVaddr target-flags(aarch64-page) @.str.17, target-flags(aarch64-pageoff, aarch64-nc) @.str.17
SU(1):   $x0 = COPY %29:gpr64

********** MI Scheduling **********
main:%bb.12 if.end35
  From: %98:gpr32 = MOVi32imm 1
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %98:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%98
  Single Issue       : false;
SU(1):   STRWui %98:gpr32, %stack.6.i, 0 :: (store 4 into %ir.i)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%98
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %98:gpr32, %stack.6.i, 0 :: (store 4 into %ir.i)
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %98:gpr32 = MOVi32imm 1
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   %98:gpr32 = MOVi32imm 1
SU(1):   STRWui %98:gpr32, %stack.6.i, 0 :: (store 4 into %ir.i)

********** MI Scheduling **********
main:%bb.12 if.end35
  From: %96:gpr64 = MOVaddr target-flags(aarch64-page) @.str.22, target-flags(aarch64-pageoff, aarch64-nc) @.str.22
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $d0, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %96:gpr64 = MOVaddr target-flags(aarch64-page) @.str.22, target-flags(aarch64-pageoff, aarch64-nc) @.str.22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%96
  Single Issue       : false;
SU(1):   $x0 = COPY %96:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%96
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %95:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $d0, implicit-def $sp, implicit-def dead $w0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $d0 = COPY %95:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %96:gpr64
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %96:gpr64 = MOVaddr target-flags(aarch64-page) @.str.22, target-flags(aarch64-pageoff, aarch64-nc) @.str.22
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   %96:gpr64 = MOVaddr target-flags(aarch64-page) @.str.22, target-flags(aarch64-pageoff, aarch64-nc) @.str.22
SU(1):   $x0 = COPY %96:gpr64
SU(2):   $d0 = COPY %95:fpr64

********** MI Scheduling **********
main:%bb.12 if.end35
  From: %92:gpr64 = MOVaddr target-flags(aarch64-page) @.str.21, target-flags(aarch64-pageoff, aarch64-nc) @.str.21
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %92:gpr64 = MOVaddr target-flags(aarch64-page) @.str.21, target-flags(aarch64-pageoff, aarch64-nc) @.str.21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%92
  Single Issue       : false;
SU(1):   $x0 = COPY %92:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%92
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $w1 = COPY %91:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $w1 = COPY %91:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %92:gpr64
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %92:gpr64 = MOVaddr target-flags(aarch64-page) @.str.21, target-flags(aarch64-pageoff, aarch64-nc) @.str.21
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   %92:gpr64 = MOVaddr target-flags(aarch64-page) @.str.21, target-flags(aarch64-pageoff, aarch64-nc) @.str.21
SU(1):   $x0 = COPY %92:gpr64
SU(2):   $w1 = COPY %91:gpr32

********** MI Scheduling **********
main:%bb.12 if.end35
  From: %88:gpr64 = MOVaddr target-flags(aarch64-page) @.str.20, target-flags(aarch64-pageoff, aarch64-nc) @.str.20
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %88:gpr64 = MOVaddr target-flags(aarch64-page) @.str.20, target-flags(aarch64-pageoff, aarch64-nc) @.str.20
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%88
  Single Issue       : false;
SU(1):   $x0 = COPY %88:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%88
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $w1 = COPY %86:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $d0 = COPY %87:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp, implicit-def dead $w0
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $d0 = COPY %87:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(2) $w1 = COPY %86:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %88:gpr64
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %88:gpr64 = MOVaddr target-flags(aarch64-page) @.str.20, target-flags(aarch64-pageoff, aarch64-nc) @.str.20
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   %88:gpr64 = MOVaddr target-flags(aarch64-page) @.str.20, target-flags(aarch64-pageoff, aarch64-nc) @.str.20
SU(1):   $x0 = COPY %88:gpr64
SU(2):   $w1 = COPY %86:gpr32
SU(3):   $d0 = COPY %87:fpr64

********** MI Scheduling **********
main:%bb.12 if.end35
  From: %86:gpr32 = LDRWui %396:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %86:gpr32 = LDRWui %396:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %87:fpr64 = LDRDui %77:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %87:fpr64 = LDRDui %77:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
  Ready @3c
  BotQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 1
  Executed: 4c
  Critical: 1c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %86:gpr32 = LDRWui %396:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   %86:gpr32 = LDRWui %396:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
SU(1):   %87:fpr64 = LDRDui %77:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)

********** MI Scheduling **********
main:%bb.12 if.end35
  From: %83:gpr64 = MOVaddr target-flags(aarch64-page) @.str.19, target-flags(aarch64-pageoff, aarch64-nc) @.str.19
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %83:gpr64 = MOVaddr target-flags(aarch64-page) @.str.19, target-flags(aarch64-pageoff, aarch64-nc) @.str.19
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%83
  Single Issue       : false;
SU(1):   $x0 = COPY %83:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%83
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $w1 = COPY %82:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $w1 = COPY %82:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %83:gpr64
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %83:gpr64 = MOVaddr target-flags(aarch64-page) @.str.19, target-flags(aarch64-pageoff, aarch64-nc) @.str.19
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   %83:gpr64 = MOVaddr target-flags(aarch64-page) @.str.19, target-flags(aarch64-pageoff, aarch64-nc) @.str.19
SU(1):   $x0 = COPY %83:gpr64
SU(2):   $w1 = COPY %82:gpr32

********** MI Scheduling **********
main:%bb.12 if.end35
  From: %78:gpr64 = MOVaddr target-flags(aarch64-page) @.str.18, target-flags(aarch64-pageoff, aarch64-nc) @.str.18
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %78:gpr64 = MOVaddr target-flags(aarch64-page) @.str.18, target-flags(aarch64-pageoff, aarch64-nc) @.str.18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%78
  Single Issue       : false;
SU(1):   $x0 = COPY %78:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%78
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $w1 = MOVi32imm 7
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %78:gpr64
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $w1 = MOVi32imm 7
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %78:gpr64 = MOVaddr target-flags(aarch64-page) @.str.18, target-flags(aarch64-pageoff, aarch64-nc) @.str.18
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   %78:gpr64 = MOVaddr target-flags(aarch64-page) @.str.18, target-flags(aarch64-pageoff, aarch64-nc) @.str.18
SU(2):   $w1 = MOVi32imm 7
SU(1):   $x0 = COPY %78:gpr64

********** MI Scheduling **********
main:%bb.12 if.end35
  From: %72:fpr64 = COPY killed $d0
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %72:fpr64 = COPY killed $d0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=0 Reg=%72
    SU(2): Data Latency=0 Reg=%72
  Single Issue       : false;
SU(1):   %73:gpr64common = ADRP target-flags(aarch64-page) @dlmin
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%73
  Single Issue       : false;
SU(2):   STRDui %72:fpr64, %73:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @dlmin :: (store 8 into @dlmin)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%73
    SU(0): Data Latency=0 Reg=%72
  Single Issue       : false;
SU(3):   %74:gpr64common = ADRP target-flags(aarch64-page) %const.0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(4): Data Latency=1 Reg=%74
  Single Issue       : false;
SU(4):   %75:fpr64 = LDRDui %74:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(3): Data Latency=1 Reg=%74
  Successors:
    SU(5): Data Latency=4 Reg=%75
  Single Issue       : false;
SU(5):   %76:fpr64 = FMULDrr %72:fpr64, %75:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(4): Data Latency=4 Reg=%75
    SU(0): Data Latency=0 Reg=%72
  Successors:
    SU(7): Data Latency=1 Reg=%76
  Single Issue       : false;
SU(6):   %77:gpr64common = ADRP target-flags(aarch64-page) @dtime
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%77
  Single Issue       : false;
SU(7):   STRDui %76:fpr64, %77:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (store 8 into @dtime)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%76
    SU(6): Data Latency=1 Reg=%77
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %72:fpr64 = COPY killed $d0
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 2 
Queue TopQ.P: 
Queue TopQ.A: 6 1 3 
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(6) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) STRDui %76:fpr64, %77:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (store 8 into @dtime)
  Ready @0c
  BotQ.A TopLatency SU(7) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 5 6 
Queue TopQ.P: 
Queue TopQ.A: 6 1 3 
BotQ.A RemLatency SU(5) 5c
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %77:gpr64common = ADRP target-flags(aarch64-page) @dtime
  Ready @1c
  BotQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 5 
Queue TopQ.P: 
Queue TopQ.A: 3 1 
BotQ.A RemLatency SU(5) 5c
  BotQ.A RemainingLatency 5 + 2c > CritPath 6
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(5) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) %76:fpr64 = FMULDrr %72:fpr64, %75:fpr64
  Ready @2c
  BotQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRDui %72:fpr64, %73:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @dlmin :: (store 8 into @dlmin)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %73:gpr64common = ADRP target-flags(aarch64-page) @dlmin
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %75:fpr64 = LDRDui %74:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  Ready @6c
  BotQ.A BotLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %74:gpr64common = ADRP target-flags(aarch64-page) %const.0
  Ready @7c
  BotQ.A BotLatency SU(3) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   %72:fpr64 = COPY killed $d0
SU(3):   %74:gpr64common = ADRP target-flags(aarch64-page) %const.0
SU(4):   %75:fpr64 = LDRDui %74:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
SU(1):   %73:gpr64common = ADRP target-flags(aarch64-page) @dlmin
SU(2):   STRDui %72:fpr64, %73:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @dlmin :: (store 8 into @dlmin)
SU(5):   %76:fpr64 = FMULDrr %72:fpr64, %75:fpr64
SU(6):   %77:gpr64common = ADRP target-flags(aarch64-page) @dtime
SU(7):   STRDui %76:fpr64, %77:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (store 8 into @dtime)

********** MI Scheduling **********
main:%bb.12 if.end35
  From: %70:fpr64 = FMOVDi 96
    To: BL @pow, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def $d0
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %70:fpr64 = FMOVDi 96
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%70
  Single Issue       : false;
SU(1):   %71:fpr64 = FMOVDi 28
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%71
  Single Issue       : false;
SU(2):   $d0 = COPY %70:fpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%70
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $d1 = COPY %71:fpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%71
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @pow, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def $d0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $d1 = COPY %71:fpr64
  Ready @0c
  BotQ.A TopLatency SU(3) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $d0 = COPY %70:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %71:fpr64 = FMOVDi 28
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %70:fpr64 = FMOVDi 96
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   %70:fpr64 = FMOVDi 96
SU(1):   %71:fpr64 = FMOVDi 28
SU(2):   $d0 = COPY %70:fpr64
SU(3):   $d1 = COPY %71:fpr64

********** MI Scheduling **********
main:%bb.13 for.cond
  From: %99:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.15, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %99:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%99
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %99:gpr32common, 10, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%99
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.15, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %99:gpr32common, 10, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %99:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   %99:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %99:gpr32common, 10, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.14 for.body
  From: %391:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: B %bb.13
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %391:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%391
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %392:gpr32common = nsw ADDWri %391:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%391
  Successors:
    SU(2): Data Latency=1 Reg=%392
  Single Issue       : false;
SU(2):   STRWui %392:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%392
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.13
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %392:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %392:gpr32common = nsw ADDWri %391:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %391:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   %391:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   %392:gpr32common = nsw ADDWri %391:gpr32common, 1, 0
SU(2):   STRWui %392:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)

********** MI Scheduling **********
main:%bb.17 if.end44
  From: $x0 = ADDXri %stack.13.ifmortar, 0, 0
    To: BL @adaptation, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = ADDXri %stack.13.ifmortar, 0, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $w1 = COPY $wzr
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @adaptation, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $w1 = COPY $wzr
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = ADDXri %stack.13.ifmortar, 0, 0
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   $x0 = ADDXri %stack.13.ifmortar, 0, 0
SU(1):   $w1 = COPY $wzr

********** MI Scheduling **********
main:%bb.17 if.end44
  From: %114:gpr64common = ADRP target-flags(aarch64-page) @time
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %114:gpr64common = ADRP target-flags(aarch64-page) @time
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%114
  Single Issue       : false;
SU(1):   STRXui $xzr, %114:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%114
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRXui $xzr, %114:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %114:gpr64common = ADRP target-flags(aarch64-page) @time
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   %114:gpr64common = ADRP target-flags(aarch64-page) @time
SU(1):   STRXui $xzr, %114:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)

********** MI Scheduling **********
main:%bb.17 if.end44
  From: %112:gpr64 = MOVaddr target-flags(aarch64-page) @sje, target-flags(aarch64-pageoff, aarch64-nc) @sje
    To: BL @nr_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit-def $sp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %112:gpr64 = MOVaddr target-flags(aarch64-page) @sje, target-flags(aarch64-pageoff, aarch64-nc) @sje
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%112
  Single Issue       : false;
SU(1):   $x0 = COPY %112:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%112
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $w1 = COPY %111:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $w2 = MOVi32imm -1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @nr_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $w1 = COPY %111:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %112:gpr64
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(3) $w2 = MOVi32imm -1
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %112:gpr64 = MOVaddr target-flags(aarch64-page) @sje, target-flags(aarch64-pageoff, aarch64-nc) @sje
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   %112:gpr64 = MOVaddr target-flags(aarch64-page) @sje, target-flags(aarch64-pageoff, aarch64-nc) @sje
SU(3):   $w2 = MOVi32imm -1
SU(1):   $x0 = COPY %112:gpr64
SU(2):   $w1 = COPY %111:gpr32

********** MI Scheduling **********
main:%bb.17 if.end44
  From: %108:gpr64common = ADRP target-flags(aarch64-page) @nelt
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %108:gpr64common = ADRP target-flags(aarch64-page) @nelt
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(1): Data Latency=1 Reg=%108
  Single Issue       : false;
SU(1):   %109:gpr32 = LDRWui %108:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(0): Data Latency=1 Reg=%108
  Successors:
    SU(2): Data Latency=4 Reg=%109
  Single Issue       : false;
SU(2):   %110:gpr32 = ADDWrs %109:gpr32, %109:gpr32, 1
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%109
  Successors:
    SU(3): Data Latency=1 Reg=%110
  Single Issue       : false;
SU(3):   %111:gpr32 = UBFMWri %110:gpr32, 29, 28
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%110
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %111:gpr32 = UBFMWri %110:gpr32, 29, 28
  Ready @0c
  BotQ.A TopLatency SU(3) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %110:gpr32 = ADDWrs %109:gpr32, %109:gpr32, 1
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %109:gpr32 = LDRWui %108:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %108:gpr64common = ADRP target-flags(aarch64-page) @nelt
  Ready @6c
  BotQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   %108:gpr64common = ADRP target-flags(aarch64-page) @nelt
SU(1):   %109:gpr32 = LDRWui %108:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
SU(2):   %110:gpr32 = ADDWrs %109:gpr32, %109:gpr32, 1
SU(3):   %111:gpr32 = UBFMWri %110:gpr32, 29, 28

********** MI Scheduling **********
main:%bb.17 if.end44
  From: %106:gpr64 = MOVaddr target-flags(aarch64-page) @ta1, target-flags(aarch64-pageoff, aarch64-nc) @ta1
    To: BL @r_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %106:gpr64 = MOVaddr target-flags(aarch64-page) @ta1, target-flags(aarch64-pageoff, aarch64-nc) @ta1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%106
  Single Issue       : false;
SU(1):   $x0 = COPY %106:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%106
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $w1 = COPY %105:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $d0 = FMOVD0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @r_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $w1 = COPY %105:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %106:gpr64
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) $d0 = FMOVD0
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %106:gpr64 = MOVaddr target-flags(aarch64-page) @ta1, target-flags(aarch64-pageoff, aarch64-nc) @ta1
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   %106:gpr64 = MOVaddr target-flags(aarch64-page) @ta1, target-flags(aarch64-pageoff, aarch64-nc) @ta1
SU(3):   $d0 = FMOVD0
SU(1):   $x0 = COPY %106:gpr64
SU(2):   $w1 = COPY %105:gpr32

********** MI Scheduling **********
main:%bb.17 if.end44
  From: %104:gpr64common = ADRP target-flags(aarch64-page) @ntot
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %104:gpr64common = ADRP target-flags(aarch64-page) @ntot
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=1 Reg=%104
  Single Issue       : false;
SU(1):   %105:gpr32 = LDRWui %104:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(0): Data Latency=1 Reg=%104
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %105:gpr32 = LDRWui %104:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  Ready @3c
  BotQ.A TopLatency SU(1) 1c
  BotQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 1
  Executed: 4c
  Critical: 1c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %104:gpr64common = ADRP target-flags(aarch64-page) @ntot
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   %104:gpr64common = ADRP target-flags(aarch64-page) @ntot
SU(1):   %105:gpr32 = LDRWui %104:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)

********** MI Scheduling **********
main:%bb.19 if.end48
  From: STRXui $xzr, %114:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
    To: End RegionInstrs: 14
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRXui $xzr, %114:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   STRWui $wzr, %stack.3.step, 0 :: (store 4 into %ir.step)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   %242:gpr64 = MOVaddr target-flags(aarch64-page) @tmort, target-flags(aarch64-pageoff, aarch64-nc) @tmort
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   undef %375.sub_32:gpr64 = MOVi32imm 1000
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   %377:gpr64 = MOVaddr target-flags(aarch64-page) @ta2, target-flags(aarch64-pageoff, aarch64-nc) @ta2
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   %381:gpr64common = MOVaddr target-flags(aarch64-page) @size_e, target-flags(aarch64-pageoff, aarch64-nc) @size_e
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(6):   %351:gpr64 = MOVaddr target-flags(aarch64-page) @trhs, target-flags(aarch64-pageoff, aarch64-nc) @trhs
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(7):   undef %355.sub_32:gpr64 = MOVi32imm 200
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(8):   %254:gpr64 = MOVaddr target-flags(aarch64-page) @rmor, target-flags(aarch64-pageoff, aarch64-nc) @rmor
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(9):   undef %316.sub_32:gpr64 = MOVi32imm 24
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(10):   %318:gpr64 = MOVaddr target-flags(aarch64-page) @cbc, target-flags(aarch64-pageoff, aarch64-nc) @cbc
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(11):   %264:gpr64common = ADRP target-flags(aarch64-page) @nmor
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(12):   %267:gpr64 = MOVaddr target-flags(aarch64-page) @tmmor, target-flags(aarch64-pageoff, aarch64-nc) @tmmor
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(13):   %275:gpr64 = MOVaddr target-flags(aarch64-page) @t, target-flags(aarch64-pageoff, aarch64-nc) @t
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 12 11 10 9 8 7 6 5 4 3 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 
Picking from Bot:
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) %275:gpr64 = MOVaddr target-flags(aarch64-page) @t, target-flags(aarch64-pageoff, aarch64-nc) @t
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 12 11 10 9 8 7 6 5 4 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 7 8 9 10 11 12 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(12) %267:gpr64 = MOVaddr target-flags(aarch64-page) @tmmor, target-flags(aarch64-pageoff, aarch64-nc) @tmmor
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 11 10 9 8 7 6 5 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 7 8 9 10 11 
  BotQ.A RemainingLatency 0 + 2c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(11) %264:gpr64common = ADRP target-flags(aarch64-page) @nmor
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 10 9 8 7 6 5 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 7 8 9 10 
  BotQ.A RemainingLatency 0 + 3c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(10) %318:gpr64 = MOVaddr target-flags(aarch64-page) @cbc, target-flags(aarch64-pageoff, aarch64-nc) @cbc
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 9 8 7 6 5 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 7 8 9 
  BotQ.A RemainingLatency 0 + 4c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(9) undef %316.sub_32:gpr64 = MOVi32imm 24
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 4 8 7 6 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 7 8 
  BotQ.A RemainingLatency 0 + 5c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %254:gpr64 = MOVaddr target-flags(aarch64-page) @rmor, target-flags(aarch64-pageoff, aarch64-nc) @rmor
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 4 5 7 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 7 
  BotQ.A RemainingLatency 0 + 6c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) undef %355.sub_32:gpr64 = MOVi32imm 200
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 4 5 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 
  BotQ.A RemainingLatency 0 + 7c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %351:gpr64 = MOVaddr target-flags(aarch64-page) @trhs, target-flags(aarch64-pageoff, aarch64-nc) @trhs
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 4 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 
  BotQ.A RemainingLatency 0 + 8c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %381:gpr64common = MOVaddr target-flags(aarch64-page) @size_e, target-flags(aarch64-pageoff, aarch64-nc) @size_e
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 
  BotQ.A RemainingLatency 0 + 9c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %377:gpr64 = MOVaddr target-flags(aarch64-page) @ta2, target-flags(aarch64-pageoff, aarch64-nc) @ta2
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  BotQ.A RemainingLatency 0 + 10c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) undef %375.sub_32:gpr64 = MOVi32imm 1000
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  BotQ.A RemainingLatency 0 + 11c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %242:gpr64 = MOVaddr target-flags(aarch64-page) @tmort, target-flags(aarch64-pageoff, aarch64-nc) @tmort
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 12c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) STRWui $wzr, %stack.3.step, 0 :: (store 4 into %ir.step)
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRXui $xzr, %114:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   STRXui $xzr, %114:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
SU(1):   STRWui $wzr, %stack.3.step, 0 :: (store 4 into %ir.step)
SU(2):   %242:gpr64 = MOVaddr target-flags(aarch64-page) @tmort, target-flags(aarch64-pageoff, aarch64-nc) @tmort
SU(3):   undef %375.sub_32:gpr64 = MOVi32imm 1000
SU(4):   %377:gpr64 = MOVaddr target-flags(aarch64-page) @ta2, target-flags(aarch64-pageoff, aarch64-nc) @ta2
SU(5):   %381:gpr64common = MOVaddr target-flags(aarch64-page) @size_e, target-flags(aarch64-pageoff, aarch64-nc) @size_e
SU(6):   %351:gpr64 = MOVaddr target-flags(aarch64-page) @trhs, target-flags(aarch64-pageoff, aarch64-nc) @trhs
SU(7):   undef %355.sub_32:gpr64 = MOVi32imm 200
SU(8):   %254:gpr64 = MOVaddr target-flags(aarch64-page) @rmor, target-flags(aarch64-pageoff, aarch64-nc) @rmor
SU(9):   undef %316.sub_32:gpr64 = MOVi32imm 24
SU(10):   %318:gpr64 = MOVaddr target-flags(aarch64-page) @cbc, target-flags(aarch64-pageoff, aarch64-nc) @cbc
SU(11):   %264:gpr64common = ADRP target-flags(aarch64-page) @nmor
SU(12):   %267:gpr64 = MOVaddr target-flags(aarch64-page) @tmmor, target-flags(aarch64-pageoff, aarch64-nc) @tmmor
SU(13):   %275:gpr64 = MOVaddr target-flags(aarch64-page) @t, target-flags(aarch64-pageoff, aarch64-nc) @t

********** MI Scheduling **********
main:%bb.19 if.end48
  From: %121:gpr32 = MOVi32imm 1
    To: BL @timer_clear, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %121:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   $w0 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @timer_clear, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %121:gpr32 = MOVi32imm 1
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $w0 = MOVi32imm 1
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.19 ***
SU(1):   $w0 = MOVi32imm 1
SU(0):   %121:gpr32 = MOVi32imm 1

********** MI Scheduling **********
main:%bb.20 for.cond49
  From: %125:gpr32 = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
    To: Bcc 12, %bb.65, implicit killed $nzcv
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %125:gpr32 = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%125
  Single Issue       : false;
SU(1):   %127:gpr32 = LDRWui %396:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%127
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %125:gpr32, %127:gpr32, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%127
    SU(0): Data Latency=4 Reg=%125
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.65, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %125:gpr32, %127:gpr32, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %127:gpr32 = LDRWui %396:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %125:gpr32 = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   %125:gpr32 = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
SU(1):   %127:gpr32 = LDRWui %396:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
SU(2):   dead $wzr = SUBSWrr %125:gpr32, %127:gpr32, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.21 for.body51
  From: %226:gpr32common = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
    To: Bcc 1, %bb.28, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %226:gpr32common = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%226
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %226:gpr32common, 1, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%226
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.28, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %226:gpr32common, 1, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %226:gpr32common = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.21 ***
SU(0):   %226:gpr32common = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
SU(1):   dead $wzr = SUBSWri %226:gpr32common, 1, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.22 if.then53
  From: STRXui $xzr, %114:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRXui $xzr, %114:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   STRXui $xzr, %393:gpr64sp, 14 :: (store 8 into %ir.nelt_tot)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   STRWui %121:gpr32, %stack.6.i, 0 :: (store 4 into %ir.i)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) STRWui %121:gpr32, %stack.6.i, 0 :: (store 4 into %ir.i)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) STRXui $xzr, %393:gpr64sp, 14 :: (store 8 into %ir.nelt_tot)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRXui $xzr, %114:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.22 ***
SU(0):   STRXui $xzr, %114:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
SU(1):   STRXui $xzr, %393:gpr64sp, 14 :: (store 8 into %ir.nelt_tot)
SU(2):   STRWui %121:gpr32, %stack.6.i, 0 :: (store 4 into %ir.i)

********** MI Scheduling **********
main:%bb.22 if.then53
  From: $x0 = COPY %106:gpr64
    To: BL @r_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %106:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $w1 = COPY %229:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = FMOVD0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @r_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $w1 = COPY %229:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %106:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $d0 = FMOVD0
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.22 ***
SU(2):   $d0 = FMOVD0
SU(0):   $x0 = COPY %106:gpr64
SU(1):   $w1 = COPY %229:gpr32

********** MI Scheduling **********
main:%bb.23 for.cond54
  From: %235:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.27, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %235:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%235
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %235:gpr32common, 10, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%235
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.27, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %235:gpr32common, 10, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %235:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.23 ***
SU(0):   %235:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %235:gpr32common, 10, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.24 for.body56
  From: %385:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 0, %bb.26, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %385:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%385
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %385:gpr32common, 2, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%385
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 0, %bb.26, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %385:gpr32common, 2, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %385:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.24 ***
SU(0):   %385:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %385:gpr32common, 2, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.26 for.inc60
  From: %388:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: B %bb.23
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %388:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%388
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %389:gpr32common = nsw ADDWri %388:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%388
  Successors:
    SU(2): Data Latency=1 Reg=%389
  Single Issue       : false;
SU(2):   STRWui %389:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%389
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.23
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %389:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %389:gpr32common = nsw ADDWri %388:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %388:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.26 ***
SU(0):   %388:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   %389:gpr32common = nsw ADDWri %388:gpr32common, 1, 0
SU(2):   STRWui %389:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)

********** MI Scheduling **********
main:%bb.30 if.end66
  From: $x0 = COPY %242:gpr64
    To: BL @transf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %242:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $x1 = COPY %106:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @transf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) $x1 = COPY %106:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %242:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.30 ***
SU(0):   $x0 = COPY %242:gpr64
SU(1):   $x1 = COPY %106:gpr64

********** MI Scheduling **********
main:%bb.31 for.cond67
  From: %245:gpr32 = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
    To: Bcc 10, %bb.33, implicit killed $nzcv
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %245:gpr32 = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%245
  Single Issue       : false;
SU(1):   %247:gpr32 = LDRWui %108:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%247
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %245:gpr32, %247:gpr32, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%247
    SU(0): Data Latency=4 Reg=%245
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.33, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %245:gpr32, %247:gpr32, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %247:gpr32 = LDRWui %108:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %245:gpr32 = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.31 ***
SU(0):   %245:gpr32 = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(1):   %247:gpr32 = LDRWui %108:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
SU(2):   dead $wzr = SUBSWrr %245:gpr32, %247:gpr32, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.32 for.body69
  From: %383:gpr32common = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
    To: B %bb.31
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %383:gpr32common = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%383
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %384:gpr32common = nsw ADDWri %383:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%383
  Successors:
    SU(2): Data Latency=1 Reg=%384
  Single Issue       : false;
SU(2):   STRWui %384:gpr32common, %stack.4.ie, 0 :: (store 4 into %ir.ie)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%384
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.31
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %384:gpr32common, %stack.4.ie, 0 :: (store 4 into %ir.ie)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %384:gpr32common = nsw ADDWri %383:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %383:gpr32common = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   %383:gpr32common = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(1):   %384:gpr32common = nsw ADDWri %383:gpr32common, 1, 0
SU(2):   STRWui %384:gpr32common, %stack.4.ie, 0 :: (store 4 into %ir.ie)

********** MI Scheduling **********
main:%bb.32 for.body69
  From: $x0 = COPY %378:gpr64
    To: BL @laplacian, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $w2, implicit-def $sp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %378:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $x1 = COPY %380:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $w2 = COPY %382:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @laplacian, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $w2, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $w2 = COPY %382:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(1) $x1 = COPY %380:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %378:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   $x0 = COPY %378:gpr64
SU(1):   $x1 = COPY %380:gpr64
SU(2):   $w2 = COPY %382:gpr32

********** MI Scheduling **********
main:%bb.32 for.body69
  From: %373:gpr64 = LDRSWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %373:gpr64 = LDRSWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(4): Data Latency=4 Reg=%373
    SU(1): Data Latency=4 Reg=%373
  Single Issue       : false;
SU(1):   %376:gpr64 = MADDXrrr %373:gpr64, %375:gpr64, $xzr
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%373
  Successors:
    SU(3): Data Latency=1 Reg=%376
    SU(2): Data Latency=1 Reg=%376
  Single Issue       : false;
SU(2):   %378:gpr64 = ADDXrr %377:gpr64, %376:gpr64
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%376
  Single Issue       : false;
SU(3):   %380:gpr64 = ADDXrr %106:gpr64, %376:gpr64
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%376
  Single Issue       : false;
SU(4):   %382:gpr32 = LDRWroX %381:gpr64common, %373:gpr64, 0, 1 :: (load 4 from %ir.arrayidx75)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(0): Data Latency=4 Reg=%373
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) %373:gpr64 = LDRSWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  Ready @0c
  TopQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 3 2 
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 1 
TopQ.A RemLatency SU(4) 3c
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(4) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %380:gpr64 = ADDXrr %106:gpr64, %376:gpr64
  Ready @0c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %378:gpr64 = ADDXrr %377:gpr64, %376:gpr64
  Ready @1c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %376:gpr64 = MADDXrrr %373:gpr64, %375:gpr64, $xzr
  Ready @2c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %382:gpr32 = LDRWroX %381:gpr64common, %373:gpr64, 0, 1 :: (load 4 from %ir.arrayidx75)
  Ready @3c
  BotQ.A TopLatency SU(4) 4c
  BotQ.A BotLatency SU(4) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   %373:gpr64 = LDRSWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(4):   %382:gpr32 = LDRWroX %381:gpr64common, %373:gpr64, 0, 1 :: (load 4 from %ir.arrayidx75)
SU(1):   %376:gpr64 = MADDXrrr %373:gpr64, %375:gpr64, $xzr
SU(2):   %378:gpr64 = ADDXrr %377:gpr64, %376:gpr64
SU(3):   %380:gpr64 = ADDXrr %106:gpr64, %376:gpr64

********** MI Scheduling **********
main:%bb.34 for.cond79
  From: %250:gpr32 = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
    To: Bcc 10, %bb.45, implicit killed $nzcv
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %250:gpr32 = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%250
  Single Issue       : false;
SU(1):   %252:gpr32 = LDRWui %108:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%252
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %250:gpr32, %252:gpr32, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%252
    SU(0): Data Latency=4 Reg=%250
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.45, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %250:gpr32, %252:gpr32, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %252:gpr32 = LDRWui %108:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %250:gpr32 = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.34 ***
SU(0):   %250:gpr32 = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(1):   %252:gpr32 = LDRWui %108:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
SU(2):   dead $wzr = SUBSWrr %250:gpr32, %252:gpr32, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.36 for.cond82
  From: %333:gpr32common = LDRWui %stack.8.k, 0 :: (dereferenceable load 4 from %ir.k)
    To: Bcc 12, %bb.44, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %333:gpr32common = LDRWui %stack.8.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%333
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %333:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%333
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.44, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %333:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %333:gpr32common = LDRWui %stack.8.k, 0 :: (dereferenceable load 4 from %ir.k)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.36 ***
SU(0):   %333:gpr32common = LDRWui %stack.8.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(1):   dead $wzr = SUBSWri %333:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.38 for.cond85
  From: %338:gpr32common = LDRWui %stack.7.j, 0 :: (dereferenceable load 4 from %ir.j)
    To: Bcc 12, %bb.43, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %338:gpr32common = LDRWui %stack.7.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%338
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %338:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%338
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.43, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %338:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %338:gpr32common = LDRWui %stack.7.j, 0 :: (dereferenceable load 4 from %ir.j)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   %338:gpr32common = LDRWui %stack.7.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(1):   dead $wzr = SUBSWri %338:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.40 for.cond88
  From: %343:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.42, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %343:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%343
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %343:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%343
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.42, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %343:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %343:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.40 ***
SU(0):   %343:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %343:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.41 for.body90
  From: %347:gpr64 = LDRSWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
    To: B %bb.40
 RegionInstrs: 22
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
Live In: %377 %355 %351 %375 
Live Out: %377 %355 %351 %375 
Live Thru: GPR32=4
  LiveReg: %377
  UpdateRegP: SU(13) %366:gpr64 = ADDXrr %377:gpr64, %350:gpr64
              to 
  LiveReg: %355
  UpdateRegP: SU(4) %356:gpr64 = MADDXrrr %353:gpr64, %355:gpr64, $xzr
              to 
  LiveReg: %351
  UpdateRegP: SU(2) %352:gpr64 = ADDXrr %351:gpr64, %350:gpr64
              to 
  LiveReg: %375
  UpdateRegP: SU(1) %350:gpr64 = MADDXrrr %347:gpr64, %375:gpr64, $xzr
              to 
Top Pressure:
GPR32=4
Bottom Pressure:
GPR32=4
Excess PSets: 
Cluster ld/st SU(10) - SU(19)
  Copy Succ SU(11)
  Copy Succ SU(21)
SU(0):   %347:gpr64 = LDRSWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(1): Data Latency=4 Reg=%347
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %350:gpr64 = MADDXrrr %347:gpr64, %375:gpr64, $xzr
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=%347
  Successors:
    SU(13): Data Latency=1 Reg=%350
    SU(2): Data Latency=1 Reg=%350
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %352:gpr64 = ADDXrr %351:gpr64, %350:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(1): Data Latency=1 Reg=%350
  Successors:
    SU(5): Data Latency=1 Reg=%352
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %353:gpr64 = LDRSWui %stack.8.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(4): Data Latency=4 Reg=%353
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(4):   %356:gpr64 = MADDXrrr %353:gpr64, %355:gpr64, $xzr
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(3): Data Latency=4 Reg=%353
  Successors:
    SU(14): Data Latency=1 Reg=%356
    SU(5): Data Latency=1 Reg=%356
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %357:gpr64 = ADDXrr %352:gpr64, %356:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 7
  Predecessors:
    SU(2): Data Latency=1 Reg=%352
    SU(4): Data Latency=1 Reg=%356
  Successors:
    SU(9): Data Latency=1 Reg=%357
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(6):   %358:gpr64 = LDRSWui %stack.7.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(7): Data Latency=4 Reg=%358
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   %359:gpr64 = ADDXrs %358:gpr64, %358:gpr64, 2
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(6): Data Latency=4 Reg=%358
  Successors:
    SU(8): Data Latency=1 Reg=%359
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   %360:gpr64 = UBFMXri %359:gpr64, 61, 60
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 7
  Predecessors:
    SU(7): Data Latency=1 Reg=%359
  Successors:
    SU(15): Data Latency=1 Reg=%360
    SU(9): Data Latency=1 Reg=%360
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   %361:gpr64common = ADDXrr %357:gpr64, %360:gpr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 6
  Predecessors:
    SU(5): Data Latency=1 Reg=%357
    SU(8): Data Latency=1 Reg=%360
  Successors:
    SU(18): Data Latency=1 Reg=%361
    SU(12): Data Latency=1 Reg=%361
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(10):   %362:gpr64 = LDRSWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(11): Data Latency=4 Reg=%362
    SU(21): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(11):   %363:gpr64 = UBFMXri %362:gpr64, 61, 60
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(10): Data Latency=4 Reg=%362
    SU(19): Ord  Latency=0 Artificial
  Successors:
    SU(18): Data Latency=1 Reg=%363
    SU(16): Data Latency=1 Reg=%363
    SU(12): Data Latency=1 Reg=%363
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   %364:fpr64 = LDRDroX %361:gpr64common, %363:gpr64, 0, 0 :: (load 8 from %ir.arrayidx98)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(9): Data Latency=1 Reg=%361
    SU(11): Data Latency=1 Reg=%363
  Successors:
    SU(17): Data Latency=4 Reg=%364
    SU(18): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(13):   %366:gpr64 = ADDXrr %377:gpr64, %350:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(1): Data Latency=1 Reg=%350
  Successors:
    SU(14): Data Latency=1 Reg=%366
  Pressure Diff      : 
  Single Issue       : false;
SU(14):   %367:gpr64 = ADDXrr %366:gpr64, %356:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 7
  Predecessors:
    SU(13): Data Latency=1 Reg=%366
    SU(4): Data Latency=1 Reg=%356
  Successors:
    SU(15): Data Latency=1 Reg=%367
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(15):   %368:gpr64common = ADDXrr %367:gpr64, %360:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 6
  Predecessors:
    SU(14): Data Latency=1 Reg=%367
    SU(8): Data Latency=1 Reg=%360
  Successors:
    SU(16): Data Latency=1 Reg=%368
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(16):   %369:fpr64 = LDRDroX %368:gpr64common, %363:gpr64, 0, 0 :: (load 8 from %ir.arrayidx106)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(15): Data Latency=1 Reg=%368
    SU(11): Data Latency=1 Reg=%363
  Successors:
    SU(17): Data Latency=4 Reg=%369
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(17):   %370:fpr64 = FSUBDrr %364:fpr64, %369:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 1
  Predecessors:
    SU(16): Data Latency=4 Reg=%369
    SU(12): Data Latency=4 Reg=%364
  Successors:
    SU(18): Data Latency=1 Reg=%370
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(18):   STRDroX %370:fpr64, %361:gpr64common, %363:gpr64, 0, 0 :: (store 8 into %ir.arrayidx114)
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(17): Data Latency=1 Reg=%370
    SU(12): Ord  Latency=0 Memory
    SU(11): Data Latency=1 Reg=%363
    SU(9): Data Latency=1 Reg=%361
  Pressure Diff      : FPR8 1    GPR32 2    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(19):   %371:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 3
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Predecessors:
    SU(10): Ord  Latency=0 Cluster
  Successors:
    SU(20): Data Latency=4 Reg=%371
    SU(21): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(20):   %372:gpr32common = nsw ADDWri %371:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(19): Data Latency=4 Reg=%371
  Successors:
    SU(21): Data Latency=1 Reg=%372
  Pressure Diff      : 
  Single Issue       : false;
SU(21):   STRWui %372:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(20): Data Latency=1 Reg=%372
    SU(19): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.40
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 18 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 19 
Picking from Bot:
  Cand SU(21) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(21) STRWui %372:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)
Bottom Pressure:
GPR32=5
  LiveReg: %372
  UpdateRegP: SU(21) STRWui %372:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)
              to 
  Ready @0c
  BotQ.A TopLatency SU(21) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 20 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 19 
BotQ.A RemLatency SU(18) 13c
  BotQ.A RemainingLatency 13 + 1c > CritPath 13
Picking from Bot:
  Cand SU(18) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(18) STRDroX %370:fpr64, %361:gpr64common, %363:gpr64, 0, 0 :: (store 8 into %ir.arrayidx114)
Bottom Pressure:
FPR8=1
GPR32=7
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %370
  UpdateRegP: SU(18) STRDroX %370:fpr64, %361:gpr64common, %363:gpr64, 0, 0 :: (store 8 into %ir.arrayidx114)
              to GPR32 2
  LiveReg: %361
  UpdateRegP: SU(12) %364:fpr64 = LDRDroX %361:gpr64common, %363:gpr64, 0, 0 :: (load 8 from %ir.arrayidx98)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(18) STRDroX %370:fpr64, %361:gpr64common, %363:gpr64, 0, 0 :: (store 8 into %ir.arrayidx114)
              to GPR32 1
  LiveReg: %363
  UpdateRegP: SU(12) %364:fpr64 = LDRDroX %361:gpr64common, %363:gpr64, 0, 0 :: (load 8 from %ir.arrayidx98)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(16) %369:fpr64 = LDRDroX %368:gpr64common, %363:gpr64, 0, 0 :: (load 8 from %ir.arrayidx106)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(18) STRDroX %370:fpr64, %361:gpr64common, %363:gpr64, 0, 0 :: (store 8 into %ir.arrayidx114)
              to 
  Ready @1c
  BotQ.A TopLatency SU(18) 13c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 17 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 19 
BotQ.A RemLatency SU(17) 12c
  BotQ.A RemainingLatency 12 + 2c > CritPath 13
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(17) BOT-PATH                  12 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(17) %370:fpr64 = FSUBDrr %364:fpr64, %369:fpr64
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %364
  UpdateRegP: SU(17) %370:fpr64 = FSUBDrr %364:fpr64, %369:fpr64
              to 
  LiveReg: %369
  UpdateRegP: SU(17) %370:fpr64 = FSUBDrr %364:fpr64, %369:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @2c
  BotQ.A BotLatency SU(17) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 16 12 
Queue BotQ.A: 20 
Pick Bot ONLY1     
Scheduling SU(20) %372:gpr32common = nsw ADDWri %371:gpr32common, 1, 0
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %371
  UpdateRegP: SU(20) %372:gpr32common = nsw ADDWri %371:gpr32common, 1, 0
              to GPR32 -1
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 16 12 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 19 
BotQ.A RemLatency SU(16) 8c
  BotQ.A RemainingLatency 8 + 6c > CritPath 13
Picking from Bot:
  Cand SU(16) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(16) %369:fpr64 = LDRDroX %368:gpr64common, %363:gpr64, 0, 0 :: (load 8 from %ir.arrayidx106)
Bottom Pressure:
FPR8=1
GPR32=8
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %368
  UpdateRegP: SU(16) %369:fpr64 = LDRDroX %368:gpr64common, %363:gpr64, 0, 0 :: (load 8 from %ir.arrayidx106)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @6c
  BotQ.A BotLatency SU(16) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 15 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 19 
BotQ.A RemLatency SU(12) 8c
  BotQ.A RemainingLatency 8 + 7c > CritPath 13
Picking from Bot:
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(12) %364:fpr64 = LDRDroX %361:gpr64common, %363:gpr64, 0, 0 :: (load 8 from %ir.arrayidx98)
Bottom Pressure:
GPR32=8
  Ready @7c
  BotQ.A TopLatency SU(12) 8c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 9 11 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 19 
BotQ.A RemLatency SU(15) 7c
  BotQ.A RemainingLatency 7 + 8c > CritPath 13
Picking from Bot:
  Cand SU(15) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(15) %368:gpr64common = ADDXrr %367:gpr64, %360:gpr64
Bottom Pressure:
GPR32=9
  LiveReg: %367
  UpdateRegP: SU(15) %368:gpr64common = ADDXrr %367:gpr64, %360:gpr64
              to 
  LiveReg: %360
  UpdateRegP: SU(9) %361:gpr64common = ADDXrr %357:gpr64, %360:gpr64
              to 
  UpdateRegP: SU(15) %368:gpr64common = ADDXrr %367:gpr64, %360:gpr64
              to GPR32 -1
  Ready @8c
  BotQ.A BotLatency SU(15) 6c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 9 14 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 19 
BotQ.A RemLatency SU(9) 7c
  BotQ.A RemainingLatency 7 + 9c > CritPath 13
Picking from Bot:
  Cand SU(11) ORDER                              
  Cand SU(9) BOT-PATH                  7 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(9) %361:gpr64common = ADDXrr %357:gpr64, %360:gpr64
Bottom Pressure:
GPR32=9
  LiveReg: %357
  UpdateRegP: SU(9) %361:gpr64common = ADDXrr %357:gpr64, %360:gpr64
              to GPR32 -1
  Ready @9c
  BotQ.A TopLatency SU(9) 7c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 8
  Executed: 10c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 14 5 8 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 19 
BotQ.A RemLatency SU(14) 6c
  BotQ.A RemainingLatency 6 + 10c > CritPath 13
Picking from Bot:
  Cand SU(11) ORDER                              
  Cand SU(8) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(8) %360:gpr64 = UBFMXri %359:gpr64, 61, 60
Bottom Pressure:
GPR32=9
  LiveReg: %359
  UpdateRegP: SU(8) %360:gpr64 = UBFMXri %359:gpr64, 61, 60
              to GPR32 -1
  Ready @10c
  BotQ.A BotLatency SU(8) 7c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 9
  Executed: 11c
  Critical: 9c, 9 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 14 5 7 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 19 
BotQ.A RemLatency SU(14) 6c
  BotQ.A RemainingLatency 6 + 11c > CritPath 13
Picking from Bot:
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(11) %363:gpr64 = UBFMXri %362:gpr64, 61, 60
Bottom Pressure:
GPR32=9
  LiveReg: %362
  UpdateRegP: SU(11) %363:gpr64 = UBFMXri %362:gpr64, 61, 60
              to GPR32 -1
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 10
  Executed: 12c
  Critical: 10c, 10 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 
Queue BotQ.A: 7 14 5 19 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 19 
BotQ.A RemLatency SU(14) 6c
  BotQ.A RemainingLatency 6 + 12c > CritPath 13
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(7) %359:gpr64 = ADDXrs %358:gpr64, %358:gpr64, 2
Bottom Pressure:
GPR32=9
  LiveReg: %358
  UpdateRegP: SU(7) %359:gpr64 = ADDXrs %358:gpr64, %358:gpr64, 2
              to GPR32 -1
  Ready @12c
  BotQ.A BotLatency SU(7) 8c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 11
  Executed: 13c
  Critical: 11c, 11 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 6 
Queue BotQ.A: 19 14 5 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 19 
BotQ.A RemLatency SU(14) 6c
  BotQ.A RemainingLatency 6 + 13c > CritPath 13
Picking from Bot:
  Cand SU(19) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(19) %371:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:
GPR32=8
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 12
  Executed: 14c
  Critical: 12c, 12 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 6 
Queue BotQ.A: 5 14 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 
  BotQ.A RemainingLatency 0 + 14c > CritPath 13
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(14) %367:gpr64 = ADDXrr %366:gpr64, %356:gpr64
Bottom Pressure:
GPR32=9
  LiveReg: %366
  UpdateRegP: SU(14) %367:gpr64 = ADDXrr %366:gpr64, %356:gpr64
              to 
  LiveReg: %356
  UpdateRegP: SU(5) %357:gpr64 = ADDXrr %352:gpr64, %356:gpr64
              to 
  UpdateRegP: SU(14) %367:gpr64 = ADDXrr %366:gpr64, %356:gpr64
              to GPR32 -1
  Ready @14c
  BotQ.A TopLatency SU(14) 6c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 13
  Executed: 15c
  Critical: 13c, 13 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 5 13 10 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 
  BotQ.A RemainingLatency 0 + 15c > CritPath 13
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(10) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(10) %362:gpr64 = LDRSWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:
GPR32=8
  Ready @15c
  BotQ.A BotLatency SU(10) 10c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 14
  Executed: 16c
  Critical: 14c, 14 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 13 6 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 
  BotQ.A RemainingLatency 0 + 16c > CritPath 13
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) %357:gpr64 = ADDXrr %352:gpr64, %356:gpr64
Bottom Pressure:
GPR32=8
  LiveReg: %352
  UpdateRegP: SU(5) %357:gpr64 = ADDXrr %352:gpr64, %356:gpr64
              to GPR32 -1
  Ready @16c
  BotQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 15
  Executed: 17c
  Critical: 15c, 15 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 13 2 4 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 
  BotQ.A RemainingLatency 0 + 17c > CritPath 13
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(13) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(13) %366:gpr64 = ADDXrr %377:gpr64, %350:gpr64
Bottom Pressure:
GPR32=8
  LiveReg: %350
  UpdateRegP: SU(2) %352:gpr64 = ADDXrr %351:gpr64, %350:gpr64
              to GPR32 -1
  UpdateRegP: SU(13) %366:gpr64 = ADDXrr %377:gpr64, %350:gpr64
              to GPR32 -1
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 16
  Executed: 18c
  Critical: 16c, 16 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 4 2 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 
  BotQ.A RemainingLatency 0 + 18c > CritPath 13
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(4) BOT-PATH                  4 cycles 
  Cand SU(2) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) %352:gpr64 = ADDXrr %351:gpr64, %350:gpr64
Bottom Pressure:
GPR32=7
  Ready @18c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 17
  Executed: 19c
  Critical: 17c, 17 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 4 1 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 
  BotQ.A RemainingLatency 0 + 19c > CritPath 13
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(4) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) %356:gpr64 = MADDXrrr %353:gpr64, %355:gpr64, $xzr
Bottom Pressure:
GPR32=7
  LiveReg: %353
  UpdateRegP: SU(4) %356:gpr64 = MADDXrrr %353:gpr64, %355:gpr64, $xzr
              to GPR32 -1
  Ready @19c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 18
  Executed: 20c
  Critical: 18c, 18 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 6 1 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 
  BotQ.A RemainingLatency 0 + 20c > CritPath 13
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(1) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) %350:gpr64 = MADDXrrr %347:gpr64, %375:gpr64, $xzr
Bottom Pressure:
GPR32=7
  LiveReg: %347
  UpdateRegP: SU(1) %350:gpr64 = MADDXrrr %347:gpr64, %375:gpr64, $xzr
              to GPR32 -1
  Ready @20c
  BotQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 19
  Executed: 21c
  Critical: 19c, 19 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 0 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %358:gpr64 = LDRSWui %stack.7.j, 0 :: (dereferenceable load 4 from %ir.j)
Bottom Pressure:
GPR32=6
  Ready @21c
  BotQ.A BotLatency SU(6) 12c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 20
  Executed: 22c
  Critical: 20c, 20 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 23 BotQ.A
Queue BotQ.P: 0 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %353:gpr64 = LDRSWui %stack.8.k, 0 :: (dereferenceable load 4 from %ir.k)
Bottom Pressure:
GPR32=5
  Ready @23c
  *** Max MOps 1 at cycle 23
Cycle: 24 BotQ.A
BotQ.A @24c
  Retired: 21
  Executed: 24c
  Critical: 21c, 21 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %347:gpr64 = LDRSWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
Bottom Pressure:
GPR32=4
  Ready @24c
  BotQ.A BotLatency SU(0) 13c
  *** Max MOps 1 at cycle 24
Cycle: 25 BotQ.A
BotQ.A @25c
  Retired: 22
  Executed: 25c
  Critical: 22c, 22 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.41 ***
SU(0):   %347:gpr64 = LDRSWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(3):   %353:gpr64 = LDRSWui %stack.8.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(6):   %358:gpr64 = LDRSWui %stack.7.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(1):   %350:gpr64 = MADDXrrr %347:gpr64, %375:gpr64, $xzr
SU(4):   %356:gpr64 = MADDXrrr %353:gpr64, %355:gpr64, $xzr
SU(2):   %352:gpr64 = ADDXrr %351:gpr64, %350:gpr64
SU(13):   %366:gpr64 = ADDXrr %377:gpr64, %350:gpr64
SU(5):   %357:gpr64 = ADDXrr %352:gpr64, %356:gpr64
SU(10):   %362:gpr64 = LDRSWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(14):   %367:gpr64 = ADDXrr %366:gpr64, %356:gpr64
SU(19):   %371:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(7):   %359:gpr64 = ADDXrs %358:gpr64, %358:gpr64, 2
SU(11):   %363:gpr64 = UBFMXri %362:gpr64, 61, 60
SU(8):   %360:gpr64 = UBFMXri %359:gpr64, 61, 60
SU(9):   %361:gpr64common = ADDXrr %357:gpr64, %360:gpr64
SU(15):   %368:gpr64common = ADDXrr %367:gpr64, %360:gpr64
SU(12):   %364:fpr64 = LDRDroX %361:gpr64common, %363:gpr64, 0, 0 :: (load 8 from %ir.arrayidx98)
SU(16):   %369:fpr64 = LDRDroX %368:gpr64common, %363:gpr64, 0, 0 :: (load 8 from %ir.arrayidx106)
SU(20):   %372:gpr32common = nsw ADDWri %371:gpr32common, 1, 0
SU(17):   %370:fpr64 = FSUBDrr %364:fpr64, %369:fpr64
SU(18):   STRDroX %370:fpr64, %361:gpr64common, %363:gpr64, 0, 0 :: (store 8 into %ir.arrayidx114)
SU(21):   STRWui %372:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)

********** MI Scheduling **********
main:%bb.42 for.inc118
  From: %345:gpr32common = LDRWui %stack.7.j, 0 :: (dereferenceable load 4 from %ir.j)
    To: B %bb.38
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %345:gpr32common = LDRWui %stack.7.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%345
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %346:gpr32common = nsw ADDWri %345:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%345
  Successors:
    SU(2): Data Latency=1 Reg=%346
  Single Issue       : false;
SU(2):   STRWui %346:gpr32common, %stack.7.j, 0 :: (store 4 into %ir.j)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%346
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.38
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %346:gpr32common, %stack.7.j, 0 :: (store 4 into %ir.j)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %346:gpr32common = nsw ADDWri %345:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %345:gpr32common = LDRWui %stack.7.j, 0 :: (dereferenceable load 4 from %ir.j)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.42 ***
SU(0):   %345:gpr32common = LDRWui %stack.7.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(1):   %346:gpr32common = nsw ADDWri %345:gpr32common, 1, 0
SU(2):   STRWui %346:gpr32common, %stack.7.j, 0 :: (store 4 into %ir.j)

********** MI Scheduling **********
main:%bb.43 for.inc121
  From: %340:gpr32common = LDRWui %stack.8.k, 0 :: (dereferenceable load 4 from %ir.k)
    To: B %bb.36
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %340:gpr32common = LDRWui %stack.8.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%340
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %341:gpr32common = nsw ADDWri %340:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%340
  Successors:
    SU(2): Data Latency=1 Reg=%341
  Single Issue       : false;
SU(2):   STRWui %341:gpr32common, %stack.8.k, 0 :: (store 4 into %ir.k)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%341
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.36
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %341:gpr32common, %stack.8.k, 0 :: (store 4 into %ir.k)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %341:gpr32common = nsw ADDWri %340:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %340:gpr32common = LDRWui %stack.8.k, 0 :: (dereferenceable load 4 from %ir.k)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.43 ***
SU(0):   %340:gpr32common = LDRWui %stack.8.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(1):   %341:gpr32common = nsw ADDWri %340:gpr32common, 1, 0
SU(2):   STRWui %341:gpr32common, %stack.8.k, 0 :: (store 4 into %ir.k)

********** MI Scheduling **********
main:%bb.44 for.inc124
  From: %335:gpr32common = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
    To: B %bb.34
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %335:gpr32common = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%335
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %336:gpr32common = nsw ADDWri %335:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%335
  Successors:
    SU(2): Data Latency=1 Reg=%336
  Single Issue       : false;
SU(2):   STRWui %336:gpr32common, %stack.4.ie, 0 :: (store 4 into %ir.ie)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%336
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.34
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %336:gpr32common, %stack.4.ie, 0 :: (store 4 into %ir.ie)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %336:gpr32common = nsw ADDWri %335:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %335:gpr32common = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   %335:gpr32common = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(1):   %336:gpr32common = nsw ADDWri %335:gpr32common, 1, 0
SU(2):   STRWui %336:gpr32common, %stack.4.ie, 0 :: (store 4 into %ir.ie)

********** MI Scheduling **********
main:%bb.45 for.end126
  From: $x0 = COPY %254:gpr64
    To: BL @transfb, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %254:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $x1 = COPY %351:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @transfb, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) $x1 = COPY %351:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %254:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   $x0 = COPY %254:gpr64
SU(1):   $x1 = COPY %351:gpr64

********** MI Scheduling **********
main:%bb.48 for.cond130
  From: %260:gpr32 = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
    To: Bcc 10, %bb.55, implicit killed $nzcv
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %260:gpr32 = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%260
  Single Issue       : false;
SU(1):   %262:gpr32 = LDRWui %108:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%262
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %260:gpr32, %262:gpr32, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%262
    SU(0): Data Latency=4 Reg=%260
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.55, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %260:gpr32, %262:gpr32, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %262:gpr32 = LDRWui %108:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %260:gpr32 = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.48 ***
SU(0):   %260:gpr32 = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(1):   %262:gpr32 = LDRWui %108:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
SU(2):   dead $wzr = SUBSWrr %260:gpr32, %262:gpr32, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.50 for.cond133
  From: %310:gpr32common = LDRWui %stack.5.iside, 0 :: (dereferenceable load 4 from %ir.iside)
    To: Bcc 12, %bb.54, implicit killed $nzcv
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %310:gpr32common = LDRWui %stack.5.iside, 0 :: (dereferenceable load 4 from %ir.iside)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%310
  Single Issue       : false;
SU(1):   %311:gpr64common = LDRSWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWri %310:gpr32common, 5, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%310
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.54, implicit killed $nzcv
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 1 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWri %310:gpr32common, 5, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %311:gpr64common = LDRSWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  Ready @3c
  BotQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 2
  Executed: 4c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %310:gpr32common = LDRWui %stack.5.iside, 0 :: (dereferenceable load 4 from %ir.iside)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.50 ***
SU(0):   %310:gpr32common = LDRWui %stack.5.iside, 0 :: (dereferenceable load 4 from %ir.iside)
SU(1):   %311:gpr64common = LDRSWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(2):   dead $wzr = SUBSWri %310:gpr32common, 5, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.51 for.body135
  From: %319:gpr64common = MADDXrrr %311:gpr64common, %316:gpr64, %318:gpr64
    To: CBNZW %321:gpr32, %bb.53
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %319:gpr64common = MADDXrrr %311:gpr64common, %316:gpr64, %318:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=1 Reg=%319
  Single Issue       : false;
SU(1):   %320:gpr64 = LDRSWui %stack.5.iside, 0 :: (dereferenceable load 4 from %ir.iside)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Data Latency=4 Reg=%320
  Single Issue       : false;
SU(2):   %321:gpr32 = LDRWroX %319:gpr64common, %320:gpr64, 0, 1 :: (load 4 from %ir.arrayidx139)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=%320
    SU(0): Data Latency=1 Reg=%319
  Successors:
    ExitSU: Data Latency=4 Reg=%321
  Single Issue       : false;
ExitSU:   CBNZW %321:gpr32, %bb.53
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%321
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %321:gpr32 = LDRWroX %319:gpr64common, %320:gpr64, 0, 1 :: (load 4 from %ir.arrayidx139)
  Ready @4c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 1
  Executed: 5c
  Critical: 1c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %319:gpr64common = MADDXrrr %311:gpr64common, %316:gpr64, %318:gpr64
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 8 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %320:gpr64 = LDRSWui %stack.5.iside, 0 :: (dereferenceable load 4 from %ir.iside)
  Ready @8c
  BotQ.A BotLatency SU(1) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 3
  Executed: 9c
  Critical: 3c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.51 ***
SU(1):   %320:gpr64 = LDRSWui %stack.5.iside, 0 :: (dereferenceable load 4 from %ir.iside)
SU(0):   %319:gpr64common = MADDXrrr %311:gpr64common, %316:gpr64, %318:gpr64
SU(2):   %321:gpr32 = LDRWroX %319:gpr64common, %320:gpr64, 0, 1 :: (load 4 from %ir.arrayidx139)

********** MI Scheduling **********
main:%bb.52 if.then141
  From: $x0 = COPY %327:gpr64
    To: BL @facev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %327:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $w1 = COPY %328:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = FMOVD0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @facev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $w1 = COPY %328:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %327:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $d0 = FMOVD0
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.52 ***
SU(2):   $d0 = FMOVD0
SU(0):   $x0 = COPY %327:gpr64
SU(1):   $w1 = COPY %328:gpr32

********** MI Scheduling **********
main:%bb.52 if.then141
  From: %322:gpr64 = LDRSWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %322:gpr64 = LDRSWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=4 Reg=%322
  Single Issue       : false;
SU(1):   %327:gpr64 = MADDXrrr %322:gpr64, %375:gpr64, %351:gpr64
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%322
  Single Issue       : false;
SU(2):   %328:gpr32 = LDRWui %stack.5.iside, 0 :: (dereferenceable load 4 from %ir.iside)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %327:gpr64 = MADDXrrr %322:gpr64, %375:gpr64, %351:gpr64
  Ready @0c
  BotQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %328:gpr32 = LDRWui %stack.5.iside, 0 :: (dereferenceable load 4 from %ir.iside)
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 2
  Executed: 4c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %322:gpr64 = LDRSWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.52 ***
SU(0):   %322:gpr64 = LDRSWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(2):   %328:gpr32 = LDRWui %stack.5.iside, 0 :: (dereferenceable load 4 from %ir.iside)
SU(1):   %327:gpr64 = MADDXrrr %322:gpr64, %375:gpr64, %351:gpr64

********** MI Scheduling **********
main:%bb.53 for.inc146
  From: %330:gpr32common = LDRWui %stack.5.iside, 0 :: (dereferenceable load 4 from %ir.iside)
    To: B %bb.50
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %330:gpr32common = LDRWui %stack.5.iside, 0 :: (dereferenceable load 4 from %ir.iside)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%330
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %331:gpr32common = nsw ADDWri %330:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%330
  Successors:
    SU(2): Data Latency=1 Reg=%331
  Single Issue       : false;
SU(2):   STRWui %331:gpr32common, %stack.5.iside, 0 :: (store 4 into %ir.iside)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%331
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.50
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %331:gpr32common, %stack.5.iside, 0 :: (store 4 into %ir.iside)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %331:gpr32common = nsw ADDWri %330:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %330:gpr32common = LDRWui %stack.5.iside, 0 :: (dereferenceable load 4 from %ir.iside)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.53 ***
SU(0):   %330:gpr32common = LDRWui %stack.5.iside, 0 :: (dereferenceable load 4 from %ir.iside)
SU(1):   %331:gpr32common = nsw ADDWri %330:gpr32common, 1, 0
SU(2):   STRWui %331:gpr32common, %stack.5.iside, 0 :: (store 4 into %ir.iside)

********** MI Scheduling **********
main:%bb.54 for.inc149
  From: %314:gpr32common = nsw ADDWri %311.sub_32:gpr64common, 1, 0
    To: B %bb.48
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %314:gpr32common = nsw ADDWri %311.sub_32:gpr64common, 1, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%314
  Single Issue       : false;
SU(1):   STRWui %314:gpr32common, %stack.4.ie, 0 :: (store 4 into %ir.ie)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%314
  Single Issue       : false;
ExitSU:   B %bb.48
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %314:gpr32common, %stack.4.ie, 0 :: (store 4 into %ir.ie)
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %314:gpr32common = nsw ADDWri %311.sub_32:gpr64common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.54 ***
SU(0):   %314:gpr32common = nsw ADDWri %311.sub_32:gpr64common, 1, 0
SU(1):   STRWui %314:gpr32common, %stack.4.ie, 0 :: (store 4 into %ir.ie)

********** MI Scheduling **********
main:%bb.55 for.end151
  From: $x0 = COPY %254:gpr64
    To: BL @col2, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $w2, implicit-def $sp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %254:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $x1 = COPY %267:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $w2 = COPY %265:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @col2, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $w2, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $w2 = COPY %265:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(1) $x1 = COPY %267:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %254:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.55 ***
SU(0):   $x0 = COPY %254:gpr64
SU(1):   $x1 = COPY %267:gpr64
SU(2):   $w2 = COPY %265:gpr32

********** MI Scheduling **********
main:%bb.57 if.end154
  From: $x0 = COPY %106:gpr64
    To: BL @add2, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $w2, implicit-def $sp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %106:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $x1 = COPY %275:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $w2 = COPY %273:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @add2, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $w2, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $w2 = COPY %273:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(1) $x1 = COPY %275:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %106:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.57 ***
SU(0):   $x0 = COPY %106:gpr64
SU(1):   $x1 = COPY %275:gpr64
SU(2):   $w2 = COPY %273:gpr32

********** MI Scheduling **********
main:%bb.59 if.end157
  From: %280:fpr64 = LDRDui %114:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @time :: (dereferenceable load 8 from @time)
    To: CBZW %284:gpr32, %bb.63
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %280:fpr64 = LDRDui %114:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @time :: (dereferenceable load 8 from @time)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%280
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %282:fpr64 = LDRDui %77:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%282
  Single Issue       : false;
SU(2):   %283:fpr64 = FADDDrr %280:fpr64, %282:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%282
    SU(0): Data Latency=4 Reg=%280
  Successors:
    SU(3): Data Latency=1 Reg=%283
  Single Issue       : false;
SU(3):   STRDui %283:fpr64, %114:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%283
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   %284:gpr32 = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Data Latency=4 Reg=%284
  Single Issue       : false;
ExitSU:   CBZW %284:gpr32, %bb.63
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(4): Data Latency=4 Reg=%284
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) STRDui %283:fpr64, %114:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
  Ready @0c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %283:fpr64 = FADDDrr %280:fpr64, %282:fpr64
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 4 BotQ.A
Queue BotQ.P: 0 1 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %284:gpr32 = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
  Ready @4c
  BotQ.A BotLatency SU(4) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %282:fpr64 = LDRDui %77:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %280:fpr64 = LDRDui %114:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @time :: (dereferenceable load 8 from @time)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.59 ***
SU(0):   %280:fpr64 = LDRDui %114:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @time :: (dereferenceable load 8 from @time)
SU(1):   %282:fpr64 = LDRDui %77:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
SU(4):   %284:gpr32 = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
SU(2):   %283:fpr64 = FADDDrr %280:fpr64, %282:fpr64
SU(3):   STRDui %283:fpr64, %114:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)

********** MI Scheduling **********
main:%bb.60 land.lhs.true
  From: %285:gpr32 = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
    To: Bcc 1, %bb.63, implicit killed $nzcv
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %285:gpr32 = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(4): Data Latency=4 Reg=%285
    SU(2): Data Latency=4 Reg=%285
  Single Issue       : false;
SU(1):   %287:gpr32 = LDRWui %395:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (dereferenceable load 4 from @fre)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%287
    SU(2): Data Latency=4 Reg=%287
  Single Issue       : false;
SU(2):   %288:gpr32 = SDIVWr %285:gpr32, %287:gpr32
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=%287
    SU(0): Data Latency=4 Reg=%285
  Successors:
    SU(3): Data Latency=1 Reg=%288
  Single Issue       : false;
SU(3):   %289:gpr32 = nsw MADDWrrr %288:gpr32, %287:gpr32, $wzr
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(2): Data Latency=1 Reg=%288
    SU(1): Data Latency=4 Reg=%287
  Successors:
    SU(4): Data Latency=1 Reg=%289
  Single Issue       : false;
SU(4):   dead $wzr = SUBSWrr %289:gpr32, %285:gpr32, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(3): Data Latency=1 Reg=%289
    SU(0): Data Latency=4 Reg=%285
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.63, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) dead $wzr = SUBSWrr %289:gpr32, %285:gpr32, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(4) 6c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %289:gpr32 = nsw MADDWrrr %288:gpr32, %287:gpr32, $wzr
  Ready @2c
  BotQ.A BotLatency SU(3) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %288:gpr32 = SDIVWr %285:gpr32, %287:gpr32
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %287:gpr32 = LDRWui %395:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (dereferenceable load 4 from @fre)
  Ready @7c
  BotQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 4
  Executed: 8c
  Critical: 4c, 4 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %285:gpr32 = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 5
  Executed: 9c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.60 ***
SU(0):   %285:gpr32 = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
SU(1):   %287:gpr32 = LDRWui %395:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (dereferenceable load 4 from @fre)
SU(2):   %288:gpr32 = SDIVWr %285:gpr32, %287:gpr32
SU(3):   %289:gpr32 = nsw MADDWrrr %288:gpr32, %287:gpr32, $wzr
SU(4):   dead $wzr = SUBSWrr %289:gpr32, %285:gpr32, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.61 if.then161
  From: %292:gpr32 = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
    To: Bcc 0, %bb.64, implicit killed $nzcv
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %292:gpr32 = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%292
  Single Issue       : false;
SU(1):   %294:gpr32 = LDRWui %396:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%294
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %292:gpr32, %294:gpr32, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%294
    SU(0): Data Latency=4 Reg=%292
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 0, %bb.64, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %292:gpr32, %294:gpr32, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %294:gpr32 = LDRWui %396:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %292:gpr32 = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.61 ***
SU(0):   %292:gpr32 = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
SU(1):   %294:gpr32 = LDRWui %396:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
SU(2):   dead $wzr = SUBSWrr %292:gpr32, %294:gpr32, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.62 if.then163
  From: $x0 = ADDXri %stack.13.ifmortar, 0, 0
    To: BL @adaptation, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = ADDXri %stack.13.ifmortar, 0, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $w1 = COPY %296:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @adaptation, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $w1 = COPY %296:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = ADDXri %stack.13.ifmortar, 0, 0
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.62 ***
SU(0):   $x0 = ADDXri %stack.13.ifmortar, 0, 0
SU(1):   $w1 = COPY %296:gpr32

********** MI Scheduling **********
main:%bb.64 if.end166
  From: %298:fpr64 = LDRDui %393:gpr64sp, 14 :: (dereferenceable load 8 from %ir.nelt_tot)
    To: B %bb.20
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %298:fpr64 = LDRDui %393:gpr64sp, 14 :: (dereferenceable load 8 from %ir.nelt_tot)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=%298
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   undef %301.ssub:fpr64 = LDRSui %108:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(2): Data Latency=4 Reg=%301
  Single Issue       : false;
SU(2):   %303:fpr128 = SSHLLv2i32_shift %301:fpr64, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=%301
  Successors:
    SU(3): Data Latency=1 Reg=%303
  Single Issue       : false;
SU(3):   %305:fpr64 = SCVTFv1i64 %303.dsub:fpr128
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(2): Data Latency=1 Reg=%303
  Successors:
    SU(4): Data Latency=1 Reg=%305
  Single Issue       : false;
SU(4):   %306:fpr64 = FADDDrr %298:fpr64, %305:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(3): Data Latency=1 Reg=%305
    SU(0): Data Latency=4 Reg=%298
  Successors:
    SU(5): Data Latency=1 Reg=%306
  Single Issue       : false;
SU(5):   STRDui %306:fpr64, %393:gpr64sp, 14 :: (store 8 into %ir.nelt_tot)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%306
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
SU(6):   %307:gpr32common = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(7): Data Latency=4 Reg=%307
    SU(8): Ord  Latency=0 Memory
  Single Issue       : false;
SU(7):   %308:gpr32common = nsw ADDWri %307:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(6): Data Latency=4 Reg=%307
  Successors:
    SU(8): Data Latency=1 Reg=%308
  Single Issue       : false;
SU(8):   STRWui %308:gpr32common, %stack.3.step, 0 :: (store 4 into %ir.step)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=%308
    SU(6): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.20
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) STRWui %308:gpr32common, %stack.3.step, 0 :: (store 4 into %ir.step)
  Ready @0c
  BotQ.A TopLatency SU(8) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 
BotQ.A RemLatency SU(5) 7c
  BotQ.A RemainingLatency 7 + 1c > CritPath 7
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) STRDui %306:fpr64, %393:gpr64sp, 14 :: (store 8 into %ir.nelt_tot)
  Ready @1c
  BotQ.A TopLatency SU(5) 7c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 
BotQ.A RemLatency SU(4) 6c
  BotQ.A RemainingLatency 6 + 2c > CritPath 7
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(4) BOT-PATH                  6 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) %306:fpr64 = FADDDrr %298:fpr64, %305:fpr64
  Ready @2c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 7 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 
BotQ.A RemLatency SU(3) 5c
  BotQ.A RemainingLatency 5 + 3c > CritPath 7
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(3) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(3) %305:fpr64 = SCVTFv1i64 %303.dsub:fpr128
  Ready @3c
  BotQ.A BotLatency SU(3) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 7 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 
BotQ.A RemLatency SU(7) 4c
  BotQ.A RemainingLatency 4 + 4c > CritPath 7
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %308:gpr32common = nsw ADDWri %307:gpr32common, 1, 0
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 6 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %303:fpr128 = SSHLLv2i32_shift %301:fpr64, 0
  Ready @5c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 6 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %298:fpr64 = LDRDui %393:gpr64sp, 14 :: (dereferenceable load 8 from %ir.nelt_tot)
  Ready @6c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 8 BotQ.A
Queue BotQ.P: 1 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %307:gpr32common = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 8
  Executed: 9c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) undef %301.ssub:fpr64 = LDRSui %108:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  Ready @9c
  BotQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 9
  Executed: 10c
  Critical: 9c, 9 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.64 ***
SU(1):   undef %301.ssub:fpr64 = LDRSui %108:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
SU(6):   %307:gpr32common = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
SU(0):   %298:fpr64 = LDRDui %393:gpr64sp, 14 :: (dereferenceable load 8 from %ir.nelt_tot)
SU(2):   %303:fpr128 = SSHLLv2i32_shift %301:fpr64, 0
SU(7):   %308:gpr32common = nsw ADDWri %307:gpr32common, 1, 0
SU(3):   %305:fpr64 = SCVTFv1i64 %303.dsub:fpr128
SU(4):   %306:fpr64 = FADDDrr %298:fpr64, %305:fpr64
SU(5):   STRDui %306:fpr64, %393:gpr64sp, 14 :: (store 8 into %ir.nelt_tot)
SU(8):   STRWui %308:gpr32common, %stack.3.step, 0 :: (store 4 into %ir.step)

********** MI Scheduling **********
main:%bb.65 for.end170
  From: %150:gpr64 = MOVaddr target-flags(aarch64-page) @.str.33, target-flags(aarch64-pageoff, aarch64-nc) @.str.33
    To: BL @print_results, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit killed $w4, implicit killed $w5, implicit killed $d0, implicit killed $d1, implicit killed $x6, implicit killed $w7, implicit-def $sp
 RegionInstrs: 30
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR32arg=8
tcGPR64=8
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=8
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
Live In: %149 %145 %141 %148 %146 
Live Out: 
Live Thru: 
Top Pressure:
FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
Bottom Pressure:
GPR32arg=8
tcGPR64=8
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=8
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
Excess PSets: 
Cluster ld/st SU(17) - SU(15)
Cluster ld/st SU(13) - SU(11)
Cluster ld/st SU(9) - SU(7)
Cluster ld/st SU(5) - SU(3)
SU(0):   %150:gpr64 = MOVaddr target-flags(aarch64-page) @.str.33, target-flags(aarch64-pageoff, aarch64-nc) @.str.33
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%150
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   STRXui %150:gpr64, $sp, 8 :: (store 8 into stack + 64)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%150
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(2):   %152:gpr64 = MOVaddr target-flags(aarch64-page) @.str.32, target-flags(aarch64-pageoff, aarch64-nc) @.str.32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%152
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(3):   STRXui %152:gpr64, $sp, 7 :: (store 8 into stack + 56)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%152
    SU(5): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(4):   %153:gpr64 = MOVaddr target-flags(aarch64-page) @.str.31, target-flags(aarch64-pageoff, aarch64-nc) @.str.31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%153
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(5):   STRXui %153:gpr64, $sp, 6 :: (store 8 into stack + 48)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%153
  Successors:
    SU(3): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(6):   %154:gpr64 = MOVaddr target-flags(aarch64-page) @.str.30, target-flags(aarch64-pageoff, aarch64-nc) @.str.30
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%154
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   STRXui %154:gpr64, $sp, 5 :: (store 8 into stack + 40)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%154
    SU(9): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(8):   %155:gpr64 = MOVaddr target-flags(aarch64-page) @.str.29, target-flags(aarch64-pageoff, aarch64-nc) @.str.29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(9): Data Latency=1 Reg=%155
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(9):   STRXui %155:gpr64, $sp, 4 :: (store 8 into stack + 32)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%155
  Successors:
    SU(7): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(10):   %156:gpr64 = MOVaddr target-flags(aarch64-page) @.str.28, target-flags(aarch64-pageoff, aarch64-nc) @.str.28
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(11): Data Latency=1 Reg=%156
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(11):   STRXui %156:gpr64, $sp, 3 :: (store 8 into stack + 24)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%156
    SU(13): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(12):   %157:gpr64 = MOVaddr target-flags(aarch64-page) @.str.27, target-flags(aarch64-pageoff, aarch64-nc) @.str.27
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(13): Data Latency=1 Reg=%157
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(13):   STRXui %157:gpr64, $sp, 2 :: (store 8 into stack + 16)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%157
  Successors:
    SU(11): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(14):   %158:gpr64 = MOVaddr target-flags(aarch64-page) @.str.26, target-flags(aarch64-pageoff, aarch64-nc) @.str.26
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(15): Data Latency=1 Reg=%158
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(15):   STRXui %158:gpr64, $sp, 1 :: (store 8 into stack + 8)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(14): Data Latency=1 Reg=%158
    SU(17): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(16):   %159:gpr64 = MOVaddr target-flags(aarch64-page) @.str.25, target-flags(aarch64-pageoff, aarch64-nc) @.str.25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(17): Data Latency=1 Reg=%159
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(17):   STRXui %159:gpr64, $sp, 0 :: (store 8 into stack)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(16): Data Latency=1 Reg=%159
  Successors:
    SU(15): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(18):   %160:gpr64 = MOVaddr target-flags(aarch64-page) @.str.23, target-flags(aarch64-pageoff, aarch64-nc) @.str.23
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(20): Data Latency=1 Reg=%160
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(19):   %161:gpr64 = MOVaddr target-flags(aarch64-page) @.str.24, target-flags(aarch64-pageoff, aarch64-nc) @.str.24
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(28): Data Latency=1 Reg=%161
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(20):   $x0 = COPY %160:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(18): Data Latency=1 Reg=%160
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1
  Single Issue       : false;
SU(21):   $w1 = COPY %146:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1
  Single Issue       : false;
SU(22):   $w2 = MOVi32imm 7
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1    GPR32 -1
  Single Issue       : false;
SU(23):   $w3 = COPY $wzr
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1    GPR32 -1
  Single Issue       : false;
SU(24):   $w4 = COPY $wzr
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1    GPR32 -1
  Single Issue       : false;
SU(25):   $w5 = COPY %148:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1
  Single Issue       : false;
SU(26):   $d0 = COPY %141:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : FPR128_lo -1    ZPR_3b -1    FPR128_lo+ZPR_3b -1    QQ_with_qsub1_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR4_with_zsub3_in_ZPR_4b -1    ZPR4_with_zsub_in_FPR128_lo -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1
  Single Issue       : false;
SU(27):   $d1 = COPY %145:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : FPR128_lo -1    ZPR_3b -1    FPR128_lo+ZPR_3b -1    QQ_with_qsub1_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR4_with_zsub3_in_ZPR_4b -1    ZPR4_with_zsub_in_FPR128_lo -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1
  Single Issue       : false;
SU(28):   $x6 = COPY %161:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(19): Data Latency=1 Reg=%161
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1
  Single Issue       : false;
SU(29):   $w7 = COPY %149:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1
  Single Issue       : false;
ExitSU:   BL @print_results, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit killed $w4, implicit killed $w5, implicit killed $d0, implicit killed $d1, implicit killed $x6, implicit killed $w7, implicit-def $sp
  # preds left       : 10
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(29): Ord  Latency=0 Artificial
    SU(28): Ord  Latency=0 Artificial
    SU(27): Ord  Latency=0 Artificial
    SU(26): Ord  Latency=0 Artificial
    SU(25): Ord  Latency=0 Artificial
    SU(24): Ord  Latency=0 Artificial
    SU(23): Ord  Latency=0 Artificial
    SU(22): Ord  Latency=1 Artificial
    SU(21): Ord  Latency=0 Artificial
    SU(20): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 22 
Queue BotQ.A: 17 15 13 11 9 7 5 3 1 29 28 27 26 25 24 23 21 20 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 24 25 26 27 29 
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(15) WEAK                               
  Cand SU(29) PHYS-REG                           
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(23) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(29) $w7 = COPY %149:gpr32
Bottom Pressure:
GPR32arg=7
tcGPR64=7
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=8
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  LiveReg: %149
  UpdateRegP: SU(29) $w7 = COPY %149:gpr32
              to GPR32arg -1    tcGPR64 -1    GPR32 -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 22 
Queue BotQ.A: 17 15 13 11 9 7 5 3 1 20 28 27 26 25 24 23 21 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 24 25 26 27 
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(15) WEAK                               
  Cand SU(20) PHYS-REG                           
  Cand SU(28) ORDER                              
Picking from Top:
  Cand SU(23) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(28) $x6 = COPY %161:gpr64
Bottom Pressure:
GPR32arg=6
tcGPR64=6
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=8
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  LiveReg: %161
  UpdateRegP: SU(28) $x6 = COPY %161:gpr64
              to GPR32arg -1    tcGPR64 -1    GPR32 -1
  Ready @0c
  BotQ.A TopLatency SU(28) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 22 19 
Queue BotQ.A: 17 15 13 11 9 7 5 3 1 20 21 27 26 25 24 23 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 24 25 26 27 
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(15) WEAK                               
  Cand SU(20) PHYS-REG                           
  Cand SU(21) ORDER                              
  Cand SU(25) ORDER                              
Picking from Top:
  Cand SU(23) NOCAND                             
Pick Bot ORDER     
Scheduling SU(25) $w5 = COPY %148:gpr32
Bottom Pressure:
GPR32arg=5
tcGPR64=5
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=8
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  LiveReg: %148
  UpdateRegP: SU(25) $w5 = COPY %148:gpr32
              to GPR32arg -1    tcGPR64 -1    GPR32 -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 22 19 
Queue BotQ.A: 17 15 13 11 9 7 5 3 1 20 21 27 26 23 24 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 24 27 26 
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(15) WEAK                               
  Cand SU(20) PHYS-REG                           
  Cand SU(21) ORDER                              
  Cand SU(23) ORDER                              
  Cand SU(24) ORDER                              
Picking from Top:
  Cand SU(23) NOCAND                             
Pick Bot ORDER     
Scheduling SU(24) $w4 = COPY $wzr
Bottom Pressure:
GPR32arg=4
tcGPR64=4
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=7
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 22 19 
Queue BotQ.A: 17 15 13 11 9 7 5 3 1 20 21 27 26 23 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 26 27 
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(15) WEAK                               
  Cand SU(20) PHYS-REG                           
  Cand SU(21) ORDER                              
  Cand SU(23) ORDER                              
Picking from Top:
  Cand SU(23) NOCAND                             
Pick Bot ORDER     
Scheduling SU(23) $w3 = COPY $wzr
Bottom Pressure:
GPR32arg=3
tcGPR64=3
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=6
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 22 19 
Queue BotQ.A: 17 15 13 11 9 7 5 3 1 20 21 27 26 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 27 26 
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(15) WEAK                               
  Cand SU(20) PHYS-REG                           
  Cand SU(21) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(21) $w1 = COPY %146:gpr32
Bottom Pressure:
GPR32arg=2
tcGPR64=2
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=6
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  LiveReg: %146
  UpdateRegP: SU(21) $w1 = COPY %146:gpr32
              to GPR32arg -1    tcGPR64 -1    GPR32 -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 22 19 
Queue BotQ.A: 17 15 13 11 9 7 5 3 1 20 26 27 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 26 22 27 
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(15) WEAK                               
  Cand SU(20) PHYS-REG                           
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(20) $x0 = COPY %160:gpr64
Bottom Pressure:
GPR32arg=1
tcGPR64=1
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=6
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  LiveReg: %160
  UpdateRegP: SU(20) $x0 = COPY %160:gpr64
              to GPR32arg -1    tcGPR64 -1    GPR32 -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 22 19 18 
Queue BotQ.A: 17 15 13 11 9 7 5 3 1 27 26 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 26 22 27 
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(15) WEAK                               
  Cand SU(27) PHYS-REG                           
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(27) $d1 = COPY %145:fpr64
Bottom Pressure:
GPR32arg=1
tcGPR64=1
FPR128_lo=1
ZPR_3b=1
FPR128_lo+ZPR_3b=1
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=1
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=1
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=1
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=1
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=1
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=1
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=1
GPR32=6
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR4_with_zsub3_in_ZPR_4b=1
ZPR4_with_zsub_in_FPR128_lo=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=1
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %145
  UpdateRegP: SU(27) $d1 = COPY %145:fpr64
              to FPR128_lo -1    ZPR_3b -1    FPR128_lo+ZPR_3b -1    QQ_with_qsub1_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8 -1    FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR4_with_zsub3_in_ZPR_4b -1    ZPR4_with_zsub_in_FPR128_lo -1    FPR8+ZPR_3b -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 22 19 18 
Queue BotQ.A: 17 15 13 11 9 7 5 3 1 26 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 26 22 
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(15) WEAK                               
  Cand SU(26) PHYS-REG                           
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(26) $d0 = COPY %141:fpr64
Bottom Pressure:
GPR32arg=1
tcGPR64=1
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %141
  UpdateRegP: SU(26) $d0 = COPY %141:fpr64
              to FPR128_lo -1    ZPR_3b -1    FPR128_lo+ZPR_3b -1    QQ_with_qsub1_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8 -1    FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR4_with_zsub3_in_ZPR_4b -1    ZPR4_with_zsub_in_FPR128_lo -1    FPR8+ZPR_3b -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 22 19 18 
Queue BotQ.A: 17 15 13 11 9 7 5 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 22 
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(15) WEAK                               
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(15) STRXui %158:gpr64, $sp, 1 :: (store 8 into stack + 8)
Bottom Pressure:
GPR32arg=1
tcGPR64=1
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %158
  UpdateRegP: SU(15) STRXui %158:gpr64, $sp, 1 :: (store 8 into stack + 8)
              to 
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 1 13 11 9 7 5 3 14 22 18 19 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 22 
BotQ.A RemLatency SU(17) 1c
  BotQ.A RemainingLatency 1 + 1c > CritPath 1
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(22) PHYS-REG                           
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(22) $w2 = MOVi32imm 7
Bottom Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  Ready @1c
  BotQ.A BotLatency SU(22) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 1 13 11 9 7 5 3 14 19 18 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(17) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(17) STRXui %159:gpr64, $sp, 0 :: (store 8 into stack)
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %159
  UpdateRegP: SU(17) STRXui %159:gpr64, $sp, 0 :: (store 8 into stack)
              to 
  Ready @2c
  BotQ.A TopLatency SU(17) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 1 13 11 9 7 5 3 14 19 16 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Cand SU(18) ORDER                              
  Cand SU(1) BOT-PATH                  1 cycles 
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(11) STRXui %156:gpr64, $sp, 3 :: (store 8 into stack + 24)
Bottom Pressure:
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %156
  UpdateRegP: SU(11) STRXui %156:gpr64, $sp, 3 :: (store 8 into stack + 24)
              to 
  Ready @3c
  BotQ.A TopLatency SU(11) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 1 13 16 9 7 5 3 14 19 10 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 
  BotQ.A RemainingLatency 0 + 4c > CritPath 1
Picking from Bot:
  Cand SU(18) ORDER                              
  Cand SU(13) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(13) STRXui %157:gpr64, $sp, 2 :: (store 8 into stack + 16)
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %157
  UpdateRegP: SU(13) STRXui %157:gpr64, $sp, 2 :: (store 8 into stack + 16)
              to 
  Ready @4c
  BotQ.A TopLatency SU(13) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 1 10 16 9 7 5 3 14 19 12 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 
  BotQ.A RemainingLatency 0 + 5c > CritPath 1
Picking from Bot:
  Cand SU(18) ORDER                              
  Cand SU(19) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(19) %161:gpr64 = MOVaddr target-flags(aarch64-page) @.str.24, target-flags(aarch64-pageoff, aarch64-nc) @.str.24
Bottom Pressure:
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 1 10 16 9 7 5 3 14 12 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 
  BotQ.A RemainingLatency 0 + 6c > CritPath 1
Picking from Bot:
  Cand SU(18) ORDER                              
  Cand SU(1) BOT-PATH                  1 cycles 
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(7) STRXui %154:gpr64, $sp, 5 :: (store 8 into stack + 40)
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %154
  UpdateRegP: SU(7) STRXui %154:gpr64, $sp, 5 :: (store 8 into stack + 40)
              to 
  Ready @6c
  BotQ.A TopLatency SU(7) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 1 10 16 9 12 5 3 14 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 
  BotQ.A RemainingLatency 0 + 7c > CritPath 1
Picking from Bot:
  Cand SU(18) ORDER                              
  Cand SU(9) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(9) STRXui %155:gpr64, $sp, 4 :: (store 8 into stack + 32)
Bottom Pressure:
FPR8=2
GPR32=10
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %155
  UpdateRegP: SU(9) STRXui %155:gpr64, $sp, 4 :: (store 8 into stack + 32)
              to 
  Ready @7c
  BotQ.A TopLatency SU(9) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 1 10 16 6 12 5 3 14 8 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 
  BotQ.A RemainingLatency 0 + 8c > CritPath 1
Picking from Bot:
  Cand SU(18) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(18) %160:gpr64 = MOVaddr target-flags(aarch64-page) @.str.23, target-flags(aarch64-pageoff, aarch64-nc) @.str.23
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 1 10 16 6 12 5 3 14 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 
  BotQ.A RemainingLatency 0 + 9c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(1) BOT-PATH                  1 cycles 
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(3) STRXui %152:gpr64, $sp, 7 :: (store 8 into stack + 56)
Bottom Pressure:
FPR8=2
GPR32=10
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %152
  UpdateRegP: SU(3) STRXui %152:gpr64, $sp, 7 :: (store 8 into stack + 56)
              to 
  Ready @9c
  BotQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 1 10 16 6 12 5 14 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 
  BotQ.A RemainingLatency 0 + 10c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(5) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(5) STRXui %153:gpr64, $sp, 6 :: (store 8 into stack + 48)
Bottom Pressure:
FPR8=2
GPR32=11
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %153
  UpdateRegP: SU(5) STRXui %153:gpr64, $sp, 6 :: (store 8 into stack + 48)
              to 
  Ready @10c
  BotQ.A TopLatency SU(5) 1c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 1 10 16 6 12 2 14 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 
  BotQ.A RemainingLatency 0 + 11c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(16) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(16) %159:gpr64 = MOVaddr target-flags(aarch64-page) @.str.25, target-flags(aarch64-pageoff, aarch64-nc) @.str.25
Bottom Pressure:
FPR8=2
GPR32=10
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 1 10 4 6 12 2 14 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 
  BotQ.A RemainingLatency 0 + 12c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(1) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) STRXui %150:gpr64, $sp, 8 :: (store 8 into stack + 64)
Bottom Pressure:
FPR8=2
GPR32=11
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %150
  UpdateRegP: SU(1) STRXui %150:gpr64, $sp, 8 :: (store 8 into stack + 64)
              to 
  Ready @12c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 14 10 4 6 12 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 
  BotQ.A RemainingLatency 0 + 13c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(14) %158:gpr64 = MOVaddr target-flags(aarch64-page) @.str.26, target-flags(aarch64-pageoff, aarch64-nc) @.str.26
Bottom Pressure:
FPR8=2
GPR32=10
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 0 10 4 6 12 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 
  BotQ.A RemainingLatency 0 + 14c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(12) %157:gpr64 = MOVaddr target-flags(aarch64-page) @.str.27, target-flags(aarch64-pageoff, aarch64-nc) @.str.27
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 0 10 4 6 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 
  BotQ.A RemainingLatency 0 + 15c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(10) %156:gpr64 = MOVaddr target-flags(aarch64-page) @.str.28, target-flags(aarch64-pageoff, aarch64-nc) @.str.28
Bottom Pressure:
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @15c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 0 2 4 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 
  BotQ.A RemainingLatency 0 + 16c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %155:gpr64 = MOVaddr target-flags(aarch64-page) @.str.29, target-flags(aarch64-pageoff, aarch64-nc) @.str.29
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 0 2 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 
  BotQ.A RemainingLatency 0 + 17c > CritPath 1
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %154:gpr64 = MOVaddr target-flags(aarch64-page) @.str.30, target-flags(aarch64-pageoff, aarch64-nc) @.str.30
Bottom Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 0 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 
  BotQ.A RemainingLatency 0 + 18c > CritPath 1
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %153:gpr64 = MOVaddr target-flags(aarch64-page) @.str.31, target-flags(aarch64-pageoff, aarch64-nc) @.str.31
Bottom Pressure:
FPR8=2
GPR32=5
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  BotQ.A RemainingLatency 0 + 19c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %152:gpr64 = MOVaddr target-flags(aarch64-page) @.str.32, target-flags(aarch64-pageoff, aarch64-nc) @.str.32
Bottom Pressure:
FPR8=2
GPR32=4
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @19c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %150:gpr64 = MOVaddr target-flags(aarch64-page) @.str.33, target-flags(aarch64-pageoff, aarch64-nc) @.str.33
Bottom Pressure:
FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @20c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.65 ***
SU(0):   %150:gpr64 = MOVaddr target-flags(aarch64-page) @.str.33, target-flags(aarch64-pageoff, aarch64-nc) @.str.33
SU(2):   %152:gpr64 = MOVaddr target-flags(aarch64-page) @.str.32, target-flags(aarch64-pageoff, aarch64-nc) @.str.32
SU(4):   %153:gpr64 = MOVaddr target-flags(aarch64-page) @.str.31, target-flags(aarch64-pageoff, aarch64-nc) @.str.31
SU(6):   %154:gpr64 = MOVaddr target-flags(aarch64-page) @.str.30, target-flags(aarch64-pageoff, aarch64-nc) @.str.30
SU(8):   %155:gpr64 = MOVaddr target-flags(aarch64-page) @.str.29, target-flags(aarch64-pageoff, aarch64-nc) @.str.29
SU(10):   %156:gpr64 = MOVaddr target-flags(aarch64-page) @.str.28, target-flags(aarch64-pageoff, aarch64-nc) @.str.28
SU(12):   %157:gpr64 = MOVaddr target-flags(aarch64-page) @.str.27, target-flags(aarch64-pageoff, aarch64-nc) @.str.27
SU(14):   %158:gpr64 = MOVaddr target-flags(aarch64-page) @.str.26, target-flags(aarch64-pageoff, aarch64-nc) @.str.26
SU(1):   STRXui %150:gpr64, $sp, 8 :: (store 8 into stack + 64)
SU(16):   %159:gpr64 = MOVaddr target-flags(aarch64-page) @.str.25, target-flags(aarch64-pageoff, aarch64-nc) @.str.25
SU(5):   STRXui %153:gpr64, $sp, 6 :: (store 8 into stack + 48)
SU(3):   STRXui %152:gpr64, $sp, 7 :: (store 8 into stack + 56)
SU(18):   %160:gpr64 = MOVaddr target-flags(aarch64-page) @.str.23, target-flags(aarch64-pageoff, aarch64-nc) @.str.23
SU(9):   STRXui %155:gpr64, $sp, 4 :: (store 8 into stack + 32)
SU(7):   STRXui %154:gpr64, $sp, 5 :: (store 8 into stack + 40)
SU(19):   %161:gpr64 = MOVaddr target-flags(aarch64-page) @.str.24, target-flags(aarch64-pageoff, aarch64-nc) @.str.24
SU(13):   STRXui %157:gpr64, $sp, 2 :: (store 8 into stack + 16)
SU(11):   STRXui %156:gpr64, $sp, 3 :: (store 8 into stack + 24)
SU(17):   STRXui %159:gpr64, $sp, 0 :: (store 8 into stack)
SU(22):   $w2 = MOVi32imm 7
SU(15):   STRXui %158:gpr64, $sp, 1 :: (store 8 into stack + 8)
SU(26):   $d0 = COPY %141:fpr64
SU(27):   $d1 = COPY %145:fpr64
SU(20):   $x0 = COPY %160:gpr64
SU(21):   $w1 = COPY %146:gpr32
SU(23):   $w3 = COPY $wzr
SU(24):   $w4 = COPY $wzr
SU(25):   $w5 = COPY %148:gpr32
SU(28):   $x6 = COPY %161:gpr64
SU(29):   $w7 = COPY %149:gpr32

********** MI Scheduling **********
main:%bb.65 for.end170
  From: %133:fpr64 = LDRDui %393:gpr64sp, 14 :: (dereferenceable load 8 from %ir.nelt_tot)
    To: ADJCALLSTACKDOWN 72, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 16
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=3
GPR32=4
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
Live In: %396 %393 %397 
Live Out: %149 %148 %146 %145 %393 %141 
Live Thru: GPR32=1
  LiveReg: %149
  LiveReg: %148
  LiveReg: %146
  LiveReg: %145
  UpdateRegP: SU(12) STRDui %145:fpr64, %393:gpr64sp, 16 :: (store 8 into %ir.mflops)
              to GPR32 1
  LiveReg: %393
  UpdateRegP: SU(0) %133:fpr64 = LDRDui %393:gpr64sp, 14 :: (dereferenceable load 8 from %ir.nelt_tot)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(7) %141:fpr64 = LDRDui %393:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(12) STRDui %145:fpr64, %393:gpr64sp, 16 :: (store 8 into %ir.mflops)
              to 
  LiveReg: %141
  UpdateRegP: SU(10) %144:fpr64 = FMULDrr %141:fpr64, %143:fpr64
              to 
Top Pressure:
GPR32=3
Bottom Pressure:
FPR8=2
GPR32=4
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
Excess PSets: 
Constraining copy SU(9)
Cluster ld/st SU(0) - SU(7)
  Copy Succ SU(6)
SU(0):   %133:fpr64 = LDRDui %393:gpr64sp, 14 :: (dereferenceable load 8 from %ir.nelt_tot)
  # preds left       : 0
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(6): Data Latency=4 Reg=%133
    SU(7): Ord  Latency=0 Cluster
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(1):   %135:gpr32 = LDRWui %397:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Data Latency=4 Reg=%135
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %136:gpr32 = MOVi32imm 125
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(3): Data Latency=1 Reg=%136
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(3):   %137:gpr32common = MADDWrrr %135:gpr32, %136:gpr32, $wzr
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(2): Data Latency=1 Reg=%136
    SU(1): Data Latency=4 Reg=%135
  Successors:
    SU(4): Data Latency=1 Reg=%137
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(4):   %138:gpr32common = ADDWri %137:gpr32common, 125, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(3): Data Latency=1 Reg=%137
  Successors:
    SU(5): Data Latency=1 Reg=%138
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %139:fpr64 = SCVTFUWDri %138:gpr32common
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 3
  Predecessors:
    SU(4): Data Latency=1 Reg=%138
  Successors:
    SU(6): Data Latency=1 Reg=%139
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(6):   %140:fpr64 = FMULDrr %133:fpr64, %139:fpr64
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 2
  Predecessors:
    SU(5): Data Latency=1 Reg=%139
    SU(0): Data Latency=4 Reg=%133
    SU(7): Ord  Latency=0 Artificial
  Successors:
    SU(11): Data Latency=1 Reg=%140
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(7):   %141:fpr64 = LDRDui %393:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 2
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Predecessors:
    SU(0): Ord  Latency=0 Cluster
  Successors:
    SU(10): Data Latency=4 Reg=%141
    SU(6): Ord  Latency=0 Artificial
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(8):   %142:gpr64 = MOVi64imm 4696837146684686336
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(9): Data Latency=1 Reg=%142
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(9):   %143:fpr64 = COPY %142:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(8): Data Latency=1 Reg=%142
  Successors:
    SU(10): Data Latency=0 Reg=%143
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(10):   %144:fpr64 = FMULDrr %141:fpr64, %143:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(9): Data Latency=0 Reg=%143
    SU(7): Data Latency=4 Reg=%141
  Successors:
    SU(11): Data Latency=1 Reg=%144
  Pressure Diff      : 
  Single Issue       : false;
SU(11):   %145:fpr64 = FDIVDrr %140:fpr64, %144:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(6): Data Latency=1 Reg=%140
    SU(10): Data Latency=1 Reg=%144
  Successors:
    SU(12): Data Latency=1 Reg=%145
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(12):   STRDui %145:fpr64, %393:gpr64sp, 16 :: (store 8 into %ir.mflops)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(11): Data Latency=1 Reg=%145
  Pressure Diff      : 
  Single Issue       : false;
SU(13):   %146:gpr32 = LDRSBWui %stack.12.Class, 0 :: (dereferenceable load 1 from %ir.Class, align 4)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(14):   %148:gpr32 = LDRWui %396:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
SU(15):   %149:gpr32 = LDRWui %stack.14.verified, 0 :: (dereferenceable load 4 from %ir.verified)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 72, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(15): Ord  Latency=3 Artificial
    SU(14): Ord  Latency=3 Artificial
    SU(13): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 15 14 13 
Queue BotQ.A: 12 
Pick Bot ONLY1     
Scheduling SU(12) STRDui %145:fpr64, %393:gpr64sp, 16 :: (store 8 into %ir.mflops)
Bottom Pressure:
FPR8=2
GPR32=4
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @0c
  BotQ.A TopLatency SU(12) 9c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 15 14 13 
Queue BotQ.A: 11 
Pick Bot ONLY1     
Scheduling SU(11) %145:fpr64 = FDIVDrr %140:fpr64, %144:fpr64
Bottom Pressure:
FPR8=3
GPR32=4
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  LiveReg: %140
  UpdateRegP: SU(11) %145:fpr64 = FDIVDrr %140:fpr64, %144:fpr64
              to 
  LiveReg: %144
  UpdateRegP: SU(11) %145:fpr64 = FDIVDrr %140:fpr64, %144:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @1c
  BotQ.A BotLatency SU(11) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 15 14 13 
Queue BotQ.A: 6 10 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 7 8 13 14 15 
BotQ.A RemLatency SU(6) 7c
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(10) REG-MAX                            
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(10) %144:fpr64 = FMULDrr %141:fpr64, %143:fpr64
Bottom Pressure:
FPR8=3
GPR32=4
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  LiveReg: %143
  UpdateRegP: SU(10) %144:fpr64 = FMULDrr %141:fpr64, %143:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @2c
  BotQ.A BotLatency SU(10) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 9 15 13 14 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 7 8 13 14 15 
BotQ.A RemLatency SU(6) 7c
  BotQ.A RemainingLatency 7 + 3c > CritPath 9
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(9) REG-MAX    GPR32:1                    
  Cand SU(15) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(15) %149:gpr32 = LDRWui %stack.14.verified, 0 :: (dereferenceable load 4 from %ir.verified)
Bottom Pressure:
FPR8=3
GPR32=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  Ready @3c
  BotQ.A BotLatency SU(15) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 9 14 13 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 7 8 13 14 
BotQ.A RemLatency SU(6) 7c
  BotQ.A RemainingLatency 7 + 4c > CritPath 9
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(9) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(9) %143:fpr64 = COPY %142:gpr64
Bottom Pressure:
FPR8=2
GPR32=4
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %142
  UpdateRegP: SU(9) %143:fpr64 = COPY %142:gpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @4c
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 8 
Queue BotQ.A: 6 13 14 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 7 8 13 14 
BotQ.A RemLatency SU(6) 7c
  BotQ.A RemainingLatency 7 + 4c > CritPath 9
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(6) %140:fpr64 = FMULDrr %133:fpr64, %139:fpr64
Bottom Pressure:
FPR8=3
GPR32=4
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  LiveReg: %133
  UpdateRegP: SU(6) %140:fpr64 = FMULDrr %133:fpr64, %139:fpr64
              to 
  LiveReg: %139
  UpdateRegP: SU(6) %140:fpr64 = FMULDrr %133:fpr64, %139:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @4c
  BotQ.A TopLatency SU(6) 7c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 0 
Queue BotQ.A: 14 13 5 8 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 7 8 13 14 
BotQ.A RemLatency SU(5) 6c
  BotQ.A RemainingLatency 6 + 5c > CritPath 9
Picking from Bot:
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(14) %148:gpr32 = LDRWui %396:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
Bottom Pressure:
FPR8=3
GPR32=4
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  LiveReg: %396
  UpdateRegP: SU(14) %148:gpr32 = LDRWui %396:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
              to GPR32 -1
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 8 13 5 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 7 8 13 
BotQ.A RemLatency SU(5) 6c
  BotQ.A RemainingLatency 6 + 6c > CritPath 9
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(13) %146:gpr32 = LDRSBWui %stack.12.Class, 0 :: (dereferenceable load 1 from %ir.Class, align 4)
Bottom Pressure:
FPR8=3
GPR32=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 8 7 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 7 8 
BotQ.A RemLatency SU(5) 6c
  BotQ.A RemainingLatency 6 + 7c > CritPath 9
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(5) BOT-PATH                  6 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) %139:fpr64 = SCVTFUWDri %138:gpr32common
Bottom Pressure:
FPR8=2
GPR32=4
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %138
  UpdateRegP: SU(5) %139:fpr64 = SCVTFUWDri %138:gpr32common
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @7c
  BotQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 7 4 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 7 8 
BotQ.A RemLatency SU(4) 5c
  BotQ.A RemainingLatency 5 + 8c > CritPath 9
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(4) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(4) %138:gpr32common = ADDWri %137:gpr32common, 125, 0
Bottom Pressure:
FPR8=2
GPR32=4
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %137
  UpdateRegP: SU(4) %138:gpr32common = ADDWri %137:gpr32common, 125, 0
              to GPR32 -1
  Ready @8c
  BotQ.A BotLatency SU(4) 4c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 7 0 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 7 8 
BotQ.A RemLatency SU(3) 4c
  BotQ.A RemainingLatency 4 + 9c > CritPath 9
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(8) %142:gpr64 = MOVi64imm 4696837146684686336
Bottom Pressure:
FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 7 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 7 
  BotQ.A RemainingLatency 0 + 10c > CritPath 9
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(3) %137:gpr32common = MADDWrrr %135:gpr32, %136:gpr32, $wzr
Bottom Pressure:
FPR8=2
GPR32=4
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %135
  UpdateRegP: SU(3) %137:gpr32common = MADDWrrr %135:gpr32, %136:gpr32, $wzr
              to 
  LiveReg: %136
  UpdateRegP: SU(3) %137:gpr32common = MADDWrrr %135:gpr32, %136:gpr32, $wzr
              to GPR32 -1
  Ready @10c
  BotQ.A TopLatency SU(3) 4c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 0 7 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 7 
  BotQ.A RemainingLatency 0 + 11c > CritPath 9
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(7) WEAK                               
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(7) %141:fpr64 = LDRDui %393:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
Bottom Pressure:
FPR8=1
GPR32=4
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  Ready @11c
  BotQ.A BotLatency SU(7) 6c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 0 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  BotQ.A RemainingLatency 0 + 12c > CritPath 9
Picking from Bot:
  Cand SU(0) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(0) %133:fpr64 = LDRDui %393:gpr64sp, 14 :: (dereferenceable load 8 from %ir.nelt_tot)
Bottom Pressure:
GPR32=4
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %136:gpr32 = MOVi32imm 125
Bottom Pressure:
GPR32=3
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %135:gpr32 = LDRWui %397:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
Bottom Pressure:
GPR32=3
  LiveReg: %397
  UpdateRegP: SU(1) %135:gpr32 = LDRWui %397:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
              to GPR32 -1
  Ready @14c
  BotQ.A BotLatency SU(1) 9c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.65 ***
SU(1):   %135:gpr32 = LDRWui %397:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
SU(2):   %136:gpr32 = MOVi32imm 125
SU(0):   %133:fpr64 = LDRDui %393:gpr64sp, 14 :: (dereferenceable load 8 from %ir.nelt_tot)
SU(7):   %141:fpr64 = LDRDui %393:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
SU(3):   %137:gpr32common = MADDWrrr %135:gpr32, %136:gpr32, $wzr
SU(8):   %142:gpr64 = MOVi64imm 4696837146684686336
SU(4):   %138:gpr32common = ADDWri %137:gpr32common, 125, 0
SU(5):   %139:fpr64 = SCVTFUWDri %138:gpr32common
SU(13):   %146:gpr32 = LDRSBWui %stack.12.Class, 0 :: (dereferenceable load 1 from %ir.Class, align 4)
SU(14):   %148:gpr32 = LDRWui %396:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
SU(6):   %140:fpr64 = FMULDrr %133:fpr64, %139:fpr64
SU(9):   %143:fpr64 = COPY %142:gpr64
SU(15):   %149:gpr32 = LDRWui %stack.14.verified, 0 :: (dereferenceable load 4 from %ir.verified)
SU(10):   %144:fpr64 = FMULDrr %141:fpr64, %143:fpr64
SU(11):   %145:fpr64 = FDIVDrr %140:fpr64, %144:fpr64
SU(12):   STRDui %145:fpr64, %393:gpr64sp, 16 :: (store 8 into %ir.mflops)

********** MI Scheduling **********
main:%bb.65 for.end170
  From: $x0 = ADDXri %stack.12.Class, 0, 0
    To: BL @verify, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = ADDXri %stack.12.Class, 0, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = ADDXri %stack.14.verified, 0, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @verify, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $x1 = ADDXri %stack.14.verified, 0, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = ADDXri %stack.12.Class, 0, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.65 ***
SU(0):   $x0 = ADDXri %stack.12.Class, 0, 0
SU(1):   $x1 = ADDXri %stack.14.verified, 0, 0

********** MI Scheduling **********
main:%bb.65 for.end170
  From: %130:fpr64 = COPY killed $d0
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %130:fpr64 = COPY killed $d0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%130
  Single Issue       : false;
SU(1):   STRDui %130:fpr64, %393:gpr64sp, 15 :: (store 8 into %ir.tmax)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%130
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %130:fpr64, %393:gpr64sp, 15 :: (store 8 into %ir.tmax)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %130:fpr64 = COPY killed $d0
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.65 ***
SU(0):   %130:fpr64 = COPY killed $d0
SU(1):   STRDui %130:fpr64, %393:gpr64sp, 15 :: (store 8 into %ir.tmax)

********** MI Scheduling **********
main:%bb.65 for.end170
  From: %129:gpr32 = MOVi32imm 1
    To: BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %129:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   $w0 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %129:gpr32 = MOVi32imm 1
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $w0 = MOVi32imm 1
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.65 ***
SU(1):   $w0 = MOVi32imm 1
SU(0):   %129:gpr32 = MOVi32imm 1

********** MI Scheduling **********
main:%bb.66 if.then179
  From: STRWui %129:gpr32, %stack.6.i, 0 :: (store 4 into %ir.i)
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui %129:gpr32, %stack.6.i, 0 :: (store 4 into %ir.i)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %223:gpr64sp = ADDXri %stack.16.trecs, 0, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %223:gpr64sp = ADDXri %stack.16.trecs, 0, 0
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui %129:gpr32, %stack.6.i, 0 :: (store 4 into %ir.i)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.66 ***
SU(0):   STRWui %129:gpr32, %stack.6.i, 0 :: (store 4 into %ir.i)
SU(1):   %223:gpr64sp = ADDXri %stack.16.trecs, 0, 0

********** MI Scheduling **********
main:%bb.67 for.cond180
  From: %167:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.69, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %167:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%167
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %167:gpr32common, 10, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%167
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.69, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %167:gpr32common, 10, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %167:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.67 ***
SU(0):   %167:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %167:gpr32common, 10, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.68 for.body183
  From: %221:fpr64 = COPY killed $d0
    To: B %bb.67
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Cluster ld/st SU(1) - SU(3)
  Copy Succ SU(2)
  Copy Succ SU(5)
SU(0):   %221:fpr64 = COPY killed $d0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(2): Data Latency=0 Reg=%221
  Single Issue       : false;
SU(1):   %222:gpr64 = LDRSWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%222
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Cluster
  Single Issue       : false;
SU(2):   STRDroX %221:fpr64, %223:gpr64sp, %222:gpr64, 0, 1 :: (store 8 into %ir.arrayidx186)
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%222
    SU(0): Data Latency=0 Reg=%221
    SU(3): Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   %224:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 3
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Predecessors:
    SU(1): Ord  Latency=0 Cluster
  Successors:
    SU(4): Data Latency=4 Reg=%224
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   %225:gpr32common = nsw ADDWri %224:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%224
  Successors:
    SU(5): Data Latency=1 Reg=%225
  Single Issue       : false;
SU(5):   STRWui %225:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%225
    SU(3): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.67
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %221:fpr64 = COPY killed $d0
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 2 
Queue TopQ.P: 
Queue TopQ.A: 3 1 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(3) ORDER                              
  Cand SU(1) WEAK                               
Pick Bot ORDER     
Scheduling SU(5) STRWui %225:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)
  Ready @0c
  BotQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 
Queue TopQ.P: 
Queue TopQ.A: 3 1 
BotQ.A RemLatency SU(2) 4c
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %225:gpr32common = nsw ADDWri %224:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRDroX %221:fpr64, %223:gpr64sp, %222:gpr64, 0, 1 :: (store 8 into %ir.arrayidx186)
  Ready @2c
  BotQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 1 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %224:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %222:gpr64 = LDRSWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.68 ***
SU(0):   %221:fpr64 = COPY killed $d0
SU(1):   %222:gpr64 = LDRSWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(3):   %224:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(2):   STRDroX %221:fpr64, %223:gpr64sp, %222:gpr64, 0, 1 :: (store 8 into %ir.arrayidx186)
SU(4):   %225:gpr32common = nsw ADDWri %224:gpr32common, 1, 0
SU(5):   STRWui %225:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)

********** MI Scheduling **********
main:%bb.69 for.end189
  From: %169:fpr64 = LDRDui %393:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
    To: Bcc 1, %bb.71, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %169:fpr64 = LDRDui %393:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%169
  Single Issue       : false;
SU(1):   FCMPDri %169:fpr64, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%169
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.71, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) FCMPDri %169:fpr64, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %169:fpr64 = LDRDui %393:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.69 ***
SU(0):   %169:fpr64 = LDRDui %393:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
SU(1):   FCMPDri %169:fpr64, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.70 if.then192
  From: %170:gpr64 = MOVi64imm 4607182418800017408
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %170:gpr64 = MOVi64imm 4607182418800017408
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%170
  Single Issue       : false;
SU(1):   STRXui %170:gpr64, %393:gpr64sp, 15 :: (store 8 into %ir.tmax)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%170
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRXui %170:gpr64, %393:gpr64sp, 15 :: (store 8 into %ir.tmax)
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %170:gpr64 = MOVi64imm 4607182418800017408
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.70 ***
SU(0):   %170:gpr64 = MOVi64imm 4607182418800017408
SU(1):   STRXui %170:gpr64, %393:gpr64sp, 15 :: (store 8 into %ir.tmax)

********** MI Scheduling **********
main:%bb.71 if.end193
  From: %173:gpr32 = MOVi32imm 1
    To: End RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %173:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%173
  Single Issue       : false;
SU(1):   STRWui %173:gpr32, %stack.6.i, 0 :: (store 4 into %ir.i)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%173
  Single Issue       : false;
SU(2):   %179:gpr64sp = ADDXri %stack.17.t_names, 0, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %181:gpr64sp = ADDXri %stack.16.trecs, 0, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   %183:gpr64 = MOVi64imm 4636737291354636288
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   %188:gpr64 = MOVaddr target-flags(aarch64-page) @.str.35, target-flags(aarch64-pageoff, aarch64-nc) @.str.35
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(6):   %215:gpr64 = MOVaddr target-flags(aarch64-page) @.str.36, target-flags(aarch64-pageoff, aarch64-nc) @.str.36
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(7):   %216:gpr64 = MOVaddr target-flags(aarch64-page) @.str.37, target-flags(aarch64-pageoff, aarch64-nc) @.str.37
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(8):   %205:gpr64 = MOVaddr target-flags(aarch64-page) @.str.38, target-flags(aarch64-pageoff, aarch64-nc) @.str.38
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 7 6 5 4 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 7 8 
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %205:gpr64 = MOVaddr target-flags(aarch64-page) @.str.38, target-flags(aarch64-pageoff, aarch64-nc) @.str.38
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 7 6 5 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 7 
BotQ.A RemLatency SU(1) 1c
  BotQ.A RemainingLatency 1 + 1c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) STRWui %173:gpr32, %stack.6.i, 0 :: (store 4 into %ir.i)
  Ready @1c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 7 6 5 4 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 7 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %216:gpr64 = MOVaddr target-flags(aarch64-page) @.str.37, target-flags(aarch64-pageoff, aarch64-nc) @.str.37
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 6 5 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %215:gpr64 = MOVaddr target-flags(aarch64-page) @.str.36, target-flags(aarch64-pageoff, aarch64-nc) @.str.36
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 3 5 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 
  BotQ.A RemainingLatency 0 + 4c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %188:gpr64 = MOVaddr target-flags(aarch64-page) @.str.35, target-flags(aarch64-pageoff, aarch64-nc) @.str.35
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 3 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 
  BotQ.A RemainingLatency 0 + 5c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %183:gpr64 = MOVi64imm 4636737291354636288
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 3 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 
  BotQ.A RemainingLatency 0 + 6c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %181:gpr64sp = ADDXri %stack.16.trecs, 0, 0
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  BotQ.A RemainingLatency 0 + 7c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %179:gpr64sp = ADDXri %stack.17.t_names, 0, 0
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %173:gpr32 = MOVi32imm 1
  Ready @8c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.71 ***
SU(0):   %173:gpr32 = MOVi32imm 1
SU(2):   %179:gpr64sp = ADDXri %stack.17.t_names, 0, 0
SU(3):   %181:gpr64sp = ADDXri %stack.16.trecs, 0, 0
SU(4):   %183:gpr64 = MOVi64imm 4636737291354636288
SU(5):   %188:gpr64 = MOVaddr target-flags(aarch64-page) @.str.35, target-flags(aarch64-pageoff, aarch64-nc) @.str.35
SU(6):   %215:gpr64 = MOVaddr target-flags(aarch64-page) @.str.36, target-flags(aarch64-pageoff, aarch64-nc) @.str.36
SU(7):   %216:gpr64 = MOVaddr target-flags(aarch64-page) @.str.37, target-flags(aarch64-pageoff, aarch64-nc) @.str.37
SU(1):   STRWui %173:gpr32, %stack.6.i, 0 :: (store 4 into %ir.i)
SU(8):   %205:gpr64 = MOVaddr target-flags(aarch64-page) @.str.38, target-flags(aarch64-pageoff, aarch64-nc) @.str.38

********** MI Scheduling **********
main:%bb.71 if.end193
  From: %171:gpr64 = MOVaddr target-flags(aarch64-page) @.str.34, target-flags(aarch64-pageoff, aarch64-nc) @.str.34
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %171:gpr64 = MOVaddr target-flags(aarch64-page) @.str.34, target-flags(aarch64-pageoff, aarch64-nc) @.str.34
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%171
  Single Issue       : false;
SU(1):   $x0 = COPY %171:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%171
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %171:gpr64
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %171:gpr64 = MOVaddr target-flags(aarch64-page) @.str.34, target-flags(aarch64-pageoff, aarch64-nc) @.str.34
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.71 ***
SU(0):   %171:gpr64 = MOVaddr target-flags(aarch64-page) @.str.34, target-flags(aarch64-pageoff, aarch64-nc) @.str.34
SU(1):   $x0 = COPY %171:gpr64

********** MI Scheduling **********
main:%bb.72 for.cond195
  From: %174:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.78, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %174:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%174
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %174:gpr32common, 10, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%174
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.78, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %174:gpr32common, 10, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %174:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.72 ***
SU(0):   %174:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %174:gpr32common, 10, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.73 for.body198
  From: %190:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 1, %bb.75, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %190:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%190
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %190:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%190
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.75, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %190:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %190:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.73 ***
SU(0):   %190:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %190:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.73 for.body198
  From: $x0 = COPY %188:gpr64
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %188:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $x1 = COPY %180:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %182:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $d1 = COPY %187:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $d1 = COPY %187:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(2) $d0 = COPY %182:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(1) $x1 = COPY %180:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %188:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.73 ***
SU(0):   $x0 = COPY %188:gpr64
SU(1):   $x1 = COPY %180:gpr64
SU(2):   $d0 = COPY %182:fpr64
SU(3):   $d1 = COPY %187:fpr64

********** MI Scheduling **********
main:%bb.73 for.body198
  From: %177:gpr64 = LDRSWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %177:gpr64 = LDRSWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(1): Data Latency=4 Reg=%177
  Single Issue       : false;
SU(1):   %178:gpr64 = UBFMXri %177:gpr64, 61, 60
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(0): Data Latency=4 Reg=%177
  Successors:
    SU(3): Data Latency=1 Reg=%178
    SU(2): Data Latency=1 Reg=%178
  Single Issue       : false;
SU(2):   %180:gpr64 = LDRXroX %179:gpr64sp, %178:gpr64, 0, 0 :: (load 8 from %ir.arrayidx200)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(1): Data Latency=1 Reg=%178
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %182:fpr64 = LDRDroX %181:gpr64sp, %178:gpr64, 0, 0 :: (load 8 from %ir.arrayidx204)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(1): Data Latency=1 Reg=%178
  Successors:
    SU(5): Data Latency=4 Reg=%182
  Single Issue       : false;
SU(4):   %184:fpr64 = COPY %183:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=0 Reg=%184
  Single Issue       : false;
SU(5):   %185:fpr64 = FMULDrr %182:fpr64, %184:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%182
    SU(4): Data Latency=0 Reg=%184
  Successors:
    SU(7): Data Latency=1 Reg=%185
  Single Issue       : false;
SU(6):   %186:fpr64 = LDRDui %393:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(7): Data Latency=4 Reg=%186
  Single Issue       : false;
SU(7):   %187:fpr64 = FDIVDrr %185:fpr64, %186:fpr64
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%185
    SU(6): Data Latency=4 Reg=%186
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) %187:fpr64 = FDIVDrr %185:fpr64, %186:fpr64
  Ready @0c
  BotQ.A TopLatency SU(7) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 6 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %185:fpr64 = FMULDrr %182:fpr64, %184:fpr64
  Ready @1c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 6 3 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %184:fpr64 = COPY %183:gpr64
  Ready @2c
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 3 6 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %180:gpr64 = LDRXroX %179:gpr64sp, %178:gpr64, 0, 0 :: (load 8 from %ir.arrayidx200)
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %186:fpr64 = LDRDui %393:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
  Ready @4c
  BotQ.A BotLatency SU(6) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %182:fpr64 = LDRDroX %181:gpr64sp, %178:gpr64, 0, 0 :: (load 8 from %ir.arrayidx204)
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %178:gpr64 = UBFMXri %177:gpr64, 61, 60
  Ready @6c
  BotQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %177:gpr64 = LDRSWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @10c
  BotQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 7
  Executed: 11c
  Critical: 7c, 7 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.73 ***
SU(0):   %177:gpr64 = LDRSWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   %178:gpr64 = UBFMXri %177:gpr64, 61, 60
SU(3):   %182:fpr64 = LDRDroX %181:gpr64sp, %178:gpr64, 0, 0 :: (load 8 from %ir.arrayidx204)
SU(6):   %186:fpr64 = LDRDui %393:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
SU(2):   %180:gpr64 = LDRXroX %179:gpr64sp, %178:gpr64, 0, 0 :: (load 8 from %ir.arrayidx200)
SU(4):   %184:fpr64 = COPY %183:gpr64
SU(5):   %185:fpr64 = FMULDrr %182:fpr64, %184:fpr64
SU(7):   %187:fpr64 = FDIVDrr %185:fpr64, %186:fpr64

********** MI Scheduling **********
main:%bb.74 if.then210
  From: $x0 = COPY %215:gpr64
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %215:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $x1 = COPY %216:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %209:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $d1 = COPY %214:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $d1 = COPY %214:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(2) $d0 = COPY %209:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(1) $x1 = COPY %216:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %215:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.74 ***
SU(0):   $x0 = COPY %215:gpr64
SU(1):   $x1 = COPY %216:gpr64
SU(2):   $d0 = COPY %209:fpr64
SU(3):   $d1 = COPY %214:fpr64

********** MI Scheduling **********
main:%bb.74 if.then210
  From: %207:fpr64 = LDRDui %393:gpr64sp, 3 :: (dereferenceable load 8 from %ir.arrayidx211)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Cluster ld/st SU(0) - SU(1)
  Copy Succ SU(2)
SU(0):   %207:fpr64 = LDRDui %393:gpr64sp, 3 :: (dereferenceable load 8 from %ir.arrayidx211)
  # preds left       : 0
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Data Latency=4 Reg=%207
    SU(1): Ord  Latency=0 Cluster
  Single Issue       : false;
SU(1):   %208:fpr64 = LDRDui %393:gpr64sp, 4 :: (dereferenceable load 8 from %ir.arrayidx212, align 16)
  # preds left       : 0
  # succs left       : 1
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Predecessors:
    SU(0): Ord  Latency=0 Cluster
  Successors:
    SU(2): Data Latency=4 Reg=%208
  Single Issue       : false;
SU(2):   %209:fpr64 = FSUBDrr %207:fpr64, %208:fpr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(1): Data Latency=4 Reg=%208
    SU(0): Data Latency=4 Reg=%207
  Successors:
    SU(5): Data Latency=1 Reg=%209
    SU(3): Data Latency=1 Reg=%209
  Single Issue       : false;
SU(3):   STRDui %209:fpr64, %393:gpr64sp, 11 :: (store 8 into %ir.t2)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%209
  Single Issue       : false;
SU(4):   %211:fpr64 = COPY %183:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=0 Reg=%211
  Single Issue       : false;
SU(5):   %212:fpr64 = FMULDrr %209:fpr64, %211:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=%209
    SU(4): Data Latency=0 Reg=%211
  Successors:
    SU(7): Data Latency=1 Reg=%212
  Single Issue       : false;
SU(6):   %213:fpr64 = LDRDui %393:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(7): Data Latency=4 Reg=%213
  Single Issue       : false;
SU(7):   %214:fpr64 = FDIVDrr %212:fpr64, %213:fpr64
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%212
    SU(6): Data Latency=4 Reg=%213
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 6 
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %214:fpr64 = FDIVDrr %212:fpr64, %213:fpr64
  Ready @0c
  BotQ.A TopLatency SU(7) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 3 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 6 
BotQ.A RemLatency SU(3) 5c
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %212:fpr64 = FMULDrr %209:fpr64, %211:fpr64
  Ready @1c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 3 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 6 
BotQ.A RemLatency SU(3) 5c
  BotQ.A RemainingLatency 5 + 2c > CritPath 6
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(3) STRDui %209:fpr64, %393:gpr64sp, 11 :: (store 8 into %ir.t2)
  Ready @2c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 4 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 6 
BotQ.A RemLatency SU(2) 4c
  BotQ.A RemainingLatency 4 + 3c > CritPath 6
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(2) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) %209:fpr64 = FSUBDrr %207:fpr64, %208:fpr64
  Ready @3c
  BotQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 1 
Queue BotQ.A: 4 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 6 
  BotQ.A RemainingLatency 3 + 4c > CritPath 6
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %213:fpr64 = LDRDui %393:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
  Ready @4c
  BotQ.A BotLatency SU(6) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 1 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %211:fpr64 = COPY %183:gpr64
  Ready @5c
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 7c > CritPath 6
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) WEAK                               
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(1) %208:fpr64 = LDRDui %393:gpr64sp, 4 :: (dereferenceable load 8 from %ir.arrayidx212, align 16)
  Ready @7c
  BotQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %207:fpr64 = LDRDui %393:gpr64sp, 3 :: (dereferenceable load 8 from %ir.arrayidx211)
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.74 ***
SU(0):   %207:fpr64 = LDRDui %393:gpr64sp, 3 :: (dereferenceable load 8 from %ir.arrayidx211)
SU(1):   %208:fpr64 = LDRDui %393:gpr64sp, 4 :: (dereferenceable load 8 from %ir.arrayidx212, align 16)
SU(4):   %211:fpr64 = COPY %183:gpr64
SU(6):   %213:fpr64 = LDRDui %393:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
SU(2):   %209:fpr64 = FSUBDrr %207:fpr64, %208:fpr64
SU(3):   STRDui %209:fpr64, %393:gpr64sp, 11 :: (store 8 into %ir.t2)
SU(5):   %212:fpr64 = FMULDrr %209:fpr64, %211:fpr64
SU(7):   %214:fpr64 = FDIVDrr %212:fpr64, %213:fpr64

********** MI Scheduling **********
main:%bb.75 if.else217
  From: %192:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 1, %bb.77, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %192:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%192
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %192:gpr32common, 7, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%192
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.77, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %192:gpr32common, 7, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %192:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.75 ***
SU(0):   %192:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %192:gpr32common, 7, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.76 if.then220
  From: $x0 = COPY %215:gpr64
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %215:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $x1 = COPY %205:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %198:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $d1 = COPY %203:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $d1 = COPY %203:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(2) $d0 = COPY %198:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(1) $x1 = COPY %205:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %215:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.76 ***
SU(0):   $x0 = COPY %215:gpr64
SU(1):   $x1 = COPY %205:gpr64
SU(2):   $d0 = COPY %198:fpr64
SU(3):   $d1 = COPY %203:fpr64

********** MI Scheduling **********
main:%bb.76 if.then220
  From: %194:fpr64 = LDRDui %393:gpr64sp, 5 :: (dereferenceable load 8 from %ir.arrayidx221)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 10
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Cluster ld/st SU(0) - SU(1)
  Copy Succ SU(2)
SU(0):   %194:fpr64 = LDRDui %393:gpr64sp, 5 :: (dereferenceable load 8 from %ir.arrayidx221)
  # preds left       : 0
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(2): Data Latency=4 Reg=%194
    SU(1): Ord  Latency=0 Cluster
  Single Issue       : false;
SU(1):   %195:fpr64 = LDRDui %393:gpr64sp, 6 :: (dereferenceable load 8 from %ir.arrayidx222, align 16)
  # preds left       : 0
  # succs left       : 1
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Predecessors:
    SU(0): Ord  Latency=0 Cluster
  Successors:
    SU(2): Data Latency=4 Reg=%195
  Single Issue       : false;
SU(2):   %196:fpr64 = FSUBDrr %194:fpr64, %195:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=%195
    SU(0): Data Latency=4 Reg=%194
  Successors:
    SU(4): Data Latency=1 Reg=%196
  Single Issue       : false;
SU(3):   %197:fpr64 = LDRDui %393:gpr64sp, 7 :: (dereferenceable load 8 from %ir.arrayidx224)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(4): Data Latency=4 Reg=%197
  Single Issue       : false;
SU(4):   %198:fpr64 = FSUBDrr %196:fpr64, %197:fpr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(2): Data Latency=1 Reg=%196
    SU(3): Data Latency=4 Reg=%197
  Successors:
    SU(7): Data Latency=1 Reg=%198
    SU(5): Data Latency=1 Reg=%198
  Single Issue       : false;
SU(5):   STRDui %198:fpr64, %393:gpr64sp, 11 :: (store 8 into %ir.t2)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%198
  Single Issue       : false;
SU(6):   %200:fpr64 = COPY %183:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=0 Reg=%200
  Single Issue       : false;
SU(7):   %201:fpr64 = FMULDrr %198:fpr64, %200:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%198
    SU(6): Data Latency=0 Reg=%200
  Successors:
    SU(9): Data Latency=1 Reg=%201
  Single Issue       : false;
SU(8):   %202:fpr64 = LDRDui %393:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(9): Data Latency=4 Reg=%202
  Single Issue       : false;
SU(9):   %203:fpr64 = FDIVDrr %201:fpr64, %202:fpr64
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=%201
    SU(8): Data Latency=4 Reg=%202
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 8 
Picking from Bot:
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %203:fpr64 = FDIVDrr %201:fpr64, %202:fpr64
  Ready @0c
  BotQ.A TopLatency SU(9) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 8 
Queue BotQ.A: 5 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 8 
BotQ.A RemLatency SU(5) 6c
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %201:fpr64 = FMULDrr %198:fpr64, %200:fpr64
  Ready @1c
  BotQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 8 
Queue BotQ.A: 5 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 8 
BotQ.A RemLatency SU(5) 6c
  BotQ.A RemainingLatency 6 + 2c > CritPath 7
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) STRDui %198:fpr64, %393:gpr64sp, 11 :: (store 8 into %ir.t2)
  Ready @2c
  BotQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 8 
Queue BotQ.A: 6 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 8 
BotQ.A RemLatency SU(4) 5c
  BotQ.A RemainingLatency 5 + 3c > CritPath 7
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(4) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) %198:fpr64 = FSUBDrr %196:fpr64, %197:fpr64
  Ready @3c
  BotQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 6 2 8 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 8 
BotQ.A RemLatency SU(2) 4c
  BotQ.A RemainingLatency 4 + 4c > CritPath 7
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(2) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) %196:fpr64 = FSUBDrr %194:fpr64, %195:fpr64
  Ready @4c
  BotQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 1 0 
Queue BotQ.A: 6 8 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 8 
  BotQ.A RemainingLatency 3 + 5c > CritPath 7
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %202:fpr64 = LDRDui %393:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
  Ready @5c
  BotQ.A BotLatency SU(8) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 1 0 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %200:fpr64 = COPY %183:gpr64
  Ready @6c
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 0 1 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %197:fpr64 = LDRDui %393:gpr64sp, 7 :: (dereferenceable load 8 from %ir.arrayidx224)
  Ready @7c
  BotQ.A BotLatency SU(3) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 8c > CritPath 7
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) WEAK                               
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(1) %195:fpr64 = LDRDui %393:gpr64sp, 6 :: (dereferenceable load 8 from %ir.arrayidx222, align 16)
  Ready @8c
  BotQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 8
  Executed: 9c
  Critical: 8c, 8 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %194:fpr64 = LDRDui %393:gpr64sp, 5 :: (dereferenceable load 8 from %ir.arrayidx221)
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 9
  Executed: 10c
  Critical: 9c, 9 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.76 ***
SU(0):   %194:fpr64 = LDRDui %393:gpr64sp, 5 :: (dereferenceable load 8 from %ir.arrayidx221)
SU(1):   %195:fpr64 = LDRDui %393:gpr64sp, 6 :: (dereferenceable load 8 from %ir.arrayidx222, align 16)
SU(3):   %197:fpr64 = LDRDui %393:gpr64sp, 7 :: (dereferenceable load 8 from %ir.arrayidx224)
SU(6):   %200:fpr64 = COPY %183:gpr64
SU(8):   %202:fpr64 = LDRDui %393:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
SU(2):   %196:fpr64 = FSUBDrr %194:fpr64, %195:fpr64
SU(4):   %198:fpr64 = FSUBDrr %196:fpr64, %197:fpr64
SU(5):   STRDui %198:fpr64, %393:gpr64sp, 11 :: (store 8 into %ir.t2)
SU(7):   %201:fpr64 = FMULDrr %198:fpr64, %200:fpr64
SU(9):   %203:fpr64 = FDIVDrr %201:fpr64, %202:fpr64

********** MI Scheduling **********
main:%bb.77 for.inc231
  From: %218:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: B %bb.72
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %218:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%218
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %219:gpr32common = nsw ADDWri %218:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%218
  Successors:
    SU(2): Data Latency=1 Reg=%219
  Single Issue       : false;
SU(2):   STRWui %219:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%219
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.72
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %219:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %219:gpr32common = nsw ADDWri %218:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %218:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.77 ***
SU(0):   %218:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   %219:gpr32common = nsw ADDWri %218:gpr32common, 1, 0
SU(2):   STRWui %219:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)

********** INTERVALS **********
WSP [176r,176d:179)[256r,256d:178)[272r,272d:177)[784r,784d:176)[800r,800d:175)[808r,808d:174)[896r,896d:173)[944r,944d:172)[960r,960d:171)[976r,976d:170)[1056r,1056d:169)[1072r,1072d:168)[1232r,1232d:164)[1280r,1280d:163)[1296r,1296d:162)[1328r,1328d:161)[1424r,1424d:160)[1440r,1440d:159)[1520r,1520d:158)[1552r,1552d:157)[1568r,1568d:156)[1680r,1680d:155)[1776r,1776d:154)[1792r,1792d:153)[1872r,1872d:152)[1904r,1904d:151)[1920r,1920d:150)[2032r,2032d:149)[2128r,2128d:148)[2144r,2144d:147)[2224r,2224d:146)[2256r,2256d:145)[2272r,2272d:144)[2384r,2384d:143)[2480r,2480d:142)[2496r,2496d:141)[2608r,2608d:140)[2624r,2624d:139)[2640r,2640d:138)[2688r,2688d:167)[2736r,2736d:166)[2752r,2752d:165)[2944r,2944d:137)[3024r,3024d:136)[3040r,3040d:135)[3184r,3184d:134)[3264r,3264d:133)[3280r,3280d:132)[3312r,3312d:131)[3376r,3376d:130)[3392r,3392d:129)[3440r,3440d:128)[3520r,3520d:127)[3536r,3536d:126)[3568r,3568d:125)[3632r,3632d:124)[3648r,3648d:123)[3680r,3680d:122)[3744r,3744d:121)[3760r,3760d:120)[3776r,3776d:119)[3792r,3792d:118)[3808r,3808d:117)[3968r,3968d:2)[4000r,4000d:1)[4016r,4016d:0)[4176r,4176d:116)[4224r,4224d:115)[4240r,4240d:114)[4272r,4272d:113)[4288r,4288d:112)[4304r,4304d:111)[4352r,4352d:110)[4448r,4448d:109)[4464r,4464d:108)[4544r,4544d:107)[4640r,4640d:106)[4656r,4656d:105)[4672r,4672d:104)[4688r,4688d:103)[4704r,4704d:102)[4720r,4720d:101)[4736r,4736d:100)[4752r,4752d:99)[4768r,4768d:98)[4784r,4784d:97)[4800r,4800d:96)[4816r,4816d:95)[4832r,4832d:94)[4848r,4848d:93)[4912r,4912d:92)[4928r,4928d:91)[4944r,4944d:90)[4960r,4960d:89)[4976r,4976d:88)[4992r,4992d:87)[5008r,5008d:86)[5088r,5088d:85)[5104r,5104d:84)[5184r,5184d:83)[5232r,5232d:82)[5248r,5248d:81)[5280r,5280d:80)[5328r,5328d:79)[5344r,5344d:78)[5936r,5936d:50)[6000r,6000d:49)[6016r,6016d:48)[6288r,6288d:5)[6320r,6320d:4)[6336r,6336d:3)[6448r,6448d:47)[6480r,6480d:46)[6496r,6496d:45)[6544r,6544d:44)[6576r,6576d:43)[6592r,6592d:42)[6672r,6672d:41)[6704r,6704d:40)[6720r,6720d:39)[6752r,6752d:38)[6800r,6800d:37)[6816r,6816d:36)[7072r,7072d:8)[7120r,7120d:7)[7136r,7136d:6)[8400r,8400d:35)[8448r,8448d:34)[8464r,8464d:33)[8544r,8544d:32)[8576r,8576d:31)[8592r,8592d:30)[9072r,9072d:11)[9136r,9136d:10)[9152r,9152d:9)[9376r,9376d:29)[9440r,9440d:28)[9456r,9456d:27)[9488r,9488d:26)[9520r,9520d:25)[9536r,9536d:24)[9616r,9616d:23)[9648r,9648d:22)[9664r,9664d:21)[9712r,9712d:20)[9776r,9776d:19)[9792r,9792d:18)[9872r,9872d:17)[9904r,9904d:16)[9920r,9920d:15)[10320r,10320d:14)[10368r,10368d:13)[10384r,10384d:12)[10688r,10688d:77)[10736r,10736d:76)[10752r,10752d:75)[10768r,10768d:74)[10800r,10800d:73)[10816r,10816d:72)[10864r,10864d:71)[10944r,10944d:70)[10960r,10960d:69)[11248r,11248d:68)[11792r,11792d:67)[11800r,11800d:66)[12016r,12016d:53)[12048r,12048d:52)[12064r,12064d:51)[12336r,12336d:65)[12384r,12384d:64)[12400r,12400d:63)[12792r,12792d:62)[12864r,12864d:61)[12880r,12880d:60)[13112r,13112d:56)[13184r,13184d:55)[13200r,13200d:54)[13496r,13496d:59)[13568r,13568d:58)[13584r,13584d:57)  0@4016r 1@4000r 2@3968r 3@6336r 4@6320r 5@6288r 6@7136r 7@7120r 8@7072r 9@9152r 10@9136r 11@9072r 12@10384r 13@10368r 14@10320r 15@9920r 16@9904r 17@9872r 18@9792r 19@9776r 20@9712r 21@9664r 22@9648r 23@9616r 24@9536r 25@9520r 26@9488r 27@9456r 28@9440r 29@9376r 30@8592r 31@8576r 32@8544r 33@8464r 34@8448r 35@8400r 36@6816r 37@6800r 38@6752r 39@6720r 40@6704r 41@6672r 42@6592r 43@6576r 44@6544r 45@6496r 46@6480r 47@6448r 48@6016r 49@6000r 50@5936r 51@12064r 52@12048r 53@12016r 54@13200r 55@13184r 56@13112r 57@13584r 58@13568r 59@13496r 60@12880r 61@12864r 62@12792r 63@12400r 64@12384r 65@12336r 66@11800r 67@11792r 68@11248r 69@10960r 70@10944r 71@10864r 72@10816r 73@10800r 74@10768r 75@10752r 76@10736r 77@10688r 78@5344r 79@5328r 80@5280r 81@5248r 82@5232r 83@5184r 84@5104r 85@5088r 86@5008r 87@4992r 88@4976r 89@4960r 90@4944r 91@4928r 92@4912r 93@4848r 94@4832r 95@4816r 96@4800r 97@4784r 98@4768r 99@4752r 100@4736r 101@4720r 102@4704r 103@4688r 104@4672r 105@4656r 106@4640r 107@4544r 108@4464r 109@4448r 110@4352r 111@4304r 112@4288r 113@4272r 114@4240r 115@4224r 116@4176r 117@3808r 118@3792r 119@3776r 120@3760r 121@3744r 122@3680r 123@3648r 124@3632r 125@3568r 126@3536r 127@3520r 128@3440r 129@3392r 130@3376r 131@3312r 132@3280r 133@3264r 134@3184r 135@3040r 136@3024r 137@2944r 138@2640r 139@2624r 140@2608r 141@2496r 142@2480r 143@2384r 144@2272r 145@2256r 146@2224r 147@2144r 148@2128r 149@2032r 150@1920r 151@1904r 152@1872r 153@1792r 154@1776r 155@1680r 156@1568r 157@1552r 158@1520r 159@1440r 160@1424r 161@1328r 162@1296r 163@1280r 164@1232r 165@2752r 166@2736r 167@2688r 168@1072r 169@1056r 170@976r 171@960r 172@944r 173@896r 174@808r 175@800r 176@784r 177@272r 178@256r 179@176r
W0 [0B,12r:0)[224r,256r:75)[256r,288r:74)[792r,800r:73)[800r,800d:37)[928r,944r:72)[944r,944d:36)[1024r,1056r:71)[1056r,1088r:70)[1264r,1280r:68)[1280r,1280d:34)[1376r,1424r:67)[1424r,1456r:33)[1536r,1552r:66)[1552r,1584r:32)[1728r,1776r:65)[1776r,1808r:31)[1888r,1904r:64)[1904r,1936r:30)[2080r,2128r:63)[2128r,2160r:29)[2240r,2256r:62)[2256r,2288r:28)[2432r,2480r:61)[2480r,2512r:27)[2616r,2624r:60)[2624r,2624d:26)[2720r,2736r:69)[2736r,2736d:35)[3256r,3264r:59)[3264r,3264d:25)[3344r,3376r:58)[3376r,3376d:24)[3472r,3520r:57)[3520r,3520d:23)[3600r,3632r:56)[3632r,3632d:22)[3712r,3744r:55)[3744r,3744d:21)[3984r,4000r:1)[4208r,4224r:20)[4436r,4448r:54)[4628r,4640r:53)[5056r,5088r:52)[5216r,5232r:19)[5312r,5328r:18)[5988r,6000r:45)[6304r,6320r:2)[6464r,6480r:9)[6560r,6576r:8)[6688r,6704r:7)[6768r,6800r:44)[7080r,7120r:38)[8416r,8448r:43)[8560r,8576r:6)[9124r,9136r:39)[9392r,9440r:42)[9504r,9520r:5)[9632r,9648r:4)[9728r,9776r:41)[9888r,9904r:3)[10336r,10368r:40)[10720r,10736r:17)[10784r,10800r:16)[10912r,10944r:51)[11736r,11792r:50)[12032r,12048r:10)[12368r,12384r:49)[12384r,12384d:15)[12800r,12864r:48)[12864r,12864d:13)[13120r,13184r:46)[13184r,13184d:11)[13504r,13568r:47)[13568r,13568d:12)[13712r,13728r:14)  0@0B-phi 1@3984r 2@6304r 3@9888r 4@9632r 5@9504r 6@8560r 7@6688r 8@6560r 9@6464r 10@12032r 11@13184r 12@13568r 13@12864r 14@13712r 15@12384r 16@10784r 17@10720r 18@5312r 19@5216r 20@4208r 21@3744r 22@3632r 23@3520r 24@3376r 25@3264r 26@2624r 27@2480r 28@2256r 29@2128r 30@1904r 31@1776r 32@1552r 33@1424r 34@1280r 35@2736r 36@944r 37@800r 38@7080r 39@9124r 40@10336r 41@9728r 42@9392r 43@8416r 44@6768r 45@5988r 46@13120r 47@13504r 48@12800r 49@12368r 50@11736r 51@10912r 52@5056r 53@4628r 54@4436r 55@3712r 56@3600r 57@3472r 58@3344r 59@3256r 60@2616r 61@2432r 62@2240r 63@2080r 64@1888r 65@1728r 66@1536r 67@1376r 68@1264r 69@2720r 70@1056r 71@1024r 72@928r 73@792r 74@256r 75@224r
W1 [0B,8r:0)[240r,256r:26)[1040r,1056r:25)[1392r,1424r:24)[1744r,1776r:23)[2096r,2128r:22)[2448r,2480r:21)[3248r,3264r:11)[3360r,3376r:10)[3488r,3520r:9)[3616r,3632r:8)[4440r,4448r:7)[4632r,4640r:6)[5072r,5088r:5)[5992r,6000r:3)[6784r,6800r:16)[7088r,7120r:12)[8432r,8448r:15)[9128r,9136r:1)[9408r,9440r:14)[9744r,9776r:13)[10352r,10368r:2)[10928r,10944r:20)[11744r,11792r:4)[12816r,12864r:19)[13136r,13184r:17)[13520r,13568r:18)  0@0B-phi 1@9128r 2@10352r 3@5992r 4@11744r 5@5072r 6@4632r 7@4440r 8@3616r 9@3488r 10@3360r 11@3248r 12@7088r 13@9744r 14@9408r 15@8432r 16@6784r 17@13136r 18@13520r 19@12816r 20@10928r 21@2448r 22@2096r 23@1744r 24@1392r 25@1040r 26@240r
W3 [11752r,11792r:0)  0@11752r
W4 [11760r,11792r:0)  0@11760r
W5 [11768r,11792r:0)  0@11768r
%1 [12r,96r:0)  0@12r weight:0.000000e+00
%2 [8r,112r:0)  0@8r weight:0.000000e+00
%5 [192r,224r:0)  0@192r weight:0.000000e+00
%6 [208r,240r:0)  0@208r weight:0.000000e+00
%7 [288r,336r:0)  0@288r weight:0.000000e+00
%11 [384r,584r:0)  0@384r weight:0.000000e+00
%12 [416r,616r:0)  0@416r weight:0.000000e+00
%13 [448r,612r:0)  0@448r weight:0.000000e+00
%14 [480r,648r:0)  0@480r weight:0.000000e+00
%15 [512r,644r:0)  0@512r weight:0.000000e+00
%16 [544r,680r:0)  0@544r weight:0.000000e+00
%17 [576r,676r:0)  0@576r weight:0.000000e+00
%18 [608r,752r:0)  0@608r weight:0.000000e+00
%19 [640r,744r:0)  0@640r weight:0.000000e+00
%20 [672r,776r:0)  0@672r weight:0.000000e+00
%21 [760r,768r:0)  0@760r weight:0.000000e+00
%22 [736r,792r:0)  0@736r weight:0.000000e+00
%24 [912r,928r:0)  0@912r weight:0.000000e+00
%26 [992r,1024r:0)  0@992r weight:0.000000e+00
%27 [1008r,1040r:0)  0@1008r weight:0.000000e+00
%28 [1088r,1184r:0)  0@1088r weight:0.000000e+00
%29 [2704r,2720r:0)  0@2704r weight:0.000000e+00
%32 [2768r,2900r:0)  0@2768r weight:0.000000e+00
%34 [2800r,2904r:0)  0@2800r weight:0.000000e+00
%36 [2832r,2912r:0)  0@2832r weight:0.000000e+00
%38 [2864r,2920r:0)  0@2864r weight:0.000000e+00
%39 [2896r,2928r:0)  0@2896r weight:0.000000e+00
%40 [1248r,1264r:0)  0@1248r weight:0.000000e+00
%42 [1312r,1376r:0)  0@1312r weight:0.000000e+00
%43 [1344r,1392r:0)  0@1344r weight:0.000000e+00
%44 [1360r,1408r:0)  0@1360r weight:0.000000e+00
%45 [1456r,1472r:0)  0@1456r weight:0.000000e+00
%46 [1504r,1536r:0)  0@1504r weight:0.000000e+00
%47 [1584r,1600r:0)  0@1584r weight:0.000000e+00
%49 [1664r,1728r:0)  0@1664r weight:0.000000e+00
%50 [1696r,1744r:0)  0@1696r weight:0.000000e+00
%51 [1712r,1760r:0)  0@1712r weight:0.000000e+00
%52 [1808r,1824r:0)  0@1808r weight:0.000000e+00
%53 [1856r,1888r:0)  0@1856r weight:0.000000e+00
%54 [1936r,1952r:0)  0@1936r weight:0.000000e+00
%56 [2016r,2080r:0)  0@2016r weight:0.000000e+00
%57 [2048r,2096r:0)  0@2048r weight:0.000000e+00
%58 [2064r,2112r:0)  0@2064r weight:0.000000e+00
%59 [2160r,2176r:0)  0@2160r weight:0.000000e+00
%60 [2208r,2240r:0)  0@2208r weight:0.000000e+00
%61 [2288r,2304r:0)  0@2288r weight:0.000000e+00
%63 [2368r,2432r:0)  0@2368r weight:0.000000e+00
%64 [2400r,2448r:0)  0@2400r weight:0.000000e+00
%65 [2416r,2464r:0)  0@2416r weight:0.000000e+00
%66 [2512r,2584r:0)  0@2512r weight:0.000000e+00
%67 [2592r,2600r:0)  0@2592r weight:0.000000e+00
%68 [2576r,2616r:0)  0@2576r weight:0.000000e+00
%70 [2960r,2992r:0)  0@2960r weight:0.000000e+00
%71 [2976r,3008r:0)  0@2976r weight:0.000000e+00
%72 [3056r,3136r:0)  0@3056r weight:0.000000e+00
%73 [3124r,3128r:0)  0@3124r weight:0.000000e+00
%74 [3104r,3120r:0)  0@3104r weight:0.000000e+00
%75 [3120r,3136r:0)  0@3120r weight:0.000000e+00
%76 [3136r,3168r:0)  0@3136r weight:0.000000e+00
%77 [3152r,10672B:0)  0@3152r weight:0.000000e+00
%78 [3200r,3256r:0)  0@3200r weight:0.000000e+00
%82 [3296r,3360r:0)  0@3296r weight:0.000000e+00
%83 [3328r,3344r:0)  0@3328r weight:0.000000e+00
%86 [3408r,3488r:0)  0@3408r weight:0.000000e+00
%87 [3424r,3504r:0)  0@3424r weight:0.000000e+00
%88 [3456r,3472r:0)  0@3456r weight:0.000000e+00
%91 [3552r,3616r:0)  0@3552r weight:0.000000e+00
%92 [3584r,3600r:0)  0@3584r weight:0.000000e+00
%95 [3664r,3728r:0)  0@3664r weight:0.000000e+00
%96 [3696r,3712r:0)  0@3696r weight:0.000000e+00
%98 [3824r,3840r:0)  0@3824r weight:0.000000e+00
%99 [3872r,3888r:0)  0@3872r weight:0.000000e+00
%102 [4112r,4128r:0)  0@4112r weight:0.000000e+00
%104 [4320r,10672B:0)  0@4320r weight:0.000000e+00
%105 [4336r,4440r:0)  0@4336r weight:0.000000e+00
%106 [4368r,10672B:0)  0@4368r weight:0.000000e+00
%108 [4480r,10672B:0)  0@4480r weight:0.000000e+00
%109 [4496r,4512r:0)  0@4496r weight:0.000000e+00
%110 [4512r,4528r:0)  0@4512r weight:0.000000e+00
%111 [4528r,4632r:0)  0@4528r weight:0.000000e+00
%112 [4560r,4628r:0)  0@4560r weight:0.000000e+00
%114 [4864r,10672B:0)  0@4864r weight:0.000000e+00
%119 [5120r,5136r:0)  0@5120r weight:0.000000e+00
%121 [5320r,10672B:0)  0@5320r weight:0.000000e+00
%125 [5744r,5776r:0)  0@5744r weight:0.000000e+00
%127 [5760r,5776r:0)  0@5760r weight:0.000000e+00
%129 [10728r,11872r:0)  0@10728r weight:0.000000e+00
%130 [10832r,10848r:0)  0@10832r weight:0.000000e+00
%133 [11016r,11204r:0)  0@11016r weight:0.000000e+00
%135 [10992r,11096r:0)  0@10992r weight:0.000000e+00
%136 [11008r,11096r:0)  0@11008r weight:0.000000e+00
%137 [11096r,11108r:0)  0@11096r weight:0.000000e+00
%138 [11108r,11112r:0)  0@11108r weight:0.000000e+00
%139 [11112r,11204r:0)  0@11112r weight:0.000000e+00
%140 [11204r,11232r:0)  0@11204r weight:0.000000e+00
%141 [11088r,11712r:0)  0@11088r weight:0.000000e+00
%142 [11104r,11208r:0)  0@11104r weight:0.000000e+00
%143 [11208r,11224r:0)  0@11208r weight:0.000000e+00
%144 [11224r,11232r:0)  0@11224r weight:0.000000e+00
%145 [11232r,11728r:0)  0@11232r weight:0.000000e+00
%146 [11184r,11744r:0)  0@11184r weight:0.000000e+00
%148 [11200r,11768r:0)  0@11200r weight:0.000000e+00
%149 [11216r,11784r:0)  0@11216r weight:0.000000e+00
%150 [11256r,11496r:0)  0@11256r weight:0.000000e+00
%152 [11296r,11528r:0)  0@11296r weight:0.000000e+00
%153 [11328r,11524r:0)  0@11328r weight:0.000000e+00
%154 [11360r,11560r:0)  0@11360r weight:0.000000e+00
%155 [11392r,11556r:0)  0@11392r weight:0.000000e+00
%156 [11424r,11584r:0)  0@11424r weight:0.000000e+00
%157 [11456r,11576r:0)  0@11456r weight:0.000000e+00
%158 [11488r,11656r:0)  0@11488r weight:0.000000e+00
%159 [11520r,11592r:0)  0@11520r weight:0.000000e+00
%160 [11552r,11736r:0)  0@11552r weight:0.000000e+00
%161 [11568r,11776r:0)  0@11568r weight:0.000000e+00
%165 [11808r,11824r:0)  0@11808r weight:0.000000e+00
%167 [11920r,11936r:0)  0@11920r weight:0.000000e+00
%169 [12208r,12224r:0)  0@12208r weight:0.000000e+00
%170 [12288r,12304r:0)  0@12288r weight:0.000000e+00
%171 [12352r,12368r:0)  0@12352r weight:0.000000e+00
%173 [12416r,12536r:0)  0@12416r weight:0.000000e+00
%174 [12576r,12592r:0)  0@12576r weight:0.000000e+00
%177 [12656r,12672r:0)  0@12656r weight:0.000000e+00
%178 [12672r,12760r:0)  0@12672r weight:0.000000e+00
%179 [12448r,13680B:0)  0@12448r weight:0.000000e+00
%180 [12760r,12816r:0)  0@12760r weight:0.000000e+00
%181 [12464r,13680B:0)  0@12464r weight:0.000000e+00
%182 [12704r,12832r:0)  0@12704r weight:0.000000e+00
%183 [12480r,13680B:0)  0@12480r weight:0.000000e+00
%184 [12768r,12776r:0)  0@12768r weight:0.000000e+00
%185 [12776r,12784r:0)  0@12776r weight:0.000000e+00
%186 [12752r,12784r:0)  0@12752r weight:0.000000e+00
%187 [12784r,12848r:0)  0@12784r weight:0.000000e+00
%188 [12496r,13680B:0)  0@12496r weight:0.000000e+00
%190 [12896r,12912r:0)  0@12896r weight:0.000000e+00
%192 [13248r,13264r:0)  0@13248r weight:0.000000e+00
%194 [13328r,13460r:0)  0@13328r weight:0.000000e+00
%195 [13344r,13460r:0)  0@13344r weight:0.000000e+00
%196 [13460r,13464r:0)  0@13460r weight:0.000000e+00
%197 [13376r,13464r:0)  0@13376r weight:0.000000e+00
%198 [13464r,13536r:0)  0@13464r weight:0.000000e+00
%200 [13424r,13480r:0)  0@13424r weight:0.000000e+00
%201 [13480r,13488r:0)  0@13480r weight:0.000000e+00
%202 [13456r,13488r:0)  0@13456r weight:0.000000e+00
%203 [13488r,13552r:0)  0@13488r weight:0.000000e+00
%205 [12544r,13680B:0)  0@12544r weight:0.000000e+00
%207 [12976r,13080r:0)  0@12976r weight:0.000000e+00
%208 [12992r,13080r:0)  0@12992r weight:0.000000e+00
%209 [13080r,13152r:0)  0@13080r weight:0.000000e+00
%211 [13040r,13096r:0)  0@13040r weight:0.000000e+00
%212 [13096r,13104r:0)  0@13096r weight:0.000000e+00
%213 [13072r,13104r:0)  0@13072r weight:0.000000e+00
%214 [13104r,13168r:0)  0@13104r weight:0.000000e+00
%215 [12512r,13680B:0)  0@12512r weight:0.000000e+00
%216 [12528r,13680B:0)  0@12528r weight:0.000000e+00
%218 [13616r,13632r:0)  0@13616r weight:0.000000e+00
%219 [13632r,13648r:0)  0@13632r weight:0.000000e+00
%220 [12000r,12032r:0)  0@12000r weight:0.000000e+00
%221 [12080r,12136r:0)  0@12080r weight:0.000000e+00
%222 [12096r,12136r:0)  0@12096r weight:0.000000e+00
%223 [11888r,12192B:0)  0@11888r weight:0.000000e+00
%224 [12128r,12144r:0)  0@12128r weight:0.000000e+00
%225 [12144r,12160r:0)  0@12144r weight:0.000000e+00
%226 [5840r,5856r:0)  0@5840r weight:0.000000e+00
%229 [5920r,5992r:0)  0@5920r weight:0.000000e+00
%235 [6112r,6128r:0)  0@6112r weight:0.000000e+00
%238 [6528r,6560r:0)  0@6528r weight:0.000000e+00
%240 [6608r,6624r:0)  0@6608r weight:0.000000e+00
%242 [5456r,10672B:0)  0@5456r weight:0.000000e+00
%245 [6880r,6912r:0)  0@6880r weight:0.000000e+00
%247 [6896r,6912r:0)  0@6896r weight:0.000000e+00
%250 [7280r,7312r:0)  0@7280r weight:0.000000e+00
%252 [7296r,7312r:0)  0@7296r weight:0.000000e+00
%254 [5584r,10672B:0)  0@5584r weight:0.000000e+00
%257 [8480r,8496r:0)  0@8480r weight:0.000000e+00
%260 [8672r,8704r:0)  0@8672r weight:0.000000e+00
%262 [8688r,8704r:0)  0@8688r weight:0.000000e+00
%264 [5648r,10672B:0)  0@5648r weight:0.000000e+00
%265 [9360r,9424r:0)  0@9360r weight:0.000000e+00
%267 [5664r,10672B:0)  0@5664r weight:0.000000e+00
%268 [9472r,9504r:0)  0@9472r weight:0.000000e+00
%270 [9552r,9568r:0)  0@9552r weight:0.000000e+00
%273 [9696r,9760r:0)  0@9696r weight:0.000000e+00
%275 [5696r,10672B:0)  0@5696r weight:0.000000e+00
%277 [9808r,9824r:0)  0@9808r weight:0.000000e+00
%280 [9952r,10020r:0)  0@9952r weight:0.000000e+00
%282 [9968r,10020r:0)  0@9968r weight:0.000000e+00
%283 [10020r,10024r:0)  0@10020r weight:0.000000e+00
%284 [10016r,10032r:0)  0@10016r weight:0.000000e+00
%285 [10080r,10144r:0)  0@10080r weight:0.000000e+00
%287 [10096r,10128r:0)  0@10096r weight:0.000000e+00
%288 [10112r,10128r:0)  0@10112r weight:0.000000e+00
%289 [10128r,10144r:0)  0@10128r weight:0.000000e+00
%292 [10208r,10240r:0)  0@10208r weight:0.000000e+00
%294 [10224r,10240r:0)  0@10224r weight:0.000000e+00
%296 [10304r,10352r:0)  0@10304r weight:0.000000e+00
%298 [10612r,10640r:0)  0@10612r weight:0.000000e+00
%301 [10496r,10616r:0)  0@10496r weight:0.000000e+00
%303 [10616r,10632r:0)  0@10616r weight:0.000000e+00
%305 [10632r,10640r:0)  0@10632r weight:0.000000e+00
%306 [10640r,10648r:0)  0@10640r weight:0.000000e+00
%307 [10608r,10624r:0)  0@10608r weight:0.000000e+00
%308 [10624r,10656r:0)  0@10624r weight:0.000000e+00
%310 [8816r,8848r:0)  0@8816r weight:0.000000e+00
%311 [8832r,8936r:0)[9248B,9296r:0)  0@8832r weight:0.000000e+00
%314 [9296r,9312r:0)  0@9296r weight:0.000000e+00
%316 [5600r,10672B:0)  0@5600r weight:0.000000e+00
%318 [5632r,10672B:0)  0@5632r weight:0.000000e+00
%319 [8936r,8944r:0)  0@8936r weight:0.000000e+00
%320 [8928r,8944r:0)  0@8928r weight:0.000000e+00
%321 [8944r,8960r:0)  0@8944r weight:0.000000e+00
%322 [9008r,9064r:0)  0@9008r weight:0.000000e+00
%327 [9064r,9124r:0)  0@9064r weight:0.000000e+00
%328 [9056r,9128r:0)  0@9056r weight:0.000000e+00
%330 [9184r,9200r:0)  0@9184r weight:0.000000e+00
%331 [9200r,9216r:0)  0@9200r weight:0.000000e+00
%333 [7424r,7440r:0)  0@7424r weight:0.000000e+00
%335 [8320r,8336r:0)  0@8320r weight:0.000000e+00
%336 [8336r,8352r:0)  0@8336r weight:0.000000e+00
%338 [7552r,7568r:0)  0@7552r weight:0.000000e+00
%340 [8240r,8256r:0)  0@8240r weight:0.000000e+00
%341 [8256r,8272r:0)  0@8256r weight:0.000000e+00
%343 [7680r,7696r:0)  0@7680r weight:0.000000e+00
%345 [8192r,8200r:0)  0@8192r weight:0.000000e+00
%346 [8200r,8208r:0)  0@8200r weight:0.000000e+00
%347 [7760r,7880r:0)  0@7760r weight:0.000000e+00
%350 [7880r,7984r:0)  0@7880r weight:0.000000e+00
%351 [5536r,10672B:0)  0@5536r weight:0.000000e+00
%352 [7896r,7988r:0)  0@7896r weight:0.000000e+00
%353 [7824r,7888r:0)  0@7824r weight:0.000000e+00
%355 [5552r,10672B:0)  0@5552r weight:0.000000e+00
%356 [7888r,8000r:0)  0@7888r weight:0.000000e+00
%357 [7988r,8112r:0)  0@7988r weight:0.000000e+00
%358 [7872r,8088r:0)  0@7872r weight:0.000000e+00
%359 [8088r,8104r:0)  0@8088r weight:0.000000e+00
%360 [8104r,8120r:0)  0@8104r weight:0.000000e+00
%361 [8112r,8160r:0)  0@8112r weight:0.000000e+00
%362 [7992r,8096r:0)  0@7992r weight:0.000000e+00
%363 [8096r,8160r:0)  0@8096r weight:0.000000e+00
%364 [8128r,8152r:0)  0@8128r weight:0.000000e+00
%366 [7984r,8000r:0)  0@7984r weight:0.000000e+00
%367 [8000r,8120r:0)  0@8000r weight:0.000000e+00
%368 [8120r,8136r:0)  0@8120r weight:0.000000e+00
%369 [8136r,8152r:0)  0@8136r weight:0.000000e+00
%370 [8152r,8160r:0)  0@8152r weight:0.000000e+00
%371 [8080r,8144r:0)  0@8080r weight:0.000000e+00
%372 [8144r,8168r:0)  0@8144r weight:0.000000e+00
%373 [6976r,7048r:0)  0@6976r weight:0.000000e+00
%375 [5472r,10672B:0)  0@5472r weight:0.000000e+00
%376 [7048r,7064r:0)  0@7048r weight:0.000000e+00
%377 [5504r,10672B:0)  0@5504r weight:0.000000e+00
%378 [7056r,7080r:0)  0@7056r weight:0.000000e+00
%380 [7064r,7088r:0)  0@7064r weight:0.000000e+00
%381 [5520r,10672B:0)  0@5520r weight:0.000000e+00
%382 [7040r,7104r:0)  0@7040r weight:0.000000e+00
%383 [7152r,7168r:0)  0@7152r weight:0.000000e+00
%384 [7168r,7184r:0)  0@7168r weight:0.000000e+00
%385 [6192r,6208r:0)  0@6192r weight:0.000000e+00
%387 [6272r,6304r:0)  0@6272r weight:0.000000e+00
%388 [6368r,6384r:0)  0@6368r weight:0.000000e+00
%389 [6384r,6400r:0)  0@6384r weight:0.000000e+00
%390 [3952r,3984r:0)  0@3952r weight:0.000000e+00
%391 [4032r,4048r:0)  0@4032r weight:0.000000e+00
%392 [4048r,4064r:0)  0@4048r weight:0.000000e+00
%393 [16r,13680B:0)  0@16r weight:0.000000e+00
%395 [1120r,10672B:0)  0@1120r weight:0.000000e+00
%396 [1136r,11200r:0)  0@1136r weight:0.000000e+00
%397 [1152r,10992r:0)  0@1152r weight:0.000000e+00
%398 [1168r,3664r:0)  0@1168r weight:0.000000e+00
%399 [320r,11808r:0)  0@320r weight:0.000000e+00
RegMasks: 256r 800r 944r 1056r 1280r 1424r 1552r 1776r 1904r 2128r 2256r 2480r 2624r 2736r 3024r 3264r 3376r 3520r 3632r 3744r 3792r 4000r 4224r 4288r 4448r 4640r 4688r 4736r 4784r 4832r 4928r 4976r 5088r 5232r 5328r 6000r 6320r 6480r 6576r 6704r 6800r 7120r 8448r 8576r 9136r 9440r 9520r 9648r 9776r 9904r 10368r 10736r 10800r 10944r 11792r 12048r 12384r 12864r 13184r 13568r
********** MACHINEINSTRS **********
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
  fi#6: size=4, align=4, at location [SP]
  fi#7: size=4, align=4, at location [SP]
  fi#8: size=4, align=4, at location [SP]
  fi#9: size=8, align=8, at location [SP]
  fi#10: size=8, align=8, at location [SP]
  fi#11: size=8, align=8, at location [SP]
  fi#12: size=1, align=4, at location [SP]
  fi#13: size=4, align=4, at location [SP]
  fi#14: size=4, align=4, at location [SP]
  fi#15: size=8, align=8, at location [SP]
  fi#16: size=88, align=16, at location [SP]
  fi#17: size=88, align=16, at location [SP]
  fi#18: size=8, align=8, at location [SP]
  fi#19: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: 4.000000e-02, align=8
Function Live Ins: $w0 in %1, $x1 in %2

0B	bb.0.entry:
	  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
	  liveins: $w0, $x1
8B	  %2:gpr64 = COPY $x1
12B	  %1:gpr32 = COPY $w0
16B	  %393:gpr64sp = ADDXri %stack.16.trecs, 0, 0
80B	  STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
96B	  STRWui %1:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
112B	  STRXui %2:gpr64, %393:gpr64sp, 20 :: (store 8 into %ir.argv.addr)
144B	  STRXui $xzr, %393:gpr64sp, 14 :: (store 8 into %ir.nelt_tot)
160B	  STRWui $wzr, %stack.13.ifmortar, 0 :: (store 4 into %ir.ifmortar)
176B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
192B	  %5:gpr64 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
208B	  %6:gpr64 = MOVaddr target-flags(aarch64-page) @.str.1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1
224B	  $x0 = COPY %5:gpr64
240B	  $x1 = COPY %6:gpr64
256B	  BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0
272B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
288B	  %7:gpr64 = COPY $x0
304B	  STRXui %7:gpr64, %stack.18.fp, 0 :: (store 8 into %ir.fp)
320B	  %399:gpr64common = ADRP target-flags(aarch64-page) @timeron
336B	  CBZX %7:gpr64, %bb.2
352B	  B %bb.1

368B	bb.1.if.then:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

384B	  %11:gpr32 = MOVi32imm 1
416B	  %12:gpr64 = MOVaddr target-flags(aarch64-page) @.str.2, target-flags(aarch64-pageoff, aarch64-nc) @.str.2
448B	  %13:gpr64 = MOVaddr target-flags(aarch64-page) @.str.3, target-flags(aarch64-pageoff, aarch64-nc) @.str.3
480B	  %14:gpr64 = MOVaddr target-flags(aarch64-page) @.str.4, target-flags(aarch64-pageoff, aarch64-nc) @.str.4
512B	  %15:gpr64 = MOVaddr target-flags(aarch64-page) @.str.5, target-flags(aarch64-pageoff, aarch64-nc) @.str.5
544B	  %16:gpr64 = MOVaddr target-flags(aarch64-page) @.str.6, target-flags(aarch64-pageoff, aarch64-nc) @.str.6
576B	  %17:gpr64 = MOVaddr target-flags(aarch64-page) @.str.7, target-flags(aarch64-pageoff, aarch64-nc) @.str.7
584B	  STRWui %11:gpr32, %399:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
608B	  %18:gpr64 = MOVaddr target-flags(aarch64-page) @.str.8, target-flags(aarch64-pageoff, aarch64-nc) @.str.8
612B	  STRXui %13:gpr64, %stack.17.t_names, 2 :: (store 8 into %ir.arrayidx1, align 16)
616B	  STRXui %12:gpr64, %stack.17.t_names, 1 :: (store 8 into %ir.arrayidx)
640B	  %19:gpr64 = MOVaddr target-flags(aarch64-page) @.str.9, target-flags(aarch64-pageoff, aarch64-nc) @.str.9
644B	  STRXui %15:gpr64, %stack.17.t_names, 4 :: (store 8 into %ir.arrayidx3, align 16)
648B	  STRXui %14:gpr64, %stack.17.t_names, 3 :: (store 8 into %ir.arrayidx2)
672B	  %20:gpr64 = MOVaddr target-flags(aarch64-page) @.str.10, target-flags(aarch64-pageoff, aarch64-nc) @.str.10
676B	  STRXui %17:gpr64, %stack.17.t_names, 6 :: (store 8 into %ir.arrayidx5, align 16)
680B	  STRXui %16:gpr64, %stack.17.t_names, 5 :: (store 8 into %ir.arrayidx4)
736B	  %22:gpr64 = LDRXui %stack.18.fp, 0 :: (dereferenceable load 8 from %ir.fp)
744B	  STRXui %19:gpr64, %stack.17.t_names, 8 :: (store 8 into %ir.arrayidx7, align 16)
752B	  STRXui %18:gpr64, %stack.17.t_names, 7 :: (store 8 into %ir.arrayidx6)
760B	  %21:gpr64 = MOVaddr target-flags(aarch64-page) @.str.11, target-flags(aarch64-pageoff, aarch64-nc) @.str.11
768B	  STRXui %21:gpr64, %stack.17.t_names, 10 :: (store 8 into %ir.arrayidx9, align 16)
776B	  STRXui %20:gpr64, %stack.17.t_names, 9 :: (store 8 into %ir.arrayidx8)
784B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
792B	  $x0 = COPY %22:gpr64
800B	  BL @fclose, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
808B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
816B	  B %bb.3

832B	bb.2.if.else:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

864B	  STRWui $wzr, %399:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)

880B	bb.3.if.end:
	; predecessors: %bb.2, %bb.1
	  successors: %bb.4(0x50000000), %bb.11(0x30000000); %bb.4(62.50%), %bb.11(37.50%)

896B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
912B	  %24:gpr64 = MOVaddr target-flags(aarch64-page) @.str.12, target-flags(aarch64-pageoff, aarch64-nc) @.str.12
928B	  $x0 = COPY %24:gpr64
944B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
960B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
976B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
992B	  %26:gpr64 = MOVaddr target-flags(aarch64-page) @.str.13, target-flags(aarch64-pageoff, aarch64-nc) @.str.13
1008B	  %27:gpr64 = MOVaddr target-flags(aarch64-page) @.str.1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1
1024B	  $x0 = COPY %26:gpr64
1040B	  $x1 = COPY %27:gpr64
1056B	  BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0
1072B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
1088B	  %28:gpr64 = COPY $x0
1104B	  STRXui %28:gpr64, %stack.18.fp, 0 :: (store 8 into %ir.fp)
1120B	  %395:gpr64common = ADRP target-flags(aarch64-page) @fre
1136B	  %396:gpr64common = ADRP target-flags(aarch64-page) @niter
1152B	  %397:gpr64common = ADRP target-flags(aarch64-page) @nmxh
1168B	  %398:gpr64common = ADRP target-flags(aarch64-page) @alpha
1184B	  CBZX %28:gpr64, %bb.11
1200B	  B %bb.4

1216B	bb.4.if.then14:
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

1232B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
1248B	  %40:gpr64 = MOVaddr target-flags(aarch64-page) @.str.14, target-flags(aarch64-pageoff, aarch64-nc) @.str.14
1264B	  $x0 = COPY %40:gpr64
1280B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
1296B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
1312B	  %42:gpr64 = LDRXui %stack.18.fp, 0 :: (dereferenceable load 8 from %ir.fp)
1328B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
1344B	  %43:gpr64 = MOVaddr target-flags(aarch64-page) @.str.15, target-flags(aarch64-pageoff, aarch64-nc) @.str.15
1360B	  %44:gpr64 = MOVaddr target-flags(aarch64-page) @fre, target-flags(aarch64-pageoff, aarch64-nc) @fre
1376B	  $x0 = COPY %42:gpr64
1392B	  $x1 = COPY %43:gpr64
1408B	  $x2 = COPY %44:gpr64
1424B	  BL @fscanf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w0
1440B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
1456B	  %45:gpr32 = COPY $w0
1472B	  STRWui %45:gpr32, %stack.19.result, 0 :: (store 4 into %ir.result)

1488B	bb.5.while.cond:
	; predecessors: %bb.4, %bb.5
	  successors: %bb.5(0x7c000000), %bb.6(0x04000000); %bb.5(96.88%), %bb.6(3.12%)

1504B	  %46:gpr64 = LDRXui %stack.18.fp, 0 :: (dereferenceable load 8 from %ir.fp)
1520B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
1536B	  $x0 = COPY %46:gpr64
1552B	  BL @fgetc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w0
1568B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
1584B	  %47:gpr32sp = COPY $w0
1600B	  dead $wzr = SUBSWri %47:gpr32sp, 10, 0, implicit-def $nzcv
1616B	  Bcc 1, %bb.5, implicit killed $nzcv
1632B	  B %bb.6

1648B	bb.6.while.end:
	; predecessors: %bb.5
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

1664B	  %49:gpr64 = LDRXui %stack.18.fp, 0 :: (dereferenceable load 8 from %ir.fp)
1680B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
1696B	  %50:gpr64 = MOVaddr target-flags(aarch64-page) @.str.15, target-flags(aarch64-pageoff, aarch64-nc) @.str.15
1712B	  %51:gpr64 = MOVaddr target-flags(aarch64-page) @niter, target-flags(aarch64-pageoff, aarch64-nc) @niter
1728B	  $x0 = COPY %49:gpr64
1744B	  $x1 = COPY %50:gpr64
1760B	  $x2 = COPY %51:gpr64
1776B	  BL @fscanf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w0
1792B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
1808B	  %52:gpr32 = COPY $w0
1824B	  STRWui %52:gpr32, %stack.19.result, 0 :: (store 4 into %ir.result)

1840B	bb.7.while.cond20:
	; predecessors: %bb.6, %bb.7
	  successors: %bb.7(0x7c000000), %bb.8(0x04000000); %bb.7(96.88%), %bb.8(3.12%)

1856B	  %53:gpr64 = LDRXui %stack.18.fp, 0 :: (dereferenceable load 8 from %ir.fp)
1872B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
1888B	  $x0 = COPY %53:gpr64
1904B	  BL @fgetc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w0
1920B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
1936B	  %54:gpr32sp = COPY $w0
1952B	  dead $wzr = SUBSWri %54:gpr32sp, 10, 0, implicit-def $nzcv
1968B	  Bcc 1, %bb.7, implicit killed $nzcv
1984B	  B %bb.8

2000B	bb.8.while.end24:
	; predecessors: %bb.7
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

2016B	  %56:gpr64 = LDRXui %stack.18.fp, 0 :: (dereferenceable load 8 from %ir.fp)
2032B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
2048B	  %57:gpr64 = MOVaddr target-flags(aarch64-page) @.str.15, target-flags(aarch64-pageoff, aarch64-nc) @.str.15
2064B	  %58:gpr64 = MOVaddr target-flags(aarch64-page) @nmxh, target-flags(aarch64-pageoff, aarch64-nc) @nmxh
2080B	  $x0 = COPY %56:gpr64
2096B	  $x1 = COPY %57:gpr64
2112B	  $x2 = COPY %58:gpr64
2128B	  BL @fscanf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w0
2144B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
2160B	  %59:gpr32 = COPY $w0
2176B	  STRWui %59:gpr32, %stack.19.result, 0 :: (store 4 into %ir.result)

2192B	bb.9.while.cond26:
	; predecessors: %bb.8, %bb.9
	  successors: %bb.9(0x7c000000), %bb.10(0x04000000); %bb.9(96.88%), %bb.10(3.12%)

2208B	  %60:gpr64 = LDRXui %stack.18.fp, 0 :: (dereferenceable load 8 from %ir.fp)
2224B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
2240B	  $x0 = COPY %60:gpr64
2256B	  BL @fgetc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w0
2272B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
2288B	  %61:gpr32sp = COPY $w0
2304B	  dead $wzr = SUBSWri %61:gpr32sp, 10, 0, implicit-def $nzcv
2320B	  Bcc 1, %bb.9, implicit killed $nzcv
2336B	  B %bb.10

2352B	bb.10.while.end30:
	; predecessors: %bb.9
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

2368B	  %63:gpr64 = LDRXui %stack.18.fp, 0 :: (dereferenceable load 8 from %ir.fp)
2384B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
2400B	  %64:gpr64 = MOVaddr target-flags(aarch64-page) @.str.16, target-flags(aarch64-pageoff, aarch64-nc) @.str.16
2416B	  %65:gpr64 = MOVaddr target-flags(aarch64-page) @alpha, target-flags(aarch64-pageoff, aarch64-nc) @alpha
2432B	  $x0 = COPY %63:gpr64
2448B	  $x1 = COPY %64:gpr64
2464B	  $x2 = COPY %65:gpr64
2480B	  BL @fscanf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w0
2496B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
2512B	  %66:gpr32 = COPY $w0
2576B	  %68:gpr64 = LDRXui %stack.18.fp, 0 :: (dereferenceable load 8 from %ir.fp)
2584B	  STRWui %66:gpr32, %stack.19.result, 0 :: (store 4 into %ir.result)
2592B	  %67:gpr32 = MOVi32imm 85
2600B	  STRBBui %67:gpr32, %stack.12.Class, 0 :: (store 1 into %ir.Class, align 4)
2608B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
2616B	  $x0 = COPY %68:gpr64
2624B	  BL @fclose, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
2640B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
2656B	  B %bb.12

2672B	bb.11.if.else33:
	; predecessors: %bb.3
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

2688B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
2704B	  %29:gpr64 = MOVaddr target-flags(aarch64-page) @.str.17, target-flags(aarch64-pageoff, aarch64-nc) @.str.17
2720B	  $x0 = COPY %29:gpr64
2736B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
2752B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
2768B	  %32:gpr32 = MOVi32imm 5
2800B	  %34:gpr32 = MOVi32imm 200
2832B	  %36:gpr32 = MOVi32imm 10
2864B	  %38:gpr64 = MOVi64imm 4590140797810047451
2896B	  %39:gpr32 = MOVi32imm 66
2900B	  STRWui %32:gpr32, %395:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (store 4 into @fre)
2904B	  STRWui %34:gpr32, %396:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (store 4 into @niter)
2912B	  STRWui %36:gpr32, %397:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (store 4 into @nmxh)
2920B	  STRXui %38:gpr64, %398:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @alpha :: (store 8 into @alpha)
2928B	  STRBBui %39:gpr32, %stack.12.Class, 0 :: (store 1 into %ir.Class, align 4)

2936B	bb.12.if.end35:
	; predecessors: %bb.11, %bb.10
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

2944B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
2960B	  %70:fpr64 = FMOVDi 96
2976B	  %71:fpr64 = FMOVDi 28
2992B	  $d0 = COPY %70:fpr64
3008B	  $d1 = COPY %71:fpr64
3024B	  BL @pow, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def $d0
3040B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
3056B	  %72:fpr64 = COPY killed $d0
3104B	  %74:gpr64common = ADRP target-flags(aarch64-page) %const.0
3120B	  %75:fpr64 = LDRDui %74:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
3124B	  %73:gpr64common = ADRP target-flags(aarch64-page) @dlmin
3128B	  STRDui %72:fpr64, %73:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @dlmin :: (store 8 into @dlmin)
3136B	  %76:fpr64 = FMULDrr %72:fpr64, %75:fpr64
3152B	  %77:gpr64common = ADRP target-flags(aarch64-page) @dtime
3168B	  STRDui %76:fpr64, %77:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (store 8 into @dtime)
3184B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
3200B	  %78:gpr64 = MOVaddr target-flags(aarch64-page) @.str.18, target-flags(aarch64-pageoff, aarch64-nc) @.str.18
3248B	  $w1 = MOVi32imm 7
3256B	  $x0 = COPY %78:gpr64
3264B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0
3280B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
3296B	  %82:gpr32 = LDRWui %395:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (dereferenceable load 4 from @fre)
3312B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
3328B	  %83:gpr64 = MOVaddr target-flags(aarch64-page) @.str.19, target-flags(aarch64-pageoff, aarch64-nc) @.str.19
3344B	  $x0 = COPY %83:gpr64
3360B	  $w1 = COPY %82:gpr32
3376B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0
3392B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
3408B	  %86:gpr32 = LDRWui %396:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
3424B	  %87:fpr64 = LDRDui %77:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
3440B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
3456B	  %88:gpr64 = MOVaddr target-flags(aarch64-page) @.str.20, target-flags(aarch64-pageoff, aarch64-nc) @.str.20
3472B	  $x0 = COPY %88:gpr64
3488B	  $w1 = COPY %86:gpr32
3504B	  $d0 = COPY %87:fpr64
3520B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp, implicit-def dead $w0
3536B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
3552B	  %91:gpr32 = LDRWui %397:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
3568B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
3584B	  %92:gpr64 = MOVaddr target-flags(aarch64-page) @.str.21, target-flags(aarch64-pageoff, aarch64-nc) @.str.21
3600B	  $x0 = COPY %92:gpr64
3616B	  $w1 = COPY %91:gpr32
3632B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0
3648B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
3664B	  %95:fpr64 = LDRDui %398:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @alpha :: (dereferenceable load 8 from @alpha)
3680B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
3696B	  %96:gpr64 = MOVaddr target-flags(aarch64-page) @.str.22, target-flags(aarch64-pageoff, aarch64-nc) @.str.22
3712B	  $x0 = COPY %96:gpr64
3728B	  $d0 = COPY %95:fpr64
3744B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $d0, implicit-def $sp, implicit-def dead $w0
3760B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
3776B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
3792B	  BL @top_constants, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
3808B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
3824B	  %98:gpr32 = MOVi32imm 1
3840B	  STRWui %98:gpr32, %stack.6.i, 0 :: (store 4 into %ir.i)

3856B	bb.13.for.cond:
	; predecessors: %bb.12, %bb.14
	  successors: %bb.14(0x7c000000), %bb.15(0x04000000); %bb.14(96.88%), %bb.15(3.12%)

3872B	  %99:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
3888B	  dead $wzr = SUBSWri %99:gpr32common, 10, 0, implicit-def $nzcv
3904B	  Bcc 12, %bb.15, implicit killed $nzcv
3920B	  B %bb.14

3936B	bb.14.for.body:
	; predecessors: %bb.13
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

3952B	  %390:gpr32 = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
3968B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
3984B	  $w0 = COPY %390:gpr32
4000B	  BL @timer_clear, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
4016B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
4032B	  %391:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
4048B	  %392:gpr32common = nsw ADDWri %391:gpr32common, 1, 0
4064B	  STRWui %392:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)
4080B	  B %bb.13

4096B	bb.15.for.end:
	; predecessors: %bb.13
	  successors: %bb.16(0x50000000), %bb.17(0x30000000); %bb.16(62.50%), %bb.17(37.50%)

4112B	  %102:gpr32 = LDRWui %399:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
4128B	  CBZW %102:gpr32, %bb.17
4144B	  B %bb.16

4160B	bb.16.if.then43:
	; predecessors: %bb.15
	  successors: %bb.17(0x80000000); %bb.17(100.00%)

4176B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
4208B	  $w0 = MOVi32imm 2
4224B	  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
4240B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

4256B	bb.17.if.end44:
	; predecessors: %bb.15, %bb.16
	  successors: %bb.18(0x50000000), %bb.19(0x30000000); %bb.18(62.50%), %bb.19(37.50%)

4272B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
4288B	  BL @create_initial_grid, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
4304B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
4320B	  %104:gpr64common = ADRP target-flags(aarch64-page) @ntot
4336B	  %105:gpr32 = LDRWui %104:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
4352B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
4368B	  %106:gpr64 = MOVaddr target-flags(aarch64-page) @ta1, target-flags(aarch64-pageoff, aarch64-nc) @ta1
4432B	  $d0 = FMOVD0
4436B	  $x0 = COPY %106:gpr64
4440B	  $w1 = COPY %105:gpr32
4448B	  BL @r_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
4464B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
4480B	  %108:gpr64common = ADRP target-flags(aarch64-page) @nelt
4496B	  %109:gpr32 = LDRWui %108:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
4512B	  %110:gpr32 = ADDWrs %109:gpr32, %109:gpr32, 1
4528B	  %111:gpr32 = UBFMWri %110:gpr32, 29, 28
4544B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
4560B	  %112:gpr64 = MOVaddr target-flags(aarch64-page) @sje, target-flags(aarch64-pageoff, aarch64-nc) @sje
4624B	  $w2 = MOVi32imm -1
4628B	  $x0 = COPY %112:gpr64
4632B	  $w1 = COPY %111:gpr32
4640B	  BL @nr_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit-def $sp
4656B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
4672B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
4688B	  BL @coef, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
4704B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
4720B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
4736B	  BL @geom1, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
4752B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
4768B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
4784B	  BL @setdef, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
4800B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
4816B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
4832B	  BL @setpcmo_pre, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
4848B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
4864B	  %114:gpr64common = ADRP target-flags(aarch64-page) @time
4896B	  STRXui $xzr, %114:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
4912B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
4928B	  BL @mortar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
4944B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
4960B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
4976B	  BL @prepwork, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
4992B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
5008B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
5056B	  $x0 = ADDXri %stack.13.ifmortar, 0, 0
5072B	  $w1 = COPY $wzr
5088B	  BL @adaptation, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp
5104B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
5120B	  %119:gpr32 = LDRWui %399:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
5136B	  CBZW %119:gpr32, %bb.19
5152B	  B %bb.18

5168B	bb.18.if.then47:
	; predecessors: %bb.17
	  successors: %bb.19(0x80000000); %bb.19(100.00%)

5184B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
5216B	  $w0 = MOVi32imm 2
5232B	  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
5248B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

5264B	bb.19.if.end48:
	; predecessors: %bb.17, %bb.18
	  successors: %bb.20(0x80000000); %bb.20(100.00%)

5280B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
5312B	  $w0 = MOVi32imm 1
5320B	  %121:gpr32 = MOVi32imm 1
5328B	  BL @timer_clear, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
5344B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
5376B	  STRXui $xzr, %114:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
5408B	  STRWui $wzr, %stack.3.step, 0 :: (store 4 into %ir.step)
5456B	  %242:gpr64 = MOVaddr target-flags(aarch64-page) @tmort, target-flags(aarch64-pageoff, aarch64-nc) @tmort
5472B	  undef %375.sub_32:gpr64 = MOVi32imm 1000
5504B	  %377:gpr64 = MOVaddr target-flags(aarch64-page) @ta2, target-flags(aarch64-pageoff, aarch64-nc) @ta2
5520B	  %381:gpr64common = MOVaddr target-flags(aarch64-page) @size_e, target-flags(aarch64-pageoff, aarch64-nc) @size_e
5536B	  %351:gpr64 = MOVaddr target-flags(aarch64-page) @trhs, target-flags(aarch64-pageoff, aarch64-nc) @trhs
5552B	  undef %355.sub_32:gpr64 = MOVi32imm 200
5584B	  %254:gpr64 = MOVaddr target-flags(aarch64-page) @rmor, target-flags(aarch64-pageoff, aarch64-nc) @rmor
5600B	  undef %316.sub_32:gpr64 = MOVi32imm 24
5632B	  %318:gpr64 = MOVaddr target-flags(aarch64-page) @cbc, target-flags(aarch64-pageoff, aarch64-nc) @cbc
5648B	  %264:gpr64common = ADRP target-flags(aarch64-page) @nmor
5664B	  %267:gpr64 = MOVaddr target-flags(aarch64-page) @tmmor, target-flags(aarch64-pageoff, aarch64-nc) @tmmor
5696B	  %275:gpr64 = MOVaddr target-flags(aarch64-page) @t, target-flags(aarch64-pageoff, aarch64-nc) @t

5728B	bb.20.for.cond49:
	; predecessors: %bb.19, %bb.64
	  successors: %bb.21(0x7c000000), %bb.65(0x04000000); %bb.21(96.88%), %bb.65(3.12%)

5744B	  %125:gpr32 = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
5760B	  %127:gpr32 = LDRWui %396:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
5776B	  dead $wzr = SUBSWrr %125:gpr32, %127:gpr32, implicit-def $nzcv
5792B	  Bcc 12, %bb.65, implicit killed $nzcv
5808B	  B %bb.21

5824B	bb.21.for.body51:
	; predecessors: %bb.20
	  successors: %bb.22(0x40000000), %bb.28(0x40000000); %bb.22(50.00%), %bb.28(50.00%)

5840B	  %226:gpr32common = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
5856B	  dead $wzr = SUBSWri %226:gpr32common, 1, 0, implicit-def $nzcv
5872B	  Bcc 1, %bb.28, implicit killed $nzcv
5888B	  B %bb.22

5904B	bb.22.if.then53:
	; predecessors: %bb.21
	  successors: %bb.23(0x80000000); %bb.23(100.00%)

5920B	  %229:gpr32 = LDRWui %104:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
5936B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
5984B	  $d0 = FMOVD0
5988B	  $x0 = COPY %106:gpr64
5992B	  $w1 = COPY %229:gpr32
6000B	  BL @r_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
6016B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
6048B	  STRXui $xzr, %114:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
6064B	  STRXui $xzr, %393:gpr64sp, 14 :: (store 8 into %ir.nelt_tot)
6080B	  STRWui %121:gpr32, %stack.6.i, 0 :: (store 4 into %ir.i)

6096B	bb.23.for.cond54:
	; predecessors: %bb.22, %bb.26
	  successors: %bb.24(0x7c000000), %bb.27(0x04000000); %bb.24(96.88%), %bb.27(3.12%)

6112B	  %235:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
6128B	  dead $wzr = SUBSWri %235:gpr32common, 10, 0, implicit-def $nzcv
6144B	  Bcc 12, %bb.27, implicit killed $nzcv
6160B	  B %bb.24

6176B	bb.24.for.body56:
	; predecessors: %bb.23
	  successors: %bb.25(0x40000000), %bb.26(0x40000000); %bb.25(50.00%), %bb.26(50.00%)

6192B	  %385:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
6208B	  dead $wzr = SUBSWri %385:gpr32common, 2, 0, implicit-def $nzcv
6224B	  Bcc 0, %bb.26, implicit killed $nzcv
6240B	  B %bb.25

6256B	bb.25.if.then58:
	; predecessors: %bb.24
	  successors: %bb.26(0x80000000); %bb.26(100.00%)

6272B	  %387:gpr32 = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
6288B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
6304B	  $w0 = COPY %387:gpr32
6320B	  BL @timer_clear, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
6336B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

6352B	bb.26.for.inc60:
	; predecessors: %bb.24, %bb.25
	  successors: %bb.23(0x80000000); %bb.23(100.00%)

6368B	  %388:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
6384B	  %389:gpr32common = nsw ADDWri %388:gpr32common, 1, 0
6400B	  STRWui %389:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)
6416B	  B %bb.23

6432B	bb.27.for.end62:
	; predecessors: %bb.23
	  successors: %bb.28(0x80000000); %bb.28(100.00%)

6448B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
6464B	  $w0 = MOVi32imm 1
6480B	  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
6496B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

6512B	bb.28.if.end63:
	; predecessors: %bb.21, %bb.27
	  successors: %bb.29(0x50000000), %bb.30(0x30000000); %bb.29(62.50%), %bb.30(37.50%)

6528B	  %238:gpr32 = LDRWui %stack.13.ifmortar, 0 :: (dereferenceable load 4 from %ir.ifmortar)
6544B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
6560B	  $w0 = COPY %238:gpr32
6576B	  BL @convect, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
6592B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
6608B	  %240:gpr32 = LDRWui %399:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
6624B	  CBZW %240:gpr32, %bb.30
6640B	  B %bb.29

6656B	bb.29.if.then65:
	; predecessors: %bb.28
	  successors: %bb.30(0x80000000); %bb.30(100.00%)

6672B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
6688B	  $w0 = MOVi32imm 9
6704B	  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
6720B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

6736B	bb.30.if.end66:
	; predecessors: %bb.28, %bb.29
	  successors: %bb.31(0x80000000); %bb.31(100.00%)

6752B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
6768B	  $x0 = COPY %242:gpr64
6784B	  $x1 = COPY %106:gpr64
6800B	  BL @transf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
6816B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
6848B	  STRWui $wzr, %stack.4.ie, 0 :: (store 4 into %ir.ie)

6864B	bb.31.for.cond67:
	; predecessors: %bb.30, %bb.32
	  successors: %bb.32(0x7c000000), %bb.33(0x04000000); %bb.32(96.88%), %bb.33(3.12%)

6880B	  %245:gpr32 = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
6896B	  %247:gpr32 = LDRWui %108:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
6912B	  dead $wzr = SUBSWrr %245:gpr32, %247:gpr32, implicit-def $nzcv
6928B	  Bcc 10, %bb.33, implicit killed $nzcv
6944B	  B %bb.32

6960B	bb.32.for.body69:
	; predecessors: %bb.31
	  successors: %bb.31(0x80000000); %bb.31(100.00%)

6976B	  %373:gpr64 = LDRSWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
7040B	  %382:gpr32 = LDRWroX %381:gpr64common, %373:gpr64, 0, 1 :: (load 4 from %ir.arrayidx75)
7048B	  %376:gpr64 = MADDXrrr %373:gpr64, %375:gpr64, $xzr
7056B	  %378:gpr64 = ADDXrr %377:gpr64, %376:gpr64
7064B	  %380:gpr64 = ADDXrr %106:gpr64, %376:gpr64
7072B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
7080B	  $x0 = COPY %378:gpr64
7088B	  $x1 = COPY %380:gpr64
7104B	  $w2 = COPY %382:gpr32
7120B	  BL @laplacian, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $w2, implicit-def $sp
7136B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
7152B	  %383:gpr32common = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
7168B	  %384:gpr32common = nsw ADDWri %383:gpr32common, 1, 0
7184B	  STRWui %384:gpr32common, %stack.4.ie, 0 :: (store 4 into %ir.ie)
7200B	  B %bb.31

7216B	bb.33.for.end78:
	; predecessors: %bb.31
	  successors: %bb.34(0x80000000); %bb.34(100.00%)

7248B	  STRWui $wzr, %stack.4.ie, 0 :: (store 4 into %ir.ie)

7264B	bb.34.for.cond79:
	; predecessors: %bb.33, %bb.44
	  successors: %bb.35(0x7c000000), %bb.45(0x04000000); %bb.35(96.88%), %bb.45(3.12%)

7280B	  %250:gpr32 = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
7296B	  %252:gpr32 = LDRWui %108:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
7312B	  dead $wzr = SUBSWrr %250:gpr32, %252:gpr32, implicit-def $nzcv
7328B	  Bcc 10, %bb.45, implicit killed $nzcv
7344B	  B %bb.35

7360B	bb.35.for.body81:
	; predecessors: %bb.34
	  successors: %bb.36(0x80000000); %bb.36(100.00%)

7392B	  STRWui $wzr, %stack.8.k, 0 :: (store 4 into %ir.k)

7408B	bb.36.for.cond82:
	; predecessors: %bb.35, %bb.43
	  successors: %bb.37(0x7c000000), %bb.44(0x04000000); %bb.37(96.88%), %bb.44(3.12%)

7424B	  %333:gpr32common = LDRWui %stack.8.k, 0 :: (dereferenceable load 4 from %ir.k)
7440B	  dead $wzr = SUBSWri %333:gpr32common, 4, 0, implicit-def $nzcv
7456B	  Bcc 12, %bb.44, implicit killed $nzcv
7472B	  B %bb.37

7488B	bb.37.for.body84:
	; predecessors: %bb.36
	  successors: %bb.38(0x80000000); %bb.38(100.00%)

7520B	  STRWui $wzr, %stack.7.j, 0 :: (store 4 into %ir.j)

7536B	bb.38.for.cond85:
	; predecessors: %bb.37, %bb.42
	  successors: %bb.39(0x7c000000), %bb.43(0x04000000); %bb.39(96.88%), %bb.43(3.12%)

7552B	  %338:gpr32common = LDRWui %stack.7.j, 0 :: (dereferenceable load 4 from %ir.j)
7568B	  dead $wzr = SUBSWri %338:gpr32common, 4, 0, implicit-def $nzcv
7584B	  Bcc 12, %bb.43, implicit killed $nzcv
7600B	  B %bb.39

7616B	bb.39.for.body87:
	; predecessors: %bb.38
	  successors: %bb.40(0x80000000); %bb.40(100.00%)

7648B	  STRWui $wzr, %stack.6.i, 0 :: (store 4 into %ir.i)

7664B	bb.40.for.cond88:
	; predecessors: %bb.39, %bb.41
	  successors: %bb.41(0x7c000000), %bb.42(0x04000000); %bb.41(96.88%), %bb.42(3.12%)

7680B	  %343:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
7696B	  dead $wzr = SUBSWri %343:gpr32common, 4, 0, implicit-def $nzcv
7712B	  Bcc 12, %bb.42, implicit killed $nzcv
7728B	  B %bb.41

7744B	bb.41.for.body90:
	; predecessors: %bb.40
	  successors: %bb.40(0x80000000); %bb.40(100.00%)

7760B	  %347:gpr64 = LDRSWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
7824B	  %353:gpr64 = LDRSWui %stack.8.k, 0 :: (dereferenceable load 4 from %ir.k)
7872B	  %358:gpr64 = LDRSWui %stack.7.j, 0 :: (dereferenceable load 4 from %ir.j)
7880B	  %350:gpr64 = MADDXrrr %347:gpr64, %375:gpr64, $xzr
7888B	  %356:gpr64 = MADDXrrr %353:gpr64, %355:gpr64, $xzr
7896B	  %352:gpr64 = ADDXrr %351:gpr64, %350:gpr64
7984B	  %366:gpr64 = ADDXrr %377:gpr64, %350:gpr64
7988B	  %357:gpr64 = ADDXrr %352:gpr64, %356:gpr64
7992B	  %362:gpr64 = LDRSWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
8000B	  %367:gpr64 = ADDXrr %366:gpr64, %356:gpr64
8080B	  %371:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
8088B	  %359:gpr64 = ADDXrs %358:gpr64, %358:gpr64, 2
8096B	  %363:gpr64 = UBFMXri %362:gpr64, 61, 60
8104B	  %360:gpr64 = UBFMXri %359:gpr64, 61, 60
8112B	  %361:gpr64common = ADDXrr %357:gpr64, %360:gpr64
8120B	  %368:gpr64common = ADDXrr %367:gpr64, %360:gpr64
8128B	  %364:fpr64 = LDRDroX %361:gpr64common, %363:gpr64, 0, 0 :: (load 8 from %ir.arrayidx98)
8136B	  %369:fpr64 = LDRDroX %368:gpr64common, %363:gpr64, 0, 0 :: (load 8 from %ir.arrayidx106)
8144B	  %372:gpr32common = nsw ADDWri %371:gpr32common, 1, 0
8152B	  %370:fpr64 = FSUBDrr %364:fpr64, %369:fpr64
8160B	  STRDroX %370:fpr64, %361:gpr64common, %363:gpr64, 0, 0 :: (store 8 into %ir.arrayidx114)
8168B	  STRWui %372:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)
8176B	  B %bb.40

8184B	bb.42.for.inc118:
	; predecessors: %bb.40
	  successors: %bb.38(0x80000000); %bb.38(100.00%)

8192B	  %345:gpr32common = LDRWui %stack.7.j, 0 :: (dereferenceable load 4 from %ir.j)
8200B	  %346:gpr32common = nsw ADDWri %345:gpr32common, 1, 0
8208B	  STRWui %346:gpr32common, %stack.7.j, 0 :: (store 4 into %ir.j)
8216B	  B %bb.38

8224B	bb.43.for.inc121:
	; predecessors: %bb.38
	  successors: %bb.36(0x80000000); %bb.36(100.00%)

8240B	  %340:gpr32common = LDRWui %stack.8.k, 0 :: (dereferenceable load 4 from %ir.k)
8256B	  %341:gpr32common = nsw ADDWri %340:gpr32common, 1, 0
8272B	  STRWui %341:gpr32common, %stack.8.k, 0 :: (store 4 into %ir.k)
8288B	  B %bb.36

8304B	bb.44.for.inc124:
	; predecessors: %bb.36
	  successors: %bb.34(0x80000000); %bb.34(100.00%)

8320B	  %335:gpr32common = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
8336B	  %336:gpr32common = nsw ADDWri %335:gpr32common, 1, 0
8352B	  STRWui %336:gpr32common, %stack.4.ie, 0 :: (store 4 into %ir.ie)
8368B	  B %bb.34

8384B	bb.45.for.end126:
	; predecessors: %bb.34
	  successors: %bb.46(0x50000000), %bb.47(0x30000000); %bb.46(62.50%), %bb.47(37.50%)

8400B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
8416B	  $x0 = COPY %254:gpr64
8432B	  $x1 = COPY %351:gpr64
8448B	  BL @transfb, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
8464B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
8480B	  %257:gpr32 = LDRWui %399:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
8496B	  CBZW %257:gpr32, %bb.47
8512B	  B %bb.46

8528B	bb.46.if.then128:
	; predecessors: %bb.45
	  successors: %bb.47(0x80000000); %bb.47(100.00%)

8544B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
8560B	  $w0 = MOVi32imm 9
8576B	  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
8592B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

8608B	bb.47.if.end129:
	; predecessors: %bb.45, %bb.46
	  successors: %bb.48(0x80000000); %bb.48(100.00%)

8640B	  STRWui $wzr, %stack.4.ie, 0 :: (store 4 into %ir.ie)

8656B	bb.48.for.cond130:
	; predecessors: %bb.47, %bb.54
	  successors: %bb.49(0x7c000000), %bb.55(0x04000000); %bb.49(96.88%), %bb.55(3.12%)

8672B	  %260:gpr32 = LDRWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
8688B	  %262:gpr32 = LDRWui %108:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
8704B	  dead $wzr = SUBSWrr %260:gpr32, %262:gpr32, implicit-def $nzcv
8720B	  Bcc 10, %bb.55, implicit killed $nzcv
8736B	  B %bb.49

8752B	bb.49.for.body132:
	; predecessors: %bb.48
	  successors: %bb.50(0x80000000); %bb.50(100.00%)

8784B	  STRWui $wzr, %stack.5.iside, 0 :: (store 4 into %ir.iside)

8800B	bb.50.for.cond133:
	; predecessors: %bb.49, %bb.53
	  successors: %bb.51(0x7c000000), %bb.54(0x04000000); %bb.51(96.88%), %bb.54(3.12%)

8816B	  %310:gpr32common = LDRWui %stack.5.iside, 0 :: (dereferenceable load 4 from %ir.iside)
8832B	  %311:gpr64common = LDRSWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
8848B	  dead $wzr = SUBSWri %310:gpr32common, 5, 0, implicit-def $nzcv
8864B	  Bcc 12, %bb.54, implicit killed $nzcv
8880B	  B %bb.51

8896B	bb.51.for.body135:
	; predecessors: %bb.50
	  successors: %bb.52(0x30000000), %bb.53(0x50000000); %bb.52(37.50%), %bb.53(62.50%)

8928B	  %320:gpr64 = LDRSWui %stack.5.iside, 0 :: (dereferenceable load 4 from %ir.iside)
8936B	  %319:gpr64common = MADDXrrr %311:gpr64common, %316:gpr64, %318:gpr64
8944B	  %321:gpr32 = LDRWroX %319:gpr64common, %320:gpr64, 0, 1 :: (load 4 from %ir.arrayidx139)
8960B	  CBNZW %321:gpr32, %bb.53
8976B	  B %bb.52

8992B	bb.52.if.then141:
	; predecessors: %bb.51
	  successors: %bb.53(0x80000000); %bb.53(100.00%)

9008B	  %322:gpr64 = LDRSWui %stack.4.ie, 0 :: (dereferenceable load 4 from %ir.ie)
9056B	  %328:gpr32 = LDRWui %stack.5.iside, 0 :: (dereferenceable load 4 from %ir.iside)
9064B	  %327:gpr64 = MADDXrrr %322:gpr64, %375:gpr64, %351:gpr64
9072B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
9120B	  $d0 = FMOVD0
9124B	  $x0 = COPY %327:gpr64
9128B	  $w1 = COPY %328:gpr32
9136B	  BL @facev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
9152B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

9168B	bb.53.for.inc146:
	; predecessors: %bb.51, %bb.52
	  successors: %bb.50(0x80000000); %bb.50(100.00%)

9184B	  %330:gpr32common = LDRWui %stack.5.iside, 0 :: (dereferenceable load 4 from %ir.iside)
9200B	  %331:gpr32common = nsw ADDWri %330:gpr32common, 1, 0
9216B	  STRWui %331:gpr32common, %stack.5.iside, 0 :: (store 4 into %ir.iside)
9232B	  B %bb.50

9248B	bb.54.for.inc149:
	; predecessors: %bb.50
	  successors: %bb.48(0x80000000); %bb.48(100.00%)

9296B	  %314:gpr32common = nsw ADDWri %311.sub_32:gpr64common, 1, 0
9312B	  STRWui %314:gpr32common, %stack.4.ie, 0 :: (store 4 into %ir.ie)
9328B	  B %bb.48

9344B	bb.55.for.end151:
	; predecessors: %bb.48
	  successors: %bb.56(0x50000000), %bb.57(0x30000000); %bb.56(62.50%), %bb.57(37.50%)

9360B	  %265:gpr32 = LDRWui %264:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
9376B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
9392B	  $x0 = COPY %254:gpr64
9408B	  $x1 = COPY %267:gpr64
9424B	  $w2 = COPY %265:gpr32
9440B	  BL @col2, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $w2, implicit-def $sp
9456B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
9472B	  %268:gpr32 = LDRWui %stack.13.ifmortar, 0 :: (dereferenceable load 4 from %ir.ifmortar)
9488B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
9504B	  $w0 = COPY %268:gpr32
9520B	  BL @diffusion, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
9536B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
9552B	  %270:gpr32 = LDRWui %399:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
9568B	  CBZW %270:gpr32, %bb.57
9584B	  B %bb.56

9600B	bb.56.if.then153:
	; predecessors: %bb.55
	  successors: %bb.57(0x80000000); %bb.57(100.00%)

9616B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
9632B	  $w0 = MOVi32imm 10
9648B	  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
9664B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

9680B	bb.57.if.end154:
	; predecessors: %bb.55, %bb.56
	  successors: %bb.58(0x50000000), %bb.59(0x30000000); %bb.58(62.50%), %bb.59(37.50%)

9696B	  %273:gpr32 = LDRWui %104:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
9712B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
9728B	  $x0 = COPY %106:gpr64
9744B	  $x1 = COPY %275:gpr64
9760B	  $w2 = COPY %273:gpr32
9776B	  BL @add2, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $w2, implicit-def $sp
9792B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
9808B	  %277:gpr32 = LDRWui %399:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
9824B	  CBZW %277:gpr32, %bb.59
9840B	  B %bb.58

9856B	bb.58.if.then156:
	; predecessors: %bb.57
	  successors: %bb.59(0x80000000); %bb.59(100.00%)

9872B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
9888B	  $w0 = MOVi32imm 10
9904B	  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
9920B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

9936B	bb.59.if.end157:
	; predecessors: %bb.57, %bb.58
	  successors: %bb.60(0x50000000), %bb.63(0x30000000); %bb.60(62.50%), %bb.63(37.50%)

9952B	  %280:fpr64 = LDRDui %114:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @time :: (dereferenceable load 8 from @time)
9968B	  %282:fpr64 = LDRDui %77:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
10016B	  %284:gpr32 = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
10020B	  %283:fpr64 = FADDDrr %280:fpr64, %282:fpr64
10024B	  STRDui %283:fpr64, %114:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
10032B	  CBZW %284:gpr32, %bb.63
10048B	  B %bb.60

10064B	bb.60.land.lhs.true:
	; predecessors: %bb.59
	  successors: %bb.61(0x40000000), %bb.63(0x40000000); %bb.61(50.00%), %bb.63(50.00%)

10080B	  %285:gpr32 = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
10096B	  %287:gpr32 = LDRWui %395:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (dereferenceable load 4 from @fre)
10112B	  %288:gpr32 = SDIVWr %285:gpr32, %287:gpr32
10128B	  %289:gpr32 = nsw MADDWrrr %288:gpr32, %287:gpr32, $wzr
10144B	  dead $wzr = SUBSWrr %289:gpr32, %285:gpr32, implicit-def $nzcv
10160B	  Bcc 1, %bb.63, implicit killed $nzcv
10176B	  B %bb.61

10192B	bb.61.if.then161:
	; predecessors: %bb.60
	  successors: %bb.62(0x40000000), %bb.64(0x40000000); %bb.62(50.00%), %bb.64(50.00%)

10208B	  %292:gpr32 = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
10224B	  %294:gpr32 = LDRWui %396:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
10240B	  dead $wzr = SUBSWrr %292:gpr32, %294:gpr32, implicit-def $nzcv
10256B	  Bcc 0, %bb.64, implicit killed $nzcv
10272B	  B %bb.62

10288B	bb.62.if.then163:
	; predecessors: %bb.61
	  successors: %bb.64(0x80000000); %bb.64(100.00%)

10304B	  %296:gpr32 = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
10320B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
10336B	  $x0 = ADDXri %stack.13.ifmortar, 0, 0
10352B	  $w1 = COPY %296:gpr32
10368B	  BL @adaptation, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp
10384B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
10400B	  B %bb.64

10416B	bb.63.if.else165:
	; predecessors: %bb.59, %bb.60
	  successors: %bb.64(0x80000000); %bb.64(100.00%)

10448B	  STRWui $wzr, %stack.13.ifmortar, 0 :: (store 4 into %ir.ifmortar)

10464B	bb.64.if.end166:
	; predecessors: %bb.63, %bb.61, %bb.62
	  successors: %bb.20(0x80000000); %bb.20(100.00%)

10496B	  undef %301.ssub:fpr64 = LDRSui %108:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
10608B	  %307:gpr32common = LDRWui %stack.3.step, 0 :: (dereferenceable load 4 from %ir.step)
10612B	  %298:fpr64 = LDRDui %393:gpr64sp, 14 :: (dereferenceable load 8 from %ir.nelt_tot)
10616B	  %303:fpr128 = SSHLLv2i32_shift %301:fpr64, 0
10624B	  %308:gpr32common = nsw ADDWri %307:gpr32common, 1, 0
10632B	  %305:fpr64 = SCVTFv1i64 %303.dsub:fpr128
10640B	  %306:fpr64 = FADDDrr %298:fpr64, %305:fpr64
10648B	  STRDui %306:fpr64, %393:gpr64sp, 14 :: (store 8 into %ir.nelt_tot)
10656B	  STRWui %308:gpr32common, %stack.3.step, 0 :: (store 4 into %ir.step)
10664B	  B %bb.20

10672B	bb.65.for.end170:
	; predecessors: %bb.20
	  successors: %bb.66(0x50000000), %bb.78(0x30000000); %bb.66(62.50%), %bb.78(37.50%)

10688B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
10720B	  $w0 = MOVi32imm 1
10728B	  %129:gpr32 = MOVi32imm 1
10736B	  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
10752B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
10768B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
10784B	  $w0 = MOVi32imm 1
10800B	  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0
10816B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
10832B	  %130:fpr64 = COPY killed $d0
10848B	  STRDui %130:fpr64, %393:gpr64sp, 15 :: (store 8 into %ir.tmax)
10864B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
10912B	  $x0 = ADDXri %stack.12.Class, 0, 0
10928B	  $x1 = ADDXri %stack.14.verified, 0, 0
10944B	  BL @verify, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
10960B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
10992B	  %135:gpr32 = LDRWui %397:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
11008B	  %136:gpr32 = MOVi32imm 125
11016B	  %133:fpr64 = LDRDui %393:gpr64sp, 14 :: (dereferenceable load 8 from %ir.nelt_tot)
11088B	  %141:fpr64 = LDRDui %393:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
11096B	  %137:gpr32common = MADDWrrr %135:gpr32, %136:gpr32, $wzr
11104B	  %142:gpr64 = MOVi64imm 4696837146684686336
11108B	  %138:gpr32common = ADDWri %137:gpr32common, 125, 0
11112B	  %139:fpr64 = SCVTFUWDri %138:gpr32common
11184B	  %146:gpr32 = LDRSBWui %stack.12.Class, 0 :: (dereferenceable load 1 from %ir.Class, align 4)
11200B	  %148:gpr32 = LDRWui %396:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
11204B	  %140:fpr64 = FMULDrr %133:fpr64, %139:fpr64
11208B	  %143:fpr64 = COPY %142:gpr64
11216B	  %149:gpr32 = LDRWui %stack.14.verified, 0 :: (dereferenceable load 4 from %ir.verified)
11224B	  %144:fpr64 = FMULDrr %141:fpr64, %143:fpr64
11232B	  %145:fpr64 = FDIVDrr %140:fpr64, %144:fpr64
11240B	  STRDui %145:fpr64, %393:gpr64sp, 16 :: (store 8 into %ir.mflops)
11248B	  ADJCALLSTACKDOWN 72, 0, implicit-def dead $sp, implicit $sp
11256B	  %150:gpr64 = MOVaddr target-flags(aarch64-page) @.str.33, target-flags(aarch64-pageoff, aarch64-nc) @.str.33
11296B	  %152:gpr64 = MOVaddr target-flags(aarch64-page) @.str.32, target-flags(aarch64-pageoff, aarch64-nc) @.str.32
11328B	  %153:gpr64 = MOVaddr target-flags(aarch64-page) @.str.31, target-flags(aarch64-pageoff, aarch64-nc) @.str.31
11360B	  %154:gpr64 = MOVaddr target-flags(aarch64-page) @.str.30, target-flags(aarch64-pageoff, aarch64-nc) @.str.30
11392B	  %155:gpr64 = MOVaddr target-flags(aarch64-page) @.str.29, target-flags(aarch64-pageoff, aarch64-nc) @.str.29
11424B	  %156:gpr64 = MOVaddr target-flags(aarch64-page) @.str.28, target-flags(aarch64-pageoff, aarch64-nc) @.str.28
11456B	  %157:gpr64 = MOVaddr target-flags(aarch64-page) @.str.27, target-flags(aarch64-pageoff, aarch64-nc) @.str.27
11488B	  %158:gpr64 = MOVaddr target-flags(aarch64-page) @.str.26, target-flags(aarch64-pageoff, aarch64-nc) @.str.26
11496B	  STRXui %150:gpr64, $sp, 8 :: (store 8 into stack + 64)
11520B	  %159:gpr64 = MOVaddr target-flags(aarch64-page) @.str.25, target-flags(aarch64-pageoff, aarch64-nc) @.str.25
11524B	  STRXui %153:gpr64, $sp, 6 :: (store 8 into stack + 48)
11528B	  STRXui %152:gpr64, $sp, 7 :: (store 8 into stack + 56)
11552B	  %160:gpr64 = MOVaddr target-flags(aarch64-page) @.str.23, target-flags(aarch64-pageoff, aarch64-nc) @.str.23
11556B	  STRXui %155:gpr64, $sp, 4 :: (store 8 into stack + 32)
11560B	  STRXui %154:gpr64, $sp, 5 :: (store 8 into stack + 40)
11568B	  %161:gpr64 = MOVaddr target-flags(aarch64-page) @.str.24, target-flags(aarch64-pageoff, aarch64-nc) @.str.24
11576B	  STRXui %157:gpr64, $sp, 2 :: (store 8 into stack + 16)
11584B	  STRXui %156:gpr64, $sp, 3 :: (store 8 into stack + 24)
11592B	  STRXui %159:gpr64, $sp, 0 :: (store 8 into stack)
11648B	  $w2 = MOVi32imm 7
11656B	  STRXui %158:gpr64, $sp, 1 :: (store 8 into stack + 8)
11712B	  $d0 = COPY %141:fpr64
11728B	  $d1 = COPY %145:fpr64
11736B	  $x0 = COPY %160:gpr64
11744B	  $w1 = COPY %146:gpr32
11752B	  $w3 = COPY $wzr
11760B	  $w4 = COPY $wzr
11768B	  $w5 = COPY %148:gpr32
11776B	  $x6 = COPY %161:gpr64
11784B	  $w7 = COPY %149:gpr32
11792B	  BL @print_results, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit $w3, implicit $w4, implicit $w5, implicit killed $d0, implicit killed $d1, implicit killed $x6, implicit killed $w7, implicit-def $sp
11800B	  ADJCALLSTACKUP 72, 0, implicit-def dead $sp, implicit $sp
11808B	  %165:gpr32 = LDRWui %399:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
11824B	  CBZW %165:gpr32, %bb.78
11840B	  B %bb.66

11856B	bb.66.if.then179:
	; predecessors: %bb.65
	  successors: %bb.67(0x80000000); %bb.67(100.00%)

11872B	  STRWui %129:gpr32, %stack.6.i, 0 :: (store 4 into %ir.i)
11888B	  %223:gpr64sp = ADDXri %stack.16.trecs, 0, 0

11904B	bb.67.for.cond180:
	; predecessors: %bb.66, %bb.68
	  successors: %bb.68(0x7c000000), %bb.69(0x04000000); %bb.68(96.88%), %bb.69(3.12%)

11920B	  %167:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
11936B	  dead $wzr = SUBSWri %167:gpr32common, 10, 0, implicit-def $nzcv
11952B	  Bcc 12, %bb.69, implicit killed $nzcv
11968B	  B %bb.68

11984B	bb.68.for.body183:
	; predecessors: %bb.67
	  successors: %bb.67(0x80000000); %bb.67(100.00%)

12000B	  %220:gpr32 = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
12016B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
12032B	  $w0 = COPY %220:gpr32
12048B	  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0
12064B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
12080B	  %221:fpr64 = COPY killed $d0
12096B	  %222:gpr64 = LDRSWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
12128B	  %224:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
12136B	  STRDroX %221:fpr64, %223:gpr64sp, %222:gpr64, 0, 1 :: (store 8 into %ir.arrayidx186)
12144B	  %225:gpr32common = nsw ADDWri %224:gpr32common, 1, 0
12160B	  STRWui %225:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)
12176B	  B %bb.67

12192B	bb.69.for.end189:
	; predecessors: %bb.67
	  successors: %bb.70(0x50000000), %bb.71(0x30000000); %bb.70(62.50%), %bb.71(37.50%)

12208B	  %169:fpr64 = LDRDui %393:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
12224B	  FCMPDri %169:fpr64, implicit-def $nzcv
12240B	  Bcc 1, %bb.71, implicit killed $nzcv
12256B	  B %bb.70

12272B	bb.70.if.then192:
	; predecessors: %bb.69
	  successors: %bb.71(0x80000000); %bb.71(100.00%)

12288B	  %170:gpr64 = MOVi64imm 4607182418800017408
12304B	  STRXui %170:gpr64, %393:gpr64sp, 15 :: (store 8 into %ir.tmax)

12320B	bb.71.if.end193:
	; predecessors: %bb.69, %bb.70
	  successors: %bb.72(0x80000000); %bb.72(100.00%)

12336B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
12352B	  %171:gpr64 = MOVaddr target-flags(aarch64-page) @.str.34, target-flags(aarch64-pageoff, aarch64-nc) @.str.34
12368B	  $x0 = COPY %171:gpr64
12384B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
12400B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
12416B	  %173:gpr32 = MOVi32imm 1
12448B	  %179:gpr64sp = ADDXri %stack.17.t_names, 0, 0
12464B	  %181:gpr64sp = ADDXri %stack.16.trecs, 0, 0
12480B	  %183:gpr64 = MOVi64imm 4636737291354636288
12496B	  %188:gpr64 = MOVaddr target-flags(aarch64-page) @.str.35, target-flags(aarch64-pageoff, aarch64-nc) @.str.35
12512B	  %215:gpr64 = MOVaddr target-flags(aarch64-page) @.str.36, target-flags(aarch64-pageoff, aarch64-nc) @.str.36
12528B	  %216:gpr64 = MOVaddr target-flags(aarch64-page) @.str.37, target-flags(aarch64-pageoff, aarch64-nc) @.str.37
12536B	  STRWui %173:gpr32, %stack.6.i, 0 :: (store 4 into %ir.i)
12544B	  %205:gpr64 = MOVaddr target-flags(aarch64-page) @.str.38, target-flags(aarch64-pageoff, aarch64-nc) @.str.38

12560B	bb.72.for.cond195:
	; predecessors: %bb.71, %bb.77
	  successors: %bb.73(0x7c000000), %bb.78(0x04000000); %bb.73(96.88%), %bb.78(3.12%)

12576B	  %174:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
12592B	  dead $wzr = SUBSWri %174:gpr32common, 10, 0, implicit-def $nzcv
12608B	  Bcc 12, %bb.78, implicit killed $nzcv
12624B	  B %bb.73

12640B	bb.73.for.body198:
	; predecessors: %bb.72
	  successors: %bb.74(0x40000000), %bb.75(0x40000000); %bb.74(50.00%), %bb.75(50.00%)

12656B	  %177:gpr64 = LDRSWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
12672B	  %178:gpr64 = UBFMXri %177:gpr64, 61, 60
12704B	  %182:fpr64 = LDRDroX %181:gpr64sp, %178:gpr64, 0, 0 :: (load 8 from %ir.arrayidx204)
12752B	  %186:fpr64 = LDRDui %393:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
12760B	  %180:gpr64 = LDRXroX %179:gpr64sp, %178:gpr64, 0, 0 :: (load 8 from %ir.arrayidx200)
12768B	  %184:fpr64 = COPY %183:gpr64
12776B	  %185:fpr64 = FMULDrr %182:fpr64, %184:fpr64
12784B	  %187:fpr64 = FDIVDrr %185:fpr64, %186:fpr64
12792B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
12800B	  $x0 = COPY %188:gpr64
12816B	  $x1 = COPY %180:gpr64
12832B	  $d0 = COPY %182:fpr64
12848B	  $d1 = COPY %187:fpr64
12864B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0
12880B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
12896B	  %190:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
12912B	  dead $wzr = SUBSWri %190:gpr32common, 4, 0, implicit-def $nzcv
12928B	  Bcc 1, %bb.75, implicit killed $nzcv
12944B	  B %bb.74

12960B	bb.74.if.then210:
	; predecessors: %bb.73
	  successors: %bb.77(0x80000000); %bb.77(100.00%)

12976B	  %207:fpr64 = LDRDui %393:gpr64sp, 3 :: (dereferenceable load 8 from %ir.arrayidx211)
12992B	  %208:fpr64 = LDRDui %393:gpr64sp, 4 :: (dereferenceable load 8 from %ir.arrayidx212, align 16)
13040B	  %211:fpr64 = COPY %183:gpr64
13072B	  %213:fpr64 = LDRDui %393:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
13080B	  %209:fpr64 = FSUBDrr %207:fpr64, %208:fpr64
13088B	  STRDui %209:fpr64, %393:gpr64sp, 11 :: (store 8 into %ir.t2)
13096B	  %212:fpr64 = FMULDrr %209:fpr64, %211:fpr64
13104B	  %214:fpr64 = FDIVDrr %212:fpr64, %213:fpr64
13112B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
13120B	  $x0 = COPY %215:gpr64
13136B	  $x1 = COPY %216:gpr64
13152B	  $d0 = COPY %209:fpr64
13168B	  $d1 = COPY %214:fpr64
13184B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0
13200B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
13216B	  B %bb.77

13232B	bb.75.if.else217:
	; predecessors: %bb.73
	  successors: %bb.76(0x40000000), %bb.77(0x40000000); %bb.76(50.00%), %bb.77(50.00%)

13248B	  %192:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
13264B	  dead $wzr = SUBSWri %192:gpr32common, 7, 0, implicit-def $nzcv
13280B	  Bcc 1, %bb.77, implicit killed $nzcv
13296B	  B %bb.76

13312B	bb.76.if.then220:
	; predecessors: %bb.75
	  successors: %bb.77(0x80000000); %bb.77(100.00%)

13328B	  %194:fpr64 = LDRDui %393:gpr64sp, 5 :: (dereferenceable load 8 from %ir.arrayidx221)
13344B	  %195:fpr64 = LDRDui %393:gpr64sp, 6 :: (dereferenceable load 8 from %ir.arrayidx222, align 16)
13376B	  %197:fpr64 = LDRDui %393:gpr64sp, 7 :: (dereferenceable load 8 from %ir.arrayidx224)
13424B	  %200:fpr64 = COPY %183:gpr64
13456B	  %202:fpr64 = LDRDui %393:gpr64sp, 15 :: (dereferenceable load 8 from %ir.tmax)
13460B	  %196:fpr64 = FSUBDrr %194:fpr64, %195:fpr64
13464B	  %198:fpr64 = FSUBDrr %196:fpr64, %197:fpr64
13472B	  STRDui %198:fpr64, %393:gpr64sp, 11 :: (store 8 into %ir.t2)
13480B	  %201:fpr64 = FMULDrr %198:fpr64, %200:fpr64
13488B	  %203:fpr64 = FDIVDrr %201:fpr64, %202:fpr64
13496B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
13504B	  $x0 = COPY %215:gpr64
13520B	  $x1 = COPY %205:gpr64
13536B	  $d0 = COPY %198:fpr64
13552B	  $d1 = COPY %203:fpr64
13568B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0
13584B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

13600B	bb.77.for.inc231:
	; predecessors: %bb.75, %bb.76, %bb.74
	  successors: %bb.72(0x80000000); %bb.72(100.00%)

13616B	  %218:gpr32common = LDRWui %stack.6.i, 0 :: (dereferenceable load 4 from %ir.i)
13632B	  %219:gpr32common = nsw ADDWri %218:gpr32common, 1, 0
13648B	  STRWui %219:gpr32common, %stack.6.i, 0 :: (store 4 into %ir.i)
13664B	  B %bb.72

13680B	bb.78.if.end234:
	; predecessors: %bb.65, %bb.72

13712B	  $w0 = COPY $wzr
13728B	  RET_ReallyLR implicit $w0

# End machine code for function main.

Before post-MI-sched:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-116]
  fi#1: size=4, align=4, at location [SP-120]
  fi#2: size=8, align=8, at location [SP-128]
  fi#3: size=4, align=4, at location [SP-132]
  fi#4: size=4, align=4, at location [SP-136]
  fi#5: size=4, align=4, at location [SP-140]
  fi#6: size=4, align=4, at location [SP-144]
  fi#7: size=4, align=4, at location [SP-148]
  fi#8: size=4, align=4, at location [SP-152]
  fi#9: size=8, align=8, at location [SP-160]
  fi#10: size=8, align=8, at location [SP-168]
  fi#11: size=8, align=8, at location [SP-176]
  fi#12: size=1, align=4, at location [SP-180]
  fi#13: size=4, align=4, at location [SP-184]
  fi#14: size=4, align=4, at location [SP-188]
  fi#15: size=8, align=8, at location [SP-200]
  fi#16: size=88, align=16, at location [SP-288]
  fi#17: size=88, align=16, at location [SP-384]
  fi#18: size=8, align=8, at location [SP-392]
  fi#19: size=4, align=4, at location [SP-396]
  fi#20: size=8, align=8, at location [SP-104]
  fi#21: size=8, align=8, at location [SP-8]
  fi#22: size=8, align=8, at location [SP-16]
  fi#23: size=8, align=8, at location [SP-24]
  fi#24: size=8, align=8, at location [SP-32]
  fi#25: size=8, align=8, at location [SP-40]
  fi#26: size=8, align=8, at location [SP-48]
  fi#27: size=8, align=8, at location [SP-56]
  fi#28: size=8, align=8, at location [SP-64]
  fi#29: size=8, align=8, at location [SP-72]
  fi#30: size=8, align=8, at location [SP-80]
  fi#31: size=8, align=8, at location [SP-88]
  fi#32: size=8, align=8, at location [SP-96]
Constant Pool:
  cp#0: 4.000000e-02, align=8
Function Live Ins: $w0, $x1

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $w0, $x1, $x27, $x28, $x25, $x26, $x23, $x24, $x21, $x22, $x19, $x20, $lr
  $sp = frame-setup SUBXri $sp, 480, 0
  frame-setup STPXi killed $x28, killed $x27, $sp, 48 :: (store 8 into %stack.32), (store 8 into %stack.31)
  frame-setup STPXi killed $x26, killed $x25, $sp, 50 :: (store 8 into %stack.30), (store 8 into %stack.29)
  frame-setup STPXi killed $x24, killed $x23, $sp, 52 :: (store 8 into %stack.28), (store 8 into %stack.27)
  frame-setup STPXi killed $x22, killed $x21, $sp, 54 :: (store 8 into %stack.26), (store 8 into %stack.25)
  frame-setup STPXi killed $x20, killed $x19, $sp, 56 :: (store 8 into %stack.24), (store 8 into %stack.23)
  frame-setup STPXi killed $fp, killed $lr, $sp, 58 :: (store 8 into %stack.22), (store 8 into %stack.21)
  $fp = frame-setup ADDXri $sp, 464, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  frame-setup CFI_INSTRUCTION offset $w19, -24
  frame-setup CFI_INSTRUCTION offset $w20, -32
  frame-setup CFI_INSTRUCTION offset $w21, -40
  frame-setup CFI_INSTRUCTION offset $w22, -48
  frame-setup CFI_INSTRUCTION offset $w23, -56
  frame-setup CFI_INSTRUCTION offset $w24, -64
  frame-setup CFI_INSTRUCTION offset $w25, -72
  frame-setup CFI_INSTRUCTION offset $w26, -80
  frame-setup CFI_INSTRUCTION offset $w27, -88
  frame-setup CFI_INSTRUCTION offset $w28, -96
  $x8 = ADDXri $sp, 192, 0
  STPWi renamable $w0, $wzr, $fp, -26 :: (store 4 into %ir.retval), (store 4 into %ir.argc.addr)
  STRXui killed renamable $x1, renamable $x8, 20 :: (store 8 into %ir.argv.addr)
  STRXui $xzr, killed renamable $x8, 14 :: (store 8 into %ir.nelt_tot)
  STURWi $wzr, $fp, -168 :: (store 4 into %ir.ifmortar)
  $x0 = ADRP target-flags(aarch64-page) @.str
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str, 0
  $x1 = ADRP target-flags(aarch64-page) @.str.1
  renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1, 0
  BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0
  STRXui renamable $x0, $sp, 11 :: (store 8 into %ir.fp)
  renamable $x20 = ADRP target-flags(aarch64-page) @timeron
  CBZX killed renamable $x0, %bb.2

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $x20
  $w8 = MOVZWi 1, 0
  $x9 = ADRP target-flags(aarch64-page) @.str.2
  renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.2, 0
  $x10 = ADRP target-flags(aarch64-page) @.str.3
  renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.3, 0
  $x11 = ADRP target-flags(aarch64-page) @.str.4
  renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @.str.4, 0
  $x12 = ADRP target-flags(aarch64-page) @.str.5
  renamable $x12 = ADDXri $x12, target-flags(aarch64-pageoff, aarch64-nc) @.str.5, 0
  $x13 = ADRP target-flags(aarch64-page) @.str.6
  renamable $x13 = ADDXri $x13, target-flags(aarch64-pageoff, aarch64-nc) @.str.6, 0
  $x14 = ADRP target-flags(aarch64-page) @.str.7
  renamable $x14 = ADDXri $x14, target-flags(aarch64-pageoff, aarch64-nc) @.str.7, 0
  STRWui killed renamable $w8, renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
  $x8 = ADRP target-flags(aarch64-page) @.str.8
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.8, 0
  STPXi renamable $x9, renamable $x10, $sp, 13 :: (store 8 into %ir.arrayidx1, align 16), (store 8 into %ir.arrayidx)
  $x9 = ADRP target-flags(aarch64-page) @.str.9
  renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.9, 0
  STPXi renamable $x11, renamable $x12, $sp, 15 :: (store 8 into %ir.arrayidx3, align 16), (store 8 into %ir.arrayidx2)
  $x10 = ADRP target-flags(aarch64-page) @.str.10
  renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.10, 0
  STPXi renamable $x13, renamable $x14, $sp, 17 :: (store 8 into %ir.arrayidx5, align 16), (store 8 into %ir.arrayidx4)
  renamable $x0 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
  STPXi renamable $x8, renamable $x9, $sp, 19 :: (store 8 into %ir.arrayidx7, align 16), (store 8 into %ir.arrayidx6)
  $x8 = ADRP target-flags(aarch64-page) @.str.11
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.11, 0
  STPXi renamable $x10, renamable $x8, $sp, 21 :: (store 8 into %ir.arrayidx9, align 16), (store 8 into %ir.arrayidx8)
  BL @fclose, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  B %bb.3

bb.2.if.else:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $x20
  STRWui $wzr, renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)

bb.3.if.end:
; predecessors: %bb.2, %bb.1
  successors: %bb.4(0x50000000), %bb.11(0x30000000); %bb.4(62.50%), %bb.11(37.50%)
  liveins: $x20
  $x0 = ADRP target-flags(aarch64-page) @.str.12
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.12, 0
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  $x0 = ADRP target-flags(aarch64-page) @.str.13
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.13, 0
  $x1 = ADRP target-flags(aarch64-page) @.str.1
  renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1, 0
  BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0
  STRXui renamable $x0, $sp, 11 :: (store 8 into %ir.fp)
  renamable $x23 = ADRP target-flags(aarch64-page) @fre
  renamable $x21 = ADRP target-flags(aarch64-page) @niter
  renamable $x22 = ADRP target-flags(aarch64-page) @nmxh
  renamable $x19 = ADRP target-flags(aarch64-page) @alpha
  CBZX killed renamable $x0, %bb.11

bb.4.if.then14:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)
  liveins: $x19, $x20, $x22, $x23
  $x0 = ADRP target-flags(aarch64-page) @.str.14
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.14, 0
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  renamable $x0 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
  $x1 = ADRP target-flags(aarch64-page) @.str.15
  renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.15, 0
  $x2 = ADRP target-flags(aarch64-page) @fre
  renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @fre, 0
  BL @fscanf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  STRWui killed renamable $w0, $sp, 21 :: (store 4 into %ir.result)

bb.5.while.cond:
; predecessors: %bb.4, %bb.5
  successors: %bb.5(0x7c000000), %bb.6(0x04000000); %bb.5(96.88%), %bb.6(3.12%)
  liveins: $x19, $x20, $x22, $x23
  renamable $x0 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
  BL @fgetc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w0
  dead $wzr = SUBSWri killed renamable $w0, 10, 0, implicit-def $nzcv
  Bcc 1, %bb.5, implicit $nzcv

bb.6.while.end:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $x19, $x20, $x22, $x23
  renamable $x0 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
  $x1 = ADRP target-flags(aarch64-page) @.str.15
  renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.15, 0
  $x2 = ADRP target-flags(aarch64-page) @niter
  renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @niter, 0
  BL @fscanf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  STRWui killed renamable $w0, $sp, 21 :: (store 4 into %ir.result)

bb.7.while.cond20:
; predecessors: %bb.6, %bb.7
  successors: %bb.7(0x7c000000), %bb.8(0x04000000); %bb.7(96.88%), %bb.8(3.12%)
  liveins: $x19, $x20, $x22, $x23
  renamable $x0 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
  BL @fgetc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w0
  dead $wzr = SUBSWri killed renamable $w0, 10, 0, implicit-def $nzcv
  Bcc 1, %bb.7, implicit $nzcv

bb.8.while.end24:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $x19, $x20, $x22, $x23
  renamable $x0 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
  $x1 = ADRP target-flags(aarch64-page) @.str.15
  renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.15, 0
  $x2 = ADRP target-flags(aarch64-page) @nmxh
  renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @nmxh, 0
  BL @fscanf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  STRWui killed renamable $w0, $sp, 21 :: (store 4 into %ir.result)

bb.9.while.cond26:
; predecessors: %bb.8, %bb.9
  successors: %bb.9(0x7c000000), %bb.10(0x04000000); %bb.9(96.88%), %bb.10(3.12%)
  liveins: $x19, $x20, $x22, $x23
  renamable $x0 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
  BL @fgetc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w0
  dead $wzr = SUBSWri killed renamable $w0, 10, 0, implicit-def $nzcv
  Bcc 1, %bb.9, implicit $nzcv

bb.10.while.end30:
; predecessors: %bb.9
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $x19, $x20, $x22, $x23
  renamable $x0 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
  $x1 = ADRP target-flags(aarch64-page) @.str.16
  renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.16, 0
  $x2 = ADRP target-flags(aarch64-page) @alpha
  renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @alpha, 0
  BL @fscanf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  renamable $x8 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
  STRWui killed renamable $w0, $sp, 21 :: (store 4 into %ir.result)
  $w9 = MOVZWi 85, 0
  STURBBi killed renamable $w9, $fp, -164 :: (store 1 into %ir.Class, align 4)
  $x0 = ORRXrs $xzr, killed $x8, 0
  BL @fclose, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  renamable $x21 = ADRP target-flags(aarch64-page) @niter
  B %bb.12

bb.11.if.else33:
; predecessors: %bb.3
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23
  $x0 = ADRP target-flags(aarch64-page) @.str.17
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.17, 0
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  $w8 = MOVZWi 5, 0
  $w9 = MOVZWi 200, 0
  $w10 = MOVZWi 10, 0
  $x11 = MOVZXi 63963, 0
  $x11 = MOVKXi $x11(tied-def 0), 27262, 16
  $x11 = MOVKXi $x11(tied-def 0), 29884, 32
  $x11 = MOVKXi $x11(tied-def 0), 16307, 48
  $w12 = MOVZWi 66, 0
  STRWui killed renamable $w8, renamable $x23, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (store 4 into @fre)
  STRWui killed renamable $w9, renamable $x21, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (store 4 into @niter)
  STRWui killed renamable $w10, renamable $x22, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (store 4 into @nmxh)
  STRXui killed renamable $x11, renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @alpha :: (store 8 into @alpha)
  STURBBi killed renamable $w12, $fp, -164 :: (store 1 into %ir.Class, align 4)

bb.12.if.end35:
; predecessors: %bb.11, %bb.10
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23
  renamable $d0 = FMOVDi 96
  renamable $d1 = FMOVDi 28
  BL @pow, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $d1, implicit-def $sp, implicit-def $d0
  renamable $x8 = ADRP target-flags(aarch64-page) %const.0
  renamable $d1 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  renamable $x8 = ADRP target-flags(aarch64-page) @dlmin
  STRDui renamable $d0, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @dlmin :: (store 8 into @dlmin)
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1
  renamable $x24 = ADRP target-flags(aarch64-page) @dtime
  STRDui killed renamable $d0, renamable $x24, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (store 8 into @dtime)
  $x0 = ADRP target-flags(aarch64-page) @.str.18
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.18, 0
  $w1 = MOVZWi 7, 0
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0
  renamable $w1 = LDRWui killed renamable $x23, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (dereferenceable load 4 from @fre)
  $x0 = ADRP target-flags(aarch64-page) @.str.19
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.19, 0
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0
  renamable $w1 = LDRWui killed renamable $x21, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
  renamable $d0 = LDRDui killed renamable $x24, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
  $x0 = ADRP target-flags(aarch64-page) @.str.20
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.20, 0
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp, implicit-def dead $w0
  renamable $w1 = LDRWui killed renamable $x22, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
  $x0 = ADRP target-flags(aarch64-page) @.str.21
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.21, 0
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0
  renamable $d0 = LDRDui killed renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @alpha :: (dereferenceable load 8 from @alpha)
  $x0 = ADRP target-flags(aarch64-page) @.str.22
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.22, 0
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w0
  BL @top_constants, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  $w8 = MOVZWi 1, 0

bb.13.for.cond:
; predecessors: %bb.12, %bb.14
  successors: %bb.14(0x7c000000), %bb.15(0x04000000); %bb.14(96.88%), %bb.15(3.12%)
  liveins: $x20, $w8
  STURWi renamable $w8, $fp, -128 :: (store 4 into %ir.i)
  $w8 = ORRWrs $wzr, killed renamable $w8, 0
  dead $wzr = SUBSWri killed renamable $w8, 10, 0, implicit-def $nzcv
  Bcc 12, %bb.15, implicit $nzcv

bb.14.for.body:
; predecessors: %bb.13
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $x20
  renamable $w0 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
  BL @timer_clear, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  renamable $w8 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  B %bb.13

bb.15.for.end:
; predecessors: %bb.13
  successors: %bb.16(0x50000000), %bb.17(0x30000000); %bb.16(62.50%), %bb.17(37.50%)
  liveins: $x20
  renamable $w8 = LDRWui killed renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW killed renamable $w8, %bb.17

bb.16.if.then43:
; predecessors: %bb.15
  successors: %bb.17(0x80000000); %bb.17(100.00%)

  $w0 = MOVZWi 2, 0
  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp

bb.17.if.end44:
; predecessors: %bb.15, %bb.16
  successors: %bb.18(0x50000000), %bb.19(0x30000000); %bb.18(62.50%), %bb.19(37.50%)

  $x20 = ADDXri $sp, 192, 0
  BL @create_initial_grid, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  renamable $x8 = ADRP target-flags(aarch64-page) @ntot
  renamable $w1 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  $x19 = ADRP target-flags(aarch64-page) @ta1
  renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @ta1, 0
  $d0 = FMOVD0
  $x0 = ORRXrs $xzr, $x19, 0
  BL @r_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
  renamable $x27 = ADRP target-flags(aarch64-page) @nelt
  renamable $w8 = LDRWui renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  renamable $w8 = ADDWrs killed renamable $w8, renamable $w8, 1
  renamable $w1 = UBFMWri killed renamable $w8, 29, 28
  $x0 = ADRP target-flags(aarch64-page) @sje
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sje, 0
  $w2 = MOVNWi 0, 0
  BL @nr_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit-def $sp
  BL @coef, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  BL @geom1, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  BL @setdef, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  BL @setpcmo_pre, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  renamable $x8 = ADRP target-flags(aarch64-page) @time
  STRXui $xzr, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
  BL @mortar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  BL @prepwork, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  $x0 = SUBXri $fp, 168, 0
  $w1 = ORRWrs $wzr, $wzr, 0
  BL @adaptation, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp
  renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  renamable $w8 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW killed renamable $w8, %bb.19

bb.18.if.then47:
; predecessors: %bb.17
  successors: %bb.19(0x80000000); %bb.19(100.00%)
  liveins: $x19, $x20, $x27
  $w0 = MOVZWi 2, 0
  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp

bb.19.if.end48:
; predecessors: %bb.17, %bb.18
  successors: %bb.20(0x80000000); %bb.20(100.00%)
  liveins: $x19, $x20, $x27
  $w0 = MOVZWi 1, 0
  BL @timer_clear, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  renamable $x8 = ADRP target-flags(aarch64-page) @time
  STRXui $xzr, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
  STURWi $wzr, $fp, -116 :: (store 4 into %ir.step)
  $w23 = MOVZWi 1000, 0, implicit-def $x23
  $x24 = ADRP target-flags(aarch64-page) @ta2
  renamable $x24 = ADDXri $x24, target-flags(aarch64-pageoff, aarch64-nc) @ta2, 0
  $x28 = ADRP target-flags(aarch64-page) @size_e
  renamable $x28 = ADDXri $x28, target-flags(aarch64-pageoff, aarch64-nc) @size_e, 0
  $x21 = ADRP target-flags(aarch64-page) @trhs
  renamable $x21 = ADDXri $x21, target-flags(aarch64-pageoff, aarch64-nc) @trhs, 0
  $w26 = MOVZWi 200, 0, implicit-def $x26
  $w22 = MOVZWi 24, 0, implicit-def $x22
  $x25 = ADRP target-flags(aarch64-page) @cbc
  renamable $x25 = ADDXri $x25, target-flags(aarch64-pageoff, aarch64-nc) @cbc, 0
  renamable $x10 = ADRP target-flags(aarch64-page) @niter

bb.20.for.cond49:
; predecessors: %bb.19, %bb.65
  successors: %bb.21(0x7c000000), %bb.66(0x04000000); %bb.21(96.88%), %bb.66(3.12%)
  liveins: $x10, $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w8 = LDURWi $fp, -116 :: (dereferenceable load 4 from %ir.step)
  renamable $w9 = LDRWui killed renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv
  Bcc 12, %bb.66, implicit $nzcv

bb.21.for.body51:
; predecessors: %bb.20
  successors: %bb.22(0x40000000), %bb.28(0x40000000); %bb.22(50.00%), %bb.28(50.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w8 = LDURWi $fp, -116 :: (dereferenceable load 4 from %ir.step)
  dead $wzr = SUBSWri killed renamable $w8, 1, 0, implicit-def $nzcv
  Bcc 1, %bb.28, implicit $nzcv

bb.22.if.then53:
; predecessors: %bb.21
  successors: %bb.23(0x80000000); %bb.23(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $x8 = ADRP target-flags(aarch64-page) @ntot
  renamable $w1 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  $d0 = FMOVD0
  $x0 = ORRXrs $xzr, $x19, 0
  BL @r_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
  renamable $x8 = ADRP target-flags(aarch64-page) @time
  STRXui $xzr, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
  STRXui $xzr, killed renamable $x20, 14 :: (store 8 into %ir.nelt_tot)
  $w8 = MOVZWi 1, 0

bb.23.for.cond54:
; predecessors: %bb.22, %bb.26
  successors: %bb.24(0x7c000000), %bb.27(0x04000000); %bb.24(96.88%), %bb.27(3.12%)
  liveins: $x19, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28, $w8
  STURWi renamable $w8, $fp, -128 :: (store 4 into %ir.i)
  $w8 = ORRWrs $wzr, killed renamable $w8, 0
  dead $wzr = SUBSWri killed renamable $w8, 10, 0, implicit-def $nzcv
  Bcc 12, %bb.27, implicit $nzcv

bb.24.for.body56:
; predecessors: %bb.23
  successors: %bb.25(0x40000000), %bb.26(0x40000000); %bb.25(50.00%), %bb.26(50.00%)
  liveins: $x19, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w8 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri killed renamable $w8, 2, 0, implicit-def $nzcv
  Bcc 0, %bb.26, implicit $nzcv

bb.25.if.then58:
; predecessors: %bb.24
  successors: %bb.26(0x80000000); %bb.26(100.00%)
  liveins: $x19, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w0 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
  BL @timer_clear, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp

bb.26.for.inc60:
; predecessors: %bb.24, %bb.25
  successors: %bb.23(0x80000000); %bb.23(100.00%)
  liveins: $x19, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w8 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  B %bb.23

bb.27.for.end62:
; predecessors: %bb.23
  successors: %bb.28(0x80000000); %bb.28(100.00%)
  liveins: $x19, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  $w0 = MOVZWi 1, 0
  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp

bb.28.if.end63:
; predecessors: %bb.21, %bb.27
  successors: %bb.29(0x50000000), %bb.30(0x30000000); %bb.29(62.50%), %bb.30(37.50%)
  liveins: $x19, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w0 = LDURWi $fp, -168 :: (dereferenceable load 4 from %ir.ifmortar)
  BL @convect, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  renamable $x20 = ADRP target-flags(aarch64-page) @timeron
  renamable $w8 = LDRWui renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW killed renamable $w8, %bb.30

bb.29.if.then65:
; predecessors: %bb.28
  successors: %bb.30(0x80000000); %bb.30(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  $w0 = MOVZWi 9, 0
  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp

bb.30.if.end66:
; predecessors: %bb.28, %bb.29
  successors: %bb.31(0x80000000); %bb.31(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  $x0 = ADRP target-flags(aarch64-page) @tmort
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @tmort, 0
  $x1 = ORRXrs $xzr, $x19, 0
  BL @transf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
  STURWi $wzr, $fp, -120 :: (store 4 into %ir.ie)

bb.31.for.cond67:
; predecessors: %bb.30, %bb.32
  successors: %bb.32(0x7c000000), %bb.33(0x04000000); %bb.32(96.88%), %bb.33(3.12%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w8 = LDURWi $fp, -120 :: (dereferenceable load 4 from %ir.ie)
  renamable $w9 = LDRWui renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv
  Bcc 10, %bb.33, implicit $nzcv

bb.32.for.body69:
; predecessors: %bb.31
  successors: %bb.31(0x80000000); %bb.31(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $x8 = LDURSWi $fp, -120 :: (dereferenceable load 4 from %ir.ie)
  renamable $w2 = LDRWroX renamable $x28, renamable $x8, 0, 1 :: (load 4 from %ir.arrayidx75)
  renamable $x8 = MADDXrrr killed renamable $x8, renamable $x23, $xzr
  $x0 = ADDXrs renamable $x24, renamable $x8, 0
  $x1 = ADDXrs renamable $x19, killed renamable $x8, 0
  BL @laplacian, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $w2, implicit-def $sp
  renamable $w8 = LDURWi $fp, -120 :: (dereferenceable load 4 from %ir.ie)
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  STURWi killed renamable $w8, $fp, -120 :: (store 4 into %ir.ie)
  B %bb.31

bb.33.for.end78:
; predecessors: %bb.31
  successors: %bb.34(0x80000000); %bb.34(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  STURWi $wzr, $fp, -120 :: (store 4 into %ir.ie)

bb.34.for.cond79:
; predecessors: %bb.33, %bb.44
  successors: %bb.35(0x7c000000), %bb.45(0x04000000); %bb.35(96.88%), %bb.45(3.12%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w8 = LDURWi $fp, -120 :: (dereferenceable load 4 from %ir.ie)
  renamable $w9 = LDRWui renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv
  Bcc 10, %bb.45, implicit $nzcv

bb.35.for.body81:
; predecessors: %bb.34
  successors: %bb.36(0x80000000); %bb.36(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  STURWi $wzr, $fp, -136 :: (store 4 into %ir.k)

bb.36.for.cond82:
; predecessors: %bb.35, %bb.43
  successors: %bb.37(0x7c000000), %bb.44(0x04000000); %bb.37(96.88%), %bb.44(3.12%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w8 = LDURWi $fp, -136 :: (dereferenceable load 4 from %ir.k)
  dead $wzr = SUBSWri killed renamable $w8, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.44, implicit $nzcv

bb.37.for.body84:
; predecessors: %bb.36
  successors: %bb.38(0x80000000); %bb.38(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  STURWi $wzr, $fp, -132 :: (store 4 into %ir.j)

bb.38.for.cond85:
; predecessors: %bb.37, %bb.42
  successors: %bb.39(0x7c000000), %bb.43(0x04000000); %bb.39(96.88%), %bb.43(3.12%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w8 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.j)
  dead $wzr = SUBSWri killed renamable $w8, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.43, implicit $nzcv

bb.39.for.body87:
; predecessors: %bb.38
  successors: %bb.40(0x80000000); %bb.40(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  STURWi $wzr, $fp, -128 :: (store 4 into %ir.i)

bb.40.for.cond88:
; predecessors: %bb.39, %bb.41
  successors: %bb.41(0x7c000000), %bb.42(0x04000000); %bb.41(96.88%), %bb.42(3.12%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w8 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri killed renamable $w8, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.42, implicit $nzcv

bb.41.for.body90:
; predecessors: %bb.40
  successors: %bb.40(0x80000000); %bb.40(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $x8 = LDURSWi $fp, -120 :: (dereferenceable load 4 from %ir.ie)
  renamable $x9, renamable $x10 = LDPSWi $fp, -34 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
  renamable $x8 = MADDXrrr killed renamable $x8, renamable $x23, $xzr
  renamable $x9 = MADDXrrr killed renamable $x9, renamable $x26, $xzr
  $x11 = ADDXrs renamable $x21, renamable $x8, 0
  $x8 = ADDXrs renamable $x24, killed renamable $x8, 0
  $x11 = ADDXrs killed renamable $x11, renamable $x9, 0
  renamable $x12 = LDURSWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
  $x8 = ADDXrs killed renamable $x8, killed renamable $x9, 0
  renamable $w9 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
  renamable $x10 = ADDXrs killed renamable $x10, renamable $x10, 2
  renamable $x12 = UBFMXri killed renamable $x12, 61, 60
  renamable $x10 = UBFMXri killed renamable $x10, 61, 60
  $x11 = ADDXrs killed renamable $x11, renamable $x10, 0
  $x8 = ADDXrs killed renamable $x8, killed renamable $x10, 0
  renamable $d0 = LDRDroX renamable $x11, renamable $x12, 0, 0 :: (load 8 from %ir.arrayidx98)
  renamable $d1 = LDRDroX killed renamable $x8, renamable $x12, 0, 0 :: (load 8 from %ir.arrayidx106)
  renamable $w8 = nsw ADDWri killed renamable $w9, 1, 0
  renamable $d0 = FSUBDrr killed renamable $d0, killed renamable $d1
  STRDroX killed renamable $d0, killed renamable $x11, killed renamable $x12, 0, 0 :: (store 8 into %ir.arrayidx114)
  STURWi killed renamable $w8, $fp, -128 :: (store 4 into %ir.i)
  B %bb.40

bb.42.for.inc118:
; predecessors: %bb.40
  successors: %bb.38(0x80000000); %bb.38(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w8 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.j)
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  STURWi killed renamable $w8, $fp, -132 :: (store 4 into %ir.j)
  B %bb.38

bb.43.for.inc121:
; predecessors: %bb.38
  successors: %bb.36(0x80000000); %bb.36(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w8 = LDURWi $fp, -136 :: (dereferenceable load 4 from %ir.k)
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  STURWi killed renamable $w8, $fp, -136 :: (store 4 into %ir.k)
  B %bb.36

bb.44.for.inc124:
; predecessors: %bb.36
  successors: %bb.34(0x80000000); %bb.34(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w8 = LDURWi $fp, -120 :: (dereferenceable load 4 from %ir.ie)
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  STURWi killed renamable $w8, $fp, -120 :: (store 4 into %ir.ie)
  B %bb.34

bb.45.for.end126:
; predecessors: %bb.34
  successors: %bb.46(0x50000000), %bb.47(0x30000000); %bb.46(62.50%), %bb.47(37.50%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  $x0 = ADRP target-flags(aarch64-page) @rmor
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @rmor, 0
  $x1 = ORRXrs $xzr, $x21, 0
  BL @transfb, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
  renamable $w8 = LDRWui renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW killed renamable $w8, %bb.47

bb.46.if.then128:
; predecessors: %bb.45
  successors: %bb.47(0x80000000); %bb.47(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  $w0 = MOVZWi 9, 0
  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp

bb.47.if.end129:
; predecessors: %bb.45, %bb.46
  successors: %bb.48(0x80000000); %bb.48(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  STURWi $wzr, $fp, -120 :: (store 4 into %ir.ie)

bb.48.for.cond130:
; predecessors: %bb.47, %bb.54
  successors: %bb.49(0x7c000000), %bb.55(0x04000000); %bb.49(96.88%), %bb.55(3.12%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w8 = LDURWi $fp, -120 :: (dereferenceable load 4 from %ir.ie)
  renamable $w9 = LDRWui renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv
  Bcc 10, %bb.55, implicit $nzcv

bb.49.for.body132:
; predecessors: %bb.48
  successors: %bb.50(0x80000000); %bb.50(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  STURWi $wzr, $fp, -124 :: (store 4 into %ir.iside)

bb.50.for.cond133:
; predecessors: %bb.49, %bb.53
  successors: %bb.51(0x7c000000), %bb.54(0x04000000); %bb.51(96.88%), %bb.54(3.12%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w9, $w8 = LDPWi $fp, -31 :: (dereferenceable load 4 from %ir.iside), (dereferenceable load 4 from %ir.ie)
  $w8 = KILL $w8, implicit-def $x8
  $x8 = SBFMXri $x8, 0, 31
  dead $wzr = SUBSWri killed renamable $w9, 5, 0, implicit-def $nzcv
  Bcc 12, %bb.54, implicit $nzcv

bb.51.for.body135:
; predecessors: %bb.50
  successors: %bb.52(0x30000000), %bb.53(0x50000000); %bb.52(37.50%), %bb.53(62.50%)
  liveins: $x8, $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $x9 = LDURSWi $fp, -124 :: (dereferenceable load 4 from %ir.iside)
  renamable $x8 = MADDXrrr killed renamable $x8, renamable $x22, renamable $x25
  renamable $w8 = LDRWroX killed renamable $x8, killed renamable $x9, 0, 1 :: (load 4 from %ir.arrayidx139)
  CBNZW killed renamable $w8, %bb.53

bb.52.if.then141:
; predecessors: %bb.51
  successors: %bb.53(0x80000000); %bb.53(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w1, $w8 = LDPWi $fp, -31 :: (dereferenceable load 4 from %ir.ie), (dereferenceable load 4 from %ir.iside)
  $w8 = KILL $w8, implicit-def $x8
  $x8 = SBFMXri $x8, 0, 31
  renamable $x0 = MADDXrrr killed renamable $x8, renamable $x23, renamable $x21
  $d0 = FMOVD0
  BL @facev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp

bb.53.for.inc146:
; predecessors: %bb.51, %bb.52
  successors: %bb.50(0x80000000); %bb.50(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w8 = LDURWi $fp, -124 :: (dereferenceable load 4 from %ir.iside)
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  STURWi killed renamable $w8, $fp, -124 :: (store 4 into %ir.iside)
  B %bb.50

bb.54.for.inc149:
; predecessors: %bb.50
  successors: %bb.48(0x80000000); %bb.48(100.00%)
  liveins: $x8, $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit killed $x8
  STURWi killed renamable $w8, $fp, -120 :: (store 4 into %ir.ie)
  B %bb.48

bb.55.for.end151:
; predecessors: %bb.48
  successors: %bb.56(0x50000000), %bb.57(0x30000000); %bb.56(62.50%), %bb.57(37.50%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $x8 = ADRP target-flags(aarch64-page) @nmor
  renamable $w2 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  $x0 = ADRP target-flags(aarch64-page) @rmor
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @rmor, 0
  $x1 = ADRP target-flags(aarch64-page) @tmmor
  renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @tmmor, 0
  BL @col2, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $w2, implicit-def $sp
  renamable $w0 = LDURWi $fp, -168 :: (dereferenceable load 4 from %ir.ifmortar)
  BL @diffusion, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  renamable $w8 = LDRWui renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW killed renamable $w8, %bb.57

bb.56.if.then153:
; predecessors: %bb.55
  successors: %bb.57(0x80000000); %bb.57(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  $w0 = MOVZWi 10, 0
  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp

bb.57.if.end154:
; predecessors: %bb.55, %bb.56
  successors: %bb.58(0x50000000), %bb.59(0x30000000); %bb.58(62.50%), %bb.59(37.50%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $x8 = ADRP target-flags(aarch64-page) @ntot
  renamable $w2 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  $x0 = ORRXrs $xzr, $x19, 0
  $x1 = ADRP target-flags(aarch64-page) @t
  renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @t, 0
  BL @add2, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $w2, implicit-def $sp
  renamable $w8 = LDRWui killed renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW killed renamable $w8, %bb.59

bb.58.if.then156:
; predecessors: %bb.57
  successors: %bb.59(0x80000000); %bb.59(100.00%)
  liveins: $x19, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  $w0 = MOVZWi 10, 0
  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp

bb.59.if.end157:
; predecessors: %bb.57, %bb.58
  successors: %bb.60(0x50000000), %bb.63(0x30000000); %bb.60(62.50%), %bb.63(37.50%)
  liveins: $x19, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $x8 = ADRP target-flags(aarch64-page) @time
  $x9 = ORRXrs $xzr, $x8, 0
  renamable $d0 = LDRDui $x8, target-flags(aarch64-pageoff, aarch64-nc) @time :: (dereferenceable load 8 from @time)
  renamable $x8 = ADRP target-flags(aarch64-page) @dtime
  renamable $d1 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
  renamable $w8 = LDURWi $fp, -116 :: (dereferenceable load 4 from %ir.step)
  renamable $d0 = FADDDrr killed renamable $d0, killed renamable $d1
  STRDui killed renamable $d0, killed renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
  CBZW killed renamable $w8, %bb.63

bb.60.land.lhs.true:
; predecessors: %bb.59
  successors: %bb.61(0x40000000), %bb.63(0x40000000); %bb.61(50.00%), %bb.63(50.00%)
  liveins: $x19, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w8 = LDURWi $fp, -116 :: (dereferenceable load 4 from %ir.step)
  renamable $x9 = ADRP target-flags(aarch64-page) @fre
  renamable $w9 = LDRWui killed renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (dereferenceable load 4 from @fre)
  renamable $w10 = SDIVWr renamable $w8, renamable $w9
  renamable $w9 = nsw MADDWrrr killed renamable $w10, killed renamable $w9, $wzr
  $wzr = SUBSWrs killed renamable $w9, killed renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv
  Bcc 1, %bb.63, implicit $nzcv

bb.61.if.then161:
; predecessors: %bb.60
  successors: %bb.62(0x40000000), %bb.65(0x40000000); %bb.62(50.00%), %bb.65(50.00%)
  liveins: $x19, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w8 = LDURWi $fp, -116 :: (dereferenceable load 4 from %ir.step)
  renamable $x10 = ADRP target-flags(aarch64-page) @niter
  renamable $w9 = LDRWui renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv
  Bcc 0, %bb.65, implicit $nzcv

bb.62.if.then163:
; predecessors: %bb.61
  successors: %bb.64(0x80000000); %bb.64(100.00%)
  liveins: $x19, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w1 = LDURWi $fp, -116 :: (dereferenceable load 4 from %ir.step)
  $x0 = SUBXri $fp, 168, 0
  BL @adaptation, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp
  B %bb.64

bb.63.if.else165:
; predecessors: %bb.59, %bb.60
  successors: %bb.64(0x80000000); %bb.64(100.00%)
  liveins: $x19, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  STURWi $wzr, $fp, -168 :: (store 4 into %ir.ifmortar)

bb.64.if.end166:
; predecessors: %bb.63, %bb.62
  successors: %bb.65(0x80000000); %bb.65(100.00%)
  liveins: $x28, $x19, $x21, $x22, $x23, $x24, $x25, $x26, $x27
  renamable $x10 = ADRP target-flags(aarch64-page) @niter

bb.65.if.end166:
; predecessors: %bb.61, %bb.64
  successors: %bb.20(0x80000000); %bb.20(100.00%)
  liveins: $x10, $x19, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $s0 = LDRSui renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @nelt, implicit-def $d0 :: (dereferenceable load 4 from @nelt)
  renamable $w8 = LDURWi $fp, -116 :: (dereferenceable load 4 from %ir.step)
  $x9 = ADDXri $sp, 192, 0
  renamable $d1 = LDRDui renamable $x9, 14 :: (dereferenceable load 8 from %ir.nelt_tot)
  renamable $q0 = SSHLLv2i32_shift killed renamable $d0, 0
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  renamable $d0 = SCVTFv1i64 renamable $d0, implicit killed $q0
  renamable $d0 = FADDDrr killed renamable $d1, killed renamable $d0
  $x20 = ADDXri $sp, 192, 0
  STRDui killed renamable $d0, killed renamable $x9, 14 :: (store 8 into %ir.nelt_tot)
  STURWi killed renamable $w8, $fp, -116 :: (store 4 into %ir.step)
  B %bb.20

bb.66.for.end170:
; predecessors: %bb.20
  successors: %bb.67(0x50000000), %bb.80(0x30000000); %bb.67(62.50%), %bb.80(37.50%)

  $w0 = MOVZWi 1, 0
  $w19 = MOVZWi 1, 0
  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  $w0 = MOVZWi 1, 0
  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0
  $x26 = ADDXri $sp, 192, 0
  STRDui killed renamable $d0, renamable $x26, 15 :: (store 8 into %ir.tmax)
  $x0 = SUBXri $fp, 164, 0
  $x1 = SUBXri $fp, 172, 0
  BL @verify, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
  renamable $x8 = ADRP target-flags(aarch64-page) @nmxh
  renamable $w8 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
  $w9 = MOVZWi 125, 0
  renamable $d1, renamable $d0 = LDPDi renamable $x26, 14 :: (dereferenceable load 8 from %ir.nelt_tot), (dereferenceable load 8 from %ir.tmax)
  renamable $w8 = MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  $x9 = MOVZXi 33920, 32
  $x9 = MOVKXi $x9(tied-def 0), 16686, 48
  renamable $w8 = ADDWri killed renamable $w8, 125, 0
  renamable $d2 = SCVTFUWDri killed renamable $w8
  renamable $w1 = LDURSBWi $fp, -164 :: (dereferenceable load 1 from %ir.Class, align 4)
  renamable $x8 = ADRP target-flags(aarch64-page) @niter
  renamable $w5 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
  renamable $d1 = FMULDrr killed renamable $d1, killed renamable $d2
  $d2 = FMOVXDr killed $x9
  renamable $w7 = LDURWi $fp, -172 :: (dereferenceable load 4 from %ir.verified)
  renamable $d2 = FMULDrr renamable $d0, killed renamable $d2
  renamable $d1 = FDIVDrr killed renamable $d1, killed renamable $d2
  STRDui renamable $d1, renamable $x26, 16 :: (store 8 into %ir.mflops)
  $x8 = ADRP target-flags(aarch64-page) @.str.33
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.33, 0
  $x9 = ADRP target-flags(aarch64-page) @.str.32
  renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.32, 0
  $x10 = ADRP target-flags(aarch64-page) @.str.31
  renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.31, 0
  $x11 = ADRP target-flags(aarch64-page) @.str.30
  renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @.str.30, 0
  $x12 = ADRP target-flags(aarch64-page) @.str.29
  renamable $x12 = ADDXri $x12, target-flags(aarch64-pageoff, aarch64-nc) @.str.29, 0
  $x13 = ADRP target-flags(aarch64-page) @.str.28
  renamable $x13 = ADDXri $x13, target-flags(aarch64-pageoff, aarch64-nc) @.str.28, 0
  $x14 = ADRP target-flags(aarch64-page) @.str.27
  renamable $x14 = ADDXri $x14, target-flags(aarch64-pageoff, aarch64-nc) @.str.27, 0
  $x15 = ADRP target-flags(aarch64-page) @.str.26
  renamable $x15 = ADDXri $x15, target-flags(aarch64-pageoff, aarch64-nc) @.str.26, 0
  STPXi renamable $x9, renamable $x8, $sp, 7 :: (store 8 into stack + 64), (store 8 into stack + 56)
  $x8 = ADRP target-flags(aarch64-page) @.str.25
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.25, 0
  STPXi renamable $x11, renamable $x10, $sp, 5 :: (store 8 into stack + 48), (store 8 into stack + 40)
  $x0 = ADRP target-flags(aarch64-page) @.str.23
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.23, 0
  STPXi renamable $x13, renamable $x12, $sp, 3 :: (store 8 into stack + 32), (store 8 into stack + 24)
  $x6 = ADRP target-flags(aarch64-page) @.str.24
  renamable $x6 = ADDXri $x6, target-flags(aarch64-pageoff, aarch64-nc) @.str.24, 0
  STPXi renamable $x15, renamable $x14, $sp, 1 :: (store 8 into stack + 16), (store 8 into stack + 8)
  STRXui killed renamable $x8, $sp, 0 :: (store 8 into stack)
  $w2 = MOVZWi 7, 0
  $w3 = ORRWrs $wzr, $wzr, 0
  $w4 = ORRWrs $wzr, $wzr, 0
  BL @print_results, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit $w4, implicit $w5, implicit $d0, implicit $d1, implicit $x6, implicit $w7, implicit-def $sp
  renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  renamable $w8 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW killed renamable $w8, %bb.80

bb.67.if.then179:
; predecessors: %bb.66
  successors: %bb.68(0x80000000); %bb.68(100.00%)
  liveins: $w19, $x26
  STURWi killed renamable $w19, $fp, -128 :: (store 4 into %ir.i)
  $x19 = ADDXri $sp, 192, 0

bb.68.for.cond180:
; predecessors: %bb.67, %bb.69
  successors: %bb.69(0x7c000000), %bb.70(0x04000000); %bb.69(96.88%), %bb.70(3.12%)
  liveins: $x19, $x26
  renamable $w8 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri killed renamable $w8, 10, 0, implicit-def $nzcv
  Bcc 12, %bb.70, implicit $nzcv

bb.69.for.body183:
; predecessors: %bb.68
  successors: %bb.68(0x80000000); %bb.68(100.00%)
  liveins: $x19, $x26
  renamable $w0 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0
  renamable $x8 = LDURSWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
  renamable $w9 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
  STRDroX killed renamable $d0, renamable $x19, killed renamable $x8, 0, 1 :: (store 8 into %ir.arrayidx186)
  renamable $w8 = nsw ADDWri killed renamable $w9, 1, 0
  STURWi killed renamable $w8, $fp, -128 :: (store 4 into %ir.i)
  B %bb.68

bb.70.for.end189:
; predecessors: %bb.68
  successors: %bb.71(0x50000000), %bb.72(0x30000000); %bb.71(62.50%), %bb.72(37.50%)
  liveins: $x26
  renamable $d0 = LDRDui renamable $x26, 15 :: (dereferenceable load 8 from %ir.tmax)
  FCMPDri killed renamable $d0, implicit-def $nzcv
  Bcc 1, %bb.72, implicit $nzcv

bb.71.if.then192:
; predecessors: %bb.70
  successors: %bb.72(0x80000000); %bb.72(100.00%)
  liveins: $x26
  $x8 = MOVZXi 16368, 48
  STRXui killed renamable $x8, renamable $x26, 15 :: (store 8 into %ir.tmax)

bb.72.if.end193:
; predecessors: %bb.70, %bb.71
  successors: %bb.73(0x80000000); %bb.73(100.00%)
  liveins: $x26
  $x0 = ADRP target-flags(aarch64-page) @.str.34
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.34, 0
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  $w8 = MOVZWi 1, 0
  $x23 = ADDXri $sp, 96, 0
  $x24 = ADDXri $sp, 192, 0
  $x25 = MOVZXi 16473, 48
  $x19 = ADRP target-flags(aarch64-page) @.str.35
  renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str.35, 0
  $x20 = ADRP target-flags(aarch64-page) @.str.36
  renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @.str.36, 0
  $x21 = ADRP target-flags(aarch64-page) @.str.37
  renamable $x21 = ADDXri $x21, target-flags(aarch64-pageoff, aarch64-nc) @.str.37, 0
  STURWi killed renamable $w8, $fp, -128 :: (store 4 into %ir.i)
  $x22 = ADRP target-flags(aarch64-page) @.str.38
  renamable $x22 = ADDXri $x22, target-flags(aarch64-pageoff, aarch64-nc) @.str.38, 0

bb.73.for.cond195:
; predecessors: %bb.72, %bb.79
  successors: %bb.74(0x7c000000), %bb.80(0x04000000); %bb.74(96.88%), %bb.80(3.12%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26
  renamable $w8 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri killed renamable $w8, 10, 0, implicit-def $nzcv
  Bcc 12, %bb.80, implicit $nzcv

bb.74.for.body198:
; predecessors: %bb.73
  successors: %bb.75(0x40000000), %bb.76(0x40000000); %bb.75(50.00%), %bb.76(50.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26
  renamable $x8 = LDURSWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
  renamable $x8 = UBFMXri killed renamable $x8, 61, 60
  renamable $d0 = LDRDroX renamable $x24, renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx204)
  renamable $d1 = LDRDui renamable $x26, 15 :: (dereferenceable load 8 from %ir.tmax)
  renamable $x1 = LDRXroX renamable $x23, killed renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx200)
  $d2 = FMOVXDr $x25
  renamable $d2 = FMULDrr renamable $d0, killed renamable $d2
  renamable $d1 = FDIVDrr killed renamable $d2, killed renamable $d1
  $x0 = ORRXrs $xzr, $x19, 0
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w0
  renamable $w8 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri killed renamable $w8, 4, 0, implicit-def $nzcv
  Bcc 1, %bb.76, implicit $nzcv

bb.75.if.then210:
; predecessors: %bb.74
  successors: %bb.78(0x80000000); %bb.78(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26
  renamable $d0, renamable $d1 = LDPDi renamable $x26, 3 :: (dereferenceable load 8 from %ir.arrayidx211), (dereferenceable load 8 from %ir.arrayidx212, align 16)
  $d2 = FMOVXDr $x25
  renamable $d3 = LDRDui renamable $x26, 15 :: (dereferenceable load 8 from %ir.tmax)
  renamable $d0 = FSUBDrr killed renamable $d0, killed renamable $d1
  STRDui renamable $d0, renamable $x26, 11 :: (store 8 into %ir.t2)
  renamable $d1 = FMULDrr renamable $d0, killed renamable $d2
  renamable $d1 = FDIVDrr killed renamable $d1, killed renamable $d3
  $x0 = ORRXrs $xzr, $x20, 0
  $x1 = ORRXrs $xzr, $x21, 0
  B %bb.78

bb.76.if.else217:
; predecessors: %bb.74
  successors: %bb.77(0x40000000), %bb.79(0x40000000); %bb.77(50.00%), %bb.79(50.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26
  renamable $w8 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri killed renamable $w8, 7, 0, implicit-def $nzcv
  Bcc 1, %bb.79, implicit $nzcv

bb.77.if.then220:
; predecessors: %bb.76
  successors: %bb.78(0x80000000); %bb.78(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26
  renamable $d0, renamable $d1 = LDPDi renamable $x26, 5 :: (dereferenceable load 8 from %ir.arrayidx221), (dereferenceable load 8 from %ir.arrayidx222, align 16)
  renamable $d2 = LDRDui renamable $x26, 7 :: (dereferenceable load 8 from %ir.arrayidx224)
  $d3 = FMOVXDr $x25
  renamable $d4 = LDRDui renamable $x26, 15 :: (dereferenceable load 8 from %ir.tmax)
  renamable $d0 = FSUBDrr killed renamable $d0, killed renamable $d1
  renamable $d0 = FSUBDrr killed renamable $d0, killed renamable $d2
  STRDui renamable $d0, renamable $x26, 11 :: (store 8 into %ir.t2)
  renamable $d1 = FMULDrr renamable $d0, killed renamable $d3
  renamable $d1 = FDIVDrr killed renamable $d1, killed renamable $d4
  $x0 = ORRXrs $xzr, $x20, 0
  $x1 = ORRXrs $xzr, $x22, 0

bb.78.for.inc231:
; predecessors: %bb.77, %bb.75
  successors: %bb.79(0x80000000); %bb.79(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x0, $x1, $d0, $d1
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w0

bb.79.for.inc231:
; predecessors: %bb.76, %bb.78
  successors: %bb.73(0x80000000); %bb.73(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26
  renamable $w8 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  STURWi killed renamable $w8, $fp, -128 :: (store 4 into %ir.i)
  B %bb.73

bb.80.if.end234:
; predecessors: %bb.66, %bb.73

  $w0 = ORRWrs $wzr, $wzr, 0
  $fp, $lr = frame-destroy LDPXi $sp, 58 :: (load 8 from %stack.22), (load 8 from %stack.21)
  $x20, $x19 = frame-destroy LDPXi $sp, 56 :: (load 8 from %stack.24), (load 8 from %stack.23)
  $x22, $x21 = frame-destroy LDPXi $sp, 54 :: (load 8 from %stack.26), (load 8 from %stack.25)
  $x24, $x23 = frame-destroy LDPXi $sp, 52 :: (load 8 from %stack.28), (load 8 from %stack.27)
  $x26, $x25 = frame-destroy LDPXi $sp, 50 :: (load 8 from %stack.30), (load 8 from %stack.29)
  $x28, $x27 = frame-destroy LDPXi $sp, 48 :: (load 8 from %stack.32), (load 8 from %stack.31)
  $sp = frame-destroy ADDXri $sp, 480, 0
  RET undef $lr, implicit $w0

# End machine code for function main.

********** MI Scheduling **********
main:%bb.0 entry
  From: STRXui renamable $x0, $sp, 11 :: (store 8 into %ir.fp)
    To: CBZX killed renamable $x0, %bb.2
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   STRXui renamable $x0, $sp, 11 :: (store 8 into %ir.fp)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   renamable $x20 = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   CBZX killed renamable $x0, %bb.2
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Disabled scoreboard hazard recognizer
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x20 = ADRP target-flags(aarch64-page) @timeron
  Ready @0c
  TopQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STRXui renamable $x0, $sp, 11 :: (store 8 into %ir.fp)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(1):   renamable $x20 = ADRP target-flags(aarch64-page) @timeron
SU(0):   STRXui renamable $x0, $sp, 11 :: (store 8 into %ir.fp)

********** MI Scheduling **********
main:%bb.0 entry
  From: $x8 = ADDXri $sp, 192, 0
    To: BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0
 RegionInstrs: 9
ScheduleDAGMI::schedule starting
SU(0):   $x8 = ADDXri $sp, 192, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(3): Data Latency=1 Reg=$x8
    SU(2): Data Latency=1 Reg=$x8
SU(1):   STPWi renamable $w0, $wzr, $fp, -26 :: (store 4 into %ir.retval), (store 4 into %ir.argc.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Anti Latency=0
SU(2):   STRXui renamable $x1, renamable $x8, 20 :: (store 8 into %ir.argv.addr)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(7): Anti Latency=0
SU(3):   STRXui $xzr, renamable $x8, 14 :: (store 8 into %ir.nelt_tot)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
SU(4):   STURWi $wzr, $fp, -168 :: (store 4 into %ir.ifmortar)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(5):   $x0 = ADRP target-flags(aarch64-page) @.str
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Predecessors:
    SU(1): Anti Latency=0
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x0
SU(6):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(7):   $x1 = ADRP target-flags(aarch64-page) @.str.1
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(2): Anti Latency=0
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x1
SU(8):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=1 Artificial
    SU(6): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 3
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 3
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $x8 = ADDXri $sp, 192, 0
  Ready @0c
  TopQ.A BotLatency SU(0) 3c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 1 3 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 3
  Cand SU(4) ORDER                              
  Cand SU(1) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) STPWi renamable $w0, $wzr, $fp, -26 :: (store 4 into %ir.retval), (store 4 into %ir.argc.addr)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 2 3 5 
  TopQ.A RemainingLatency 0 + 2c > CritPath 3
  Cand SU(4) ORDER                              
  Cand SU(2) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) STRXui renamable $x1, renamable $x8, 20 :: (store 8 into %ir.argv.addr)
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  TopQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 5 3 7 
  TopQ.A RemainingLatency 0 + 3c > CritPath 3
  Cand SU(4) ORDER                              
  Cand SU(5) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) $x0 = ADRP target-flags(aarch64-page) @.str
  Ready @3c
  TopQ.A BotLatency SU(5) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 7 3 6 
  TopQ.A RemainingLatency 0 + 4c > CritPath 3
  Cand SU(4) ORDER                              
  Cand SU(7) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) $x1 = ADRP target-flags(aarch64-page) @.str.1
  Ready @4c
  TopQ.A BotLatency SU(7) 2c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 6 3 8 
  TopQ.A RemainingLatency 0 + 5c > CritPath 3
  Cand SU(4) ORDER                              
  Cand SU(6) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str, 0
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 8 3 
  TopQ.A RemainingLatency 0 + 6c > CritPath 3
  Cand SU(4) ORDER                              
  Cand SU(8) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1, 0
  Ready @6c
  TopQ.A TopLatency SU(8) 2c
  TopQ.A BotLatency SU(8) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 3 
  TopQ.A RemainingLatency 0 + 7c > CritPath 3
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) STRXui $xzr, renamable $x8, 14 :: (store 8 into %ir.nelt_tot)
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) STURWi $wzr, $fp, -168 :: (store 4 into %ir.ifmortar)
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   $x8 = ADDXri $sp, 192, 0
SU(1):   STPWi renamable $w0, $wzr, $fp, -26 :: (store 4 into %ir.retval), (store 4 into %ir.argc.addr)
SU(2):   STRXui renamable $x1, renamable $x8, 20 :: (store 8 into %ir.argv.addr)
SU(5):   $x0 = ADRP target-flags(aarch64-page) @.str
SU(7):   $x1 = ADRP target-flags(aarch64-page) @.str.1
SU(6):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str, 0
SU(8):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1, 0
SU(3):   STRXui $xzr, renamable $x8, 14 :: (store 8 into %ir.nelt_tot)
SU(4):   STURWi $wzr, $fp, -168 :: (store 4 into %ir.ifmortar)

********** MI Scheduling **********
main:%bb.0 entry
  From: frame-setup STPXi killed $x28, killed $x27, $sp, 48 :: (store 8 into %stack.32), (store 8 into %stack.31)
    To: frame-setup CFI_INSTRUCTION def_cfa $w29, 16
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   frame-setup STPXi $x28, $x27, $sp, 48 :: (store 8 into %stack.32), (store 8 into %stack.31)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   frame-setup STPXi $x26, $x25, $sp, 50 :: (store 8 into %stack.30), (store 8 into %stack.29)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   frame-setup STPXi $x24, $x23, $sp, 52 :: (store 8 into %stack.28), (store 8 into %stack.27)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(3):   frame-setup STPXi $x22, $x21, $sp, 54 :: (store 8 into %stack.26), (store 8 into %stack.25)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(4):   frame-setup STPXi $x20, $x19, $sp, 56 :: (store 8 into %stack.24), (store 8 into %stack.23)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(5):   frame-setup STPXi $fp, $lr, $sp, 58 :: (store 8 into %stack.22), (store 8 into %stack.21)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Successors:
    SU(6): Anti Latency=0
SU(6):   $fp = frame-setup ADDXri $sp, 464, 0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(5): Anti Latency=0
ExitSU:   frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 
  TopQ.A RemainingLatency 0 + 0c > CritPath 0
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) frame-setup STPXi $x28, $x27, $sp, 48 :: (store 8 into %stack.32), (store 8 into %stack.31)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 1 2 3 4 
  TopQ.A RemainingLatency 0 + 1c > CritPath 0
  Cand SU(5) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) frame-setup STPXi $x26, $x25, $sp, 50 :: (store 8 into %stack.30), (store 8 into %stack.29)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 2 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 0
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) frame-setup STPXi $x24, $x23, $sp, 52 :: (store 8 into %stack.28), (store 8 into %stack.27)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 0
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) frame-setup STPXi $x22, $x21, $sp, 54 :: (store 8 into %stack.26), (store 8 into %stack.25)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 
  TopQ.A RemainingLatency 0 + 4c > CritPath 0
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) frame-setup STPXi $x20, $x19, $sp, 56 :: (store 8 into %stack.24), (store 8 into %stack.23)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) frame-setup STPXi $fp, $lr, $sp, 58 :: (store 8 into %stack.22), (store 8 into %stack.21)
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) $fp = frame-setup ADDXri $sp, 464, 0
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   frame-setup STPXi $x28, $x27, $sp, 48 :: (store 8 into %stack.32), (store 8 into %stack.31)
SU(1):   frame-setup STPXi $x26, $x25, $sp, 50 :: (store 8 into %stack.30), (store 8 into %stack.29)
SU(2):   frame-setup STPXi $x24, $x23, $sp, 52 :: (store 8 into %stack.28), (store 8 into %stack.27)
SU(3):   frame-setup STPXi $x22, $x21, $sp, 54 :: (store 8 into %stack.26), (store 8 into %stack.25)
SU(4):   frame-setup STPXi $x20, $x19, $sp, 56 :: (store 8 into %stack.24), (store 8 into %stack.23)
SU(5):   frame-setup STPXi $fp, $lr, $sp, 58 :: (store 8 into %stack.22), (store 8 into %stack.21)
SU(6):   $fp = frame-setup ADDXri $sp, 464, 0

Fixup kills for %bb.0
********** MI Scheduling **********
main:%bb.1 if.then
  From: $w8 = MOVZWi 1, 0
    To: BL @fclose, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 28
ScheduleDAGMI::schedule starting
SU(0):   $w8 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(14): Out  Latency=1
    SU(13): Data Latency=1 Reg=$w8
SU(1):   $x9 = ADRP target-flags(aarch64-page) @.str.2
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x9
SU(2):   renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.2, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x9
  Successors:
    SU(17): Out  Latency=1
    SU(16): Data Latency=1 Reg=$x9
SU(3):   $x10 = ADRP target-flags(aarch64-page) @.str.3
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x10
SU(4):   renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.3, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x10
  Successors:
    SU(20): Out  Latency=1
    SU(16): Data Latency=1 Reg=$x10
SU(5):   $x11 = ADRP target-flags(aarch64-page) @.str.4
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x11
SU(6):   renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @.str.4, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x11
  Successors:
    SU(19): Data Latency=1 Reg=$x11
SU(7):   $x12 = ADRP target-flags(aarch64-page) @.str.5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x12
SU(8):   renamable $x12 = ADDXri $x12, target-flags(aarch64-pageoff, aarch64-nc) @.str.5, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x12
  Successors:
    SU(19): Data Latency=1 Reg=$x12
SU(9):   $x13 = ADRP target-flags(aarch64-page) @.str.6
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x13
SU(10):   renamable $x13 = ADDXri $x13, target-flags(aarch64-pageoff, aarch64-nc) @.str.6, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x13
  Successors:
    SU(22): Data Latency=1 Reg=$x13
SU(11):   $x14 = ADRP target-flags(aarch64-page) @.str.7
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x14
SU(12):   renamable $x14 = ADDXri $x14, target-flags(aarch64-pageoff, aarch64-nc) @.str.7, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x14
  Successors:
    SU(22): Data Latency=1 Reg=$x14
SU(13):   STRWui renamable $w8, renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Data Latency=1 Reg=$w8
  Successors:
    SU(14): Anti Latency=0
SU(14):   $x8 = ADRP target-flags(aarch64-page) @.str.8
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(13): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    SU(15): Out  Latency=1
    SU(15): Data Latency=1 Reg=$x8
SU(15):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.8, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 3
  Predecessors:
    SU(14): Out  Latency=1
    SU(14): Data Latency=1 Reg=$x8
  Successors:
    SU(25): Out  Latency=1
    SU(24): Data Latency=1 Reg=$x8
SU(16):   STPXi renamable $x9, renamable $x10, $sp, 13 :: (store 8 into %ir.arrayidx1, align 16), (store 8 into %ir.arrayidx)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 4
  Predecessors:
    SU(4): Data Latency=1 Reg=$x10
    SU(2): Data Latency=1 Reg=$x9
  Successors:
    SU(17): Anti Latency=0
    SU(20): Anti Latency=0
SU(17):   $x9 = ADRP target-flags(aarch64-page) @.str.9
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 4
  Predecessors:
    SU(16): Anti Latency=0
    SU(2): Out  Latency=1
  Successors:
    SU(18): Out  Latency=1
    SU(18): Data Latency=1 Reg=$x9
SU(18):   renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.9, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 3
  Predecessors:
    SU(17): Out  Latency=1
    SU(17): Data Latency=1 Reg=$x9
  Successors:
    SU(24): Data Latency=1 Reg=$x9
SU(19):   STPXi renamable $x11, renamable $x12, $sp, 15 :: (store 8 into %ir.arrayidx3, align 16), (store 8 into %ir.arrayidx2)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=$x12
    SU(6): Data Latency=1 Reg=$x11
SU(20):   $x10 = ADRP target-flags(aarch64-page) @.str.10
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(16): Anti Latency=0
    SU(4): Out  Latency=1
  Successors:
    SU(21): Out  Latency=1
    SU(21): Data Latency=1 Reg=$x10
SU(21):   renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.10, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
    SU(20): Out  Latency=1
    SU(20): Data Latency=1 Reg=$x10
  Successors:
    SU(27): Data Latency=1 Reg=$x10
SU(22):   STPXi renamable $x13, renamable $x14, $sp, 17 :: (store 8 into %ir.arrayidx5, align 16), (store 8 into %ir.arrayidx4)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=$x14
    SU(10): Data Latency=1 Reg=$x13
SU(23):   renamable $x0 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(24):   STPXi renamable $x8, renamable $x9, $sp, 19 :: (store 8 into %ir.arrayidx7, align 16), (store 8 into %ir.arrayidx6)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(18): Data Latency=1 Reg=$x9
    SU(15): Data Latency=1 Reg=$x8
  Successors:
    SU(25): Anti Latency=0
SU(25):   $x8 = ADRP target-flags(aarch64-page) @.str.11
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(24): Anti Latency=0
    SU(15): Out  Latency=1
  Successors:
    SU(26): Out  Latency=1
    SU(26): Data Latency=1 Reg=$x8
SU(26):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.11, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(25): Out  Latency=1
    SU(25): Data Latency=1 Reg=$x8
  Successors:
    SU(27): Data Latency=1 Reg=$x8
SU(27):   STPXi renamable $x10, renamable $x8, $sp, 21 :: (store 8 into %ir.arrayidx9, align 16), (store 8 into %ir.arrayidx8)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(26): Data Latency=1 Reg=$x8
    SU(21): Data Latency=1 Reg=$x10
ExitSU:   BL @fclose, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(23): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 23 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $x9 = ADRP target-flags(aarch64-page) @.str.2
  Ready @0c
  TopQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 23 3 5 7 9 11 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(3) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) $x10 = ADRP target-flags(aarch64-page) @.str.3
  Ready @1c
  TopQ.A BotLatency SU(3) 6c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 23 2 5 7 9 11 4 
  TopQ.A RemainingLatency 0 + 2c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $w8 = MOVZWi 1, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 23 2 5 7 9 11 13 
  TopQ.A RemainingLatency 0 + 3c > CritPath 6
  Cand SU(4) ORDER                              
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.2, 0
  Ready @3c
  TopQ.A TopLatency SU(2) 1c
  TopQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 23 13 5 7 9 11 
  TopQ.A RemainingLatency 0 + 4c > CritPath 6
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.3, 0
  Ready @4c
  TopQ.A BotLatency SU(4) 5c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 23 13 5 7 9 16 
  TopQ.A RemainingLatency 0 + 5c > CritPath 6
  Cand SU(11) ORDER                              
  Cand SU(23) TOP-PATH                  4 cycles 
  Cand SU(13) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(13) STRWui renamable $w8, renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 23 16 5 7 9 14 
  TopQ.A RemainingLatency 0 + 6c > CritPath 6
  Cand SU(11) ORDER                              
  Cand SU(23) TOP-PATH                  4 cycles 
  Cand SU(16) ORDER                              
  Cand SU(14) ORDER                              
Pick Top ORDER     
Scheduling SU(14) $x8 = ADRP target-flags(aarch64-page) @.str.8
  Ready @6c
  TopQ.A BotLatency SU(14) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 23 16 5 7 9 15 
  TopQ.A RemainingLatency 0 + 7c > CritPath 6
  Cand SU(11) ORDER                              
  Cand SU(23) TOP-PATH                  4 cycles 
  Cand SU(16) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(16) STPXi renamable $x9, renamable $x10, $sp, 13 :: (store 8 into %ir.arrayidx1, align 16), (store 8 into %ir.arrayidx)
  Ready @7c
  TopQ.A TopLatency SU(16) 2c
  TopQ.A BotLatency SU(16) 4c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 23 15 5 7 9 17 20 
  TopQ.A RemainingLatency 0 + 8c > CritPath 6
  Cand SU(11) ORDER                              
  Cand SU(23) TOP-PATH                  4 cycles 
  Cand SU(17) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(17) $x9 = ADRP target-flags(aarch64-page) @.str.9
  Ready @8c
  TopQ.A BotLatency SU(17) 4c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 23 15 5 7 9 20 18 
  TopQ.A RemainingLatency 0 + 9c > CritPath 6
  Cand SU(11) ORDER                              
  Cand SU(23) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(23) renamable $x0 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
  Ready @9c
  TopQ.A BotLatency SU(23) 4c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 18 15 5 7 9 20 
  TopQ.A RemainingLatency 0 + 10c > CritPath 6
  Cand SU(11) ORDER                              
  Cand SU(18) TOP-PATH                  3 cycles 
  Cand SU(15) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(15) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.8, 0
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 18 20 5 7 9 
  TopQ.A RemainingLatency 0 + 11c > CritPath 6
  Cand SU(11) ORDER                              
  Cand SU(18) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(18) renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.9, 0
  Ready @11c
  TopQ.A TopLatency SU(18) 3c
  TopQ.A BotLatency SU(18) 3c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 9 20 5 7 24 
  TopQ.A RemainingLatency 0 + 12c > CritPath 6
  Cand SU(11) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) $x11 = ADRP target-flags(aarch64-page) @.str.4
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 9 20 24 7 6 
  TopQ.A RemainingLatency 0 + 13c > CritPath 6
  Cand SU(11) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(7) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(7) $x12 = ADRP target-flags(aarch64-page) @.str.5
  Ready @13c
  TopQ.A BotLatency SU(7) 2c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 9 20 24 6 8 
  TopQ.A RemainingLatency 0 + 14c > CritPath 6
  Cand SU(11) ORDER                              
  Cand SU(9) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(9) $x13 = ADRP target-flags(aarch64-page) @.str.6
  Ready @14c
  TopQ.A BotLatency SU(9) 2c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 8 20 24 6 10 
  TopQ.A RemainingLatency 0 + 15c > CritPath 6
  Cand SU(11) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(11) $x14 = ADRP target-flags(aarch64-page) @.str.7
  Ready @15c
  TopQ.A BotLatency SU(11) 2c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 8 20 24 6 12 
  TopQ.A RemainingLatency 0 + 16c > CritPath 6
  Cand SU(10) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(20) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(20) $x10 = ADRP target-flags(aarch64-page) @.str.10
  Ready @16c
  TopQ.A BotLatency SU(20) 2c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 8 12 24 6 21 
  TopQ.A RemainingLatency 0 + 17c > CritPath 6
  Cand SU(10) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(24) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(24) STPXi renamable $x8, renamable $x9, $sp, 19 :: (store 8 into %ir.arrayidx7, align 16), (store 8 into %ir.arrayidx6)
  Ready @17c
  TopQ.A TopLatency SU(24) 4c
  TopQ.A BotLatency SU(24) 2c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 8 12 21 6 25 
  TopQ.A RemainingLatency 0 + 18c > CritPath 6
  Cand SU(10) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(25) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(25) $x8 = ADRP target-flags(aarch64-page) @.str.11
  Ready @18c
  TopQ.A BotLatency SU(25) 2c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 8 12 21 6 26 
  TopQ.A RemainingLatency 0 + 19c > CritPath 6
  Cand SU(10) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @.str.4, 0
  Ready @19c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 8 12 21 26 
  TopQ.A RemainingLatency 0 + 20c > CritPath 6
  Cand SU(10) ORDER                              
  Cand SU(8) ORDER                              
Pick Top ORDER     
Scheduling SU(8) renamable $x12 = ADDXri $x12, target-flags(aarch64-pageoff, aarch64-nc) @.str.5, 0
  Ready @20c
  TopQ.A BotLatency SU(8) 1c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 26 12 21 19 
  TopQ.A RemainingLatency 0 + 21c > CritPath 6
  Cand SU(10) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(10) renamable $x13 = ADDXri $x13, target-flags(aarch64-pageoff, aarch64-nc) @.str.6, 0
  Ready @21c
  TopQ.A BotLatency SU(10) 1c
  *** Max MOps 1 at cycle 21
Cycle: 22 TopQ.A
TopQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 19 26 12 21 
  TopQ.A RemainingLatency 0 + 22c > CritPath 6
  Cand SU(19) ORDER                              
  Cand SU(26) TOP-PATH                  1 cycles 
  Cand SU(12) ORDER                              
Pick Top ORDER     
Scheduling SU(12) renamable $x14 = ADDXri $x14, target-flags(aarch64-pageoff, aarch64-nc) @.str.7, 0
  Ready @22c
  TopQ.A BotLatency SU(12) 1c
  *** Max MOps 1 at cycle 22
Cycle: 23 TopQ.A
TopQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 19 26 21 22 
  TopQ.A RemainingLatency 0 + 23c > CritPath 6
  Cand SU(19) ORDER                              
  Cand SU(26) TOP-PATH                  1 cycles 
  Cand SU(21) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(21) renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.10, 0
  Ready @23c
  TopQ.A BotLatency SU(21) 1c
  *** Max MOps 1 at cycle 23
Cycle: 24 TopQ.A
TopQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 19 26 22 
  TopQ.A RemainingLatency 0 + 24c > CritPath 6
  Cand SU(19) ORDER                              
  Cand SU(26) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(26) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.11, 0
  Ready @24c
  TopQ.A TopLatency SU(26) 5c
  TopQ.A BotLatency SU(26) 1c
  *** Max MOps 1 at cycle 24
Cycle: 25 TopQ.A
TopQ.A @25c
  Retired: 25
  Executed: 25c
  Critical: 25c, 25 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 19 22 27 
  TopQ.A RemainingLatency 0 + 25c > CritPath 6
  Cand SU(19) ORDER                              
Pick Top ORDER     
Scheduling SU(19) STPXi renamable $x11, renamable $x12, $sp, 15 :: (store 8 into %ir.arrayidx3, align 16), (store 8 into %ir.arrayidx2)
  Ready @25c
  *** Max MOps 1 at cycle 25
Cycle: 26 TopQ.A
TopQ.A @26c
  Retired: 26
  Executed: 26c
  Critical: 26c, 26 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 27 22 
  TopQ.A RemainingLatency 0 + 26c > CritPath 6
  Cand SU(27) ORDER                              
  Cand SU(22) ORDER                              
Pick Top ORDER     
Scheduling SU(22) STPXi renamable $x13, renamable $x14, $sp, 17 :: (store 8 into %ir.arrayidx5, align 16), (store 8 into %ir.arrayidx4)
  Ready @26c
  *** Max MOps 1 at cycle 26
Cycle: 27 TopQ.A
TopQ.A @27c
  Retired: 27
  Executed: 27c
  Critical: 27c, 27 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 27 
Pick Top ONLY1     
Scheduling SU(27) STPXi renamable $x10, renamable $x8, $sp, 21 :: (store 8 into %ir.arrayidx9, align 16), (store 8 into %ir.arrayidx8)
  Ready @27c
  TopQ.A TopLatency SU(27) 6c
  *** Max MOps 1 at cycle 27
Cycle: 28 TopQ.A
TopQ.A @28c
  Retired: 28
  Executed: 28c
  Critical: 28c, 28 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.1 ***
SU(1):   $x9 = ADRP target-flags(aarch64-page) @.str.2
SU(3):   $x10 = ADRP target-flags(aarch64-page) @.str.3
SU(0):   $w8 = MOVZWi 1, 0
SU(2):   renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.2, 0
SU(4):   renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.3, 0
SU(13):   STRWui renamable $w8, renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
SU(14):   $x8 = ADRP target-flags(aarch64-page) @.str.8
SU(16):   STPXi renamable $x9, renamable $x10, $sp, 13 :: (store 8 into %ir.arrayidx1, align 16), (store 8 into %ir.arrayidx)
SU(17):   $x9 = ADRP target-flags(aarch64-page) @.str.9
SU(23):   renamable $x0 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
SU(15):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.8, 0
SU(18):   renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.9, 0
SU(5):   $x11 = ADRP target-flags(aarch64-page) @.str.4
SU(7):   $x12 = ADRP target-flags(aarch64-page) @.str.5
SU(9):   $x13 = ADRP target-flags(aarch64-page) @.str.6
SU(11):   $x14 = ADRP target-flags(aarch64-page) @.str.7
SU(20):   $x10 = ADRP target-flags(aarch64-page) @.str.10
SU(24):   STPXi renamable $x8, renamable $x9, $sp, 19 :: (store 8 into %ir.arrayidx7, align 16), (store 8 into %ir.arrayidx6)
SU(25):   $x8 = ADRP target-flags(aarch64-page) @.str.11
SU(6):   renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @.str.4, 0
SU(8):   renamable $x12 = ADDXri $x12, target-flags(aarch64-pageoff, aarch64-nc) @.str.5, 0
SU(10):   renamable $x13 = ADDXri $x13, target-flags(aarch64-pageoff, aarch64-nc) @.str.6, 0
SU(12):   renamable $x14 = ADDXri $x14, target-flags(aarch64-pageoff, aarch64-nc) @.str.7, 0
SU(21):   renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.10, 0
SU(26):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.11, 0
SU(19):   STPXi renamable $x11, renamable $x12, $sp, 15 :: (store 8 into %ir.arrayidx3, align 16), (store 8 into %ir.arrayidx2)
SU(22):   STPXi renamable $x13, renamable $x14, $sp, 17 :: (store 8 into %ir.arrayidx5, align 16), (store 8 into %ir.arrayidx4)
SU(27):   STPXi renamable $x10, renamable $x8, $sp, 21 :: (store 8 into %ir.arrayidx9, align 16), (store 8 into %ir.arrayidx8)

Fixup kills for %bb.1
Fixup kills for %bb.2
********** MI Scheduling **********
main:%bb.3 if.end
  From: STRXui renamable $x0, $sp, 11 :: (store 8 into %ir.fp)
    To: CBZX killed renamable $x0, %bb.11
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   STRXui renamable $x0, $sp, 11 :: (store 8 into %ir.fp)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   renamable $x23 = ADRP target-flags(aarch64-page) @fre
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   renamable $x21 = ADRP target-flags(aarch64-page) @niter
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   renamable $x22 = ADRP target-flags(aarch64-page) @nmxh
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   renamable $x19 = ADRP target-flags(aarch64-page) @alpha
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   CBZX killed renamable $x0, %bb.11
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x23 = ADRP target-flags(aarch64-page) @fre
  Ready @0c
  TopQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 4 2 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(4) TOP-PATH                  1 cycles 
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) renamable $x21 = ADRP target-flags(aarch64-page) @niter
  Ready @1c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 4 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(4) TOP-PATH                  1 cycles 
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) renamable $x22 = ADRP target-flags(aarch64-page) @nmxh
  Ready @2c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(4) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $x19 = ADRP target-flags(aarch64-page) @alpha
  Ready @3c
  TopQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STRXui renamable $x0, $sp, 11 :: (store 8 into %ir.fp)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.3 ***
SU(1):   renamable $x23 = ADRP target-flags(aarch64-page) @fre
SU(2):   renamable $x21 = ADRP target-flags(aarch64-page) @niter
SU(3):   renamable $x22 = ADRP target-flags(aarch64-page) @nmxh
SU(4):   renamable $x19 = ADRP target-flags(aarch64-page) @alpha
SU(0):   STRXui renamable $x0, $sp, 11 :: (store 8 into %ir.fp)

********** MI Scheduling **********
main:%bb.3 if.end
  From: $x0 = ADRP target-flags(aarch64-page) @.str.13
    To: BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.13
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.13, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $x1 = ADRP target-flags(aarch64-page) @.str.1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x1
SU(3):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @.str.13
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) $x1 = ADRP target-flags(aarch64-page) @.str.1
  Ready @1c
  TopQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.13, 0
  Ready @2c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1, 0
  Ready @3c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.13
SU(2):   $x1 = ADRP target-flags(aarch64-page) @.str.1
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.13, 0
SU(3):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1, 0

********** MI Scheduling **********
main:%bb.3 if.end
  From: $x0 = ADRP target-flags(aarch64-page) @.str.12
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.12
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.12, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @.str.12
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.12, 0
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.12
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.12, 0

Fixup kills for %bb.3
********** MI Scheduling **********
main:%bb.4 if.then14
  From: renamable $x0 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
    To: BL @fscanf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $x0 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(1):   $x1 = ADRP target-flags(aarch64-page) @.str.15
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x1
SU(2):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.15, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $x2 = ADRP target-flags(aarch64-page) @fre
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x2
SU(4):   renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @fre, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fscanf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x0 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 4
  Cand SU(3) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) $x1 = ADRP target-flags(aarch64-page) @.str.15
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 4
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) $x2 = ADRP target-flags(aarch64-page) @fre
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 4
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.15, 0
  Ready @3c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @fre, 0
  Ready @4c
  TopQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   renamable $x0 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
SU(1):   $x1 = ADRP target-flags(aarch64-page) @.str.15
SU(3):   $x2 = ADRP target-flags(aarch64-page) @fre
SU(2):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.15, 0
SU(4):   renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @fre, 0

********** MI Scheduling **********
main:%bb.4 if.then14
  From: $x0 = ADRP target-flags(aarch64-page) @.str.14
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.14
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.14, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @.str.14
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.14, 0
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.14
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.14, 0

Fixup kills for %bb.4
Fixup kills for %bb.5
********** MI Scheduling **********
main:%bb.6 while.end
  From: renamable $x0 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
    To: BL @fscanf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $x0 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(1):   $x1 = ADRP target-flags(aarch64-page) @.str.15
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x1
SU(2):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.15, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $x2 = ADRP target-flags(aarch64-page) @niter
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x2
SU(4):   renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @niter, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fscanf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x0 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 4
  Cand SU(3) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) $x1 = ADRP target-flags(aarch64-page) @.str.15
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 4
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) $x2 = ADRP target-flags(aarch64-page) @niter
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 4
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.15, 0
  Ready @3c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @niter, 0
  Ready @4c
  TopQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   renamable $x0 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
SU(1):   $x1 = ADRP target-flags(aarch64-page) @.str.15
SU(3):   $x2 = ADRP target-flags(aarch64-page) @niter
SU(2):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.15, 0
SU(4):   renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @niter, 0

Fixup kills for %bb.6
Fixup kills for %bb.7
********** MI Scheduling **********
main:%bb.8 while.end24
  From: renamable $x0 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
    To: BL @fscanf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $x0 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(1):   $x1 = ADRP target-flags(aarch64-page) @.str.15
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x1
SU(2):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.15, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $x2 = ADRP target-flags(aarch64-page) @nmxh
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x2
SU(4):   renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @nmxh, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fscanf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x0 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 4
  Cand SU(3) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) $x1 = ADRP target-flags(aarch64-page) @.str.15
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 4
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) $x2 = ADRP target-flags(aarch64-page) @nmxh
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 4
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.15, 0
  Ready @3c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @nmxh, 0
  Ready @4c
  TopQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   renamable $x0 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
SU(1):   $x1 = ADRP target-flags(aarch64-page) @.str.15
SU(3):   $x2 = ADRP target-flags(aarch64-page) @nmxh
SU(2):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.15, 0
SU(4):   renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @nmxh, 0

Fixup kills for %bb.8
Fixup kills for %bb.9
********** MI Scheduling **********
main:%bb.10 while.end30
  From: renamable $x8 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
    To: BL @fclose, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=$x8
SU(1):   STRWui renamable $w0, $sp, 21 :: (store 4 into %ir.result)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(4): Anti Latency=0
SU(2):   $w9 = MOVZWi 85, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=$w9
SU(3):   STURBBi renamable $w9, $fp, -164 :: (store 1 into %ir.Class, align 4)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=$w9
SU(4):   $x0 = ORRXrs $xzr, $x8, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fclose, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) STRWui renamable $w0, $sp, 21 :: (store 4 into %ir.result)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $w9 = MOVZWi 85, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STURBBi renamable $w9, $fp, -164 :: (store 1 into %ir.Class, align 4)
  Ready @3c
  TopQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $x0 = ORRXrs $xzr, $x8, 0
  Ready @4c
  TopQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   renamable $x8 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
SU(1):   STRWui renamable $w0, $sp, 21 :: (store 4 into %ir.result)
SU(2):   $w9 = MOVZWi 85, 0
SU(3):   STURBBi renamable $w9, $fp, -164 :: (store 1 into %ir.Class, align 4)
SU(4):   $x0 = ORRXrs $xzr, $x8, 0

********** MI Scheduling **********
main:%bb.10 while.end30
  From: renamable $x0 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
    To: BL @fscanf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $x0 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(1):   $x1 = ADRP target-flags(aarch64-page) @.str.16
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x1
SU(2):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.16, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $x2 = ADRP target-flags(aarch64-page) @alpha
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x2
SU(4):   renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @alpha, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fscanf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x0 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 4
  Cand SU(3) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) $x1 = ADRP target-flags(aarch64-page) @.str.16
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 4
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) $x2 = ADRP target-flags(aarch64-page) @alpha
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 4
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.16, 0
  Ready @3c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @alpha, 0
  Ready @4c
  TopQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   renamable $x0 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
SU(1):   $x1 = ADRP target-flags(aarch64-page) @.str.16
SU(3):   $x2 = ADRP target-flags(aarch64-page) @alpha
SU(2):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.16, 0
SU(4):   renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @alpha, 0

Fixup kills for %bb.10
********** MI Scheduling **********
main:%bb.11 if.else33
  From: $w8 = MOVZWi 5, 0
    To: End RegionInstrs: 13
ScheduleDAGMI::schedule starting
SU(0):   $w8 = MOVZWi 5, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(8): Data Latency=1 Reg=$w8
SU(1):   $w9 = MOVZWi 200, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(9): Data Latency=1 Reg=$w9
SU(2):   $w10 = MOVZWi 10, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(10): Data Latency=1 Reg=$w10
SU(3):   $x11 = MOVZXi 63963, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x11
SU(4):   $x11 = MOVKXi $x11(tied-def 0), 27262, 16
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x11
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x11
SU(5):   $x11 = MOVKXi $x11(tied-def 0), 29884, 32
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x11
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x11
SU(6):   $x11 = MOVKXi $x11(tied-def 0), 16307, 48
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x11
  Successors:
    SU(11): Data Latency=1 Reg=$x11
SU(7):   $w12 = MOVZWi 66, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(12): Data Latency=1 Reg=$w12
SU(8):   STRWui renamable $w8, renamable $x23, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (store 4 into @fre)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$w8
SU(9):   STRWui renamable $w9, renamable $x21, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (store 4 into @niter)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w9
SU(10):   STRWui renamable $w10, renamable $x22, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (store 4 into @nmxh)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=$w10
SU(11):   STRXui renamable $x11, renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @alpha :: (store 8 into @alpha)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=$x11
SU(12):   STURBBi renamable $w12, $fp, -164 :: (store 1 into %ir.Class, align 4)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=$w12
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 7 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(3) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) $x11 = MOVZXi 63963, 0
  Ready @0c
  TopQ.A BotLatency SU(3) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 7 4 
  TopQ.A RemainingLatency 0 + 1c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(4) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) $x11 = MOVKXi $x11(tied-def 0), 27262, 16
  Ready @1c
  TopQ.A TopLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 7 5 
  TopQ.A RemainingLatency 0 + 2c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(5) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) $x11 = MOVKXi $x11(tied-def 0), 29884, 32
  Ready @2c
  TopQ.A TopLatency SU(5) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 7 6 
  TopQ.A RemainingLatency 0 + 3c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $w8 = MOVZWi 5, 0
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 1 2 7 8 
  TopQ.A RemainingLatency 0 + 4c > CritPath 4
  Cand SU(6) ORDER                              
  Cand SU(1) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(1) $w9 = MOVZWi 200, 0
  Ready @4c
  TopQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 8 2 7 9 
  TopQ.A RemainingLatency 0 + 5c > CritPath 4
  Cand SU(6) ORDER                              
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) $w10 = MOVZWi 10, 0
  Ready @5c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 8 9 7 10 
  TopQ.A RemainingLatency 0 + 6c > CritPath 4
  Cand SU(6) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(6) $x11 = MOVKXi $x11(tied-def 0), 16307, 48
  Ready @6c
  TopQ.A TopLatency SU(6) 3c
  TopQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 8 9 7 11 
  TopQ.A RemainingLatency 0 + 7c > CritPath 4
  Cand SU(10) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(7) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) $w12 = MOVZWi 66, 0
  Ready @7c
  TopQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 8 9 11 12 
  TopQ.A RemainingLatency 0 + 8c > CritPath 4
  Cand SU(10) ORDER                              
  Cand SU(8) ORDER                              
Pick Top ORDER     
Scheduling SU(8) STRWui renamable $w8, renamable $x23, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (store 4 into @fre)
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 12 9 11 
  TopQ.A RemainingLatency 0 + 9c > CritPath 4
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
Pick Top ORDER     
Scheduling SU(9) STRWui renamable $w9, renamable $x21, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (store 4 into @niter)
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 12 11 
  TopQ.A RemainingLatency 0 + 10c > CritPath 4
  Cand SU(10) ORDER                              
Pick Top ORDER     
Scheduling SU(10) STRWui renamable $w10, renamable $x22, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (store 4 into @nmxh)
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 12 
  TopQ.A RemainingLatency 0 + 11c > CritPath 4
  Cand SU(11) ORDER                              
Pick Top ORDER     
Scheduling SU(11) STRXui renamable $x11, renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @alpha :: (store 8 into @alpha)
  Ready @11c
  TopQ.A TopLatency SU(11) 4c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 
Pick Top ONLY1     
Scheduling SU(12) STURBBi renamable $w12, $fp, -164 :: (store 1 into %ir.Class, align 4)
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.11 ***
SU(3):   $x11 = MOVZXi 63963, 0
SU(4):   $x11 = MOVKXi $x11(tied-def 0), 27262, 16
SU(5):   $x11 = MOVKXi $x11(tied-def 0), 29884, 32
SU(0):   $w8 = MOVZWi 5, 0
SU(1):   $w9 = MOVZWi 200, 0
SU(2):   $w10 = MOVZWi 10, 0
SU(6):   $x11 = MOVKXi $x11(tied-def 0), 16307, 48
SU(7):   $w12 = MOVZWi 66, 0
SU(8):   STRWui renamable $w8, renamable $x23, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (store 4 into @fre)
SU(9):   STRWui renamable $w9, renamable $x21, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (store 4 into @niter)
SU(10):   STRWui renamable $w10, renamable $x22, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (store 4 into @nmxh)
SU(11):   STRXui renamable $x11, renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @alpha :: (store 8 into @alpha)
SU(12):   STURBBi renamable $w12, $fp, -164 :: (store 1 into %ir.Class, align 4)

********** MI Scheduling **********
main:%bb.11 if.else33
  From: $x0 = ADRP target-flags(aarch64-page) @.str.17
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.17
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.17, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @.str.17
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.17, 0
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.17
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.17, 0

Fixup kills for %bb.11
********** MI Scheduling **********
main:%bb.12 if.end35
  From: renamable $d0 = LDRDui killed renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @alpha :: (dereferenceable load 8 from @alpha)
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDRDui renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @alpha :: (dereferenceable load 8 from @alpha)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(1):   $x0 = ADRP target-flags(aarch64-page) @.str.22
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
SU(2):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.22, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0 = LDRDui renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @alpha :: (dereferenceable load 8 from @alpha)
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ADRP target-flags(aarch64-page) @.str.22
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.22, 0
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   renamable $d0 = LDRDui renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @alpha :: (dereferenceable load 8 from @alpha)
SU(1):   $x0 = ADRP target-flags(aarch64-page) @.str.22
SU(2):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.22, 0

********** MI Scheduling **********
main:%bb.12 if.end35
  From: renamable $w1 = LDRWui killed renamable $x22, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w1 = LDRWui renamable $x22, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(1):   $x0 = ADRP target-flags(aarch64-page) @.str.21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
SU(2):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.21, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w1 = LDRWui renamable $x22, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ADRP target-flags(aarch64-page) @.str.21
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.21, 0
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   renamable $w1 = LDRWui renamable $x22, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
SU(1):   $x0 = ADRP target-flags(aarch64-page) @.str.21
SU(2):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.21, 0

********** MI Scheduling **********
main:%bb.12 if.end35
  From: renamable $w1 = LDRWui killed renamable $x21, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $w1 = LDRWui renamable $x21, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(1):   renamable $d0 = LDRDui renamable $x24, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(2):   $x0 = ADRP target-flags(aarch64-page) @.str.20
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x0
SU(3):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.20, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp, implicit-def dead $w0
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=4 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w1 = LDRWui renamable $x21, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 4
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d0 = LDRDui renamable $x24, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
  Ready @1c
  TopQ.A BotLatency SU(1) 4c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $x0 = ADRP target-flags(aarch64-page) @.str.20
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.20, 0
  Ready @3c
  TopQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   renamable $w1 = LDRWui renamable $x21, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
SU(1):   renamable $d0 = LDRDui renamable $x24, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
SU(2):   $x0 = ADRP target-flags(aarch64-page) @.str.20
SU(3):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.20, 0

********** MI Scheduling **********
main:%bb.12 if.end35
  From: renamable $w1 = LDRWui killed renamable $x23, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (dereferenceable load 4 from @fre)
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w1 = LDRWui renamable $x23, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (dereferenceable load 4 from @fre)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(1):   $x0 = ADRP target-flags(aarch64-page) @.str.19
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
SU(2):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.19, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w1 = LDRWui renamable $x23, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (dereferenceable load 4 from @fre)
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ADRP target-flags(aarch64-page) @.str.19
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.19, 0
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   renamable $w1 = LDRWui renamable $x23, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (dereferenceable load 4 from @fre)
SU(1):   $x0 = ADRP target-flags(aarch64-page) @.str.19
SU(2):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.19, 0

********** MI Scheduling **********
main:%bb.12 if.end35
  From: renamable $x8 = ADRP target-flags(aarch64-page) %const.0
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 10
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) %const.0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(4): Data Latency=4 Reg=$d1
    SU(2): Anti Latency=0
SU(2):   renamable $x8 = ADRP target-flags(aarch64-page) @dlmin
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    SU(3): Data Latency=1 Reg=$x8
SU(3):   STRDui renamable $d0, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @dlmin :: (store 8 into @dlmin)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=$x8
  Successors:
    SU(4): Anti Latency=0
SU(4):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(3): Anti Latency=0
    SU(1): Data Latency=4 Reg=$d1
  Successors:
    SU(6): Data Latency=1 Reg=$d0
SU(5):   renamable $x24 = ADRP target-flags(aarch64-page) @dtime
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(6): Data Latency=1 Reg=$x24
SU(6):   STRDui renamable $d0, renamable $x24, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (store 8 into @dtime)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=$d0
    SU(5): Data Latency=1 Reg=$x24
SU(7):   $x0 = ADRP target-flags(aarch64-page) @.str.18
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x0
SU(8):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.18, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(9):   $w1 = MOVZWi 7, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(9): Ord  Latency=1 Artificial
    SU(8): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 5 7 9 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) %const.0
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 5 7 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(9) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) TOP-PATH                  2 cycles 
  Cand SU(1) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 5 7 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 6
  Cand SU(9) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) TOP-PATH                  2 cycles 
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) renamable $x8 = ADRP target-flags(aarch64-page) @dlmin
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 5 7 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 6
  Cand SU(9) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) $x0 = ADRP target-flags(aarch64-page) @.str.18
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 5 3 8 
  TopQ.A RemainingLatency 0 + 4c > CritPath 6
  Cand SU(9) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) STRDui renamable $d0, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @dlmin :: (store 8 into @dlmin)
  Ready @4c
  TopQ.A TopLatency SU(3) 2c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 5 8 4 
  TopQ.A RemainingLatency 0 + 5c > CritPath 6
  Cand SU(9) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) renamable $d0 = FMULDrr renamable $d0, renamable $d1
  Ready @5c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 5 8 
  TopQ.A RemainingLatency 0 + 6c > CritPath 6
  Cand SU(9) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $x24 = ADRP target-flags(aarch64-page) @dtime
  Ready @6c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 8 6 
  TopQ.A RemainingLatency 0 + 7c > CritPath 6
  Cand SU(9) ORDER                              
  Cand SU(8) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(8) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.18, 0
  Ready @7c
  TopQ.A BotLatency SU(8) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 6 
  TopQ.A RemainingLatency 0 + 8c > CritPath 6
  Cand SU(9) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(9) $w1 = MOVZWi 7, 0
  Ready @8c
  TopQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) STRDui renamable $d0, renamable $x24, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (store 8 into @dtime)
  Ready @9c
  TopQ.A TopLatency SU(6) 6c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) %const.0
SU(1):   renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
SU(2):   renamable $x8 = ADRP target-flags(aarch64-page) @dlmin
SU(7):   $x0 = ADRP target-flags(aarch64-page) @.str.18
SU(3):   STRDui renamable $d0, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @dlmin :: (store 8 into @dlmin)
SU(4):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
SU(5):   renamable $x24 = ADRP target-flags(aarch64-page) @dtime
SU(8):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.18, 0
SU(9):   $w1 = MOVZWi 7, 0
SU(6):   STRDui renamable $d0, renamable $x24, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (store 8 into @dtime)

********** MI Scheduling **********
main:%bb.12 if.end35
  From: renamable $d0 = FMOVDi 96
    To: BL @pow, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $d1, implicit-def $sp, implicit-def $d0
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = FMOVDi 96
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(1):   renamable $d1 = FMOVDi 28
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @pow, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $d1, implicit-def $sp, implicit-def $d0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $d0 = FMOVDi 96
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $d1 = FMOVDi 28
  Ready @1c
  TopQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   renamable $d0 = FMOVDi 96
SU(1):   renamable $d1 = FMOVDi 28

Fixup kills for %bb.12
********** MI Scheduling **********
main:%bb.13 for.cond
  From: STURWi renamable $w8, $fp, -128 :: (store 4 into %ir.i)
    To: Bcc 12, %bb.15, implicit $nzcv
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   STURWi renamable $w8, $fp, -128 :: (store 4 into %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Anti Latency=0
SU(1):   $w8 = ORRWrs $wzr, renamable $w8, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Predecessors:
    SU(0): Anti Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   dead $wzr = SUBSWri renamable $w8, 10, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.15, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURWi renamable $w8, $fp, -128 :: (store 4 into %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w8 = ORRWrs $wzr, renamable $w8, 0
  Ready @1c
  TopQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) dead $wzr = SUBSWri renamable $w8, 10, 0, implicit-def $nzcv
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   STURWi renamable $w8, $fp, -128 :: (store 4 into %ir.i)
SU(1):   $w8 = ORRWrs $wzr, renamable $w8, 0
SU(2):   dead $wzr = SUBSWri renamable $w8, 10, 0, implicit-def $nzcv

Fixup kills for %bb.13
********** MI Scheduling **********
main:%bb.14 for.body
  From: renamable $w8 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
    To: B %bb.13
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
ExitSU:   B %bb.13
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   renamable $w8 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0

Fixup kills for %bb.14
Fixup kills for %bb.15
Fixup kills for %bb.16
********** MI Scheduling **********
main:%bb.17 if.end44
  From: renamable $x8 = ADRP target-flags(aarch64-page) @timeron
    To: CBZW killed renamable $w8, %bb.19
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
ExitSU:   CBZW killed renamable $w8, %bb.19
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)

********** MI Scheduling **********
main:%bb.17 if.end44
  From: $x0 = SUBXri $fp, 168, 0
    To: BL @adaptation, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x0 = SUBXri $fp, 168, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(1):   $w1 = ORRWrs $wzr, $wzr, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @adaptation, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $x0 = SUBXri $fp, 168, 0
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w1 = ORRWrs $wzr, $wzr, 0
  Ready @1c
  TopQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   $x0 = SUBXri $fp, 168, 0
SU(1):   $w1 = ORRWrs $wzr, $wzr, 0

********** MI Scheduling **********
main:%bb.17 if.end44
  From: renamable $x8 = ADRP target-flags(aarch64-page) @time
    To: BL @mortar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @time
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=$x8
SU(1):   STRXui $xzr, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
ExitSU:   BL @mortar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @time
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRXui $xzr, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @time
SU(1):   STRXui $xzr, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)

********** MI Scheduling **********
main:%bb.17 if.end44
  From: renamable $x27 = ADRP target-flags(aarch64-page) @nelt
    To: BL @nr_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit-def $sp
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   renamable $x27 = ADRP target-flags(aarch64-page) @nelt
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 7
  Successors:
    SU(1): Data Latency=1 Reg=$x27
SU(1):   renamable $w8 = LDRWui renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 6
  Predecessors:
    SU(0): Data Latency=1 Reg=$x27
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$w8
SU(2):   renamable $w8 = ADDWrs renamable $w8, renamable $w8, 1
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
  Successors:
    SU(3): Data Latency=1 Reg=$w8
SU(3):   renamable $w1 = UBFMWri renamable $w8, 29, 28
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $x0 = ADRP target-flags(aarch64-page) @sje
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x0
SU(5):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sje, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(6):   $w2 = MOVNWi 0, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @nr_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=1 Artificial
    SU(5): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 4 6 
  TopQ.A RemainingLatency 0 + 0c > CritPath 7
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x27 = ADRP target-flags(aarch64-page) @nelt
  Ready @0c
  TopQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 4 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 7
  Cand SU(6) ORDER                              
  Cand SU(4) TOP-PATH                  2 cycles 
  Cand SU(1) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w8 = LDRWui renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 6 4 
  TopQ.A RemainingLatency 0 + 2c > CritPath 7
  Cand SU(6) ORDER                              
  Cand SU(4) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) $x0 = ADRP target-flags(aarch64-page) @sje
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 6 5 
  TopQ.A RemainingLatency 0 + 3c > CritPath 7
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sje, 0
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) $w2 = MOVNWi 0, 0
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w8 = ADDWrs renamable $w8, renamable $w8, 1
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w1 = UBFMWri renamable $w8, 29, 28
  Ready @6c
  TopQ.A TopLatency SU(3) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   renamable $x27 = ADRP target-flags(aarch64-page) @nelt
SU(1):   renamable $w8 = LDRWui renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
SU(4):   $x0 = ADRP target-flags(aarch64-page) @sje
SU(5):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sje, 0
SU(6):   $w2 = MOVNWi 0, 0
SU(2):   renamable $w8 = ADDWrs renamable $w8, renamable $w8, 1
SU(3):   renamable $w1 = UBFMWri renamable $w8, 29, 28

********** MI Scheduling **********
main:%bb.17 if.end44
  From: renamable $x8 = ADRP target-flags(aarch64-page) @ntot
    To: BL @r_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @ntot
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w1 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(2):   $x19 = ADRP target-flags(aarch64-page) @ta1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x19
SU(3):   renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @ta1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x19
  Successors:
    SU(5): Data Latency=1 Reg=$x19
SU(4):   $d0 = FMOVD0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   $x0 = ORRXrs $xzr, $x19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(3): Data Latency=1 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @r_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @ntot
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(4) ORDER                              
  Cand SU(2) TOP-PATH                  3 cycles 
  Cand SU(1) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w1 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(4) ORDER                              
  Cand SU(2) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x19 = ADRP target-flags(aarch64-page) @ta1
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(4) ORDER                              
  Cand SU(3) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @ta1, 0
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 5 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) $d0 = FMOVD0
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $x0 = ORRXrs $xzr, $x19, 0
  Ready @5c
  TopQ.A TopLatency SU(5) 2c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @ntot
SU(1):   renamable $w1 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
SU(2):   $x19 = ADRP target-flags(aarch64-page) @ta1
SU(3):   renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @ta1, 0
SU(4):   $d0 = FMOVD0
SU(5):   $x0 = ORRXrs $xzr, $x19, 0

Fixup kills for %bb.17
Fixup kills for %bb.18
********** MI Scheduling **********
main:%bb.19 if.end48
  From: renamable $x8 = ADRP target-flags(aarch64-page) @time
    To: End RegionInstrs: 15
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @time
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=$x8
SU(1):   STRXui $xzr, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
SU(2):   STURWi $wzr, $fp, -116 :: (store 4 into %ir.step)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(3):   $w23 = MOVZWi 1000, 0, implicit-def $x23
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $x24 = ADRP target-flags(aarch64-page) @ta2
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x24
SU(5):   renamable $x24 = ADDXri $x24, target-flags(aarch64-pageoff, aarch64-nc) @ta2, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x24
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(6):   $x28 = ADRP target-flags(aarch64-page) @size_e
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x28
SU(7):   renamable $x28 = ADDXri $x28, target-flags(aarch64-pageoff, aarch64-nc) @size_e, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x28
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(8):   $x21 = ADRP target-flags(aarch64-page) @trhs
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x21
SU(9):   renamable $x21 = ADDXri $x21, target-flags(aarch64-pageoff, aarch64-nc) @trhs, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x21
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(10):   $w26 = MOVZWi 200, 0, implicit-def $x26
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(11):   $w22 = MOVZWi 24, 0, implicit-def $x22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(12):   $x25 = ADRP target-flags(aarch64-page) @cbc
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x25
SU(13):   renamable $x25 = ADDXri $x25, target-flags(aarch64-pageoff, aarch64-nc) @cbc, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x25
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(14):   renamable $x10 = ADRP target-flags(aarch64-page) @niter
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 6 8 10 11 12 14 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(4) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) $x24 = ADRP target-flags(aarch64-page) @ta2
  Ready @0c
  TopQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 14 6 8 10 11 12 5 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) $x28 = ADRP target-flags(aarch64-page) @size_e
  Ready @1c
  TopQ.A BotLatency SU(6) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 14 5 8 10 11 12 7 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(8) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) $x21 = ADRP target-flags(aarch64-page) @trhs
  Ready @2c
  TopQ.A BotLatency SU(8) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 14 5 7 10 11 12 9 
  TopQ.A RemainingLatency 0 + 3c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(12) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(12) $x25 = ADRP target-flags(aarch64-page) @cbc
  Ready @3c
  TopQ.A BotLatency SU(12) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 14 5 7 10 11 9 13 
  TopQ.A RemainingLatency 0 + 4c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @time
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 2 3 14 5 7 10 11 9 1 
  TopQ.A RemainingLatency 0 + 5c > CritPath 2
  Cand SU(13) ORDER                              
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) $w23 = MOVZWi 1000, 0, implicit-def $x23
  Ready @5c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 2 1 14 5 7 10 11 9 
  TopQ.A RemainingLatency 0 + 6c > CritPath 2
  Cand SU(13) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $x24 = ADDXri $x24, target-flags(aarch64-pageoff, aarch64-nc) @ta2, 0
  Ready @6c
  TopQ.A TopLatency SU(5) 1c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 2 1 14 9 7 10 11 
  TopQ.A RemainingLatency 0 + 7c > CritPath 2
  Cand SU(13) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(7) ORDER                              
Pick Top ORDER     
Scheduling SU(7) renamable $x28 = ADDXri $x28, target-flags(aarch64-pageoff, aarch64-nc) @size_e, 0
  Ready @7c
  TopQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 2 1 14 9 11 10 
  TopQ.A RemainingLatency 0 + 8c > CritPath 2
  Cand SU(13) ORDER                              
  Cand SU(9) ORDER                              
Pick Top ORDER     
Scheduling SU(9) renamable $x21 = ADDXri $x21, target-flags(aarch64-pageoff, aarch64-nc) @trhs, 0
  Ready @8c
  TopQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 2 1 14 10 11 
  TopQ.A RemainingLatency 0 + 9c > CritPath 2
  Cand SU(13) ORDER                              
  Cand SU(10) ORDER                              
Pick Top ORDER     
Scheduling SU(10) $w26 = MOVZWi 200, 0, implicit-def $x26
  Ready @9c
  TopQ.A BotLatency SU(10) 1c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 2 1 14 11 
  TopQ.A RemainingLatency 0 + 10c > CritPath 2
  Cand SU(13) ORDER                              
  Cand SU(11) ORDER                              
Pick Top ORDER     
Scheduling SU(11) $w22 = MOVZWi 24, 0, implicit-def $x22
  Ready @10c
  TopQ.A BotLatency SU(11) 1c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 2 1 14 
  TopQ.A RemainingLatency 0 + 11c > CritPath 2
  Cand SU(13) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(13) renamable $x25 = ADDXri $x25, target-flags(aarch64-pageoff, aarch64-nc) @cbc, 0
  Ready @11c
  TopQ.A BotLatency SU(13) 1c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 14 2 1 
  TopQ.A RemainingLatency 0 + 12c > CritPath 2
  Cand SU(14) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(14) renamable $x10 = ADRP target-flags(aarch64-page) @niter
  Ready @12c
  TopQ.A BotLatency SU(14) 1c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 2 
  TopQ.A RemainingLatency 0 + 13c > CritPath 2
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) STRXui $xzr, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi $wzr, $fp, -116 :: (store 4 into %ir.step)
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.19 ***
SU(4):   $x24 = ADRP target-flags(aarch64-page) @ta2
SU(6):   $x28 = ADRP target-flags(aarch64-page) @size_e
SU(8):   $x21 = ADRP target-flags(aarch64-page) @trhs
SU(12):   $x25 = ADRP target-flags(aarch64-page) @cbc
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @time
SU(3):   $w23 = MOVZWi 1000, 0, implicit-def $x23
SU(5):   renamable $x24 = ADDXri $x24, target-flags(aarch64-pageoff, aarch64-nc) @ta2, 0
SU(7):   renamable $x28 = ADDXri $x28, target-flags(aarch64-pageoff, aarch64-nc) @size_e, 0
SU(9):   renamable $x21 = ADDXri $x21, target-flags(aarch64-pageoff, aarch64-nc) @trhs, 0
SU(10):   $w26 = MOVZWi 200, 0, implicit-def $x26
SU(11):   $w22 = MOVZWi 24, 0, implicit-def $x22
SU(13):   renamable $x25 = ADDXri $x25, target-flags(aarch64-pageoff, aarch64-nc) @cbc, 0
SU(14):   renamable $x10 = ADRP target-flags(aarch64-page) @niter
SU(1):   STRXui $xzr, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
SU(2):   STURWi $wzr, $fp, -116 :: (store 4 into %ir.step)

Fixup kills for %bb.19
********** MI Scheduling **********
main:%bb.20 for.cond49
  From: renamable $w8 = LDURWi $fp, -116 :: (dereferenceable load 4 from %ir.step)
    To: Bcc 12, %bb.66, implicit $nzcv
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -116 :: (dereferenceable load 4 from %ir.step)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w8
SU(1):   renamable $w9 = LDRWui renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w9
SU(2):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=$w9
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.66, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -116 :: (dereferenceable load 4 from %ir.step)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w9 = LDRWui renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   renamable $w8 = LDURWi $fp, -116 :: (dereferenceable load 4 from %ir.step)
SU(1):   renamable $w9 = LDRWui renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
SU(2):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv

Fixup kills for %bb.20
********** MI Scheduling **********
main:%bb.21 for.body51
  From: renamable $w8 = LDURWi $fp, -116 :: (dereferenceable load 4 from %ir.step)
    To: Bcc 1, %bb.28, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -116 :: (dereferenceable load 4 from %ir.step)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 1, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 1, %bb.28, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -116 :: (dereferenceable load 4 from %ir.step)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 1, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.21 ***
SU(0):   renamable $w8 = LDURWi $fp, -116 :: (dereferenceable load 4 from %ir.step)
SU(1):   dead $wzr = SUBSWri renamable $w8, 1, 0, implicit-def $nzcv

Fixup kills for %bb.21
********** MI Scheduling **********
main:%bb.22 if.then53
  From: renamable $x8 = ADRP target-flags(aarch64-page) @time
    To: End RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @time
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   STRXui $xzr, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(3): Anti Latency=0
SU(2):   STRXui $xzr, renamable $x20, 14 :: (store 8 into %ir.nelt_tot)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(3):   $w8 = MOVZWi 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @time
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) STRXui $xzr, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(2) ORDER                              
  Cand SU(3) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) $w8 = MOVZWi 1, 0
  Ready @2c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRXui $xzr, renamable $x20, 14 :: (store 8 into %ir.nelt_tot)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.22 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @time
SU(1):   STRXui $xzr, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
SU(3):   $w8 = MOVZWi 1, 0
SU(2):   STRXui $xzr, renamable $x20, 14 :: (store 8 into %ir.nelt_tot)

********** MI Scheduling **********
main:%bb.22 if.then53
  From: renamable $x8 = ADRP target-flags(aarch64-page) @ntot
    To: BL @r_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @ntot
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w1 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(2):   $d0 = FMOVD0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $x0 = ORRXrs $xzr, $x19, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @r_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @ntot
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w1 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) $d0 = FMOVD0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $x0 = ORRXrs $xzr, $x19, 0
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.22 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @ntot
SU(1):   renamable $w1 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
SU(2):   $d0 = FMOVD0
SU(3):   $x0 = ORRXrs $xzr, $x19, 0

Fixup kills for %bb.22
********** MI Scheduling **********
main:%bb.23 for.cond54
  From: STURWi renamable $w8, $fp, -128 :: (store 4 into %ir.i)
    To: Bcc 12, %bb.27, implicit $nzcv
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   STURWi renamable $w8, $fp, -128 :: (store 4 into %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Anti Latency=0
SU(1):   $w8 = ORRWrs $wzr, renamable $w8, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Predecessors:
    SU(0): Anti Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   dead $wzr = SUBSWri renamable $w8, 10, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.27, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURWi renamable $w8, $fp, -128 :: (store 4 into %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w8 = ORRWrs $wzr, renamable $w8, 0
  Ready @1c
  TopQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) dead $wzr = SUBSWri renamable $w8, 10, 0, implicit-def $nzcv
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.23 ***
SU(0):   STURWi renamable $w8, $fp, -128 :: (store 4 into %ir.i)
SU(1):   $w8 = ORRWrs $wzr, renamable $w8, 0
SU(2):   dead $wzr = SUBSWri renamable $w8, 10, 0, implicit-def $nzcv

Fixup kills for %bb.23
********** MI Scheduling **********
main:%bb.24 for.body56
  From: renamable $w8 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 0, %bb.26, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 2, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 0, %bb.26, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 2, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.24 ***
SU(0):   renamable $w8 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri renamable $w8, 2, 0, implicit-def $nzcv

Fixup kills for %bb.24
Fixup kills for %bb.25
********** MI Scheduling **********
main:%bb.26 for.inc60
  From: renamable $w8 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
    To: B %bb.23
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
ExitSU:   B %bb.23
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.26 ***
SU(0):   renamable $w8 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0

Fixup kills for %bb.26
Fixup kills for %bb.27
********** MI Scheduling **********
main:%bb.28 if.end63
  From: renamable $x20 = ADRP target-flags(aarch64-page) @timeron
    To: CBZW killed renamable $w8, %bb.30
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x20 = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(1): Data Latency=1 Reg=$x20
SU(1):   renamable $w8 = LDRWui renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Data Latency=1 Reg=$x20
  Successors:
    ExitSU: Ord  Latency=4 Artificial
ExitSU:   CBZW killed renamable $w8, %bb.30
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x20 = ADRP target-flags(aarch64-page) @timeron
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = LDRWui renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.28 ***
SU(0):   renamable $x20 = ADRP target-flags(aarch64-page) @timeron
SU(1):   renamable $w8 = LDRWui renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)

Fixup kills for %bb.28
Fixup kills for %bb.29
********** MI Scheduling **********
main:%bb.30 if.end66
  From: $x0 = ADRP target-flags(aarch64-page) @tmort
    To: BL @transf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @tmort
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @tmort, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $x1 = ORRXrs $xzr, $x19, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @transf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @tmort
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @tmort, 0
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $x1 = ORRXrs $xzr, $x19, 0
  Ready @2c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.30 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @tmort
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @tmort, 0
SU(2):   $x1 = ORRXrs $xzr, $x19, 0

Fixup kills for %bb.30
********** MI Scheduling **********
main:%bb.31 for.cond67
  From: renamable $w8 = LDURWi $fp, -120 :: (dereferenceable load 4 from %ir.ie)
    To: Bcc 10, %bb.33, implicit $nzcv
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -120 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w8
SU(1):   renamable $w9 = LDRWui renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w9
SU(2):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=$w9
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.33, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -120 :: (dereferenceable load 4 from %ir.ie)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w9 = LDRWui renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.31 ***
SU(0):   renamable $w8 = LDURWi $fp, -120 :: (dereferenceable load 4 from %ir.ie)
SU(1):   renamable $w9 = LDRWui renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
SU(2):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv

Fixup kills for %bb.31
********** MI Scheduling **********
main:%bb.32 for.body69
  From: renamable $w8 = LDURWi $fp, -120 :: (dereferenceable load 4 from %ir.ie)
    To: B %bb.31
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -120 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STURWi renamable $w8, $fp, -120 :: (store 4 into %ir.ie)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.31
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -120 :: (dereferenceable load 4 from %ir.ie)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w8, $fp, -120 :: (store 4 into %ir.ie)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   renamable $w8 = LDURWi $fp, -120 :: (dereferenceable load 4 from %ir.ie)
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
SU(2):   STURWi renamable $w8, $fp, -120 :: (store 4 into %ir.ie)

********** MI Scheduling **********
main:%bb.32 for.body69
  From: renamable $x8 = LDURSWi $fp, -120 :: (dereferenceable load 4 from %ir.ie)
    To: BL @laplacian, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $w2, implicit-def $sp
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURSWi $fp, -120 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x8
    SU(1): Data Latency=4 Reg=$x8
SU(1):   renamable $w2 = LDRWroX renamable $x28, renamable $x8, 0, 1 :: (load 4 from %ir.arrayidx75)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(2): Anti Latency=0
SU(2):   renamable $x8 = MADDXrrr renamable $x8, renamable $x23, $xzr
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(4): Data Latency=1 Reg=$x8
    SU(3): Data Latency=1 Reg=$x8
SU(3):   $x0 = ADDXrs renamable $x24, renamable $x8, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $x1 = ADDXrs renamable $x19, renamable $x8, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @laplacian, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $w2, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 8
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = LDURSWi $fp, -120 :: (dereferenceable load 4 from %ir.ie)
  Ready @0c
  TopQ.A BotLatency SU(0) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w2 = LDRWroX renamable $x28, renamable $x8, 0, 1 :: (load 4 from %ir.arrayidx75)
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x8 = MADDXrrr renamable $x8, renamable $x23, $xzr
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 3 
  TopQ.A RemainingLatency 0 + 6c > CritPath 8
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) $x0 = ADDXrs renamable $x24, renamable $x8, 0
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $x1 = ADDXrs renamable $x19, renamable $x8, 0
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   renamable $x8 = LDURSWi $fp, -120 :: (dereferenceable load 4 from %ir.ie)
SU(1):   renamable $w2 = LDRWroX renamable $x28, renamable $x8, 0, 1 :: (load 4 from %ir.arrayidx75)
SU(2):   renamable $x8 = MADDXrrr renamable $x8, renamable $x23, $xzr
SU(3):   $x0 = ADDXrs renamable $x24, renamable $x8, 0
SU(4):   $x1 = ADDXrs renamable $x19, renamable $x8, 0

Fixup kills for %bb.32
Fixup kills for %bb.33
********** MI Scheduling **********
main:%bb.34 for.cond79
  From: renamable $w8 = LDURWi $fp, -120 :: (dereferenceable load 4 from %ir.ie)
    To: Bcc 10, %bb.45, implicit $nzcv
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -120 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w8
SU(1):   renamable $w9 = LDRWui renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w9
SU(2):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=$w9
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.45, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -120 :: (dereferenceable load 4 from %ir.ie)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w9 = LDRWui renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.34 ***
SU(0):   renamable $w8 = LDURWi $fp, -120 :: (dereferenceable load 4 from %ir.ie)
SU(1):   renamable $w9 = LDRWui renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
SU(2):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv

Fixup kills for %bb.34
Fixup kills for %bb.35
********** MI Scheduling **********
main:%bb.36 for.cond82
  From: renamable $w8 = LDURWi $fp, -136 :: (dereferenceable load 4 from %ir.k)
    To: Bcc 12, %bb.44, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -136 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.44, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -136 :: (dereferenceable load 4 from %ir.k)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.36 ***
SU(0):   renamable $w8 = LDURWi $fp, -136 :: (dereferenceable load 4 from %ir.k)
SU(1):   dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv

Fixup kills for %bb.36
Fixup kills for %bb.37
********** MI Scheduling **********
main:%bb.38 for.cond85
  From: renamable $w8 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.j)
    To: Bcc 12, %bb.43, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.43, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.j)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   renamable $w8 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.j)
SU(1):   dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv

Fixup kills for %bb.38
Fixup kills for %bb.39
********** MI Scheduling **********
main:%bb.40 for.cond88
  From: renamable $w8 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.42, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.42, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.40 ***
SU(0):   renamable $w8 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv

Fixup kills for %bb.40
********** MI Scheduling **********
main:%bb.41 for.body90
  From: renamable $x8 = LDURSWi $fp, -120 :: (dereferenceable load 4 from %ir.ie)
    To: B %bb.40
 RegionInstrs: 21
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURSWi $fp, -120 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x8
SU(1):   renamable $x9, renamable $x10 = LDPSWi $fp, -34 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x9
    SU(10): Out  Latency=1
    SU(10): Data Latency=4 Reg=$x10
SU(2):   renamable $x8 = MADDXrrr renamable $x8, renamable $x23, $xzr
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x8
    SU(4): Data Latency=1 Reg=$x8
SU(3):   renamable $x9 = MADDXrrr renamable $x9, renamable $x26, $xzr
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x9
  Successors:
    SU(9): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x9
    SU(6): Data Latency=1 Reg=$x9
SU(4):   $x11 = ADDXrs renamable $x21, renamable $x8, 0
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(2): Data Latency=1 Reg=$x8
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x11
    SU(5): Anti Latency=0
SU(5):   $x8 = ADDXrs renamable $x24, renamable $x8, 0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(4): Anti Latency=0
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x8
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x8
SU(6):   $x11 = ADDXrs renamable $x11, renamable $x9, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 7
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x11
    SU(3): Data Latency=1 Reg=$x9
  Successors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x11
    SU(9): Anti Latency=0
SU(7):   renamable $x12 = LDURSWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=4 Reg=$x12
    SU(20): Ord  Latency=0 Memory
SU(8):   $x8 = ADDXrs renamable $x8, renamable $x9, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 7
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x8
    SU(3): Data Latency=1 Reg=$x9
  Successors:
    SU(14): Out  Latency=1
    SU(14): Data Latency=1 Reg=$x8
    SU(9): Anti Latency=0
SU(9):   renamable $w9 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 5
  Predecessors:
    SU(8): Anti Latency=0
    SU(6): Anti Latency=0
    SU(3): Out  Latency=1
  Successors:
    SU(17): Data Latency=4 Reg=$w9
    SU(20): Ord  Latency=0 Memory
SU(10):   renamable $x10 = ADDXrs renamable $x10, renamable $x10, 2
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x10
  Successors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x10
SU(11):   renamable $x12 = UBFMXri renamable $x12, 61, 60
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$x12
  Successors:
    SU(19): Data Latency=1 Reg=$x12
    SU(16): Data Latency=1 Reg=$x12
    SU(15): Data Latency=1 Reg=$x12
SU(12):   renamable $x10 = UBFMXri renamable $x10, 61, 60
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 7
  Predecessors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x10
  Successors:
    SU(14): Data Latency=1 Reg=$x10
    SU(13): Data Latency=1 Reg=$x10
SU(13):   $x11 = ADDXrs renamable $x11, renamable $x10, 0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 6
  Predecessors:
    SU(6): Data Latency=1 Reg=$x11
    SU(6): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x10
  Successors:
    SU(19): Data Latency=1 Reg=$x11
    SU(15): Data Latency=1 Reg=$x11
SU(14):   $x8 = ADDXrs renamable $x8, renamable $x10, 0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 6
  Predecessors:
    SU(8): Data Latency=1 Reg=$x8
    SU(8): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x10
  Successors:
    SU(17): Out  Latency=1
    SU(16): Data Latency=1 Reg=$x8
SU(15):   renamable $d0 = LDRDroX renamable $x11, renamable $x12, 0, 0 :: (load 8 from %ir.arrayidx98)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(13): Data Latency=1 Reg=$x11
    SU(11): Data Latency=1 Reg=$x12
  Successors:
    SU(18): Out  Latency=1
    SU(18): Data Latency=4 Reg=$d0
    SU(19): Ord  Latency=0 Memory
SU(16):   renamable $d1 = LDRDroX renamable $x8, renamable $x12, 0, 0 :: (load 8 from %ir.arrayidx106)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(14): Data Latency=1 Reg=$x8
    SU(11): Data Latency=1 Reg=$x12
  Successors:
    SU(18): Data Latency=4 Reg=$d1
    SU(17): Anti Latency=0
SU(17):   renamable $w8 = nsw ADDWri renamable $w9, 1, 0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(16): Anti Latency=0
    SU(14): Out  Latency=1
    SU(9): Data Latency=4 Reg=$w9
  Successors:
    SU(20): Data Latency=1 Reg=$w8
SU(18):   renamable $d0 = FSUBDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 1
  Predecessors:
    SU(16): Data Latency=4 Reg=$d1
    SU(15): Out  Latency=1
    SU(15): Data Latency=4 Reg=$d0
  Successors:
    SU(19): Data Latency=1 Reg=$d0
SU(19):   STRDroX renamable $d0, renamable $x11, renamable $x12, 0, 0 :: (store 8 into %ir.arrayidx114)
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(18): Data Latency=1 Reg=$d0
    SU(15): Ord  Latency=0 Memory
    SU(13): Data Latency=1 Reg=$x11
    SU(11): Data Latency=1 Reg=$x12
SU(20):   STURWi renamable $w8, $fp, -128 :: (store 4 into %ir.i)
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(17): Data Latency=1 Reg=$w8
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
ExitSU:   B %bb.40
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 13
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 7 
  TopQ.A RemainingLatency 0 + 0c > CritPath 13
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDURSWi $fp, -120 :: (dereferenceable load 4 from %ir.ie)
  Ready @0c
  TopQ.A BotLatency SU(0) 13c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 7 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 13
  Cand SU(7) ORDER                              
  Cand SU(1) TOP-PATH                  12 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x9, renamable $x10 = LDPSWi $fp, -34 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 3 10 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $x12 = LDURSWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 11 3 10 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x8 = MADDXrrr renamable $x8, renamable $x23, $xzr
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 11 
Queue TopQ.A: 4 3 10 
  TopQ.A RemainingLatency 0 + 5c > CritPath 13
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) renamable $x9 = MADDXrrr renamable $x9, renamable $x26, $xzr
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 10 11 
  TopQ.A RemainingLatency 0 + 6c > CritPath 13
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) $x11 = ADDXrs renamable $x21, renamable $x8, 0
  Ready @6c
  TopQ.A TopLatency SU(4) 5c
  TopQ.A BotLatency SU(4) 8c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 10 6 5 
  TopQ.A RemainingLatency 0 + 7c > CritPath 13
  Cand SU(11) ORDER                              
  Cand SU(10) TOP-PATH                  8 cycles 
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) $x8 = ADDXrs renamable $x24, renamable $x8, 0
  Ready @7c
  TopQ.A BotLatency SU(5) 8c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 10 6 8 
  TopQ.A RemainingLatency 0 + 8c > CritPath 13
  Cand SU(11) ORDER                              
  Cand SU(10) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(10) renamable $x10 = ADDXrs renamable $x10, renamable $x10, 2
  Ready @8c
  TopQ.A BotLatency SU(10) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 8
  Executed: 9c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 8 6 12 
  TopQ.A RemainingLatency 0 + 9c > CritPath 13
  Cand SU(11) ORDER                              
  Cand SU(8) TOP-PATH                  7 cycles 
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) $x11 = ADDXrs renamable $x11, renamable $x9, 0
  Ready @9c
  TopQ.A TopLatency SU(6) 6c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 9
  Executed: 10c
  Critical: 9c, 9 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 8 12 
  TopQ.A RemainingLatency 0 + 10c > CritPath 13
  Cand SU(11) ORDER                              
  Cand SU(8) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) $x8 = ADDXrs renamable $x8, renamable $x9, 0
  Ready @10c
  TopQ.A BotLatency SU(8) 7c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 10
  Executed: 11c
  Critical: 10c, 10 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 12 9 
  TopQ.A RemainingLatency 0 + 11c > CritPath 13
  Cand SU(11) ORDER                              
  Cand SU(12) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(12) renamable $x10 = UBFMXri renamable $x10, 61, 60
  Ready @11c
  TopQ.A BotLatency SU(12) 7c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 11
  Executed: 12c
  Critical: 11c, 11 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 9 14 13 
  TopQ.A RemainingLatency 0 + 12c > CritPath 13
  Cand SU(11) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(11) renamable $x12 = UBFMXri renamable $x12, 61, 60
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 12
  Executed: 13c
  Critical: 12c, 12 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 9 14 
  TopQ.A RemainingLatency 0 + 13c > CritPath 13
  Cand SU(13) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(13) $x11 = ADDXrs renamable $x11, renamable $x10, 0
  Ready @13c
  TopQ.A TopLatency SU(13) 7c
  TopQ.A BotLatency SU(13) 6c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 13
  Executed: 14c
  Critical: 13c, 13 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 14 9 15 
  TopQ.A RemainingLatency 0 + 14c > CritPath 13
  Cand SU(14) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(14) $x8 = ADDXrs renamable $x8, renamable $x10, 0
  Ready @14c
  TopQ.A BotLatency SU(14) 6c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 14
  Executed: 15c
  Critical: 14c, 14 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 9 16 
  TopQ.A RemainingLatency 0 + 15c > CritPath 13
  Cand SU(15) ORDER                              
  Cand SU(9) ORDER                              
Pick Top ORDER     
Scheduling SU(9) renamable $w9 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
  Ready @15c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 15
  Executed: 16c
  Critical: 15c, 15 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 16 
  TopQ.A RemainingLatency 0 + 16c > CritPath 13
  Cand SU(15) ORDER                              
Pick Top ORDER     
Scheduling SU(15) renamable $d0 = LDRDroX renamable $x11, renamable $x12, 0, 0 :: (load 8 from %ir.arrayidx98)
  Ready @16c
  TopQ.A TopLatency SU(15) 8c
  TopQ.A BotLatency SU(15) 5c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 16
  Executed: 17c
  Critical: 16c, 16 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 16 
Pick Top ONLY1     
Scheduling SU(16) renamable $d1 = LDRDroX renamable $x8, renamable $x12, 0, 0 :: (load 8 from %ir.arrayidx106)
  Ready @17c
  TopQ.A BotLatency SU(16) 5c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 17
  Executed: 18c
  Critical: 17c, 17 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 19 TopQ.A
Queue TopQ.P: 18 
Queue TopQ.A: 17 
Pick Top ONLY1     
Scheduling SU(17) renamable $w8 = nsw ADDWri renamable $w9, 1, 0
  Ready @19c
  TopQ.A TopLatency SU(17) 10c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 18
  Executed: 20c
  Critical: 18c, 18 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 18 
Queue TopQ.A: 20 
Pick Top ONLY1     
Scheduling SU(20) STURWi renamable $w8, $fp, -128 :: (store 4 into %ir.i)
  Ready @20c
  TopQ.A TopLatency SU(20) 11c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 19
  Executed: 21c
  Critical: 19c, 19 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 18 
Pick Top ONLY1     
Scheduling SU(18) renamable $d0 = FSUBDrr renamable $d0, renamable $d1
  Ready @21c
  TopQ.A TopLatency SU(18) 12c
  *** Max MOps 1 at cycle 21
Cycle: 22 TopQ.A
TopQ.A @22c
  Retired: 20
  Executed: 22c
  Critical: 20c, 20 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 19 
Pick Top ONLY1     
Scheduling SU(19) STRDroX renamable $d0, renamable $x11, renamable $x12, 0, 0 :: (store 8 into %ir.arrayidx114)
  Ready @22c
  TopQ.A TopLatency SU(19) 13c
  *** Max MOps 1 at cycle 22
Cycle: 23 TopQ.A
TopQ.A @23c
  Retired: 21
  Executed: 23c
  Critical: 21c, 21 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.41 ***
SU(0):   renamable $x8 = LDURSWi $fp, -120 :: (dereferenceable load 4 from %ir.ie)
SU(1):   renamable $x9, renamable $x10 = LDPSWi $fp, -34 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
SU(7):   renamable $x12 = LDURSWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
SU(2):   renamable $x8 = MADDXrrr renamable $x8, renamable $x23, $xzr
SU(3):   renamable $x9 = MADDXrrr renamable $x9, renamable $x26, $xzr
SU(4):   $x11 = ADDXrs renamable $x21, renamable $x8, 0
SU(5):   $x8 = ADDXrs renamable $x24, renamable $x8, 0
SU(10):   renamable $x10 = ADDXrs renamable $x10, renamable $x10, 2
SU(6):   $x11 = ADDXrs renamable $x11, renamable $x9, 0
SU(8):   $x8 = ADDXrs renamable $x8, renamable $x9, 0
SU(12):   renamable $x10 = UBFMXri renamable $x10, 61, 60
SU(11):   renamable $x12 = UBFMXri renamable $x12, 61, 60
SU(13):   $x11 = ADDXrs renamable $x11, renamable $x10, 0
SU(14):   $x8 = ADDXrs renamable $x8, renamable $x10, 0
SU(9):   renamable $w9 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
SU(15):   renamable $d0 = LDRDroX renamable $x11, renamable $x12, 0, 0 :: (load 8 from %ir.arrayidx98)
SU(16):   renamable $d1 = LDRDroX renamable $x8, renamable $x12, 0, 0 :: (load 8 from %ir.arrayidx106)
SU(17):   renamable $w8 = nsw ADDWri renamable $w9, 1, 0
SU(20):   STURWi renamable $w8, $fp, -128 :: (store 4 into %ir.i)
SU(18):   renamable $d0 = FSUBDrr renamable $d0, renamable $d1
SU(19):   STRDroX renamable $d0, renamable $x11, renamable $x12, 0, 0 :: (store 8 into %ir.arrayidx114)

Fixup kills for %bb.41
********** MI Scheduling **********
main:%bb.42 for.inc118
  From: renamable $w8 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.j)
    To: B %bb.38
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STURWi renamable $w8, $fp, -132 :: (store 4 into %ir.j)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.38
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.j)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w8, $fp, -132 :: (store 4 into %ir.j)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.42 ***
SU(0):   renamable $w8 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.j)
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
SU(2):   STURWi renamable $w8, $fp, -132 :: (store 4 into %ir.j)

Fixup kills for %bb.42
********** MI Scheduling **********
main:%bb.43 for.inc121
  From: renamable $w8 = LDURWi $fp, -136 :: (dereferenceable load 4 from %ir.k)
    To: B %bb.36
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -136 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STURWi renamable $w8, $fp, -136 :: (store 4 into %ir.k)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.36
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -136 :: (dereferenceable load 4 from %ir.k)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w8, $fp, -136 :: (store 4 into %ir.k)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.43 ***
SU(0):   renamable $w8 = LDURWi $fp, -136 :: (dereferenceable load 4 from %ir.k)
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
SU(2):   STURWi renamable $w8, $fp, -136 :: (store 4 into %ir.k)

Fixup kills for %bb.43
********** MI Scheduling **********
main:%bb.44 for.inc124
  From: renamable $w8 = LDURWi $fp, -120 :: (dereferenceable load 4 from %ir.ie)
    To: B %bb.34
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -120 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STURWi renamable $w8, $fp, -120 :: (store 4 into %ir.ie)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.34
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -120 :: (dereferenceable load 4 from %ir.ie)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w8, $fp, -120 :: (store 4 into %ir.ie)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   renamable $w8 = LDURWi $fp, -120 :: (dereferenceable load 4 from %ir.ie)
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
SU(2):   STURWi renamable $w8, $fp, -120 :: (store 4 into %ir.ie)

Fixup kills for %bb.44
********** MI Scheduling **********
main:%bb.45 for.end126
  From: $x0 = ADRP target-flags(aarch64-page) @rmor
    To: BL @transfb, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @rmor
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @rmor, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $x1 = ORRXrs $xzr, $x21, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @transfb, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @rmor
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @rmor, 0
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $x1 = ORRXrs $xzr, $x21, 0
  Ready @2c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @rmor
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @rmor, 0
SU(2):   $x1 = ORRXrs $xzr, $x21, 0

Fixup kills for %bb.45
Fixup kills for %bb.46
Fixup kills for %bb.47
********** MI Scheduling **********
main:%bb.48 for.cond130
  From: renamable $w8 = LDURWi $fp, -120 :: (dereferenceable load 4 from %ir.ie)
    To: Bcc 10, %bb.55, implicit $nzcv
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -120 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w8
SU(1):   renamable $w9 = LDRWui renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w9
SU(2):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=$w9
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.55, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -120 :: (dereferenceable load 4 from %ir.ie)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w9 = LDRWui renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.48 ***
SU(0):   renamable $w8 = LDURWi $fp, -120 :: (dereferenceable load 4 from %ir.ie)
SU(1):   renamable $w9 = LDRWui renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
SU(2):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv

Fixup kills for %bb.48
Fixup kills for %bb.49
********** MI Scheduling **********
main:%bb.50 for.cond133
  From: renamable $w9, $w8 = LDPWi $fp, -31 :: (dereferenceable load 4 from %ir.iside), (dereferenceable load 4 from %ir.ie)
    To: Bcc 12, %bb.54, implicit $nzcv
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $w9, $w8 = LDPWi $fp, -31 :: (dereferenceable load 4 from %ir.iside), (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=$w9
    SU(1): Out  Latency=1
    SU(1): Data Latency=0 Reg=$w8
SU(1):   $w8 = KILL $w8, implicit-def $x8
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=0 Reg=$w8
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=0 Reg=$x8
SU(2):   $x8 = SBFMXri $x8, 0, 31
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=0 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   dead $wzr = SUBSWri renamable $w9, 5, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w9
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.54, implicit $nzcv
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w9, $w8 = LDPWi $fp, -31 :: (dereferenceable load 4 from %ir.iside), (dereferenceable load 4 from %ir.ie)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w8 = KILL $w8, implicit-def $x8
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 2 TopQ.A
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $x8 = SBFMXri $x8, 0, 31
  Ready @2c
  TopQ.A TopLatency SU(2) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) dead $wzr = SUBSWri renamable $w9, 5, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.50 ***
SU(0):   renamable $w9, $w8 = LDPWi $fp, -31 :: (dereferenceable load 4 from %ir.iside), (dereferenceable load 4 from %ir.ie)
SU(1):   $w8 = KILL $w8, implicit-def $x8
SU(2):   $x8 = SBFMXri $x8, 0, 31
SU(3):   dead $wzr = SUBSWri renamable $w9, 5, 0, implicit-def $nzcv

Fixup kills for %bb.50
********** MI Scheduling **********
main:%bb.51 for.body135
  From: renamable $x9 = LDURSWi $fp, -124 :: (dereferenceable load 4 from %ir.iside)
    To: CBNZW killed renamable $w8, %bb.53
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $x9 = LDURSWi $fp, -124 :: (dereferenceable load 4 from %ir.iside)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Data Latency=4 Reg=$x9
SU(1):   renamable $x8 = MADDXrrr renamable $x8, renamable $x22, renamable $x25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x8
SU(2):   renamable $w8 = LDRWroX renamable $x8, renamable $x9, 0, 1 :: (load 4 from %ir.arrayidx139)
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
    SU(0): Data Latency=4 Reg=$x9
  Successors:
    ExitSU: Ord  Latency=4 Artificial
ExitSU:   CBNZW killed renamable $w8, %bb.53
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 8
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 8
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x9 = LDURSWi $fp, -124 :: (dereferenceable load 4 from %ir.iside)
  Ready @0c
  TopQ.A BotLatency SU(0) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x8 = MADDXrrr renamable $x8, renamable $x22, renamable $x25
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w8 = LDRWroX renamable $x8, renamable $x9, 0, 1 :: (load 4 from %ir.arrayidx139)
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.51 ***
SU(0):   renamable $x9 = LDURSWi $fp, -124 :: (dereferenceable load 4 from %ir.iside)
SU(1):   renamable $x8 = MADDXrrr renamable $x8, renamable $x22, renamable $x25
SU(2):   renamable $w8 = LDRWroX renamable $x8, renamable $x9, 0, 1 :: (load 4 from %ir.arrayidx139)

Fixup kills for %bb.51
********** MI Scheduling **********
main:%bb.52 if.then141
  From: renamable $w1, $w8 = LDPWi $fp, -31 :: (dereferenceable load 4 from %ir.ie), (dereferenceable load 4 from %ir.iside)
    To: BL @facev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $w1, $w8 = LDPWi $fp, -31 :: (dereferenceable load 4 from %ir.ie), (dereferenceable load 4 from %ir.iside)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(1): Out  Latency=1
    SU(1): Data Latency=0 Reg=$w8
SU(1):   $w8 = KILL $w8, implicit-def $x8
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=0 Reg=$w8
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=0 Reg=$x8
SU(2):   $x8 = SBFMXri $x8, 0, 31
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=0 Reg=$x8
  Successors:
    SU(3): Data Latency=1 Reg=$x8
SU(3):   renamable $x0 = MADDXrrr renamable $x8, renamable $x23, renamable $x21
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $d0 = FMOVD0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @facev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w1, $w8 = LDPWi $fp, -31 :: (dereferenceable load 4 from %ir.ie), (dereferenceable load 4 from %ir.iside)
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 4
  Cand SU(4) ORDER                              
  Cand SU(1) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $w8 = KILL $w8, implicit-def $x8
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $d0 = FMOVD0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $x8 = SBFMXri $x8, 0, 31
  Ready @2c
  TopQ.A TopLatency SU(2) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $x0 = MADDXrrr renamable $x8, renamable $x23, renamable $x21
  Ready @3c
  TopQ.A TopLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.52 ***
SU(0):   renamable $w1, $w8 = LDPWi $fp, -31 :: (dereferenceable load 4 from %ir.ie), (dereferenceable load 4 from %ir.iside)
SU(1):   $w8 = KILL $w8, implicit-def $x8
SU(4):   $d0 = FMOVD0
SU(2):   $x8 = SBFMXri $x8, 0, 31
SU(3):   renamable $x0 = MADDXrrr renamable $x8, renamable $x23, renamable $x21

Fixup kills for %bb.52
********** MI Scheduling **********
main:%bb.53 for.inc146
  From: renamable $w8 = LDURWi $fp, -124 :: (dereferenceable load 4 from %ir.iside)
    To: B %bb.50
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -124 :: (dereferenceable load 4 from %ir.iside)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STURWi renamable $w8, $fp, -124 :: (store 4 into %ir.iside)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.50
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -124 :: (dereferenceable load 4 from %ir.iside)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w8, $fp, -124 :: (store 4 into %ir.iside)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.53 ***
SU(0):   renamable $w8 = LDURWi $fp, -124 :: (dereferenceable load 4 from %ir.iside)
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
SU(2):   STURWi renamable $w8, $fp, -124 :: (store 4 into %ir.iside)

Fixup kills for %bb.53
********** MI Scheduling **********
main:%bb.54 for.inc149
  From: renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit killed $x8
    To: B %bb.48
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=$w8
SU(1):   STURWi renamable $w8, $fp, -120 :: (store 4 into %ir.ie)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$w8
ExitSU:   B %bb.48
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STURWi renamable $w8, $fp, -120 :: (store 4 into %ir.ie)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.54 ***
SU(0):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8
SU(1):   STURWi renamable $w8, $fp, -120 :: (store 4 into %ir.ie)

Fixup kills for %bb.54
********** MI Scheduling **********
main:%bb.55 for.end151
  From: renamable $x8 = ADRP target-flags(aarch64-page) @nmor
    To: BL @col2, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $w2, implicit-def $sp
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @nmor
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(2):   $x0 = ADRP target-flags(aarch64-page) @rmor
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x0
SU(3):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @rmor, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $x1 = ADRP target-flags(aarch64-page) @tmmor
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x1
SU(5):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @tmmor, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @col2, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $w2, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @nmor
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(4) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(4) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) $x0 = ADRP target-flags(aarch64-page) @rmor
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) $x1 = ADRP target-flags(aarch64-page) @tmmor
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 5 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @rmor, 0
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @tmmor, 0
  Ready @5c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.55 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @nmor
SU(1):   renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
SU(2):   $x0 = ADRP target-flags(aarch64-page) @rmor
SU(4):   $x1 = ADRP target-flags(aarch64-page) @tmmor
SU(3):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @rmor, 0
SU(5):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @tmmor, 0

Fixup kills for %bb.55
Fixup kills for %bb.56
********** MI Scheduling **********
main:%bb.57 if.end154
  From: renamable $x8 = ADRP target-flags(aarch64-page) @ntot
    To: BL @add2, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $w2, implicit-def $sp
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @ntot
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(2):   $x0 = ORRXrs $xzr, $x19, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $x1 = ADRP target-flags(aarch64-page) @t
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x1
SU(4):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @t, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @add2, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $w2, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @ntot
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(3) ORDER                              
  Cand SU(1) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) $x1 = ADRP target-flags(aarch64-page) @t
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) $x0 = ORRXrs $xzr, $x19, 0
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @t, 0
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.57 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @ntot
SU(1):   renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
SU(3):   $x1 = ADRP target-flags(aarch64-page) @t
SU(2):   $x0 = ORRXrs $xzr, $x19, 0
SU(4):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @t, 0

Fixup kills for %bb.57
Fixup kills for %bb.58
********** MI Scheduling **********
main:%bb.59 if.end157
  From: renamable $x8 = ADRP target-flags(aarch64-page) @time
    To: CBZW killed renamable $w8, %bb.63
 RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @time
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x8
    SU(1): Data Latency=1 Reg=$x8
SU(1):   $x9 = ORRXrs $xzr, $x8, 0
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 6
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(7): Data Latency=1 Reg=$x9
    SU(3): Anti Latency=0
SU(2):   renamable $d0 = LDRDui $x8, target-flags(aarch64-pageoff, aarch64-nc) @time :: (dereferenceable load 8 from @time)
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 6
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$d0
    SU(3): Anti Latency=0
    SU(7): Ord  Latency=0 Memory
SU(3):   renamable $x8 = ADRP target-flags(aarch64-page) @dtime
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 6
  Predecessors:
    SU(2): Anti Latency=0
    SU(1): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    SU(5): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x8
SU(4):   renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 2
  Height             : 5
  Predecessors:
    SU(3): Data Latency=1 Reg=$x8
  Successors:
    SU(6): Data Latency=4 Reg=$d1
    SU(5): Anti Latency=0
SU(5):   renamable $w8 = LDURWi $fp, -116 :: (dereferenceable load 4 from %ir.step)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 2
  Height             : 4
  Predecessors:
    SU(4): Anti Latency=0
    SU(3): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(6):   renamable $d0 = FADDDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=4 Reg=$d1
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d0
  Successors:
    SU(7): Data Latency=1 Reg=$d0
SU(7):   STRDui renamable $d0, renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=$d0
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=1 Reg=$x9
ExitSU:   CBZW killed renamable $w8, %bb.63
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @time
  Ready @0c
  TopQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 7
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) $x9 = ORRXrs $xzr, $x8, 0
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $d0 = LDRDui $x8, target-flags(aarch64-pageoff, aarch64-nc) @time :: (dereferenceable load 8 from @time)
  Ready @2c
  TopQ.A BotLatency SU(2) 6c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $x8 = ADRP target-flags(aarch64-page) @dtime
  Ready @3c
  TopQ.A BotLatency SU(3) 6c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
  Ready @4c
  TopQ.A TopLatency SU(4) 2c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $w8 = LDURWi $fp, -116 :: (dereferenceable load 4 from %ir.step)
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 8 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $d0 = FADDDrr renamable $d0, renamable $d1
  Ready @8c
  TopQ.A TopLatency SU(6) 6c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) STRDui renamable $d0, renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)
  Ready @9c
  TopQ.A TopLatency SU(7) 7c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 8
  Executed: 10c
  Critical: 8c, 8 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.59 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @time
SU(1):   $x9 = ORRXrs $xzr, $x8, 0
SU(2):   renamable $d0 = LDRDui $x8, target-flags(aarch64-pageoff, aarch64-nc) @time :: (dereferenceable load 8 from @time)
SU(3):   renamable $x8 = ADRP target-flags(aarch64-page) @dtime
SU(4):   renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
SU(5):   renamable $w8 = LDURWi $fp, -116 :: (dereferenceable load 4 from %ir.step)
SU(6):   renamable $d0 = FADDDrr renamable $d0, renamable $d1
SU(7):   STRDui renamable $d0, renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @time :: (store 8 into @time)

Fixup kills for %bb.59
********** MI Scheduling **********
main:%bb.60 land.lhs.true
  From: renamable $w8 = LDURWi $fp, -116 :: (dereferenceable load 4 from %ir.step)
    To: Bcc 1, %bb.63, implicit $nzcv
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -116 :: (dereferenceable load 4 from %ir.step)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(5): Data Latency=4 Reg=$w8
    SU(3): Data Latency=4 Reg=$w8
SU(1):   renamable $x9 = ADRP target-flags(aarch64-page) @fre
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x9
SU(2):   renamable $w9 = LDRWui renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (dereferenceable load 4 from @fre)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 7
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x9
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$w9
    SU(3): Data Latency=4 Reg=$w9
SU(3):   renamable $w10 = SDIVWr renamable $w8, renamable $w9
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(2): Data Latency=4 Reg=$w9
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(4): Data Latency=1 Reg=$w10
    SU(4): Anti Latency=0
SU(4):   renamable $w9 = nsw MADDWrrr renamable $w10, renamable $w9, $wzr
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1 Reg=$w10
    SU(3): Anti Latency=0
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$w9
  Successors:
    SU(5): Data Latency=1 Reg=$w9
SU(5):   $wzr = SUBSWrs renamable $w9, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=$w9
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 1, %bb.63, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 8
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 8
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x9 = ADRP target-flags(aarch64-page) @fre
  Ready @0c
  TopQ.A BotLatency SU(1) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 8
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -116 :: (dereferenceable load 4 from %ir.step)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w9 = LDRWui renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (dereferenceable load 4 from @fre)
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  TopQ.A BotLatency SU(2) 7c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 6 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w10 = SDIVWr renamable $w8, renamable $w9
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w9 = nsw MADDWrrr renamable $w10, renamable $w9, $wzr
  Ready @7c
  TopQ.A TopLatency SU(4) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $wzr = SUBSWrs renamable $w9, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv
  Ready @8c
  TopQ.A TopLatency SU(5) 7c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.60 ***
SU(1):   renamable $x9 = ADRP target-flags(aarch64-page) @fre
SU(0):   renamable $w8 = LDURWi $fp, -116 :: (dereferenceable load 4 from %ir.step)
SU(2):   renamable $w9 = LDRWui renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @fre :: (dereferenceable load 4 from @fre)
SU(3):   renamable $w10 = SDIVWr renamable $w8, renamable $w9
SU(4):   renamable $w9 = nsw MADDWrrr renamable $w10, renamable $w9, $wzr
SU(5):   $wzr = SUBSWrs renamable $w9, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv

Fixup kills for %bb.60
********** MI Scheduling **********
main:%bb.61 if.then161
  From: renamable $w8 = LDURWi $fp, -116 :: (dereferenceable load 4 from %ir.step)
    To: Bcc 0, %bb.65, implicit $nzcv
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -116 :: (dereferenceable load 4 from %ir.step)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=$w8
SU(1):   renamable $x10 = ADRP target-flags(aarch64-page) @niter
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(2): Data Latency=1 Reg=$x10
SU(2):   renamable $w9 = LDRWui renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(1): Data Latency=1 Reg=$x10
  Successors:
    SU(3): Data Latency=4 Reg=$w9
SU(3):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=$w9
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 0, %bb.65, implicit $nzcv
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x10 = ADRP target-flags(aarch64-page) @niter
  Ready @0c
  TopQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -116 :: (dereferenceable load 4 from %ir.step)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w9 = LDRWui renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  TopQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 6 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.61 ***
SU(1):   renamable $x10 = ADRP target-flags(aarch64-page) @niter
SU(0):   renamable $w8 = LDURWi $fp, -116 :: (dereferenceable load 4 from %ir.step)
SU(2):   renamable $w9 = LDRWui renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
SU(3):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv

Fixup kills for %bb.61
********** MI Scheduling **********
main:%bb.62 if.then163
  From: renamable $w1 = LDURWi $fp, -116 :: (dereferenceable load 4 from %ir.step)
    To: BL @adaptation, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w1 = LDURWi $fp, -116 :: (dereferenceable load 4 from %ir.step)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(1):   $x0 = SUBXri $fp, 168, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @adaptation, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w1 = LDURWi $fp, -116 :: (dereferenceable load 4 from %ir.step)
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = SUBXri $fp, 168, 0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.62 ***
SU(0):   renamable $w1 = LDURWi $fp, -116 :: (dereferenceable load 4 from %ir.step)
SU(1):   $x0 = SUBXri $fp, 168, 0

Fixup kills for %bb.62
Fixup kills for %bb.63
Fixup kills for %bb.64
********** MI Scheduling **********
main:%bb.65 if.end166
  From: renamable $s0 = LDRSui renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @nelt, implicit-def $d0 :: (dereferenceable load 4 from @nelt)
    To: B %bb.20
 RegionInstrs: 11
ScheduleDAGMI::schedule starting
SU(0):   renamable $s0 = LDRSui renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @nelt, implicit-def $d0 :: (dereferenceable load 4 from @nelt)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d0
SU(1):   renamable $w8 = LDURWi $fp, -116 :: (dereferenceable load 4 from %ir.step)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$w8
    SU(10): Ord  Latency=0 Memory
SU(2):   $x9 = ADDXri $sp, 192, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(9): Data Latency=1 Reg=$x9
    SU(3): Data Latency=1 Reg=$x9
SU(3):   renamable $d1 = LDRDui renamable $x9, 14 :: (dereferenceable load 8 from %ir.nelt_tot)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(2): Data Latency=1 Reg=$x9
  Successors:
    SU(7): Data Latency=4 Reg=$d1
    SU(9): Ord  Latency=0 Memory
SU(4):   renamable $q0 = SSHLLv2i32_shift renamable $d0, 0
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d0
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$d0
    SU(6): Data Latency=0 Reg=$q0
SU(5):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
  Successors:
    SU(10): Data Latency=1 Reg=$w8
SU(6):   renamable $d0 = SCVTFv1i64 renamable $d0, implicit $q0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$d0
    SU(4): Data Latency=0 Reg=$q0
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$d0
SU(7):   renamable $d0 = FADDDrr renamable $d1, renamable $d0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$d0
    SU(3): Data Latency=4 Reg=$d1
  Successors:
    SU(9): Data Latency=1 Reg=$d0
SU(8):   $x20 = ADDXri $sp, 192, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(9):   STRDui renamable $d0, renamable $x9, 14 :: (store 8 into %ir.nelt_tot)
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=$d0
    SU(3): Ord  Latency=0 Memory
    SU(2): Data Latency=1 Reg=$x9
SU(10):   STURWi renamable $w8, $fp, -116 :: (store 4 into %ir.step)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=$w8
    SU(1): Ord  Latency=0 Memory
ExitSU:   B %bb.20
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 8 
  TopQ.A RemainingLatency 0 + 0c > CritPath 7
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $s0 = LDRSui renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @nelt, implicit-def $d0 :: (dereferenceable load 4 from @nelt)
  Ready @0c
  TopQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 8 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 7
  Cand SU(8) ORDER                              
  Cand SU(1) TOP-PATH                  5 cycles 
  Cand SU(2) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x9 = ADDXri $sp, 192, 0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 8 1 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 7
  Cand SU(8) ORDER                              
  Cand SU(1) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w8 = LDURWi $fp, -116 :: (dereferenceable load 4 from %ir.step)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 5 
Queue TopQ.A: 8 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 7
  Cand SU(8) ORDER                              
  Cand SU(3) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d1 = LDRDui renamable $x9, 14 :: (dereferenceable load 8 from %ir.nelt_tot)
  Ready @3c
  TopQ.A TopLatency SU(3) 1c
  TopQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 8 4 
  TopQ.A RemainingLatency 0 + 4c > CritPath 7
  Cand SU(8) ORDER                              
  Cand SU(4) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $q0 = SSHLLv2i32_shift renamable $d0, 0
  Ready @4c
  TopQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 8 6 
  TopQ.A RemainingLatency 0 + 5c > CritPath 7
  Cand SU(8) ORDER                              
  Cand SU(6) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) renamable $d0 = SCVTFv1i64 renamable $d0, implicit $q0
  Ready @5c
  TopQ.A TopLatency SU(6) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 8 5 
  TopQ.A RemainingLatency 0 + 6c > CritPath 7
  Cand SU(8) ORDER                              
  Cand SU(5) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 10 7 
  TopQ.A RemainingLatency 0 + 7c > CritPath 7
  Cand SU(8) ORDER                              
  Cand SU(7) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) renamable $d0 = FADDDrr renamable $d1, renamable $d0
  Ready @7c
  TopQ.A TopLatency SU(7) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 10 9 
  TopQ.A RemainingLatency 0 + 8c > CritPath 7
  Cand SU(8) ORDER                              
Pick Top ORDER     
Scheduling SU(8) $x20 = ADDXri $sp, 192, 0
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 10 
  TopQ.A RemainingLatency 0 + 9c > CritPath 7
  Cand SU(9) ORDER                              
Pick Top ORDER     
Scheduling SU(9) STRDui renamable $d0, renamable $x9, 14 :: (store 8 into %ir.nelt_tot)
  Ready @9c
  TopQ.A TopLatency SU(9) 7c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) STURWi renamable $w8, $fp, -116 :: (store 4 into %ir.step)
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.65 ***
SU(0):   renamable $s0 = LDRSui renamable $x27, target-flags(aarch64-pageoff, aarch64-nc) @nelt, implicit-def $d0 :: (dereferenceable load 4 from @nelt)
SU(2):   $x9 = ADDXri $sp, 192, 0
SU(1):   renamable $w8 = LDURWi $fp, -116 :: (dereferenceable load 4 from %ir.step)
SU(3):   renamable $d1 = LDRDui renamable $x9, 14 :: (dereferenceable load 8 from %ir.nelt_tot)
SU(4):   renamable $q0 = SSHLLv2i32_shift renamable $d0, 0
SU(6):   renamable $d0 = SCVTFv1i64 renamable $d0, implicit $q0
SU(5):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
SU(7):   renamable $d0 = FADDDrr renamable $d1, renamable $d0
SU(8):   $x20 = ADDXri $sp, 192, 0
SU(9):   STRDui renamable $d0, renamable $x9, 14 :: (store 8 into %ir.nelt_tot)
SU(10):   STURWi renamable $w8, $fp, -116 :: (store 4 into %ir.step)

Fixup kills for %bb.65
********** MI Scheduling **********
main:%bb.66 for.end170
  From: renamable $x8 = ADRP target-flags(aarch64-page) @timeron
    To: CBZW killed renamable $w8, %bb.80
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
ExitSU:   CBZW killed renamable $w8, %bb.80
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.66 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)

********** MI Scheduling **********
main:%bb.66 for.end170
  From: renamable $x8 = ADRP target-flags(aarch64-page) @nmxh
    To: BL @print_results, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit $w4, implicit $w5, implicit $d0, implicit $d1, implicit $x6, implicit $w7, implicit-def $sp
 RegionInstrs: 48
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @nmxh
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 12
  Successors:
    SU(1): Out  Latency=1
    SU(10): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 11
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(4): Out  Latency=1
    SU(10): Out  Latency=1
    SU(4): Data Latency=4 Reg=$w8
    SU(10): Anti Latency=0
SU(2):   $w9 = MOVZWi 125, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 8
  Successors:
    SU(5): Out  Latency=1
    SU(4): Data Latency=1 Reg=$w9
SU(3):   renamable $d1, renamable $d0 = LDPDi renamable $x26, 14 :: (dereferenceable load 8 from %ir.nelt_tot), (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=4 Reg=$d1
    ExitSU: Ord  Latency=4 Artificial
    SU(15): Data Latency=4 Reg=$d0
SU(4):   renamable $w8 = MADDWrrr renamable $w8, renamable $w9, $wzr
  # preds left       : 3
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 7
  Predecessors:
    SU(1): Data Latency=4 Reg=$w8
    SU(1): Out  Latency=1
    SU(2): Data Latency=1 Reg=$w9
  Successors:
    SU(7): Out  Latency=1
    SU(10): Out  Latency=1
    SU(7): Data Latency=1 Reg=$w8
    SU(10): Anti Latency=0
    SU(5): Anti Latency=0
SU(5):   $x9 = MOVZXi 33920, 32
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(4): Anti Latency=0
    SU(2): Out  Latency=1
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x9
SU(6):   $x9 = MOVKXi $x9(tied-def 0), 16686, 48
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 5
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x9
  Successors:
    SU(20): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x9
SU(7):   renamable $w8 = ADDWri renamable $w8, 125, 0
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 6
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$w8
  Successors:
    SU(10): Out  Latency=1
    SU(8): Data Latency=1 Reg=$w8
    SU(10): Anti Latency=0
SU(8):   renamable $d2 = SCVTFUWDri renamable $w8
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 5
  Predecessors:
    SU(7): Data Latency=1 Reg=$w8
  Successors:
    SU(13): Out  Latency=1
    SU(12): Data Latency=1 Reg=$d2
    SU(10): Anti Latency=0
SU(9):   renamable $w1 = LDURSBWi $fp, -164 :: (dereferenceable load 1 from %ir.Class, align 4)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(10):   renamable $x8 = ADRP target-flags(aarch64-page) @niter
  # preds left       : 8
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 5
  Predecessors:
    SU(8): Anti Latency=0
    SU(7): Out  Latency=1
    SU(7): Anti Latency=0
    SU(4): Out  Latency=1
    SU(4): Anti Latency=0
    SU(1): Out  Latency=1
    SU(1): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    SU(18): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x8
SU(11):   renamable $w5 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(10): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(18): Anti Latency=0
SU(12):   renamable $d1 = FMULDrr renamable $d1, renamable $d2
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(8): Data Latency=1 Reg=$d2
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d1
  Successors:
    SU(16): Out  Latency=1
    SU(16): Data Latency=1 Reg=$d1
    SU(13): Anti Latency=0
SU(13):   $d2 = FMOVXDr $x9
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(12): Anti Latency=0
    SU(8): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x9
  Successors:
    SU(15): Out  Latency=1
    SU(15): Data Latency=1 Reg=$d2
    SU(20): Anti Latency=0
SU(14):   renamable $w7 = LDURWi $fp, -172 :: (dereferenceable load 4 from %ir.verified)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(15):   renamable $d2 = FMULDrr renamable $d0, renamable $d2
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 2
  Predecessors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$d2
    SU(3): Data Latency=4 Reg=$d0
  Successors:
    SU(16): Data Latency=1 Reg=$d2
SU(16):   renamable $d1 = FDIVDrr renamable $d1, renamable $d2
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(15): Data Latency=1 Reg=$d2
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$d1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(17): Data Latency=1 Reg=$d1
SU(17):   STRDui renamable $d1, renamable $x26, 16 :: (store 8 into %ir.mflops)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(16): Data Latency=1 Reg=$d1
SU(18):   $x8 = ADRP target-flags(aarch64-page) @.str.33
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(11): Anti Latency=0
    SU(10): Out  Latency=1
  Successors:
    SU(19): Out  Latency=1
    SU(19): Data Latency=1 Reg=$x8
SU(19):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.33, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 3
  Predecessors:
    SU(18): Out  Latency=1
    SU(18): Data Latency=1 Reg=$x8
  Successors:
    SU(35): Out  Latency=1
    SU(34): Data Latency=1 Reg=$x8
SU(20):   $x9 = ADRP target-flags(aarch64-page) @.str.32
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(13): Anti Latency=0
    SU(6): Out  Latency=1
  Successors:
    SU(21): Out  Latency=1
    SU(21): Data Latency=1 Reg=$x9
SU(21):   renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.32, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 3
  Predecessors:
    SU(20): Out  Latency=1
    SU(20): Data Latency=1 Reg=$x9
  Successors:
    SU(34): Data Latency=1 Reg=$x9
SU(22):   $x10 = ADRP target-flags(aarch64-page) @.str.31
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(23): Out  Latency=1
    SU(23): Data Latency=1 Reg=$x10
SU(23):   renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.31, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(22): Out  Latency=1
    SU(22): Data Latency=1 Reg=$x10
  Successors:
    SU(37): Data Latency=1 Reg=$x10
SU(24):   $x11 = ADRP target-flags(aarch64-page) @.str.30
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(25): Out  Latency=1
    SU(25): Data Latency=1 Reg=$x11
SU(25):   renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @.str.30, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(24): Out  Latency=1
    SU(24): Data Latency=1 Reg=$x11
  Successors:
    SU(37): Data Latency=1 Reg=$x11
SU(26):   $x12 = ADRP target-flags(aarch64-page) @.str.29
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(27): Out  Latency=1
    SU(27): Data Latency=1 Reg=$x12
SU(27):   renamable $x12 = ADDXri $x12, target-flags(aarch64-pageoff, aarch64-nc) @.str.29, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(26): Out  Latency=1
    SU(26): Data Latency=1 Reg=$x12
  Successors:
    SU(40): Data Latency=1 Reg=$x12
SU(28):   $x13 = ADRP target-flags(aarch64-page) @.str.28
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(29): Out  Latency=1
    SU(29): Data Latency=1 Reg=$x13
SU(29):   renamable $x13 = ADDXri $x13, target-flags(aarch64-pageoff, aarch64-nc) @.str.28, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(28): Out  Latency=1
    SU(28): Data Latency=1 Reg=$x13
  Successors:
    SU(40): Data Latency=1 Reg=$x13
SU(30):   $x14 = ADRP target-flags(aarch64-page) @.str.27
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(31): Out  Latency=1
    SU(31): Data Latency=1 Reg=$x14
SU(31):   renamable $x14 = ADDXri $x14, target-flags(aarch64-pageoff, aarch64-nc) @.str.27, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(30): Out  Latency=1
    SU(30): Data Latency=1 Reg=$x14
  Successors:
    SU(43): Data Latency=1 Reg=$x14
SU(32):   $x15 = ADRP target-flags(aarch64-page) @.str.26
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(33): Out  Latency=1
    SU(33): Data Latency=1 Reg=$x15
SU(33):   renamable $x15 = ADDXri $x15, target-flags(aarch64-pageoff, aarch64-nc) @.str.26, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(32): Out  Latency=1
    SU(32): Data Latency=1 Reg=$x15
  Successors:
    SU(43): Data Latency=1 Reg=$x15
SU(34):   STPXi renamable $x9, renamable $x8, $sp, 7 :: (store 8 into stack + 64), (store 8 into stack + 56)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 2
  Predecessors:
    SU(21): Data Latency=1 Reg=$x9
    SU(19): Data Latency=1 Reg=$x8
  Successors:
    SU(35): Anti Latency=0
SU(35):   $x8 = ADRP target-flags(aarch64-page) @.str.25
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 2
  Predecessors:
    SU(34): Anti Latency=0
    SU(19): Out  Latency=1
  Successors:
    SU(36): Out  Latency=1
    SU(36): Data Latency=1 Reg=$x8
SU(36):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.25, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 1
  Predecessors:
    SU(35): Out  Latency=1
    SU(35): Data Latency=1 Reg=$x8
  Successors:
    SU(44): Data Latency=1 Reg=$x8
SU(37):   STPXi renamable $x11, renamable $x10, $sp, 5 :: (store 8 into stack + 48), (store 8 into stack + 40)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(25): Data Latency=1 Reg=$x11
    SU(23): Data Latency=1 Reg=$x10
SU(38):   $x0 = ADRP target-flags(aarch64-page) @.str.23
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(39): Out  Latency=1
    SU(39): Data Latency=1 Reg=$x0
SU(39):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.23, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(38): Out  Latency=1
    SU(38): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(40):   STPXi renamable $x13, renamable $x12, $sp, 3 :: (store 8 into stack + 32), (store 8 into stack + 24)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(29): Data Latency=1 Reg=$x13
    SU(27): Data Latency=1 Reg=$x12
SU(41):   $x6 = ADRP target-flags(aarch64-page) @.str.24
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(42): Out  Latency=1
    SU(42): Data Latency=1 Reg=$x6
SU(42):   renamable $x6 = ADDXri $x6, target-flags(aarch64-pageoff, aarch64-nc) @.str.24, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(41): Out  Latency=1
    SU(41): Data Latency=1 Reg=$x6
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(43):   STPXi renamable $x15, renamable $x14, $sp, 1 :: (store 8 into stack + 16), (store 8 into stack + 8)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(33): Data Latency=1 Reg=$x15
    SU(31): Data Latency=1 Reg=$x14
SU(44):   STRXui renamable $x8, $sp, 0 :: (store 8 into stack)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(36): Data Latency=1 Reg=$x8
SU(45):   $w2 = MOVZWi 7, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(46):   $w3 = ORRWrs $wzr, $wzr, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(47):   $w4 = ORRWrs $wzr, $wzr, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @print_results, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit $w4, implicit $w5, implicit $d0, implicit $d1, implicit $x6, implicit $w7, implicit-def $sp
  # preds left       : 10
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(47): Ord  Latency=1 Artificial
    SU(46): Ord  Latency=1 Artificial
    SU(45): Ord  Latency=1 Artificial
    SU(42): Ord  Latency=1 Artificial
    SU(39): Ord  Latency=1 Artificial
    SU(16): Ord  Latency=1 Artificial
    SU(14): Ord  Latency=4 Artificial
    SU(11): Ord  Latency=4 Artificial
    SU(9): Ord  Latency=4 Artificial
    SU(3): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 12
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 9 14 22 24 26 28 30 32 38 41 45 46 47 
  TopQ.A RemainingLatency 0 + 0c > CritPath 12
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @nmxh
  Ready @0c
  TopQ.A BotLatency SU(0) 12c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 2 3 9 14 22 24 26 28 30 32 38 41 45 46 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 12
  Cand SU(47) ORDER                              
  Cand SU(2) TOP-PATH                  8 cycles 
  Cand SU(1) TOP-PATH                  11 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 2 3 9 14 22 24 26 28 30 32 38 41 45 46 
  TopQ.A RemainingLatency 0 + 2c > CritPath 12
  Cand SU(47) ORDER                              
  Cand SU(2) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $w9 = MOVZWi 125, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 47 46 3 9 14 22 24 26 28 30 32 38 41 45 
  TopQ.A RemainingLatency 0 + 3c > CritPath 12
  Cand SU(47) ORDER                              
  Cand SU(46) ORDER                              
  Cand SU(3) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d1, renamable $d0 = LDPDi renamable $x26, 14 :: (dereferenceable load 8 from %ir.nelt_tot), (dereferenceable load 8 from %ir.tmax)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 47 46 45 9 14 22 24 26 28 30 32 38 41 
  TopQ.A RemainingLatency 0 + 4c > CritPath 12
  Cand SU(47) ORDER                              
  Cand SU(46) ORDER                              
  Cand SU(45) ORDER                              
  Cand SU(9) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(9) renamable $w1 = LDURSBWi $fp, -164 :: (dereferenceable load 1 from %ir.Class, align 4)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 46 45 41 14 22 24 26 28 30 32 38 4 
  TopQ.A RemainingLatency 0 + 5c > CritPath 12
  Cand SU(47) ORDER                              
  Cand SU(46) ORDER                              
  Cand SU(45) ORDER                              
  Cand SU(41) TOP-PATH                  2 cycles 
  Cand SU(14) TOP-PATH                  4 cycles 
  Cand SU(4) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $w8 = MADDWrrr renamable $w8, renamable $w9, $wzr
  Ready @5c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 46 45 41 14 22 24 26 28 30 32 38 7 5 
  TopQ.A RemainingLatency 0 + 6c > CritPath 12
  Cand SU(47) ORDER                              
  Cand SU(46) ORDER                              
  Cand SU(45) ORDER                              
  Cand SU(41) TOP-PATH                  2 cycles 
  Cand SU(14) TOP-PATH                  4 cycles 
  Cand SU(7) TOP-PATH                  6 cycles 
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) $x9 = MOVZXi 33920, 32
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 46 45 41 14 22 24 26 28 30 32 38 7 6 
  TopQ.A RemainingLatency 0 + 7c > CritPath 12
  Cand SU(47) ORDER                              
  Cand SU(46) ORDER                              
  Cand SU(45) ORDER                              
  Cand SU(41) TOP-PATH                  2 cycles 
  Cand SU(14) TOP-PATH                  4 cycles 
  Cand SU(7) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) renamable $w8 = ADDWri renamable $w8, 125, 0
  Ready @7c
  TopQ.A TopLatency SU(7) 6c
  TopQ.A BotLatency SU(7) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 46 45 41 14 22 24 26 28 30 32 38 6 8 
  TopQ.A RemainingLatency 0 + 8c > CritPath 12
  Cand SU(47) ORDER                              
  Cand SU(46) ORDER                              
  Cand SU(45) ORDER                              
  Cand SU(41) TOP-PATH                  2 cycles 
  Cand SU(14) TOP-PATH                  4 cycles 
  Cand SU(6) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) $x9 = MOVKXi $x9(tied-def 0), 16686, 48
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 46 45 41 14 22 24 26 28 30 32 38 8 
  TopQ.A RemainingLatency 0 + 9c > CritPath 12
  Cand SU(47) ORDER                              
  Cand SU(46) ORDER                              
  Cand SU(45) ORDER                              
  Cand SU(41) TOP-PATH                  2 cycles 
  Cand SU(14) TOP-PATH                  4 cycles 
  Cand SU(8) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $d2 = SCVTFUWDri renamable $w8
  Ready @9c
  TopQ.A TopLatency SU(8) 7c
  TopQ.A BotLatency SU(8) 5c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 46 45 41 14 22 24 26 28 30 32 38 12 10 
  TopQ.A RemainingLatency 0 + 10c > CritPath 12
  Cand SU(47) ORDER                              
  Cand SU(46) ORDER                              
  Cand SU(45) ORDER                              
  Cand SU(41) TOP-PATH                  2 cycles 
  Cand SU(14) TOP-PATH                  4 cycles 
  Cand SU(12) ORDER                              
  Cand SU(10) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(10) renamable $x8 = ADRP target-flags(aarch64-page) @niter
  Ready @10c
  TopQ.A BotLatency SU(10) 5c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 46 45 41 14 22 24 26 28 30 32 38 12 11 
  TopQ.A RemainingLatency 0 + 11c > CritPath 12
  Cand SU(47) ORDER                              
  Cand SU(46) ORDER                              
  Cand SU(45) ORDER                              
  Cand SU(41) TOP-PATH                  2 cycles 
  Cand SU(14) TOP-PATH                  4 cycles 
  Cand SU(12) ORDER                              
  Cand SU(11) ORDER                              
Pick Top ORDER     
Scheduling SU(11) renamable $w5 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
  Ready @11c
  TopQ.A TopLatency SU(11) 8c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 46 45 41 14 22 24 26 28 30 32 38 12 18 
  TopQ.A RemainingLatency 0 + 12c > CritPath 12
  Cand SU(47) ORDER                              
  Cand SU(46) ORDER                              
  Cand SU(45) ORDER                              
  Cand SU(41) TOP-PATH                  2 cycles 
  Cand SU(14) TOP-PATH                  4 cycles 
  Cand SU(12) ORDER                              
Pick Top ORDER     
Scheduling SU(12) renamable $d1 = FMULDrr renamable $d1, renamable $d2
  Ready @12c
  TopQ.A BotLatency SU(12) 4c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 46 45 41 14 22 24 26 28 30 32 38 18 13 
  TopQ.A RemainingLatency 0 + 13c > CritPath 12
  Cand SU(47) ORDER                              
  Cand SU(46) ORDER                              
  Cand SU(45) ORDER                              
  Cand SU(41) TOP-PATH                  2 cycles 
  Cand SU(14) TOP-PATH                  4 cycles 
  Cand SU(13) ORDER                              
Pick Top ORDER     
Scheduling SU(13) $d2 = FMOVXDr $x9
  Ready @13c
  TopQ.A BotLatency SU(13) 4c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 46 45 41 14 22 24 26 28 30 32 38 18 15 20 
  TopQ.A RemainingLatency 0 + 14c > CritPath 12
  Cand SU(47) ORDER                              
  Cand SU(46) ORDER                              
  Cand SU(45) ORDER                              
  Cand SU(41) TOP-PATH                  2 cycles 
  Cand SU(14) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(14) renamable $w7 = LDURWi $fp, -172 :: (dereferenceable load 4 from %ir.verified)
  Ready @14c
  TopQ.A BotLatency SU(14) 4c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 46 45 41 20 22 24 26 28 30 32 38 18 15 
  TopQ.A RemainingLatency 0 + 15c > CritPath 12
  Cand SU(47) ORDER                              
  Cand SU(46) ORDER                              
  Cand SU(45) ORDER                              
  Cand SU(41) TOP-PATH                  2 cycles 
  Cand SU(20) TOP-PATH                  4 cycles 
  Cand SU(18) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(18) $x8 = ADRP target-flags(aarch64-page) @.str.33
  Ready @15c
  TopQ.A BotLatency SU(18) 4c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 46 45 41 20 22 24 26 28 30 32 38 15 19 
  TopQ.A RemainingLatency 0 + 16c > CritPath 12
  Cand SU(47) ORDER                              
  Cand SU(46) ORDER                              
  Cand SU(45) ORDER                              
  Cand SU(41) TOP-PATH                  2 cycles 
  Cand SU(20) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(20) $x9 = ADRP target-flags(aarch64-page) @.str.32
  Ready @16c
  TopQ.A BotLatency SU(20) 4c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 46 45 41 19 22 24 26 28 30 32 38 15 21 
  TopQ.A RemainingLatency 0 + 17c > CritPath 12
  Cand SU(47) ORDER                              
  Cand SU(46) ORDER                              
  Cand SU(45) ORDER                              
  Cand SU(41) TOP-PATH                  2 cycles 
  Cand SU(19) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(19) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.33, 0
  Ready @17c
  TopQ.A TopLatency SU(19) 9c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 46 45 41 21 22 24 26 28 30 32 38 15 
  TopQ.A RemainingLatency 0 + 18c > CritPath 12
  Cand SU(47) ORDER                              
  Cand SU(46) ORDER                              
  Cand SU(45) ORDER                              
  Cand SU(41) TOP-PATH                  2 cycles 
  Cand SU(21) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(21) renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.32, 0
  Ready @18c
  TopQ.A BotLatency SU(21) 3c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 46 45 41 15 22 24 26 28 30 32 38 34 
  TopQ.A RemainingLatency 0 + 19c > CritPath 12
  Cand SU(47) ORDER                              
  Cand SU(46) ORDER                              
  Cand SU(45) ORDER                              
  Cand SU(41) TOP-PATH                  2 cycles 
  Cand SU(15) ORDER                              
Pick Top ORDER     
Scheduling SU(15) renamable $d2 = FMULDrr renamable $d0, renamable $d2
  Ready @19c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 46 45 41 34 22 24 26 28 30 32 38 16 
  TopQ.A RemainingLatency 0 + 20c > CritPath 12
  Cand SU(47) ORDER                              
  Cand SU(46) ORDER                              
  Cand SU(45) ORDER                              
  Cand SU(41) TOP-PATH                  2 cycles 
  Cand SU(34) ORDER                              
  Cand SU(22) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(22) $x10 = ADRP target-flags(aarch64-page) @.str.31
  Ready @20c
  TopQ.A BotLatency SU(22) 2c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 46 45 41 34 16 24 26 28 30 32 38 23 
  TopQ.A RemainingLatency 0 + 21c > CritPath 12
  Cand SU(47) ORDER                              
  Cand SU(46) ORDER                              
  Cand SU(45) ORDER                              
  Cand SU(41) TOP-PATH                  2 cycles 
  Cand SU(34) ORDER                              
  Cand SU(24) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(24) $x11 = ADRP target-flags(aarch64-page) @.str.30
  Ready @21c
  TopQ.A BotLatency SU(24) 2c
  *** Max MOps 1 at cycle 21
Cycle: 22 TopQ.A
TopQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 46 45 41 34 16 23 26 28 30 32 38 25 
  TopQ.A RemainingLatency 0 + 22c > CritPath 12
  Cand SU(47) ORDER                              
  Cand SU(46) ORDER                              
  Cand SU(45) ORDER                              
  Cand SU(41) TOP-PATH                  2 cycles 
  Cand SU(34) ORDER                              
  Cand SU(26) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(26) $x12 = ADRP target-flags(aarch64-page) @.str.29
  Ready @22c
  TopQ.A BotLatency SU(26) 2c
  *** Max MOps 1 at cycle 22
Cycle: 23 TopQ.A
TopQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 46 45 41 34 16 23 25 28 30 32 38 27 
  TopQ.A RemainingLatency 0 + 23c > CritPath 12
  Cand SU(47) ORDER                              
  Cand SU(46) ORDER                              
  Cand SU(45) ORDER                              
  Cand SU(41) TOP-PATH                  2 cycles 
  Cand SU(34) ORDER                              
  Cand SU(28) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(28) $x13 = ADRP target-flags(aarch64-page) @.str.28
  Ready @23c
  TopQ.A BotLatency SU(28) 2c
  *** Max MOps 1 at cycle 23
Cycle: 24 TopQ.A
TopQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 46 45 41 34 16 23 25 27 30 32 38 29 
  TopQ.A RemainingLatency 0 + 24c > CritPath 12
  Cand SU(47) ORDER                              
  Cand SU(46) ORDER                              
  Cand SU(45) ORDER                              
  Cand SU(41) TOP-PATH                  2 cycles 
  Cand SU(34) ORDER                              
  Cand SU(30) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(30) $x14 = ADRP target-flags(aarch64-page) @.str.27
  Ready @24c
  TopQ.A BotLatency SU(30) 2c
  *** Max MOps 1 at cycle 24
Cycle: 25 TopQ.A
TopQ.A @25c
  Retired: 25
  Executed: 25c
  Critical: 25c, 25 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 46 45 41 34 16 23 25 27 29 32 38 31 
  TopQ.A RemainingLatency 0 + 25c > CritPath 12
  Cand SU(47) ORDER                              
  Cand SU(46) ORDER                              
  Cand SU(45) ORDER                              
  Cand SU(41) TOP-PATH                  2 cycles 
  Cand SU(34) ORDER                              
  Cand SU(32) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(32) $x15 = ADRP target-flags(aarch64-page) @.str.26
  Ready @25c
  TopQ.A BotLatency SU(32) 2c
  *** Max MOps 1 at cycle 25
Cycle: 26 TopQ.A
TopQ.A @26c
  Retired: 26
  Executed: 26c
  Critical: 26c, 26 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 46 45 41 34 16 23 25 27 29 31 38 33 
  TopQ.A RemainingLatency 0 + 26c > CritPath 12
  Cand SU(47) ORDER                              
  Cand SU(46) ORDER                              
  Cand SU(45) ORDER                              
  Cand SU(41) TOP-PATH                  2 cycles 
  Cand SU(34) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(34) STPXi renamable $x9, renamable $x8, $sp, 7 :: (store 8 into stack + 64), (store 8 into stack + 56)
  Ready @26c
  TopQ.A TopLatency SU(34) 10c
  TopQ.A BotLatency SU(34) 2c
  *** Max MOps 1 at cycle 26
Cycle: 27 TopQ.A
TopQ.A @27c
  Retired: 27
  Executed: 27c
  Critical: 27c, 27 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 46 45 41 33 16 23 25 27 29 31 38 35 
  TopQ.A RemainingLatency 0 + 27c > CritPath 12
  Cand SU(47) ORDER                              
  Cand SU(46) ORDER                              
  Cand SU(45) ORDER                              
  Cand SU(41) TOP-PATH                  2 cycles 
  Cand SU(38) ORDER                              
  Cand SU(35) ORDER                              
Pick Top ORDER     
Scheduling SU(35) $x8 = ADRP target-flags(aarch64-page) @.str.25
  Ready @27c
  TopQ.A BotLatency SU(35) 2c
  *** Max MOps 1 at cycle 27
Cycle: 28 TopQ.A
TopQ.A @28c
  Retired: 28
  Executed: 28c
  Critical: 28c, 28 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 46 45 41 33 16 23 25 27 29 31 38 36 
  TopQ.A RemainingLatency 0 + 28c > CritPath 12
  Cand SU(47) ORDER                              
  Cand SU(46) ORDER                              
  Cand SU(45) ORDER                              
  Cand SU(41) TOP-PATH                  2 cycles 
  Cand SU(38) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(38) $x0 = ADRP target-flags(aarch64-page) @.str.23
  Ready @28c
  TopQ.A BotLatency SU(38) 2c
  *** Max MOps 1 at cycle 28
Cycle: 29 TopQ.A
TopQ.A @29c
  Retired: 29
  Executed: 29c
  Critical: 29c, 29 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 46 45 41 33 16 23 25 27 29 31 36 39 
  TopQ.A RemainingLatency 0 + 29c > CritPath 12
  Cand SU(47) ORDER                              
  Cand SU(46) ORDER                              
  Cand SU(45) ORDER                              
  Cand SU(41) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(41) $x6 = ADRP target-flags(aarch64-page) @.str.24
  Ready @29c
  TopQ.A BotLatency SU(41) 2c
  *** Max MOps 1 at cycle 29
Cycle: 30 TopQ.A
TopQ.A @30c
  Retired: 30
  Executed: 30c
  Critical: 30c, 30 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 46 45 39 33 16 23 25 27 29 31 36 42 
  TopQ.A RemainingLatency 0 + 30c > CritPath 12
  Cand SU(47) ORDER                              
  Cand SU(46) ORDER                              
  Cand SU(45) ORDER                              
  Cand SU(39) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(16) ORDER                              
Pick Top ORDER     
Scheduling SU(16) renamable $d1 = FDIVDrr renamable $d1, renamable $d2
  Ready @30c
  *** Max MOps 1 at cycle 30
Cycle: 31 TopQ.A
TopQ.A @31c
  Retired: 31
  Executed: 31c
  Critical: 31c, 31 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 46 45 39 33 42 23 25 27 29 31 36 17 
  TopQ.A RemainingLatency 0 + 31c > CritPath 12
  Cand SU(47) ORDER                              
  Cand SU(46) ORDER                              
  Cand SU(45) ORDER                              
  Cand SU(39) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(23) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(23) renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.31, 0
  Ready @31c
  TopQ.A BotLatency SU(23) 1c
  *** Max MOps 1 at cycle 31
Cycle: 32 TopQ.A
TopQ.A @32c
  Retired: 32
  Executed: 32c
  Critical: 32c, 32 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 46 45 39 33 42 17 25 27 29 31 36 
  TopQ.A RemainingLatency 0 + 32c > CritPath 12
  Cand SU(47) ORDER                              
  Cand SU(46) ORDER                              
  Cand SU(45) ORDER                              
  Cand SU(39) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(25) ORDER                              
Pick Top ORDER     
Scheduling SU(25) renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @.str.30, 0
  Ready @32c
  TopQ.A BotLatency SU(25) 1c
  *** Max MOps 1 at cycle 32
Cycle: 33 TopQ.A
TopQ.A @33c
  Retired: 33
  Executed: 33c
  Critical: 33c, 33 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 46 45 39 33 42 17 36 27 29 31 37 
  TopQ.A RemainingLatency 0 + 33c > CritPath 12
  Cand SU(47) ORDER                              
  Cand SU(46) ORDER                              
  Cand SU(45) ORDER                              
  Cand SU(39) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(27) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(27) renamable $x12 = ADDXri $x12, target-flags(aarch64-pageoff, aarch64-nc) @.str.29, 0
  Ready @33c
  TopQ.A BotLatency SU(27) 1c
  *** Max MOps 1 at cycle 33
Cycle: 34 TopQ.A
TopQ.A @34c
  Retired: 34
  Executed: 34c
  Critical: 34c, 34 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 46 45 39 33 42 17 36 37 29 31 
  TopQ.A RemainingLatency 0 + 34c > CritPath 12
  Cand SU(47) ORDER                              
  Cand SU(46) ORDER                              
  Cand SU(45) ORDER                              
  Cand SU(39) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(29) ORDER                              
Pick Top ORDER     
Scheduling SU(29) renamable $x13 = ADDXri $x13, target-flags(aarch64-pageoff, aarch64-nc) @.str.28, 0
  Ready @34c
  TopQ.A BotLatency SU(29) 1c
  *** Max MOps 1 at cycle 34
Cycle: 35 TopQ.A
TopQ.A @35c
  Retired: 35
  Executed: 35c
  Critical: 35c, 35 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 46 45 39 33 42 17 36 37 31 40 
  TopQ.A RemainingLatency 0 + 35c > CritPath 12
  Cand SU(47) ORDER                              
  Cand SU(46) ORDER                              
  Cand SU(45) ORDER                              
  Cand SU(39) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(31) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(31) renamable $x14 = ADDXri $x14, target-flags(aarch64-pageoff, aarch64-nc) @.str.27, 0
  Ready @35c
  TopQ.A BotLatency SU(31) 1c
  *** Max MOps 1 at cycle 35
Cycle: 36 TopQ.A
TopQ.A @36c
  Retired: 36
  Executed: 36c
  Critical: 36c, 36 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 46 45 39 33 42 17 36 37 40 
  TopQ.A RemainingLatency 0 + 36c > CritPath 12
  Cand SU(47) ORDER                              
  Cand SU(46) ORDER                              
  Cand SU(45) ORDER                              
  Cand SU(39) ORDER                              
  Cand SU(33) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(33) renamable $x15 = ADDXri $x15, target-flags(aarch64-pageoff, aarch64-nc) @.str.26, 0
  Ready @36c
  TopQ.A BotLatency SU(33) 1c
  *** Max MOps 1 at cycle 36
Cycle: 37 TopQ.A
TopQ.A @37c
  Retired: 37
  Executed: 37c
  Critical: 37c, 37 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 46 45 39 40 42 17 36 37 43 
  TopQ.A RemainingLatency 0 + 37c > CritPath 12
  Cand SU(47) ORDER                              
  Cand SU(46) ORDER                              
  Cand SU(45) ORDER                              
  Cand SU(39) ORDER                              
  Cand SU(36) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(36) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.25, 0
  Ready @37c
  TopQ.A TopLatency SU(36) 11c
  TopQ.A BotLatency SU(36) 1c
  *** Max MOps 1 at cycle 37
Cycle: 38 TopQ.A
TopQ.A @38c
  Retired: 38
  Executed: 38c
  Critical: 38c, 38 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 46 45 39 40 42 17 43 37 44 
  TopQ.A RemainingLatency 0 + 38c > CritPath 12
  Cand SU(47) ORDER                              
  Cand SU(46) ORDER                              
  Cand SU(45) ORDER                              
  Cand SU(39) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(39) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.23, 0
  Ready @38c
  TopQ.A BotLatency SU(39) 1c
  *** Max MOps 1 at cycle 38
Cycle: 39 TopQ.A
TopQ.A @39c
  Retired: 39
  Executed: 39c
  Critical: 39c, 39 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 46 45 44 40 42 17 43 37 
  TopQ.A RemainingLatency 0 + 39c > CritPath 12
  Cand SU(47) ORDER                              
  Cand SU(46) ORDER                              
  Cand SU(45) ORDER                              
  Cand SU(42) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(42) renamable $x6 = ADDXri $x6, target-flags(aarch64-pageoff, aarch64-nc) @.str.24, 0
  Ready @39c
  TopQ.A BotLatency SU(42) 1c
  *** Max MOps 1 at cycle 39
Cycle: 40 TopQ.A
TopQ.A @40c
  Retired: 40
  Executed: 40c
  Critical: 40c, 40 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 46 45 44 40 37 17 43 
  TopQ.A RemainingLatency 0 + 40c > CritPath 12
  Cand SU(47) ORDER                              
  Cand SU(46) ORDER                              
  Cand SU(45) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(45) $w2 = MOVZWi 7, 0
  Ready @40c
  TopQ.A BotLatency SU(45) 1c
  *** Max MOps 1 at cycle 40
Cycle: 41 TopQ.A
TopQ.A @41c
  Retired: 41
  Executed: 41c
  Critical: 41c, 41 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 46 43 44 40 37 17 
  TopQ.A RemainingLatency 0 + 41c > CritPath 12
  Cand SU(47) ORDER                              
  Cand SU(46) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(46) $w3 = ORRWrs $wzr, $wzr, 0
  Ready @41c
  TopQ.A BotLatency SU(46) 1c
  *** Max MOps 1 at cycle 41
Cycle: 42 TopQ.A
TopQ.A @42c
  Retired: 42
  Executed: 42c
  Critical: 42c, 42 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 17 43 44 40 37 
  TopQ.A RemainingLatency 0 + 42c > CritPath 12
  Cand SU(47) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(47) $w4 = ORRWrs $wzr, $wzr, 0
  Ready @42c
  TopQ.A BotLatency SU(47) 1c
  *** Max MOps 1 at cycle 42
Cycle: 43 TopQ.A
TopQ.A @43c
  Retired: 43
  Executed: 43c
  Critical: 43c, 43 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 17 43 44 40 
  TopQ.A RemainingLatency 0 + 43c > CritPath 12
  Cand SU(37) ORDER                              
  Cand SU(17) ORDER                              
Pick Top ORDER     
Scheduling SU(17) STRDui renamable $d1, renamable $x26, 16 :: (store 8 into %ir.mflops)
  Ready @43c
  *** Max MOps 1 at cycle 43
Cycle: 44 TopQ.A
TopQ.A @44c
  Retired: 44
  Executed: 44c
  Critical: 44c, 44 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 40 43 44 
  TopQ.A RemainingLatency 0 + 44c > CritPath 12
  Cand SU(37) ORDER                              
Pick Top ORDER     
Scheduling SU(37) STPXi renamable $x11, renamable $x10, $sp, 5 :: (store 8 into stack + 48), (store 8 into stack + 40)
  Ready @44c
  *** Max MOps 1 at cycle 44
Cycle: 45 TopQ.A
TopQ.A @45c
  Retired: 45
  Executed: 45c
  Critical: 45c, 45 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 44 40 43 
  TopQ.A RemainingLatency 0 + 45c > CritPath 12
  Cand SU(44) ORDER                              
  Cand SU(40) ORDER                              
Pick Top ORDER     
Scheduling SU(40) STPXi renamable $x13, renamable $x12, $sp, 3 :: (store 8 into stack + 32), (store 8 into stack + 24)
  Ready @45c
  *** Max MOps 1 at cycle 45
Cycle: 46 TopQ.A
TopQ.A @46c
  Retired: 46
  Executed: 46c
  Critical: 46c, 46 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 44 43 
  TopQ.A RemainingLatency 0 + 46c > CritPath 12
  Cand SU(44) ORDER                              
  Cand SU(43) ORDER                              
Pick Top ORDER     
Scheduling SU(43) STPXi renamable $x15, renamable $x14, $sp, 1 :: (store 8 into stack + 16), (store 8 into stack + 8)
  Ready @46c
  *** Max MOps 1 at cycle 46
Cycle: 47 TopQ.A
TopQ.A @47c
  Retired: 47
  Executed: 47c
  Critical: 47c, 47 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 44 
Pick Top ONLY1     
Scheduling SU(44) STRXui renamable $x8, $sp, 0 :: (store 8 into stack)
  Ready @47c
  TopQ.A TopLatency SU(44) 12c
  *** Max MOps 1 at cycle 47
Cycle: 48 TopQ.A
TopQ.A @48c
  Retired: 48
  Executed: 48c
  Critical: 48c, 48 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.66 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @nmxh
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
SU(2):   $w9 = MOVZWi 125, 0
SU(3):   renamable $d1, renamable $d0 = LDPDi renamable $x26, 14 :: (dereferenceable load 8 from %ir.nelt_tot), (dereferenceable load 8 from %ir.tmax)
SU(9):   renamable $w1 = LDURSBWi $fp, -164 :: (dereferenceable load 1 from %ir.Class, align 4)
SU(4):   renamable $w8 = MADDWrrr renamable $w8, renamable $w9, $wzr
SU(5):   $x9 = MOVZXi 33920, 32
SU(7):   renamable $w8 = ADDWri renamable $w8, 125, 0
SU(6):   $x9 = MOVKXi $x9(tied-def 0), 16686, 48
SU(8):   renamable $d2 = SCVTFUWDri renamable $w8
SU(10):   renamable $x8 = ADRP target-flags(aarch64-page) @niter
SU(11):   renamable $w5 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @niter :: (dereferenceable load 4 from @niter)
SU(12):   renamable $d1 = FMULDrr renamable $d1, renamable $d2
SU(13):   $d2 = FMOVXDr $x9
SU(14):   renamable $w7 = LDURWi $fp, -172 :: (dereferenceable load 4 from %ir.verified)
SU(18):   $x8 = ADRP target-flags(aarch64-page) @.str.33
SU(20):   $x9 = ADRP target-flags(aarch64-page) @.str.32
SU(19):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.33, 0
SU(21):   renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.32, 0
SU(15):   renamable $d2 = FMULDrr renamable $d0, renamable $d2
SU(22):   $x10 = ADRP target-flags(aarch64-page) @.str.31
SU(24):   $x11 = ADRP target-flags(aarch64-page) @.str.30
SU(26):   $x12 = ADRP target-flags(aarch64-page) @.str.29
SU(28):   $x13 = ADRP target-flags(aarch64-page) @.str.28
SU(30):   $x14 = ADRP target-flags(aarch64-page) @.str.27
SU(32):   $x15 = ADRP target-flags(aarch64-page) @.str.26
SU(34):   STPXi renamable $x9, renamable $x8, $sp, 7 :: (store 8 into stack + 64), (store 8 into stack + 56)
SU(35):   $x8 = ADRP target-flags(aarch64-page) @.str.25
SU(38):   $x0 = ADRP target-flags(aarch64-page) @.str.23
SU(41):   $x6 = ADRP target-flags(aarch64-page) @.str.24
SU(16):   renamable $d1 = FDIVDrr renamable $d1, renamable $d2
SU(23):   renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.31, 0
SU(25):   renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @.str.30, 0
SU(27):   renamable $x12 = ADDXri $x12, target-flags(aarch64-pageoff, aarch64-nc) @.str.29, 0
SU(29):   renamable $x13 = ADDXri $x13, target-flags(aarch64-pageoff, aarch64-nc) @.str.28, 0
SU(31):   renamable $x14 = ADDXri $x14, target-flags(aarch64-pageoff, aarch64-nc) @.str.27, 0
SU(33):   renamable $x15 = ADDXri $x15, target-flags(aarch64-pageoff, aarch64-nc) @.str.26, 0
SU(36):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.25, 0
SU(39):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.23, 0
SU(42):   renamable $x6 = ADDXri $x6, target-flags(aarch64-pageoff, aarch64-nc) @.str.24, 0
SU(45):   $w2 = MOVZWi 7, 0
SU(46):   $w3 = ORRWrs $wzr, $wzr, 0
SU(47):   $w4 = ORRWrs $wzr, $wzr, 0
SU(17):   STRDui renamable $d1, renamable $x26, 16 :: (store 8 into %ir.mflops)
SU(37):   STPXi renamable $x11, renamable $x10, $sp, 5 :: (store 8 into stack + 48), (store 8 into stack + 40)
SU(40):   STPXi renamable $x13, renamable $x12, $sp, 3 :: (store 8 into stack + 32), (store 8 into stack + 24)
SU(43):   STPXi renamable $x15, renamable $x14, $sp, 1 :: (store 8 into stack + 16), (store 8 into stack + 8)
SU(44):   STRXui renamable $x8, $sp, 0 :: (store 8 into stack)

********** MI Scheduling **********
main:%bb.66 for.end170
  From: $x26 = ADDXri $sp, 192, 0
    To: BL @verify, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   $x26 = ADDXri $sp, 192, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=$x26
SU(1):   STRDui renamable $d0, renamable $x26, 15 :: (store 8 into %ir.tmax)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$x26
SU(2):   $x0 = SUBXri $fp, 164, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $x1 = SUBXri $fp, 172, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @verify, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $x26 = ADDXri $sp, 192, 0
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 1
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) $x0 = SUBXri $fp, 164, 0
  Ready @1c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 1 
  TopQ.A RemainingLatency 0 + 2c > CritPath 1
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) $x1 = SUBXri $fp, 172, 0
  Ready @2c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRDui renamable $d0, renamable $x26, 15 :: (store 8 into %ir.tmax)
  Ready @3c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.66 ***
SU(0):   $x26 = ADDXri $sp, 192, 0
SU(2):   $x0 = SUBXri $fp, 164, 0
SU(3):   $x1 = SUBXri $fp, 172, 0
SU(1):   STRDui renamable $d0, renamable $x26, 15 :: (store 8 into %ir.tmax)

********** MI Scheduling **********
main:%bb.66 for.end170
  From: $w0 = MOVZWi 1, 0
    To: BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $w0 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(1):   $w19 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
ExitSU:   BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $w0 = MOVZWi 1, 0
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w19 = MOVZWi 1, 0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.66 ***
SU(0):   $w0 = MOVZWi 1, 0
SU(1):   $w19 = MOVZWi 1, 0

Fixup kills for %bb.66
********** MI Scheduling **********
main:%bb.67 if.then179
  From: STURWi killed renamable $w19, $fp, -128 :: (store 4 into %ir.i)
    To: End RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   STURWi renamable $w19, $fp, -128 :: (store 4 into %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Anti Latency=0
SU(1):   $x19 = ADDXri $sp, 192, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Anti Latency=0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURWi renamable $w19, $fp, -128 :: (store 4 into %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x19 = ADDXri $sp, 192, 0
  Ready @1c
  TopQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.67 ***
SU(0):   STURWi renamable $w19, $fp, -128 :: (store 4 into %ir.i)
SU(1):   $x19 = ADDXri $sp, 192, 0

Fixup kills for %bb.67
********** MI Scheduling **********
main:%bb.68 for.cond180
  From: renamable $w8 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.70, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 10, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.70, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 10, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.68 ***
SU(0):   renamable $w8 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri renamable $w8, 10, 0, implicit-def $nzcv

Fixup kills for %bb.68
********** MI Scheduling **********
main:%bb.69 for.body183
  From: renamable $x8 = LDURSWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
    To: B %bb.68
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURSWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x8
    SU(4): Ord  Latency=0 Memory
SU(1):   renamable $w9 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=$w9
    SU(4): Ord  Latency=0 Memory
SU(2):   STRDroX renamable $d0, renamable $x19, renamable $x8, 0, 1 :: (store 8 into %ir.arrayidx186)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(3): Anti Latency=0
SU(3):   renamable $w8 = nsw ADDWri renamable $w9, 1, 0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Anti Latency=0
    SU(1): Data Latency=4 Reg=$w9
    SU(0): Out  Latency=1
  Successors:
    SU(4): Data Latency=1 Reg=$w8
SU(4):   STURWi renamable $w8, $fp, -128 :: (store 4 into %ir.i)
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=$w8
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.68
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x8 = LDURSWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w9 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRDroX renamable $d0, renamable $x19, renamable $x8, 0, 1 :: (store 8 into %ir.arrayidx186)
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w8 = nsw ADDWri renamable $w9, 1, 0
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) STURWi renamable $w8, $fp, -128 :: (store 4 into %ir.i)
  Ready @6c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.69 ***
SU(0):   renamable $x8 = LDURSWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
SU(1):   renamable $w9 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
SU(2):   STRDroX renamable $d0, renamable $x19, renamable $x8, 0, 1 :: (store 8 into %ir.arrayidx186)
SU(3):   renamable $w8 = nsw ADDWri renamable $w9, 1, 0
SU(4):   STURWi renamable $w8, $fp, -128 :: (store 4 into %ir.i)

Fixup kills for %bb.69
********** MI Scheduling **********
main:%bb.70 for.end189
  From: renamable $d0 = LDRDui renamable $x26, 15 :: (dereferenceable load 8 from %ir.tmax)
    To: Bcc 1, %bb.72, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDRDui renamable $x26, 15 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$d0
SU(1):   FCMPDri renamable $d0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$d0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 1, %bb.72, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $d0 = LDRDui renamable $x26, 15 :: (dereferenceable load 8 from %ir.tmax)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) FCMPDri renamable $d0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.70 ***
SU(0):   renamable $d0 = LDRDui renamable $x26, 15 :: (dereferenceable load 8 from %ir.tmax)
SU(1):   FCMPDri renamable $d0, implicit-def $nzcv

Fixup kills for %bb.70
********** MI Scheduling **********
main:%bb.71 if.then192
  From: $x8 = MOVZXi 16368, 48
    To: End RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x8 = MOVZXi 16368, 48
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=$x8
SU(1):   STRXui renamable $x8, renamable $x26, 15 :: (store 8 into %ir.tmax)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x8 = MOVZXi 16368, 48
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRXui renamable $x8, renamable $x26, 15 :: (store 8 into %ir.tmax)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.71 ***
SU(0):   $x8 = MOVZXi 16368, 48
SU(1):   STRXui renamable $x8, renamable $x26, 15 :: (store 8 into %ir.tmax)

Fixup kills for %bb.71
********** MI Scheduling **********
main:%bb.72 if.end193
  From: $w8 = MOVZWi 1, 0
    To: End RegionInstrs: 13
ScheduleDAGMI::schedule starting
SU(0):   $w8 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(10): Data Latency=1 Reg=$w8
SU(1):   $x23 = ADDXri $sp, 96, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $x24 = ADDXri $sp, 192, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $x25 = MOVZXi 16473, 48
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $x19 = ADRP target-flags(aarch64-page) @.str.35
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x19
SU(5):   renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str.35, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(6):   $x20 = ADRP target-flags(aarch64-page) @.str.36
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x20
SU(7):   renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @.str.36, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x20
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(8):   $x21 = ADRP target-flags(aarch64-page) @.str.37
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x21
SU(9):   renamable $x21 = ADDXri $x21, target-flags(aarch64-pageoff, aarch64-nc) @.str.37, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x21
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(10):   STURWi renamable $w8, $fp, -128 :: (store 4 into %ir.i)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$w8
SU(11):   $x22 = ADRP target-flags(aarch64-page) @.str.38
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x22
SU(12):   renamable $x22 = ADDXri $x22, target-flags(aarch64-pageoff, aarch64-nc) @.str.38, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x22
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 6 8 11 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(4) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) $x19 = ADRP target-flags(aarch64-page) @.str.35
  Ready @0c
  TopQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 11 6 8 5 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(11) TOP-PATH                  2 cycles 
  Cand SU(6) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(6) $x20 = ADRP target-flags(aarch64-page) @.str.36
  Ready @1c
  TopQ.A BotLatency SU(6) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 11 5 8 7 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(11) TOP-PATH                  2 cycles 
  Cand SU(8) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(8) $x21 = ADRP target-flags(aarch64-page) @.str.37
  Ready @2c
  TopQ.A BotLatency SU(8) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 11 5 7 9 
  TopQ.A RemainingLatency 0 + 3c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(11) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(11) $x22 = ADRP target-flags(aarch64-page) @.str.38
  Ready @3c
  TopQ.A BotLatency SU(11) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 9 5 7 12 
  TopQ.A RemainingLatency 0 + 4c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $w8 = MOVZWi 1, 0
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 1 2 3 9 5 7 10 
  TopQ.A RemainingLatency 0 + 5c > CritPath 2
  Cand SU(12) ORDER                              
  Cand SU(1) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(1) $x23 = ADDXri $sp, 96, 0
  Ready @5c
  TopQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 10 2 3 9 5 7 
  TopQ.A RemainingLatency 0 + 6c > CritPath 2
  Cand SU(12) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) $x24 = ADDXri $sp, 192, 0
  Ready @6c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 10 7 3 9 5 
  TopQ.A RemainingLatency 0 + 7c > CritPath 2
  Cand SU(12) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) $x25 = MOVZXi 16473, 48
  Ready @7c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 10 7 5 9 
  TopQ.A RemainingLatency 0 + 8c > CritPath 2
  Cand SU(12) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str.35, 0
  Ready @8c
  TopQ.A TopLatency SU(5) 1c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 10 7 9 
  TopQ.A RemainingLatency 0 + 9c > CritPath 2
  Cand SU(12) ORDER                              
  Cand SU(7) ORDER                              
Pick Top ORDER     
Scheduling SU(7) renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @.str.36, 0
  Ready @9c
  TopQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 10 9 
  TopQ.A RemainingLatency 0 + 10c > CritPath 2
  Cand SU(12) ORDER                              
  Cand SU(9) ORDER                              
Pick Top ORDER     
Scheduling SU(9) renamable $x21 = ADDXri $x21, target-flags(aarch64-pageoff, aarch64-nc) @.str.37, 0
  Ready @10c
  TopQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 10 
  TopQ.A RemainingLatency 0 + 11c > CritPath 2
  Cand SU(12) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(12) renamable $x22 = ADDXri $x22, target-flags(aarch64-pageoff, aarch64-nc) @.str.38, 0
  Ready @11c
  TopQ.A BotLatency SU(12) 1c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) STURWi renamable $w8, $fp, -128 :: (store 4 into %ir.i)
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.72 ***
SU(4):   $x19 = ADRP target-flags(aarch64-page) @.str.35
SU(6):   $x20 = ADRP target-flags(aarch64-page) @.str.36
SU(8):   $x21 = ADRP target-flags(aarch64-page) @.str.37
SU(11):   $x22 = ADRP target-flags(aarch64-page) @.str.38
SU(0):   $w8 = MOVZWi 1, 0
SU(1):   $x23 = ADDXri $sp, 96, 0
SU(2):   $x24 = ADDXri $sp, 192, 0
SU(3):   $x25 = MOVZXi 16473, 48
SU(5):   renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str.35, 0
SU(7):   renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @.str.36, 0
SU(9):   renamable $x21 = ADDXri $x21, target-flags(aarch64-pageoff, aarch64-nc) @.str.37, 0
SU(12):   renamable $x22 = ADDXri $x22, target-flags(aarch64-pageoff, aarch64-nc) @.str.38, 0
SU(10):   STURWi renamable $w8, $fp, -128 :: (store 4 into %ir.i)

********** MI Scheduling **********
main:%bb.72 if.end193
  From: $x0 = ADRP target-flags(aarch64-page) @.str.34
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.34
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.34, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @.str.34
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.34, 0
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.72 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.34
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.34, 0

Fixup kills for %bb.72
********** MI Scheduling **********
main:%bb.73 for.cond195
  From: renamable $w8 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.80, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 10, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.80, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 10, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.73 ***
SU(0):   renamable $w8 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri renamable $w8, 10, 0, implicit-def $nzcv

Fixup kills for %bb.73
********** MI Scheduling **********
main:%bb.74 for.body198
  From: renamable $w8 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 1, %bb.76, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 1, %bb.76, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.74 ***
SU(0):   renamable $w8 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.74 for.body198
  From: renamable $x8 = LDURSWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 9
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURSWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x8
SU(1):   renamable $x8 = UBFMXri renamable $x8, 61, 60
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(4): Data Latency=1 Reg=$x8
    SU(2): Data Latency=1 Reg=$x8
SU(2):   renamable $d0 = LDRDroX renamable $x24, renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx204)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(6): Data Latency=4 Reg=$d0
SU(3):   renamable $d1 = LDRDui renamable $x26, 15 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$d1
SU(4):   renamable $x1 = LDRXroX renamable $x23, renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx200)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(5):   $d2 = FMOVXDr $x25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$d2
SU(6):   renamable $d2 = FMULDrr renamable $d0, renamable $d2
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 2
  Predecessors:
    SU(2): Data Latency=4 Reg=$d0
    SU(5): Data Latency=1 Reg=$d2
    SU(5): Out  Latency=1
  Successors:
    SU(7): Data Latency=1 Reg=$d2
SU(7):   renamable $d1 = FDIVDrr renamable $d2, renamable $d1
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(6): Data Latency=1 Reg=$d2
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(8):   $x0 = ORRXrs $xzr, $x19, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w0
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=1 Artificial
    SU(7): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=4 Artificial
    SU(2): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 11
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 5 8 
  TopQ.A RemainingLatency 0 + 0c > CritPath 11
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDURSWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 11c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 8 3 5 
  TopQ.A RemainingLatency 0 + 1c > CritPath 11
  Cand SU(8) ORDER                              
  Cand SU(3) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d1 = LDRDui renamable $x26, 15 :: (dereferenceable load 8 from %ir.tmax)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 8 5 
  TopQ.A RemainingLatency 0 + 2c > CritPath 11
  Cand SU(8) ORDER                              
  Cand SU(5) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) $d2 = FMOVXDr $x25
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) $x0 = ORRXrs $xzr, $x19, 0
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x8 = UBFMXri renamable $x8, 61, 60
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 2 
  TopQ.A RemainingLatency 0 + 5c > CritPath 11
  Cand SU(4) ORDER                              
  Cand SU(2) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d0 = LDRDroX renamable $x24, renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx204)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $x1 = LDRXroX renamable $x23, renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx200)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 9 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $d2 = FMULDrr renamable $d0, renamable $d2
  Ready @9c
  TopQ.A TopLatency SU(6) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 8
  Executed: 10c
  Critical: 8c, 8 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $d1 = FDIVDrr renamable $d2, renamable $d1
  Ready @10c
  TopQ.A TopLatency SU(7) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 9
  Executed: 11c
  Critical: 9c, 9 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.74 ***
SU(0):   renamable $x8 = LDURSWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
SU(3):   renamable $d1 = LDRDui renamable $x26, 15 :: (dereferenceable load 8 from %ir.tmax)
SU(5):   $d2 = FMOVXDr $x25
SU(8):   $x0 = ORRXrs $xzr, $x19, 0
SU(1):   renamable $x8 = UBFMXri renamable $x8, 61, 60
SU(2):   renamable $d0 = LDRDroX renamable $x24, renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx204)
SU(4):   renamable $x1 = LDRXroX renamable $x23, renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx200)
SU(6):   renamable $d2 = FMULDrr renamable $d0, renamable $d2
SU(7):   renamable $d1 = FDIVDrr renamable $d2, renamable $d1

Fixup kills for %bb.74
********** MI Scheduling **********
main:%bb.75 if.then210
  From: renamable $d0, renamable $d1 = LDPDi renamable $x26, 3 :: (dereferenceable load 8 from %ir.arrayidx211), (dereferenceable load 8 from %ir.arrayidx212, align 16)
    To: B %bb.78
 RegionInstrs: 9
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0, renamable $d1 = LDPDi renamable $x26, 3 :: (dereferenceable load 8 from %ir.arrayidx211), (dereferenceable load 8 from %ir.arrayidx212, align 16)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d0
    SU(5): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d1
SU(1):   $d2 = FMOVXDr $x25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Data Latency=1 Reg=$d2
SU(2):   renamable $d3 = LDRDui renamable $x26, 15 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(6): Data Latency=4 Reg=$d3
SU(3):   renamable $d0 = FSUBDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d0
    SU(0): Data Latency=4 Reg=$d1
  Successors:
    SU(5): Data Latency=1 Reg=$d0
    SU(4): Data Latency=1 Reg=$d0
    SU(5): Anti Latency=0
SU(4):   STRDui renamable $d0, renamable $x26, 11 :: (store 8 into %ir.t2)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=$d0
SU(5):   renamable $d1 = FMULDrr renamable $d0, renamable $d2
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(3): Data Latency=1 Reg=$d0
    SU(3): Anti Latency=0
    SU(1): Data Latency=1 Reg=$d2
    SU(0): Out  Latency=1
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$d1
SU(6):   renamable $d1 = FDIVDrr renamable $d1, renamable $d3
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$d1
    SU(2): Data Latency=4 Reg=$d3
SU(7):   $x0 = ORRXrs $xzr, $x20, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(8):   $x1 = ORRXrs $xzr, $x21, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
ExitSU:   B %bb.78
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 7 8 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0, renamable $d1 = LDPDi renamable $x26, 3 :: (dereferenceable load 8 from %ir.arrayidx211), (dereferenceable load 8 from %ir.arrayidx212, align 16)
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 8 1 2 7 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(8) ORDER                              
  Cand SU(1) TOP-PATH                  2 cycles 
  Cand SU(2) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d3 = LDRDui renamable $x26, 15 :: (dereferenceable load 8 from %ir.tmax)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 8 1 7 
  TopQ.A RemainingLatency 0 + 2c > CritPath 6
  Cand SU(8) ORDER                              
  Cand SU(1) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $d2 = FMOVXDr $x25
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 8 7 
  TopQ.A RemainingLatency 0 + 3c > CritPath 6
  Cand SU(8) ORDER                              
  Cand SU(7) ORDER                              
Pick Top ORDER     
Scheduling SU(7) $x0 = ORRXrs $xzr, $x20, 0
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 3 
  TopQ.A RemainingLatency 0 + 4c > CritPath 6
  Cand SU(8) ORDER                              
  Cand SU(3) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d0 = FSUBDrr renamable $d0, renamable $d1
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 4 5 
  TopQ.A RemainingLatency 0 + 5c > CritPath 6
  Cand SU(8) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $d1 = FMULDrr renamable $d0, renamable $d2
  Ready @5c
  TopQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 4 6 
  TopQ.A RemainingLatency 0 + 6c > CritPath 6
  Cand SU(8) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) STRDui renamable $d0, renamable $x26, 11 :: (store 8 into %ir.t2)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 6 
  TopQ.A RemainingLatency 0 + 7c > CritPath 6
  Cand SU(8) ORDER                              
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) renamable $d1 = FDIVDrr renamable $d1, renamable $d3
  Ready @7c
  TopQ.A TopLatency SU(6) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) $x1 = ORRXrs $xzr, $x21, 0
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.75 ***
SU(0):   renamable $d0, renamable $d1 = LDPDi renamable $x26, 3 :: (dereferenceable load 8 from %ir.arrayidx211), (dereferenceable load 8 from %ir.arrayidx212, align 16)
SU(2):   renamable $d3 = LDRDui renamable $x26, 15 :: (dereferenceable load 8 from %ir.tmax)
SU(1):   $d2 = FMOVXDr $x25
SU(7):   $x0 = ORRXrs $xzr, $x20, 0
SU(3):   renamable $d0 = FSUBDrr renamable $d0, renamable $d1
SU(5):   renamable $d1 = FMULDrr renamable $d0, renamable $d2
SU(4):   STRDui renamable $d0, renamable $x26, 11 :: (store 8 into %ir.t2)
SU(6):   renamable $d1 = FDIVDrr renamable $d1, renamable $d3
SU(8):   $x1 = ORRXrs $xzr, $x21, 0

Fixup kills for %bb.75
********** MI Scheduling **********
main:%bb.76 if.else217
  From: renamable $w8 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 1, %bb.79, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 7, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 1, %bb.79, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 7, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.76 ***
SU(0):   renamable $w8 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri renamable $w8, 7, 0, implicit-def $nzcv

Fixup kills for %bb.76
********** MI Scheduling **********
main:%bb.77 if.then220
  From: renamable $d0, renamable $d1 = LDPDi renamable $x26, 5 :: (dereferenceable load 8 from %ir.arrayidx221), (dereferenceable load 8 from %ir.arrayidx222, align 16)
    To: End RegionInstrs: 11
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0, renamable $d1 = LDPDi renamable $x26, 5 :: (dereferenceable load 8 from %ir.arrayidx221), (dereferenceable load 8 from %ir.arrayidx222, align 16)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d0
    SU(7): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d1
SU(1):   renamable $d2 = LDRDui renamable $x26, 7 :: (dereferenceable load 8 from %ir.arrayidx224)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(5): Data Latency=4 Reg=$d2
SU(2):   $d3 = FMOVXDr $x25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(7): Data Latency=1 Reg=$d3
SU(3):   renamable $d4 = LDRDui renamable $x26, 15 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(8): Data Latency=4 Reg=$d4
SU(4):   renamable $d0 = FSUBDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d0
    SU(0): Data Latency=4 Reg=$d1
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$d0
    SU(7): Anti Latency=0
SU(5):   renamable $d0 = FSUBDrr renamable $d0, renamable $d2
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$d0
    SU(1): Data Latency=4 Reg=$d2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(7): Data Latency=1 Reg=$d0
    SU(6): Data Latency=1 Reg=$d0
SU(6):   STRDui renamable $d0, renamable $x26, 11 :: (store 8 into %ir.t2)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=$d0
SU(7):   renamable $d1 = FMULDrr renamable $d0, renamable $d3
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 2
  Predecessors:
    SU(5): Data Latency=1 Reg=$d0
    SU(4): Anti Latency=0
    SU(2): Data Latency=1 Reg=$d3
    SU(0): Out  Latency=1
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$d1
SU(8):   renamable $d1 = FDIVDrr renamable $d1, renamable $d4
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 1
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$d1
    SU(3): Data Latency=4 Reg=$d4
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(9):   $x0 = ORRXrs $xzr, $x20, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(10):   $x1 = ORRXrs $xzr, $x22, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 8
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 9 10 
  TopQ.A RemainingLatency 0 + 0c > CritPath 8
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0, renamable $d1 = LDPDi renamable $x26, 5 :: (dereferenceable load 8 from %ir.arrayidx221), (dereferenceable load 8 from %ir.arrayidx222, align 16)
  Ready @0c
  TopQ.A BotLatency SU(0) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 10 1 2 3 9 
  TopQ.A RemainingLatency 0 + 1c > CritPath 8
  Cand SU(10) ORDER                              
  Cand SU(1) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d2 = LDRDui renamable $x26, 7 :: (dereferenceable load 8 from %ir.arrayidx224)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 10 9 2 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 8
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(2) TOP-PATH                  3 cycles 
  Cand SU(3) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d4 = LDRDui renamable $x26, 15 :: (dereferenceable load 8 from %ir.tmax)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 10 9 2 
  TopQ.A RemainingLatency 0 + 3c > CritPath 8
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(2) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $d3 = FMOVXDr $x25
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 9 4 
  TopQ.A RemainingLatency 0 + 4c > CritPath 8
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(4) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $d0 = FSUBDrr renamable $d0, renamable $d1
  Ready @4c
  TopQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 9 5 
  TopQ.A RemainingLatency 0 + 5c > CritPath 8
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(5) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $d0 = FSUBDrr renamable $d0, renamable $d2
  Ready @5c
  TopQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 9 7 6 
  TopQ.A RemainingLatency 0 + 6c > CritPath 8
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(7) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) renamable $d1 = FMULDrr renamable $d0, renamable $d3
  Ready @6c
  TopQ.A TopLatency SU(7) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 9 6 8 
  TopQ.A RemainingLatency 0 + 7c > CritPath 8
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(8) ORDER                              
Pick Top ORDER     
Scheduling SU(8) renamable $d1 = FDIVDrr renamable $d1, renamable $d4
  Ready @7c
  TopQ.A TopLatency SU(8) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 9 6 
  TopQ.A RemainingLatency 0 + 8c > CritPath 8
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(9) $x0 = ORRXrs $xzr, $x20, 0
  Ready @8c
  TopQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 6 
  TopQ.A RemainingLatency 0 + 9c > CritPath 8
  Cand SU(10) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(10) $x1 = ORRXrs $xzr, $x22, 0
  Ready @9c
  TopQ.A BotLatency SU(10) 1c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) STRDui renamable $d0, renamable $x26, 11 :: (store 8 into %ir.t2)
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.77 ***
SU(0):   renamable $d0, renamable $d1 = LDPDi renamable $x26, 5 :: (dereferenceable load 8 from %ir.arrayidx221), (dereferenceable load 8 from %ir.arrayidx222, align 16)
SU(1):   renamable $d2 = LDRDui renamable $x26, 7 :: (dereferenceable load 8 from %ir.arrayidx224)
SU(3):   renamable $d4 = LDRDui renamable $x26, 15 :: (dereferenceable load 8 from %ir.tmax)
SU(2):   $d3 = FMOVXDr $x25
SU(4):   renamable $d0 = FSUBDrr renamable $d0, renamable $d1
SU(5):   renamable $d0 = FSUBDrr renamable $d0, renamable $d2
SU(7):   renamable $d1 = FMULDrr renamable $d0, renamable $d3
SU(8):   renamable $d1 = FDIVDrr renamable $d1, renamable $d4
SU(9):   $x0 = ORRXrs $xzr, $x20, 0
SU(10):   $x1 = ORRXrs $xzr, $x22, 0
SU(6):   STRDui renamable $d0, renamable $x26, 11 :: (store 8 into %ir.t2)

Fixup kills for %bb.77
Fixup kills for %bb.78
********** MI Scheduling **********
main:%bb.79 for.inc231
  From: renamable $w8 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
    To: B %bb.73
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STURWi renamable $w8, $fp, -128 :: (store 4 into %ir.i)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.73
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w8, $fp, -128 :: (store 4 into %ir.i)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.79 ***
SU(0):   renamable $w8 = LDURWi $fp, -128 :: (dereferenceable load 4 from %ir.i)
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
SU(2):   STURWi renamable $w8, $fp, -128 :: (store 4 into %ir.i)

Fixup kills for %bb.79
********** MI Scheduling **********
main:%bb.80 if.end234
  From: $w0 = ORRWrs $wzr, $wzr, 0
    To: $sp = frame-destroy ADDXri $sp, 480, 0
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   $w0 = ORRWrs $wzr, $wzr, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $fp, $lr = frame-destroy LDPXi $sp, 58 :: (load 8 from %stack.22), (load 8 from %stack.21)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(2):   $x20, $x19 = frame-destroy LDPXi $sp, 56 :: (load 8 from %stack.24), (load 8 from %stack.23)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(3):   $x22, $x21 = frame-destroy LDPXi $sp, 54 :: (load 8 from %stack.26), (load 8 from %stack.25)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(4):   $x24, $x23 = frame-destroy LDPXi $sp, 52 :: (load 8 from %stack.28), (load 8 from %stack.27)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(5):   $x26, $x25 = frame-destroy LDPXi $sp, 50 :: (load 8 from %stack.30), (load 8 from %stack.29)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(6):   $x28, $x27 = frame-destroy LDPXi $sp, 48 :: (load 8 from %stack.32), (load 8 from %stack.31)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
ExitSU:   $sp = frame-destroy ADDXri $sp, 480, 0
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=3 Artificial
    SU(5): Ord  Latency=3 Artificial
    SU(4): Ord  Latency=3 Artificial
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
Critical Path: (PGS-RR) 3
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 
  TopQ.A RemainingLatency 0 + 0c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $fp, $lr = frame-destroy LDPXi $sp, 58 :: (load 8 from %stack.22), (load 8 from %stack.21)
  Ready @0c
  TopQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 6 2 3 4 5 
  TopQ.A RemainingLatency 0 + 1c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  3 cycles 
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) $x20, $x19 = frame-destroy LDPXi $sp, 56 :: (load 8 from %stack.24), (load 8 from %stack.23)
  Ready @1c
  TopQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 6 5 3 4 
  TopQ.A RemainingLatency 0 + 2c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  3 cycles 
  Cand SU(5) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) $x22, $x21 = frame-destroy LDPXi $sp, 54 :: (load 8 from %stack.26), (load 8 from %stack.25)
  Ready @2c
  TopQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 6 5 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  3 cycles 
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) $x24, $x23 = frame-destroy LDPXi $sp, 52 :: (load 8 from %stack.28), (load 8 from %stack.27)
  Ready @3c
  TopQ.A BotLatency SU(4) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 6 5 
  TopQ.A RemainingLatency 0 + 4c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  3 cycles 
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) $x26, $x25 = frame-destroy LDPXi $sp, 50 :: (load 8 from %stack.30), (load 8 from %stack.29)
  Ready @4c
  TopQ.A BotLatency SU(5) 3c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 6 
  TopQ.A RemainingLatency 0 + 5c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) $x28, $x27 = frame-destroy LDPXi $sp, 48 :: (load 8 from %stack.32), (load 8 from %stack.31)
  Ready @5c
  TopQ.A BotLatency SU(6) 3c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $w0 = ORRWrs $wzr, $wzr, 0
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.80 ***
SU(1):   $fp, $lr = frame-destroy LDPXi $sp, 58 :: (load 8 from %stack.22), (load 8 from %stack.21)
SU(2):   $x20, $x19 = frame-destroy LDPXi $sp, 56 :: (load 8 from %stack.24), (load 8 from %stack.23)
SU(3):   $x22, $x21 = frame-destroy LDPXi $sp, 54 :: (load 8 from %stack.26), (load 8 from %stack.25)
SU(4):   $x24, $x23 = frame-destroy LDPXi $sp, 52 :: (load 8 from %stack.28), (load 8 from %stack.27)
SU(5):   $x26, $x25 = frame-destroy LDPXi $sp, 50 :: (load 8 from %stack.30), (load 8 from %stack.29)
SU(6):   $x28, $x27 = frame-destroy LDPXi $sp, 48 :: (load 8 from %stack.32), (load 8 from %stack.31)
SU(0):   $w0 = ORRWrs $wzr, $wzr, 0

Fixup kills for %bb.80
