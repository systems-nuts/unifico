Before MISched:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=1, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=8, align=8, at location [SP]
  fi#6: size=8, align=8, at location [SP]
  fi#7: size=8, align=8, at location [SP]
  fi#8: size=96, align=16, at location [SP]
  fi#9: size=4, align=4, at location [SP]
  fi#10: size=96, align=16, at location [SP]
  fi#11: size=8, align=8, at location [SP]
Constant Pool:
  cp#0: 1.984770e+03, align=8
  cp#1: -1.092330e+04, align=8
  cp#2: 2.777090e+04, align=8
Function Live Ins: $w0 in %0, $x1 in %1

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $w0, $x1
  %1:gpr64 = COPY $x1
  %0:gpr32 = COPY $w0
  STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
  STRWui %0:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
  STRXui %1:gpr64, %stack.2.argv.addr, 0 :: (store 8 into %ir.argv.addr)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %3:gpr64 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
  %4:gpr64 = MOVaddr target-flags(aarch64-page) @.str.1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1
  $x0 = COPY %3:gpr64
  $x1 = COPY %4:gpr64
  BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %5:gpr64 = COPY $x0
  STRXui %5:gpr64, %stack.11.fp, 0 :: (store 8 into %ir.fp)
  %159:gpr64common = ADRP target-flags(aarch64-page) @timeron
  CBZX %5:gpr64, %bb.2
  B %bb.1

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %9:gpr32 = MOVi32imm 1
  STRWui %9:gpr32, %159:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
  %10:gpr64 = MOVaddr target-flags(aarch64-page) @.str.2, target-flags(aarch64-pageoff, aarch64-nc) @.str.2
  STRXui %10:gpr64, %stack.10.t_names, 1 :: (store 8 into %ir.arrayidx)
  %11:gpr64 = MOVaddr target-flags(aarch64-page) @.str.3, target-flags(aarch64-pageoff, aarch64-nc) @.str.3
  STRXui %11:gpr64, %stack.10.t_names, 2 :: (store 8 into %ir.arrayidx1, align 16)
  %12:gpr64 = MOVaddr target-flags(aarch64-page) @.str.4, target-flags(aarch64-pageoff, aarch64-nc) @.str.4
  STRXui %12:gpr64, %stack.10.t_names, 3 :: (store 8 into %ir.arrayidx2)
  %13:gpr64 = MOVaddr target-flags(aarch64-page) @.str.5, target-flags(aarch64-pageoff, aarch64-nc) @.str.5
  STRXui %13:gpr64, %stack.10.t_names, 4 :: (store 8 into %ir.arrayidx3, align 16)
  %14:gpr64 = MOVaddr target-flags(aarch64-page) @.str.6, target-flags(aarch64-pageoff, aarch64-nc) @.str.6
  STRXui %14:gpr64, %stack.10.t_names, 5 :: (store 8 into %ir.arrayidx4)
  %15:gpr64 = MOVaddr target-flags(aarch64-page) @.str.7, target-flags(aarch64-pageoff, aarch64-nc) @.str.7
  STRXui %15:gpr64, %stack.10.t_names, 6 :: (store 8 into %ir.arrayidx5, align 16)
  %16:gpr64 = MOVaddr target-flags(aarch64-page) @.str.8, target-flags(aarch64-pageoff, aarch64-nc) @.str.8
  STRXui %16:gpr64, %stack.10.t_names, 7 :: (store 8 into %ir.arrayidx6)
  %17:gpr64 = MOVaddr target-flags(aarch64-page) @.str.9, target-flags(aarch64-pageoff, aarch64-nc) @.str.9
  STRXui %17:gpr64, %stack.10.t_names, 8 :: (store 8 into %ir.arrayidx7, align 16)
  %18:gpr64 = MOVaddr target-flags(aarch64-page) @.str.10, target-flags(aarch64-pageoff, aarch64-nc) @.str.10
  STRXui %18:gpr64, %stack.10.t_names, 9 :: (store 8 into %ir.arrayidx8)
  %19:gpr64 = MOVaddr target-flags(aarch64-page) @.str.11, target-flags(aarch64-pageoff, aarch64-nc) @.str.11
  STRXui %19:gpr64, %stack.10.t_names, 10 :: (store 8 into %ir.arrayidx9, align 16)
  %20:gpr64 = MOVaddr target-flags(aarch64-page) @.str.12, target-flags(aarch64-pageoff, aarch64-nc) @.str.12
  STRXui %20:gpr64, %stack.10.t_names, 11 :: (store 8 into %ir.arrayidx10)
  %21:gpr64 = LDRXui %stack.11.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %21:gpr64
  BL @fclose, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  B %bb.3

bb.2.if.else:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  STRWui $wzr, %159:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)

bb.3.if.end:
; predecessors: %bb.2, %bb.1
  successors: %bb.4(0x50000000), %bb.14(0x30000000); %bb.4(62.50%), %bb.14(37.50%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @read_input, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @domain, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @setcoeff, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @setbv, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @setiv, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @erhs, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %23:gpr32 = MOVi32imm 1
  $w0 = MOVi32imm 1
  BL @ssor, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @setbv, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @setiv, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %24:gpr64common = ADRP target-flags(aarch64-page) @itmax
  %25:gpr32 = LDRWui %24:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = COPY %25:gpr32
  BL @ssor, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @error, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @pintgr, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %26:gpr64common = ADRP target-flags(aarch64-page) @frc
  %27:fpr64 = LDRDui %26:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @frc :: (dereferenceable load 8 from @frc)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %28:gpr64 = MOVaddr target-flags(aarch64-page) @rsdnm, target-flags(aarch64-pageoff, aarch64-nc) @rsdnm
  %29:gpr64 = MOVaddr target-flags(aarch64-page) @errnm, target-flags(aarch64-pageoff, aarch64-nc) @errnm
  $x0 = COPY %28:gpr64
  $x1 = COPY %29:gpr64
  $d0 = COPY %27:fpr64
  $x2 = ADDXri %stack.3.Class, 0, 0
  $x3 = ADDXri %stack.4.verified, 0, 0
  BL @verify, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $x2, implicit killed $x3, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  undef %33.ssub:fpr64 = LDRSui %24:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)
  %35:fpr128 = SSHLLv2i32_shift %33:fpr64, 0
  %37:fpr64 = SCVTFv1i64 %35.dsub:fpr128
  %38:gpr64common = ADRP target-flags(aarch64-page) @nx0
  %39:gpr32 = LDRWui %38:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nx0 :: (dereferenceable load 4 from @nx0)
  %40:fpr64 = SCVTFUWDri %39:gpr32
  %41:gpr64common = ADRP target-flags(aarch64-page) %const.0
  %42:fpr64 = LDRDui %41:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  %43:fpr64 = FMULDrr %40:fpr64, %42:fpr64
  %44:gpr64common = ADRP target-flags(aarch64-page) @ny0
  %45:gpr32 = LDRWui %44:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @ny0 :: (dereferenceable load 4 from @ny0)
  %46:fpr64 = SCVTFUWDri %45:gpr32
  %47:fpr64 = FMULDrr %43:fpr64, %46:fpr64
  %48:gpr64common = ADRP target-flags(aarch64-page) @nz0
  %49:gpr32 = LDRWui %48:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nz0 :: (dereferenceable load 4 from @nz0)
  %50:fpr64 = SCVTFUWDri %49:gpr32
  %51:fpr64 = FMULDrr %47:fpr64, %50:fpr64
  %52:gpr32 = nsw ADDWrr %39:gpr32, %45:gpr32
  %53:gpr32 = nsw ADDWrr %52:gpr32, %49:gpr32
  %54:fpr64 = SCVTFUWDri %53:gpr32
  %55:fpr64 = FMOVDi 8
  %56:fpr64 = FDIVDrr %54:fpr64, %55:fpr64
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %57:fpr64 = FMOVDi 0
  $d0 = COPY %56:fpr64
  $d1 = COPY %57:fpr64
  BL @pow, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def $d0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %58:fpr64 = COPY killed $d0
  %59:gpr64common = ADRP target-flags(aarch64-page) %const.1
  %60:fpr64 = LDRDui %59:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  %61:fpr64 = FMULDrr %58:fpr64, %60:fpr64
  %62:fpr64 = FADDDrr %51:fpr64, %61:fpr64
  %63:gpr32 = LDRWui %38:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nx0 :: (dereferenceable load 4 from @nx0)
  %64:gpr32 = LDRWui %44:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @ny0 :: (dereferenceable load 4 from @ny0)
  %65:gpr32 = nsw ADDWrr %63:gpr32, %64:gpr32
  %66:gpr32 = LDRWui %48:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nz0 :: (dereferenceable load 4 from @nz0)
  %67:gpr32 = nsw ADDWrr %65:gpr32, %66:gpr32
  %68:fpr64 = SCVTFUWDri %67:gpr32
  %69:gpr64common = ADRP target-flags(aarch64-page) %const.2
  %70:fpr64 = LDRDui %69:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  %71:fpr64 = FMULDrr %68:fpr64, %70:fpr64
  %72:fpr64 = FDIVDrr %71:fpr64, %55:fpr64
  %73:fpr64 = FADDDrr %62:fpr64, %72:fpr64
  %74:gpr64 = MOVi64imm -4539183878094454784
  %75:fpr64 = COPY %74:gpr64
  %76:fpr64 = FADDDrr %73:fpr64, %75:fpr64
  %77:fpr64 = FMULDrr %37:fpr64, %76:fpr64
  %78:gpr64common = ADRP target-flags(aarch64-page) @maxtime
  %79:fpr64 = LDRDui %78:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @maxtime :: (dereferenceable load 8 from @maxtime)
  %80:gpr64 = MOVi64imm 4696837146684686336
  %81:fpr64 = COPY %80:gpr64
  %82:fpr64 = FMULDrr %79:fpr64, %81:fpr64
  %83:fpr64 = FDIVDrr %77:fpr64, %82:fpr64
  STRDui %83:fpr64, %stack.5.mflops, 0 :: (store 8 into %ir.mflops)
  %84:gpr32 = LDRSBWui %stack.3.Class, 0 :: (dereferenceable load 1 from %ir.Class, align 4)
  %85:gpr32 = LDRWui %24:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)
  %86:gpr32 = LDRWui %stack.4.verified, 0 :: (dereferenceable load 4 from %ir.verified)
  ADJCALLSTACKDOWN 72, 0, implicit-def dead $sp, implicit $sp
  %87:gpr64 = MOVaddr target-flags(aarch64-page) @.str.23, target-flags(aarch64-pageoff, aarch64-nc) @.str.23
  STRXui %87:gpr64, $sp, 8 :: (store 8 into stack + 64)
  %89:gpr64 = MOVaddr target-flags(aarch64-page) @.str.22, target-flags(aarch64-pageoff, aarch64-nc) @.str.22
  STRXui %89:gpr64, $sp, 7 :: (store 8 into stack + 56)
  %90:gpr64 = MOVaddr target-flags(aarch64-page) @.str.21, target-flags(aarch64-pageoff, aarch64-nc) @.str.21
  STRXui %90:gpr64, $sp, 6 :: (store 8 into stack + 48)
  %91:gpr64 = MOVaddr target-flags(aarch64-page) @.str.20, target-flags(aarch64-pageoff, aarch64-nc) @.str.20
  STRXui %91:gpr64, $sp, 5 :: (store 8 into stack + 40)
  %92:gpr64 = MOVaddr target-flags(aarch64-page) @.str.19, target-flags(aarch64-pageoff, aarch64-nc) @.str.19
  STRXui %92:gpr64, $sp, 4 :: (store 8 into stack + 32)
  %93:gpr64 = MOVaddr target-flags(aarch64-page) @.str.18, target-flags(aarch64-pageoff, aarch64-nc) @.str.18
  STRXui %93:gpr64, $sp, 3 :: (store 8 into stack + 24)
  %94:gpr64 = MOVaddr target-flags(aarch64-page) @.str.17, target-flags(aarch64-pageoff, aarch64-nc) @.str.17
  STRXui %94:gpr64, $sp, 2 :: (store 8 into stack + 16)
  %95:gpr64 = MOVaddr target-flags(aarch64-page) @.str.16, target-flags(aarch64-pageoff, aarch64-nc) @.str.16
  STRXui %95:gpr64, $sp, 1 :: (store 8 into stack + 8)
  %96:gpr64 = MOVaddr target-flags(aarch64-page) @.str.15, target-flags(aarch64-pageoff, aarch64-nc) @.str.15
  STRXui %96:gpr64, $sp, 0 :: (store 8 into stack)
  %97:gpr64 = MOVaddr target-flags(aarch64-page) @.str.13, target-flags(aarch64-pageoff, aarch64-nc) @.str.13
  %98:gpr64 = MOVaddr target-flags(aarch64-page) @.str.14, target-flags(aarch64-pageoff, aarch64-nc) @.str.14
  $x0 = COPY %97:gpr64
  $w1 = COPY %84:gpr32
  $w2 = COPY %63:gpr32
  $w3 = COPY %64:gpr32
  $w4 = COPY %66:gpr32
  $w5 = COPY %85:gpr32
  $d0 = COPY %79:fpr64
  $d1 = COPY %83:fpr64
  $x6 = COPY %98:gpr64
  $w7 = COPY %86:gpr32
  BL @print_results, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit killed $w4, implicit killed $w5, implicit killed $d0, implicit killed $d1, implicit killed $x6, implicit killed $w7, implicit-def $sp
  ADJCALLSTACKUP 72, 0, implicit-def dead $sp, implicit $sp
  %100:gpr32 = LDRWui %159:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW %100:gpr32, %bb.14
  B %bb.4

bb.4.if.then31:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  STRWui %23:gpr32, %stack.9.i, 0 :: (store 4 into %ir.i)
  %156:gpr64sp = ADDXri %stack.8.trecs, 0, 0

bb.5.for.cond:
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %102:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %102:gpr32common, 11, 0, implicit-def $nzcv
  Bcc 12, %bb.7, implicit killed $nzcv
  B %bb.6

bb.6.for.body:
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %153:gpr32 = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = COPY %153:gpr32
  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %154:fpr64 = COPY killed $d0
  %155:gpr64 = LDRSWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
  STRDroX %154:fpr64, %156:gpr64sp, %155:gpr64, 0, 1 :: (store 8 into %ir.arrayidx35)
  %157:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
  %158:gpr32common = nsw ADDWri %157:gpr32common, 1, 0
  STRWui %158:gpr32common, %stack.9.i, 0 :: (store 4 into %ir.i)
  B %bb.5

bb.7.for.end:
; predecessors: %bb.5
  successors: %bb.8(0x50000000), %bb.9(0x30000000); %bb.8(62.50%), %bb.9(37.50%)

  %105:fpr64 = LDRDui %78:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @maxtime :: (dereferenceable load 8 from @maxtime)
  STRDui %105:fpr64, %stack.7.tmax, 0 :: (store 8 into %ir.tmax)
  FCMPDri %105:fpr64, implicit-def $nzcv
  Bcc 1, %bb.9, implicit killed $nzcv
  B %bb.8

bb.8.if.then38:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %106:gpr64 = MOVi64imm 4607182418800017408
  STRXui %106:gpr64, %stack.7.tmax, 0 :: (store 8 into %ir.tmax)

bb.9.if.end39:
; predecessors: %bb.7, %bb.8
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %107:gpr64 = MOVaddr target-flags(aarch64-page) @.str.24, target-flags(aarch64-pageoff, aarch64-nc) @.str.24
  $x0 = COPY %107:gpr64
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %109:gpr32 = MOVi32imm 1
  STRWui %109:gpr32, %stack.9.i, 0 :: (store 4 into %ir.i)
  %115:gpr64sp = ADDXri %stack.10.t_names, 0, 0
  %117:gpr64sp = ADDXri %stack.8.trecs, 0, 0
  %119:gpr64 = MOVi64imm 4636737291354636288
  %124:gpr64 = MOVaddr target-flags(aarch64-page) @.str.25, target-flags(aarch64-pageoff, aarch64-nc) @.str.25
  %138:gpr64 = MOVaddr target-flags(aarch64-page) @.str.26, target-flags(aarch64-pageoff, aarch64-nc) @.str.26
  %139:gpr64 = MOVaddr target-flags(aarch64-page) @.str.27, target-flags(aarch64-pageoff, aarch64-nc) @.str.27
  %149:gpr64 = MOVaddr target-flags(aarch64-page) @.str.28, target-flags(aarch64-pageoff, aarch64-nc) @.str.28

bb.10.for.cond41:
; predecessors: %bb.9, %bb.13
  successors: %bb.11(0x7c000000), %bb.14(0x04000000); %bb.11(96.88%), %bb.14(3.12%)

  %110:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %110:gpr32common, 11, 0, implicit-def $nzcv
  Bcc 12, %bb.14, implicit killed $nzcv
  B %bb.11

bb.11.for.body44:
; predecessors: %bb.10
  successors: %bb.12(0x40000000), %bb.13(0x40000000); %bb.12(50.00%), %bb.13(50.00%)

  %113:gpr64 = LDRSWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
  %114:gpr64 = UBFMXri %113:gpr64, 61, 60
  %116:gpr64 = LDRXroX %115:gpr64sp, %114:gpr64, 0, 0 :: (load 8 from %ir.arrayidx46)
  %118:fpr64 = LDRDroX %117:gpr64sp, %114:gpr64, 0, 0 :: (load 8 from %ir.arrayidx50)
  %120:fpr64 = COPY %119:gpr64
  %121:fpr64 = FMULDrr %118:fpr64, %120:fpr64
  %122:fpr64 = LDRDui %stack.7.tmax, 0 :: (dereferenceable load 8 from %ir.tmax)
  %123:fpr64 = FDIVDrr %121:fpr64, %122:fpr64
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %124:gpr64
  $x1 = COPY %116:gpr64
  $d0 = COPY %118:fpr64
  $d1 = COPY %123:fpr64
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %126:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %126:gpr32common, 5, 0, implicit-def $nzcv
  Bcc 1, %bb.13, implicit killed $nzcv
  B %bb.12

bb.12.if.then56:
; predecessors: %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  %128:fpr64 = LDRDui %stack.8.trecs, 2 :: (dereferenceable load 8 from %ir.arrayidx57, align 16)
  %129:fpr64 = LDRDui %stack.8.trecs, 3 :: (dereferenceable load 8 from %ir.arrayidx58)
  %130:fpr64 = FADDDrr %128:fpr64, %129:fpr64
  %131:fpr64 = LDRDui %stack.8.trecs, 4 :: (dereferenceable load 8 from %ir.arrayidx60, align 16)
  %132:fpr64 = FADDDrr %130:fpr64, %131:fpr64
  STRDui %132:fpr64, %stack.6.t, 0 :: (store 8 into %ir.t)
  %134:fpr64 = COPY %119:gpr64
  %135:fpr64 = FMULDrr %132:fpr64, %134:fpr64
  %136:fpr64 = LDRDui %stack.7.tmax, 0 :: (dereferenceable load 8 from %ir.tmax)
  %137:fpr64 = FDIVDrr %135:fpr64, %136:fpr64
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %138:gpr64
  $x1 = COPY %139:gpr64
  $d0 = COPY %132:fpr64
  $d1 = COPY %137:fpr64
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %141:gpr64 = LDRSWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
  %143:fpr64 = LDRDroX %117:gpr64sp, %141:gpr64, 0, 1 :: (load 8 from %ir.arrayidx66)
  %144:fpr64 = LDRDui %stack.6.t, 0 :: (dereferenceable load 8 from %ir.t)
  %145:fpr64 = FSUBDrr %143:fpr64, %144:fpr64
  STRDui %145:fpr64, %stack.6.t, 0 :: (store 8 into %ir.t)
  %146:fpr64 = FMULDrr %145:fpr64, %134:fpr64
  %147:fpr64 = LDRDui %stack.7.tmax, 0 :: (dereferenceable load 8 from %ir.tmax)
  %148:fpr64 = FDIVDrr %146:fpr64, %147:fpr64
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %138:gpr64
  $x1 = COPY %149:gpr64
  $d0 = COPY %145:fpr64
  $d1 = COPY %148:fpr64
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.13.for.inc72:
; predecessors: %bb.11, %bb.12
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %151:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
  %152:gpr32common = nsw ADDWri %151:gpr32common, 1, 0
  STRWui %152:gpr32common, %stack.9.i, 0 :: (store 4 into %ir.i)
  B %bb.10

bb.14.if.end75:
; predecessors: %bb.3, %bb.10

  $w0 = COPY $wzr
  RET_ReallyLR implicit $w0

# End machine code for function main.

********** MI Scheduling **********
main:%bb.0 entry
  From: %5:gpr64 = COPY $x0
    To: CBZX %5:gpr64, %bb.2
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %5:gpr64 = COPY $x0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Data Latency=0 Reg=%5
    SU(1): Data Latency=0 Reg=%5
  Single Issue       : false;
SU(1):   STRXui %5:gpr64, %stack.11.fp, 0 :: (store 8 into %ir.fp)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%5
  Single Issue       : false;
SU(2):   %159:gpr64common = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
ExitSU:   CBZX %5:gpr64, %bb.2
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%5
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %5:gpr64 = COPY $x0
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %159:gpr64common = ADRP target-flags(aarch64-page) @timeron
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRXui %5:gpr64, %stack.11.fp, 0 :: (store 8 into %ir.fp)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %5:gpr64 = COPY $x0
SU(1):   STRXui %5:gpr64, %stack.11.fp, 0 :: (store 8 into %ir.fp)
SU(2):   %159:gpr64common = ADRP target-flags(aarch64-page) @timeron

********** MI Scheduling **********
main:%bb.0 entry
  From: %3:gpr64 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
    To: BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %3:gpr64 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%3
  Single Issue       : false;
SU(1):   %4:gpr64 = MOVaddr target-flags(aarch64-page) @.str.1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%4
  Single Issue       : false;
SU(2):   $x0 = COPY %3:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%3
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $x1 = COPY %4:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%4
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $x1 = COPY %4:gpr64
  Ready @0c
  BotQ.A TopLatency SU(3) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $x0 = COPY %3:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %4:gpr64 = MOVaddr target-flags(aarch64-page) @.str.1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %3:gpr64 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %3:gpr64 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
SU(1):   %4:gpr64 = MOVaddr target-flags(aarch64-page) @.str.1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1
SU(2):   $x0 = COPY %3:gpr64
SU(3):   $x1 = COPY %4:gpr64

********** MI Scheduling **********
main:%bb.0 entry
  From: %1:gpr64 = COPY $x1
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %1:gpr64 = COPY $x1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(4): Data Latency=0 Reg=%1
  Single Issue       : false;
SU(1):   %0:gpr32 = COPY $w0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(3): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(2):   STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   STRWui %0:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(4):   STRXui %1:gpr64, %stack.2.argv.addr, 0 :: (store 8 into %ir.argv.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%1
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %1:gpr64 = COPY $x1
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 2 1 4 
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(1) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(1) %0:gpr32 = COPY $w0
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 2 4 3 
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) STRXui %1:gpr64, %stack.2.argv.addr, 0 :: (store 8 into %ir.argv.addr)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
Queue TopQ.P: 
Queue TopQ.A: 2 3 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) STRWui %0:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %1:gpr64 = COPY $x1
SU(1):   %0:gpr32 = COPY $w0
SU(2):   STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
SU(3):   STRWui %0:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
SU(4):   STRXui %1:gpr64, %stack.2.argv.addr, 0 :: (store 8 into %ir.argv.addr)

********** MI Scheduling **********
main:%bb.1 if.then
  From: %9:gpr32 = MOVi32imm 1
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 25
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR32=2
Live In: %159 
Live Out: %21 %159 
Live Thru: GPR32=1
  LiveReg: %21
  LiveReg: %159
  UpdateRegP: SU(1) STRWui %9:gpr32, %159:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
              to GPR32 1
Top Pressure:
GPR32=1
Bottom Pressure:
GPR32=2
Excess PSets: 
Cluster ld/st SU(23) - SU(21)
Cluster ld/st SU(19) - SU(17)
Cluster ld/st SU(15) - SU(13)
Cluster ld/st SU(11) - SU(9)
Cluster ld/st SU(7) - SU(5)
SU(0):   %9:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%9
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   STRWui %9:gpr32, %159:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%9
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(2):   %10:gpr64 = MOVaddr target-flags(aarch64-page) @.str.2, target-flags(aarch64-pageoff, aarch64-nc) @.str.2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%10
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(3):   STRXui %10:gpr64, %stack.10.t_names, 1 :: (store 8 into %ir.arrayidx)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%10
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(4):   %11:gpr64 = MOVaddr target-flags(aarch64-page) @.str.3, target-flags(aarch64-pageoff, aarch64-nc) @.str.3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%11
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(5):   STRXui %11:gpr64, %stack.10.t_names, 2 :: (store 8 into %ir.arrayidx1, align 16)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%11
    SU(7): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(6):   %12:gpr64 = MOVaddr target-flags(aarch64-page) @.str.4, target-flags(aarch64-pageoff, aarch64-nc) @.str.4
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%12
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   STRXui %12:gpr64, %stack.10.t_names, 3 :: (store 8 into %ir.arrayidx2)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%12
  Successors:
    SU(5): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(8):   %13:gpr64 = MOVaddr target-flags(aarch64-page) @.str.5, target-flags(aarch64-pageoff, aarch64-nc) @.str.5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(9): Data Latency=1 Reg=%13
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(9):   STRXui %13:gpr64, %stack.10.t_names, 4 :: (store 8 into %ir.arrayidx3, align 16)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%13
    SU(11): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(10):   %14:gpr64 = MOVaddr target-flags(aarch64-page) @.str.6, target-flags(aarch64-pageoff, aarch64-nc) @.str.6
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(11): Data Latency=1 Reg=%14
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(11):   STRXui %14:gpr64, %stack.10.t_names, 5 :: (store 8 into %ir.arrayidx4)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%14
  Successors:
    SU(9): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(12):   %15:gpr64 = MOVaddr target-flags(aarch64-page) @.str.7, target-flags(aarch64-pageoff, aarch64-nc) @.str.7
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(13): Data Latency=1 Reg=%15
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(13):   STRXui %15:gpr64, %stack.10.t_names, 6 :: (store 8 into %ir.arrayidx5, align 16)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%15
    SU(15): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(14):   %16:gpr64 = MOVaddr target-flags(aarch64-page) @.str.8, target-flags(aarch64-pageoff, aarch64-nc) @.str.8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(15): Data Latency=1 Reg=%16
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(15):   STRXui %16:gpr64, %stack.10.t_names, 7 :: (store 8 into %ir.arrayidx6)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(14): Data Latency=1 Reg=%16
  Successors:
    SU(13): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(16):   %17:gpr64 = MOVaddr target-flags(aarch64-page) @.str.9, target-flags(aarch64-pageoff, aarch64-nc) @.str.9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(17): Data Latency=1 Reg=%17
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(17):   STRXui %17:gpr64, %stack.10.t_names, 8 :: (store 8 into %ir.arrayidx7, align 16)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(16): Data Latency=1 Reg=%17
    SU(19): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(18):   %18:gpr64 = MOVaddr target-flags(aarch64-page) @.str.10, target-flags(aarch64-pageoff, aarch64-nc) @.str.10
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(19): Data Latency=1 Reg=%18
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(19):   STRXui %18:gpr64, %stack.10.t_names, 9 :: (store 8 into %ir.arrayidx8)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(18): Data Latency=1 Reg=%18
  Successors:
    SU(17): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(20):   %19:gpr64 = MOVaddr target-flags(aarch64-page) @.str.11, target-flags(aarch64-pageoff, aarch64-nc) @.str.11
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(21): Data Latency=1 Reg=%19
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(21):   STRXui %19:gpr64, %stack.10.t_names, 10 :: (store 8 into %ir.arrayidx9, align 16)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(20): Data Latency=1 Reg=%19
    SU(23): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(22):   %20:gpr64 = MOVaddr target-flags(aarch64-page) @.str.12, target-flags(aarch64-pageoff, aarch64-nc) @.str.12
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(23): Data Latency=1 Reg=%20
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(23):   STRXui %20:gpr64, %stack.10.t_names, 11 :: (store 8 into %ir.arrayidx10)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(22): Data Latency=1 Reg=%20
  Successors:
    SU(21): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(24):   %21:gpr64 = LDRXui %stack.11.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(24): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 24 
Queue BotQ.A: 23 21 19 17 15 13 11 9 7 5 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 20 22 24 
Picking from Bot:
  Cand SU(23) ORDER                              
  Cand SU(21) WEAK                               
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot WEAK      
Scheduling SU(21) STRXui %19:gpr64, %stack.10.t_names, 10 :: (store 8 into %ir.arrayidx9, align 16)
Bottom Pressure:
GPR32=3
  LiveReg: %19
  UpdateRegP: SU(21) STRXui %19:gpr64, %stack.10.t_names, 10 :: (store 8 into %ir.arrayidx9, align 16)
              to 
  Ready @0c
  BotQ.A TopLatency SU(21) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 24 
Queue BotQ.A: 23 1 19 17 15 13 11 9 7 5 3 20 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 20 22 24 
BotQ.A RemLatency SU(23) 1c
Picking from Bot:
  Cand SU(23) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(23) STRXui %20:gpr64, %stack.10.t_names, 11 :: (store 8 into %ir.arrayidx10)
Bottom Pressure:
GPR32=4
  LiveReg: %20
  UpdateRegP: SU(23) STRXui %20:gpr64, %stack.10.t_names, 11 :: (store 8 into %ir.arrayidx10)
              to 
  Ready @1c
  BotQ.A TopLatency SU(23) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 24 
Queue BotQ.A: 20 1 19 17 15 13 11 9 7 5 3 22 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 20 22 24 
BotQ.A RemLatency SU(1) 1c
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(22) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(22) %20:gpr64 = MOVaddr target-flags(aarch64-page) @.str.12, target-flags(aarch64-pageoff, aarch64-nc) @.str.12
Bottom Pressure:
GPR32=3
  Ready @2c
  BotQ.A BotLatency SU(22) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 1 19 17 15 13 11 9 7 5 3 24 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 20 24 
BotQ.A RemLatency SU(1) 1c
  BotQ.A RemainingLatency 1 + 3c > CritPath 3
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(1) BOT-PATH                  1 cycles 
  Cand SU(17) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(17) STRXui %17:gpr64, %stack.10.t_names, 8 :: (store 8 into %ir.arrayidx7, align 16)
Bottom Pressure:
GPR32=4
  LiveReg: %17
  UpdateRegP: SU(17) STRXui %17:gpr64, %stack.10.t_names, 8 :: (store 8 into %ir.arrayidx7, align 16)
              to 
  Ready @3c
  BotQ.A TopLatency SU(17) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 1 19 24 15 13 11 9 7 5 3 16 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 20 24 
  BotQ.A RemainingLatency 0 + 4c > CritPath 3
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(19) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(19) STRXui %18:gpr64, %stack.10.t_names, 9 :: (store 8 into %ir.arrayidx8)
Bottom Pressure:
GPR32=5
  LiveReg: %18
  UpdateRegP: SU(19) STRXui %18:gpr64, %stack.10.t_names, 9 :: (store 8 into %ir.arrayidx8)
              to 
  Ready @4c
  BotQ.A TopLatency SU(19) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 1 16 24 15 13 11 9 7 5 3 18 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 20 24 
  BotQ.A RemainingLatency 0 + 5c > CritPath 3
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(24) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(24) %21:gpr64 = LDRXui %stack.11.fp, 0 :: (dereferenceable load 8 from %ir.fp)
Bottom Pressure:
GPR32=4
  Ready @5c
  BotQ.A BotLatency SU(24) 3c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 1 16 18 15 13 11 9 7 5 3 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 20 
  BotQ.A RemainingLatency 0 + 6c > CritPath 3
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(1) BOT-PATH                  1 cycles 
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(13) STRXui %15:gpr64, %stack.10.t_names, 6 :: (store 8 into %ir.arrayidx5, align 16)
Bottom Pressure:
GPR32=5
  LiveReg: %15
  UpdateRegP: SU(13) STRXui %15:gpr64, %stack.10.t_names, 6 :: (store 8 into %ir.arrayidx5, align 16)
              to 
  Ready @6c
  BotQ.A TopLatency SU(13) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 1 16 18 15 3 11 9 7 5 12 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 20 
  BotQ.A RemainingLatency 0 + 7c > CritPath 3
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(15) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(15) STRXui %16:gpr64, %stack.10.t_names, 7 :: (store 8 into %ir.arrayidx6)
Bottom Pressure:
GPR32=6
  LiveReg: %16
  UpdateRegP: SU(15) STRXui %16:gpr64, %stack.10.t_names, 7 :: (store 8 into %ir.arrayidx6)
              to 
  Ready @7c
  BotQ.A TopLatency SU(15) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 1 16 18 12 3 11 9 7 5 14 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 20 
  BotQ.A RemainingLatency 0 + 8c > CritPath 3
Picking from Bot:
  Cand SU(20) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(20) %19:gpr64 = MOVaddr target-flags(aarch64-page) @.str.11, target-flags(aarch64-pageoff, aarch64-nc) @.str.11
Bottom Pressure:
GPR32=5
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 1 16 18 12 3 11 9 7 5 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 
  BotQ.A RemainingLatency 0 + 9c > CritPath 3
Picking from Bot:
  Cand SU(14) ORDER                              
  Cand SU(1) BOT-PATH                  1 cycles 
  Cand SU(3) ORDER                              
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(9) STRXui %13:gpr64, %stack.10.t_names, 4 :: (store 8 into %ir.arrayidx3, align 16)
Bottom Pressure:
GPR32=6
  LiveReg: %13
  UpdateRegP: SU(9) STRXui %13:gpr64, %stack.10.t_names, 4 :: (store 8 into %ir.arrayidx3, align 16)
              to 
  Ready @9c
  BotQ.A TopLatency SU(9) 1c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 1 16 18 12 3 11 5 7 8 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 
  BotQ.A RemainingLatency 0 + 10c > CritPath 3
Picking from Bot:
  Cand SU(14) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(18) ORDER                              
  Cand SU(11) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(11) STRXui %14:gpr64, %stack.10.t_names, 5 :: (store 8 into %ir.arrayidx4)
Bottom Pressure:
GPR32=7
  LiveReg: %14
  UpdateRegP: SU(11) STRXui %14:gpr64, %stack.10.t_names, 5 :: (store 8 into %ir.arrayidx4)
              to 
  Ready @10c
  BotQ.A TopLatency SU(11) 1c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 1 16 18 12 3 8 5 7 10 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 
  BotQ.A RemainingLatency 0 + 11c > CritPath 3
Picking from Bot:
  Cand SU(14) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(18) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(18) %18:gpr64 = MOVaddr target-flags(aarch64-page) @.str.10, target-flags(aarch64-pageoff, aarch64-nc) @.str.10
Bottom Pressure:
GPR32=6
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 1 16 10 12 3 8 5 7 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 
  BotQ.A RemainingLatency 0 + 12c > CritPath 3
Picking from Bot:
  Cand SU(14) ORDER                              
  Cand SU(1) BOT-PATH                  1 cycles 
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(5) STRXui %11:gpr64, %stack.10.t_names, 2 :: (store 8 into %ir.arrayidx1, align 16)
Bottom Pressure:
GPR32=7
  LiveReg: %11
  UpdateRegP: SU(5) STRXui %11:gpr64, %stack.10.t_names, 2 :: (store 8 into %ir.arrayidx1, align 16)
              to 
  Ready @12c
  BotQ.A TopLatency SU(5) 1c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 1 16 10 12 3 8 7 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 
  BotQ.A RemainingLatency 0 + 13c > CritPath 3
Picking from Bot:
  Cand SU(14) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(7) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(7) STRXui %12:gpr64, %stack.10.t_names, 3 :: (store 8 into %ir.arrayidx2)
Bottom Pressure:
GPR32=8
  LiveReg: %12
  UpdateRegP: SU(7) STRXui %12:gpr64, %stack.10.t_names, 3 :: (store 8 into %ir.arrayidx2)
              to 
  Ready @13c
  BotQ.A TopLatency SU(7) 1c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 1 16 10 12 3 8 4 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 
  BotQ.A RemainingLatency 0 + 14c > CritPath 3
Picking from Bot:
  Cand SU(14) ORDER                              
  Cand SU(16) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(16) %17:gpr64 = MOVaddr target-flags(aarch64-page) @.str.9, target-flags(aarch64-pageoff, aarch64-nc) @.str.9
Bottom Pressure:
GPR32=7
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 1 6 10 12 3 8 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 
  BotQ.A RemainingLatency 0 + 15c > CritPath 3
Picking from Bot:
  Cand SU(14) ORDER                              
  Cand SU(1) BOT-PATH                  1 cycles 
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(3) STRXui %10:gpr64, %stack.10.t_names, 1 :: (store 8 into %ir.arrayidx)
Bottom Pressure:
GPR32=8
  LiveReg: %10
  UpdateRegP: SU(3) STRXui %10:gpr64, %stack.10.t_names, 1 :: (store 8 into %ir.arrayidx)
              to 
  Ready @15c
  BotQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 1 6 10 12 4 8 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 
  BotQ.A RemainingLatency 0 + 16c > CritPath 3
Picking from Bot:
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(14) %16:gpr64 = MOVaddr target-flags(aarch64-page) @.str.8, target-flags(aarch64-pageoff, aarch64-nc) @.str.8
Bottom Pressure:
GPR32=7
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 6 10 12 4 8 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 
  BotQ.A RemainingLatency 0 + 17c > CritPath 3
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(1) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) STRWui %9:gpr32, %159:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
Bottom Pressure:
GPR32=8
  LiveReg: %9
  UpdateRegP: SU(1) STRWui %9:gpr32, %159:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
              to 
  Ready @17c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 8 6 10 12 4 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 
  BotQ.A RemainingLatency 0 + 18c > CritPath 3
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(12) %15:gpr64 = MOVaddr target-flags(aarch64-page) @.str.7, target-flags(aarch64-pageoff, aarch64-nc) @.str.7
Bottom Pressure:
GPR32=7
  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 8 6 10 0 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 
  BotQ.A RemainingLatency 0 + 19c > CritPath 3
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(10) %14:gpr64 = MOVaddr target-flags(aarch64-page) @.str.6, target-flags(aarch64-pageoff, aarch64-nc) @.str.6
Bottom Pressure:
GPR32=6
  Ready @19c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 8 6 4 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 
  BotQ.A RemainingLatency 0 + 20c > CritPath 3
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %13:gpr64 = MOVaddr target-flags(aarch64-page) @.str.5, target-flags(aarch64-pageoff, aarch64-nc) @.str.5
Bottom Pressure:
GPR32=5
  Ready @20c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 6 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 
  BotQ.A RemainingLatency 0 + 21c > CritPath 3
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %12:gpr64 = MOVaddr target-flags(aarch64-page) @.str.4, target-flags(aarch64-pageoff, aarch64-nc) @.str.4
Bottom Pressure:
GPR32=4
  Ready @21c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 
  BotQ.A RemainingLatency 0 + 22c > CritPath 3
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %11:gpr64 = MOVaddr target-flags(aarch64-page) @.str.3, target-flags(aarch64-pageoff, aarch64-nc) @.str.3
Bottom Pressure:
GPR32=3
  Ready @22c
  *** Max MOps 1 at cycle 22
Cycle: 23 BotQ.A
BotQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  BotQ.A RemainingLatency 0 + 23c > CritPath 3
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %10:gpr64 = MOVaddr target-flags(aarch64-page) @.str.2, target-flags(aarch64-pageoff, aarch64-nc) @.str.2
Bottom Pressure:
GPR32=2
  Ready @23c
  *** Max MOps 1 at cycle 23
Cycle: 24 BotQ.A
BotQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %9:gpr32 = MOVi32imm 1
Bottom Pressure:
GPR32=1
  Ready @24c
  *** Max MOps 1 at cycle 24
Cycle: 25 BotQ.A
BotQ.A @25c
  Retired: 25
  Executed: 25c
  Critical: 25c, 25 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   %9:gpr32 = MOVi32imm 1
SU(2):   %10:gpr64 = MOVaddr target-flags(aarch64-page) @.str.2, target-flags(aarch64-pageoff, aarch64-nc) @.str.2
SU(4):   %11:gpr64 = MOVaddr target-flags(aarch64-page) @.str.3, target-flags(aarch64-pageoff, aarch64-nc) @.str.3
SU(6):   %12:gpr64 = MOVaddr target-flags(aarch64-page) @.str.4, target-flags(aarch64-pageoff, aarch64-nc) @.str.4
SU(8):   %13:gpr64 = MOVaddr target-flags(aarch64-page) @.str.5, target-flags(aarch64-pageoff, aarch64-nc) @.str.5
SU(10):   %14:gpr64 = MOVaddr target-flags(aarch64-page) @.str.6, target-flags(aarch64-pageoff, aarch64-nc) @.str.6
SU(12):   %15:gpr64 = MOVaddr target-flags(aarch64-page) @.str.7, target-flags(aarch64-pageoff, aarch64-nc) @.str.7
SU(1):   STRWui %9:gpr32, %159:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
SU(14):   %16:gpr64 = MOVaddr target-flags(aarch64-page) @.str.8, target-flags(aarch64-pageoff, aarch64-nc) @.str.8
SU(3):   STRXui %10:gpr64, %stack.10.t_names, 1 :: (store 8 into %ir.arrayidx)
SU(16):   %17:gpr64 = MOVaddr target-flags(aarch64-page) @.str.9, target-flags(aarch64-pageoff, aarch64-nc) @.str.9
SU(7):   STRXui %12:gpr64, %stack.10.t_names, 3 :: (store 8 into %ir.arrayidx2)
SU(5):   STRXui %11:gpr64, %stack.10.t_names, 2 :: (store 8 into %ir.arrayidx1, align 16)
SU(18):   %18:gpr64 = MOVaddr target-flags(aarch64-page) @.str.10, target-flags(aarch64-pageoff, aarch64-nc) @.str.10
SU(11):   STRXui %14:gpr64, %stack.10.t_names, 5 :: (store 8 into %ir.arrayidx4)
SU(9):   STRXui %13:gpr64, %stack.10.t_names, 4 :: (store 8 into %ir.arrayidx3, align 16)
SU(20):   %19:gpr64 = MOVaddr target-flags(aarch64-page) @.str.11, target-flags(aarch64-pageoff, aarch64-nc) @.str.11
SU(15):   STRXui %16:gpr64, %stack.10.t_names, 7 :: (store 8 into %ir.arrayidx6)
SU(13):   STRXui %15:gpr64, %stack.10.t_names, 6 :: (store 8 into %ir.arrayidx5, align 16)
SU(24):   %21:gpr64 = LDRXui %stack.11.fp, 0 :: (dereferenceable load 8 from %ir.fp)
SU(19):   STRXui %18:gpr64, %stack.10.t_names, 9 :: (store 8 into %ir.arrayidx8)
SU(17):   STRXui %17:gpr64, %stack.10.t_names, 8 :: (store 8 into %ir.arrayidx7, align 16)
SU(22):   %20:gpr64 = MOVaddr target-flags(aarch64-page) @.str.12, target-flags(aarch64-pageoff, aarch64-nc) @.str.12
SU(23):   STRXui %20:gpr64, %stack.10.t_names, 11 :: (store 8 into %ir.arrayidx10)
SU(21):   STRXui %19:gpr64, %stack.10.t_names, 10 :: (store 8 into %ir.arrayidx9, align 16)

********** MI Scheduling **********
main:%bb.3 if.end
  From: %87:gpr64 = MOVaddr target-flags(aarch64-page) @.str.23, target-flags(aarch64-pageoff, aarch64-nc) @.str.23
    To: BL @print_results, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit killed $w4, implicit killed $w5, implicit killed $d0, implicit killed $d1, implicit killed $x6, implicit killed $w7, implicit-def $sp
 RegionInstrs: 30
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR32arg=8
tcGPR64=8
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=8
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
Live In: %86 %83 %79 %85 %66 %64 %63 %84 
Live Out: 
Live Thru: 
Top Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
Bottom Pressure:
GPR32arg=8
tcGPR64=8
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=8
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
Excess PSets: 
Cluster ld/st SU(17) - SU(15)
Cluster ld/st SU(13) - SU(11)
Cluster ld/st SU(9) - SU(7)
Cluster ld/st SU(5) - SU(3)
SU(0):   %87:gpr64 = MOVaddr target-flags(aarch64-page) @.str.23, target-flags(aarch64-pageoff, aarch64-nc) @.str.23
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%87
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   STRXui %87:gpr64, $sp, 8 :: (store 8 into stack + 64)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%87
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(2):   %89:gpr64 = MOVaddr target-flags(aarch64-page) @.str.22, target-flags(aarch64-pageoff, aarch64-nc) @.str.22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%89
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(3):   STRXui %89:gpr64, $sp, 7 :: (store 8 into stack + 56)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%89
    SU(5): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(4):   %90:gpr64 = MOVaddr target-flags(aarch64-page) @.str.21, target-flags(aarch64-pageoff, aarch64-nc) @.str.21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%90
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(5):   STRXui %90:gpr64, $sp, 6 :: (store 8 into stack + 48)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%90
  Successors:
    SU(3): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(6):   %91:gpr64 = MOVaddr target-flags(aarch64-page) @.str.20, target-flags(aarch64-pageoff, aarch64-nc) @.str.20
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%91
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   STRXui %91:gpr64, $sp, 5 :: (store 8 into stack + 40)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%91
    SU(9): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(8):   %92:gpr64 = MOVaddr target-flags(aarch64-page) @.str.19, target-flags(aarch64-pageoff, aarch64-nc) @.str.19
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(9): Data Latency=1 Reg=%92
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(9):   STRXui %92:gpr64, $sp, 4 :: (store 8 into stack + 32)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%92
  Successors:
    SU(7): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(10):   %93:gpr64 = MOVaddr target-flags(aarch64-page) @.str.18, target-flags(aarch64-pageoff, aarch64-nc) @.str.18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(11): Data Latency=1 Reg=%93
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(11):   STRXui %93:gpr64, $sp, 3 :: (store 8 into stack + 24)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%93
    SU(13): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(12):   %94:gpr64 = MOVaddr target-flags(aarch64-page) @.str.17, target-flags(aarch64-pageoff, aarch64-nc) @.str.17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(13): Data Latency=1 Reg=%94
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(13):   STRXui %94:gpr64, $sp, 2 :: (store 8 into stack + 16)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%94
  Successors:
    SU(11): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(14):   %95:gpr64 = MOVaddr target-flags(aarch64-page) @.str.16, target-flags(aarch64-pageoff, aarch64-nc) @.str.16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(15): Data Latency=1 Reg=%95
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(15):   STRXui %95:gpr64, $sp, 1 :: (store 8 into stack + 8)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(14): Data Latency=1 Reg=%95
    SU(17): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(16):   %96:gpr64 = MOVaddr target-flags(aarch64-page) @.str.15, target-flags(aarch64-pageoff, aarch64-nc) @.str.15
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(17): Data Latency=1 Reg=%96
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(17):   STRXui %96:gpr64, $sp, 0 :: (store 8 into stack)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(16): Data Latency=1 Reg=%96
  Successors:
    SU(15): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(18):   %97:gpr64 = MOVaddr target-flags(aarch64-page) @.str.13, target-flags(aarch64-pageoff, aarch64-nc) @.str.13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(20): Data Latency=1 Reg=%97
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(19):   %98:gpr64 = MOVaddr target-flags(aarch64-page) @.str.14, target-flags(aarch64-pageoff, aarch64-nc) @.str.14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(28): Data Latency=1 Reg=%98
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(20):   $x0 = COPY %97:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(18): Data Latency=1 Reg=%97
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1
  Single Issue       : false;
SU(21):   $w1 = COPY %84:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1
  Single Issue       : false;
SU(22):   $w2 = COPY %63:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1
  Single Issue       : false;
SU(23):   $w3 = COPY %64:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1
  Single Issue       : false;
SU(24):   $w4 = COPY %66:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1
  Single Issue       : false;
SU(25):   $w5 = COPY %85:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1
  Single Issue       : false;
SU(26):   $d0 = COPY %79:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : FPR128_lo -1    ZPR_3b -1    FPR128_lo+ZPR_3b -1    QQ_with_qsub1_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR4_with_zsub3_in_ZPR_4b -1    ZPR4_with_zsub_in_FPR128_lo -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1
  Single Issue       : false;
SU(27):   $d1 = COPY %83:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : FPR128_lo -1    ZPR_3b -1    FPR128_lo+ZPR_3b -1    QQ_with_qsub1_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR4_with_zsub3_in_ZPR_4b -1    ZPR4_with_zsub_in_FPR128_lo -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1
  Single Issue       : false;
SU(28):   $x6 = COPY %98:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(19): Data Latency=1 Reg=%98
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1
  Single Issue       : false;
SU(29):   $w7 = COPY %86:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1
  Single Issue       : false;
ExitSU:   BL @print_results, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit killed $w4, implicit killed $w5, implicit killed $d0, implicit killed $d1, implicit killed $x6, implicit killed $w7, implicit-def $sp
  # preds left       : 10
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(29): Ord  Latency=0 Artificial
    SU(28): Ord  Latency=0 Artificial
    SU(27): Ord  Latency=0 Artificial
    SU(26): Ord  Latency=0 Artificial
    SU(25): Ord  Latency=0 Artificial
    SU(24): Ord  Latency=0 Artificial
    SU(23): Ord  Latency=0 Artificial
    SU(22): Ord  Latency=0 Artificial
    SU(21): Ord  Latency=0 Artificial
    SU(20): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 15 13 11 9 7 5 3 1 29 28 27 26 25 24 23 22 21 20 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 24 25 26 27 29 
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(15) WEAK                               
  Cand SU(29) PHYS-REG                           
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(29) $w7 = COPY %86:gpr32
Bottom Pressure:
GPR32arg=7
tcGPR64=7
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=8
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  LiveReg: %86
  UpdateRegP: SU(29) $w7 = COPY %86:gpr32
              to GPR32arg -1    tcGPR64 -1    GPR32 -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 15 13 11 9 7 5 3 1 20 28 27 26 25 24 23 22 21 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 24 25 26 27 
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(15) WEAK                               
  Cand SU(20) PHYS-REG                           
  Cand SU(28) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(28) $x6 = COPY %98:gpr64
Bottom Pressure:
GPR32arg=6
tcGPR64=6
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=8
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  LiveReg: %98
  UpdateRegP: SU(28) $x6 = COPY %98:gpr64
              to GPR32arg -1    tcGPR64 -1    GPR32 -1
  Ready @0c
  BotQ.A TopLatency SU(28) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 19 
Queue BotQ.A: 17 15 13 11 9 7 5 3 1 20 21 27 26 25 24 23 22 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 24 25 26 27 
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(15) WEAK                               
  Cand SU(20) PHYS-REG                           
  Cand SU(21) ORDER                              
  Cand SU(25) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(25) $w5 = COPY %85:gpr32
Bottom Pressure:
GPR32arg=5
tcGPR64=5
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=8
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  LiveReg: %85
  UpdateRegP: SU(25) $w5 = COPY %85:gpr32
              to GPR32arg -1    tcGPR64 -1    GPR32 -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 19 
Queue BotQ.A: 17 15 13 11 9 7 5 3 1 20 21 27 26 22 24 23 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 24 27 26 
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(15) WEAK                               
  Cand SU(20) PHYS-REG                           
  Cand SU(21) ORDER                              
  Cand SU(22) ORDER                              
  Cand SU(24) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(24) $w4 = COPY %66:gpr32
Bottom Pressure:
GPR32arg=4
tcGPR64=4
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=8
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  LiveReg: %66
  UpdateRegP: SU(24) $w4 = COPY %66:gpr32
              to GPR32arg -1    tcGPR64 -1    GPR32 -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 19 
Queue BotQ.A: 17 15 13 11 9 7 5 3 1 20 21 27 26 22 23 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 26 27 
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(15) WEAK                               
  Cand SU(20) PHYS-REG                           
  Cand SU(21) ORDER                              
  Cand SU(22) ORDER                              
  Cand SU(23) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(23) $w3 = COPY %64:gpr32
Bottom Pressure:
GPR32arg=3
tcGPR64=3
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=8
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  LiveReg: %64
  UpdateRegP: SU(23) $w3 = COPY %64:gpr32
              to GPR32arg -1    tcGPR64 -1    GPR32 -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 19 
Queue BotQ.A: 17 15 13 11 9 7 5 3 1 20 21 27 26 22 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 27 26 
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(15) WEAK                               
  Cand SU(20) PHYS-REG                           
  Cand SU(21) ORDER                              
  Cand SU(22) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(22) $w2 = COPY %63:gpr32
Bottom Pressure:
GPR32arg=2
tcGPR64=2
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=8
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  LiveReg: %63
  UpdateRegP: SU(22) $w2 = COPY %63:gpr32
              to GPR32arg -1    tcGPR64 -1    GPR32 -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 19 
Queue BotQ.A: 17 15 13 11 9 7 5 3 1 20 21 27 26 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 26 27 
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(15) WEAK                               
  Cand SU(20) PHYS-REG                           
  Cand SU(21) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(21) $w1 = COPY %84:gpr32
Bottom Pressure:
GPR32arg=1
tcGPR64=1
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=8
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  LiveReg: %84
  UpdateRegP: SU(21) $w1 = COPY %84:gpr32
              to GPR32arg -1    tcGPR64 -1    GPR32 -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 19 
Queue BotQ.A: 17 15 13 11 9 7 5 3 1 20 26 27 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 27 26 
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(15) WEAK                               
  Cand SU(20) PHYS-REG                           
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(20) $x0 = COPY %97:gpr64
Bottom Pressure:
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=8
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  LiveReg: %97
  UpdateRegP: SU(20) $x0 = COPY %97:gpr64
              to GPR32arg -1    tcGPR64 -1    GPR32 -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 19 18 
Queue BotQ.A: 17 15 13 11 9 7 5 3 1 27 26 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 27 26 
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(15) WEAK                               
  Cand SU(27) PHYS-REG                           
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(27) $d1 = COPY %83:fpr64
Bottom Pressure:
FPR128_lo=1
ZPR_3b=1
FPR128_lo+ZPR_3b=1
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=1
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=1
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=1
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=1
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=1
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=1
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=1
GPR32=8
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR4_with_zsub3_in_ZPR_4b=1
ZPR4_with_zsub_in_FPR128_lo=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=1
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %83
  UpdateRegP: SU(27) $d1 = COPY %83:fpr64
              to FPR128_lo -1    ZPR_3b -1    FPR128_lo+ZPR_3b -1    QQ_with_qsub1_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8 -1    FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR4_with_zsub3_in_ZPR_4b -1    ZPR4_with_zsub_in_FPR128_lo -1    FPR8+ZPR_3b -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 19 18 
Queue BotQ.A: 17 15 13 11 9 7 5 3 1 26 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 26 
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(15) WEAK                               
  Cand SU(26) PHYS-REG                           
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(26) $d0 = COPY %79:fpr64
Bottom Pressure:
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %79
  UpdateRegP: SU(26) $d0 = COPY %79:fpr64
              to FPR128_lo -1    ZPR_3b -1    FPR128_lo+ZPR_3b -1    QQ_with_qsub1_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8 -1    FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR4_with_zsub3_in_ZPR_4b -1    ZPR4_with_zsub_in_FPR128_lo -1    FPR8+ZPR_3b -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 19 18 
Queue BotQ.A: 17 15 13 11 9 7 5 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(15) WEAK                               
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(15) STRXui %95:gpr64, $sp, 1 :: (store 8 into stack + 8)
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %95
  UpdateRegP: SU(15) STRXui %95:gpr64, $sp, 1 :: (store 8 into stack + 8)
              to 
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 1 13 11 9 7 5 3 14 19 18 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 
BotQ.A RemLatency SU(17) 1c
  BotQ.A RemainingLatency 1 + 1c > CritPath 1
Picking from Bot:
  Cand SU(17) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(17) STRXui %96:gpr64, $sp, 0 :: (store 8 into stack)
Bottom Pressure:
FPR8=2
GPR32=10
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %96
  UpdateRegP: SU(17) STRXui %96:gpr64, $sp, 0 :: (store 8 into stack)
              to 
  Ready @1c
  BotQ.A TopLatency SU(17) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 1 13 11 9 7 5 3 14 19 16 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(18) ORDER                              
  Cand SU(19) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(19) %98:gpr64 = MOVaddr target-flags(aarch64-page) @.str.14, target-flags(aarch64-pageoff, aarch64-nc) @.str.14
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @2c
  BotQ.A BotLatency SU(19) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 1 13 11 9 7 5 3 14 16 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Cand SU(18) ORDER                              
  Cand SU(1) BOT-PATH                  1 cycles 
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(11) STRXui %93:gpr64, $sp, 3 :: (store 8 into stack + 24)
Bottom Pressure:
FPR8=2
GPR32=10
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %93
  UpdateRegP: SU(11) STRXui %93:gpr64, $sp, 3 :: (store 8 into stack + 24)
              to 
  Ready @3c
  BotQ.A TopLatency SU(11) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 1 13 16 9 7 5 3 14 10 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 
  BotQ.A RemainingLatency 0 + 4c > CritPath 1
Picking from Bot:
  Cand SU(18) ORDER                              
  Cand SU(13) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(13) STRXui %94:gpr64, $sp, 2 :: (store 8 into stack + 16)
Bottom Pressure:
FPR8=2
GPR32=11
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %94
  UpdateRegP: SU(13) STRXui %94:gpr64, $sp, 2 :: (store 8 into stack + 16)
              to 
  Ready @4c
  BotQ.A TopLatency SU(13) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 1 10 16 9 7 5 3 14 12 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 
  BotQ.A RemainingLatency 0 + 5c > CritPath 1
Picking from Bot:
  Cand SU(18) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(18) %97:gpr64 = MOVaddr target-flags(aarch64-page) @.str.13, target-flags(aarch64-pageoff, aarch64-nc) @.str.13
Bottom Pressure:
FPR8=2
GPR32=10
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 1 10 16 9 7 5 3 14 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 
  BotQ.A RemainingLatency 0 + 6c > CritPath 1
Picking from Bot:
  Cand SU(12) ORDER                              
  Cand SU(1) BOT-PATH                  1 cycles 
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(7) STRXui %91:gpr64, $sp, 5 :: (store 8 into stack + 40)
Bottom Pressure:
FPR8=2
GPR32=11
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %91
  UpdateRegP: SU(7) STRXui %91:gpr64, $sp, 5 :: (store 8 into stack + 40)
              to 
  Ready @6c
  BotQ.A TopLatency SU(7) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 1 10 16 9 14 5 3 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 
  BotQ.A RemainingLatency 0 + 7c > CritPath 1
Picking from Bot:
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(9) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(9) STRXui %92:gpr64, $sp, 4 :: (store 8 into stack + 32)
Bottom Pressure:
FPR8=2
GPR32=12
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %92
  UpdateRegP: SU(9) STRXui %92:gpr64, $sp, 4 :: (store 8 into stack + 32)
              to 
  Ready @7c
  BotQ.A TopLatency SU(9) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 1 10 16 6 14 5 3 8 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 
  BotQ.A RemainingLatency 0 + 8c > CritPath 1
Picking from Bot:
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(16) %96:gpr64 = MOVaddr target-flags(aarch64-page) @.str.15, target-flags(aarch64-pageoff, aarch64-nc) @.str.15
Bottom Pressure:
FPR8=2
GPR32=11
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 1 10 8 6 14 5 3 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 
  BotQ.A RemainingLatency 0 + 9c > CritPath 1
Picking from Bot:
  Cand SU(12) ORDER                              
  Cand SU(1) BOT-PATH                  1 cycles 
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) STRXui %89:gpr64, $sp, 7 :: (store 8 into stack + 56)
Bottom Pressure:
FPR8=2
GPR32=12
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %89
  UpdateRegP: SU(3) STRXui %89:gpr64, $sp, 7 :: (store 8 into stack + 56)
              to 
  Ready @9c
  BotQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 1 10 8 6 14 5 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 
  BotQ.A RemainingLatency 0 + 10c > CritPath 1
Picking from Bot:
  Cand SU(12) ORDER                              
  Cand SU(14) ORDER                              
  Cand SU(5) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(5) STRXui %90:gpr64, $sp, 6 :: (store 8 into stack + 48)
Bottom Pressure:
FPR8=2
GPR32=13
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %90
  UpdateRegP: SU(5) STRXui %90:gpr64, $sp, 6 :: (store 8 into stack + 48)
              to 
  Ready @10c
  BotQ.A TopLatency SU(5) 1c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 1 10 8 6 14 2 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 
  BotQ.A RemainingLatency 0 + 11c > CritPath 1
Picking from Bot:
  Cand SU(12) ORDER                              
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(14) %95:gpr64 = MOVaddr target-flags(aarch64-page) @.str.16, target-flags(aarch64-pageoff, aarch64-nc) @.str.16
Bottom Pressure:
FPR8=2
GPR32=12
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 1 10 8 6 4 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 
  BotQ.A RemainingLatency 0 + 12c > CritPath 1
Picking from Bot:
  Cand SU(12) ORDER                              
  Cand SU(1) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) STRXui %87:gpr64, $sp, 8 :: (store 8 into stack + 64)
Bottom Pressure:
FPR8=2
GPR32=13
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %87
  UpdateRegP: SU(1) STRXui %87:gpr64, $sp, 8 :: (store 8 into stack + 64)
              to 
  Ready @12c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 2 10 8 6 4 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 
  BotQ.A RemainingLatency 0 + 13c > CritPath 1
Picking from Bot:
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(12) %94:gpr64 = MOVaddr target-flags(aarch64-page) @.str.17, target-flags(aarch64-pageoff, aarch64-nc) @.str.17
Bottom Pressure:
FPR8=2
GPR32=12
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 10 8 6 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 
  BotQ.A RemainingLatency 0 + 14c > CritPath 1
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(10) %93:gpr64 = MOVaddr target-flags(aarch64-page) @.str.18, target-flags(aarch64-pageoff, aarch64-nc) @.str.18
Bottom Pressure:
FPR8=2
GPR32=11
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 4 8 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 
  BotQ.A RemainingLatency 0 + 15c > CritPath 1
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %92:gpr64 = MOVaddr target-flags(aarch64-page) @.str.19, target-flags(aarch64-pageoff, aarch64-nc) @.str.19
Bottom Pressure:
FPR8=2
GPR32=10
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @15c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 4 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 
  BotQ.A RemainingLatency 0 + 16c > CritPath 1
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %91:gpr64 = MOVaddr target-flags(aarch64-page) @.str.20, target-flags(aarch64-pageoff, aarch64-nc) @.str.20
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 
  BotQ.A RemainingLatency 0 + 17c > CritPath 1
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %90:gpr64 = MOVaddr target-flags(aarch64-page) @.str.21, target-flags(aarch64-pageoff, aarch64-nc) @.str.21
Bottom Pressure:
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  BotQ.A RemainingLatency 0 + 18c > CritPath 1
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %89:gpr64 = MOVaddr target-flags(aarch64-page) @.str.22, target-flags(aarch64-pageoff, aarch64-nc) @.str.22
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %87:gpr64 = MOVaddr target-flags(aarch64-page) @.str.23, target-flags(aarch64-pageoff, aarch64-nc) @.str.23
Bottom Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @19c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %87:gpr64 = MOVaddr target-flags(aarch64-page) @.str.23, target-flags(aarch64-pageoff, aarch64-nc) @.str.23
SU(2):   %89:gpr64 = MOVaddr target-flags(aarch64-page) @.str.22, target-flags(aarch64-pageoff, aarch64-nc) @.str.22
SU(4):   %90:gpr64 = MOVaddr target-flags(aarch64-page) @.str.21, target-flags(aarch64-pageoff, aarch64-nc) @.str.21
SU(6):   %91:gpr64 = MOVaddr target-flags(aarch64-page) @.str.20, target-flags(aarch64-pageoff, aarch64-nc) @.str.20
SU(8):   %92:gpr64 = MOVaddr target-flags(aarch64-page) @.str.19, target-flags(aarch64-pageoff, aarch64-nc) @.str.19
SU(10):   %93:gpr64 = MOVaddr target-flags(aarch64-page) @.str.18, target-flags(aarch64-pageoff, aarch64-nc) @.str.18
SU(12):   %94:gpr64 = MOVaddr target-flags(aarch64-page) @.str.17, target-flags(aarch64-pageoff, aarch64-nc) @.str.17
SU(1):   STRXui %87:gpr64, $sp, 8 :: (store 8 into stack + 64)
SU(14):   %95:gpr64 = MOVaddr target-flags(aarch64-page) @.str.16, target-flags(aarch64-pageoff, aarch64-nc) @.str.16
SU(5):   STRXui %90:gpr64, $sp, 6 :: (store 8 into stack + 48)
SU(3):   STRXui %89:gpr64, $sp, 7 :: (store 8 into stack + 56)
SU(16):   %96:gpr64 = MOVaddr target-flags(aarch64-page) @.str.15, target-flags(aarch64-pageoff, aarch64-nc) @.str.15
SU(9):   STRXui %92:gpr64, $sp, 4 :: (store 8 into stack + 32)
SU(7):   STRXui %91:gpr64, $sp, 5 :: (store 8 into stack + 40)
SU(18):   %97:gpr64 = MOVaddr target-flags(aarch64-page) @.str.13, target-flags(aarch64-pageoff, aarch64-nc) @.str.13
SU(13):   STRXui %94:gpr64, $sp, 2 :: (store 8 into stack + 16)
SU(11):   STRXui %93:gpr64, $sp, 3 :: (store 8 into stack + 24)
SU(19):   %98:gpr64 = MOVaddr target-flags(aarch64-page) @.str.14, target-flags(aarch64-pageoff, aarch64-nc) @.str.14
SU(17):   STRXui %96:gpr64, $sp, 0 :: (store 8 into stack)
SU(15):   STRXui %95:gpr64, $sp, 1 :: (store 8 into stack + 8)
SU(26):   $d0 = COPY %79:fpr64
SU(27):   $d1 = COPY %83:fpr64
SU(20):   $x0 = COPY %97:gpr64
SU(21):   $w1 = COPY %84:gpr32
SU(22):   $w2 = COPY %63:gpr32
SU(23):   $w3 = COPY %64:gpr32
SU(24):   $w4 = COPY %66:gpr32
SU(25):   $w5 = COPY %85:gpr32
SU(28):   $x6 = COPY %98:gpr64
SU(29):   $w7 = COPY %86:gpr32

********** MI Scheduling **********
main:%bb.3 if.end
  From: %58:fpr64 = COPY killed $d0
    To: ADJCALLSTACKDOWN 72, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 30
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR128_lo=1
ZPR_3b=1
FPR128_lo+ZPR_3b=1
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=1
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=1
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=1
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=1
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=1
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=1
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8=5
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=1
GPR32=7
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR4_with_zsub3_in_ZPR_4b=1
ZPR4_with_zsub_in_FPR128_lo=1
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=1
FPR8+ZPR_4b=5
FPR8+ZPR4_with_zsub2_in_ZPR_4b=5
FPR8+ZPR4_with_zsub3_in_ZPR_4b=5
FPR8+ZPR4_with_zsub_in_FPR128_lo=5
ZPR=5
Live In: %24 %37 %55 %48 %44 %38 %51 B0 
Live Out: %86 %85 %84 %83 %79 %78 %66 %63 %64 
Live Thru: 
  LiveReg: %86
  LiveReg: %85
  LiveReg: %84
  LiveReg: %83
  UpdateRegP: SU(26) STRDui %83:fpr64, %stack.5.mflops, 0 :: (store 8 into %ir.mflops)
              to 
  LiveReg: %79
  UpdateRegP: SU(24) %82:fpr64 = FMULDrr %79:fpr64, %81:fpr64
              to 
  LiveReg: %78
  UpdateRegP: SU(21) %79:fpr64 = LDRDui %78:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @maxtime :: (dereferenceable load 8 from @maxtime)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  LiveReg: %66
  UpdateRegP: SU(9) %67:gpr32 = nsw ADDWrr %65:gpr32, %66:gpr32
              to 
  LiveReg: %63
  UpdateRegP: SU(7) %65:gpr32 = nsw ADDWrr %63:gpr32, %64:gpr32
              to 
  LiveReg: %64
  UpdateRegP: SU(7) %65:gpr32 = nsw ADDWrr %63:gpr32, %64:gpr32
              to GPR32 -1
Top Pressure:
FPR128_lo=1
ZPR_3b=1
FPR128_lo+ZPR_3b=1
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=1
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=1
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=1
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=1
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=1
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=1
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8=4
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=1
GPR32=4
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR4_with_zsub3_in_ZPR_4b=1
ZPR4_with_zsub_in_FPR128_lo=1
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=1
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
Excess PSets: 
Constraining copy SU(17)
Constraining copy SU(23)
SU(0):   %58:fpr64 = COPY killed $d0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 6
  Successors:
    SU(3): Data Latency=0 Reg=%58
  Pressure Diff      : FPR128_lo 1    ZPR_3b 1    FPR128_lo+ZPR_3b 1    QQ_with_qsub1_in_FPR128_lo+ZPR_3b 1    QQQ_with_qsub2_in_FPR128_lo+ZPR_3b 1    QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b 1    QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b 1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b 1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b 1    FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b 1    FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b 1    FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR4_with_zsub3_in_ZPR_4b 1    ZPR4_with_zsub_in_FPR128_lo 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1
  Single Issue       : false;
SU(1):   %59:gpr64common = ADRP target-flags(aarch64-page) %const.1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 11
  Successors:
    SU(2): Data Latency=1 Reg=%59
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   %60:fpr64 = LDRDui %59:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 10
  Predecessors:
    SU(1): Data Latency=1 Reg=%59
  Successors:
    SU(3): Data Latency=4 Reg=%60
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(3):   %61:fpr64 = FMULDrr %58:fpr64, %60:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(2): Data Latency=4 Reg=%60
    SU(0): Data Latency=0 Reg=%58
  Successors:
    SU(4): Data Latency=1 Reg=%61
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(4):   %62:fpr64 = FADDDrr %51:fpr64, %61:fpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 5
  Predecessors:
    SU(3): Data Latency=1 Reg=%61
  Successors:
    SU(15): Data Latency=1 Reg=%62
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(5):   %63:gpr32 = LDRWui %38:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nx0 :: (dereferenceable load 4 from @nx0)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(7): Data Latency=4 Reg=%63
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %64:gpr32 = LDRWui %44:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @ny0 :: (dereferenceable load 4 from @ny0)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(7): Data Latency=4 Reg=%64
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %65:gpr32 = nsw ADDWrr %63:gpr32, %64:gpr32
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(6): Data Latency=4 Reg=%64
    SU(5): Data Latency=4 Reg=%63
  Successors:
    SU(9): Data Latency=1 Reg=%65
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(8):   %66:gpr32 = LDRWui %48:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nz0 :: (dereferenceable load 4 from @nz0)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(9): Data Latency=4 Reg=%66
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   %67:gpr32 = nsw ADDWrr %65:gpr32, %66:gpr32
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(7): Data Latency=1 Reg=%65
    SU(8): Data Latency=4 Reg=%66
  Successors:
    SU(10): Data Latency=1 Reg=%67
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   %68:fpr64 = SCVTFUWDri %67:gpr32
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 7
  Predecessors:
    SU(9): Data Latency=1 Reg=%67
  Successors:
    SU(13): Data Latency=1 Reg=%68
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(11):   %69:gpr64common = ADRP target-flags(aarch64-page) %const.2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 11
  Successors:
    SU(12): Data Latency=1 Reg=%69
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(12):   %70:fpr64 = LDRDui %69:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 10
  Predecessors:
    SU(11): Data Latency=1 Reg=%69
  Successors:
    SU(13): Data Latency=4 Reg=%70
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(13):   %71:fpr64 = FMULDrr %68:fpr64, %70:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 6
  Predecessors:
    SU(10): Data Latency=1 Reg=%68
    SU(12): Data Latency=4 Reg=%70
  Successors:
    SU(14): Data Latency=1 Reg=%71
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(14):   %72:fpr64 = FDIVDrr %71:fpr64, %55:fpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(13): Data Latency=1 Reg=%71
  Successors:
    SU(15): Data Latency=1 Reg=%72
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(15):   %73:fpr64 = FADDDrr %62:fpr64, %72:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(14): Data Latency=1 Reg=%72
    SU(4): Data Latency=1 Reg=%62
  Successors:
    SU(18): Data Latency=1 Reg=%73
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(16):   %74:gpr64 = MOVi64imm -4539183878094454784
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(17): Data Latency=1 Reg=%74
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(17):   %75:fpr64 = COPY %74:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(16): Data Latency=1 Reg=%74
  Successors:
    SU(18): Data Latency=0 Reg=%75
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(18):   %76:fpr64 = FADDDrr %73:fpr64, %75:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 3
  Predecessors:
    SU(15): Data Latency=1 Reg=%73
    SU(17): Data Latency=0 Reg=%75
  Successors:
    SU(19): Data Latency=1 Reg=%76
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(19):   %77:fpr64 = FMULDrr %37:fpr64, %76:fpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 2
  Predecessors:
    SU(18): Data Latency=1 Reg=%76
  Successors:
    SU(25): Data Latency=1 Reg=%77
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(20):   %78:gpr64common = ADRP target-flags(aarch64-page) @maxtime
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 7
  Successors:
    SU(21): Data Latency=1 Reg=%78
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(21):   %79:fpr64 = LDRDui %78:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @maxtime :: (dereferenceable load 8 from @maxtime)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 6
  Predecessors:
    SU(20): Data Latency=1 Reg=%78
  Successors:
    SU(24): Data Latency=4 Reg=%79
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(22):   %80:gpr64 = MOVi64imm 4696837146684686336
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(23): Data Latency=1 Reg=%80
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(23):   %81:fpr64 = COPY %80:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(22): Data Latency=1 Reg=%80
  Successors:
    SU(24): Data Latency=0 Reg=%81
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(24):   %82:fpr64 = FMULDrr %79:fpr64, %81:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(23): Data Latency=0 Reg=%81
    SU(21): Data Latency=4 Reg=%79
  Successors:
    SU(25): Data Latency=1 Reg=%82
  Pressure Diff      : 
  Single Issue       : false;
SU(25):   %83:fpr64 = FDIVDrr %77:fpr64, %82:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 1
  Predecessors:
    SU(19): Data Latency=1 Reg=%77
    SU(24): Data Latency=1 Reg=%82
  Successors:
    SU(26): Data Latency=1 Reg=%83
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(26):   STRDui %83:fpr64, %stack.5.mflops, 0 :: (store 8 into %ir.mflops)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(25): Data Latency=1 Reg=%83
  Pressure Diff      : 
  Single Issue       : false;
SU(27):   %84:gpr32 = LDRSBWui %stack.3.Class, 0 :: (dereferenceable load 1 from %ir.Class, align 4)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(28):   %85:gpr32 = LDRWui %24:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
SU(29):   %86:gpr32 = LDRWui %stack.4.verified, 0 :: (dereferenceable load 4 from %ir.verified)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 72, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(29): Ord  Latency=3 Artificial
    SU(28): Ord  Latency=3 Artificial
    SU(27): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 29 28 27 
Queue BotQ.A: 26 
Pick Bot ONLY1     
Scheduling SU(26) STRDui %83:fpr64, %stack.5.mflops, 0 :: (store 8 into %ir.mflops)
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @0c
  BotQ.A TopLatency SU(26) 13c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 29 28 27 
Queue BotQ.A: 25 
Pick Bot ONLY1     
Scheduling SU(25) %83:fpr64 = FDIVDrr %77:fpr64, %82:fpr64
Bottom Pressure:
FPR8=3
GPR32=7
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  LiveReg: %77
  UpdateRegP: SU(25) %83:fpr64 = FDIVDrr %77:fpr64, %82:fpr64
              to 
  LiveReg: %82
  UpdateRegP: SU(25) %83:fpr64 = FDIVDrr %77:fpr64, %82:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @1c
  BotQ.A BotLatency SU(25) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 29 28 27 
Queue BotQ.A: 19 24 
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 6 8 11 16 20 22 27 28 29 
BotQ.A RemLatency SU(19) 11c
Picking from Bot:
  Cand SU(19) ORDER                              
  Cand SU(24) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %58:fpr64 = COPY killed $d0
Top Pressure:
FPR128_lo=1
ZPR_3b=1
FPR128_lo+ZPR_3b=1
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=1
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=1
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=1
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=1
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=1
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=1
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8=5
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=1
GPR32=4
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR4_with_zsub3_in_ZPR_4b=1
ZPR4_with_zsub_in_FPR128_lo=1
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=1
FPR8+ZPR_4b=5
FPR8+ZPR4_with_zsub2_in_ZPR_4b=5
FPR8+ZPR4_with_zsub3_in_ZPR_4b=5
FPR8+ZPR4_with_zsub_in_FPR128_lo=5
ZPR=5
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 29 28 27 
Queue BotQ.A: 19 24 
Queue TopQ.P: 
Queue TopQ.A: 29 1 5 6 8 11 16 20 22 27 28 
BotQ.A RemLatency SU(19) 11c
Picking from Bot:
  Cand SU(24) ORDER                              
Picking from Top:
  Cand SU(29) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(24) %82:fpr64 = FMULDrr %79:fpr64, %81:fpr64
Bottom Pressure:
FPR8=3
GPR32=7
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  LiveReg: %81
  UpdateRegP: SU(24) %82:fpr64 = FMULDrr %79:fpr64, %81:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @2c
  BotQ.A BotLatency SU(24) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 21 
Queue BotQ.A: 19 23 29 28 27 
Queue TopQ.P: 
Queue TopQ.A: 29 1 5 6 8 11 16 20 22 27 28 
BotQ.A RemLatency SU(19) 11c
BotQ.A RemLatency SU(21) 1c
  BotQ.A RemainingLatency 11 + 3c > CritPath 13
Picking from Bot:
  Cand SU(19) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(19) %77:fpr64 = FMULDrr %37:fpr64, %76:fpr64
Bottom Pressure:
FPR8=4
GPR32=7
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  LiveReg: %37
  UpdateRegP: SU(19) %77:fpr64 = FMULDrr %37:fpr64, %76:fpr64
              to 
  LiveReg: %76
  UpdateRegP: SU(19) %77:fpr64 = FMULDrr %37:fpr64, %76:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @3c
  BotQ.A TopLatency SU(19) 11c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 21 
Queue BotQ.A: 27 23 29 28 18 
Queue TopQ.P: 
Queue TopQ.A: 29 1 5 6 8 11 16 20 22 27 28 
BotQ.A RemLatency SU(18) 10c
BotQ.A RemLatency SU(21) 1c
  BotQ.A RemainingLatency 10 + 4c > CritPath 13
Picking from Bot:
  Cand SU(27) ORDER                              
  Cand SU(29) ORDER                              
  Cand SU(18) BOT-PATH                  10 cycles 
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(18) %76:fpr64 = FADDDrr %73:fpr64, %75:fpr64
Bottom Pressure:
FPR8=5
GPR32=7
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
FPR8+ZPR_4b=5
FPR8+ZPR4_with_zsub2_in_ZPR_4b=5
FPR8+ZPR4_with_zsub3_in_ZPR_4b=5
FPR8+ZPR4_with_zsub_in_FPR128_lo=5
ZPR=5
  LiveReg: %73
  UpdateRegP: SU(18) %76:fpr64 = FADDDrr %73:fpr64, %75:fpr64
              to 
  LiveReg: %75
  UpdateRegP: SU(18) %76:fpr64 = FADDDrr %73:fpr64, %75:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @4c
  BotQ.A BotLatency SU(18) 3c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 21 
Queue BotQ.A: 27 23 29 28 15 17 
Queue TopQ.P: 
Queue TopQ.A: 29 1 5 6 8 11 16 20 22 27 28 
BotQ.A RemLatency SU(15) 9c
BotQ.A RemLatency SU(21) 1c
  BotQ.A RemainingLatency 9 + 5c > CritPath 13
Picking from Bot:
  Cand SU(27) ORDER                              
  Cand SU(29) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(29) %86:gpr32 = LDRWui %stack.4.verified, 0 :: (dereferenceable load 4 from %ir.verified)
Bottom Pressure:
FPR8=5
GPR32=6
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
FPR8+ZPR_4b=5
FPR8+ZPR4_with_zsub2_in_ZPR_4b=5
FPR8+ZPR4_with_zsub3_in_ZPR_4b=5
FPR8+ZPR4_with_zsub_in_FPR128_lo=5
ZPR=5
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 27 23 17 28 15 21 
Queue TopQ.P: 
Queue TopQ.A: 28 1 5 6 8 11 16 20 22 27 
BotQ.A RemLatency SU(15) 9c
  BotQ.A RemainingLatency 9 + 6c > CritPath 13
Picking from Bot:
  Cand SU(27) ORDER                              
  Cand SU(23) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(23) %81:fpr64 = COPY %80:gpr64
Bottom Pressure:
FPR8=4
GPR32=7
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  LiveReg: %80
  UpdateRegP: SU(23) %81:fpr64 = COPY %80:gpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @6c
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 22 
Queue BotQ.A: 27 21 17 28 15 
Queue TopQ.P: 
Queue TopQ.A: 28 1 5 6 8 11 16 20 22 27 
BotQ.A RemLatency SU(15) 9c
  BotQ.A RemainingLatency 9 + 6c > CritPath 13
Picking from Bot:
  Cand SU(27) ORDER                              
  Cand SU(21) BOT-PATH                  1 cycles 
  Cand SU(15) BOT-PATH                  9 cycles 
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(15) %73:fpr64 = FADDDrr %62:fpr64, %72:fpr64
Bottom Pressure:
FPR8=5
GPR32=7
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
FPR8+ZPR_4b=5
FPR8+ZPR4_with_zsub2_in_ZPR_4b=5
FPR8+ZPR4_with_zsub3_in_ZPR_4b=5
FPR8+ZPR4_with_zsub_in_FPR128_lo=5
ZPR=5
  LiveReg: %62
  UpdateRegP: SU(15) %73:fpr64 = FADDDrr %62:fpr64, %72:fpr64
              to 
  LiveReg: %72
  UpdateRegP: SU(15) %73:fpr64 = FADDDrr %62:fpr64, %72:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @6c
  BotQ.A TopLatency SU(15) 9c
  BotQ.A BotLatency SU(15) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 27 21 17 28 14 4 22 
Queue TopQ.P: 
Queue TopQ.A: 28 1 5 6 8 11 16 20 22 27 
BotQ.A RemLatency SU(14) 8c
  BotQ.A RemainingLatency 8 + 7c > CritPath 13
Picking from Bot:
  Cand SU(27) ORDER                              
  Cand SU(21) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(21) %79:fpr64 = LDRDui %78:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @maxtime :: (dereferenceable load 8 from @maxtime)
Bottom Pressure:
FPR8=4
GPR32=7
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  Ready @7c
  BotQ.A BotLatency SU(21) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 27 22 17 28 14 4 20 
Queue TopQ.P: 
Queue TopQ.A: 28 1 5 6 8 11 16 20 22 27 
BotQ.A RemLatency SU(14) 8c
  BotQ.A RemainingLatency 8 + 8c > CritPath 13
Picking from Bot:
  Cand SU(27) ORDER                              
  Cand SU(28) ORDER                              
  Cand SU(14) BOT-PATH                  8 cycles 
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(14) %72:fpr64 = FDIVDrr %71:fpr64, %55:fpr64
Bottom Pressure:
FPR8=5
GPR32=7
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
FPR8+ZPR_4b=5
FPR8+ZPR4_with_zsub2_in_ZPR_4b=5
FPR8+ZPR4_with_zsub3_in_ZPR_4b=5
FPR8+ZPR4_with_zsub_in_FPR128_lo=5
ZPR=5
  LiveReg: %71
  UpdateRegP: SU(14) %72:fpr64 = FDIVDrr %71:fpr64, %55:fpr64
              to 
  LiveReg: %55
  UpdateRegP: SU(14) %72:fpr64 = FDIVDrr %71:fpr64, %55:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @8c
  BotQ.A TopLatency SU(14) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 27 22 17 28 20 4 13 
Queue TopQ.P: 
Queue TopQ.A: 28 1 5 6 8 11 16 20 22 27 
BotQ.A RemLatency SU(13) 7c
  BotQ.A RemainingLatency 7 + 9c > CritPath 13
Picking from Bot:
  Cand SU(27) ORDER                              
  Cand SU(28) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(28) %85:gpr32 = LDRWui %24:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)
Bottom Pressure:
FPR8=5
GPR32=7
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
FPR8+ZPR_4b=5
FPR8+ZPR4_with_zsub2_in_ZPR_4b=5
FPR8+ZPR4_with_zsub3_in_ZPR_4b=5
FPR8+ZPR4_with_zsub_in_FPR128_lo=5
ZPR=5
  LiveReg: %24
  UpdateRegP: SU(28) %85:gpr32 = LDRWui %24:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)
              to GPR32 -1
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 27 22 17 13 20 4 
Queue TopQ.P: 
Queue TopQ.A: 27 1 5 6 8 11 16 20 22 
BotQ.A RemLatency SU(13) 7c
  BotQ.A RemainingLatency 7 + 10c > CritPath 13
Picking from Bot:
  Cand SU(27) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(27) %84:gpr32 = LDRSBWui %stack.3.Class, 0 :: (dereferenceable load 1 from %ir.Class, align 4)
Bottom Pressure:
FPR8=5
GPR32=6
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
FPR8+ZPR_4b=5
FPR8+ZPR4_with_zsub2_in_ZPR_4b=5
FPR8+ZPR4_with_zsub3_in_ZPR_4b=5
FPR8+ZPR4_with_zsub_in_FPR128_lo=5
ZPR=5
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 22 17 13 20 
Queue TopQ.P: 
Queue TopQ.A: 22 1 5 6 8 11 16 20 
BotQ.A RemLatency SU(13) 7c
  BotQ.A RemainingLatency 7 + 11c > CritPath 13
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(22) REG-MAX                            
  Cand SU(17) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(17) %75:fpr64 = COPY %74:gpr64
Bottom Pressure:
FPR8=4
GPR32=7
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  LiveReg: %74
  UpdateRegP: SU(17) %75:fpr64 = COPY %74:gpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @11c
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 16 
Queue BotQ.A: 4 22 20 13 
Queue TopQ.P: 
Queue TopQ.A: 22 1 5 6 8 11 16 20 
BotQ.A RemLatency SU(13) 7c
  BotQ.A RemainingLatency 7 + 11c > CritPath 13
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(13) BOT-PATH                  7 cycles 
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(13) %71:fpr64 = FMULDrr %68:fpr64, %70:fpr64
Bottom Pressure:
FPR8=5
GPR32=7
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
FPR8+ZPR_4b=5
FPR8+ZPR4_with_zsub2_in_ZPR_4b=5
FPR8+ZPR4_with_zsub3_in_ZPR_4b=5
FPR8+ZPR4_with_zsub_in_FPR128_lo=5
ZPR=5
  LiveReg: %68
  UpdateRegP: SU(13) %71:fpr64 = FMULDrr %68:fpr64, %70:fpr64
              to 
  LiveReg: %70
  UpdateRegP: SU(13) %71:fpr64 = FMULDrr %68:fpr64, %70:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @11c
  BotQ.A TopLatency SU(13) 7c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 12 
Queue BotQ.A: 4 22 20 10 16 
Queue TopQ.P: 
Queue TopQ.A: 22 1 5 6 8 11 16 20 
BotQ.A RemLatency SU(4) 6c
BotQ.A RemLatency SU(12) 1c
  BotQ.A RemainingLatency 6 + 12c > CritPath 13
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(22) REG-MAX                            
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(22) %80:gpr64 = MOVi64imm 4696837146684686336
Bottom Pressure:
FPR8=5
GPR32=6
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
FPR8+ZPR_4b=5
FPR8+ZPR4_with_zsub2_in_ZPR_4b=5
FPR8+ZPR4_with_zsub3_in_ZPR_4b=5
FPR8+ZPR4_with_zsub_in_FPR128_lo=5
ZPR=5
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 12 
Queue BotQ.A: 4 16 20 10 
Queue TopQ.P: 
Queue TopQ.A: 20 1 5 6 8 11 16 
BotQ.A RemLatency SU(4) 6c
BotQ.A RemLatency SU(12) 1c
  BotQ.A RemainingLatency 6 + 13c > CritPath 13
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(16) REG-MAX                            
  Cand SU(20) ORDER                              
  Cand SU(10) BOT-PATH                  6 cycles 
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(10) %68:fpr64 = SCVTFUWDri %67:gpr32
Bottom Pressure:
FPR8=4
GPR32=7
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  LiveReg: %67
  UpdateRegP: SU(10) %68:fpr64 = SCVTFUWDri %67:gpr32
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @13c
  BotQ.A TopLatency SU(10) 6c
  BotQ.A BotLatency SU(10) 7c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 12 
Queue BotQ.A: 4 16 20 9 
Queue TopQ.P: 
Queue TopQ.A: 20 1 5 6 8 11 16 
  BotQ.A RemainingLatency 0 + 14c > CritPath 13
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) %62:fpr64 = FADDDrr %51:fpr64, %61:fpr64
Bottom Pressure:
FPR8=5
GPR32=7
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
FPR8+ZPR_4b=5
FPR8+ZPR4_with_zsub2_in_ZPR_4b=5
FPR8+ZPR4_with_zsub3_in_ZPR_4b=5
FPR8+ZPR4_with_zsub_in_FPR128_lo=5
ZPR=5
  LiveReg: %51
  UpdateRegP: SU(4) %62:fpr64 = FADDDrr %51:fpr64, %61:fpr64
              to 
  LiveReg: %61
  UpdateRegP: SU(4) %62:fpr64 = FADDDrr %51:fpr64, %61:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @14c
  BotQ.A TopLatency SU(4) 6c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 16 20 3 12 
Queue TopQ.P: 
Queue TopQ.A: 20 1 5 6 8 11 16 
  BotQ.A RemainingLatency 0 + 15c > CritPath 13
Picking from Bot:
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(9) %67:gpr32 = nsw ADDWrr %65:gpr32, %66:gpr32
Bottom Pressure:
FPR8=5
GPR32=7
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
FPR8+ZPR_4b=5
FPR8+ZPR4_with_zsub2_in_ZPR_4b=5
FPR8+ZPR4_with_zsub3_in_ZPR_4b=5
FPR8+ZPR4_with_zsub_in_FPR128_lo=5
ZPR=5
  LiveReg: %65
  UpdateRegP: SU(9) %67:gpr32 = nsw ADDWrr %65:gpr32, %66:gpr32
              to GPR32 -1
  Ready @15c
  BotQ.A BotLatency SU(9) 8c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 8 
Queue BotQ.A: 12 16 20 3 7 
Queue TopQ.P: 
Queue TopQ.A: 20 1 5 6 8 11 16 
  BotQ.A RemainingLatency 0 + 16c > CritPath 13
Picking from Bot:
  Cand SU(12) ORDER                              
  Cand SU(16) REG-MAX                            
  Cand SU(20) ORDER                              
  Cand SU(7) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(7) %65:gpr32 = nsw ADDWrr %63:gpr32, %64:gpr32
Bottom Pressure:
FPR8=5
GPR32=6
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
FPR8+ZPR_4b=5
FPR8+ZPR4_with_zsub2_in_ZPR_4b=5
FPR8+ZPR4_with_zsub3_in_ZPR_4b=5
FPR8+ZPR4_with_zsub_in_FPR128_lo=5
ZPR=5
  Ready @16c
  BotQ.A BotLatency SU(7) 9c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 8 6 5 
Queue BotQ.A: 12 16 20 3 
Queue TopQ.P: 
Queue TopQ.A: 20 1 5 6 8 11 16 
  BotQ.A RemainingLatency 0 + 17c > CritPath 13
Picking from Bot:
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(12) %70:fpr64 = LDRDui %69:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
Bottom Pressure:
FPR8=4
GPR32=7
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  LiveReg: %69
  UpdateRegP: SU(12) %70:fpr64 = LDRDui %69:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @17c
  BotQ.A BotLatency SU(12) 10c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 8 6 5 
Queue BotQ.A: 3 16 20 11 
Queue TopQ.P: 
Queue TopQ.A: 20 1 5 6 8 11 16 
  BotQ.A RemainingLatency 0 + 18c > CritPath 13
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(3) %61:fpr64 = FMULDrr %58:fpr64, %60:fpr64
Bottom Pressure:
FPR8=5
GPR32=7
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
FPR8+ZPR_4b=5
FPR8+ZPR4_with_zsub2_in_ZPR_4b=5
FPR8+ZPR4_with_zsub3_in_ZPR_4b=5
FPR8+ZPR4_with_zsub_in_FPR128_lo=5
ZPR=5
  LiveReg: %58
  UpdateRegP: SU(3) %61:fpr64 = FMULDrr %58:fpr64, %60:fpr64
              to 
  LiveReg: %60
  UpdateRegP: SU(3) %61:fpr64 = FMULDrr %58:fpr64, %60:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @18c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 6 5 
Queue BotQ.A: 11 16 20 8 
Queue TopQ.P: 
Queue TopQ.A: 20 1 5 6 8 11 16 
  BotQ.A RemainingLatency 0 + 19c > CritPath 13
Picking from Bot:
  Cand SU(11) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(20) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(20) %78:gpr64common = ADRP target-flags(aarch64-page) @maxtime
Bottom Pressure:
FPR8=5
GPR32=6
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
FPR8+ZPR_4b=5
FPR8+ZPR4_with_zsub2_in_ZPR_4b=5
FPR8+ZPR4_with_zsub3_in_ZPR_4b=5
FPR8+ZPR4_with_zsub_in_FPR128_lo=5
ZPR=5
  Ready @19c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 11 16 8 6 5 
Queue TopQ.P: 
Queue TopQ.A: 16 1 5 6 8 11 
  BotQ.A RemainingLatency 0 + 20c > CritPath 13
Picking from Bot:
  Cand SU(11) ORDER                              
  Cand SU(16) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(16) %74:gpr64 = MOVi64imm -4539183878094454784
Bottom Pressure:
FPR8=5
GPR32=5
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
FPR8+ZPR_4b=5
FPR8+ZPR4_with_zsub2_in_ZPR_4b=5
FPR8+ZPR4_with_zsub3_in_ZPR_4b=5
FPR8+ZPR4_with_zsub_in_FPR128_lo=5
ZPR=5
  Ready @20c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 11 5 8 6 
Queue TopQ.P: 
Queue TopQ.A: 11 1 5 6 8 
  BotQ.A RemainingLatency 0 + 21c > CritPath 13
Picking from Bot:
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(11) %69:gpr64common = ADRP target-flags(aarch64-page) %const.2
Bottom Pressure:
FPR8=5
GPR32=4
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
FPR8+ZPR_4b=5
FPR8+ZPR4_with_zsub2_in_ZPR_4b=5
FPR8+ZPR4_with_zsub3_in_ZPR_4b=5
FPR8+ZPR4_with_zsub_in_FPR128_lo=5
ZPR=5
  Ready @21c
  BotQ.A BotLatency SU(11) 11c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 5 8 2 
Queue TopQ.P: 
Queue TopQ.A: 8 1 5 6 
  BotQ.A RemainingLatency 0 + 22c > CritPath 13
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(2) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) %60:fpr64 = LDRDui %59:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
Bottom Pressure:
FPR8=4
GPR32=5
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  LiveReg: %59
  UpdateRegP: SU(2) %60:fpr64 = LDRDui %59:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @22c
  *** Max MOps 1 at cycle 22
Cycle: 23 BotQ.A
BotQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 5 8 1 
Queue TopQ.P: 
Queue TopQ.A: 8 1 5 6 
  BotQ.A RemainingLatency 0 + 23c > CritPath 13
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %66:gpr32 = LDRWui %48:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nz0 :: (dereferenceable load 4 from @nz0)
Bottom Pressure:
FPR8=4
GPR32=5
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  LiveReg: %48
  UpdateRegP: SU(8) %66:gpr32 = LDRWui %48:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nz0 :: (dereferenceable load 4 from @nz0)
              to GPR32 -1
  Ready @23c
  BotQ.A BotLatency SU(8) 12c
  *** Max MOps 1 at cycle 23
Cycle: 24 BotQ.A
BotQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 5 1 
Queue TopQ.P: 
Queue TopQ.A: 6 1 5 
  BotQ.A RemainingLatency 0 + 24c > CritPath 13
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %64:gpr32 = LDRWui %44:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @ny0 :: (dereferenceable load 4 from @ny0)
Bottom Pressure:
FPR8=4
GPR32=5
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  LiveReg: %44
  UpdateRegP: SU(6) %64:gpr32 = LDRWui %44:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @ny0 :: (dereferenceable load 4 from @ny0)
              to GPR32 -1
  Ready @24c
  BotQ.A BotLatency SU(6) 13c
  *** Max MOps 1 at cycle 24
Cycle: 25 BotQ.A
BotQ.A @25c
  Retired: 25
  Executed: 25c
  Critical: 25c, 25 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 5 
Queue TopQ.P: 
Queue TopQ.A: 5 1 
  BotQ.A RemainingLatency 0 + 25c > CritPath 13
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %63:gpr32 = LDRWui %38:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nx0 :: (dereferenceable load 4 from @nx0)
Bottom Pressure:
FPR8=4
GPR32=5
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  LiveReg: %38
  UpdateRegP: SU(5) %63:gpr32 = LDRWui %38:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nx0 :: (dereferenceable load 4 from @nx0)
              to GPR32 -1
  Ready @25c
  *** Max MOps 1 at cycle 25
Cycle: 26 BotQ.A
BotQ.A @26c
  Retired: 26
  Executed: 26c
  Critical: 26c, 26 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %59:gpr64common = ADRP target-flags(aarch64-page) %const.1
Bottom Pressure:
FPR8=4
GPR32=4
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  Ready @26c
  *** Max MOps 1 at cycle 26
Cycle: 27 BotQ.A
BotQ.A @27c
  Retired: 27
  Executed: 27c
  Critical: 27c, 27 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %58:fpr64 = COPY killed $d0
SU(1):   %59:gpr64common = ADRP target-flags(aarch64-page) %const.1
SU(5):   %63:gpr32 = LDRWui %38:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nx0 :: (dereferenceable load 4 from @nx0)
SU(6):   %64:gpr32 = LDRWui %44:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @ny0 :: (dereferenceable load 4 from @ny0)
SU(8):   %66:gpr32 = LDRWui %48:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nz0 :: (dereferenceable load 4 from @nz0)
SU(2):   %60:fpr64 = LDRDui %59:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
SU(11):   %69:gpr64common = ADRP target-flags(aarch64-page) %const.2
SU(16):   %74:gpr64 = MOVi64imm -4539183878094454784
SU(20):   %78:gpr64common = ADRP target-flags(aarch64-page) @maxtime
SU(3):   %61:fpr64 = FMULDrr %58:fpr64, %60:fpr64
SU(12):   %70:fpr64 = LDRDui %69:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
SU(7):   %65:gpr32 = nsw ADDWrr %63:gpr32, %64:gpr32
SU(9):   %67:gpr32 = nsw ADDWrr %65:gpr32, %66:gpr32
SU(4):   %62:fpr64 = FADDDrr %51:fpr64, %61:fpr64
SU(10):   %68:fpr64 = SCVTFUWDri %67:gpr32
SU(22):   %80:gpr64 = MOVi64imm 4696837146684686336
SU(13):   %71:fpr64 = FMULDrr %68:fpr64, %70:fpr64
SU(17):   %75:fpr64 = COPY %74:gpr64
SU(27):   %84:gpr32 = LDRSBWui %stack.3.Class, 0 :: (dereferenceable load 1 from %ir.Class, align 4)
SU(28):   %85:gpr32 = LDRWui %24:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)
SU(14):   %72:fpr64 = FDIVDrr %71:fpr64, %55:fpr64
SU(21):   %79:fpr64 = LDRDui %78:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @maxtime :: (dereferenceable load 8 from @maxtime)
SU(15):   %73:fpr64 = FADDDrr %62:fpr64, %72:fpr64
SU(23):   %81:fpr64 = COPY %80:gpr64
SU(29):   %86:gpr32 = LDRWui %stack.4.verified, 0 :: (dereferenceable load 4 from %ir.verified)
SU(18):   %76:fpr64 = FADDDrr %73:fpr64, %75:fpr64
SU(19):   %77:fpr64 = FMULDrr %37:fpr64, %76:fpr64
SU(24):   %82:fpr64 = FMULDrr %79:fpr64, %81:fpr64
SU(25):   %83:fpr64 = FDIVDrr %77:fpr64, %82:fpr64
SU(26):   STRDui %83:fpr64, %stack.5.mflops, 0 :: (store 8 into %ir.mflops)

********** MI Scheduling **********
main:%bb.3 if.end
  From: %57:fpr64 = FMOVDi 0
    To: BL @pow, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def $d0
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %57:fpr64 = FMOVDi 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%57
  Single Issue       : false;
SU(1):   $d0 = COPY %56:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d1 = COPY %57:fpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%57
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @pow, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def $d0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $d1 = COPY %57:fpr64
  Ready @0c
  BotQ.A TopLatency SU(2) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $d0 = COPY %56:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %57:fpr64 = FMOVDi 0
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %57:fpr64 = FMOVDi 0
SU(1):   $d0 = COPY %56:fpr64
SU(2):   $d1 = COPY %57:fpr64

********** MI Scheduling **********
main:%bb.3 if.end
  From: undef %33.ssub:fpr64 = LDRSui %24:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 22
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=4
GPR32=7
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
Live In: %24 
Live Out: %56 %55 %51 %48 %44 %38 %37 %24 
Live Thru: GPR32=1
  LiveReg: %56
  LiveReg: %55
  UpdateRegP: SU(21) %56:fpr64 = FDIVDrr %54:fpr64, %55:fpr64
              to 
  LiveReg: %51
  LiveReg: %48
  UpdateRegP: SU(14) %49:gpr32 = LDRWui %48:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nz0 :: (dereferenceable load 4 from @nz0)
              to GPR32 -1
  LiveReg: %44
  UpdateRegP: SU(10) %45:gpr32 = LDRWui %44:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @ny0 :: (dereferenceable load 4 from @ny0)
              to GPR32 -1
  LiveReg: %38
  UpdateRegP: SU(4) %39:gpr32 = LDRWui %38:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nx0 :: (dereferenceable load 4 from @nx0)
              to GPR32 -1
  LiveReg: %37
  LiveReg: %24
  UpdateRegP: SU(0) undef %33.ssub:fpr64 = LDRSui %24:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
Top Pressure:
GPR32=1
Bottom Pressure:
FPR8=4
GPR32=4
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
Excess PSets: 
SU(0):   undef %33.ssub:fpr64 = LDRSui %24:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%33
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(1):   %35:fpr128 = SSHLLv2i32_shift %33:fpr64, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%33
  Successors:
    SU(2): Data Latency=1 Reg=%35
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %37:fpr64 = SCVTFv1i64 %35.dsub:fpr128
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%35
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %38:gpr64common = ADRP target-flags(aarch64-page) @nx0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 8
  Successors:
    SU(4): Data Latency=1 Reg=%38
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(4):   %39:gpr32 = LDRWui %38:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nx0 :: (dereferenceable load 4 from @nx0)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 7
  Predecessors:
    SU(3): Data Latency=1 Reg=%38
  Successors:
    SU(17): Data Latency=4 Reg=%39
    SU(5): Data Latency=4 Reg=%39
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(5):   %40:fpr64 = SCVTFUWDri %39:gpr32
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(4): Data Latency=4 Reg=%39
  Successors:
    SU(8): Data Latency=1 Reg=%40
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(6):   %41:gpr64common = ADRP target-flags(aarch64-page) %const.0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 7
  Successors:
    SU(7): Data Latency=1 Reg=%41
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   %42:fpr64 = LDRDui %41:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 6
  Predecessors:
    SU(6): Data Latency=1 Reg=%41
  Successors:
    SU(8): Data Latency=4 Reg=%42
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(8):   %43:fpr64 = FMULDrr %40:fpr64, %42:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 2
  Predecessors:
    SU(5): Data Latency=1 Reg=%40
    SU(7): Data Latency=4 Reg=%42
  Successors:
    SU(12): Data Latency=1 Reg=%43
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(9):   %44:gpr64common = ADRP target-flags(aarch64-page) @ny0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 8
  Successors:
    SU(10): Data Latency=1 Reg=%44
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(10):   %45:gpr32 = LDRWui %44:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @ny0 :: (dereferenceable load 4 from @ny0)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 7
  Predecessors:
    SU(9): Data Latency=1 Reg=%44
  Successors:
    SU(17): Data Latency=4 Reg=%45
    SU(11): Data Latency=4 Reg=%45
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(11):   %46:fpr64 = SCVTFUWDri %45:gpr32
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(10): Data Latency=4 Reg=%45
  Successors:
    SU(12): Data Latency=1 Reg=%46
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(12):   %47:fpr64 = FMULDrr %43:fpr64, %46:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 1
  Predecessors:
    SU(8): Data Latency=1 Reg=%43
    SU(11): Data Latency=1 Reg=%46
  Successors:
    SU(16): Data Latency=1 Reg=%47
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(13):   %48:gpr64common = ADRP target-flags(aarch64-page) @nz0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 7
  Successors:
    SU(14): Data Latency=1 Reg=%48
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(14):   %49:gpr32 = LDRWui %48:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nz0 :: (dereferenceable load 4 from @nz0)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 6
  Predecessors:
    SU(13): Data Latency=1 Reg=%48
  Successors:
    SU(18): Data Latency=4 Reg=%49
    SU(15): Data Latency=4 Reg=%49
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(15):   %50:fpr64 = SCVTFUWDri %49:gpr32
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(14): Data Latency=4 Reg=%49
  Successors:
    SU(16): Data Latency=1 Reg=%50
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(16):   %51:fpr64 = FMULDrr %47:fpr64, %50:fpr64
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%47
    SU(15): Data Latency=1 Reg=%50
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(17):   %52:gpr32 = nsw ADDWrr %39:gpr32, %45:gpr32
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(10): Data Latency=4 Reg=%45
    SU(4): Data Latency=4 Reg=%39
  Successors:
    SU(18): Data Latency=1 Reg=%52
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(18):   %53:gpr32 = nsw ADDWrr %52:gpr32, %49:gpr32
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 2
  Predecessors:
    SU(17): Data Latency=1 Reg=%52
    SU(14): Data Latency=4 Reg=%49
  Successors:
    SU(19): Data Latency=1 Reg=%53
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(19):   %54:fpr64 = SCVTFUWDri %53:gpr32
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 1
  Predecessors:
    SU(18): Data Latency=1 Reg=%53
  Successors:
    SU(21): Data Latency=1 Reg=%54
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(20):   %55:fpr64 = FMOVDi 8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(21): Data Latency=1 Reg=%55
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(21):   %56:fpr64 = FDIVDrr %54:fpr64, %55:fpr64
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(19): Data Latency=1 Reg=%54
    SU(20): Data Latency=1 Reg=%55
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 16 2 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 9 13 20 
Picking from Bot:
  Cand SU(21) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(21) %56:fpr64 = FDIVDrr %54:fpr64, %55:fpr64
Bottom Pressure:
FPR8=4
GPR32=4
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  LiveReg: %54
  UpdateRegP: SU(21) %56:fpr64 = FDIVDrr %54:fpr64, %55:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @0c
  BotQ.A TopLatency SU(21) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 16 19 20 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 9 13 20 
BotQ.A RemLatency SU(16) 8c
  BotQ.A RemainingLatency 8 + 1c > CritPath 8
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(19) BOT-PATH                  7 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(19) %54:fpr64 = SCVTFUWDri %53:gpr32
Bottom Pressure:
FPR8=3
GPR32=5
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  LiveReg: %53
  UpdateRegP: SU(19) %54:fpr64 = SCVTFUWDri %53:gpr32
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @1c
  BotQ.A BotLatency SU(19) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 16 20 18 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 9 13 20 
BotQ.A RemLatency SU(16) 8c
  BotQ.A RemainingLatency 8 + 2c > CritPath 8
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(16) BOT-PATH                  8 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(16) %51:fpr64 = FMULDrr %47:fpr64, %50:fpr64
Bottom Pressure:
FPR8=4
GPR32=5
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  LiveReg: %47
  UpdateRegP: SU(16) %51:fpr64 = FMULDrr %47:fpr64, %50:fpr64
              to 
  LiveReg: %50
  UpdateRegP: SU(16) %51:fpr64 = FMULDrr %47:fpr64, %50:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @2c
  BotQ.A TopLatency SU(16) 8c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 18 20 12 15 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 9 13 20 
BotQ.A RemLatency SU(12) 7c
  BotQ.A RemainingLatency 7 + 3c > CritPath 8
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(18) BOT-PATH                  6 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(18) %53:gpr32 = nsw ADDWrr %52:gpr32, %49:gpr32
Bottom Pressure:
FPR8=4
GPR32=6
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  LiveReg: %52
  UpdateRegP: SU(18) %53:gpr32 = nsw ADDWrr %52:gpr32, %49:gpr32
              to 
  LiveReg: %49
  UpdateRegP: SU(15) %50:fpr64 = SCVTFUWDri %49:gpr32
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(18) %53:gpr32 = nsw ADDWrr %52:gpr32, %49:gpr32
              to GPR32 -1
  Ready @3c
  BotQ.A BotLatency SU(18) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 15 20 12 17 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 9 13 20 
BotQ.A RemLatency SU(12) 7c
  BotQ.A RemainingLatency 7 + 4c > CritPath 8
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(17) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(17) %52:gpr32 = nsw ADDWrr %39:gpr32, %45:gpr32
Bottom Pressure:
FPR8=4
GPR32=7
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  LiveReg: %39
  UpdateRegP: SU(5) %40:fpr64 = SCVTFUWDri %39:gpr32
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(17) %52:gpr32 = nsw ADDWrr %39:gpr32, %45:gpr32
              to 
  LiveReg: %45
  UpdateRegP: SU(11) %46:fpr64 = SCVTFUWDri %45:gpr32
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(17) %52:gpr32 = nsw ADDWrr %39:gpr32, %45:gpr32
              to GPR32 -1
  Ready @4c
  BotQ.A BotLatency SU(17) 3c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 15 20 12 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 9 13 20 
BotQ.A RemLatency SU(12) 7c
  BotQ.A RemainingLatency 7 + 5c > CritPath 8
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(15) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(15) %50:fpr64 = SCVTFUWDri %49:gpr32
Bottom Pressure:
FPR8=3
GPR32=7
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 14 
Queue BotQ.A: 2 12 20 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 9 13 20 
BotQ.A RemLatency SU(12) 7c
BotQ.A RemLatency SU(14) 1c
  BotQ.A RemainingLatency 7 + 6c > CritPath 8
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(12) BOT-PATH                  7 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(12) %47:fpr64 = FMULDrr %43:fpr64, %46:fpr64
Bottom Pressure:
FPR8=4
GPR32=7
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  LiveReg: %43
  UpdateRegP: SU(12) %47:fpr64 = FMULDrr %43:fpr64, %46:fpr64
              to 
  LiveReg: %46
  UpdateRegP: SU(12) %47:fpr64 = FMULDrr %43:fpr64, %46:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @6c
  BotQ.A TopLatency SU(12) 7c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 14 
Queue BotQ.A: 2 20 8 11 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 9 13 20 
BotQ.A RemLatency SU(8) 6c
BotQ.A RemLatency SU(14) 1c
  BotQ.A RemainingLatency 6 + 7c > CritPath 8
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(11) %46:fpr64 = SCVTFUWDri %45:gpr32
Bottom Pressure:
FPR8=3
GPR32=7
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 14 10 
Queue BotQ.A: 2 20 8 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 9 13 20 
BotQ.A RemLatency SU(8) 6c
BotQ.A RemLatency SU(14) 1c
  BotQ.A RemainingLatency 6 + 8c > CritPath 8
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(8) BOT-PATH                  6 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(8) %43:fpr64 = FMULDrr %40:fpr64, %42:fpr64
Bottom Pressure:
FPR8=4
GPR32=7
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  LiveReg: %40
  UpdateRegP: SU(8) %43:fpr64 = FMULDrr %40:fpr64, %42:fpr64
              to 
  LiveReg: %42
  UpdateRegP: SU(8) %43:fpr64 = FMULDrr %40:fpr64, %42:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @8c
  BotQ.A TopLatency SU(8) 6c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 10 
Queue BotQ.A: 2 20 5 14 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 9 13 20 
  BotQ.A RemainingLatency 0 + 9c > CritPath 8
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) %40:fpr64 = SCVTFUWDri %39:gpr32
Bottom Pressure:
FPR8=3
GPR32=7
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 10 4 
Queue BotQ.A: 2 20 14 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 9 13 20 
  BotQ.A RemainingLatency 0 + 10c > CritPath 8
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) %37:fpr64 = SCVTFv1i64 %35.dsub:fpr128
Bottom Pressure:
FPR8=3
GPR32=7
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  LiveReg: %35
  UpdateRegP: SU(2) %37:fpr64 = SCVTFv1i64 %35.dsub:fpr128
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @10c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 4 
Queue BotQ.A: 14 20 1 10 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 9 13 20 
  BotQ.A RemainingLatency 0 + 11c > CritPath 8
Picking from Bot:
  Cand SU(14) ORDER                              
  Cand SU(1) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) %35:fpr128 = SSHLLv2i32_shift %33:fpr64, 0
Bottom Pressure:
FPR8=3
GPR32=7
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  LiveReg: %33
  UpdateRegP: SU(1) %35:fpr128 = SSHLLv2i32_shift %33:fpr64, 0
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 4 
Queue BotQ.A: 14 20 10 7 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 9 13 20 
  BotQ.A RemainingLatency 0 + 12c > CritPath 8
Picking from Bot:
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(14) %49:gpr32 = LDRWui %48:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nz0 :: (dereferenceable load 4 from @nz0)
Bottom Pressure:
FPR8=3
GPR32=6
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  Ready @12c
  BotQ.A BotLatency SU(14) 6c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 7 20 10 13 4 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 9 13 20 
  BotQ.A RemainingLatency 0 + 13c > CritPath 8
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(10) %45:gpr32 = LDRWui %44:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @ny0 :: (dereferenceable load 4 from @ny0)
Bottom Pressure:
FPR8=3
GPR32=5
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  Ready @13c
  BotQ.A BotLatency SU(10) 7c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 7 20 4 13 9 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 9 13 20 
  BotQ.A RemainingLatency 0 + 14c > CritPath 8
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(7) %42:fpr64 = LDRDui %41:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
Bottom Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %41
  UpdateRegP: SU(7) %42:fpr64 = LDRDui %41:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 20 4 13 6 0 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 9 13 20 
  BotQ.A RemainingLatency 0 + 15c > CritPath 8
Picking from Bot:
  Cand SU(9) ORDER                              
  Cand SU(20) ORDER                              
  Cand SU(4) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) %39:gpr32 = LDRWui %38:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nx0 :: (dereferenceable load 4 from @nx0)
Bottom Pressure:
FPR8=2
GPR32=5
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @15c
  BotQ.A TopLatency SU(4) 1c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 20 0 13 6 3 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 9 13 20 
  BotQ.A RemainingLatency 0 + 16c > CritPath 8
Picking from Bot:
  Cand SU(9) ORDER                              
  Cand SU(20) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(20) %55:fpr64 = FMOVDi 8
Bottom Pressure:
FPR8=1
GPR32=5
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 3 0 13 6 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 9 13 
  BotQ.A RemainingLatency 0 + 17c > CritPath 8
Picking from Bot:
  Cand SU(9) ORDER                              
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(13) %48:gpr64common = ADRP target-flags(aarch64-page) @nz0
Bottom Pressure:
FPR8=1
GPR32=4
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 3 0 6 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 9 
  BotQ.A RemainingLatency 0 + 18c > CritPath 8
Picking from Bot:
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(9) %44:gpr64common = ADRP target-flags(aarch64-page) @ny0
Bottom Pressure:
FPR8=1
GPR32=3
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  Ready @18c
  BotQ.A BotLatency SU(9) 8c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 
  BotQ.A RemainingLatency 0 + 19c > CritPath 8
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %41:gpr64common = ADRP target-flags(aarch64-page) %const.0
Bottom Pressure:
FPR8=1
GPR32=2
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  Ready @19c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
  BotQ.A RemainingLatency 0 + 20c > CritPath 8
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %38:gpr64common = ADRP target-flags(aarch64-page) @nx0
Bottom Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  Ready @20c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) undef %33.ssub:fpr64 = LDRSui %24:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)
Bottom Pressure:
GPR32=1
  Ready @21c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   undef %33.ssub:fpr64 = LDRSui %24:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)
SU(3):   %38:gpr64common = ADRP target-flags(aarch64-page) @nx0
SU(6):   %41:gpr64common = ADRP target-flags(aarch64-page) %const.0
SU(9):   %44:gpr64common = ADRP target-flags(aarch64-page) @ny0
SU(13):   %48:gpr64common = ADRP target-flags(aarch64-page) @nz0
SU(20):   %55:fpr64 = FMOVDi 8
SU(4):   %39:gpr32 = LDRWui %38:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nx0 :: (dereferenceable load 4 from @nx0)
SU(7):   %42:fpr64 = LDRDui %41:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
SU(10):   %45:gpr32 = LDRWui %44:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @ny0 :: (dereferenceable load 4 from @ny0)
SU(14):   %49:gpr32 = LDRWui %48:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nz0 :: (dereferenceable load 4 from @nz0)
SU(1):   %35:fpr128 = SSHLLv2i32_shift %33:fpr64, 0
SU(2):   %37:fpr64 = SCVTFv1i64 %35.dsub:fpr128
SU(5):   %40:fpr64 = SCVTFUWDri %39:gpr32
SU(8):   %43:fpr64 = FMULDrr %40:fpr64, %42:fpr64
SU(11):   %46:fpr64 = SCVTFUWDri %45:gpr32
SU(12):   %47:fpr64 = FMULDrr %43:fpr64, %46:fpr64
SU(15):   %50:fpr64 = SCVTFUWDri %49:gpr32
SU(17):   %52:gpr32 = nsw ADDWrr %39:gpr32, %45:gpr32
SU(18):   %53:gpr32 = nsw ADDWrr %52:gpr32, %49:gpr32
SU(16):   %51:fpr64 = FMULDrr %47:fpr64, %50:fpr64
SU(19):   %54:fpr64 = SCVTFUWDri %53:gpr32
SU(21):   %56:fpr64 = FDIVDrr %54:fpr64, %55:fpr64

********** MI Scheduling **********
main:%bb.3 if.end
  From: %28:gpr64 = MOVaddr target-flags(aarch64-page) @rsdnm, target-flags(aarch64-pageoff, aarch64-nc) @rsdnm
    To: BL @verify, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit $x2, implicit $x3, implicit-def $sp
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %28:gpr64 = MOVaddr target-flags(aarch64-page) @rsdnm, target-flags(aarch64-pageoff, aarch64-nc) @rsdnm
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%28
  Single Issue       : false;
SU(1):   %29:gpr64 = MOVaddr target-flags(aarch64-page) @errnm, target-flags(aarch64-pageoff, aarch64-nc) @errnm
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%29
  Single Issue       : false;
SU(2):   $x0 = COPY %28:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%28
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $x1 = COPY %29:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%29
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $d0 = COPY %27:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(5):   $x2 = ADDXri %stack.3.Class, 0, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(6):   $x3 = ADDXri %stack.4.verified, 0, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @verify, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit $x2, implicit $x3, implicit-def $sp
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=1 Artificial
    SU(5): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=0 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 5 
Queue BotQ.A: 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 5 6 
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(4) $d0 = COPY %27:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 5 
Queue BotQ.A: 2 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 5 
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(3) $x1 = COPY %29:gpr64
  Ready @0c
  BotQ.A TopLatency SU(3) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 5 1 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $x0 = COPY %28:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 6 0 1 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 5 
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) $x3 = ADDXri %stack.4.verified, 0, 0
  Ready @1c
  BotQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) $x2 = ADDXri %stack.3.Class, 0, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %29:gpr64 = MOVaddr target-flags(aarch64-page) @errnm, target-flags(aarch64-pageoff, aarch64-nc) @errnm
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %28:gpr64 = MOVaddr target-flags(aarch64-page) @rsdnm, target-flags(aarch64-pageoff, aarch64-nc) @rsdnm
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %28:gpr64 = MOVaddr target-flags(aarch64-page) @rsdnm, target-flags(aarch64-pageoff, aarch64-nc) @rsdnm
SU(1):   %29:gpr64 = MOVaddr target-flags(aarch64-page) @errnm, target-flags(aarch64-pageoff, aarch64-nc) @errnm
SU(5):   $x2 = ADDXri %stack.3.Class, 0, 0
SU(6):   $x3 = ADDXri %stack.4.verified, 0, 0
SU(2):   $x0 = COPY %28:gpr64
SU(3):   $x1 = COPY %29:gpr64
SU(4):   $d0 = COPY %27:fpr64

********** MI Scheduling **********
main:%bb.3 if.end
  From: %26:gpr64common = ADRP target-flags(aarch64-page) @frc
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %26:gpr64common = ADRP target-flags(aarch64-page) @frc
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=1 Reg=%26
  Single Issue       : false;
SU(1):   %27:fpr64 = LDRDui %26:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @frc :: (dereferenceable load 8 from @frc)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(0): Data Latency=1 Reg=%26
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %27:fpr64 = LDRDui %26:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @frc :: (dereferenceable load 8 from @frc)
  Ready @3c
  BotQ.A TopLatency SU(1) 1c
  BotQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 1
  Executed: 4c
  Critical: 1c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %26:gpr64common = ADRP target-flags(aarch64-page) @frc
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %26:gpr64common = ADRP target-flags(aarch64-page) @frc
SU(1):   %27:fpr64 = LDRDui %26:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @frc :: (dereferenceable load 8 from @frc)

********** MI Scheduling **********
main:%bb.3 if.end
  From: %24:gpr64common = ADRP target-flags(aarch64-page) @itmax
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %24:gpr64common = ADRP target-flags(aarch64-page) @itmax
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=1 Reg=%24
  Single Issue       : false;
SU(1):   %25:gpr32 = LDRWui %24:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(0): Data Latency=1 Reg=%24
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %25:gpr32 = LDRWui %24:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)
  Ready @3c
  BotQ.A TopLatency SU(1) 1c
  BotQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 1
  Executed: 4c
  Critical: 1c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %24:gpr64common = ADRP target-flags(aarch64-page) @itmax
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %24:gpr64common = ADRP target-flags(aarch64-page) @itmax
SU(1):   %25:gpr32 = LDRWui %24:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)

********** MI Scheduling **********
main:%bb.3 if.end
  From: %23:gpr32 = MOVi32imm 1
    To: BL @ssor, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %23:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   $w0 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @ssor, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %23:gpr32 = MOVi32imm 1
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $w0 = MOVi32imm 1
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(1):   $w0 = MOVi32imm 1
SU(0):   %23:gpr32 = MOVi32imm 1

********** MI Scheduling **********
main:%bb.4 if.then31
  From: STRWui %23:gpr32, %stack.9.i, 0 :: (store 4 into %ir.i)
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui %23:gpr32, %stack.9.i, 0 :: (store 4 into %ir.i)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %156:gpr64sp = ADDXri %stack.8.trecs, 0, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %156:gpr64sp = ADDXri %stack.8.trecs, 0, 0
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui %23:gpr32, %stack.9.i, 0 :: (store 4 into %ir.i)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   STRWui %23:gpr32, %stack.9.i, 0 :: (store 4 into %ir.i)
SU(1):   %156:gpr64sp = ADDXri %stack.8.trecs, 0, 0

********** MI Scheduling **********
main:%bb.5 for.cond
  From: %102:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.7, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %102:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%102
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %102:gpr32common, 11, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%102
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.7, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %102:gpr32common, 11, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %102:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %102:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %102:gpr32common, 11, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.6 for.body
  From: %154:fpr64 = COPY $d0
    To: B %bb.5
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Cluster ld/st SU(1) - SU(3)
  Copy Succ SU(2)
  Copy Succ SU(5)
SU(0):   %154:fpr64 = COPY $d0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(2): Data Latency=0 Reg=%154
  Single Issue       : false;
SU(1):   %155:gpr64 = LDRSWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%155
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Cluster
  Single Issue       : false;
SU(2):   STRDroX %154:fpr64, %156:gpr64sp, %155:gpr64, 0, 1 :: (store 8 into %ir.arrayidx35)
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%155
    SU(0): Data Latency=0 Reg=%154
    SU(3): Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   %157:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 3
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Predecessors:
    SU(1): Ord  Latency=0 Cluster
  Successors:
    SU(4): Data Latency=4 Reg=%157
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   %158:gpr32common = nsw ADDWri %157:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%157
  Successors:
    SU(5): Data Latency=1 Reg=%158
  Single Issue       : false;
SU(5):   STRWui %158:gpr32common, %stack.9.i, 0 :: (store 4 into %ir.i)
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%158
    SU(3): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %154:fpr64 = COPY $d0
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 2 
Queue TopQ.P: 
Queue TopQ.A: 3 1 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(3) ORDER                              
  Cand SU(1) WEAK                               
Pick Bot ORDER     
Scheduling SU(5) STRWui %158:gpr32common, %stack.9.i, 0 :: (store 4 into %ir.i)
  Ready @0c
  BotQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 
Queue TopQ.P: 
Queue TopQ.A: 3 1 
BotQ.A RemLatency SU(2) 4c
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %158:gpr32common = nsw ADDWri %157:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRDroX %154:fpr64, %156:gpr64sp, %155:gpr64, 0, 1 :: (store 8 into %ir.arrayidx35)
  Ready @2c
  BotQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 1 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %157:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %155:gpr64 = LDRSWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %154:fpr64 = COPY $d0
SU(1):   %155:gpr64 = LDRSWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(3):   %157:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(2):   STRDroX %154:fpr64, %156:gpr64sp, %155:gpr64, 0, 1 :: (store 8 into %ir.arrayidx35)
SU(4):   %158:gpr32common = nsw ADDWri %157:gpr32common, 1, 0
SU(5):   STRWui %158:gpr32common, %stack.9.i, 0 :: (store 4 into %ir.i)

********** MI Scheduling **********
main:%bb.7 for.end
  From: %105:fpr64 = LDRDui %78:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @maxtime :: (dereferenceable load 8 from @maxtime)
    To: Bcc 1, %bb.9, implicit killed $nzcv
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %105:fpr64 = LDRDui %78:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @maxtime :: (dereferenceable load 8 from @maxtime)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%105
    SU(1): Data Latency=4 Reg=%105
  Single Issue       : false;
SU(1):   STRDui %105:fpr64, %stack.7.tmax, 0 :: (store 8 into %ir.tmax)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%105
  Single Issue       : false;
SU(2):   FCMPDri %105:fpr64, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%105
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.9, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %105:fpr64, %stack.7.tmax, 0 :: (store 8 into %ir.tmax)
  Ready @0c
  BotQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) FCMPDri %105:fpr64, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %105:fpr64 = LDRDui %78:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @maxtime :: (dereferenceable load 8 from @maxtime)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %105:fpr64 = LDRDui %78:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @maxtime :: (dereferenceable load 8 from @maxtime)
SU(2):   FCMPDri %105:fpr64, implicit-def $nzcv
SU(1):   STRDui %105:fpr64, %stack.7.tmax, 0 :: (store 8 into %ir.tmax)

********** MI Scheduling **********
main:%bb.8 if.then38
  From: %106:gpr64 = MOVi64imm 4607182418800017408
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %106:gpr64 = MOVi64imm 4607182418800017408
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%106
  Single Issue       : false;
SU(1):   STRXui %106:gpr64, %stack.7.tmax, 0 :: (store 8 into %ir.tmax)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%106
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRXui %106:gpr64, %stack.7.tmax, 0 :: (store 8 into %ir.tmax)
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %106:gpr64 = MOVi64imm 4607182418800017408
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   %106:gpr64 = MOVi64imm 4607182418800017408
SU(1):   STRXui %106:gpr64, %stack.7.tmax, 0 :: (store 8 into %ir.tmax)

********** MI Scheduling **********
main:%bb.9 if.end39
  From: %109:gpr32 = MOVi32imm 1
    To: End RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %109:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%109
  Single Issue       : false;
SU(1):   STRWui %109:gpr32, %stack.9.i, 0 :: (store 4 into %ir.i)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%109
  Single Issue       : false;
SU(2):   %115:gpr64sp = ADDXri %stack.10.t_names, 0, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %117:gpr64sp = ADDXri %stack.8.trecs, 0, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   %119:gpr64 = MOVi64imm 4636737291354636288
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   %124:gpr64 = MOVaddr target-flags(aarch64-page) @.str.25, target-flags(aarch64-pageoff, aarch64-nc) @.str.25
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(6):   %138:gpr64 = MOVaddr target-flags(aarch64-page) @.str.26, target-flags(aarch64-pageoff, aarch64-nc) @.str.26
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(7):   %139:gpr64 = MOVaddr target-flags(aarch64-page) @.str.27, target-flags(aarch64-pageoff, aarch64-nc) @.str.27
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(8):   %149:gpr64 = MOVaddr target-flags(aarch64-page) @.str.28, target-flags(aarch64-pageoff, aarch64-nc) @.str.28
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 7 6 5 4 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 7 8 
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %149:gpr64 = MOVaddr target-flags(aarch64-page) @.str.28, target-flags(aarch64-pageoff, aarch64-nc) @.str.28
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 7 6 5 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 7 
BotQ.A RemLatency SU(1) 1c
  BotQ.A RemainingLatency 1 + 1c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) STRWui %109:gpr32, %stack.9.i, 0 :: (store 4 into %ir.i)
  Ready @1c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 7 6 5 4 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 7 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %139:gpr64 = MOVaddr target-flags(aarch64-page) @.str.27, target-flags(aarch64-pageoff, aarch64-nc) @.str.27
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 6 5 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %138:gpr64 = MOVaddr target-flags(aarch64-page) @.str.26, target-flags(aarch64-pageoff, aarch64-nc) @.str.26
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 3 5 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 
  BotQ.A RemainingLatency 0 + 4c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %124:gpr64 = MOVaddr target-flags(aarch64-page) @.str.25, target-flags(aarch64-pageoff, aarch64-nc) @.str.25
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 3 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 
  BotQ.A RemainingLatency 0 + 5c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %119:gpr64 = MOVi64imm 4636737291354636288
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 3 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 
  BotQ.A RemainingLatency 0 + 6c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %117:gpr64sp = ADDXri %stack.8.trecs, 0, 0
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  BotQ.A RemainingLatency 0 + 7c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %115:gpr64sp = ADDXri %stack.10.t_names, 0, 0
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %109:gpr32 = MOVi32imm 1
  Ready @8c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   %109:gpr32 = MOVi32imm 1
SU(2):   %115:gpr64sp = ADDXri %stack.10.t_names, 0, 0
SU(3):   %117:gpr64sp = ADDXri %stack.8.trecs, 0, 0
SU(4):   %119:gpr64 = MOVi64imm 4636737291354636288
SU(5):   %124:gpr64 = MOVaddr target-flags(aarch64-page) @.str.25, target-flags(aarch64-pageoff, aarch64-nc) @.str.25
SU(6):   %138:gpr64 = MOVaddr target-flags(aarch64-page) @.str.26, target-flags(aarch64-pageoff, aarch64-nc) @.str.26
SU(7):   %139:gpr64 = MOVaddr target-flags(aarch64-page) @.str.27, target-flags(aarch64-pageoff, aarch64-nc) @.str.27
SU(1):   STRWui %109:gpr32, %stack.9.i, 0 :: (store 4 into %ir.i)
SU(8):   %149:gpr64 = MOVaddr target-flags(aarch64-page) @.str.28, target-flags(aarch64-pageoff, aarch64-nc) @.str.28

********** MI Scheduling **********
main:%bb.9 if.end39
  From: %107:gpr64 = MOVaddr target-flags(aarch64-page) @.str.24, target-flags(aarch64-pageoff, aarch64-nc) @.str.24
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %107:gpr64 = MOVaddr target-flags(aarch64-page) @.str.24, target-flags(aarch64-pageoff, aarch64-nc) @.str.24
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%107
  Single Issue       : false;
SU(1):   $x0 = COPY %107:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%107
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %107:gpr64
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %107:gpr64 = MOVaddr target-flags(aarch64-page) @.str.24, target-flags(aarch64-pageoff, aarch64-nc) @.str.24
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   %107:gpr64 = MOVaddr target-flags(aarch64-page) @.str.24, target-flags(aarch64-pageoff, aarch64-nc) @.str.24
SU(1):   $x0 = COPY %107:gpr64

********** MI Scheduling **********
main:%bb.10 for.cond41
  From: %110:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.14, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %110:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%110
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %110:gpr32common, 11, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%110
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.14, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %110:gpr32common, 11, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %110:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   %110:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %110:gpr32common, 11, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.11 for.body44
  From: %126:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 1, %bb.13, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %126:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%126
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %126:gpr32common, 5, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%126
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.13, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %126:gpr32common, 5, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %126:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   %126:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %126:gpr32common, 5, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.11 for.body44
  From: $x0 = COPY %124:gpr64
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %124:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $x1 = COPY %116:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %118:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $d1 = COPY %123:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $d1 = COPY %123:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(2) $d0 = COPY %118:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(1) $x1 = COPY %116:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %124:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   $x0 = COPY %124:gpr64
SU(1):   $x1 = COPY %116:gpr64
SU(2):   $d0 = COPY %118:fpr64
SU(3):   $d1 = COPY %123:fpr64

********** MI Scheduling **********
main:%bb.11 for.body44
  From: %113:gpr64 = LDRSWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %113:gpr64 = LDRSWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(1): Data Latency=4 Reg=%113
  Single Issue       : false;
SU(1):   %114:gpr64 = UBFMXri %113:gpr64, 61, 60
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(0): Data Latency=4 Reg=%113
  Successors:
    SU(3): Data Latency=1 Reg=%114
    SU(2): Data Latency=1 Reg=%114
  Single Issue       : false;
SU(2):   %116:gpr64 = LDRXroX %115:gpr64sp, %114:gpr64, 0, 0 :: (load 8 from %ir.arrayidx46)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(1): Data Latency=1 Reg=%114
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %118:fpr64 = LDRDroX %117:gpr64sp, %114:gpr64, 0, 0 :: (load 8 from %ir.arrayidx50)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(1): Data Latency=1 Reg=%114
  Successors:
    SU(5): Data Latency=4 Reg=%118
  Single Issue       : false;
SU(4):   %120:fpr64 = COPY %119:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=0 Reg=%120
  Single Issue       : false;
SU(5):   %121:fpr64 = FMULDrr %118:fpr64, %120:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%118
    SU(4): Data Latency=0 Reg=%120
  Successors:
    SU(7): Data Latency=1 Reg=%121
  Single Issue       : false;
SU(6):   %122:fpr64 = LDRDui %stack.7.tmax, 0 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(7): Data Latency=4 Reg=%122
  Single Issue       : false;
SU(7):   %123:fpr64 = FDIVDrr %121:fpr64, %122:fpr64
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%121
    SU(6): Data Latency=4 Reg=%122
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) %123:fpr64 = FDIVDrr %121:fpr64, %122:fpr64
  Ready @0c
  BotQ.A TopLatency SU(7) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 6 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %121:fpr64 = FMULDrr %118:fpr64, %120:fpr64
  Ready @1c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 6 3 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %120:fpr64 = COPY %119:gpr64
  Ready @2c
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 3 6 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %116:gpr64 = LDRXroX %115:gpr64sp, %114:gpr64, 0, 0 :: (load 8 from %ir.arrayidx46)
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %122:fpr64 = LDRDui %stack.7.tmax, 0 :: (dereferenceable load 8 from %ir.tmax)
  Ready @4c
  BotQ.A BotLatency SU(6) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %118:fpr64 = LDRDroX %117:gpr64sp, %114:gpr64, 0, 0 :: (load 8 from %ir.arrayidx50)
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %114:gpr64 = UBFMXri %113:gpr64, 61, 60
  Ready @6c
  BotQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %113:gpr64 = LDRSWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @10c
  BotQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 7
  Executed: 11c
  Critical: 7c, 7 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   %113:gpr64 = LDRSWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   %114:gpr64 = UBFMXri %113:gpr64, 61, 60
SU(3):   %118:fpr64 = LDRDroX %117:gpr64sp, %114:gpr64, 0, 0 :: (load 8 from %ir.arrayidx50)
SU(6):   %122:fpr64 = LDRDui %stack.7.tmax, 0 :: (dereferenceable load 8 from %ir.tmax)
SU(2):   %116:gpr64 = LDRXroX %115:gpr64sp, %114:gpr64, 0, 0 :: (load 8 from %ir.arrayidx46)
SU(4):   %120:fpr64 = COPY %119:gpr64
SU(5):   %121:fpr64 = FMULDrr %118:fpr64, %120:fpr64
SU(7):   %123:fpr64 = FDIVDrr %121:fpr64, %122:fpr64

********** MI Scheduling **********
main:%bb.12 if.then56
  From: $x0 = COPY %138:gpr64
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %138:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $x1 = COPY %149:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %145:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $d1 = COPY %148:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $d1 = COPY %148:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(2) $d0 = COPY %145:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(1) $x1 = COPY %149:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %138:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   $x0 = COPY %138:gpr64
SU(1):   $x1 = COPY %149:gpr64
SU(2):   $d0 = COPY %145:fpr64
SU(3):   $d1 = COPY %148:fpr64

********** MI Scheduling **********
main:%bb.12 if.then56
  From: %141:gpr64 = LDRSWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %141:gpr64 = LDRSWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(1): Data Latency=4 Reg=%141
  Single Issue       : false;
SU(1):   %143:fpr64 = LDRDroX %117:gpr64sp, %141:gpr64, 0, 1 :: (load 8 from %ir.arrayidx66)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(0): Data Latency=4 Reg=%141
  Successors:
    SU(3): Data Latency=4 Reg=%143
  Single Issue       : false;
SU(2):   %144:fpr64 = LDRDui %stack.6.t, 0 :: (dereferenceable load 8 from %ir.t)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(3): Data Latency=4 Reg=%144
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   %145:fpr64 = FSUBDrr %143:fpr64, %144:fpr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 2
  Predecessors:
    SU(1): Data Latency=4 Reg=%143
    SU(2): Data Latency=4 Reg=%144
  Successors:
    SU(5): Data Latency=1 Reg=%145
    SU(4): Data Latency=1 Reg=%145
  Single Issue       : false;
SU(4):   STRDui %145:fpr64, %stack.6.t, 0 :: (store 8 into %ir.t)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%145
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(5):   %146:fpr64 = FMULDrr %145:fpr64, %134:fpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(3): Data Latency=1 Reg=%145
  Successors:
    SU(7): Data Latency=1 Reg=%146
  Single Issue       : false;
SU(6):   %147:fpr64 = LDRDui %stack.7.tmax, 0 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(7): Data Latency=4 Reg=%147
  Single Issue       : false;
SU(7):   %148:fpr64 = FDIVDrr %146:fpr64, %147:fpr64
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%146
    SU(6): Data Latency=4 Reg=%147
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 6 
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %148:fpr64 = FDIVDrr %146:fpr64, %147:fpr64
  Ready @0c
  BotQ.A TopLatency SU(7) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 4 5 
Queue TopQ.P: 
Queue TopQ.A: 0 2 6 
BotQ.A RemLatency SU(4) 9c
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %146:fpr64 = FMULDrr %145:fpr64, %134:fpr64
  Ready @1c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) STRDui %145:fpr64, %stack.6.t, 0 :: (store 8 into %ir.t)
  Ready @2c
  BotQ.A TopLatency SU(4) 9c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %145:fpr64 = FSUBDrr %143:fpr64, %144:fpr64
  Ready @3c
  BotQ.A BotLatency SU(3) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 1 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %147:fpr64 = LDRDui %stack.7.tmax, 0 :: (dereferenceable load 8 from %ir.tmax)
  Ready @4c
  BotQ.A BotLatency SU(6) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
BotQ.A RemLatency SU(1) 4c
  BotQ.A RemainingLatency 4 + 7c > CritPath 10
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(1) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) %143:fpr64 = LDRDroX %117:gpr64sp, %141:gpr64, 0, 1 :: (load 8 from %ir.arrayidx66)
  Ready @7c
  BotQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %144:fpr64 = LDRDui %stack.6.t, 0 :: (dereferenceable load 8 from %ir.t)
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %141:gpr64 = LDRSWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @11c
  BotQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 8
  Executed: 12c
  Critical: 8c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   %141:gpr64 = LDRSWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(2):   %144:fpr64 = LDRDui %stack.6.t, 0 :: (dereferenceable load 8 from %ir.t)
SU(1):   %143:fpr64 = LDRDroX %117:gpr64sp, %141:gpr64, 0, 1 :: (load 8 from %ir.arrayidx66)
SU(6):   %147:fpr64 = LDRDui %stack.7.tmax, 0 :: (dereferenceable load 8 from %ir.tmax)
SU(3):   %145:fpr64 = FSUBDrr %143:fpr64, %144:fpr64
SU(4):   STRDui %145:fpr64, %stack.6.t, 0 :: (store 8 into %ir.t)
SU(5):   %146:fpr64 = FMULDrr %145:fpr64, %134:fpr64
SU(7):   %148:fpr64 = FDIVDrr %146:fpr64, %147:fpr64

********** MI Scheduling **********
main:%bb.12 if.then56
  From: $x0 = COPY %138:gpr64
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %138:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $x1 = COPY %139:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %132:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $d1 = COPY %137:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $d1 = COPY %137:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(2) $d0 = COPY %132:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(1) $x1 = COPY %139:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %138:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   $x0 = COPY %138:gpr64
SU(1):   $x1 = COPY %139:gpr64
SU(2):   $d0 = COPY %132:fpr64
SU(3):   $d1 = COPY %137:fpr64

********** MI Scheduling **********
main:%bb.12 if.then56
  From: %128:fpr64 = LDRDui %stack.8.trecs, 2 :: (dereferenceable load 8 from %ir.arrayidx57, align 16)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 10
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Cluster ld/st SU(3) - SU(1)
  Copy Succ SU(4)
SU(0):   %128:fpr64 = LDRDui %stack.8.trecs, 2 :: (dereferenceable load 8 from %ir.arrayidx57, align 16)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(2): Data Latency=4 Reg=%128
  Single Issue       : false;
SU(1):   %129:fpr64 = LDRDui %stack.8.trecs, 3 :: (dereferenceable load 8 from %ir.arrayidx58)
  # preds left       : 0
  # succs left       : 2
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Predecessors:
    SU(3): Ord  Latency=0 Cluster
  Successors:
    SU(2): Data Latency=4 Reg=%129
    SU(4): Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   %130:fpr64 = FADDDrr %128:fpr64, %129:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=%129
    SU(0): Data Latency=4 Reg=%128
  Successors:
    SU(4): Data Latency=1 Reg=%130
  Single Issue       : false;
SU(3):   %131:fpr64 = LDRDui %stack.8.trecs, 4 :: (dereferenceable load 8 from %ir.arrayidx60, align 16)
  # preds left       : 0
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(4): Data Latency=4 Reg=%131
    SU(1): Ord  Latency=0 Cluster
  Single Issue       : false;
SU(4):   %132:fpr64 = FADDDrr %130:fpr64, %131:fpr64
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(2): Data Latency=1 Reg=%130
    SU(3): Data Latency=4 Reg=%131
    SU(1): Ord  Latency=0 Artificial
  Successors:
    SU(7): Data Latency=1 Reg=%132
    SU(5): Data Latency=1 Reg=%132
  Single Issue       : false;
SU(5):   STRDui %132:fpr64, %stack.6.t, 0 :: (store 8 into %ir.t)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%132
  Single Issue       : false;
SU(6):   %134:fpr64 = COPY %119:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=0 Reg=%134
  Single Issue       : false;
SU(7):   %135:fpr64 = FMULDrr %132:fpr64, %134:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%132
    SU(6): Data Latency=0 Reg=%134
  Successors:
    SU(9): Data Latency=1 Reg=%135
  Single Issue       : false;
SU(8):   %136:fpr64 = LDRDui %stack.7.tmax, 0 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(9): Data Latency=4 Reg=%136
  Single Issue       : false;
SU(9):   %137:fpr64 = FDIVDrr %135:fpr64, %136:fpr64
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=%135
    SU(8): Data Latency=4 Reg=%136
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 8 
Picking from Bot:
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %137:fpr64 = FDIVDrr %135:fpr64, %136:fpr64
  Ready @0c
  BotQ.A TopLatency SU(9) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 8 
Queue BotQ.A: 5 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 8 
BotQ.A RemLatency SU(5) 6c
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %135:fpr64 = FMULDrr %132:fpr64, %134:fpr64
  Ready @1c
  BotQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 8 
Queue BotQ.A: 5 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 8 
BotQ.A RemLatency SU(5) 6c
  BotQ.A RemainingLatency 6 + 2c > CritPath 7
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) STRDui %132:fpr64, %stack.6.t, 0 :: (store 8 into %ir.t)
  Ready @2c
  BotQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 8 
Queue BotQ.A: 6 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 8 
BotQ.A RemLatency SU(4) 5c
  BotQ.A RemainingLatency 5 + 3c > CritPath 7
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(4) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) %132:fpr64 = FADDDrr %130:fpr64, %131:fpr64
  Ready @3c
  BotQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 6 2 8 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 8 
BotQ.A RemLatency SU(2) 4c
  BotQ.A RemainingLatency 4 + 4c > CritPath 7
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(2) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) %130:fpr64 = FADDDrr %128:fpr64, %129:fpr64
  Ready @4c
  BotQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 1 0 
Queue BotQ.A: 6 8 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 8 
  BotQ.A RemainingLatency 3 + 5c > CritPath 7
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %136:fpr64 = LDRDui %stack.7.tmax, 0 :: (dereferenceable load 8 from %ir.tmax)
  Ready @5c
  BotQ.A BotLatency SU(8) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 1 0 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %134:fpr64 = COPY %119:gpr64
  Ready @6c
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 0 1 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %131:fpr64 = LDRDui %stack.8.trecs, 4 :: (dereferenceable load 8 from %ir.arrayidx60, align 16)
  Ready @7c
  BotQ.A BotLatency SU(3) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 8c > CritPath 7
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %129:fpr64 = LDRDui %stack.8.trecs, 3 :: (dereferenceable load 8 from %ir.arrayidx58)
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 8
  Executed: 9c
  Critical: 8c, 8 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %128:fpr64 = LDRDui %stack.8.trecs, 2 :: (dereferenceable load 8 from %ir.arrayidx57, align 16)
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 9
  Executed: 10c
  Critical: 9c, 9 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   %128:fpr64 = LDRDui %stack.8.trecs, 2 :: (dereferenceable load 8 from %ir.arrayidx57, align 16)
SU(1):   %129:fpr64 = LDRDui %stack.8.trecs, 3 :: (dereferenceable load 8 from %ir.arrayidx58)
SU(3):   %131:fpr64 = LDRDui %stack.8.trecs, 4 :: (dereferenceable load 8 from %ir.arrayidx60, align 16)
SU(6):   %134:fpr64 = COPY %119:gpr64
SU(8):   %136:fpr64 = LDRDui %stack.7.tmax, 0 :: (dereferenceable load 8 from %ir.tmax)
SU(2):   %130:fpr64 = FADDDrr %128:fpr64, %129:fpr64
SU(4):   %132:fpr64 = FADDDrr %130:fpr64, %131:fpr64
SU(5):   STRDui %132:fpr64, %stack.6.t, 0 :: (store 8 into %ir.t)
SU(7):   %135:fpr64 = FMULDrr %132:fpr64, %134:fpr64
SU(9):   %137:fpr64 = FDIVDrr %135:fpr64, %136:fpr64

********** MI Scheduling **********
main:%bb.13 for.inc72
  From: %151:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: B %bb.10
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %151:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%151
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %152:gpr32common = nsw ADDWri %151:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%151
  Successors:
    SU(2): Data Latency=1 Reg=%152
  Single Issue       : false;
SU(2):   STRWui %152:gpr32common, %stack.9.i, 0 :: (store 4 into %ir.i)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%152
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.10
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %152:gpr32common, %stack.9.i, 0 :: (store 4 into %ir.i)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %152:gpr32common = nsw ADDWri %151:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %151:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   %151:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   %152:gpr32common = nsw ADDWri %151:gpr32common, 1, 0
SU(2):   STRWui %152:gpr32common, %stack.9.i, 0 :: (store 4 into %ir.i)

********** INTERVALS **********
WSP [112r,112d:65)[192r,192d:64)[208r,208d:63)[752r,752d:62)[768r,768d:61)[776r,776d:60)[864r,864d:59)[880r,880d:58)[896r,896d:57)[912r,912d:56)[928r,928d:55)[944r,944d:54)[960r,960d:53)[976r,976d:52)[992r,992d:51)[1008r,1008d:50)[1024r,1024d:49)[1040r,1040d:48)[1056r,1056d:47)[1072r,1072d:46)[1088r,1088d:45)[1104r,1104d:44)[1120r,1120d:43)[1136r,1136d:42)[1152r,1152d:41)[1200r,1200d:40)[1216r,1216d:39)[1232r,1232d:38)[1248r,1248d:37)[1264r,1264d:36)[1280r,1280d:35)[1296r,1296d:34)[1312r,1312d:33)[1360r,1360d:32)[1392r,1392d:31)[1408r,1408d:30)[1424r,1424d:29)[1440r,1440d:28)[1456r,1456d:27)[1472r,1472d:26)[1488r,1488d:25)[1504r,1504d:24)[1552r,1552d:23)[1728r,1728d:22)[1736r,1736d:21)[2232r,2232d:20)[2264r,2264d:19)[2272r,2272d:18)[2752r,2752d:17)[3232r,3232d:16)[3240r,3240d:15)[3456r,3456d:2)[3488r,3488d:1)[3504r,3504d:0)[3792r,3792d:14)[3840r,3840d:13)[3856r,3856d:12)[4248r,4248d:11)[4320r,4320d:10)[4336r,4336d:9)[4600r,4600d:8)[4672r,4672d:7)[4688r,4688d:6)[4840r,4840d:5)[4912r,4912d:4)[4928r,4928d:3)  0@3504r 1@3488r 2@3456r 3@4928r 4@4912r 5@4840r 6@4688r 7@4672r 8@4600r 9@4336r 10@4320r 11@4248r 12@3856r 13@3840r 14@3792r 15@3240r 16@3232r 17@2752r 18@2272r 19@2264r 20@2232r 21@1736r 22@1728r 23@1552r 24@1504r 25@1488r 26@1472r 27@1456r 28@1440r 29@1424r 30@1408r 31@1392r 32@1360r 33@1312r 34@1296r 35@1280r 36@1264r 37@1248r 38@1232r 39@1216r 40@1200r 41@1152r 42@1136r 43@1120r 44@1104r 45@1088r 46@1072r 47@1056r 48@1040r 49@1024r 50@1008r 51@992r 52@976r 53@960r 54@944r 55@928r 56@912r 57@896r 58@880r 59@864r 60@776r 61@768r 62@752r 63@208r 64@192r 65@112r
B0 [1720r,1728r:7)[2248r,2264r:6)[2264r,2280r:5)[3152r,3232r:4)[3488r,3520r:0)[4288r,4320r:3)[4640r,4672r:2)[4880r,4912r:1)  0@3488r 1@4880r 2@4640r 3@4288r 4@3152r 5@2264r 6@2248r 7@1720r
W0 [0B,32r:0)[160r,192r:18)[192r,224r:17)[760r,768r:16)[768r,768d:9)[1184r,1200r:8)[1376r,1392r:7)[1704r,1728r:15)[3172r,3232r:14)[3472r,3488r:1)[3824r,3840r:13)[3840r,3840d:6)[4256r,4320r:12)[4320r,4320d:4)[4608r,4672r:11)[4672r,4672d:3)[4848r,4912r:10)[4912r,4912d:2)[5056r,5072r:5)  0@0B-phi 1@3472r 2@4912r 3@4672r 4@4320r 5@5056r 6@3840r 7@1376r 8@1184r 9@768r 10@4848r 11@4608r 12@4256r 13@3824r 14@3172r 15@1704r 16@760r 17@192r 18@160r
W1 [0B,16r:0)[176r,192r:6)[1712r,1728r:5)[3176r,3232r:1)[4272r,4320r:4)[4624r,4672r:3)[4864r,4912r:2)  0@0B-phi 1@3176r 2@4864r 3@4624r 4@4272r 5@1712r 6@176r
W2 [1680r,1728r:1)[3184r,3232r:0)  0@3184r 1@1680r
W3 [1696r,1728r:1)[3192r,3232r:0)  0@3192r 1@1696r
W4 [3200r,3232r:0)  0@3200r
W5 [3208r,3232r:0)  0@3208r
%0 [32r,80r:0)  0@32r weight:0.000000e+00
%1 [16r,96r:0)  0@16r weight:0.000000e+00
%3 [128r,160r:0)  0@128r weight:0.000000e+00
%4 [144r,176r:0)  0@144r weight:0.000000e+00
%5 [224r,272r:0)  0@224r weight:0.000000e+00
%9 [320r,520r:0)  0@320r weight:0.000000e+00
%10 [352r,552r:0)  0@352r weight:0.000000e+00
%11 [384r,584r:0)  0@384r weight:0.000000e+00
%12 [416r,580r:0)  0@416r weight:0.000000e+00
%13 [448r,616r:0)  0@448r weight:0.000000e+00
%14 [480r,612r:0)  0@480r weight:0.000000e+00
%15 [512r,648r:0)  0@512r weight:0.000000e+00
%16 [544r,644r:0)  0@544r weight:0.000000e+00
%17 [576r,720r:0)  0@576r weight:0.000000e+00
%18 [608r,712r:0)  0@608r weight:0.000000e+00
%19 [640r,744r:0)  0@640r weight:0.000000e+00
%20 [728r,736r:0)  0@728r weight:0.000000e+00
%21 [704r,760r:0)  0@704r weight:0.000000e+00
%23 [1192r,3312r:0)  0@1192r weight:0.000000e+00
%24 [1328r,2672r:0)  0@1328r weight:0.000000e+00
%25 [1344r,1376r:0)  0@1344r weight:0.000000e+00
%26 [1520r,1536r:0)  0@1520r weight:0.000000e+00
%27 [1536r,1720r:0)  0@1536r weight:0.000000e+00
%28 [1568r,1704r:0)  0@1568r weight:0.000000e+00
%29 [1584r,1712r:0)  0@1584r weight:0.000000e+00
%33 [1744r,2136r:0)  0@1744r weight:0.000000e+00
%35 [2136r,2144r:0)  0@2136r weight:0.000000e+00
%37 [2144r,2720r:0)  0@2144r weight:0.000000e+00
%38 [1824r,2320r:0)  0@1824r weight:0.000000e+00
%39 [2104r,2192r:0)  0@2104r weight:0.000000e+00
%40 [2152r,2160r:0)  0@2152r weight:0.000000e+00
%41 [1872r,2112r:0)  0@1872r weight:0.000000e+00
%42 [2112r,2160r:0)  0@2112r weight:0.000000e+00
%43 [2160r,2176r:0)  0@2160r weight:0.000000e+00
%44 [1920r,2328r:0)  0@1920r weight:0.000000e+00
%45 [2120r,2192r:0)  0@2120r weight:0.000000e+00
%46 [2168r,2176r:0)  0@2168r weight:0.000000e+00
%47 [2176r,2208r:0)  0@2176r weight:0.000000e+00
%48 [1984r,2352r:0)  0@1984r weight:0.000000e+00
%49 [2128r,2200r:0)  0@2128r weight:0.000000e+00
%50 [2184r,2208r:0)  0@2184r weight:0.000000e+00
%51 [2208r,2576r:0)  0@2208r weight:0.000000e+00
%52 [2192r,2200r:0)  0@2192r weight:0.000000e+00
%53 [2200r,2216r:0)  0@2200r weight:0.000000e+00
%54 [2216r,2224r:0)  0@2216r weight:0.000000e+00
%55 [2096r,2676r:0)  0@2096r weight:0.000000e+00
%56 [2224r,2248r:0)  0@2224r weight:0.000000e+00
%57 [2240r,2256r:0)  0@2240r weight:0.000000e+00
%58 [2280r,2548r:0)  0@2280r weight:0.000000e+00
%59 [2288r,2360r:0)  0@2288r weight:0.000000e+00
%60 [2360r,2548r:0)  0@2360r weight:0.000000e+00
%61 [2548r,2576r:0)  0@2548r weight:0.000000e+00
%62 [2576r,2688r:0)  0@2576r weight:0.000000e+00
%63 [2320r,3184r:0)  0@2320r weight:0.000000e+00
%64 [2328r,3192r:0)  0@2328r weight:0.000000e+00
%65 [2560r,2568r:0)  0@2560r weight:0.000000e+00
%66 [2352r,3200r:0)  0@2352r weight:0.000000e+00
%67 [2568r,2584r:0)  0@2568r weight:0.000000e+00
%68 [2584r,2608r:0)  0@2584r weight:0.000000e+00
%69 [2400r,2552r:0)  0@2400r weight:0.000000e+00
%70 [2552r,2608r:0)  0@2552r weight:0.000000e+00
%71 [2608r,2676r:0)  0@2608r weight:0.000000e+00
%72 [2676r,2688r:0)  0@2676r weight:0.000000e+00
%73 [2688r,2712r:0)  0@2688r weight:0.000000e+00
%74 [2480r,2616r:0)  0@2480r weight:0.000000e+00
%75 [2616r,2712r:0)  0@2616r weight:0.000000e+00
%76 [2712r,2720r:0)  0@2712r weight:0.000000e+00
%77 [2720r,2736r:0)  0@2720r weight:0.000000e+00
%78 [2544r,3648r:0)  0@2544r weight:0.000000e+00
%79 [2680r,3152r:0)  0@2680r weight:0.000000e+00
%80 [2600r,2696r:0)  0@2600r weight:0.000000e+00
%81 [2696r,2728r:0)  0@2696r weight:0.000000e+00
%82 [2728r,2736r:0)  0@2728r weight:0.000000e+00
%83 [2736r,3168r:0)  0@2736r weight:0.000000e+00
%84 [2656r,3176r:0)  0@2656r weight:0.000000e+00
%85 [2672r,3208r:0)  0@2672r weight:0.000000e+00
%86 [2704r,3224r:0)  0@2704r weight:0.000000e+00
%87 [2760r,2936r:0)  0@2760r weight:0.000000e+00
%89 [2784r,2968r:0)  0@2784r weight:0.000000e+00
%90 [2800r,2964r:0)  0@2800r weight:0.000000e+00
%91 [2832r,3000r:0)  0@2832r weight:0.000000e+00
%92 [2864r,2996r:0)  0@2864r weight:0.000000e+00
%93 [2896r,3032r:0)  0@2896r weight:0.000000e+00
%94 [2928r,3028r:0)  0@2928r weight:0.000000e+00
%95 [2960r,3048r:0)  0@2960r weight:0.000000e+00
%96 [2992r,3044r:0)  0@2992r weight:0.000000e+00
%97 [3024r,3172r:0)  0@3024r weight:0.000000e+00
%98 [3040r,3216r:0)  0@3040r weight:0.000000e+00
%100 [3248r,3264r:0)  0@3248r weight:0.000000e+00
%102 [3360r,3376r:0)  0@3360r weight:0.000000e+00
%105 [3648r,3688r:0)  0@3648r weight:0.000000e+00
%106 [3744r,3760r:0)  0@3744r weight:0.000000e+00
%107 [3808r,3824r:0)  0@3808r weight:0.000000e+00
%109 [3872r,3992r:0)  0@3872r weight:0.000000e+00
%110 [4032r,4048r:0)  0@4032r weight:0.000000e+00
%113 [4112r,4128r:0)  0@4112r weight:0.000000e+00
%114 [4128r,4216r:0)  0@4128r weight:0.000000e+00
%115 [3904r,5024B:0)  0@3904r weight:0.000000e+00
%116 [4216r,4272r:0)  0@4216r weight:0.000000e+00
%117 [3920r,5024B:0)  0@3920r weight:0.000000e+00
%118 [4160r,4288r:0)  0@4160r weight:0.000000e+00
%119 [3936r,5024B:0)  0@3936r weight:0.000000e+00
%120 [4224r,4232r:0)  0@4224r weight:0.000000e+00
%121 [4232r,4240r:0)  0@4232r weight:0.000000e+00
%122 [4208r,4240r:0)  0@4208r weight:0.000000e+00
%123 [4240r,4304r:0)  0@4240r weight:0.000000e+00
%124 [3952r,5024B:0)  0@3952r weight:0.000000e+00
%126 [4352r,4368r:0)  0@4352r weight:0.000000e+00
%128 [4432r,4564r:0)  0@4432r weight:0.000000e+00
%129 [4448r,4564r:0)  0@4448r weight:0.000000e+00
%130 [4564r,4568r:0)  0@4564r weight:0.000000e+00
%131 [4480r,4568r:0)  0@4480r weight:0.000000e+00
%132 [4568r,4640r:0)  0@4568r weight:0.000000e+00
%134 [4528r,4824r:0)  0@4528r weight:0.000000e+00
%135 [4584r,4592r:0)  0@4584r weight:0.000000e+00
%136 [4560r,4592r:0)  0@4560r weight:0.000000e+00
%137 [4592r,4656r:0)  0@4592r weight:0.000000e+00
%138 [3968r,5024B:0)  0@3968r weight:0.000000e+00
%139 [3984r,5024B:0)  0@3984r weight:0.000000e+00
%141 [4704r,4744r:0)  0@4704r weight:0.000000e+00
%143 [4744r,4808r:0)  0@4744r weight:0.000000e+00
%144 [4736r,4808r:0)  0@4736r weight:0.000000e+00
%145 [4808r,4880r:0)  0@4808r weight:0.000000e+00
%146 [4824r,4832r:0)  0@4824r weight:0.000000e+00
%147 [4800r,4832r:0)  0@4800r weight:0.000000e+00
%148 [4832r,4896r:0)  0@4832r weight:0.000000e+00
%149 [4000r,5024B:0)  0@4000r weight:0.000000e+00
%151 [4960r,4976r:0)  0@4960r weight:0.000000e+00
%152 [4976r,4992r:0)  0@4976r weight:0.000000e+00
%153 [3440r,3472r:0)  0@3440r weight:0.000000e+00
%154 [3520r,3576r:0)  0@3520r weight:0.000000e+00
%155 [3536r,3576r:0)  0@3536r weight:0.000000e+00
%156 [3328r,3632B:0)  0@3328r weight:0.000000e+00
%157 [3568r,3584r:0)  0@3568r weight:0.000000e+00
%158 [3584r,3600r:0)  0@3584r weight:0.000000e+00
%159 [256r,3248r:0)  0@256r weight:0.000000e+00
RegMasks: 192r 768r 880r 928r 976r 1024r 1072r 1120r 1200r 1248r 1296r 1392r 1440r 1488r 1728r 2264r 3232r 3488r 3840r 4320r 4672r 4912r
********** MACHINEINSTRS **********
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=1, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=8, align=8, at location [SP]
  fi#6: size=8, align=8, at location [SP]
  fi#7: size=8, align=8, at location [SP]
  fi#8: size=96, align=16, at location [SP]
  fi#9: size=4, align=4, at location [SP]
  fi#10: size=96, align=16, at location [SP]
  fi#11: size=8, align=8, at location [SP]
Constant Pool:
  cp#0: 1.984770e+03, align=8
  cp#1: -1.092330e+04, align=8
  cp#2: 2.777090e+04, align=8
Function Live Ins: $w0 in %0, $x1 in %1

0B	bb.0.entry:
	  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
	  liveins: $w0, $x1
16B	  %1:gpr64 = COPY $x1
32B	  %0:gpr32 = COPY $w0
64B	  STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
80B	  STRWui %0:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
96B	  STRXui %1:gpr64, %stack.2.argv.addr, 0 :: (store 8 into %ir.argv.addr)
112B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
128B	  %3:gpr64 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
144B	  %4:gpr64 = MOVaddr target-flags(aarch64-page) @.str.1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1
160B	  $x0 = COPY %3:gpr64
176B	  $x1 = COPY %4:gpr64
192B	  BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0
208B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
224B	  %5:gpr64 = COPY $x0
240B	  STRXui %5:gpr64, %stack.11.fp, 0 :: (store 8 into %ir.fp)
256B	  %159:gpr64common = ADRP target-flags(aarch64-page) @timeron
272B	  CBZX %5:gpr64, %bb.2
288B	  B %bb.1

304B	bb.1.if.then:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

320B	  %9:gpr32 = MOVi32imm 1
352B	  %10:gpr64 = MOVaddr target-flags(aarch64-page) @.str.2, target-flags(aarch64-pageoff, aarch64-nc) @.str.2
384B	  %11:gpr64 = MOVaddr target-flags(aarch64-page) @.str.3, target-flags(aarch64-pageoff, aarch64-nc) @.str.3
416B	  %12:gpr64 = MOVaddr target-flags(aarch64-page) @.str.4, target-flags(aarch64-pageoff, aarch64-nc) @.str.4
448B	  %13:gpr64 = MOVaddr target-flags(aarch64-page) @.str.5, target-flags(aarch64-pageoff, aarch64-nc) @.str.5
480B	  %14:gpr64 = MOVaddr target-flags(aarch64-page) @.str.6, target-flags(aarch64-pageoff, aarch64-nc) @.str.6
512B	  %15:gpr64 = MOVaddr target-flags(aarch64-page) @.str.7, target-flags(aarch64-pageoff, aarch64-nc) @.str.7
520B	  STRWui %9:gpr32, %159:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
544B	  %16:gpr64 = MOVaddr target-flags(aarch64-page) @.str.8, target-flags(aarch64-pageoff, aarch64-nc) @.str.8
552B	  STRXui %10:gpr64, %stack.10.t_names, 1 :: (store 8 into %ir.arrayidx)
576B	  %17:gpr64 = MOVaddr target-flags(aarch64-page) @.str.9, target-flags(aarch64-pageoff, aarch64-nc) @.str.9
580B	  STRXui %12:gpr64, %stack.10.t_names, 3 :: (store 8 into %ir.arrayidx2)
584B	  STRXui %11:gpr64, %stack.10.t_names, 2 :: (store 8 into %ir.arrayidx1, align 16)
608B	  %18:gpr64 = MOVaddr target-flags(aarch64-page) @.str.10, target-flags(aarch64-pageoff, aarch64-nc) @.str.10
612B	  STRXui %14:gpr64, %stack.10.t_names, 5 :: (store 8 into %ir.arrayidx4)
616B	  STRXui %13:gpr64, %stack.10.t_names, 4 :: (store 8 into %ir.arrayidx3, align 16)
640B	  %19:gpr64 = MOVaddr target-flags(aarch64-page) @.str.11, target-flags(aarch64-pageoff, aarch64-nc) @.str.11
644B	  STRXui %16:gpr64, %stack.10.t_names, 7 :: (store 8 into %ir.arrayidx6)
648B	  STRXui %15:gpr64, %stack.10.t_names, 6 :: (store 8 into %ir.arrayidx5, align 16)
704B	  %21:gpr64 = LDRXui %stack.11.fp, 0 :: (dereferenceable load 8 from %ir.fp)
712B	  STRXui %18:gpr64, %stack.10.t_names, 9 :: (store 8 into %ir.arrayidx8)
720B	  STRXui %17:gpr64, %stack.10.t_names, 8 :: (store 8 into %ir.arrayidx7, align 16)
728B	  %20:gpr64 = MOVaddr target-flags(aarch64-page) @.str.12, target-flags(aarch64-pageoff, aarch64-nc) @.str.12
736B	  STRXui %20:gpr64, %stack.10.t_names, 11 :: (store 8 into %ir.arrayidx10)
744B	  STRXui %19:gpr64, %stack.10.t_names, 10 :: (store 8 into %ir.arrayidx9, align 16)
752B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
760B	  $x0 = COPY %21:gpr64
768B	  BL @fclose, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
776B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
784B	  B %bb.3

800B	bb.2.if.else:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

832B	  STRWui $wzr, %159:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)

848B	bb.3.if.end:
	; predecessors: %bb.2, %bb.1
	  successors: %bb.4(0x50000000), %bb.14(0x30000000); %bb.4(62.50%), %bb.14(37.50%)

864B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
880B	  BL @read_input, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
896B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
912B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
928B	  BL @domain, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
944B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
960B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
976B	  BL @setcoeff, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
992B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
1008B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
1024B	  BL @setbv, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
1040B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
1056B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
1072B	  BL @setiv, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
1088B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
1104B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
1120B	  BL @erhs, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
1136B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
1152B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
1184B	  $w0 = MOVi32imm 1
1192B	  %23:gpr32 = MOVi32imm 1
1200B	  BL @ssor, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
1216B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
1232B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
1248B	  BL @setbv, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
1264B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
1280B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
1296B	  BL @setiv, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
1312B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
1328B	  %24:gpr64common = ADRP target-flags(aarch64-page) @itmax
1344B	  %25:gpr32 = LDRWui %24:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)
1360B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
1376B	  $w0 = COPY %25:gpr32
1392B	  BL @ssor, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
1408B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
1424B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
1440B	  BL @error, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
1456B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
1472B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
1488B	  BL @pintgr, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
1504B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
1520B	  %26:gpr64common = ADRP target-flags(aarch64-page) @frc
1536B	  %27:fpr64 = LDRDui %26:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @frc :: (dereferenceable load 8 from @frc)
1552B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
1568B	  %28:gpr64 = MOVaddr target-flags(aarch64-page) @rsdnm, target-flags(aarch64-pageoff, aarch64-nc) @rsdnm
1584B	  %29:gpr64 = MOVaddr target-flags(aarch64-page) @errnm, target-flags(aarch64-pageoff, aarch64-nc) @errnm
1680B	  $x2 = ADDXri %stack.3.Class, 0, 0
1696B	  $x3 = ADDXri %stack.4.verified, 0, 0
1704B	  $x0 = COPY %28:gpr64
1712B	  $x1 = COPY %29:gpr64
1720B	  $d0 = COPY %27:fpr64
1728B	  BL @verify, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $x2, implicit $x3, implicit-def $sp
1736B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
1744B	  undef %33.ssub:fpr64 = LDRSui %24:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)
1824B	  %38:gpr64common = ADRP target-flags(aarch64-page) @nx0
1872B	  %41:gpr64common = ADRP target-flags(aarch64-page) %const.0
1920B	  %44:gpr64common = ADRP target-flags(aarch64-page) @ny0
1984B	  %48:gpr64common = ADRP target-flags(aarch64-page) @nz0
2096B	  %55:fpr64 = FMOVDi 8
2104B	  %39:gpr32 = LDRWui %38:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nx0 :: (dereferenceable load 4 from @nx0)
2112B	  %42:fpr64 = LDRDui %41:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
2120B	  %45:gpr32 = LDRWui %44:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @ny0 :: (dereferenceable load 4 from @ny0)
2128B	  %49:gpr32 = LDRWui %48:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nz0 :: (dereferenceable load 4 from @nz0)
2136B	  %35:fpr128 = SSHLLv2i32_shift %33:fpr64, 0
2144B	  %37:fpr64 = SCVTFv1i64 %35.dsub:fpr128
2152B	  %40:fpr64 = SCVTFUWDri %39:gpr32
2160B	  %43:fpr64 = FMULDrr %40:fpr64, %42:fpr64
2168B	  %46:fpr64 = SCVTFUWDri %45:gpr32
2176B	  %47:fpr64 = FMULDrr %43:fpr64, %46:fpr64
2184B	  %50:fpr64 = SCVTFUWDri %49:gpr32
2192B	  %52:gpr32 = nsw ADDWrr %39:gpr32, %45:gpr32
2200B	  %53:gpr32 = nsw ADDWrr %52:gpr32, %49:gpr32
2208B	  %51:fpr64 = FMULDrr %47:fpr64, %50:fpr64
2216B	  %54:fpr64 = SCVTFUWDri %53:gpr32
2224B	  %56:fpr64 = FDIVDrr %54:fpr64, %55:fpr64
2232B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
2240B	  %57:fpr64 = FMOVDi 0
2248B	  $d0 = COPY %56:fpr64
2256B	  $d1 = COPY %57:fpr64
2264B	  BL @pow, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def $d0
2272B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
2280B	  %58:fpr64 = COPY $d0
2288B	  %59:gpr64common = ADRP target-flags(aarch64-page) %const.1
2320B	  %63:gpr32 = LDRWui %38:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nx0 :: (dereferenceable load 4 from @nx0)
2328B	  %64:gpr32 = LDRWui %44:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @ny0 :: (dereferenceable load 4 from @ny0)
2352B	  %66:gpr32 = LDRWui %48:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nz0 :: (dereferenceable load 4 from @nz0)
2360B	  %60:fpr64 = LDRDui %59:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
2400B	  %69:gpr64common = ADRP target-flags(aarch64-page) %const.2
2480B	  %74:gpr64 = MOVi64imm -4539183878094454784
2544B	  %78:gpr64common = ADRP target-flags(aarch64-page) @maxtime
2548B	  %61:fpr64 = FMULDrr %58:fpr64, %60:fpr64
2552B	  %70:fpr64 = LDRDui %69:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
2560B	  %65:gpr32 = nsw ADDWrr %63:gpr32, %64:gpr32
2568B	  %67:gpr32 = nsw ADDWrr %65:gpr32, %66:gpr32
2576B	  %62:fpr64 = FADDDrr %51:fpr64, %61:fpr64
2584B	  %68:fpr64 = SCVTFUWDri %67:gpr32
2600B	  %80:gpr64 = MOVi64imm 4696837146684686336
2608B	  %71:fpr64 = FMULDrr %68:fpr64, %70:fpr64
2616B	  %75:fpr64 = COPY %74:gpr64
2656B	  %84:gpr32 = LDRSBWui %stack.3.Class, 0 :: (dereferenceable load 1 from %ir.Class, align 4)
2672B	  %85:gpr32 = LDRWui %24:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)
2676B	  %72:fpr64 = FDIVDrr %71:fpr64, %55:fpr64
2680B	  %79:fpr64 = LDRDui %78:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @maxtime :: (dereferenceable load 8 from @maxtime)
2688B	  %73:fpr64 = FADDDrr %62:fpr64, %72:fpr64
2696B	  %81:fpr64 = COPY %80:gpr64
2704B	  %86:gpr32 = LDRWui %stack.4.verified, 0 :: (dereferenceable load 4 from %ir.verified)
2712B	  %76:fpr64 = FADDDrr %73:fpr64, %75:fpr64
2720B	  %77:fpr64 = FMULDrr %37:fpr64, %76:fpr64
2728B	  %82:fpr64 = FMULDrr %79:fpr64, %81:fpr64
2736B	  %83:fpr64 = FDIVDrr %77:fpr64, %82:fpr64
2744B	  STRDui %83:fpr64, %stack.5.mflops, 0 :: (store 8 into %ir.mflops)
2752B	  ADJCALLSTACKDOWN 72, 0, implicit-def dead $sp, implicit $sp
2760B	  %87:gpr64 = MOVaddr target-flags(aarch64-page) @.str.23, target-flags(aarch64-pageoff, aarch64-nc) @.str.23
2784B	  %89:gpr64 = MOVaddr target-flags(aarch64-page) @.str.22, target-flags(aarch64-pageoff, aarch64-nc) @.str.22
2800B	  %90:gpr64 = MOVaddr target-flags(aarch64-page) @.str.21, target-flags(aarch64-pageoff, aarch64-nc) @.str.21
2832B	  %91:gpr64 = MOVaddr target-flags(aarch64-page) @.str.20, target-flags(aarch64-pageoff, aarch64-nc) @.str.20
2864B	  %92:gpr64 = MOVaddr target-flags(aarch64-page) @.str.19, target-flags(aarch64-pageoff, aarch64-nc) @.str.19
2896B	  %93:gpr64 = MOVaddr target-flags(aarch64-page) @.str.18, target-flags(aarch64-pageoff, aarch64-nc) @.str.18
2928B	  %94:gpr64 = MOVaddr target-flags(aarch64-page) @.str.17, target-flags(aarch64-pageoff, aarch64-nc) @.str.17
2936B	  STRXui %87:gpr64, $sp, 8 :: (store 8 into stack + 64)
2960B	  %95:gpr64 = MOVaddr target-flags(aarch64-page) @.str.16, target-flags(aarch64-pageoff, aarch64-nc) @.str.16
2964B	  STRXui %90:gpr64, $sp, 6 :: (store 8 into stack + 48)
2968B	  STRXui %89:gpr64, $sp, 7 :: (store 8 into stack + 56)
2992B	  %96:gpr64 = MOVaddr target-flags(aarch64-page) @.str.15, target-flags(aarch64-pageoff, aarch64-nc) @.str.15
2996B	  STRXui %92:gpr64, $sp, 4 :: (store 8 into stack + 32)
3000B	  STRXui %91:gpr64, $sp, 5 :: (store 8 into stack + 40)
3024B	  %97:gpr64 = MOVaddr target-flags(aarch64-page) @.str.13, target-flags(aarch64-pageoff, aarch64-nc) @.str.13
3028B	  STRXui %94:gpr64, $sp, 2 :: (store 8 into stack + 16)
3032B	  STRXui %93:gpr64, $sp, 3 :: (store 8 into stack + 24)
3040B	  %98:gpr64 = MOVaddr target-flags(aarch64-page) @.str.14, target-flags(aarch64-pageoff, aarch64-nc) @.str.14
3044B	  STRXui %96:gpr64, $sp, 0 :: (store 8 into stack)
3048B	  STRXui %95:gpr64, $sp, 1 :: (store 8 into stack + 8)
3152B	  $d0 = COPY %79:fpr64
3168B	  $d1 = COPY %83:fpr64
3172B	  $x0 = COPY %97:gpr64
3176B	  $w1 = COPY %84:gpr32
3184B	  $w2 = COPY %63:gpr32
3192B	  $w3 = COPY %64:gpr32
3200B	  $w4 = COPY %66:gpr32
3208B	  $w5 = COPY %85:gpr32
3216B	  $x6 = COPY %98:gpr64
3224B	  $w7 = COPY %86:gpr32
3232B	  BL @print_results, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit $w4, implicit $w5, implicit $d0, implicit killed $d1, implicit killed $x6, implicit killed $w7, implicit-def $sp
3240B	  ADJCALLSTACKUP 72, 0, implicit-def dead $sp, implicit $sp
3248B	  %100:gpr32 = LDRWui %159:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
3264B	  CBZW %100:gpr32, %bb.14
3280B	  B %bb.4

3296B	bb.4.if.then31:
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

3312B	  STRWui %23:gpr32, %stack.9.i, 0 :: (store 4 into %ir.i)
3328B	  %156:gpr64sp = ADDXri %stack.8.trecs, 0, 0

3344B	bb.5.for.cond:
	; predecessors: %bb.4, %bb.6
	  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

3360B	  %102:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
3376B	  dead $wzr = SUBSWri %102:gpr32common, 11, 0, implicit-def $nzcv
3392B	  Bcc 12, %bb.7, implicit killed $nzcv
3408B	  B %bb.6

3424B	bb.6.for.body:
	; predecessors: %bb.5
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

3440B	  %153:gpr32 = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
3456B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
3472B	  $w0 = COPY %153:gpr32
3488B	  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0
3504B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
3520B	  %154:fpr64 = COPY $d0
3536B	  %155:gpr64 = LDRSWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
3568B	  %157:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
3576B	  STRDroX %154:fpr64, %156:gpr64sp, %155:gpr64, 0, 1 :: (store 8 into %ir.arrayidx35)
3584B	  %158:gpr32common = nsw ADDWri %157:gpr32common, 1, 0
3600B	  STRWui %158:gpr32common, %stack.9.i, 0 :: (store 4 into %ir.i)
3616B	  B %bb.5

3632B	bb.7.for.end:
	; predecessors: %bb.5
	  successors: %bb.8(0x50000000), %bb.9(0x30000000); %bb.8(62.50%), %bb.9(37.50%)

3648B	  %105:fpr64 = LDRDui %78:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @maxtime :: (dereferenceable load 8 from @maxtime)
3680B	  FCMPDri %105:fpr64, implicit-def $nzcv
3688B	  STRDui %105:fpr64, %stack.7.tmax, 0 :: (store 8 into %ir.tmax)
3696B	  Bcc 1, %bb.9, implicit killed $nzcv
3712B	  B %bb.8

3728B	bb.8.if.then38:
	; predecessors: %bb.7
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

3744B	  %106:gpr64 = MOVi64imm 4607182418800017408
3760B	  STRXui %106:gpr64, %stack.7.tmax, 0 :: (store 8 into %ir.tmax)

3776B	bb.9.if.end39:
	; predecessors: %bb.7, %bb.8
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

3792B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
3808B	  %107:gpr64 = MOVaddr target-flags(aarch64-page) @.str.24, target-flags(aarch64-pageoff, aarch64-nc) @.str.24
3824B	  $x0 = COPY %107:gpr64
3840B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
3856B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
3872B	  %109:gpr32 = MOVi32imm 1
3904B	  %115:gpr64sp = ADDXri %stack.10.t_names, 0, 0
3920B	  %117:gpr64sp = ADDXri %stack.8.trecs, 0, 0
3936B	  %119:gpr64 = MOVi64imm 4636737291354636288
3952B	  %124:gpr64 = MOVaddr target-flags(aarch64-page) @.str.25, target-flags(aarch64-pageoff, aarch64-nc) @.str.25
3968B	  %138:gpr64 = MOVaddr target-flags(aarch64-page) @.str.26, target-flags(aarch64-pageoff, aarch64-nc) @.str.26
3984B	  %139:gpr64 = MOVaddr target-flags(aarch64-page) @.str.27, target-flags(aarch64-pageoff, aarch64-nc) @.str.27
3992B	  STRWui %109:gpr32, %stack.9.i, 0 :: (store 4 into %ir.i)
4000B	  %149:gpr64 = MOVaddr target-flags(aarch64-page) @.str.28, target-flags(aarch64-pageoff, aarch64-nc) @.str.28

4016B	bb.10.for.cond41:
	; predecessors: %bb.9, %bb.13
	  successors: %bb.11(0x7c000000), %bb.14(0x04000000); %bb.11(96.88%), %bb.14(3.12%)

4032B	  %110:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
4048B	  dead $wzr = SUBSWri %110:gpr32common, 11, 0, implicit-def $nzcv
4064B	  Bcc 12, %bb.14, implicit killed $nzcv
4080B	  B %bb.11

4096B	bb.11.for.body44:
	; predecessors: %bb.10
	  successors: %bb.12(0x40000000), %bb.13(0x40000000); %bb.12(50.00%), %bb.13(50.00%)

4112B	  %113:gpr64 = LDRSWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
4128B	  %114:gpr64 = UBFMXri %113:gpr64, 61, 60
4160B	  %118:fpr64 = LDRDroX %117:gpr64sp, %114:gpr64, 0, 0 :: (load 8 from %ir.arrayidx50)
4208B	  %122:fpr64 = LDRDui %stack.7.tmax, 0 :: (dereferenceable load 8 from %ir.tmax)
4216B	  %116:gpr64 = LDRXroX %115:gpr64sp, %114:gpr64, 0, 0 :: (load 8 from %ir.arrayidx46)
4224B	  %120:fpr64 = COPY %119:gpr64
4232B	  %121:fpr64 = FMULDrr %118:fpr64, %120:fpr64
4240B	  %123:fpr64 = FDIVDrr %121:fpr64, %122:fpr64
4248B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
4256B	  $x0 = COPY %124:gpr64
4272B	  $x1 = COPY %116:gpr64
4288B	  $d0 = COPY %118:fpr64
4304B	  $d1 = COPY %123:fpr64
4320B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0
4336B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
4352B	  %126:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
4368B	  dead $wzr = SUBSWri %126:gpr32common, 5, 0, implicit-def $nzcv
4384B	  Bcc 1, %bb.13, implicit killed $nzcv
4400B	  B %bb.12

4416B	bb.12.if.then56:
	; predecessors: %bb.11
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

4432B	  %128:fpr64 = LDRDui %stack.8.trecs, 2 :: (dereferenceable load 8 from %ir.arrayidx57, align 16)
4448B	  %129:fpr64 = LDRDui %stack.8.trecs, 3 :: (dereferenceable load 8 from %ir.arrayidx58)
4480B	  %131:fpr64 = LDRDui %stack.8.trecs, 4 :: (dereferenceable load 8 from %ir.arrayidx60, align 16)
4528B	  %134:fpr64 = COPY %119:gpr64
4560B	  %136:fpr64 = LDRDui %stack.7.tmax, 0 :: (dereferenceable load 8 from %ir.tmax)
4564B	  %130:fpr64 = FADDDrr %128:fpr64, %129:fpr64
4568B	  %132:fpr64 = FADDDrr %130:fpr64, %131:fpr64
4576B	  STRDui %132:fpr64, %stack.6.t, 0 :: (store 8 into %ir.t)
4584B	  %135:fpr64 = FMULDrr %132:fpr64, %134:fpr64
4592B	  %137:fpr64 = FDIVDrr %135:fpr64, %136:fpr64
4600B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
4608B	  $x0 = COPY %138:gpr64
4624B	  $x1 = COPY %139:gpr64
4640B	  $d0 = COPY %132:fpr64
4656B	  $d1 = COPY %137:fpr64
4672B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0
4688B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
4704B	  %141:gpr64 = LDRSWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
4736B	  %144:fpr64 = LDRDui %stack.6.t, 0 :: (dereferenceable load 8 from %ir.t)
4744B	  %143:fpr64 = LDRDroX %117:gpr64sp, %141:gpr64, 0, 1 :: (load 8 from %ir.arrayidx66)
4800B	  %147:fpr64 = LDRDui %stack.7.tmax, 0 :: (dereferenceable load 8 from %ir.tmax)
4808B	  %145:fpr64 = FSUBDrr %143:fpr64, %144:fpr64
4816B	  STRDui %145:fpr64, %stack.6.t, 0 :: (store 8 into %ir.t)
4824B	  %146:fpr64 = FMULDrr %145:fpr64, %134:fpr64
4832B	  %148:fpr64 = FDIVDrr %146:fpr64, %147:fpr64
4840B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
4848B	  $x0 = COPY %138:gpr64
4864B	  $x1 = COPY %149:gpr64
4880B	  $d0 = COPY %145:fpr64
4896B	  $d1 = COPY %148:fpr64
4912B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0
4928B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

4944B	bb.13.for.inc72:
	; predecessors: %bb.11, %bb.12
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

4960B	  %151:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
4976B	  %152:gpr32common = nsw ADDWri %151:gpr32common, 1, 0
4992B	  STRWui %152:gpr32common, %stack.9.i, 0 :: (store 4 into %ir.i)
5008B	  B %bb.10

5024B	bb.14.if.end75:
	; predecessors: %bb.3, %bb.10

5056B	  $w0 = COPY $wzr
5072B	  RET_ReallyLR implicit $w0

# End machine code for function main.

Before post-MI-sched:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-100]
  fi#1: size=4, align=4, at location [SP-104]
  fi#2: size=8, align=8, at location [SP-120]
  fi#3: size=1, align=4, at location [SP-124]
  fi#4: size=4, align=4, at location [SP-128]
  fi#5: size=8, align=8, at location [SP-136]
  fi#6: size=8, align=8, at location [SP-144]
  fi#7: size=8, align=8, at location [SP-152]
  fi#8: size=96, align=16, at location [SP-256]
  fi#9: size=4, align=4, at location [SP-260]
  fi#10: size=96, align=16, at location [SP-368]
  fi#11: size=8, align=8, at location [SP-376]
  fi#12: size=8, align=8, at location [SP-8]
  fi#13: size=8, align=8, at location [SP-16]
  fi#14: size=8, align=8, at location [SP-24]
  fi#15: size=8, align=8, at location [SP-32]
  fi#16: size=8, align=8, at location [SP-40]
  fi#17: size=8, align=8, at location [SP-48]
  fi#18: size=8, align=8, at location [SP-56]
  fi#19: size=8, align=8, at location [SP-64]
  fi#20: size=8, align=8, at location [SP-72]
  fi#21: size=8, align=8, at location [SP-80]
  fi#22: size=8, align=8, at location [SP-88]
  fi#23: size=8, align=8, at location [SP-96]
  fi#24: size=8, align=16, at location [SP-112]
Constant Pool:
  cp#0: 1.984770e+03, align=8
  cp#1: -1.092330e+04, align=8
  cp#2: 2.777090e+04, align=8
Function Live Ins: $w0, $x1

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $w0, $x1, $d10, $d8, $d9, $x25, $x28, $x23, $x24, $x21, $x22, $x19, $x20, $lr
  $sp = frame-setup SUBXri $sp, 448, 0
  frame-setup STRDui killed $d10, $sp, 42 :: (store 8 into %stack.24)
  frame-setup STPDi killed $d9, killed $d8, $sp, 44 :: (store 8 into %stack.23), (store 8 into %stack.22)
  frame-setup STPXi killed $x28, killed $x25, $sp, 46 :: (store 8 into %stack.21), (store 8 into %stack.20)
  frame-setup STPXi killed $x24, killed $x23, $sp, 48 :: (store 8 into %stack.19), (store 8 into %stack.18)
  frame-setup STPXi killed $x22, killed $x21, $sp, 50 :: (store 8 into %stack.17), (store 8 into %stack.16)
  frame-setup STPXi killed $x20, killed $x19, $sp, 52 :: (store 8 into %stack.15), (store 8 into %stack.14)
  frame-setup STPXi killed $fp, killed $lr, $sp, 54 :: (store 8 into %stack.13), (store 8 into %stack.12)
  $fp = frame-setup ADDXri $sp, 432, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  frame-setup CFI_INSTRUCTION offset $w19, -24
  frame-setup CFI_INSTRUCTION offset $w20, -32
  frame-setup CFI_INSTRUCTION offset $w21, -40
  frame-setup CFI_INSTRUCTION offset $w22, -48
  frame-setup CFI_INSTRUCTION offset $w23, -56
  frame-setup CFI_INSTRUCTION offset $w24, -64
  frame-setup CFI_INSTRUCTION offset $w25, -72
  frame-setup CFI_INSTRUCTION offset $w28, -80
  frame-setup CFI_INSTRUCTION offset $b8, -88
  frame-setup CFI_INSTRUCTION offset $b9, -96
  frame-setup CFI_INSTRUCTION offset $b10, -112
  STPWi renamable $w0, $wzr, $fp, -22 :: (store 4 into %ir.retval), (store 4 into %ir.argc.addr)
  STURXi killed renamable $x1, $fp, -104 :: (store 8 into %ir.argv.addr)
  $x0 = ADRP target-flags(aarch64-page) @.str
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str, 0
  $x1 = ADRP target-flags(aarch64-page) @.str.1
  renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1, 0
  BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0
  STRXui renamable $x0, $sp, 9 :: (store 8 into %ir.fp)
  renamable $x19 = ADRP target-flags(aarch64-page) @timeron
  CBZX killed renamable $x0, %bb.2

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $x19
  $w8 = MOVZWi 1, 0
  $x9 = ADRP target-flags(aarch64-page) @.str.2
  renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.2, 0
  $x10 = ADRP target-flags(aarch64-page) @.str.3
  renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.3, 0
  $x11 = ADRP target-flags(aarch64-page) @.str.4
  renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @.str.4, 0
  $x12 = ADRP target-flags(aarch64-page) @.str.5
  renamable $x12 = ADDXri $x12, target-flags(aarch64-pageoff, aarch64-nc) @.str.5, 0
  $x13 = ADRP target-flags(aarch64-page) @.str.6
  renamable $x13 = ADDXri $x13, target-flags(aarch64-pageoff, aarch64-nc) @.str.6, 0
  $x14 = ADRP target-flags(aarch64-page) @.str.7
  renamable $x14 = ADDXri $x14, target-flags(aarch64-pageoff, aarch64-nc) @.str.7, 0
  STRWui killed renamable $w8, renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
  $x8 = ADRP target-flags(aarch64-page) @.str.8
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.8, 0
  STPXi renamable $x9, renamable $x10, $sp, 11 :: (store 8 into %ir.arrayidx), (store 8 into %ir.arrayidx1, align 16)
  $x9 = ADRP target-flags(aarch64-page) @.str.9
  renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.9, 0
  STPXi renamable $x11, renamable $x12, $sp, 13 :: (store 8 into %ir.arrayidx2), (store 8 into %ir.arrayidx3, align 16)
  $x10 = ADRP target-flags(aarch64-page) @.str.10
  renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.10, 0
  STPXi renamable $x13, renamable $x14, $sp, 15 :: (store 8 into %ir.arrayidx4), (store 8 into %ir.arrayidx5, align 16)
  $x11 = ADRP target-flags(aarch64-page) @.str.11
  renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @.str.11, 0
  STPXi renamable $x8, renamable $x9, $sp, 17 :: (store 8 into %ir.arrayidx6), (store 8 into %ir.arrayidx7, align 16)
  renamable $x0 = LDRXui $sp, 9 :: (dereferenceable load 8 from %ir.fp)
  STPXi renamable $x10, renamable $x11, $sp, 19 :: (store 8 into %ir.arrayidx8), (store 8 into %ir.arrayidx9, align 16)
  $x8 = ADRP target-flags(aarch64-page) @.str.12
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.12, 0
  STRXui killed renamable $x8, $sp, 21 :: (store 8 into %ir.arrayidx10)
  BL @fclose, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  B %bb.3

bb.2.if.else:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $x19
  STRWui $wzr, renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)

bb.3.if.end:
; predecessors: %bb.2, %bb.1
  successors: %bb.4(0x50000000), %bb.14(0x30000000); %bb.4(62.50%), %bb.14(37.50%)
  liveins: $x19
  BL @read_input, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  BL @domain, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  BL @setcoeff, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  BL @setbv, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  BL @setiv, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  BL @erhs, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  $w0 = MOVZWi 1, 0
  $w20 = MOVZWi 1, 0
  BL @ssor, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  BL @setbv, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  BL @setiv, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  renamable $x21 = ADRP target-flags(aarch64-page) @itmax
  renamable $w0 = LDRWui renamable $x21, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)
  BL @ssor, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  BL @error, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  BL @pintgr, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  renamable $x8 = ADRP target-flags(aarch64-page) @frc
  renamable $d0 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @frc :: (dereferenceable load 8 from @frc)
  $x0 = ADRP target-flags(aarch64-page) @rsdnm
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @rsdnm, 0
  $x1 = ADRP target-flags(aarch64-page) @errnm
  renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @errnm, 0
  $x2 = SUBXri $fp, 108, 0
  $x3 = SUBXri $fp, 112, 0
  BL @verify, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $x2, implicit $x3, implicit-def $sp
  renamable $s0 = LDRSui renamable $x21, target-flags(aarch64-pageoff, aarch64-nc) @itmax, implicit-def $d0 :: (dereferenceable load 4 from @itmax)
  renamable $x22 = ADRP target-flags(aarch64-page) @nx0
  renamable $x8 = ADRP target-flags(aarch64-page) %const.0
  renamable $x23 = ADRP target-flags(aarch64-page) @ny0
  renamable $x24 = ADRP target-flags(aarch64-page) @nz0
  renamable $d8 = FMOVDi 8
  renamable $w9 = LDRWui renamable $x22, target-flags(aarch64-pageoff, aarch64-nc) @nx0 :: (dereferenceable load 4 from @nx0)
  renamable $d1 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  renamable $w8 = LDRWui renamable $x23, target-flags(aarch64-pageoff, aarch64-nc) @ny0 :: (dereferenceable load 4 from @ny0)
  renamable $w10 = LDRWui renamable $x24, target-flags(aarch64-pageoff, aarch64-nc) @nz0 :: (dereferenceable load 4 from @nz0)
  renamable $q0 = SSHLLv2i32_shift killed renamable $d0, 0
  renamable $d9 = SCVTFv1i64 renamable $d0, implicit killed $q0
  renamable $d0 = SCVTFUWDri renamable $w9
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1
  renamable $d1 = SCVTFUWDri renamable $w8
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1
  renamable $d1 = SCVTFUWDri renamable $w10
  $w8 = ADDWrs killed renamable $w9, killed renamable $w8, 0
  $w8 = ADDWrs killed renamable $w8, killed renamable $w10, 0
  renamable $d10 = FMULDrr killed renamable $d0, killed renamable $d1
  renamable $d0 = SCVTFUWDri killed renamable $w8
  renamable $d0 = FDIVDrr killed renamable $d0, renamable $d8
  renamable $d1 = FMOVDi 0
  BL @pow, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $d1, implicit-def $sp, implicit-def $d0
  renamable $x8 = ADRP target-flags(aarch64-page) %const.1
  renamable $w2 = LDRWui killed renamable $x22, target-flags(aarch64-pageoff, aarch64-nc) @nx0 :: (dereferenceable load 4 from @nx0)
  renamable $w3 = LDRWui killed renamable $x23, target-flags(aarch64-pageoff, aarch64-nc) @ny0 :: (dereferenceable load 4 from @ny0)
  renamable $w4 = LDRWui killed renamable $x24, target-flags(aarch64-pageoff, aarch64-nc) @nz0 :: (dereferenceable load 4 from @nz0)
  renamable $d1 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  renamable $x8 = ADRP target-flags(aarch64-page) %const.2
  $x9 = MOVZXi 37968, 32
  $x9 = MOVKXi $x9(tied-def 0), 49409, 48
  renamable $x22 = ADRP target-flags(aarch64-page) @maxtime
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1
  renamable $d1 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  $w8 = ADDWrs renamable $w2, renamable $w3, 0
  $w8 = ADDWrs killed renamable $w8, renamable $w4, 0
  renamable $d2 = FADDDrr killed renamable $d10, killed renamable $d0
  renamable $d0 = SCVTFUWDri killed renamable $w8
  $x8 = MOVZXi 33920, 32
  $x8 = MOVKXi $x8(tied-def 0), 16686, 48
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1
  $d1 = FMOVXDr killed $x9
  renamable $w1 = LDURSBWi $fp, -108 :: (dereferenceable load 1 from %ir.Class, align 4)
  renamable $w5 = LDRWui killed renamable $x21, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)
  renamable $d3 = FDIVDrr killed renamable $d0, killed renamable $d8
  renamable $d0 = LDRDui renamable $x22, target-flags(aarch64-pageoff, aarch64-nc) @maxtime :: (dereferenceable load 8 from @maxtime)
  renamable $d2 = FADDDrr killed renamable $d2, killed renamable $d3
  $d3 = FMOVXDr killed $x8
  renamable $w7 = LDURWi $fp, -112 :: (dereferenceable load 4 from %ir.verified)
  renamable $d1 = FADDDrr killed renamable $d2, killed renamable $d1
  renamable $d1 = FMULDrr killed renamable $d9, killed renamable $d1
  renamable $d2 = FMULDrr renamable $d0, killed renamable $d3
  renamable $d1 = FDIVDrr killed renamable $d1, killed renamable $d2
  STURDi renamable $d1, $fp, -120 :: (store 8 into %ir.mflops)
  $x8 = ADRP target-flags(aarch64-page) @.str.23
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.23, 0
  $x9 = ADRP target-flags(aarch64-page) @.str.22
  renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.22, 0
  $x10 = ADRP target-flags(aarch64-page) @.str.21
  renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.21, 0
  $x11 = ADRP target-flags(aarch64-page) @.str.20
  renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @.str.20, 0
  $x12 = ADRP target-flags(aarch64-page) @.str.19
  renamable $x12 = ADDXri $x12, target-flags(aarch64-pageoff, aarch64-nc) @.str.19, 0
  $x13 = ADRP target-flags(aarch64-page) @.str.18
  renamable $x13 = ADDXri $x13, target-flags(aarch64-pageoff, aarch64-nc) @.str.18, 0
  $x14 = ADRP target-flags(aarch64-page) @.str.17
  renamable $x14 = ADDXri $x14, target-flags(aarch64-pageoff, aarch64-nc) @.str.17, 0
  STPXi renamable $x9, renamable $x8, $sp, 7 :: (store 8 into stack + 64), (store 8 into stack + 56)
  $x8 = ADRP target-flags(aarch64-page) @.str.16
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.16, 0
  STPXi renamable $x11, renamable $x10, $sp, 5 :: (store 8 into stack + 48), (store 8 into stack + 40)
  $x9 = ADRP target-flags(aarch64-page) @.str.15
  renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.15, 0
  STPXi renamable $x13, renamable $x12, $sp, 3 :: (store 8 into stack + 32), (store 8 into stack + 24)
  $x0 = ADRP target-flags(aarch64-page) @.str.13
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.13, 0
  STPXi renamable $x8, renamable $x14, $sp, 1 :: (store 8 into stack + 16), (store 8 into stack + 8)
  $x6 = ADRP target-flags(aarch64-page) @.str.14
  renamable $x6 = ADDXri $x6, target-flags(aarch64-pageoff, aarch64-nc) @.str.14, 0
  STRXui killed renamable $x9, $sp, 0 :: (store 8 into stack)
  BL @print_results, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit $w4, implicit $w5, implicit $d0, implicit $d1, implicit $x6, implicit $w7, implicit-def $sp
  renamable $w8 = LDRWui killed renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW killed renamable $w8, %bb.14

bb.4.if.then31:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)
  liveins: $w20, $x22
  STRWui killed renamable $w20, $sp, 47 :: (store 4 into %ir.i)
  $x19 = ADDXri $sp, 192, 0

bb.5.for.cond:
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)
  liveins: $x19, $x22
  renamable $w8 = LDRWui $sp, 47 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri killed renamable $w8, 11, 0, implicit-def $nzcv
  Bcc 12, %bb.7, implicit $nzcv

bb.6.for.body:
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)
  liveins: $x19, $x22
  renamable $w0 = LDRWui $sp, 47 :: (dereferenceable load 4 from %ir.i)
  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0
  renamable $x8 = LDRSWui $sp, 47 :: (dereferenceable load 4 from %ir.i)
  renamable $w9 = LDRWui $sp, 47 :: (dereferenceable load 4 from %ir.i)
  STRDroX killed renamable $d0, renamable $x19, killed renamable $x8, 0, 1 :: (store 8 into %ir.arrayidx35)
  renamable $w8 = nsw ADDWri killed renamable $w9, 1, 0
  STRWui killed renamable $w8, $sp, 47 :: (store 4 into %ir.i)
  B %bb.5

bb.7.for.end:
; predecessors: %bb.5
  successors: %bb.8(0x50000000), %bb.9(0x30000000); %bb.8(62.50%), %bb.9(37.50%)
  liveins: $x22
  renamable $d0 = LDRDui killed renamable $x22, target-flags(aarch64-pageoff, aarch64-nc) @maxtime :: (dereferenceable load 8 from @maxtime)
  FCMPDri renamable $d0, implicit-def $nzcv
  STURDi killed renamable $d0, $fp, -136 :: (store 8 into %ir.tmax)
  Bcc 1, %bb.9, implicit $nzcv

bb.8.if.then38:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  $x8 = MOVZXi 16368, 48
  STURXi killed renamable $x8, $fp, -136 :: (store 8 into %ir.tmax)

bb.9.if.end39:
; predecessors: %bb.7, %bb.8
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  $x0 = ADRP target-flags(aarch64-page) @.str.24
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.24, 0
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  $w8 = MOVZWi 1, 0
  $x23 = ADDXri $sp, 80, 0
  $x24 = ADDXri $sp, 192, 0
  $x25 = MOVZXi 16473, 48
  $x19 = ADRP target-flags(aarch64-page) @.str.25
  renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str.25, 0
  $x20 = ADRP target-flags(aarch64-page) @.str.26
  renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @.str.26, 0
  $x21 = ADRP target-flags(aarch64-page) @.str.27
  renamable $x21 = ADDXri $x21, target-flags(aarch64-pageoff, aarch64-nc) @.str.27, 0
  STRWui killed renamable $w8, $sp, 47 :: (store 4 into %ir.i)
  $x22 = ADRP target-flags(aarch64-page) @.str.28
  renamable $x22 = ADDXri $x22, target-flags(aarch64-pageoff, aarch64-nc) @.str.28, 0

bb.10.for.cond41:
; predecessors: %bb.9, %bb.13
  successors: %bb.11(0x7c000000), %bb.14(0x04000000); %bb.11(96.88%), %bb.14(3.12%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25
  renamable $w8 = LDRWui $sp, 47 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri killed renamable $w8, 11, 0, implicit-def $nzcv
  Bcc 12, %bb.14, implicit $nzcv

bb.11.for.body44:
; predecessors: %bb.10
  successors: %bb.12(0x40000000), %bb.13(0x40000000); %bb.12(50.00%), %bb.13(50.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25
  renamable $x8 = LDRSWui $sp, 47 :: (dereferenceable load 4 from %ir.i)
  renamable $x8 = UBFMXri killed renamable $x8, 61, 60
  renamable $d0 = LDRDroX renamable $x24, renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx50)
  renamable $d1 = LDURDi $fp, -136 :: (dereferenceable load 8 from %ir.tmax)
  renamable $x1 = LDRXroX renamable $x23, killed renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx46)
  $d2 = FMOVXDr $x25
  renamable $d2 = FMULDrr renamable $d0, killed renamable $d2
  renamable $d1 = FDIVDrr killed renamable $d2, killed renamable $d1
  $x0 = ORRXrs $xzr, $x19, 0
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w0
  renamable $w8 = LDRWui $sp, 47 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri killed renamable $w8, 5, 0, implicit-def $nzcv
  Bcc 1, %bb.13, implicit $nzcv

bb.12.if.then56:
; predecessors: %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25
  renamable $d0, renamable $d1 = LDPDi $sp, 26 :: (dereferenceable load 8 from %ir.arrayidx57, align 16), (dereferenceable load 8 from %ir.arrayidx58)
  renamable $d2 = LDRDui $sp, 28 :: (dereferenceable load 8 from %ir.arrayidx60, align 16)
  $d8 = FMOVXDr $x25
  renamable $d3 = LDURDi $fp, -136 :: (dereferenceable load 8 from %ir.tmax)
  renamable $d0 = FADDDrr killed renamable $d0, killed renamable $d1
  renamable $d0 = FADDDrr killed renamable $d0, killed renamable $d2
  STURDi renamable $d0, $fp, -128 :: (store 8 into %ir.t)
  renamable $d1 = FMULDrr renamable $d0, renamable $d8
  renamable $d1 = FDIVDrr killed renamable $d1, killed renamable $d3
  $x0 = ORRXrs $xzr, $x20, 0
  $x1 = ORRXrs $xzr, $x21, 0
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w0
  renamable $x8 = LDRSWui $sp, 47 :: (dereferenceable load 4 from %ir.i)
  renamable $d2, renamable $d0 = LDPDi $fp, -17 :: (dereferenceable load 8 from %ir.t), (dereferenceable load 8 from %ir.tmax)
  renamable $d1 = LDRDroX renamable $x24, killed renamable $x8, 0, 1 :: (load 8 from %ir.arrayidx66)
  renamable $d0 = FSUBDrr killed renamable $d1, killed renamable $d0
  STURDi renamable $d0, $fp, -128 :: (store 8 into %ir.t)
  renamable $d1 = FMULDrr renamable $d0, killed renamable $d8
  renamable $d1 = FDIVDrr killed renamable $d1, killed renamable $d2
  $x0 = ORRXrs $xzr, $x20, 0
  $x1 = ORRXrs $xzr, $x22, 0
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w0

bb.13.for.inc72:
; predecessors: %bb.11, %bb.12
  successors: %bb.10(0x80000000); %bb.10(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25
  renamable $w8 = LDRWui $sp, 47 :: (dereferenceable load 4 from %ir.i)
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 47 :: (store 4 into %ir.i)
  B %bb.10

bb.14.if.end75:
; predecessors: %bb.3, %bb.10

  $w0 = ORRWrs $wzr, $wzr, 0
  $fp, $lr = frame-destroy LDPXi $sp, 54 :: (load 8 from %stack.13), (load 8 from %stack.12)
  $x20, $x19 = frame-destroy LDPXi $sp, 52 :: (load 8 from %stack.15), (load 8 from %stack.14)
  $x22, $x21 = frame-destroy LDPXi $sp, 50 :: (load 8 from %stack.17), (load 8 from %stack.16)
  $x24, $x23 = frame-destroy LDPXi $sp, 48 :: (load 8 from %stack.19), (load 8 from %stack.18)
  $x28, $x25 = frame-destroy LDPXi $sp, 46 :: (load 8 from %stack.21), (load 8 from %stack.20)
  $d9, $d8 = frame-destroy LDPDi $sp, 44 :: (load 8 from %stack.23), (load 8 from %stack.22)
  $d10 = frame-destroy LDRDui $sp, 42 :: (load 8 from %stack.24)
  $sp = frame-destroy ADDXri $sp, 448, 0
  RET undef $lr, implicit $w0

# End machine code for function main.

********** MI Scheduling **********
main:%bb.0 entry
  From: STRXui renamable $x0, $sp, 9 :: (store 8 into %ir.fp)
    To: CBZX killed renamable $x0, %bb.2
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   STRXui renamable $x0, $sp, 9 :: (store 8 into %ir.fp)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   renamable $x19 = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   CBZX killed renamable $x0, %bb.2
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Disabled scoreboard hazard recognizer
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x19 = ADRP target-flags(aarch64-page) @timeron
  Ready @0c
  TopQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STRXui renamable $x0, $sp, 9 :: (store 8 into %ir.fp)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(1):   renamable $x19 = ADRP target-flags(aarch64-page) @timeron
SU(0):   STRXui renamable $x0, $sp, 9 :: (store 8 into %ir.fp)

********** MI Scheduling **********
main:%bb.0 entry
  From: STPWi renamable $w0, $wzr, $fp, -22 :: (store 4 into %ir.retval), (store 4 into %ir.argc.addr)
    To: BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   STPWi renamable $w0, $wzr, $fp, -22 :: (store 4 into %ir.retval), (store 4 into %ir.argc.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Anti Latency=0
SU(1):   STURXi renamable $x1, $fp, -104 :: (store 8 into %ir.argv.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(4): Anti Latency=0
SU(2):   $x0 = ADRP target-flags(aarch64-page) @.str
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Predecessors:
    SU(0): Anti Latency=0
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x0
SU(3):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $x1 = ADRP target-flags(aarch64-page) @.str.1
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Predecessors:
    SU(1): Anti Latency=0
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x1
SU(5):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STPWi renamable $w0, $wzr, $fp, -22 :: (store 4 into %ir.retval), (store 4 into %ir.argc.addr)
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) STURXi renamable $x1, $fp, -104 :: (store 8 into %ir.argv.addr)
  Ready @1c
  TopQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 4 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) $x0 = ADRP target-flags(aarch64-page) @.str
  Ready @2c
  TopQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 2
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) $x1 = ADRP target-flags(aarch64-page) @.str.1
  Ready @3c
  TopQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 5 
  TopQ.A RemainingLatency 0 + 4c > CritPath 2
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str, 0
  Ready @4c
  TopQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1, 0
  Ready @5c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   STPWi renamable $w0, $wzr, $fp, -22 :: (store 4 into %ir.retval), (store 4 into %ir.argc.addr)
SU(1):   STURXi renamable $x1, $fp, -104 :: (store 8 into %ir.argv.addr)
SU(2):   $x0 = ADRP target-flags(aarch64-page) @.str
SU(4):   $x1 = ADRP target-flags(aarch64-page) @.str.1
SU(3):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str, 0
SU(5):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1, 0

********** MI Scheduling **********
main:%bb.0 entry
  From: frame-setup STRDui killed $d10, $sp, 42 :: (store 8 into %stack.24)
    To: frame-setup CFI_INSTRUCTION def_cfa $w29, 16
 RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   frame-setup STRDui $d10, $sp, 42 :: (store 8 into %stack.24)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   frame-setup STPDi $d9, $d8, $sp, 44 :: (store 8 into %stack.23), (store 8 into %stack.22)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   frame-setup STPXi $x28, $x25, $sp, 46 :: (store 8 into %stack.21), (store 8 into %stack.20)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(3):   frame-setup STPXi $x24, $x23, $sp, 48 :: (store 8 into %stack.19), (store 8 into %stack.18)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(4):   frame-setup STPXi $x22, $x21, $sp, 50 :: (store 8 into %stack.17), (store 8 into %stack.16)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(5):   frame-setup STPXi $x20, $x19, $sp, 52 :: (store 8 into %stack.15), (store 8 into %stack.14)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(6):   frame-setup STPXi $fp, $lr, $sp, 54 :: (store 8 into %stack.13), (store 8 into %stack.12)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Successors:
    SU(7): Anti Latency=0
SU(7):   $fp = frame-setup ADDXri $sp, 432, 0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(6): Anti Latency=0
ExitSU:   frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 
  TopQ.A RemainingLatency 0 + 0c > CritPath 0
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) frame-setup STRDui $d10, $sp, 42 :: (store 8 into %stack.24)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 1 2 3 4 5 
  TopQ.A RemainingLatency 0 + 1c > CritPath 0
  Cand SU(6) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) frame-setup STPDi $d9, $d8, $sp, 44 :: (store 8 into %stack.23), (store 8 into %stack.22)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 5 2 3 4 
  TopQ.A RemainingLatency 0 + 2c > CritPath 0
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) frame-setup STPXi $x28, $x25, $sp, 46 :: (store 8 into %stack.21), (store 8 into %stack.20)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 5 4 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 0
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) frame-setup STPXi $x24, $x23, $sp, 48 :: (store 8 into %stack.19), (store 8 into %stack.18)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 5 4 
  TopQ.A RemainingLatency 0 + 4c > CritPath 0
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) frame-setup STPXi $x22, $x21, $sp, 50 :: (store 8 into %stack.17), (store 8 into %stack.16)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 5 
  TopQ.A RemainingLatency 0 + 5c > CritPath 0
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) frame-setup STPXi $x20, $x19, $sp, 52 :: (store 8 into %stack.15), (store 8 into %stack.14)
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) frame-setup STPXi $fp, $lr, $sp, 54 :: (store 8 into %stack.13), (store 8 into %stack.12)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) $fp = frame-setup ADDXri $sp, 432, 0
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   frame-setup STRDui $d10, $sp, 42 :: (store 8 into %stack.24)
SU(1):   frame-setup STPDi $d9, $d8, $sp, 44 :: (store 8 into %stack.23), (store 8 into %stack.22)
SU(2):   frame-setup STPXi $x28, $x25, $sp, 46 :: (store 8 into %stack.21), (store 8 into %stack.20)
SU(3):   frame-setup STPXi $x24, $x23, $sp, 48 :: (store 8 into %stack.19), (store 8 into %stack.18)
SU(4):   frame-setup STPXi $x22, $x21, $sp, 50 :: (store 8 into %stack.17), (store 8 into %stack.16)
SU(5):   frame-setup STPXi $x20, $x19, $sp, 52 :: (store 8 into %stack.15), (store 8 into %stack.14)
SU(6):   frame-setup STPXi $fp, $lr, $sp, 54 :: (store 8 into %stack.13), (store 8 into %stack.12)
SU(7):   $fp = frame-setup ADDXri $sp, 432, 0

Fixup kills for %bb.0
********** MI Scheduling **********
main:%bb.1 if.then
  From: $w8 = MOVZWi 1, 0
    To: BL @fclose, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 31
ScheduleDAGMI::schedule starting
SU(0):   $w8 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(14): Out  Latency=1
    SU(13): Data Latency=1 Reg=$w8
SU(1):   $x9 = ADRP target-flags(aarch64-page) @.str.2
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x9
SU(2):   renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.2, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x9
  Successors:
    SU(17): Out  Latency=1
    SU(16): Data Latency=1 Reg=$x9
SU(3):   $x10 = ADRP target-flags(aarch64-page) @.str.3
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x10
SU(4):   renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.3, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x10
  Successors:
    SU(20): Out  Latency=1
    SU(16): Data Latency=1 Reg=$x10
SU(5):   $x11 = ADRP target-flags(aarch64-page) @.str.4
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x11
SU(6):   renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @.str.4, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x11
  Successors:
    SU(23): Out  Latency=1
    SU(19): Data Latency=1 Reg=$x11
SU(7):   $x12 = ADRP target-flags(aarch64-page) @.str.5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x12
SU(8):   renamable $x12 = ADDXri $x12, target-flags(aarch64-pageoff, aarch64-nc) @.str.5, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x12
  Successors:
    SU(19): Data Latency=1 Reg=$x12
SU(9):   $x13 = ADRP target-flags(aarch64-page) @.str.6
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x13
SU(10):   renamable $x13 = ADDXri $x13, target-flags(aarch64-pageoff, aarch64-nc) @.str.6, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x13
  Successors:
    SU(22): Data Latency=1 Reg=$x13
SU(11):   $x14 = ADRP target-flags(aarch64-page) @.str.7
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x14
SU(12):   renamable $x14 = ADDXri $x14, target-flags(aarch64-pageoff, aarch64-nc) @.str.7, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x14
  Successors:
    SU(22): Data Latency=1 Reg=$x14
SU(13):   STRWui renamable $w8, renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Data Latency=1 Reg=$w8
  Successors:
    SU(14): Anti Latency=0
SU(14):   $x8 = ADRP target-flags(aarch64-page) @.str.8
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(13): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    SU(15): Out  Latency=1
    SU(15): Data Latency=1 Reg=$x8
SU(15):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.8, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 3
  Predecessors:
    SU(14): Out  Latency=1
    SU(14): Data Latency=1 Reg=$x8
  Successors:
    SU(28): Out  Latency=1
    SU(25): Data Latency=1 Reg=$x8
SU(16):   STPXi renamable $x9, renamable $x10, $sp, 11 :: (store 8 into %ir.arrayidx), (store 8 into %ir.arrayidx1, align 16)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 4
  Predecessors:
    SU(4): Data Latency=1 Reg=$x10
    SU(2): Data Latency=1 Reg=$x9
  Successors:
    SU(17): Anti Latency=0
    SU(20): Anti Latency=0
SU(17):   $x9 = ADRP target-flags(aarch64-page) @.str.9
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 4
  Predecessors:
    SU(16): Anti Latency=0
    SU(2): Out  Latency=1
  Successors:
    SU(18): Out  Latency=1
    SU(18): Data Latency=1 Reg=$x9
SU(18):   renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.9, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 3
  Predecessors:
    SU(17): Out  Latency=1
    SU(17): Data Latency=1 Reg=$x9
  Successors:
    SU(25): Data Latency=1 Reg=$x9
SU(19):   STPXi renamable $x11, renamable $x12, $sp, 13 :: (store 8 into %ir.arrayidx2), (store 8 into %ir.arrayidx3, align 16)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(8): Data Latency=1 Reg=$x12
    SU(6): Data Latency=1 Reg=$x11
  Successors:
    SU(23): Anti Latency=0
SU(20):   $x10 = ADRP target-flags(aarch64-page) @.str.10
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(16): Anti Latency=0
    SU(4): Out  Latency=1
  Successors:
    SU(21): Out  Latency=1
    SU(21): Data Latency=1 Reg=$x10
SU(21):   renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.10, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
    SU(20): Out  Latency=1
    SU(20): Data Latency=1 Reg=$x10
  Successors:
    SU(27): Data Latency=1 Reg=$x10
SU(22):   STPXi renamable $x13, renamable $x14, $sp, 15 :: (store 8 into %ir.arrayidx4), (store 8 into %ir.arrayidx5, align 16)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=$x14
    SU(10): Data Latency=1 Reg=$x13
SU(23):   $x11 = ADRP target-flags(aarch64-page) @.str.11
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(19): Anti Latency=0
    SU(6): Out  Latency=1
  Successors:
    SU(24): Out  Latency=1
    SU(24): Data Latency=1 Reg=$x11
SU(24):   renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @.str.11, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
    SU(23): Out  Latency=1
    SU(23): Data Latency=1 Reg=$x11
  Successors:
    SU(27): Data Latency=1 Reg=$x11
SU(25):   STPXi renamable $x8, renamable $x9, $sp, 17 :: (store 8 into %ir.arrayidx6), (store 8 into %ir.arrayidx7, align 16)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(18): Data Latency=1 Reg=$x9
    SU(15): Data Latency=1 Reg=$x8
  Successors:
    SU(28): Anti Latency=0
SU(26):   renamable $x0 = LDRXui $sp, 9 :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(27):   STPXi renamable $x10, renamable $x11, $sp, 19 :: (store 8 into %ir.arrayidx8), (store 8 into %ir.arrayidx9, align 16)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(24): Data Latency=1 Reg=$x11
    SU(21): Data Latency=1 Reg=$x10
SU(28):   $x8 = ADRP target-flags(aarch64-page) @.str.12
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(25): Anti Latency=0
    SU(15): Out  Latency=1
  Successors:
    SU(29): Out  Latency=1
    SU(29): Data Latency=1 Reg=$x8
SU(29):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.12, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(28): Out  Latency=1
    SU(28): Data Latency=1 Reg=$x8
  Successors:
    SU(30): Data Latency=1 Reg=$x8
SU(30):   STRXui renamable $x8, $sp, 21 :: (store 8 into %ir.arrayidx10)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(29): Data Latency=1 Reg=$x8
ExitSU:   BL @fclose, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(26): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 26 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $x9 = ADRP target-flags(aarch64-page) @.str.2
  Ready @0c
  TopQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 26 3 5 7 9 11 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(3) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) $x10 = ADRP target-flags(aarch64-page) @.str.3
  Ready @1c
  TopQ.A BotLatency SU(3) 6c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 26 2 5 7 9 11 4 
  TopQ.A RemainingLatency 0 + 2c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $w8 = MOVZWi 1, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 26 2 5 7 9 11 13 
  TopQ.A RemainingLatency 0 + 3c > CritPath 6
  Cand SU(4) ORDER                              
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.2, 0
  Ready @3c
  TopQ.A TopLatency SU(2) 1c
  TopQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 26 13 5 7 9 11 
  TopQ.A RemainingLatency 0 + 4c > CritPath 6
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.3, 0
  Ready @4c
  TopQ.A BotLatency SU(4) 5c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 26 13 5 7 9 16 
  TopQ.A RemainingLatency 0 + 5c > CritPath 6
  Cand SU(11) ORDER                              
  Cand SU(26) TOP-PATH                  4 cycles 
  Cand SU(13) ORDER                              
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) $x11 = ADRP target-flags(aarch64-page) @.str.4
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 26 13 16 7 9 6 
  TopQ.A RemainingLatency 0 + 6c > CritPath 6
  Cand SU(11) ORDER                              
  Cand SU(26) TOP-PATH                  4 cycles 
  Cand SU(13) ORDER                              
  Cand SU(7) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(7) $x12 = ADRP target-flags(aarch64-page) @.str.5
  Ready @6c
  TopQ.A BotLatency SU(7) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 26 13 16 6 9 8 
  TopQ.A RemainingLatency 0 + 7c > CritPath 6
  Cand SU(11) ORDER                              
  Cand SU(26) TOP-PATH                  4 cycles 
  Cand SU(13) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(13) STRWui renamable $w8, renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
  Ready @7c
  TopQ.A BotLatency SU(13) 4c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 26 8 16 6 9 14 
  TopQ.A RemainingLatency 0 + 8c > CritPath 6
  Cand SU(11) ORDER                              
  Cand SU(26) TOP-PATH                  4 cycles 
  Cand SU(16) ORDER                              
  Cand SU(14) ORDER                              
Pick Top ORDER     
Scheduling SU(14) $x8 = ADRP target-flags(aarch64-page) @.str.8
  Ready @8c
  TopQ.A BotLatency SU(14) 4c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 26 8 16 6 9 15 
  TopQ.A RemainingLatency 0 + 9c > CritPath 6
  Cand SU(11) ORDER                              
  Cand SU(26) TOP-PATH                  4 cycles 
  Cand SU(16) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(16) STPXi renamable $x9, renamable $x10, $sp, 11 :: (store 8 into %ir.arrayidx), (store 8 into %ir.arrayidx1, align 16)
  Ready @9c
  TopQ.A TopLatency SU(16) 2c
  TopQ.A BotLatency SU(16) 4c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 26 8 15 6 9 17 20 
  TopQ.A RemainingLatency 0 + 10c > CritPath 6
  Cand SU(11) ORDER                              
  Cand SU(26) TOP-PATH                  4 cycles 
  Cand SU(17) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(17) $x9 = ADRP target-flags(aarch64-page) @.str.9
  Ready @10c
  TopQ.A BotLatency SU(17) 4c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 26 8 15 6 9 20 18 
  TopQ.A RemainingLatency 0 + 11c > CritPath 6
  Cand SU(11) ORDER                              
  Cand SU(26) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(26) renamable $x0 = LDRXui $sp, 9 :: (dereferenceable load 8 from %ir.fp)
  Ready @11c
  TopQ.A BotLatency SU(26) 4c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 18 8 15 6 9 20 
  TopQ.A RemainingLatency 0 + 12c > CritPath 6
  Cand SU(11) ORDER                              
  Cand SU(18) TOP-PATH                  3 cycles 
  Cand SU(8) ORDER                              
  Cand SU(6) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(6) renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @.str.4, 0
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 18 8 15 20 9 
  TopQ.A RemainingLatency 0 + 13c > CritPath 6
  Cand SU(11) ORDER                              
  Cand SU(18) TOP-PATH                  3 cycles 
  Cand SU(8) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(8) renamable $x12 = ADDXri $x12, target-flags(aarch64-pageoff, aarch64-nc) @.str.5, 0
  Ready @13c
  TopQ.A BotLatency SU(8) 3c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 18 9 15 20 19 
  TopQ.A RemainingLatency 0 + 14c > CritPath 6
  Cand SU(11) ORDER                              
  Cand SU(18) TOP-PATH                  3 cycles 
  Cand SU(15) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(15) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.8, 0
  Ready @14c
  TopQ.A BotLatency SU(15) 3c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 18 9 19 20 
  TopQ.A RemainingLatency 0 + 15c > CritPath 6
  Cand SU(11) ORDER                              
  Cand SU(18) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(18) renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.9, 0
  Ready @15c
  TopQ.A TopLatency SU(18) 3c
  TopQ.A BotLatency SU(18) 3c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 20 9 19 25 
  TopQ.A RemainingLatency 0 + 16c > CritPath 6
  Cand SU(11) ORDER                              
  Cand SU(9) ORDER                              
Pick Top ORDER     
Scheduling SU(9) $x13 = ADRP target-flags(aarch64-page) @.str.6
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 20 25 19 10 
  TopQ.A RemainingLatency 0 + 17c > CritPath 6
  Cand SU(11) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(11) $x14 = ADRP target-flags(aarch64-page) @.str.7
  Ready @17c
  TopQ.A BotLatency SU(11) 2c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 20 25 19 12 
  TopQ.A RemainingLatency 0 + 18c > CritPath 6
  Cand SU(10) ORDER                              
  Cand SU(20) TOP-PATH                  2 cycles 
  Cand SU(19) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(19) STPXi renamable $x11, renamable $x12, $sp, 13 :: (store 8 into %ir.arrayidx2), (store 8 into %ir.arrayidx3, align 16)
  Ready @18c
  TopQ.A BotLatency SU(19) 2c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 20 25 12 23 
  TopQ.A RemainingLatency 0 + 19c > CritPath 6
  Cand SU(10) ORDER                              
  Cand SU(20) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(20) $x10 = ADRP target-flags(aarch64-page) @.str.10
  Ready @19c
  TopQ.A BotLatency SU(20) 2c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 23 25 12 21 
  TopQ.A RemainingLatency 0 + 20c > CritPath 6
  Cand SU(10) ORDER                              
  Cand SU(23) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(23) $x11 = ADRP target-flags(aarch64-page) @.str.11
  Ready @20c
  TopQ.A BotLatency SU(23) 2c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 21 25 12 24 
  TopQ.A RemainingLatency 0 + 21c > CritPath 6
  Cand SU(10) ORDER                              
  Cand SU(25) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(25) STPXi renamable $x8, renamable $x9, $sp, 17 :: (store 8 into %ir.arrayidx6), (store 8 into %ir.arrayidx7, align 16)
  Ready @21c
  TopQ.A TopLatency SU(25) 4c
  TopQ.A BotLatency SU(25) 2c
  *** Max MOps 1 at cycle 21
Cycle: 22 TopQ.A
TopQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 21 24 12 28 
  TopQ.A RemainingLatency 0 + 22c > CritPath 6
  Cand SU(10) ORDER                              
  Cand SU(28) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(28) $x8 = ADRP target-flags(aarch64-page) @.str.12
  Ready @22c
  TopQ.A BotLatency SU(28) 2c
  *** Max MOps 1 at cycle 22
Cycle: 23 TopQ.A
TopQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 21 24 12 29 
  TopQ.A RemainingLatency 0 + 23c > CritPath 6
  Cand SU(10) ORDER                              
Pick Top ORDER     
Scheduling SU(10) renamable $x13 = ADDXri $x13, target-flags(aarch64-pageoff, aarch64-nc) @.str.6, 0
  Ready @23c
  *** Max MOps 1 at cycle 23
Cycle: 24 TopQ.A
TopQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 29 21 24 12 
  TopQ.A RemainingLatency 0 + 24c > CritPath 6
  Cand SU(29) ORDER                              
  Cand SU(21) ORDER                              
  Cand SU(12) ORDER                              
Pick Top ORDER     
Scheduling SU(12) renamable $x14 = ADDXri $x14, target-flags(aarch64-pageoff, aarch64-nc) @.str.7, 0
  Ready @24c
  TopQ.A BotLatency SU(12) 1c
  *** Max MOps 1 at cycle 24
Cycle: 25 TopQ.A
TopQ.A @25c
  Retired: 25
  Executed: 25c
  Critical: 25c, 25 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 29 21 24 22 
  TopQ.A RemainingLatency 0 + 25c > CritPath 6
  Cand SU(29) ORDER                              
  Cand SU(21) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(21) renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.10, 0
  Ready @25c
  TopQ.A BotLatency SU(21) 1c
  *** Max MOps 1 at cycle 25
Cycle: 26 TopQ.A
TopQ.A @26c
  Retired: 26
  Executed: 26c
  Critical: 26c, 26 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 29 22 24 
  TopQ.A RemainingLatency 0 + 26c > CritPath 6
  Cand SU(29) ORDER                              
  Cand SU(24) ORDER                              
Pick Top ORDER     
Scheduling SU(24) renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @.str.11, 0
  Ready @26c
  TopQ.A BotLatency SU(24) 1c
  *** Max MOps 1 at cycle 26
Cycle: 27 TopQ.A
TopQ.A @27c
  Retired: 27
  Executed: 27c
  Critical: 27c, 27 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 29 22 27 
  TopQ.A RemainingLatency 0 + 27c > CritPath 6
  Cand SU(29) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(29) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.12, 0
  Ready @27c
  TopQ.A TopLatency SU(29) 5c
  TopQ.A BotLatency SU(29) 1c
  *** Max MOps 1 at cycle 27
Cycle: 28 TopQ.A
TopQ.A @28c
  Retired: 28
  Executed: 28c
  Critical: 28c, 28 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 27 22 30 
  TopQ.A RemainingLatency 0 + 28c > CritPath 6
  Cand SU(27) ORDER                              
  Cand SU(22) ORDER                              
Pick Top ORDER     
Scheduling SU(22) STPXi renamable $x13, renamable $x14, $sp, 15 :: (store 8 into %ir.arrayidx4), (store 8 into %ir.arrayidx5, align 16)
  Ready @28c
  *** Max MOps 1 at cycle 28
Cycle: 29 TopQ.A
TopQ.A @29c
  Retired: 29
  Executed: 29c
  Critical: 29c, 29 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 27 30 
  TopQ.A RemainingLatency 0 + 29c > CritPath 6
  Cand SU(27) ORDER                              
Pick Top ORDER     
Scheduling SU(27) STPXi renamable $x10, renamable $x11, $sp, 19 :: (store 8 into %ir.arrayidx8), (store 8 into %ir.arrayidx9, align 16)
  Ready @29c
  *** Max MOps 1 at cycle 29
Cycle: 30 TopQ.A
TopQ.A @30c
  Retired: 30
  Executed: 30c
  Critical: 30c, 30 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 30 
Pick Top ONLY1     
Scheduling SU(30) STRXui renamable $x8, $sp, 21 :: (store 8 into %ir.arrayidx10)
  Ready @30c
  TopQ.A TopLatency SU(30) 6c
  *** Max MOps 1 at cycle 30
Cycle: 31 TopQ.A
TopQ.A @31c
  Retired: 31
  Executed: 31c
  Critical: 31c, 31 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.1 ***
SU(1):   $x9 = ADRP target-flags(aarch64-page) @.str.2
SU(3):   $x10 = ADRP target-flags(aarch64-page) @.str.3
SU(0):   $w8 = MOVZWi 1, 0
SU(2):   renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.2, 0
SU(4):   renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.3, 0
SU(5):   $x11 = ADRP target-flags(aarch64-page) @.str.4
SU(7):   $x12 = ADRP target-flags(aarch64-page) @.str.5
SU(13):   STRWui renamable $w8, renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
SU(14):   $x8 = ADRP target-flags(aarch64-page) @.str.8
SU(16):   STPXi renamable $x9, renamable $x10, $sp, 11 :: (store 8 into %ir.arrayidx), (store 8 into %ir.arrayidx1, align 16)
SU(17):   $x9 = ADRP target-flags(aarch64-page) @.str.9
SU(26):   renamable $x0 = LDRXui $sp, 9 :: (dereferenceable load 8 from %ir.fp)
SU(6):   renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @.str.4, 0
SU(8):   renamable $x12 = ADDXri $x12, target-flags(aarch64-pageoff, aarch64-nc) @.str.5, 0
SU(15):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.8, 0
SU(18):   renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.9, 0
SU(9):   $x13 = ADRP target-flags(aarch64-page) @.str.6
SU(11):   $x14 = ADRP target-flags(aarch64-page) @.str.7
SU(19):   STPXi renamable $x11, renamable $x12, $sp, 13 :: (store 8 into %ir.arrayidx2), (store 8 into %ir.arrayidx3, align 16)
SU(20):   $x10 = ADRP target-flags(aarch64-page) @.str.10
SU(23):   $x11 = ADRP target-flags(aarch64-page) @.str.11
SU(25):   STPXi renamable $x8, renamable $x9, $sp, 17 :: (store 8 into %ir.arrayidx6), (store 8 into %ir.arrayidx7, align 16)
SU(28):   $x8 = ADRP target-flags(aarch64-page) @.str.12
SU(10):   renamable $x13 = ADDXri $x13, target-flags(aarch64-pageoff, aarch64-nc) @.str.6, 0
SU(12):   renamable $x14 = ADDXri $x14, target-flags(aarch64-pageoff, aarch64-nc) @.str.7, 0
SU(21):   renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.10, 0
SU(24):   renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @.str.11, 0
SU(29):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.12, 0
SU(22):   STPXi renamable $x13, renamable $x14, $sp, 15 :: (store 8 into %ir.arrayidx4), (store 8 into %ir.arrayidx5, align 16)
SU(27):   STPXi renamable $x10, renamable $x11, $sp, 19 :: (store 8 into %ir.arrayidx8), (store 8 into %ir.arrayidx9, align 16)
SU(30):   STRXui renamable $x8, $sp, 21 :: (store 8 into %ir.arrayidx10)

Fixup kills for %bb.1
Fixup kills for %bb.2
********** MI Scheduling **********
main:%bb.3 if.end
  From: renamable $x8 = ADRP target-flags(aarch64-page) %const.1
    To: BL @print_results, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit $w4, implicit $w5, implicit $d0, implicit $d1, implicit $x6, implicit $w7, implicit-def $sp
 RegionInstrs: 58
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) %const.1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 16
  Successors:
    SU(5): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x8
SU(1):   renamable $w2 = LDRWui renamable $x22, target-flags(aarch64-pageoff, aarch64-nc) @nx0 :: (dereferenceable load 4 from @nx0)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(11): Data Latency=4 Reg=$w2
    SU(8): Anti Latency=0
SU(2):   renamable $w3 = LDRWui renamable $x23, target-flags(aarch64-pageoff, aarch64-nc) @ny0 :: (dereferenceable load 4 from @ny0)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(11): Data Latency=4 Reg=$w3
SU(3):   renamable $w4 = LDRWui renamable $x24, target-flags(aarch64-pageoff, aarch64-nc) @nz0 :: (dereferenceable load 4 from @nz0)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(12): Data Latency=4 Reg=$w4
SU(4):   renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 15
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(10): Out  Latency=1
    SU(9): Data Latency=4 Reg=$d1
    SU(5): Anti Latency=0
SU(5):   renamable $x8 = ADRP target-flags(aarch64-page) %const.2
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 12
  Predecessors:
    SU(4): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    SU(11): Out  Latency=1
    SU(15): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x8
SU(6):   $x9 = MOVZXi 37968, 32
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x9
SU(7):   $x9 = MOVKXi $x9(tied-def 0), 49409, 48
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x9
  Successors:
    SU(33): Out  Latency=1
    SU(18): Data Latency=1 Reg=$x9
SU(8):   renamable $x22 = ADRP target-flags(aarch64-page) @maxtime
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 7
  Predecessors:
    SU(1): Anti Latency=0
  Successors:
    SU(22): Data Latency=1 Reg=$x22
SU(9):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 11
  Predecessors:
    SU(4): Data Latency=4 Reg=$d1
  Successors:
    SU(14): Out  Latency=1
    SU(13): Data Latency=1 Reg=$d0
    SU(10): Anti Latency=0
SU(10):   renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 11
  Predecessors:
    SU(9): Anti Latency=0
    SU(5): Data Latency=1 Reg=$x8
    SU(4): Out  Latency=1
  Successors:
    SU(18): Out  Latency=1
    SU(17): Data Latency=4 Reg=$d1
    SU(11): Anti Latency=0
    SU(15): Anti Latency=0
SU(11):   $w8 = ADDWrs renamable $w2, renamable $w3, 0
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(10): Anti Latency=0
    SU(5): Out  Latency=1
    SU(2): Data Latency=4 Reg=$w3
    SU(1): Data Latency=4 Reg=$w2
  Successors:
    SU(12): Out  Latency=1
    SU(15): Out  Latency=1
    SU(12): Data Latency=1 Reg=$w8
SU(12):   $w8 = ADDWrs renamable $w8, renamable $w4, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 9
  Predecessors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$w8
    SU(3): Data Latency=4 Reg=$w4
  Successors:
    SU(15): Out  Latency=1
    SU(14): Data Latency=1 Reg=$w8
    SU(15): Anti Latency=0
SU(13):   renamable $d2 = FADDDrr renamable $d10, renamable $d0
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 8
  Predecessors:
    SU(9): Data Latency=1 Reg=$d0
  Successors:
    SU(23): Out  Latency=1
    SU(23): Data Latency=1 Reg=$d2
    SU(14): Anti Latency=0
SU(14):   renamable $d0 = SCVTFUWDri renamable $w8
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 8
  Predecessors:
    SU(13): Anti Latency=0
    SU(12): Data Latency=1 Reg=$w8
    SU(9): Out  Latency=1
  Successors:
    SU(17): Out  Latency=1
    SU(17): Data Latency=1 Reg=$d0
    SU(15): Anti Latency=0
SU(15):   $x8 = MOVZXi 33920, 32
  # preds left       : 6
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 6
  Predecessors:
    SU(14): Anti Latency=0
    SU(12): Out  Latency=1
    SU(12): Anti Latency=0
    SU(11): Out  Latency=1
    SU(10): Anti Latency=0
    SU(5): Out  Latency=1
  Successors:
    SU(16): Out  Latency=1
    SU(16): Data Latency=1 Reg=$x8
SU(16):   $x8 = MOVKXi $x8(tied-def 0), 16686, 48
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(15): Out  Latency=1
    SU(15): Data Latency=1 Reg=$x8
  Successors:
    SU(31): Out  Latency=1
    SU(24): Data Latency=1 Reg=$x8
SU(17):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 7
  Predecessors:
    SU(14): Out  Latency=1
    SU(14): Data Latency=1 Reg=$d0
    SU(10): Data Latency=4 Reg=$d1
  Successors:
    SU(22): Out  Latency=1
    SU(21): Data Latency=1 Reg=$d0
    SU(18): Anti Latency=0
SU(18):   $d1 = FMOVXDr $x9
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(17): Anti Latency=0
    SU(10): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x9
  Successors:
    SU(26): Out  Latency=1
    SU(26): Data Latency=1 Reg=$d1
    SU(33): Anti Latency=0
SU(19):   renamable $w1 = LDURSBWi $fp, -108 :: (dereferenceable load 1 from %ir.Class, align 4)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(20):   renamable $w5 = LDRWui renamable $x21, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(21):   renamable $d3 = FDIVDrr renamable $d0, renamable $d8
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 6
  Predecessors:
    SU(17): Data Latency=1 Reg=$d0
  Successors:
    SU(24): Out  Latency=1
    SU(23): Data Latency=1 Reg=$d3
    SU(22): Anti Latency=0
SU(22):   renamable $d0 = LDRDui renamable $x22, target-flags(aarch64-pageoff, aarch64-nc) @maxtime :: (dereferenceable load 8 from @maxtime)
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 6
  Predecessors:
    SU(21): Anti Latency=0
    SU(17): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x22
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(28): Data Latency=4 Reg=$d0
SU(23):   renamable $d2 = FADDDrr renamable $d2, renamable $d3
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 4
  Predecessors:
    SU(21): Data Latency=1 Reg=$d3
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$d2
  Successors:
    SU(28): Out  Latency=1
    SU(26): Data Latency=1 Reg=$d2
    SU(24): Anti Latency=0
SU(24):   $d3 = FMOVXDr $x8
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 4
  Predecessors:
    SU(23): Anti Latency=0
    SU(21): Out  Latency=1
    SU(16): Data Latency=1 Reg=$x8
  Successors:
    SU(28): Data Latency=1 Reg=$d3
    SU(31): Anti Latency=0
SU(25):   renamable $w7 = LDURWi $fp, -112 :: (dereferenceable load 4 from %ir.verified)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(26):   renamable $d1 = FADDDrr renamable $d2, renamable $d1
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 3
  Predecessors:
    SU(23): Data Latency=1 Reg=$d2
    SU(18): Out  Latency=1
    SU(18): Data Latency=1 Reg=$d1
  Successors:
    SU(27): Out  Latency=1
    SU(27): Data Latency=1 Reg=$d1
    SU(28): Anti Latency=0
SU(27):   renamable $d1 = FMULDrr renamable $d9, renamable $d1
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 2
  Predecessors:
    SU(26): Out  Latency=1
    SU(26): Data Latency=1 Reg=$d1
  Successors:
    SU(29): Out  Latency=1
    SU(29): Data Latency=1 Reg=$d1
SU(28):   renamable $d2 = FMULDrr renamable $d0, renamable $d3
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 2
  Predecessors:
    SU(26): Anti Latency=0
    SU(24): Data Latency=1 Reg=$d3
    SU(23): Out  Latency=1
    SU(22): Data Latency=4 Reg=$d0
  Successors:
    SU(29): Data Latency=1 Reg=$d2
SU(29):   renamable $d1 = FDIVDrr renamable $d1, renamable $d2
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 1
  Predecessors:
    SU(28): Data Latency=1 Reg=$d2
    SU(27): Out  Latency=1
    SU(27): Data Latency=1 Reg=$d1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(30): Data Latency=1 Reg=$d1
SU(30):   STURDi renamable $d1, $fp, -120 :: (store 8 into %ir.mflops)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(29): Data Latency=1 Reg=$d1
SU(31):   $x8 = ADRP target-flags(aarch64-page) @.str.23
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 4
  Predecessors:
    SU(24): Anti Latency=0
    SU(16): Out  Latency=1
  Successors:
    SU(32): Out  Latency=1
    SU(32): Data Latency=1 Reg=$x8
SU(32):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.23, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 3
  Predecessors:
    SU(31): Out  Latency=1
    SU(31): Data Latency=1 Reg=$x8
  Successors:
    SU(46): Out  Latency=1
    SU(45): Data Latency=1 Reg=$x8
SU(33):   $x9 = ADRP target-flags(aarch64-page) @.str.22
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(18): Anti Latency=0
    SU(7): Out  Latency=1
  Successors:
    SU(34): Out  Latency=1
    SU(34): Data Latency=1 Reg=$x9
SU(34):   renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.22, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 3
  Predecessors:
    SU(33): Out  Latency=1
    SU(33): Data Latency=1 Reg=$x9
  Successors:
    SU(49): Out  Latency=1
    SU(45): Data Latency=1 Reg=$x9
SU(35):   $x10 = ADRP target-flags(aarch64-page) @.str.21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(36): Out  Latency=1
    SU(36): Data Latency=1 Reg=$x10
SU(36):   renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.21, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(35): Out  Latency=1
    SU(35): Data Latency=1 Reg=$x10
  Successors:
    SU(48): Data Latency=1 Reg=$x10
SU(37):   $x11 = ADRP target-flags(aarch64-page) @.str.20
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(38): Out  Latency=1
    SU(38): Data Latency=1 Reg=$x11
SU(38):   renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @.str.20, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(37): Out  Latency=1
    SU(37): Data Latency=1 Reg=$x11
  Successors:
    SU(48): Data Latency=1 Reg=$x11
SU(39):   $x12 = ADRP target-flags(aarch64-page) @.str.19
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(40): Out  Latency=1
    SU(40): Data Latency=1 Reg=$x12
SU(40):   renamable $x12 = ADDXri $x12, target-flags(aarch64-pageoff, aarch64-nc) @.str.19, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(39): Out  Latency=1
    SU(39): Data Latency=1 Reg=$x12
  Successors:
    SU(51): Data Latency=1 Reg=$x12
SU(41):   $x13 = ADRP target-flags(aarch64-page) @.str.18
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(42): Out  Latency=1
    SU(42): Data Latency=1 Reg=$x13
SU(42):   renamable $x13 = ADDXri $x13, target-flags(aarch64-pageoff, aarch64-nc) @.str.18, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(41): Out  Latency=1
    SU(41): Data Latency=1 Reg=$x13
  Successors:
    SU(51): Data Latency=1 Reg=$x13
SU(43):   $x14 = ADRP target-flags(aarch64-page) @.str.17
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(44): Out  Latency=1
    SU(44): Data Latency=1 Reg=$x14
SU(44):   renamable $x14 = ADDXri $x14, target-flags(aarch64-pageoff, aarch64-nc) @.str.17, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(43): Out  Latency=1
    SU(43): Data Latency=1 Reg=$x14
  Successors:
    SU(54): Data Latency=1 Reg=$x14
SU(45):   STPXi renamable $x9, renamable $x8, $sp, 7 :: (store 8 into stack + 64), (store 8 into stack + 56)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 2
  Predecessors:
    SU(32): Data Latency=1 Reg=$x8
    SU(34): Data Latency=1 Reg=$x9
  Successors:
    SU(49): Anti Latency=0
    SU(46): Anti Latency=0
SU(46):   $x8 = ADRP target-flags(aarch64-page) @.str.16
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 2
  Predecessors:
    SU(45): Anti Latency=0
    SU(32): Out  Latency=1
  Successors:
    SU(47): Out  Latency=1
    SU(47): Data Latency=1 Reg=$x8
SU(47):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.16, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 1
  Predecessors:
    SU(46): Out  Latency=1
    SU(46): Data Latency=1 Reg=$x8
  Successors:
    SU(54): Data Latency=1 Reg=$x8
SU(48):   STPXi renamable $x11, renamable $x10, $sp, 5 :: (store 8 into stack + 48), (store 8 into stack + 40)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(38): Data Latency=1 Reg=$x11
    SU(36): Data Latency=1 Reg=$x10
SU(49):   $x9 = ADRP target-flags(aarch64-page) @.str.15
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 2
  Predecessors:
    SU(45): Anti Latency=0
    SU(34): Out  Latency=1
  Successors:
    SU(50): Out  Latency=1
    SU(50): Data Latency=1 Reg=$x9
SU(50):   renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.15, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 1
  Predecessors:
    SU(49): Out  Latency=1
    SU(49): Data Latency=1 Reg=$x9
  Successors:
    SU(57): Data Latency=1 Reg=$x9
SU(51):   STPXi renamable $x13, renamable $x12, $sp, 3 :: (store 8 into stack + 32), (store 8 into stack + 24)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(42): Data Latency=1 Reg=$x13
    SU(40): Data Latency=1 Reg=$x12
SU(52):   $x0 = ADRP target-flags(aarch64-page) @.str.13
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(53): Out  Latency=1
    SU(53): Data Latency=1 Reg=$x0
SU(53):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.13, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(52): Out  Latency=1
    SU(52): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(54):   STPXi renamable $x8, renamable $x14, $sp, 1 :: (store 8 into stack + 16), (store 8 into stack + 8)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(47): Data Latency=1 Reg=$x8
    SU(44): Data Latency=1 Reg=$x14
SU(55):   $x6 = ADRP target-flags(aarch64-page) @.str.14
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(56): Out  Latency=1
    SU(56): Data Latency=1 Reg=$x6
SU(56):   renamable $x6 = ADDXri $x6, target-flags(aarch64-pageoff, aarch64-nc) @.str.14, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(55): Out  Latency=1
    SU(55): Data Latency=1 Reg=$x6
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(57):   STRXui renamable $x9, $sp, 0 :: (store 8 into stack)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(50): Data Latency=1 Reg=$x9
ExitSU:   BL @print_results, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit $w4, implicit $w5, implicit $d0, implicit $d1, implicit $x6, implicit $w7, implicit-def $sp
  # preds left       : 10
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(56): Ord  Latency=1 Artificial
    SU(53): Ord  Latency=1 Artificial
    SU(29): Ord  Latency=1 Artificial
    SU(25): Ord  Latency=4 Artificial
    SU(22): Ord  Latency=4 Artificial
    SU(20): Ord  Latency=4 Artificial
    SU(19): Ord  Latency=4 Artificial
    SU(3): Ord  Latency=4 Artificial
    SU(2): Ord  Latency=4 Artificial
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 16
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 6 19 20 25 35 37 39 41 43 52 55 
  TopQ.A RemainingLatency 0 + 0c > CritPath 16
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) %const.1
  Ready @0c
  TopQ.A BotLatency SU(0) 16c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 55 1 2 3 6 19 20 25 35 37 39 41 43 52 4 
  TopQ.A RemainingLatency 0 + 1c > CritPath 16
  Cand SU(55) ORDER                              
  Cand SU(1) TOP-PATH                  14 cycles 
  Cand SU(4) TOP-PATH                  15 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  Ready @1c
  TopQ.A TopLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 9 
Queue TopQ.A: 55 1 2 3 6 19 20 25 35 37 39 41 43 52 5 
  TopQ.A RemainingLatency 0 + 2c > CritPath 16
  Cand SU(55) ORDER                              
  Cand SU(1) TOP-PATH                  14 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w2 = LDRWui renamable $x22, target-flags(aarch64-pageoff, aarch64-nc) @nx0 :: (dereferenceable load 4 from @nx0)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 9 
Queue TopQ.A: 55 5 2 3 6 19 20 25 35 37 39 41 43 52 8 
  TopQ.A RemainingLatency 0 + 3c > CritPath 16
  Cand SU(55) ORDER                              
  Cand SU(5) TOP-PATH                  12 cycles 
  Cand SU(2) TOP-PATH                  14 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $w3 = LDRWui renamable $x23, target-flags(aarch64-pageoff, aarch64-nc) @ny0 :: (dereferenceable load 4 from @ny0)
  Ready @3c
  TopQ.A BotLatency SU(2) 14c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 9 
Queue TopQ.A: 55 5 8 3 6 19 20 25 35 37 39 41 43 52 
  TopQ.A RemainingLatency 0 + 4c > CritPath 16
  Cand SU(55) ORDER                              
  Cand SU(5) TOP-PATH                  12 cycles 
  Cand SU(3) TOP-PATH                  13 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $w4 = LDRWui renamable $x24, target-flags(aarch64-pageoff, aarch64-nc) @nz0 :: (dereferenceable load 4 from @nz0)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 55 5 8 52 6 19 20 25 35 37 39 41 43 9 
  TopQ.A RemainingLatency 0 + 5c > CritPath 16
  Cand SU(55) ORDER                              
  Cand SU(5) TOP-PATH                  12 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $x8 = ADRP target-flags(aarch64-page) %const.2
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 55 9 8 52 6 19 20 25 35 37 39 41 43 
  TopQ.A RemainingLatency 0 + 6c > CritPath 16
  Cand SU(55) ORDER                              
  Cand SU(9) TOP-PATH                  11 cycles 
Pick Top TOP-PATH  
Scheduling SU(9) renamable $d0 = FMULDrr renamable $d0, renamable $d1
  Ready @6c
  TopQ.A TopLatency SU(9) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 55 43 8 52 6 19 20 25 35 37 39 41 13 10 
  TopQ.A RemainingLatency 0 + 7c > CritPath 16
  Cand SU(55) ORDER                              
  Cand SU(43) ORDER                              
  Cand SU(8) TOP-PATH                  7 cycles 
  Cand SU(13) TOP-PATH                  8 cycles 
  Cand SU(10) TOP-PATH                  11 cycles 
Pick Top TOP-PATH  
Scheduling SU(10) renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  Ready @7c
  TopQ.A BotLatency SU(10) 11c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 55 43 8 52 6 19 20 25 35 37 39 41 13 11 
  TopQ.A RemainingLatency 0 + 8c > CritPath 16
  Cand SU(55) ORDER                              
  Cand SU(43) ORDER                              
  Cand SU(8) TOP-PATH                  7 cycles 
  Cand SU(13) TOP-PATH                  8 cycles 
  Cand SU(11) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(11) $w8 = ADDWrs renamable $w2, renamable $w3, 0
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 55 43 8 52 6 19 20 25 35 37 39 41 13 12 
  TopQ.A RemainingLatency 0 + 9c > CritPath 16
  Cand SU(55) ORDER                              
  Cand SU(43) ORDER                              
  Cand SU(8) TOP-PATH                  7 cycles 
  Cand SU(13) TOP-PATH                  8 cycles 
  Cand SU(12) TOP-PATH                  9 cycles 
Pick Top TOP-PATH  
Scheduling SU(12) $w8 = ADDWrs renamable $w8, renamable $w4, 0
  Ready @9c
  TopQ.A TopLatency SU(12) 6c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 55 43 8 52 6 19 20 25 35 37 39 41 13 
  TopQ.A RemainingLatency 0 + 10c > CritPath 16
  Cand SU(55) ORDER                              
  Cand SU(43) ORDER                              
  Cand SU(8) TOP-PATH                  7 cycles 
  Cand SU(13) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(13) renamable $d2 = FADDDrr renamable $d10, renamable $d0
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 55 43 8 52 6 19 20 25 35 37 39 41 14 
  TopQ.A RemainingLatency 0 + 11c > CritPath 16
  Cand SU(55) ORDER                              
  Cand SU(43) ORDER                              
  Cand SU(8) TOP-PATH                  7 cycles 
  Cand SU(14) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(14) renamable $d0 = SCVTFUWDri renamable $w8
  Ready @11c
  TopQ.A TopLatency SU(14) 7c
  TopQ.A BotLatency SU(14) 8c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 55 43 8 52 6 19 20 25 35 37 39 41 17 15 
  TopQ.A RemainingLatency 0 + 12c > CritPath 16
  Cand SU(55) ORDER                              
  Cand SU(43) ORDER                              
  Cand SU(8) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $x22 = ADRP target-flags(aarch64-page) @maxtime
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 55 43 15 52 6 19 20 25 35 37 39 41 17 
  TopQ.A RemainingLatency 0 + 13c > CritPath 16
  Cand SU(55) ORDER                              
  Cand SU(43) ORDER                              
  Cand SU(15) TOP-PATH                  6 cycles 
  Cand SU(6) ORDER                              
  Cand SU(17) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(17) renamable $d0 = FMULDrr renamable $d0, renamable $d1
  Ready @13c
  TopQ.A TopLatency SU(17) 9c
  TopQ.A BotLatency SU(17) 7c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 55 43 15 52 6 19 20 25 35 37 39 41 21 
  TopQ.A RemainingLatency 0 + 14c > CritPath 16
  Cand SU(55) ORDER                              
  Cand SU(43) ORDER                              
  Cand SU(15) TOP-PATH                  6 cycles 
  Cand SU(6) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(6) $x9 = MOVZXi 37968, 32
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 55 43 15 52 21 19 20 25 35 37 39 41 7 
  TopQ.A RemainingLatency 0 + 15c > CritPath 16
  Cand SU(55) ORDER                              
  Cand SU(43) ORDER                              
  Cand SU(15) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(15) $x8 = MOVZXi 33920, 32
  Ready @15c
  TopQ.A BotLatency SU(15) 6c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 55 43 7 52 21 19 20 25 35 37 39 41 16 
  TopQ.A RemainingLatency 0 + 16c > CritPath 16
  Cand SU(55) ORDER                              
  Cand SU(43) ORDER                              
  Cand SU(7) TOP-PATH                  5 cycles 
  Cand SU(21) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(21) renamable $d3 = FDIVDrr renamable $d0, renamable $d8
  Ready @16c
  TopQ.A TopLatency SU(21) 10c
  TopQ.A BotLatency SU(21) 6c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 55 43 7 52 16 19 20 25 35 37 39 41 23 22 
  TopQ.A RemainingLatency 0 + 17c > CritPath 16
  Cand SU(55) ORDER                              
  Cand SU(43) ORDER                              
  Cand SU(7) TOP-PATH                  5 cycles 
  Cand SU(22) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(22) renamable $d0 = LDRDui renamable $x22, target-flags(aarch64-pageoff, aarch64-nc) @maxtime :: (dereferenceable load 8 from @maxtime)
  Ready @17c
  TopQ.A BotLatency SU(22) 6c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 55 43 7 52 16 19 20 25 35 37 39 41 23 
  TopQ.A RemainingLatency 0 + 18c > CritPath 16
  Cand SU(55) ORDER                              
  Cand SU(43) ORDER                              
  Cand SU(7) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) $x9 = MOVKXi $x9(tied-def 0), 49409, 48
  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 55 43 23 52 16 19 20 25 35 37 39 41 18 
  TopQ.A RemainingLatency 0 + 19c > CritPath 16
  Cand SU(55) ORDER                              
  Cand SU(43) ORDER                              
  Cand SU(23) TOP-PATH                  4 cycles 
  Cand SU(16) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(16) $x8 = MOVKXi $x8(tied-def 0), 16686, 48
  Ready @19c
  TopQ.A BotLatency SU(16) 5c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 55 43 23 52 18 19 20 25 35 37 39 41 
  TopQ.A RemainingLatency 0 + 20c > CritPath 16
  Cand SU(55) ORDER                              
  Cand SU(43) ORDER                              
  Cand SU(23) TOP-PATH                  4 cycles 
  Cand SU(18) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(18) $d1 = FMOVXDr $x9
  Ready @20c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 55 43 23 52 41 19 20 25 35 37 39 33 
  TopQ.A RemainingLatency 0 + 21c > CritPath 16
  Cand SU(55) ORDER                              
  Cand SU(43) ORDER                              
  Cand SU(23) TOP-PATH                  4 cycles 
  Cand SU(19) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(19) renamable $w1 = LDURSBWi $fp, -108 :: (dereferenceable load 1 from %ir.Class, align 4)
  Ready @21c
  TopQ.A BotLatency SU(19) 4c
  *** Max MOps 1 at cycle 21
Cycle: 22 TopQ.A
TopQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 55 43 23 52 41 33 20 25 35 37 39 
  TopQ.A RemainingLatency 0 + 22c > CritPath 16
  Cand SU(55) ORDER                              
  Cand SU(43) ORDER                              
  Cand SU(23) TOP-PATH                  4 cycles 
  Cand SU(20) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(20) renamable $w5 = LDRWui renamable $x21, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)
  Ready @22c
  TopQ.A BotLatency SU(20) 4c
  *** Max MOps 1 at cycle 22
Cycle: 23 TopQ.A
TopQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 55 43 23 52 41 33 39 25 35 37 
  TopQ.A RemainingLatency 0 + 23c > CritPath 16
  Cand SU(55) ORDER                              
  Cand SU(43) ORDER                              
  Cand SU(23) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(23) renamable $d2 = FADDDrr renamable $d2, renamable $d3
  Ready @23c
  TopQ.A TopLatency SU(23) 11c
  TopQ.A BotLatency SU(23) 4c
  *** Max MOps 1 at cycle 23
Cycle: 24 TopQ.A
TopQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 55 43 37 52 41 33 39 25 35 26 24 
  TopQ.A RemainingLatency 0 + 24c > CritPath 16
  Cand SU(55) ORDER                              
  Cand SU(43) ORDER                              
  Cand SU(37) ORDER                              
  Cand SU(33) TOP-PATH                  4 cycles 
  Cand SU(25) ORDER                              
  Cand SU(24) ORDER                              
Pick Top ORDER     
Scheduling SU(24) $d3 = FMOVXDr $x8
  Ready @24c
  TopQ.A BotLatency SU(24) 4c
  *** Max MOps 1 at cycle 24
Cycle: 25 TopQ.A
TopQ.A @25c
  Retired: 25
  Executed: 25c
  Critical: 25c, 25 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 55 43 37 52 41 33 39 25 35 26 31 
  TopQ.A RemainingLatency 0 + 25c > CritPath 16
  Cand SU(55) ORDER                              
  Cand SU(43) ORDER                              
  Cand SU(37) ORDER                              
  Cand SU(33) TOP-PATH                  4 cycles 
  Cand SU(25) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(25) renamable $w7 = LDURWi $fp, -112 :: (dereferenceable load 4 from %ir.verified)
  Ready @25c
  TopQ.A BotLatency SU(25) 4c
  *** Max MOps 1 at cycle 25
Cycle: 26 TopQ.A
TopQ.A @26c
  Retired: 26
  Executed: 26c
  Critical: 26c, 26 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 55 43 37 52 41 33 39 31 35 26 
  TopQ.A RemainingLatency 0 + 26c > CritPath 16
  Cand SU(55) ORDER                              
  Cand SU(43) ORDER                              
  Cand SU(37) ORDER                              
  Cand SU(33) TOP-PATH                  4 cycles 
  Cand SU(31) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(31) $x8 = ADRP target-flags(aarch64-page) @.str.23
  Ready @26c
  TopQ.A BotLatency SU(31) 4c
  *** Max MOps 1 at cycle 26
Cycle: 27 TopQ.A
TopQ.A @27c
  Retired: 27
  Executed: 27c
  Critical: 27c, 27 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 55 43 37 52 41 33 39 26 35 32 
  TopQ.A RemainingLatency 0 + 27c > CritPath 16
  Cand SU(55) ORDER                              
  Cand SU(43) ORDER                              
  Cand SU(37) ORDER                              
  Cand SU(33) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(33) $x9 = ADRP target-flags(aarch64-page) @.str.22
  Ready @27c
  TopQ.A BotLatency SU(33) 4c
  *** Max MOps 1 at cycle 27
Cycle: 28 TopQ.A
TopQ.A @28c
  Retired: 28
  Executed: 28c
  Critical: 28c, 28 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 55 43 37 52 41 32 39 26 35 34 
  TopQ.A RemainingLatency 0 + 28c > CritPath 16
  Cand SU(55) ORDER                              
  Cand SU(43) ORDER                              
  Cand SU(37) ORDER                              
  Cand SU(32) TOP-PATH                  3 cycles 
  Cand SU(26) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(26) renamable $d1 = FADDDrr renamable $d2, renamable $d1
  Ready @28c
  TopQ.A TopLatency SU(26) 12c
  *** Max MOps 1 at cycle 28
Cycle: 29 TopQ.A
TopQ.A @29c
  Retired: 29
  Executed: 29c
  Critical: 29c, 29 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 55 43 37 52 41 32 39 34 35 27 28 
  TopQ.A RemainingLatency 0 + 29c > CritPath 16
  Cand SU(55) ORDER                              
  Cand SU(43) ORDER                              
  Cand SU(37) ORDER                              
  Cand SU(32) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(32) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.23, 0
  Ready @29c
  TopQ.A BotLatency SU(32) 3c
  *** Max MOps 1 at cycle 29
Cycle: 30 TopQ.A
TopQ.A @30c
  Retired: 30
  Executed: 30c
  Critical: 30c, 30 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 55 43 37 52 41 28 39 34 35 27 
  TopQ.A RemainingLatency 0 + 30c > CritPath 16
  Cand SU(55) ORDER                              
  Cand SU(43) ORDER                              
  Cand SU(37) ORDER                              
  Cand SU(28) ORDER                              
  Cand SU(34) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(34) renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.22, 0
  Ready @30c
  TopQ.A BotLatency SU(34) 3c
  *** Max MOps 1 at cycle 30
Cycle: 31 TopQ.A
TopQ.A @31c
  Retired: 31
  Executed: 31c
  Critical: 31c, 31 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 55 43 37 52 41 28 39 27 35 45 
  TopQ.A RemainingLatency 0 + 31c > CritPath 16
  Cand SU(55) ORDER                              
  Cand SU(43) ORDER                              
  Cand SU(37) ORDER                              
  Cand SU(28) ORDER                              
  Cand SU(27) ORDER                              
Pick Top ORDER     
Scheduling SU(27) renamable $d1 = FMULDrr renamable $d9, renamable $d1
  Ready @31c
  TopQ.A TopLatency SU(27) 13c
  *** Max MOps 1 at cycle 31
Cycle: 32 TopQ.A
TopQ.A @32c
  Retired: 32
  Executed: 32c
  Critical: 32c, 32 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 55 43 37 52 41 28 39 45 35 
  TopQ.A RemainingLatency 0 + 32c > CritPath 16
  Cand SU(55) ORDER                              
  Cand SU(43) ORDER                              
  Cand SU(37) ORDER                              
  Cand SU(28) ORDER                              
Pick Top ORDER     
Scheduling SU(28) renamable $d2 = FMULDrr renamable $d0, renamable $d3
  Ready @32c
  TopQ.A TopLatency SU(28) 14c
  TopQ.A BotLatency SU(28) 2c
  *** Max MOps 1 at cycle 32
Cycle: 33 TopQ.A
TopQ.A @33c
  Retired: 33
  Executed: 33c
  Critical: 33c, 33 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 55 43 37 52 41 35 39 45 29 
  TopQ.A RemainingLatency 0 + 33c > CritPath 16
  Cand SU(55) ORDER                              
  Cand SU(43) ORDER                              
  Cand SU(37) ORDER                              
  Cand SU(35) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(35) $x10 = ADRP target-flags(aarch64-page) @.str.21
  Ready @33c
  TopQ.A BotLatency SU(35) 2c
  *** Max MOps 1 at cycle 33
Cycle: 34 TopQ.A
TopQ.A @34c
  Retired: 34
  Executed: 34c
  Critical: 34c, 34 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 55 43 37 52 41 29 39 45 36 
  TopQ.A RemainingLatency 0 + 34c > CritPath 16
  Cand SU(55) ORDER                              
  Cand SU(43) ORDER                              
  Cand SU(37) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(37) $x11 = ADRP target-flags(aarch64-page) @.str.20
  Ready @34c
  TopQ.A BotLatency SU(37) 2c
  *** Max MOps 1 at cycle 34
Cycle: 35 TopQ.A
TopQ.A @35c
  Retired: 35
  Executed: 35c
  Critical: 35c, 35 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 55 43 36 52 41 29 39 45 38 
  TopQ.A RemainingLatency 0 + 35c > CritPath 16
  Cand SU(55) ORDER                              
  Cand SU(43) ORDER                              
  Cand SU(41) ORDER                              
  Cand SU(39) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(39) $x12 = ADRP target-flags(aarch64-page) @.str.19
  Ready @35c
  TopQ.A BotLatency SU(39) 2c
  *** Max MOps 1 at cycle 35
Cycle: 36 TopQ.A
TopQ.A @36c
  Retired: 36
  Executed: 36c
  Critical: 36c, 36 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 55 43 36 52 41 29 38 45 40 
  TopQ.A RemainingLatency 0 + 36c > CritPath 16
  Cand SU(55) ORDER                              
  Cand SU(43) ORDER                              
  Cand SU(41) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(41) $x13 = ADRP target-flags(aarch64-page) @.str.18
  Ready @36c
  TopQ.A BotLatency SU(41) 2c
  *** Max MOps 1 at cycle 36
Cycle: 37 TopQ.A
TopQ.A @37c
  Retired: 37
  Executed: 37c
  Critical: 37c, 37 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 55 43 36 52 40 29 38 45 42 
  TopQ.A RemainingLatency 0 + 37c > CritPath 16
  Cand SU(55) ORDER                              
  Cand SU(43) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(43) $x14 = ADRP target-flags(aarch64-page) @.str.17
  Ready @37c
  TopQ.A BotLatency SU(43) 2c
  *** Max MOps 1 at cycle 37
Cycle: 38 TopQ.A
TopQ.A @38c
  Retired: 38
  Executed: 38c
  Critical: 38c, 38 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 55 42 36 52 40 29 38 45 44 
  TopQ.A RemainingLatency 0 + 38c > CritPath 16
  Cand SU(55) ORDER                              
  Cand SU(52) ORDER                              
  Cand SU(45) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(45) STPXi renamable $x9, renamable $x8, $sp, 7 :: (store 8 into stack + 64), (store 8 into stack + 56)
  Ready @38c
  TopQ.A BotLatency SU(45) 2c
  *** Max MOps 1 at cycle 38
Cycle: 39 TopQ.A
TopQ.A @39c
  Retired: 39
  Executed: 39c
  Critical: 39c, 39 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 55 42 36 52 40 29 38 44 49 46 
  TopQ.A RemainingLatency 0 + 39c > CritPath 16
  Cand SU(55) ORDER                              
  Cand SU(52) ORDER                              
  Cand SU(49) ORDER                              
  Cand SU(46) ORDER                              
Pick Top ORDER     
Scheduling SU(46) $x8 = ADRP target-flags(aarch64-page) @.str.16
  Ready @39c
  TopQ.A BotLatency SU(46) 2c
  *** Max MOps 1 at cycle 39
Cycle: 40 TopQ.A
TopQ.A @40c
  Retired: 40
  Executed: 40c
  Critical: 40c, 40 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 55 42 36 52 40 29 38 44 49 47 
  TopQ.A RemainingLatency 0 + 40c > CritPath 16
  Cand SU(55) ORDER                              
  Cand SU(52) ORDER                              
  Cand SU(49) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(49) $x9 = ADRP target-flags(aarch64-page) @.str.15
  Ready @40c
  TopQ.A BotLatency SU(49) 2c
  *** Max MOps 1 at cycle 40
Cycle: 41 TopQ.A
TopQ.A @41c
  Retired: 41
  Executed: 41c
  Critical: 41c, 41 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 55 42 36 52 40 29 38 44 47 50 
  TopQ.A RemainingLatency 0 + 41c > CritPath 16
  Cand SU(55) ORDER                              
  Cand SU(52) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(52) $x0 = ADRP target-flags(aarch64-page) @.str.13
  Ready @41c
  TopQ.A BotLatency SU(52) 2c
  *** Max MOps 1 at cycle 41
Cycle: 42 TopQ.A
TopQ.A @42c
  Retired: 42
  Executed: 42c
  Critical: 42c, 42 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 55 42 36 50 40 29 38 44 47 53 
  TopQ.A RemainingLatency 0 + 42c > CritPath 16
  Cand SU(55) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(55) $x6 = ADRP target-flags(aarch64-page) @.str.14
  Ready @42c
  TopQ.A BotLatency SU(55) 2c
  *** Max MOps 1 at cycle 42
Cycle: 43 TopQ.A
TopQ.A @43c
  Retired: 43
  Executed: 43c
  Critical: 43c, 43 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 53 42 36 50 40 29 38 44 47 56 
  TopQ.A RemainingLatency 0 + 43c > CritPath 16
  Cand SU(53) ORDER                              
  Cand SU(42) ORDER                              
  Cand SU(36) ORDER                              
  Cand SU(29) ORDER                              
Pick Top ORDER     
Scheduling SU(29) renamable $d1 = FDIVDrr renamable $d1, renamable $d2
  Ready @43c
  TopQ.A TopLatency SU(29) 15c
  *** Max MOps 1 at cycle 43
Cycle: 44 TopQ.A
TopQ.A @44c
  Retired: 44
  Executed: 44c
  Critical: 44c, 44 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 53 42 36 50 40 56 38 44 47 30 
  TopQ.A RemainingLatency 0 + 44c > CritPath 16
  Cand SU(53) ORDER                              
  Cand SU(42) ORDER                              
  Cand SU(36) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(36) renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.21, 0
  Ready @44c
  TopQ.A BotLatency SU(36) 1c
  *** Max MOps 1 at cycle 44
Cycle: 45 TopQ.A
TopQ.A @45c
  Retired: 45
  Executed: 45c
  Critical: 45c, 45 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 53 42 30 50 40 56 38 44 47 
  TopQ.A RemainingLatency 0 + 45c > CritPath 16
  Cand SU(53) ORDER                              
  Cand SU(42) ORDER                              
  Cand SU(40) ORDER                              
  Cand SU(38) ORDER                              
Pick Top ORDER     
Scheduling SU(38) renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @.str.20, 0
  Ready @45c
  TopQ.A BotLatency SU(38) 1c
  *** Max MOps 1 at cycle 45
Cycle: 46 TopQ.A
TopQ.A @46c
  Retired: 46
  Executed: 46c
  Critical: 46c, 46 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 53 42 30 50 40 56 47 44 48 
  TopQ.A RemainingLatency 0 + 46c > CritPath 16
  Cand SU(53) ORDER                              
  Cand SU(42) ORDER                              
  Cand SU(40) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(40) renamable $x12 = ADDXri $x12, target-flags(aarch64-pageoff, aarch64-nc) @.str.19, 0
  Ready @46c
  TopQ.A BotLatency SU(40) 1c
  *** Max MOps 1 at cycle 46
Cycle: 47 TopQ.A
TopQ.A @47c
  Retired: 47
  Executed: 47c
  Critical: 47c, 47 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 53 42 30 50 48 56 47 44 
  TopQ.A RemainingLatency 0 + 47c > CritPath 16
  Cand SU(53) ORDER                              
  Cand SU(42) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(42) renamable $x13 = ADDXri $x13, target-flags(aarch64-pageoff, aarch64-nc) @.str.18, 0
  Ready @47c
  TopQ.A BotLatency SU(42) 1c
  *** Max MOps 1 at cycle 47
Cycle: 48 TopQ.A
TopQ.A @48c
  Retired: 48
  Executed: 48c
  Critical: 48c, 48 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 53 44 30 50 48 56 47 51 
  TopQ.A RemainingLatency 0 + 48c > CritPath 16
  Cand SU(53) ORDER                              
  Cand SU(44) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(44) renamable $x14 = ADDXri $x14, target-flags(aarch64-pageoff, aarch64-nc) @.str.17, 0
  Ready @48c
  TopQ.A BotLatency SU(44) 1c
  *** Max MOps 1 at cycle 48
Cycle: 49 TopQ.A
TopQ.A @49c
  Retired: 49
  Executed: 49c
  Critical: 49c, 49 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 53 51 30 50 48 56 47 
  TopQ.A RemainingLatency 0 + 49c > CritPath 16
  Cand SU(53) ORDER                              
  Cand SU(50) ORDER                              
  Cand SU(47) ORDER                              
Pick Top ORDER     
Scheduling SU(47) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.16, 0
  Ready @49c
  TopQ.A BotLatency SU(47) 1c
  *** Max MOps 1 at cycle 49
Cycle: 50 TopQ.A
TopQ.A @50c
  Retired: 50
  Executed: 50c
  Critical: 50c, 50 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 53 51 30 50 48 56 54 
  TopQ.A RemainingLatency 0 + 50c > CritPath 16
  Cand SU(53) ORDER                              
  Cand SU(50) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(50) renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.15, 0
  Ready @50c
  TopQ.A BotLatency SU(50) 1c
  *** Max MOps 1 at cycle 50
Cycle: 51 TopQ.A
TopQ.A @51c
  Retired: 51
  Executed: 51c
  Critical: 51c, 51 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 53 51 30 54 48 56 57 
  TopQ.A RemainingLatency 0 + 51c > CritPath 16
  Cand SU(53) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(53) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.13, 0
  Ready @51c
  TopQ.A BotLatency SU(53) 1c
  *** Max MOps 1 at cycle 51
Cycle: 52 TopQ.A
TopQ.A @52c
  Retired: 52
  Executed: 52c
  Critical: 52c, 52 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 57 51 30 54 48 56 
  TopQ.A RemainingLatency 0 + 52c > CritPath 16
  Cand SU(57) ORDER                              
  Cand SU(51) ORDER                              
  Cand SU(30) ORDER                              
  Cand SU(56) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(56) renamable $x6 = ADDXri $x6, target-flags(aarch64-pageoff, aarch64-nc) @.str.14, 0
  Ready @52c
  TopQ.A BotLatency SU(56) 1c
  *** Max MOps 1 at cycle 52
Cycle: 53 TopQ.A
TopQ.A @53c
  Retired: 53
  Executed: 53c
  Critical: 53c, 53 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 57 51 30 54 48 
  TopQ.A RemainingLatency 0 + 53c > CritPath 16
  Cand SU(57) ORDER                              
  Cand SU(51) ORDER                              
  Cand SU(30) ORDER                              
Pick Top ORDER     
Scheduling SU(30) STURDi renamable $d1, $fp, -120 :: (store 8 into %ir.mflops)
  Ready @53c
  TopQ.A TopLatency SU(30) 16c
  *** Max MOps 1 at cycle 53
Cycle: 54 TopQ.A
TopQ.A @54c
  Retired: 54
  Executed: 54c
  Critical: 54c, 54 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 57 51 48 54 
  TopQ.A RemainingLatency 0 + 54c > CritPath 16
  Cand SU(57) ORDER                              
  Cand SU(51) ORDER                              
  Cand SU(48) ORDER                              
Pick Top ORDER     
Scheduling SU(48) STPXi renamable $x11, renamable $x10, $sp, 5 :: (store 8 into stack + 48), (store 8 into stack + 40)
  Ready @54c
  *** Max MOps 1 at cycle 54
Cycle: 55 TopQ.A
TopQ.A @55c
  Retired: 55
  Executed: 55c
  Critical: 55c, 55 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 57 51 54 
  TopQ.A RemainingLatency 0 + 55c > CritPath 16
  Cand SU(57) ORDER                              
  Cand SU(51) ORDER                              
Pick Top ORDER     
Scheduling SU(51) STPXi renamable $x13, renamable $x12, $sp, 3 :: (store 8 into stack + 32), (store 8 into stack + 24)
  Ready @55c
  *** Max MOps 1 at cycle 55
Cycle: 56 TopQ.A
TopQ.A @56c
  Retired: 56
  Executed: 56c
  Critical: 56c, 56 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 57 54 
  TopQ.A RemainingLatency 0 + 56c > CritPath 16
  Cand SU(57) ORDER                              
  Cand SU(54) ORDER                              
Pick Top ORDER     
Scheduling SU(54) STPXi renamable $x8, renamable $x14, $sp, 1 :: (store 8 into stack + 16), (store 8 into stack + 8)
  Ready @56c
  *** Max MOps 1 at cycle 56
Cycle: 57 TopQ.A
TopQ.A @57c
  Retired: 57
  Executed: 57c
  Critical: 57c, 57 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 57 
Pick Top ONLY1     
Scheduling SU(57) STRXui renamable $x9, $sp, 0 :: (store 8 into stack)
  Ready @57c
  *** Max MOps 1 at cycle 57
Cycle: 58 TopQ.A
TopQ.A @58c
  Retired: 58
  Executed: 58c
  Critical: 58c, 58 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) %const.1
SU(4):   renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
SU(1):   renamable $w2 = LDRWui renamable $x22, target-flags(aarch64-pageoff, aarch64-nc) @nx0 :: (dereferenceable load 4 from @nx0)
SU(2):   renamable $w3 = LDRWui renamable $x23, target-flags(aarch64-pageoff, aarch64-nc) @ny0 :: (dereferenceable load 4 from @ny0)
SU(3):   renamable $w4 = LDRWui renamable $x24, target-flags(aarch64-pageoff, aarch64-nc) @nz0 :: (dereferenceable load 4 from @nz0)
SU(5):   renamable $x8 = ADRP target-flags(aarch64-page) %const.2
SU(9):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
SU(10):   renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
SU(11):   $w8 = ADDWrs renamable $w2, renamable $w3, 0
SU(12):   $w8 = ADDWrs renamable $w8, renamable $w4, 0
SU(13):   renamable $d2 = FADDDrr renamable $d10, renamable $d0
SU(14):   renamable $d0 = SCVTFUWDri renamable $w8
SU(8):   renamable $x22 = ADRP target-flags(aarch64-page) @maxtime
SU(17):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
SU(6):   $x9 = MOVZXi 37968, 32
SU(15):   $x8 = MOVZXi 33920, 32
SU(21):   renamable $d3 = FDIVDrr renamable $d0, renamable $d8
SU(22):   renamable $d0 = LDRDui renamable $x22, target-flags(aarch64-pageoff, aarch64-nc) @maxtime :: (dereferenceable load 8 from @maxtime)
SU(7):   $x9 = MOVKXi $x9(tied-def 0), 49409, 48
SU(16):   $x8 = MOVKXi $x8(tied-def 0), 16686, 48
SU(18):   $d1 = FMOVXDr $x9
SU(19):   renamable $w1 = LDURSBWi $fp, -108 :: (dereferenceable load 1 from %ir.Class, align 4)
SU(20):   renamable $w5 = LDRWui renamable $x21, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)
SU(23):   renamable $d2 = FADDDrr renamable $d2, renamable $d3
SU(24):   $d3 = FMOVXDr $x8
SU(25):   renamable $w7 = LDURWi $fp, -112 :: (dereferenceable load 4 from %ir.verified)
SU(31):   $x8 = ADRP target-flags(aarch64-page) @.str.23
SU(33):   $x9 = ADRP target-flags(aarch64-page) @.str.22
SU(26):   renamable $d1 = FADDDrr renamable $d2, renamable $d1
SU(32):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.23, 0
SU(34):   renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.22, 0
SU(27):   renamable $d1 = FMULDrr renamable $d9, renamable $d1
SU(28):   renamable $d2 = FMULDrr renamable $d0, renamable $d3
SU(35):   $x10 = ADRP target-flags(aarch64-page) @.str.21
SU(37):   $x11 = ADRP target-flags(aarch64-page) @.str.20
SU(39):   $x12 = ADRP target-flags(aarch64-page) @.str.19
SU(41):   $x13 = ADRP target-flags(aarch64-page) @.str.18
SU(43):   $x14 = ADRP target-flags(aarch64-page) @.str.17
SU(45):   STPXi renamable $x9, renamable $x8, $sp, 7 :: (store 8 into stack + 64), (store 8 into stack + 56)
SU(46):   $x8 = ADRP target-flags(aarch64-page) @.str.16
SU(49):   $x9 = ADRP target-flags(aarch64-page) @.str.15
SU(52):   $x0 = ADRP target-flags(aarch64-page) @.str.13
SU(55):   $x6 = ADRP target-flags(aarch64-page) @.str.14
SU(29):   renamable $d1 = FDIVDrr renamable $d1, renamable $d2
SU(36):   renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.21, 0
SU(38):   renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @.str.20, 0
SU(40):   renamable $x12 = ADDXri $x12, target-flags(aarch64-pageoff, aarch64-nc) @.str.19, 0
SU(42):   renamable $x13 = ADDXri $x13, target-flags(aarch64-pageoff, aarch64-nc) @.str.18, 0
SU(44):   renamable $x14 = ADDXri $x14, target-flags(aarch64-pageoff, aarch64-nc) @.str.17, 0
SU(47):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.16, 0
SU(50):   renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.15, 0
SU(53):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.13, 0
SU(56):   renamable $x6 = ADDXri $x6, target-flags(aarch64-pageoff, aarch64-nc) @.str.14, 0
SU(30):   STURDi renamable $d1, $fp, -120 :: (store 8 into %ir.mflops)
SU(48):   STPXi renamable $x11, renamable $x10, $sp, 5 :: (store 8 into stack + 48), (store 8 into stack + 40)
SU(51):   STPXi renamable $x13, renamable $x12, $sp, 3 :: (store 8 into stack + 32), (store 8 into stack + 24)
SU(54):   STPXi renamable $x8, renamable $x14, $sp, 1 :: (store 8 into stack + 16), (store 8 into stack + 8)
SU(57):   STRXui renamable $x9, $sp, 0 :: (store 8 into stack)

********** MI Scheduling **********
main:%bb.3 if.end
  From: renamable $s0 = LDRSui renamable $x21, target-flags(aarch64-pageoff, aarch64-nc) @itmax, implicit-def $d0 :: (dereferenceable load 4 from @itmax)
    To: BL @pow, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $d1, implicit-def $sp, implicit-def $d0
 RegionInstrs: 23
ScheduleDAGMI::schedule starting
SU(0):   renamable $s0 = LDRSui renamable $x21, target-flags(aarch64-pageoff, aarch64-nc) @itmax, implicit-def $d0 :: (dereferenceable load 4 from @itmax)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=4 Reg=$d0
SU(1):   renamable $x22 = ADRP target-flags(aarch64-page) @nx0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 10
  Successors:
    SU(6): Data Latency=1 Reg=$x22
SU(2):   renamable $x8 = ADRP target-flags(aarch64-page) %const.0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 9
  Successors:
    SU(8): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x8
SU(3):   renamable $x23 = ADRP target-flags(aarch64-page) @ny0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 9
  Successors:
    SU(8): Data Latency=1 Reg=$x23
SU(4):   renamable $x24 = ADRP target-flags(aarch64-page) @nz0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 8
  Successors:
    SU(9): Data Latency=1 Reg=$x24
SU(5):   renamable $d8 = FMOVDi 8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(21): Data Latency=1 Reg=$d8
SU(6):   renamable $w9 = LDRWui renamable $x22, target-flags(aarch64-pageoff, aarch64-nc) @nx0 :: (dereferenceable load 4 from @nx0)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 9
  Predecessors:
    SU(1): Data Latency=1 Reg=$x22
  Successors:
    SU(17): Data Latency=4 Reg=$w9
    SU(12): Data Latency=4 Reg=$w9
SU(7):   renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 8
  Predecessors:
    SU(2): Data Latency=1 Reg=$x8
  Successors:
    SU(14): Out  Latency=1
    SU(13): Data Latency=4 Reg=$d1
    SU(8): Anti Latency=0
SU(8):   renamable $w8 = LDRWui renamable $x23, target-flags(aarch64-pageoff, aarch64-nc) @ny0 :: (dereferenceable load 4 from @ny0)
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 8
  Predecessors:
    SU(7): Anti Latency=0
    SU(3): Data Latency=1 Reg=$x23
    SU(2): Out  Latency=1
  Successors:
    SU(17): Out  Latency=1
    SU(17): Data Latency=4 Reg=$w8
    SU(14): Data Latency=4 Reg=$w8
SU(9):   renamable $w10 = LDRWui renamable $x24, target-flags(aarch64-pageoff, aarch64-nc) @nz0 :: (dereferenceable load 4 from @nz0)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 7
  Predecessors:
    SU(4): Data Latency=1 Reg=$x24
  Successors:
    SU(18): Data Latency=4 Reg=$w10
    SU(16): Data Latency=4 Reg=$w10
SU(10):   renamable $q0 = SSHLLv2i32_shift renamable $d0, 0
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d0
  Successors:
    SU(12): Out  Latency=1
    SU(11): Data Latency=1 Reg=$d0
    SU(11): Data Latency=0 Reg=$q0
SU(11):   renamable $d9 = SCVTFv1i64 renamable $d0, implicit $q0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(10): Data Latency=1 Reg=$d0
    SU(10): Data Latency=0 Reg=$q0
  Successors:
    SU(12): Anti Latency=0
SU(12):   renamable $d0 = SCVTFUWDri renamable $w9
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(11): Anti Latency=0
    SU(10): Out  Latency=1
    SU(6): Data Latency=4 Reg=$w9
  Successors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$d0
SU(13):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 4
  Predecessors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$d0
    SU(7): Data Latency=4 Reg=$d1
  Successors:
    SU(15): Out  Latency=1
    SU(15): Data Latency=1 Reg=$d0
    SU(14): Anti Latency=0
SU(14):   renamable $d1 = SCVTFUWDri renamable $w8
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 4
  Predecessors:
    SU(13): Anti Latency=0
    SU(8): Data Latency=4 Reg=$w8
    SU(7): Out  Latency=1
  Successors:
    SU(16): Out  Latency=1
    SU(15): Data Latency=1 Reg=$d1
    SU(17): Anti Latency=0
SU(15):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 3
  Predecessors:
    SU(14): Data Latency=1 Reg=$d1
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$d0
  Successors:
    SU(20): Out  Latency=1
    SU(19): Data Latency=1 Reg=$d0
    SU(16): Anti Latency=0
SU(16):   renamable $d1 = SCVTFUWDri renamable $w10
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 3
  Predecessors:
    SU(15): Anti Latency=0
    SU(14): Out  Latency=1
    SU(9): Data Latency=4 Reg=$w10
  Successors:
    SU(22): Out  Latency=1
    SU(19): Data Latency=1 Reg=$d1
SU(17):   $w8 = ADDWrs renamable $w9, renamable $w8, 0
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 4
  Predecessors:
    SU(14): Anti Latency=0
    SU(8): Out  Latency=1
    SU(8): Data Latency=4 Reg=$w8
    SU(6): Data Latency=4 Reg=$w9
  Successors:
    SU(18): Out  Latency=1
    SU(18): Data Latency=1 Reg=$w8
SU(18):   $w8 = ADDWrs renamable $w8, renamable $w10, 0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 3
  Predecessors:
    SU(17): Out  Latency=1
    SU(17): Data Latency=1 Reg=$w8
    SU(9): Data Latency=4 Reg=$w10
  Successors:
    SU(20): Data Latency=1 Reg=$w8
SU(19):   renamable $d10 = FMULDrr renamable $d0, renamable $d1
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 2
  Predecessors:
    SU(16): Data Latency=1 Reg=$d1
    SU(15): Data Latency=1 Reg=$d0
  Successors:
    SU(20): Anti Latency=0
    SU(22): Anti Latency=0
SU(20):   renamable $d0 = SCVTFUWDri renamable $w8
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 2
  Predecessors:
    SU(19): Anti Latency=0
    SU(18): Data Latency=1 Reg=$w8
    SU(15): Out  Latency=1
  Successors:
    SU(21): Out  Latency=1
    SU(21): Data Latency=1 Reg=$d0
SU(21):   renamable $d0 = FDIVDrr renamable $d0, renamable $d8
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(20): Out  Latency=1
    SU(20): Data Latency=1 Reg=$d0
    SU(5): Data Latency=1 Reg=$d8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(22):   renamable $d1 = FMOVDi 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(19): Anti Latency=0
    SU(16): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @pow, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $d1, implicit-def $sp, implicit-def $d0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(22): Ord  Latency=1 Artificial
    SU(21): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 10
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 
  TopQ.A RemainingLatency 0 + 0c > CritPath 10
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $s0 = LDRSui renamable $x21, target-flags(aarch64-pageoff, aarch64-nc) @itmax, implicit-def $d0 :: (dereferenceable load 4 from @itmax)
  Ready @0c
  TopQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 10 
Queue TopQ.A: 5 1 2 3 4 
  TopQ.A RemainingLatency 0 + 1c > CritPath 10
  Cand SU(5) ORDER                              
  Cand SU(1) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x22 = ADRP target-flags(aarch64-page) @nx0
  Ready @1c
  TopQ.A BotLatency SU(1) 10c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 10 
Queue TopQ.A: 5 4 2 3 6 
  TopQ.A RemainingLatency 0 + 2c > CritPath 10
  Cand SU(5) ORDER                              
  Cand SU(4) TOP-PATH                  8 cycles 
  Cand SU(2) TOP-PATH                  9 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x8 = ADRP target-flags(aarch64-page) %const.0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 10 
Queue TopQ.A: 5 4 6 3 7 
  TopQ.A RemainingLatency 0 + 3c > CritPath 10
  Cand SU(5) ORDER                              
  Cand SU(4) TOP-PATH                  8 cycles 
  Cand SU(6) TOP-PATH                  9 cycles 
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) renamable $x23 = ADRP target-flags(aarch64-page) @ny0
  Ready @3c
  TopQ.A BotLatency SU(3) 9c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 6 7 10 
  TopQ.A RemainingLatency 0 + 4c > CritPath 10
  Cand SU(5) ORDER                              
  Cand SU(4) TOP-PATH                  8 cycles 
  Cand SU(6) TOP-PATH                  9 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) renamable $w9 = LDRWui renamable $x22, target-flags(aarch64-pageoff, aarch64-nc) @nx0 :: (dereferenceable load 4 from @nx0)
  Ready @4c
  TopQ.A TopLatency SU(6) 1c
  TopQ.A BotLatency SU(6) 9c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 10 7 
  TopQ.A RemainingLatency 0 + 5c > CritPath 10
  Cand SU(5) ORDER                              
  Cand SU(4) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $x24 = ADRP target-flags(aarch64-page) @nz0
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 7 10 9 
  TopQ.A RemainingLatency 0 + 6c > CritPath 10
  Cand SU(5) ORDER                              
  Cand SU(7) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  Ready @6c
  TopQ.A BotLatency SU(7) 8c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 9 10 8 
  TopQ.A RemainingLatency 0 + 7c > CritPath 10
  Cand SU(5) ORDER                              
  Cand SU(9) TOP-PATH                  7 cycles 
  Cand SU(8) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $w8 = LDRWui renamable $x23, target-flags(aarch64-pageoff, aarch64-nc) @ny0 :: (dereferenceable load 4 from @ny0)
  Ready @7c
  TopQ.A BotLatency SU(8) 8c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 9 10 
  TopQ.A RemainingLatency 0 + 8c > CritPath 10
  Cand SU(5) ORDER                              
  Cand SU(9) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(9) renamable $w10 = LDRWui renamable $x24, target-flags(aarch64-pageoff, aarch64-nc) @nz0 :: (dereferenceable load 4 from @nz0)
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 10 
  TopQ.A RemainingLatency 0 + 9c > CritPath 10
  Cand SU(5) ORDER                              
  Cand SU(10) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(10) renamable $q0 = SSHLLv2i32_shift renamable $d0, 0
  Ready @9c
  TopQ.A TopLatency SU(10) 4c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 11 
  TopQ.A RemainingLatency 0 + 10c > CritPath 10
  Cand SU(5) ORDER                              
  Cand SU(11) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(11) renamable $d9 = SCVTFv1i64 renamable $d0, implicit $q0
  Ready @10c
  TopQ.A TopLatency SU(11) 5c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 12 
  TopQ.A RemainingLatency 0 + 11c > CritPath 10
  Cand SU(5) ORDER                              
  Cand SU(12) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(12) renamable $d0 = SCVTFUWDri renamable $w9
  Ready @11c
  TopQ.A BotLatency SU(12) 5c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 13 
  TopQ.A RemainingLatency 0 + 12c > CritPath 10
  Cand SU(5) ORDER                              
  Cand SU(13) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(13) renamable $d0 = FMULDrr renamable $d0, renamable $d1
  Ready @12c
  TopQ.A TopLatency SU(13) 6c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 14 
  TopQ.A RemainingLatency 0 + 13c > CritPath 10
  Cand SU(5) ORDER                              
  Cand SU(14) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(14) renamable $d1 = SCVTFUWDri renamable $w8
  Ready @13c
  TopQ.A BotLatency SU(14) 4c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 15 17 
  TopQ.A RemainingLatency 0 + 14c > CritPath 10
  Cand SU(5) ORDER                              
  Cand SU(15) TOP-PATH                  3 cycles 
  Cand SU(17) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(17) $w8 = ADDWrs renamable $w9, renamable $w8, 0
  Ready @14c
  TopQ.A BotLatency SU(17) 4c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 15 18 
  TopQ.A RemainingLatency 0 + 15c > CritPath 10
  Cand SU(5) ORDER                              
  Cand SU(15) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(15) renamable $d0 = FMULDrr renamable $d0, renamable $d1
  Ready @15c
  TopQ.A TopLatency SU(15) 7c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 18 16 
  TopQ.A RemainingLatency 0 + 16c > CritPath 10
  Cand SU(5) ORDER                              
  Cand SU(18) TOP-PATH                  3 cycles 
  Cand SU(16) ORDER                              
Pick Top ORDER     
Scheduling SU(16) renamable $d1 = SCVTFUWDri renamable $w10
  Ready @16c
  TopQ.A BotLatency SU(16) 3c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 18 19 
  TopQ.A RemainingLatency 0 + 17c > CritPath 10
  Cand SU(5) ORDER                              
  Cand SU(18) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(18) $w8 = ADDWrs renamable $w8, renamable $w10, 0
  Ready @17c
  TopQ.A BotLatency SU(18) 3c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 19 
  TopQ.A RemainingLatency 0 + 18c > CritPath 10
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $d8 = FMOVDi 8
  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 19 
Pick Top ONLY1     
Scheduling SU(19) renamable $d10 = FMULDrr renamable $d0, renamable $d1
  Ready @19c
  TopQ.A TopLatency SU(19) 8c
  TopQ.A BotLatency SU(19) 2c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 20 22 
  TopQ.A RemainingLatency 0 + 20c > CritPath 10
  Cand SU(20) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(20) renamable $d0 = SCVTFUWDri renamable $w8
  Ready @20c
  TopQ.A BotLatency SU(20) 2c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 22 21 
  TopQ.A RemainingLatency 0 + 21c > CritPath 10
  Cand SU(22) ORDER                              
  Cand SU(21) ORDER                              
Pick Top ORDER     
Scheduling SU(21) renamable $d0 = FDIVDrr renamable $d0, renamable $d8
  Ready @21c
  TopQ.A TopLatency SU(21) 9c
  *** Max MOps 1 at cycle 21
Cycle: 22 TopQ.A
TopQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 22 
Pick Top ONLY1     
Scheduling SU(22) renamable $d1 = FMOVDi 0
  Ready @22c
  TopQ.A BotLatency SU(22) 1c
  *** Max MOps 1 at cycle 22
Cycle: 23 TopQ.A
TopQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   renamable $s0 = LDRSui renamable $x21, target-flags(aarch64-pageoff, aarch64-nc) @itmax, implicit-def $d0 :: (dereferenceable load 4 from @itmax)
SU(1):   renamable $x22 = ADRP target-flags(aarch64-page) @nx0
SU(2):   renamable $x8 = ADRP target-flags(aarch64-page) %const.0
SU(3):   renamable $x23 = ADRP target-flags(aarch64-page) @ny0
SU(6):   renamable $w9 = LDRWui renamable $x22, target-flags(aarch64-pageoff, aarch64-nc) @nx0 :: (dereferenceable load 4 from @nx0)
SU(4):   renamable $x24 = ADRP target-flags(aarch64-page) @nz0
SU(7):   renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
SU(8):   renamable $w8 = LDRWui renamable $x23, target-flags(aarch64-pageoff, aarch64-nc) @ny0 :: (dereferenceable load 4 from @ny0)
SU(9):   renamable $w10 = LDRWui renamable $x24, target-flags(aarch64-pageoff, aarch64-nc) @nz0 :: (dereferenceable load 4 from @nz0)
SU(10):   renamable $q0 = SSHLLv2i32_shift renamable $d0, 0
SU(11):   renamable $d9 = SCVTFv1i64 renamable $d0, implicit $q0
SU(12):   renamable $d0 = SCVTFUWDri renamable $w9
SU(13):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
SU(14):   renamable $d1 = SCVTFUWDri renamable $w8
SU(17):   $w8 = ADDWrs renamable $w9, renamable $w8, 0
SU(15):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
SU(16):   renamable $d1 = SCVTFUWDri renamable $w10
SU(18):   $w8 = ADDWrs renamable $w8, renamable $w10, 0
SU(5):   renamable $d8 = FMOVDi 8
SU(19):   renamable $d10 = FMULDrr renamable $d0, renamable $d1
SU(20):   renamable $d0 = SCVTFUWDri renamable $w8
SU(21):   renamable $d0 = FDIVDrr renamable $d0, renamable $d8
SU(22):   renamable $d1 = FMOVDi 0

********** MI Scheduling **********
main:%bb.3 if.end
  From: renamable $x8 = ADRP target-flags(aarch64-page) @frc
    To: BL @verify, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $x2, implicit $x3, implicit-def $sp
 RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @frc
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @frc :: (dereferenceable load 8 from @frc)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(2):   $x0 = ADRP target-flags(aarch64-page) @rsdnm
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x0
SU(3):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @rsdnm, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $x1 = ADRP target-flags(aarch64-page) @errnm
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x1
SU(5):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @errnm, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(6):   $x2 = SUBXri $fp, 108, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(7):   $x3 = SUBXri $fp, 112, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @verify, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $x2, implicit $x3, implicit-def $sp
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=1 Artificial
    SU(6): Ord  Latency=1 Artificial
    SU(5): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 7 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @frc
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 2 4 6 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(7) ORDER                              
  Cand SU(2) TOP-PATH                  2 cycles 
  Cand SU(1) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @frc :: (dereferenceable load 8 from @frc)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 2 4 6 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(7) ORDER                              
  Cand SU(2) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x0 = ADRP target-flags(aarch64-page) @rsdnm
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 6 4 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(7) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(4) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) $x1 = ADRP target-flags(aarch64-page) @errnm
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 6 3 5 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(7) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @rsdnm, 0
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 6 5 
  TopQ.A RemainingLatency 0 + 5c > CritPath 5
  Cand SU(7) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @errnm, 0
  Ready @5c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 6 
  TopQ.A RemainingLatency 0 + 6c > CritPath 5
  Cand SU(7) ORDER                              
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) $x2 = SUBXri $fp, 108, 0
  Ready @6c
  TopQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) $x3 = SUBXri $fp, 112, 0
  Ready @7c
  TopQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @frc
SU(1):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @frc :: (dereferenceable load 8 from @frc)
SU(2):   $x0 = ADRP target-flags(aarch64-page) @rsdnm
SU(4):   $x1 = ADRP target-flags(aarch64-page) @errnm
SU(3):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @rsdnm, 0
SU(5):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @errnm, 0
SU(6):   $x2 = SUBXri $fp, 108, 0
SU(7):   $x3 = SUBXri $fp, 112, 0

********** MI Scheduling **********
main:%bb.3 if.end
  From: renamable $x21 = ADRP target-flags(aarch64-page) @itmax
    To: BL @ssor, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x21 = ADRP target-flags(aarch64-page) @itmax
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=1 Reg=$x21
SU(1):   renamable $w0 = LDRWui renamable $x21, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Data Latency=1 Reg=$x21
  Successors:
    ExitSU: Ord  Latency=4 Artificial
ExitSU:   BL @ssor, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x21 = ADRP target-flags(aarch64-page) @itmax
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w0 = LDRWui renamable $x21, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   renamable $x21 = ADRP target-flags(aarch64-page) @itmax
SU(1):   renamable $w0 = LDRWui renamable $x21, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)

********** MI Scheduling **********
main:%bb.3 if.end
  From: $w0 = MOVZWi 1, 0
    To: BL @ssor, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $w0 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(1):   $w20 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
ExitSU:   BL @ssor, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $w0 = MOVZWi 1, 0
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w20 = MOVZWi 1, 0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   $w0 = MOVZWi 1, 0
SU(1):   $w20 = MOVZWi 1, 0

Fixup kills for %bb.3
********** MI Scheduling **********
main:%bb.4 if.then31
  From: STRWui killed renamable $w20, $sp, 47 :: (store 4 into %ir.i)
    To: End RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   STRWui renamable $w20, $sp, 47 :: (store 4 into %ir.i)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $x19 = ADDXri $sp, 192, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $x19 = ADDXri $sp, 192, 0
  Ready @0c
  TopQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STRWui renamable $w20, $sp, 47 :: (store 4 into %ir.i)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.4 ***
SU(1):   $x19 = ADDXri $sp, 192, 0
SU(0):   STRWui renamable $w20, $sp, 47 :: (store 4 into %ir.i)

Fixup kills for %bb.4
********** MI Scheduling **********
main:%bb.5 for.cond
  From: renamable $w8 = LDRWui $sp, 47 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.7, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 47 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 11, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.7, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 47 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 11, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   renamable $w8 = LDRWui $sp, 47 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri renamable $w8, 11, 0, implicit-def $nzcv

Fixup kills for %bb.5
********** MI Scheduling **********
main:%bb.6 for.body
  From: renamable $x8 = LDRSWui $sp, 47 :: (dereferenceable load 4 from %ir.i)
    To: B %bb.5
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRSWui $sp, 47 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x8
    SU(4): Ord  Latency=0 Memory
SU(1):   renamable $w9 = LDRWui $sp, 47 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=$w9
    SU(4): Ord  Latency=0 Memory
SU(2):   STRDroX renamable $d0, renamable $x19, renamable $x8, 0, 1 :: (store 8 into %ir.arrayidx35)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(3): Anti Latency=0
SU(3):   renamable $w8 = nsw ADDWri renamable $w9, 1, 0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Anti Latency=0
    SU(1): Data Latency=4 Reg=$w9
    SU(0): Out  Latency=1
  Successors:
    SU(4): Data Latency=1 Reg=$w8
SU(4):   STRWui renamable $w8, $sp, 47 :: (store 4 into %ir.i)
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=$w8
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x8 = LDRSWui $sp, 47 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w9 = LDRWui $sp, 47 :: (dereferenceable load 4 from %ir.i)
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRDroX renamable $d0, renamable $x19, renamable $x8, 0, 1 :: (store 8 into %ir.arrayidx35)
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w8 = nsw ADDWri renamable $w9, 1, 0
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) STRWui renamable $w8, $sp, 47 :: (store 4 into %ir.i)
  Ready @6c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   renamable $x8 = LDRSWui $sp, 47 :: (dereferenceable load 4 from %ir.i)
SU(1):   renamable $w9 = LDRWui $sp, 47 :: (dereferenceable load 4 from %ir.i)
SU(2):   STRDroX renamable $d0, renamable $x19, renamable $x8, 0, 1 :: (store 8 into %ir.arrayidx35)
SU(3):   renamable $w8 = nsw ADDWri renamable $w9, 1, 0
SU(4):   STRWui renamable $w8, $sp, 47 :: (store 4 into %ir.i)

Fixup kills for %bb.6
********** MI Scheduling **********
main:%bb.7 for.end
  From: renamable $d0 = LDRDui killed renamable $x22, target-flags(aarch64-pageoff, aarch64-nc) @maxtime :: (dereferenceable load 8 from @maxtime)
    To: Bcc 1, %bb.9, implicit $nzcv
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDRDui renamable $x22, target-flags(aarch64-pageoff, aarch64-nc) @maxtime :: (dereferenceable load 8 from @maxtime)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$d0
    SU(1): Data Latency=4 Reg=$d0
SU(1):   FCMPDri renamable $d0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$d0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   STURDi renamable $d0, $fp, -136 :: (store 8 into %ir.tmax)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=$d0
ExitSU:   Bcc 1, %bb.9, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $d0 = LDRDui renamable $x22, target-flags(aarch64-pageoff, aarch64-nc) @maxtime :: (dereferenceable load 8 from @maxtime)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) FCMPDri renamable $d0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURDi renamable $d0, $fp, -136 :: (store 8 into %ir.tmax)
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   renamable $d0 = LDRDui renamable $x22, target-flags(aarch64-pageoff, aarch64-nc) @maxtime :: (dereferenceable load 8 from @maxtime)
SU(1):   FCMPDri renamable $d0, implicit-def $nzcv
SU(2):   STURDi renamable $d0, $fp, -136 :: (store 8 into %ir.tmax)

Fixup kills for %bb.7
********** MI Scheduling **********
main:%bb.8 if.then38
  From: $x8 = MOVZXi 16368, 48
    To: End RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x8 = MOVZXi 16368, 48
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=$x8
SU(1):   STURXi renamable $x8, $fp, -136 :: (store 8 into %ir.tmax)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x8 = MOVZXi 16368, 48
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STURXi renamable $x8, $fp, -136 :: (store 8 into %ir.tmax)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   $x8 = MOVZXi 16368, 48
SU(1):   STURXi renamable $x8, $fp, -136 :: (store 8 into %ir.tmax)

Fixup kills for %bb.8
********** MI Scheduling **********
main:%bb.9 if.end39
  From: $w8 = MOVZWi 1, 0
    To: End RegionInstrs: 13
ScheduleDAGMI::schedule starting
SU(0):   $w8 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(10): Data Latency=1 Reg=$w8
SU(1):   $x23 = ADDXri $sp, 80, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $x24 = ADDXri $sp, 192, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $x25 = MOVZXi 16473, 48
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $x19 = ADRP target-flags(aarch64-page) @.str.25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x19
SU(5):   renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str.25, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(6):   $x20 = ADRP target-flags(aarch64-page) @.str.26
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x20
SU(7):   renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @.str.26, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x20
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(8):   $x21 = ADRP target-flags(aarch64-page) @.str.27
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x21
SU(9):   renamable $x21 = ADDXri $x21, target-flags(aarch64-pageoff, aarch64-nc) @.str.27, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x21
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(10):   STRWui renamable $w8, $sp, 47 :: (store 4 into %ir.i)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$w8
SU(11):   $x22 = ADRP target-flags(aarch64-page) @.str.28
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x22
SU(12):   renamable $x22 = ADDXri $x22, target-flags(aarch64-pageoff, aarch64-nc) @.str.28, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x22
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 6 8 11 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(4) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) $x19 = ADRP target-flags(aarch64-page) @.str.25
  Ready @0c
  TopQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 11 6 8 5 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(11) TOP-PATH                  2 cycles 
  Cand SU(6) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(6) $x20 = ADRP target-flags(aarch64-page) @.str.26
  Ready @1c
  TopQ.A BotLatency SU(6) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 11 5 8 7 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(11) TOP-PATH                  2 cycles 
  Cand SU(8) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(8) $x21 = ADRP target-flags(aarch64-page) @.str.27
  Ready @2c
  TopQ.A BotLatency SU(8) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 11 5 7 9 
  TopQ.A RemainingLatency 0 + 3c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(11) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(11) $x22 = ADRP target-flags(aarch64-page) @.str.28
  Ready @3c
  TopQ.A BotLatency SU(11) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 9 5 7 12 
  TopQ.A RemainingLatency 0 + 4c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $w8 = MOVZWi 1, 0
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 1 2 3 9 5 7 10 
  TopQ.A RemainingLatency 0 + 5c > CritPath 2
  Cand SU(12) ORDER                              
  Cand SU(1) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(1) $x23 = ADDXri $sp, 80, 0
  Ready @5c
  TopQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 10 2 3 9 5 7 
  TopQ.A RemainingLatency 0 + 6c > CritPath 2
  Cand SU(12) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) $x24 = ADDXri $sp, 192, 0
  Ready @6c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 10 7 3 9 5 
  TopQ.A RemainingLatency 0 + 7c > CritPath 2
  Cand SU(12) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) $x25 = MOVZXi 16473, 48
  Ready @7c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 10 7 5 9 
  TopQ.A RemainingLatency 0 + 8c > CritPath 2
  Cand SU(12) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str.25, 0
  Ready @8c
  TopQ.A TopLatency SU(5) 1c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 10 7 9 
  TopQ.A RemainingLatency 0 + 9c > CritPath 2
  Cand SU(12) ORDER                              
  Cand SU(7) ORDER                              
Pick Top ORDER     
Scheduling SU(7) renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @.str.26, 0
  Ready @9c
  TopQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 10 9 
  TopQ.A RemainingLatency 0 + 10c > CritPath 2
  Cand SU(12) ORDER                              
  Cand SU(9) ORDER                              
Pick Top ORDER     
Scheduling SU(9) renamable $x21 = ADDXri $x21, target-flags(aarch64-pageoff, aarch64-nc) @.str.27, 0
  Ready @10c
  TopQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 10 
  TopQ.A RemainingLatency 0 + 11c > CritPath 2
  Cand SU(12) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(12) renamable $x22 = ADDXri $x22, target-flags(aarch64-pageoff, aarch64-nc) @.str.28, 0
  Ready @11c
  TopQ.A BotLatency SU(12) 1c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) STRWui renamable $w8, $sp, 47 :: (store 4 into %ir.i)
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.9 ***
SU(4):   $x19 = ADRP target-flags(aarch64-page) @.str.25
SU(6):   $x20 = ADRP target-flags(aarch64-page) @.str.26
SU(8):   $x21 = ADRP target-flags(aarch64-page) @.str.27
SU(11):   $x22 = ADRP target-flags(aarch64-page) @.str.28
SU(0):   $w8 = MOVZWi 1, 0
SU(1):   $x23 = ADDXri $sp, 80, 0
SU(2):   $x24 = ADDXri $sp, 192, 0
SU(3):   $x25 = MOVZXi 16473, 48
SU(5):   renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str.25, 0
SU(7):   renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @.str.26, 0
SU(9):   renamable $x21 = ADDXri $x21, target-flags(aarch64-pageoff, aarch64-nc) @.str.27, 0
SU(12):   renamable $x22 = ADDXri $x22, target-flags(aarch64-pageoff, aarch64-nc) @.str.28, 0
SU(10):   STRWui renamable $w8, $sp, 47 :: (store 4 into %ir.i)

********** MI Scheduling **********
main:%bb.9 if.end39
  From: $x0 = ADRP target-flags(aarch64-page) @.str.24
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.24
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.24, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @.str.24
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.24, 0
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.24
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.24, 0

Fixup kills for %bb.9
********** MI Scheduling **********
main:%bb.10 for.cond41
  From: renamable $w8 = LDRWui $sp, 47 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.14, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 47 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 11, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.14, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 47 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 11, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   renamable $w8 = LDRWui $sp, 47 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri renamable $w8, 11, 0, implicit-def $nzcv

Fixup kills for %bb.10
********** MI Scheduling **********
main:%bb.11 for.body44
  From: renamable $w8 = LDRWui $sp, 47 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 1, %bb.13, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 47 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 5, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 1, %bb.13, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 47 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 5, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   renamable $w8 = LDRWui $sp, 47 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri renamable $w8, 5, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.11 for.body44
  From: renamable $x8 = LDRSWui $sp, 47 :: (dereferenceable load 4 from %ir.i)
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 9
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRSWui $sp, 47 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x8
SU(1):   renamable $x8 = UBFMXri renamable $x8, 61, 60
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(4): Data Latency=1 Reg=$x8
    SU(2): Data Latency=1 Reg=$x8
SU(2):   renamable $d0 = LDRDroX renamable $x24, renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx50)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(6): Data Latency=4 Reg=$d0
SU(3):   renamable $d1 = LDURDi $fp, -136 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$d1
SU(4):   renamable $x1 = LDRXroX renamable $x23, renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx46)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(5):   $d2 = FMOVXDr $x25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$d2
SU(6):   renamable $d2 = FMULDrr renamable $d0, renamable $d2
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 2
  Predecessors:
    SU(2): Data Latency=4 Reg=$d0
    SU(5): Data Latency=1 Reg=$d2
    SU(5): Out  Latency=1
  Successors:
    SU(7): Data Latency=1 Reg=$d2
SU(7):   renamable $d1 = FDIVDrr renamable $d2, renamable $d1
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(6): Data Latency=1 Reg=$d2
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(8):   $x0 = ORRXrs $xzr, $x19, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w0
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=1 Artificial
    SU(7): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=4 Artificial
    SU(2): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 11
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 5 8 
  TopQ.A RemainingLatency 0 + 0c > CritPath 11
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDRSWui $sp, 47 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 11c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 8 3 5 
  TopQ.A RemainingLatency 0 + 1c > CritPath 11
  Cand SU(8) ORDER                              
  Cand SU(3) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d1 = LDURDi $fp, -136 :: (dereferenceable load 8 from %ir.tmax)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 8 5 
  TopQ.A RemainingLatency 0 + 2c > CritPath 11
  Cand SU(8) ORDER                              
  Cand SU(5) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) $d2 = FMOVXDr $x25
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) $x0 = ORRXrs $xzr, $x19, 0
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x8 = UBFMXri renamable $x8, 61, 60
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 2 
  TopQ.A RemainingLatency 0 + 5c > CritPath 11
  Cand SU(4) ORDER                              
  Cand SU(2) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d0 = LDRDroX renamable $x24, renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx50)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $x1 = LDRXroX renamable $x23, renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx46)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 9 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $d2 = FMULDrr renamable $d0, renamable $d2
  Ready @9c
  TopQ.A TopLatency SU(6) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 8
  Executed: 10c
  Critical: 8c, 8 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $d1 = FDIVDrr renamable $d2, renamable $d1
  Ready @10c
  TopQ.A TopLatency SU(7) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 9
  Executed: 11c
  Critical: 9c, 9 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   renamable $x8 = LDRSWui $sp, 47 :: (dereferenceable load 4 from %ir.i)
SU(3):   renamable $d1 = LDURDi $fp, -136 :: (dereferenceable load 8 from %ir.tmax)
SU(5):   $d2 = FMOVXDr $x25
SU(8):   $x0 = ORRXrs $xzr, $x19, 0
SU(1):   renamable $x8 = UBFMXri renamable $x8, 61, 60
SU(2):   renamable $d0 = LDRDroX renamable $x24, renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx50)
SU(4):   renamable $x1 = LDRXroX renamable $x23, renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx46)
SU(6):   renamable $d2 = FMULDrr renamable $d0, renamable $d2
SU(7):   renamable $d1 = FDIVDrr renamable $d2, renamable $d1

Fixup kills for %bb.11
********** MI Scheduling **********
main:%bb.12 if.then56
  From: renamable $x8 = LDRSWui $sp, 47 :: (dereferenceable load 4 from %ir.i)
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 9
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRSWui $sp, 47 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(2): Data Latency=4 Reg=$x8
SU(1):   renamable $d2, renamable $d0 = LDPDi $fp, -17 :: (dereferenceable load 8 from %ir.t), (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(6): Data Latency=4 Reg=$d2
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d0
    SU(4): Ord  Latency=0 Memory
SU(2):   renamable $d1 = LDRDroX renamable $x24, renamable $x8, 0, 1 :: (load 8 from %ir.arrayidx66)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(5): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d1
SU(3):   renamable $d0 = FSUBDrr renamable $d1, renamable $d0
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 3
  Predecessors:
    SU(2): Data Latency=4 Reg=$d1
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$d0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(5): Data Latency=1 Reg=$d0
    SU(4): Data Latency=1 Reg=$d0
    SU(5): Anti Latency=0
SU(4):   STURDi renamable $d0, $fp, -128 :: (store 8 into %ir.t)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=$d0
    SU(1): Ord  Latency=0 Memory
SU(5):   renamable $d1 = FMULDrr renamable $d0, renamable $d8
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1 Reg=$d0
    SU(3): Anti Latency=0
    SU(2): Out  Latency=1
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$d1
SU(6):   renamable $d1 = FDIVDrr renamable $d1, renamable $d2
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$d1
    SU(1): Data Latency=4 Reg=$d2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(7):   $x0 = ORRXrs $xzr, $x20, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(8):   $x1 = ORRXrs $xzr, $x22, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w0
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=1 Artificial
    SU(7): Ord  Latency=1 Artificial
    SU(6): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 11
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 7 8 
  TopQ.A RemainingLatency 0 + 0c > CritPath 11
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDRSWui $sp, 47 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 11c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 8 1 7 
  TopQ.A RemainingLatency 0 + 1c > CritPath 11
  Cand SU(8) ORDER                              
  Cand SU(1) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d2, renamable $d0 = LDPDi $fp, -17 :: (dereferenceable load 8 from %ir.t), (dereferenceable load 8 from %ir.tmax)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 8 7 
  TopQ.A RemainingLatency 0 + 2c > CritPath 11
  Cand SU(8) ORDER                              
  Cand SU(7) ORDER                              
Pick Top ORDER     
Scheduling SU(7) $x0 = ORRXrs $xzr, $x20, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) $x1 = ORRXrs $xzr, $x22, 0
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $d1 = LDRDroX renamable $x24, renamable $x8, 0, 1 :: (load 8 from %ir.arrayidx66)
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 8 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $d0 = FSUBDrr renamable $d1, renamable $d0
  Ready @8c
  TopQ.A TopLatency SU(3) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 5 
  TopQ.A RemainingLatency 0 + 9c > CritPath 11
  Cand SU(4) ORDER                              
  Cand SU(5) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $d1 = FMULDrr renamable $d0, renamable $d8
  Ready @9c
  TopQ.A TopLatency SU(5) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 7
  Executed: 10c
  Critical: 7c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 6 
  TopQ.A RemainingLatency 0 + 10c > CritPath 11
  Cand SU(4) ORDER                              
  Cand SU(6) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) renamable $d1 = FDIVDrr renamable $d1, renamable $d2
  Ready @10c
  TopQ.A TopLatency SU(6) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 8
  Executed: 11c
  Critical: 8c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) STURDi renamable $d0, $fp, -128 :: (store 8 into %ir.t)
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 9
  Executed: 12c
  Critical: 9c, 9 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   renamable $x8 = LDRSWui $sp, 47 :: (dereferenceable load 4 from %ir.i)
SU(1):   renamable $d2, renamable $d0 = LDPDi $fp, -17 :: (dereferenceable load 8 from %ir.t), (dereferenceable load 8 from %ir.tmax)
SU(7):   $x0 = ORRXrs $xzr, $x20, 0
SU(8):   $x1 = ORRXrs $xzr, $x22, 0
SU(2):   renamable $d1 = LDRDroX renamable $x24, renamable $x8, 0, 1 :: (load 8 from %ir.arrayidx66)
SU(3):   renamable $d0 = FSUBDrr renamable $d1, renamable $d0
SU(5):   renamable $d1 = FMULDrr renamable $d0, renamable $d8
SU(6):   renamable $d1 = FDIVDrr renamable $d1, renamable $d2
SU(4):   STURDi renamable $d0, $fp, -128 :: (store 8 into %ir.t)

********** MI Scheduling **********
main:%bb.12 if.then56
  From: renamable $d0, renamable $d1 = LDPDi $sp, 26 :: (dereferenceable load 8 from %ir.arrayidx57, align 16), (dereferenceable load 8 from %ir.arrayidx58)
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 11
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0, renamable $d1 = LDPDi $sp, 26 :: (dereferenceable load 8 from %ir.arrayidx57, align 16), (dereferenceable load 8 from %ir.arrayidx58)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d0
    SU(7): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d1
SU(1):   renamable $d2 = LDRDui $sp, 28 :: (dereferenceable load 8 from %ir.arrayidx60, align 16)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(5): Data Latency=4 Reg=$d2
SU(2):   $d8 = FMOVXDr $x25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(7): Data Latency=1 Reg=$d8
SU(3):   renamable $d3 = LDURDi $fp, -136 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(8): Data Latency=4 Reg=$d3
SU(4):   renamable $d0 = FADDDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d0
    SU(0): Data Latency=4 Reg=$d1
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$d0
    SU(7): Anti Latency=0
SU(5):   renamable $d0 = FADDDrr renamable $d0, renamable $d2
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$d0
    SU(1): Data Latency=4 Reg=$d2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(7): Data Latency=1 Reg=$d0
    SU(6): Data Latency=1 Reg=$d0
SU(6):   STURDi renamable $d0, $fp, -128 :: (store 8 into %ir.t)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=$d0
SU(7):   renamable $d1 = FMULDrr renamable $d0, renamable $d8
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 2
  Predecessors:
    SU(5): Data Latency=1 Reg=$d0
    SU(4): Anti Latency=0
    SU(2): Data Latency=1 Reg=$d8
    SU(0): Out  Latency=1
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$d1
SU(8):   renamable $d1 = FDIVDrr renamable $d1, renamable $d3
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 1
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$d1
    SU(3): Data Latency=4 Reg=$d3
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(9):   $x0 = ORRXrs $xzr, $x20, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(10):   $x1 = ORRXrs $xzr, $x21, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w0
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(10): Ord  Latency=1 Artificial
    SU(9): Ord  Latency=1 Artificial
    SU(8): Ord  Latency=1 Artificial
    SU(5): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 8
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 9 10 
  TopQ.A RemainingLatency 0 + 0c > CritPath 8
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0, renamable $d1 = LDPDi $sp, 26 :: (dereferenceable load 8 from %ir.arrayidx57, align 16), (dereferenceable load 8 from %ir.arrayidx58)
  Ready @0c
  TopQ.A BotLatency SU(0) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 10 1 2 3 9 
  TopQ.A RemainingLatency 0 + 1c > CritPath 8
  Cand SU(10) ORDER                              
  Cand SU(1) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d2 = LDRDui $sp, 28 :: (dereferenceable load 8 from %ir.arrayidx60, align 16)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 10 9 2 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 8
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(2) TOP-PATH                  3 cycles 
  Cand SU(3) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d3 = LDURDi $fp, -136 :: (dereferenceable load 8 from %ir.tmax)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 10 9 2 
  TopQ.A RemainingLatency 0 + 3c > CritPath 8
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(2) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $d8 = FMOVXDr $x25
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 9 4 
  TopQ.A RemainingLatency 0 + 4c > CritPath 8
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(4) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $d0 = FADDDrr renamable $d0, renamable $d1
  Ready @4c
  TopQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 9 5 
  TopQ.A RemainingLatency 0 + 5c > CritPath 8
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(5) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $d0 = FADDDrr renamable $d0, renamable $d2
  Ready @5c
  TopQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 9 7 6 
  TopQ.A RemainingLatency 0 + 6c > CritPath 8
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(7) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) renamable $d1 = FMULDrr renamable $d0, renamable $d8
  Ready @6c
  TopQ.A TopLatency SU(7) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 9 6 8 
  TopQ.A RemainingLatency 0 + 7c > CritPath 8
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(8) ORDER                              
Pick Top ORDER     
Scheduling SU(8) renamable $d1 = FDIVDrr renamable $d1, renamable $d3
  Ready @7c
  TopQ.A TopLatency SU(8) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 9 6 
  TopQ.A RemainingLatency 0 + 8c > CritPath 8
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(9) $x0 = ORRXrs $xzr, $x20, 0
  Ready @8c
  TopQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 6 
  TopQ.A RemainingLatency 0 + 9c > CritPath 8
  Cand SU(10) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(10) $x1 = ORRXrs $xzr, $x21, 0
  Ready @9c
  TopQ.A BotLatency SU(10) 1c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) STURDi renamable $d0, $fp, -128 :: (store 8 into %ir.t)
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   renamable $d0, renamable $d1 = LDPDi $sp, 26 :: (dereferenceable load 8 from %ir.arrayidx57, align 16), (dereferenceable load 8 from %ir.arrayidx58)
SU(1):   renamable $d2 = LDRDui $sp, 28 :: (dereferenceable load 8 from %ir.arrayidx60, align 16)
SU(3):   renamable $d3 = LDURDi $fp, -136 :: (dereferenceable load 8 from %ir.tmax)
SU(2):   $d8 = FMOVXDr $x25
SU(4):   renamable $d0 = FADDDrr renamable $d0, renamable $d1
SU(5):   renamable $d0 = FADDDrr renamable $d0, renamable $d2
SU(7):   renamable $d1 = FMULDrr renamable $d0, renamable $d8
SU(8):   renamable $d1 = FDIVDrr renamable $d1, renamable $d3
SU(9):   $x0 = ORRXrs $xzr, $x20, 0
SU(10):   $x1 = ORRXrs $xzr, $x21, 0
SU(6):   STURDi renamable $d0, $fp, -128 :: (store 8 into %ir.t)

Fixup kills for %bb.12
********** MI Scheduling **********
main:%bb.13 for.inc72
  From: renamable $w8 = LDRWui $sp, 47 :: (dereferenceable load 4 from %ir.i)
    To: B %bb.10
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 47 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STRWui renamable $w8, $sp, 47 :: (store 4 into %ir.i)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.10
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 47 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w8, $sp, 47 :: (store 4 into %ir.i)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   renamable $w8 = LDRWui $sp, 47 :: (dereferenceable load 4 from %ir.i)
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
SU(2):   STRWui renamable $w8, $sp, 47 :: (store 4 into %ir.i)

Fixup kills for %bb.13
********** MI Scheduling **********
main:%bb.14 if.end75
  From: $w0 = ORRWrs $wzr, $wzr, 0
    To: $sp = frame-destroy ADDXri $sp, 448, 0
 RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   $w0 = ORRWrs $wzr, $wzr, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $fp, $lr = frame-destroy LDPXi $sp, 54 :: (load 8 from %stack.13), (load 8 from %stack.12)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(2):   $x20, $x19 = frame-destroy LDPXi $sp, 52 :: (load 8 from %stack.15), (load 8 from %stack.14)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(3):   $x22, $x21 = frame-destroy LDPXi $sp, 50 :: (load 8 from %stack.17), (load 8 from %stack.16)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(4):   $x24, $x23 = frame-destroy LDPXi $sp, 48 :: (load 8 from %stack.19), (load 8 from %stack.18)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(5):   $x28, $x25 = frame-destroy LDPXi $sp, 46 :: (load 8 from %stack.21), (load 8 from %stack.20)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(6):   $d9, $d8 = frame-destroy LDPDi $sp, 44 :: (load 8 from %stack.23), (load 8 from %stack.22)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(7):   $d10 = frame-destroy LDRDui $sp, 42 :: (load 8 from %stack.24)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
ExitSU:   $sp = frame-destroy ADDXri $sp, 448, 0
  # preds left       : 7
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=3 Artificial
    SU(6): Ord  Latency=3 Artificial
    SU(5): Ord  Latency=3 Artificial
    SU(4): Ord  Latency=3 Artificial
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
Critical Path: (PGS-RR) 3
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 7 
  TopQ.A RemainingLatency 0 + 0c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $fp, $lr = frame-destroy LDPXi $sp, 54 :: (load 8 from %stack.13), (load 8 from %stack.12)
  Ready @0c
  TopQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 7 2 3 4 5 6 
  TopQ.A RemainingLatency 0 + 1c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(7) TOP-PATH                  3 cycles 
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) $x20, $x19 = frame-destroy LDPXi $sp, 52 :: (load 8 from %stack.15), (load 8 from %stack.14)
  Ready @1c
  TopQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 7 6 3 4 5 
  TopQ.A RemainingLatency 0 + 2c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(7) TOP-PATH                  3 cycles 
  Cand SU(6) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) $x22, $x21 = frame-destroy LDPXi $sp, 50 :: (load 8 from %stack.17), (load 8 from %stack.16)
  Ready @2c
  TopQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 7 6 5 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(7) TOP-PATH                  3 cycles 
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) $x24, $x23 = frame-destroy LDPXi $sp, 48 :: (load 8 from %stack.19), (load 8 from %stack.18)
  Ready @3c
  TopQ.A BotLatency SU(4) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 7 6 5 
  TopQ.A RemainingLatency 0 + 4c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(7) TOP-PATH                  3 cycles 
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) $x28, $x25 = frame-destroy LDPXi $sp, 46 :: (load 8 from %stack.21), (load 8 from %stack.20)
  Ready @4c
  TopQ.A BotLatency SU(5) 3c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 7 6 
  TopQ.A RemainingLatency 0 + 5c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(7) TOP-PATH                  3 cycles 
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) $d9, $d8 = frame-destroy LDPDi $sp, 44 :: (load 8 from %stack.23), (load 8 from %stack.22)
  Ready @5c
  TopQ.A BotLatency SU(6) 3c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 7 
  TopQ.A RemainingLatency 0 + 6c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(7) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) $d10 = frame-destroy LDRDui $sp, 42 :: (load 8 from %stack.24)
  Ready @6c
  TopQ.A BotLatency SU(7) 3c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $w0 = ORRWrs $wzr, $wzr, 0
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.14 ***
SU(1):   $fp, $lr = frame-destroy LDPXi $sp, 54 :: (load 8 from %stack.13), (load 8 from %stack.12)
SU(2):   $x20, $x19 = frame-destroy LDPXi $sp, 52 :: (load 8 from %stack.15), (load 8 from %stack.14)
SU(3):   $x22, $x21 = frame-destroy LDPXi $sp, 50 :: (load 8 from %stack.17), (load 8 from %stack.16)
SU(4):   $x24, $x23 = frame-destroy LDPXi $sp, 48 :: (load 8 from %stack.19), (load 8 from %stack.18)
SU(5):   $x28, $x25 = frame-destroy LDPXi $sp, 46 :: (load 8 from %stack.21), (load 8 from %stack.20)
SU(6):   $d9, $d8 = frame-destroy LDPDi $sp, 44 :: (load 8 from %stack.23), (load 8 from %stack.22)
SU(7):   $d10 = frame-destroy LDRDui $sp, 42 :: (load 8 from %stack.24)
SU(0):   $w0 = ORRWrs $wzr, $wzr, 0

Fixup kills for %bb.14
