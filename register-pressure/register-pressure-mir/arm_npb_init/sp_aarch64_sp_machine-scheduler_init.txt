Before MISched:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
  fi#6: size=4, align=4, at location [SP]
  fi#7: size=8, align=8, at location [SP]
  fi#8: size=8, align=8, at location [SP]
  fi#9: size=8, align=8, at location [SP]
  fi#10: size=128, align=16, at location [SP]
  fi#11: size=4, align=4, at location [SP]
  fi#12: size=1, align=4, at location [SP]
  fi#13: size=128, align=16, at location [SP]
  fi#14: size=8, align=8, at location [SP]
  fi#15: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: 0x408B89645A1CAC08, align=8
  cp#1: -4.683910e+03, align=8
  cp#2: -1.927240e+04, align=8
Function Live Ins: $w0 in %1, $x1 in %2

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $w0, $x1
  %291:gpr64sp = ADDXri %stack.13.t_names, 0, 0
  %2:gpr64 = COPY $x1
  %1:gpr32 = COPY $w0
  STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
  STRWui %1:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
  STRXui %2:gpr64, %291:gpr64sp, 40 :: (store 8 into %ir.argv.addr)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %4:gpr64 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
  %5:gpr64 = MOVaddr target-flags(aarch64-page) @.str.1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1
  $x0 = COPY %4:gpr64
  $x1 = COPY %5:gpr64
  BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %6:gpr64 = COPY $x0
  STRXui %6:gpr64, %stack.14.fp, 0 :: (store 8 into %ir.fp)
  %294:gpr64common = ADRP target-flags(aarch64-page) @timeron
  CBZX %6:gpr64, %bb.2
  B %bb.1

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %10:gpr32 = MOVi32imm 1
  STRWui %10:gpr32, %294:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
  %11:gpr64 = MOVaddr target-flags(aarch64-page) @.str.2, target-flags(aarch64-pageoff, aarch64-nc) @.str.2
  STRXui %11:gpr64, %stack.13.t_names, 1 :: (store 8 into %ir.arrayidx)
  %12:gpr64 = MOVaddr target-flags(aarch64-page) @.str.3, target-flags(aarch64-pageoff, aarch64-nc) @.str.3
  STRXui %12:gpr64, %stack.13.t_names, 2 :: (store 8 into %ir.arrayidx1, align 16)
  %13:gpr64 = MOVaddr target-flags(aarch64-page) @.str.4, target-flags(aarch64-pageoff, aarch64-nc) @.str.4
  STRXui %13:gpr64, %stack.13.t_names, 3 :: (store 8 into %ir.arrayidx2)
  %14:gpr64 = MOVaddr target-flags(aarch64-page) @.str.5, target-flags(aarch64-pageoff, aarch64-nc) @.str.5
  STRXui %14:gpr64, %stack.13.t_names, 4 :: (store 8 into %ir.arrayidx3, align 16)
  %15:gpr64 = MOVaddr target-flags(aarch64-page) @.str.6, target-flags(aarch64-pageoff, aarch64-nc) @.str.6
  STRXui %15:gpr64, %stack.13.t_names, 5 :: (store 8 into %ir.arrayidx4)
  %16:gpr64 = MOVaddr target-flags(aarch64-page) @.str.7, target-flags(aarch64-pageoff, aarch64-nc) @.str.7
  STRXui %16:gpr64, %stack.13.t_names, 6 :: (store 8 into %ir.arrayidx5, align 16)
  %17:gpr64 = MOVaddr target-flags(aarch64-page) @.str.8, target-flags(aarch64-pageoff, aarch64-nc) @.str.8
  STRXui %17:gpr64, %stack.13.t_names, 7 :: (store 8 into %ir.arrayidx6)
  %18:gpr64 = MOVaddr target-flags(aarch64-page) @.str.9, target-flags(aarch64-pageoff, aarch64-nc) @.str.9
  STRXui %18:gpr64, %stack.13.t_names, 8 :: (store 8 into %ir.arrayidx7, align 16)
  %19:gpr64 = MOVaddr target-flags(aarch64-page) @.str.10, target-flags(aarch64-pageoff, aarch64-nc) @.str.10
  STRXui %19:gpr64, %stack.13.t_names, 9 :: (store 8 into %ir.arrayidx8)
  %20:gpr64 = MOVaddr target-flags(aarch64-page) @.str.11, target-flags(aarch64-pageoff, aarch64-nc) @.str.11
  STRXui %20:gpr64, %stack.13.t_names, 10 :: (store 8 into %ir.arrayidx9, align 16)
  %21:gpr64 = MOVaddr target-flags(aarch64-page) @.str.12, target-flags(aarch64-pageoff, aarch64-nc) @.str.12
  STRXui %21:gpr64, %stack.13.t_names, 14 :: (store 8 into %ir.arrayidx10, align 16)
  %22:gpr64 = MOVaddr target-flags(aarch64-page) @.str.13, target-flags(aarch64-pageoff, aarch64-nc) @.str.13
  STRXui %22:gpr64, %stack.13.t_names, 13 :: (store 8 into %ir.arrayidx11)
  %23:gpr64 = MOVaddr target-flags(aarch64-page) @.str.14, target-flags(aarch64-pageoff, aarch64-nc) @.str.14
  STRXui %23:gpr64, %stack.13.t_names, 12 :: (store 8 into %ir.arrayidx12, align 16)
  %24:gpr64 = MOVaddr target-flags(aarch64-page) @.str.15, target-flags(aarch64-pageoff, aarch64-nc) @.str.15
  STRXui %24:gpr64, %stack.13.t_names, 11 :: (store 8 into %ir.arrayidx13)
  %25:gpr64 = MOVaddr target-flags(aarch64-page) @.str.16, target-flags(aarch64-pageoff, aarch64-nc) @.str.16
  STRXui %25:gpr64, %291:gpr64sp, 15 :: (store 8 into %ir.arrayidx14)
  %26:gpr64 = LDRXui %stack.14.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %26:gpr64
  BL @fclose, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  B %bb.3

bb.2.if.else:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  STRWui $wzr, %294:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)

bb.3.if.end:
; predecessors: %bb.2, %bb.1
  successors: %bb.4(0x50000000), %bb.9(0x30000000); %bb.4(62.50%), %bb.9(37.50%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %28:gpr64 = MOVaddr target-flags(aarch64-page) @.str.17, target-flags(aarch64-pageoff, aarch64-nc) @.str.17
  $x0 = COPY %28:gpr64
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %30:gpr64 = MOVaddr target-flags(aarch64-page) @.str.18, target-flags(aarch64-pageoff, aarch64-nc) @.str.18
  %31:gpr64 = MOVaddr target-flags(aarch64-page) @.str.1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1
  $x0 = COPY %30:gpr64
  $x1 = COPY %31:gpr64
  BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %32:gpr64 = COPY $x0
  STRXui %32:gpr64, %stack.14.fp, 0 :: (store 8 into %ir.fp)
  %292:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
  %293:gpr64common = ADRP target-flags(aarch64-page) @dt
  CBZX %32:gpr64, %bb.9
  B %bb.4

bb.4.if.then19:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %41:gpr64 = MOVaddr target-flags(aarch64-page) @.str.19, target-flags(aarch64-pageoff, aarch64-nc) @.str.19
  $x0 = COPY %41:gpr64
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %43:gpr64 = LDRXui %stack.14.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %44:gpr64 = MOVaddr target-flags(aarch64-page) @.str.20, target-flags(aarch64-pageoff, aarch64-nc) @.str.20
  $x0 = COPY %43:gpr64
  $x1 = COPY %44:gpr64
  $x2 = ADDXri %stack.4.niter, 0, 0
  BL @fscanf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %46:gpr32 = COPY $w0
  STRWui %46:gpr32, %stack.15.result, 0 :: (store 4 into %ir.result)

bb.5.while.cond:
; predecessors: %bb.4, %bb.5
  successors: %bb.5(0x7c000000), %bb.6(0x04000000); %bb.5(96.88%), %bb.6(3.12%)

  %47:gpr64 = LDRXui %stack.14.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %47:gpr64
  BL @fgetc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %48:gpr32sp = COPY $w0
  dead $wzr = SUBSWri %48:gpr32sp, 10, 0, implicit-def $nzcv
  Bcc 1, %bb.5, implicit killed $nzcv
  B %bb.6

bb.6.while.end:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %50:gpr64 = LDRXui %stack.14.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %51:gpr64 = MOVaddr target-flags(aarch64-page) @.str.21, target-flags(aarch64-pageoff, aarch64-nc) @.str.21
  %52:gpr64 = MOVaddr target-flags(aarch64-page) @dt, target-flags(aarch64-pageoff, aarch64-nc) @dt
  $x0 = COPY %50:gpr64
  $x1 = COPY %51:gpr64
  $x2 = COPY %52:gpr64
  BL @fscanf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %53:gpr32 = COPY $w0
  STRWui %53:gpr32, %stack.15.result, 0 :: (store 4 into %ir.result)

bb.7.while.cond25:
; predecessors: %bb.6, %bb.7
  successors: %bb.7(0x7c000000), %bb.8(0x04000000); %bb.7(96.88%), %bb.8(3.12%)

  %54:gpr64 = LDRXui %stack.14.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %54:gpr64
  BL @fgetc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %55:gpr32sp = COPY $w0
  dead $wzr = SUBSWri %55:gpr32sp, 10, 0, implicit-def $nzcv
  Bcc 1, %bb.7, implicit killed $nzcv
  B %bb.8

bb.8.while.end29:
; predecessors: %bb.7
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %57:gpr64 = LDRXui %stack.14.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %59:gpr64sp = nuw ADDXri %292:gpr64common, 4, 0
  %60:gpr64sp = nuw ADDXri %292:gpr64common, 8, 0
  %61:gpr64 = MOVaddr target-flags(aarch64-page) @.str.22, target-flags(aarch64-pageoff, aarch64-nc) @.str.22
  $x0 = COPY %57:gpr64
  $x1 = COPY %61:gpr64
  $x2 = COPY %292:gpr64common
  $x3 = COPY %59:gpr64sp
  $x4 = COPY %60:gpr64sp
  BL @fscanf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit killed $x3, implicit killed $x4, implicit-def $sp, implicit-def $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %62:gpr32 = COPY $w0
  STRWui %62:gpr32, %stack.15.result, 0 :: (store 4 into %ir.result)
  %63:gpr64 = LDRXui %stack.14.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %63:gpr64
  BL @fclose, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  B %bb.10

bb.9.if.else32:
; predecessors: %bb.3
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %33:gpr64 = MOVaddr target-flags(aarch64-page) @.str.23, target-flags(aarch64-pageoff, aarch64-nc) @.str.23
  $x0 = COPY %33:gpr64
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %35:gpr32 = MOVi32imm 400
  STRWui %35:gpr32, %stack.4.niter, 0 :: (store 4 into %ir.niter)
  %37:gpr64 = MOVi64imm 4562254508917369340
  STRXui %37:gpr64, %293:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (store 8 into @dt)
  %39:gpr64 = MOVi64imm 438086664294
  STRXui %39:gpr64, %292:gpr64common, 0 :: (store 8 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`, align 4)
  %40:gpr32 = MOVi32imm 102
  STRWui %40:gpr32, %292:gpr64common, 2 :: (store 4 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)

bb.10.if.end34:
; predecessors: %bb.9, %bb.8
  successors: %bb.13(0x10000000), %bb.11(0x70000000); %bb.13(12.50%), %bb.11(87.50%)

  %68:gpr32 = LDRWui %292:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  %69:gpr32 = LDRWui %292:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  %70:gpr32 = LDRWui %292:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %71:gpr64 = MOVaddr target-flags(aarch64-page) @.str.24, target-flags(aarch64-pageoff, aarch64-nc) @.str.24
  $x0 = COPY %71:gpr64
  $w1 = COPY %68:gpr32
  $w2 = COPY %69:gpr32
  $w3 = COPY %70:gpr32
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %73:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
  %75:fpr64 = LDRDui %293:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (dereferenceable load 8 from @dt)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %76:gpr64 = MOVaddr target-flags(aarch64-page) @.str.25, target-flags(aarch64-pageoff, aarch64-nc) @.str.25
  $x0 = COPY %76:gpr64
  $w1 = COPY %73:gpr32
  $d0 = COPY %75:fpr64
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %78:gpr64 = MOVaddr target-flags(aarch64-page) @.str.26, target-flags(aarch64-pageoff, aarch64-nc) @.str.26
  $x0 = COPY %78:gpr64
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %80:gpr32common = LDRWui %292:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  dead $wzr = SUBSWri %80:gpr32common, 102, 0, implicit-def $nzcv
  Bcc 12, %bb.13, implicit killed $nzcv
  B %bb.11

bb.11.if.end34:
; predecessors: %bb.10
  successors: %bb.13(0x12492492), %bb.12(0x6db6db6e); %bb.13(14.29%), %bb.12(85.71%)

  %81:gpr32common = LDRWui %292:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  dead $wzr = SUBSWri %81:gpr32common, 102, 0, implicit-def $nzcv
  Bcc 12, %bb.13, implicit killed $nzcv
  B %bb.12

bb.12.if.end34:
; predecessors: %bb.11
  successors: %bb.13(0x2aaaaaab), %bb.14(0x55555555); %bb.13(33.33%), %bb.14(66.67%)

  %82:gpr32common = LDRWui %292:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  dead $wzr = SUBSWri %82:gpr32common, 103, 0, implicit-def $nzcv
  Bcc 11, %bb.14, implicit killed $nzcv
  B %bb.13

bb.13.if.then42:
; predecessors: %bb.10, %bb.11, %bb.12
  successors: %bb.45(0x80000000); %bb.45(100.00%)

  %282:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points + 4, target-flags(aarch64-pageoff, aarch64-nc) @grid_points + 4
  %283:gpr32 = LDRWui %282:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  %284:gpr32 = LDRWui %282:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %285:gpr64 = MOVaddr target-flags(aarch64-page) @.str.27, target-flags(aarch64-pageoff, aarch64-nc) @.str.27
  $x0 = COPY %285:gpr64
  $w1 = COPY %80:gpr32common
  $w2 = COPY %283:gpr32
  $w3 = COPY %284:gpr32
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %287:gpr64 = MOVaddr target-flags(aarch64-page) @.str.28, target-flags(aarch64-pageoff, aarch64-nc) @.str.28
  $x0 = COPY %287:gpr64
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
  B %bb.45

bb.14.if.end45:
; predecessors: %bb.12
  successors: %bb.15(0x80000000); %bb.15(100.00%)

  %86:gpr32common = SUBWri %80:gpr32common, 2, 0
  %87:gpr64common = ADRP target-flags(aarch64-page) @nx2
  STRWui %86:gpr32common, %87:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nx2 :: (store 4 into @nx2)
  %88:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points + 4, target-flags(aarch64-pageoff, aarch64-nc) @grid_points + 4
  %89:gpr32common = LDRWui %88:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  %90:gpr32common = SUBWri %89:gpr32common, 2, 0
  %91:gpr64common = ADRP target-flags(aarch64-page) @ny2
  STRWui %90:gpr32common, %91:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @ny2 :: (store 4 into @ny2)
  %92:gpr32common = LDRWui %88:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  %93:gpr32common = SUBWri %92:gpr32common, 2, 0
  %94:gpr64common = ADRP target-flags(aarch64-page) @nz2
  STRWui %93:gpr32common, %94:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nz2 :: (store 4 into @nz2)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @set_constants, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %95:gpr32 = MOVi32imm 1
  STRWui %95:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)

bb.15.for.cond:
; predecessors: %bb.14, %bb.16
  successors: %bb.16(0x7c000000), %bb.17(0x04000000); %bb.16(96.88%), %bb.17(3.12%)

  %96:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %96:gpr32common, 15, 0, implicit-def $nzcv
  Bcc 12, %bb.17, implicit killed $nzcv
  B %bb.16

bb.16.for.body:
; predecessors: %bb.15
  successors: %bb.15(0x80000000); %bb.15(100.00%)

  %279:gpr32 = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = COPY %279:gpr32
  BL @timer_clear, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %280:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  %281:gpr32common = nsw ADDWri %280:gpr32common, 1, 0
  STRWui %281:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)
  B %bb.15

bb.17.for.end:
; predecessors: %bb.15
  successors: %bb.18(0x80000000); %bb.18(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @exact_rhs, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @initialize, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @adi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @initialize, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %98:gpr32 = MOVi32imm 1
  STRWui %98:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)

bb.18.for.cond49:
; predecessors: %bb.17, %bb.19
  successors: %bb.19(0x7c000000), %bb.20(0x04000000); %bb.19(96.88%), %bb.20(3.12%)

  %99:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %99:gpr32common, 15, 0, implicit-def $nzcv
  Bcc 12, %bb.20, implicit killed $nzcv
  B %bb.19

bb.19.for.body51:
; predecessors: %bb.18
  successors: %bb.18(0x80000000); %bb.18(100.00%)

  %276:gpr32 = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = COPY %276:gpr32
  BL @timer_clear, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %277:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  %278:gpr32common = nsw ADDWri %277:gpr32common, 1, 0
  STRWui %278:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)
  B %bb.18

bb.20.for.end54:
; predecessors: %bb.18
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %101:gpr32 = MOVi32imm 1
  $w0 = MOVi32imm 1
  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  STRWui %101:gpr32, %stack.5.step, 0 :: (store 4 into %ir.step)
  undef %260.sub_32:gpr64 = MOVi32imm 1717986919
  %267:gpr32 = MOVi32imm 20
  %272:gpr64 = MOVaddr target-flags(aarch64-page) @.str.29, target-flags(aarch64-pageoff, aarch64-nc) @.str.29

bb.21.for.cond55:
; predecessors: %bb.20, %bb.25
  successors: %bb.22(0x7c000000), %bb.26(0x04000000); %bb.22(96.88%), %bb.26(3.12%)

  %102:gpr32 = LDRWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
  %103:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
  dead $wzr = SUBSWrr %102:gpr32, %103:gpr32, implicit-def $nzcv
  Bcc 12, %bb.26, implicit killed $nzcv
  B %bb.22

bb.22.for.body57:
; predecessors: %bb.21
  successors: %bb.24(0x20000000), %bb.23(0x60000000); %bb.24(25.00%), %bb.23(75.00%)

  %258:gpr64common = LDRSWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
  %261:gpr64 = MADDXrrr %258:gpr64common, %260:gpr64, $xzr
  %262:gpr64 = UBFMXri %261:gpr64, 63, 63
  %264:gpr64 = SBFMXri %261:gpr64, 35, 63
  %266:gpr32 = ADDWrr %264.sub_32:gpr64, %262.sub_32:gpr64
  %269:gpr32 = MSUBWrrr %266:gpr32, %267:gpr32, %258.sub_32:gpr64common
  CBZW %269:gpr32, %bb.24
  B %bb.23

bb.23.for.body57:
; predecessors: %bb.22
  successors: %bb.24(0x2aaaaaab), %bb.25(0x55555555); %bb.24(33.33%), %bb.25(66.67%)

  dead $wzr = SUBSWri %258.sub_32:gpr64common, 1, 0, implicit-def $nzcv
  Bcc 1, %bb.25, implicit killed $nzcv
  B %bb.24

bb.24.if.then61:
; predecessors: %bb.22, %bb.23
  successors: %bb.25(0x80000000); %bb.25(100.00%)

  %271:gpr32 = LDRWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %272:gpr64
  $w1 = COPY %271:gpr32
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.25.if.end63:
; predecessors: %bb.23, %bb.24
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @adi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %274:gpr32common = LDRWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
  %275:gpr32common = nsw ADDWri %274:gpr32common, 1, 0
  STRWui %275:gpr32common, %stack.5.step, 0 :: (store 4 into %ir.step)
  B %bb.21

bb.26.for.end66:
; predecessors: %bb.21
  successors: %bb.27(0x50000000), %bb.28(0x30000000); %bb.27(62.50%), %bb.28(37.50%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = MOVi32imm 1
  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = MOVi32imm 1
  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %106:fpr64 = COPY killed $d0
  STRDui %106:fpr64, %291:gpr64sp, 35 :: (store 8 into %ir.tmax)
  %107:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = COPY %107:gpr32
  $x1 = ADDXri %stack.12.Class, 0, 0
  $x2 = ADDXri %stack.11.verified, 0, 0
  BL @verify, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit killed $x2, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %110:fpr64 = LDRDui %291:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
  FCMPDri %110:fpr64, implicit-def $nzcv
  Bcc 0, %bb.28, implicit killed $nzcv
  B %bb.27

bb.27.if.then69:
; predecessors: %bb.26
  successors: %bb.29(0x80000000); %bb.29(100.00%)

  %113:gpr32 = LDRWui %292:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  %114:gpr32 = LDRWui %292:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  %115:gpr32 = nsw MADDWrrr %113:gpr32, %114:gpr32, $wzr
  %116:gpr32 = LDRWui %292:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  %117:gpr32 = nsw MADDWrrr %115:gpr32, %116:gpr32, $wzr
  STRWui %117:gpr32, %stack.6.n3, 0 :: (store 4 into %ir.n3)
  %118:gpr32 = nsw ADDWrr %113:gpr32, %114:gpr32
  %119:gpr32 = nsw ADDWrr %118:gpr32, %116:gpr32
  %120:fpr64 = SCVTFUWDri %119:gpr32
  %121:fpr64 = FMOVDi 8
  %122:fpr64 = FDIVDrr %120:fpr64, %121:fpr64
  STRDui %122:fpr64, %291:gpr64sp, 36 :: (store 8 into %ir.t)
  %123:fpr64 = SCVTFUWDri %117:gpr32
  %124:gpr64common = ADRP target-flags(aarch64-page) %const.0
  %125:fpr64 = LDRDui %124:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  %126:fpr64 = FMULDrr %123:fpr64, %125:fpr64
  %127:fpr64 = FMULDrr %122:fpr64, %122:fpr64
  %128:gpr64common = ADRP target-flags(aarch64-page) %const.1
  %129:fpr64 = LDRDui %128:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  %130:fpr64 = FMULDrr %127:fpr64, %129:fpr64
  %131:fpr64 = FADDDrr %126:fpr64, %130:fpr64
  %132:gpr64 = MOVi64imm 4667539284973060096
  %133:fpr64 = COPY %132:gpr64
  %134:fpr64 = FMULDrr %122:fpr64, %133:fpr64
  %135:fpr64 = FADDDrr %131:fpr64, %134:fpr64
  %136:gpr64common = ADRP target-flags(aarch64-page) %const.2
  %137:fpr64 = LDRDui %136:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  %138:fpr64 = FADDDrr %135:fpr64, %137:fpr64
  undef %140.ssub:fpr64 = LDRSui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
  %142:fpr128 = SSHLLv2i32_shift %140:fpr64, 0
  %144:fpr64 = SCVTFv1i64 %142.dsub:fpr128
  %145:fpr64 = FMULDrr %138:fpr64, %144:fpr64
  %146:fpr64 = LDRDui %291:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
  %147:gpr64 = MOVi64imm 4696837146684686336
  %148:fpr64 = COPY %147:gpr64
  %149:fpr64 = FMULDrr %146:fpr64, %148:fpr64
  %150:fpr64 = FDIVDrr %145:fpr64, %149:fpr64
  STRDui %150:fpr64, %291:gpr64sp, 37 :: (store 8 into %ir.mflops)
  B %bb.29

bb.28.if.else84:
; predecessors: %bb.26
  successors: %bb.29(0x80000000); %bb.29(100.00%)

  STRXui $xzr, %291:gpr64sp, 37 :: (store 8 into %ir.mflops)

bb.29.if.end85:
; predecessors: %bb.28, %bb.27
  successors: %bb.30(0x50000000), %bb.44(0x30000000); %bb.30(62.50%), %bb.44(37.50%)

  %151:gpr32 = LDRSBWui %stack.12.Class, 0 :: (dereferenceable load 1 from %ir.Class, align 4)
  %153:gpr32 = LDRWui %292:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  %154:gpr32 = LDRWui %292:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  %155:gpr32 = LDRWui %292:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  %156:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
  %157:fpr64 = LDRDui %291:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
  %158:fpr64 = LDRDui %291:gpr64sp, 37 :: (dereferenceable load 8 from %ir.mflops)
  %159:gpr32 = LDRWui %stack.11.verified, 0 :: (dereferenceable load 4 from %ir.verified)
  ADJCALLSTACKDOWN 72, 0, implicit-def dead $sp, implicit $sp
  %160:gpr64 = MOVaddr target-flags(aarch64-page) @.str.40, target-flags(aarch64-pageoff, aarch64-nc) @.str.40
  STRXui %160:gpr64, $sp, 8 :: (store 8 into stack + 64)
  %162:gpr64 = MOVaddr target-flags(aarch64-page) @.str.39, target-flags(aarch64-pageoff, aarch64-nc) @.str.39
  STRXui %162:gpr64, $sp, 7 :: (store 8 into stack + 56)
  %163:gpr64 = MOVaddr target-flags(aarch64-page) @.str.38, target-flags(aarch64-pageoff, aarch64-nc) @.str.38
  STRXui %163:gpr64, $sp, 6 :: (store 8 into stack + 48)
  %164:gpr64 = MOVaddr target-flags(aarch64-page) @.str.37, target-flags(aarch64-pageoff, aarch64-nc) @.str.37
  STRXui %164:gpr64, $sp, 5 :: (store 8 into stack + 40)
  %165:gpr64 = MOVaddr target-flags(aarch64-page) @.str.36, target-flags(aarch64-pageoff, aarch64-nc) @.str.36
  STRXui %165:gpr64, $sp, 4 :: (store 8 into stack + 32)
  %166:gpr64 = MOVaddr target-flags(aarch64-page) @.str.35, target-flags(aarch64-pageoff, aarch64-nc) @.str.35
  STRXui %166:gpr64, $sp, 3 :: (store 8 into stack + 24)
  %167:gpr64 = MOVaddr target-flags(aarch64-page) @.str.34, target-flags(aarch64-pageoff, aarch64-nc) @.str.34
  STRXui %167:gpr64, $sp, 2 :: (store 8 into stack + 16)
  %168:gpr64 = MOVaddr target-flags(aarch64-page) @.str.33, target-flags(aarch64-pageoff, aarch64-nc) @.str.33
  STRXui %168:gpr64, $sp, 1 :: (store 8 into stack + 8)
  %169:gpr64 = MOVaddr target-flags(aarch64-page) @.str.32, target-flags(aarch64-pageoff, aarch64-nc) @.str.32
  STRXui %169:gpr64, $sp, 0 :: (store 8 into stack)
  %170:gpr64 = MOVaddr target-flags(aarch64-page) @.str.30, target-flags(aarch64-pageoff, aarch64-nc) @.str.30
  %171:gpr64 = MOVaddr target-flags(aarch64-page) @.str.31, target-flags(aarch64-pageoff, aarch64-nc) @.str.31
  $x0 = COPY %170:gpr64
  $w1 = COPY %151:gpr32
  $w2 = COPY %153:gpr32
  $w3 = COPY %154:gpr32
  $w4 = COPY %155:gpr32
  $w5 = COPY %156:gpr32
  $d0 = COPY %157:fpr64
  $d1 = COPY %158:fpr64
  $x6 = COPY %171:gpr64
  $w7 = COPY %159:gpr32
  BL @print_results, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit killed $w4, implicit killed $w5, implicit killed $d0, implicit killed $d1, implicit killed $x6, implicit killed $w7, implicit-def $sp
  ADJCALLSTACKUP 72, 0, implicit-def dead $sp, implicit $sp
  %173:gpr32 = LDRWui %294:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW %173:gpr32, %bb.44
  B %bb.30

bb.30.if.then86:
; predecessors: %bb.29
  successors: %bb.31(0x80000000); %bb.31(100.00%)

  %174:gpr32 = MOVi32imm 1
  STRWui %174:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)
  %254:gpr64sp = ADDXri %stack.10.trecs, 0, 0

bb.31.for.cond87:
; predecessors: %bb.30, %bb.32
  successors: %bb.32(0x7c000000), %bb.33(0x04000000); %bb.32(96.88%), %bb.33(3.12%)

  %175:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %175:gpr32common, 15, 0, implicit-def $nzcv
  Bcc 12, %bb.33, implicit killed $nzcv
  B %bb.32

bb.32.for.body90:
; predecessors: %bb.31
  successors: %bb.31(0x80000000); %bb.31(100.00%)

  %251:gpr32 = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = COPY %251:gpr32
  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %252:fpr64 = COPY killed $d0
  %253:gpr64 = LDRSWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  STRDroX %252:fpr64, %254:gpr64sp, %253:gpr64, 0, 1 :: (store 8 into %ir.arrayidx92)
  %255:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  %256:gpr32common = nsw ADDWri %255:gpr32common, 1, 0
  STRWui %256:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)
  B %bb.31

bb.33.for.end95:
; predecessors: %bb.31
  successors: %bb.34(0x50000000), %bb.35(0x30000000); %bb.34(62.50%), %bb.35(37.50%)

  %177:fpr64 = LDRDui %291:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
  FCMPDri %177:fpr64, implicit-def $nzcv
  Bcc 1, %bb.35, implicit killed $nzcv
  B %bb.34

bb.34.if.then98:
; predecessors: %bb.33
  successors: %bb.35(0x80000000); %bb.35(100.00%)

  %178:gpr64 = MOVi64imm 4607182418800017408
  STRXui %178:gpr64, %291:gpr64sp, 35 :: (store 8 into %ir.tmax)

bb.35.if.end99:
; predecessors: %bb.33, %bb.34
  successors: %bb.36(0x80000000); %bb.36(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %179:gpr64 = MOVaddr target-flags(aarch64-page) @.str.41, target-flags(aarch64-pageoff, aarch64-nc) @.str.41
  $x0 = COPY %179:gpr64
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %181:gpr32 = MOVi32imm 1
  STRWui %181:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)
  %187:gpr64sp = ADDXri %stack.13.t_names, 0, 0
  %189:gpr64sp = ADDXri %stack.10.trecs, 0, 0
  %191:gpr64 = MOVi64imm 4636737291354636288
  %196:gpr64 = MOVaddr target-flags(aarch64-page) @.str.42, target-flags(aarch64-pageoff, aarch64-nc) @.str.42
  %238:gpr64 = MOVaddr target-flags(aarch64-page) @.str.43, target-flags(aarch64-pageoff, aarch64-nc) @.str.43
  %239:gpr64 = MOVaddr target-flags(aarch64-page) @.str.44, target-flags(aarch64-pageoff, aarch64-nc) @.str.44
  %247:gpr64 = MOVaddr target-flags(aarch64-page) @.str.45, target-flags(aarch64-pageoff, aarch64-nc) @.str.45
  %226:gpr64 = MOVaddr target-flags(aarch64-page) @.str.46, target-flags(aarch64-pageoff, aarch64-nc) @.str.46
  %213:gpr64 = MOVaddr target-flags(aarch64-page) @.str.47, target-flags(aarch64-pageoff, aarch64-nc) @.str.47

bb.36.for.cond101:
; predecessors: %bb.35, %bb.43
  successors: %bb.37(0x7c000000), %bb.44(0x04000000); %bb.37(96.88%), %bb.44(3.12%)

  %182:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %182:gpr32common, 15, 0, implicit-def $nzcv
  Bcc 12, %bb.44, implicit killed $nzcv
  B %bb.37

bb.37.for.body104:
; predecessors: %bb.36
  successors: %bb.38(0x40000000), %bb.39(0x40000000); %bb.38(50.00%), %bb.39(50.00%)

  %185:gpr64 = LDRSWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  %186:gpr64 = UBFMXri %185:gpr64, 61, 60
  %188:gpr64 = LDRXroX %187:gpr64sp, %186:gpr64, 0, 0 :: (load 8 from %ir.arrayidx106)
  %190:fpr64 = LDRDroX %189:gpr64sp, %186:gpr64, 0, 0 :: (load 8 from %ir.arrayidx110)
  %192:fpr64 = COPY %191:gpr64
  %193:fpr64 = FMULDrr %190:fpr64, %192:fpr64
  %194:fpr64 = LDRDui %291:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
  %195:fpr64 = FDIVDrr %193:fpr64, %194:fpr64
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %196:gpr64
  $x1 = COPY %188:gpr64
  $d0 = COPY %190:fpr64
  $d1 = COPY %195:fpr64
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %198:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %198:gpr32common, 5, 0, implicit-def $nzcv
  Bcc 1, %bb.39, implicit killed $nzcv
  B %bb.38

bb.38.if.then116:
; predecessors: %bb.37
  successors: %bb.43(0x80000000); %bb.43(100.00%)

  %228:fpr64 = LDRDui %291:gpr64sp, 20 :: (dereferenceable load 8 from %ir.arrayidx117, align 16)
  %229:fpr64 = LDRDui %291:gpr64sp, 21 :: (dereferenceable load 8 from %ir.arrayidx118)
  %230:fpr64 = FADDDrr %228:fpr64, %229:fpr64
  %231:fpr64 = LDRDui %291:gpr64sp, 22 :: (dereferenceable load 8 from %ir.arrayidx120, align 16)
  %232:fpr64 = FADDDrr %230:fpr64, %231:fpr64
  STRDui %232:fpr64, %291:gpr64sp, 36 :: (store 8 into %ir.t)
  %234:fpr64 = COPY %191:gpr64
  %235:fpr64 = FMULDrr %232:fpr64, %234:fpr64
  %236:fpr64 = LDRDui %291:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
  %237:fpr64 = FDIVDrr %235:fpr64, %236:fpr64
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %238:gpr64
  $x1 = COPY %239:gpr64
  $d0 = COPY %232:fpr64
  $d1 = COPY %237:fpr64
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %241:fpr64 = LDRDui %291:gpr64sp, 23 :: (dereferenceable load 8 from %ir.arrayidx125)
  %242:fpr64 = LDRDui %291:gpr64sp, 36 :: (dereferenceable load 8 from %ir.t)
  %243:fpr64 = FSUBDrr %241:fpr64, %242:fpr64
  STRDui %243:fpr64, %291:gpr64sp, 36 :: (store 8 into %ir.t)
  %244:fpr64 = FMULDrr %243:fpr64, %234:fpr64
  %245:fpr64 = LDRDui %291:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
  %246:fpr64 = FDIVDrr %244:fpr64, %245:fpr64
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %238:gpr64
  $x1 = COPY %247:gpr64
  $d0 = COPY %243:fpr64
  $d1 = COPY %246:fpr64
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  B %bb.43

bb.39.if.else130:
; predecessors: %bb.37
  successors: %bb.40(0x40000000), %bb.41(0x40000000); %bb.40(50.00%), %bb.41(50.00%)

  %200:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %200:gpr32common, 8, 0, implicit-def $nzcv
  Bcc 1, %bb.41, implicit killed $nzcv
  B %bb.40

bb.40.if.then133:
; predecessors: %bb.39
  successors: %bb.43(0x80000000); %bb.43(100.00%)

  %215:fpr64 = LDRDui %291:gpr64sp, 26 :: (dereferenceable load 8 from %ir.arrayidx134, align 16)
  %216:fpr64 = LDRDui %291:gpr64sp, 27 :: (dereferenceable load 8 from %ir.arrayidx135)
  %217:fpr64 = FSUBDrr %215:fpr64, %216:fpr64
  %218:fpr64 = LDRDui %291:gpr64sp, 28 :: (dereferenceable load 8 from %ir.arrayidx137, align 16)
  %219:fpr64 = FSUBDrr %217:fpr64, %218:fpr64
  STRDui %219:fpr64, %291:gpr64sp, 36 :: (store 8 into %ir.t)
  %221:fpr64 = COPY %191:gpr64
  %222:fpr64 = FMULDrr %219:fpr64, %221:fpr64
  %223:fpr64 = LDRDui %291:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
  %224:fpr64 = FDIVDrr %222:fpr64, %223:fpr64
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %238:gpr64
  $x1 = COPY %226:gpr64
  $d0 = COPY %219:fpr64
  $d1 = COPY %224:fpr64
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  B %bb.43

bb.41.if.else142:
; predecessors: %bb.39
  successors: %bb.42(0x40000000), %bb.43(0x40000000); %bb.42(50.00%), %bb.43(50.00%)

  %202:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %202:gpr32common, 10, 0, implicit-def $nzcv
  Bcc 1, %bb.43, implicit killed $nzcv
  B %bb.42

bb.42.if.then145:
; predecessors: %bb.41
  successors: %bb.43(0x80000000); %bb.43(100.00%)

  %204:fpr64 = LDRDui %291:gpr64sp, 27 :: (dereferenceable load 8 from %ir.arrayidx146)
  %205:fpr64 = LDRDui %291:gpr64sp, 28 :: (dereferenceable load 8 from %ir.arrayidx147, align 16)
  %206:fpr64 = FADDDrr %204:fpr64, %205:fpr64
  STRDui %206:fpr64, %291:gpr64sp, 36 :: (store 8 into %ir.t)
  %208:fpr64 = COPY %191:gpr64
  %209:fpr64 = FMULDrr %206:fpr64, %208:fpr64
  %210:fpr64 = LDRDui %291:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
  %211:fpr64 = FDIVDrr %209:fpr64, %210:fpr64
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %238:gpr64
  $x1 = COPY %213:gpr64
  $d0 = COPY %206:fpr64
  $d1 = COPY %211:fpr64
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.43.for.inc155:
; predecessors: %bb.41, %bb.42, %bb.40, %bb.38
  successors: %bb.36(0x80000000); %bb.36(100.00%)

  %249:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  %250:gpr32common = nsw ADDWri %249:gpr32common, 1, 0
  STRWui %250:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)
  B %bb.36

bb.44.if.end158:
; predecessors: %bb.29, %bb.36
  successors: %bb.45(0x80000000); %bb.45(100.00%)

  STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)

bb.45.return:
; predecessors: %bb.44, %bb.13

  %290:gpr32 = LDRWui %stack.0.retval, 0 :: (dereferenceable load 4 from %ir.retval)
  $w0 = COPY %290:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function main.

********** MI Scheduling **********
main:%bb.0 entry
  From: %6:gpr64 = COPY $x0
    To: CBZX %6:gpr64, %bb.2
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %6:gpr64 = COPY $x0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Data Latency=0 Reg=%6
    SU(1): Data Latency=0 Reg=%6
  Single Issue       : false;
SU(1):   STRXui %6:gpr64, %stack.14.fp, 0 :: (store 8 into %ir.fp)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%6
  Single Issue       : false;
SU(2):   %294:gpr64common = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
ExitSU:   CBZX %6:gpr64, %bb.2
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%6
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %6:gpr64 = COPY $x0
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %294:gpr64common = ADRP target-flags(aarch64-page) @timeron
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRXui %6:gpr64, %stack.14.fp, 0 :: (store 8 into %ir.fp)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %6:gpr64 = COPY $x0
SU(1):   STRXui %6:gpr64, %stack.14.fp, 0 :: (store 8 into %ir.fp)
SU(2):   %294:gpr64common = ADRP target-flags(aarch64-page) @timeron

********** MI Scheduling **********
main:%bb.0 entry
  From: %4:gpr64 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
    To: BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %4:gpr64 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%4
  Single Issue       : false;
SU(1):   %5:gpr64 = MOVaddr target-flags(aarch64-page) @.str.1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%5
  Single Issue       : false;
SU(2):   $x0 = COPY %4:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%4
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $x1 = COPY %5:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%5
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $x1 = COPY %5:gpr64
  Ready @0c
  BotQ.A TopLatency SU(3) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $x0 = COPY %4:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %5:gpr64 = MOVaddr target-flags(aarch64-page) @.str.1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %4:gpr64 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %4:gpr64 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
SU(1):   %5:gpr64 = MOVaddr target-flags(aarch64-page) @.str.1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1
SU(2):   $x0 = COPY %4:gpr64
SU(3):   $x1 = COPY %5:gpr64

********** MI Scheduling **********
main:%bb.0 entry
  From: %291:gpr64sp = ADDXri %stack.13.t_names, 0, 0
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %291:gpr64sp = ADDXri %stack.13.t_names, 0, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%291
  Single Issue       : false;
SU(1):   %2:gpr64 = COPY $x1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(5): Data Latency=0 Reg=%2
  Single Issue       : false;
SU(2):   %1:gpr32 = COPY $w0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(4): Data Latency=0 Reg=%1
  Single Issue       : false;
SU(3):   STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   STRWui %1:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Data Latency=0 Reg=%1
  Single Issue       : false;
SU(5):   STRXui %2:gpr64, %291:gpr64sp, 40 :: (store 8 into %ir.argv.addr)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%2
    SU(0): Data Latency=1 Reg=%291
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(1) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(1) %2:gpr64 = COPY $x1
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 3 2 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
  Cand SU(2) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(2) %1:gpr32 = COPY $w0
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 3 4 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) STRXui %2:gpr64, %291:gpr64sp, 40 :: (store 8 into %ir.argv.addr)
  Ready @0c
  BotQ.A TopLatency SU(5) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 0 
Queue TopQ.P: 
Queue TopQ.A: 0 3 4 
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) STRWui %1:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %291:gpr64sp = ADDXri %stack.13.t_names, 0, 0
  Ready @3c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(1):   %2:gpr64 = COPY $x1
SU(2):   %1:gpr32 = COPY $w0
SU(0):   %291:gpr64sp = ADDXri %stack.13.t_names, 0, 0
SU(3):   STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
SU(4):   STRWui %1:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
SU(5):   STRXui %2:gpr64, %291:gpr64sp, 40 :: (store 8 into %ir.argv.addr)

********** MI Scheduling **********
main:%bb.1 if.then
  From: %10:gpr32 = MOVi32imm 1
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 33
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR32=3
Live In: %291 %294 
Live Out: %26 %291 %294 
Live Thru: GPR32=2
  LiveReg: %26
  LiveReg: %291
  UpdateRegP: SU(31) STRXui %25:gpr64, %291:gpr64sp, 15 :: (store 8 into %ir.arrayidx14)
              to GPR32 1
  LiveReg: %294
  UpdateRegP: SU(1) STRWui %10:gpr32, %294:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
              to GPR32 1
Top Pressure:
GPR32=2
Bottom Pressure:
GPR32=3
Excess PSets: 
Cluster ld/st SU(23) - SU(25)
  Copy Succ SU(31)
Cluster ld/st SU(27) - SU(29)
  Copy Succ SU(31)
Cluster ld/st SU(21) - SU(19)
  Copy Succ SU(31)
Cluster ld/st SU(17) - SU(15)
  Copy Succ SU(31)
Cluster ld/st SU(13) - SU(11)
  Copy Succ SU(31)
Cluster ld/st SU(9) - SU(7)
  Copy Succ SU(31)
Cluster ld/st SU(5) - SU(3)
  Copy Succ SU(31)
SU(0):   %10:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%10
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   STRWui %10:gpr32, %294:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%10
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(2):   %11:gpr64 = MOVaddr target-flags(aarch64-page) @.str.2, target-flags(aarch64-pageoff, aarch64-nc) @.str.2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%11
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(3):   STRXui %11:gpr64, %stack.13.t_names, 1 :: (store 8 into %ir.arrayidx)
  # preds left       : 1
  # succs left       : 1
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%11
    SU(5): Ord  Latency=0 Cluster
  Successors:
    SU(31): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(4):   %12:gpr64 = MOVaddr target-flags(aarch64-page) @.str.3, target-flags(aarch64-pageoff, aarch64-nc) @.str.3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%12
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(5):   STRXui %12:gpr64, %stack.13.t_names, 2 :: (store 8 into %ir.arrayidx1, align 16)
  # preds left       : 1
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%12
  Successors:
    SU(31): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(6):   %13:gpr64 = MOVaddr target-flags(aarch64-page) @.str.4, target-flags(aarch64-pageoff, aarch64-nc) @.str.4
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%13
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   STRXui %13:gpr64, %stack.13.t_names, 3 :: (store 8 into %ir.arrayidx2)
  # preds left       : 1
  # succs left       : 1
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%13
    SU(9): Ord  Latency=0 Cluster
  Successors:
    SU(31): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(8):   %14:gpr64 = MOVaddr target-flags(aarch64-page) @.str.5, target-flags(aarch64-pageoff, aarch64-nc) @.str.5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(9): Data Latency=1 Reg=%14
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(9):   STRXui %14:gpr64, %stack.13.t_names, 4 :: (store 8 into %ir.arrayidx3, align 16)
  # preds left       : 1
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%14
  Successors:
    SU(31): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(10):   %15:gpr64 = MOVaddr target-flags(aarch64-page) @.str.6, target-flags(aarch64-pageoff, aarch64-nc) @.str.6
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(11): Data Latency=1 Reg=%15
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(11):   STRXui %15:gpr64, %stack.13.t_names, 5 :: (store 8 into %ir.arrayidx4)
  # preds left       : 1
  # succs left       : 1
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%15
    SU(13): Ord  Latency=0 Cluster
  Successors:
    SU(31): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(12):   %16:gpr64 = MOVaddr target-flags(aarch64-page) @.str.7, target-flags(aarch64-pageoff, aarch64-nc) @.str.7
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(13): Data Latency=1 Reg=%16
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(13):   STRXui %16:gpr64, %stack.13.t_names, 6 :: (store 8 into %ir.arrayidx5, align 16)
  # preds left       : 1
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%16
  Successors:
    SU(31): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(14):   %17:gpr64 = MOVaddr target-flags(aarch64-page) @.str.8, target-flags(aarch64-pageoff, aarch64-nc) @.str.8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(15): Data Latency=1 Reg=%17
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(15):   STRXui %17:gpr64, %stack.13.t_names, 7 :: (store 8 into %ir.arrayidx6)
  # preds left       : 1
  # succs left       : 1
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(14): Data Latency=1 Reg=%17
    SU(17): Ord  Latency=0 Cluster
  Successors:
    SU(31): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(16):   %18:gpr64 = MOVaddr target-flags(aarch64-page) @.str.9, target-flags(aarch64-pageoff, aarch64-nc) @.str.9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(17): Data Latency=1 Reg=%18
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(17):   STRXui %18:gpr64, %stack.13.t_names, 8 :: (store 8 into %ir.arrayidx7, align 16)
  # preds left       : 1
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(16): Data Latency=1 Reg=%18
  Successors:
    SU(31): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(18):   %19:gpr64 = MOVaddr target-flags(aarch64-page) @.str.10, target-flags(aarch64-pageoff, aarch64-nc) @.str.10
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(19): Data Latency=1 Reg=%19
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(19):   STRXui %19:gpr64, %stack.13.t_names, 9 :: (store 8 into %ir.arrayidx8)
  # preds left       : 1
  # succs left       : 1
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(18): Data Latency=1 Reg=%19
    SU(21): Ord  Latency=0 Cluster
  Successors:
    SU(31): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(20):   %20:gpr64 = MOVaddr target-flags(aarch64-page) @.str.11, target-flags(aarch64-pageoff, aarch64-nc) @.str.11
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(21): Data Latency=1 Reg=%20
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(21):   STRXui %20:gpr64, %stack.13.t_names, 10 :: (store 8 into %ir.arrayidx9, align 16)
  # preds left       : 1
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(20): Data Latency=1 Reg=%20
  Successors:
    SU(31): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(22):   %21:gpr64 = MOVaddr target-flags(aarch64-page) @.str.12, target-flags(aarch64-pageoff, aarch64-nc) @.str.12
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(23): Data Latency=1 Reg=%21
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(23):   STRXui %21:gpr64, %stack.13.t_names, 14 :: (store 8 into %ir.arrayidx10, align 16)
  # preds left       : 1
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(22): Data Latency=1 Reg=%21
  Successors:
    SU(31): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(24):   %22:gpr64 = MOVaddr target-flags(aarch64-page) @.str.13, target-flags(aarch64-pageoff, aarch64-nc) @.str.13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(25): Data Latency=1 Reg=%22
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(25):   STRXui %22:gpr64, %stack.13.t_names, 13 :: (store 8 into %ir.arrayidx11)
  # preds left       : 1
  # succs left       : 1
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(24): Data Latency=1 Reg=%22
    SU(23): Ord  Latency=0 Cluster
  Successors:
    SU(31): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(26):   %23:gpr64 = MOVaddr target-flags(aarch64-page) @.str.14, target-flags(aarch64-pageoff, aarch64-nc) @.str.14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(27): Data Latency=1 Reg=%23
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(27):   STRXui %23:gpr64, %stack.13.t_names, 12 :: (store 8 into %ir.arrayidx12, align 16)
  # preds left       : 1
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(26): Data Latency=1 Reg=%23
  Successors:
    SU(31): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(28):   %24:gpr64 = MOVaddr target-flags(aarch64-page) @.str.15, target-flags(aarch64-pageoff, aarch64-nc) @.str.15
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(29): Data Latency=1 Reg=%24
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(29):   STRXui %24:gpr64, %stack.13.t_names, 11 :: (store 8 into %ir.arrayidx13)
  # preds left       : 1
  # succs left       : 1
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(28): Data Latency=1 Reg=%24
    SU(27): Ord  Latency=0 Cluster
  Successors:
    SU(31): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(30):   %25:gpr64 = MOVaddr target-flags(aarch64-page) @.str.16, target-flags(aarch64-pageoff, aarch64-nc) @.str.16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(31): Data Latency=1 Reg=%25
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(31):   STRXui %25:gpr64, %291:gpr64sp, 15 :: (store 8 into %ir.arrayidx14)
  # preds left       : 15
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(30): Data Latency=1 Reg=%25
    SU(29): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(32):   %26:gpr64 = LDRXui %stack.14.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(32): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 32 
Queue BotQ.A: 31 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 
Picking from Bot:
  Cand SU(31) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(31) STRXui %25:gpr64, %291:gpr64sp, 15 :: (store 8 into %ir.arrayidx14)
Bottom Pressure:
GPR32=4
  LiveReg: %25
  UpdateRegP: SU(31) STRXui %25:gpr64, %291:gpr64sp, 15 :: (store 8 into %ir.arrayidx14)
              to 
  Ready @0c
  BotQ.A TopLatency SU(31) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 32 
Queue BotQ.A: 1 30 29 27 25 23 21 19 17 15 13 11 9 7 5 3 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 
BotQ.A RemLatency SU(1) 1c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(30) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(30) %25:gpr64 = MOVaddr target-flags(aarch64-page) @.str.16, target-flags(aarch64-pageoff, aarch64-nc) @.str.16
Bottom Pressure:
GPR32=3
  Ready @1c
  BotQ.A BotLatency SU(30) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 32 
Queue BotQ.A: 1 3 29 27 25 23 21 19 17 15 13 11 9 7 5 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 32 
BotQ.A RemLatency SU(1) 1c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(29) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(29) STRXui %24:gpr64, %stack.13.t_names, 11 :: (store 8 into %ir.arrayidx13)
Bottom Pressure:
GPR32=4
  LiveReg: %24
  UpdateRegP: SU(29) STRXui %24:gpr64, %stack.13.t_names, 11 :: (store 8 into %ir.arrayidx13)
              to 
  Ready @2c
  BotQ.A TopLatency SU(29) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 27 25 23 21 19 17 15 13 11 9 7 28 32 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 32 
BotQ.A RemLatency SU(1) 1c
  BotQ.A RemainingLatency 1 + 3c > CritPath 3
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(27) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(27) STRXui %23:gpr64, %stack.13.t_names, 12 :: (store 8 into %ir.arrayidx12, align 16)
Bottom Pressure:
GPR32=5
  LiveReg: %23
  UpdateRegP: SU(27) STRXui %23:gpr64, %stack.13.t_names, 12 :: (store 8 into %ir.arrayidx12, align 16)
              to 
  Ready @3c
  BotQ.A TopLatency SU(27) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 32 25 23 21 19 17 15 13 11 9 7 28 26 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 32 
  BotQ.A RemainingLatency 0 + 4c > CritPath 3
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(32) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(32) %26:gpr64 = LDRXui %stack.14.fp, 0 :: (dereferenceable load 8 from %ir.fp)
Bottom Pressure:
GPR32=4
  Ready @4c
  BotQ.A BotLatency SU(32) 3c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 26 25 23 21 19 17 15 13 11 9 7 28 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 
  BotQ.A RemainingLatency 0 + 5c > CritPath 3
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(25) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(25) STRXui %22:gpr64, %stack.13.t_names, 13 :: (store 8 into %ir.arrayidx11)
Bottom Pressure:
GPR32=5
  LiveReg: %22
  UpdateRegP: SU(25) STRXui %22:gpr64, %stack.13.t_names, 13 :: (store 8 into %ir.arrayidx11)
              to 
  Ready @5c
  BotQ.A TopLatency SU(25) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 26 28 23 21 19 17 15 13 11 9 7 24 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 
  BotQ.A RemainingLatency 0 + 6c > CritPath 3
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(26) REG-MAX                            
  Cand SU(28) ORDER                              
  Cand SU(23) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(23) STRXui %21:gpr64, %stack.13.t_names, 14 :: (store 8 into %ir.arrayidx10, align 16)
Bottom Pressure:
GPR32=6
  LiveReg: %21
  UpdateRegP: SU(23) STRXui %21:gpr64, %stack.13.t_names, 14 :: (store 8 into %ir.arrayidx10, align 16)
              to 
  Ready @6c
  BotQ.A TopLatency SU(23) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 26 28 24 21 19 17 15 13 11 9 7 22 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 
  BotQ.A RemainingLatency 0 + 7c > CritPath 3
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(26) REG-MAX                            
  Cand SU(28) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(28) %24:gpr64 = MOVaddr target-flags(aarch64-page) @.str.15, target-flags(aarch64-pageoff, aarch64-nc) @.str.15
Bottom Pressure:
GPR32=5
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 26 22 24 21 19 17 15 13 11 9 7 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 20 22 24 26 
  BotQ.A RemainingLatency 0 + 8c > CritPath 3
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(19) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(19) STRXui %19:gpr64, %stack.13.t_names, 9 :: (store 8 into %ir.arrayidx8)
Bottom Pressure:
GPR32=6
  LiveReg: %19
  UpdateRegP: SU(19) STRXui %19:gpr64, %stack.13.t_names, 9 :: (store 8 into %ir.arrayidx8)
              to 
  Ready @8c
  BotQ.A TopLatency SU(19) 1c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 26 22 24 21 7 17 15 13 11 9 18 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 20 22 24 26 
  BotQ.A RemainingLatency 0 + 9c > CritPath 3
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(26) REG-MAX                            
  Cand SU(21) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(21) STRXui %20:gpr64, %stack.13.t_names, 10 :: (store 8 into %ir.arrayidx9, align 16)
Bottom Pressure:
GPR32=7
  LiveReg: %20
  UpdateRegP: SU(21) STRXui %20:gpr64, %stack.13.t_names, 10 :: (store 8 into %ir.arrayidx9, align 16)
              to 
  Ready @9c
  BotQ.A TopLatency SU(21) 1c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 26 22 24 18 7 17 15 13 11 9 20 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 20 22 24 26 
  BotQ.A RemainingLatency 0 + 10c > CritPath 3
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(26) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(26) %23:gpr64 = MOVaddr target-flags(aarch64-page) @.str.14, target-flags(aarch64-pageoff, aarch64-nc) @.str.14
Bottom Pressure:
GPR32=6
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 20 22 24 18 7 17 15 13 11 9 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 20 22 24 
  BotQ.A RemainingLatency 0 + 11c > CritPath 3
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(15) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(15) STRXui %17:gpr64, %stack.13.t_names, 7 :: (store 8 into %ir.arrayidx6)
Bottom Pressure:
GPR32=7
  LiveReg: %17
  UpdateRegP: SU(15) STRXui %17:gpr64, %stack.13.t_names, 7 :: (store 8 into %ir.arrayidx6)
              to 
  Ready @11c
  BotQ.A TopLatency SU(15) 1c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 20 22 24 18 7 17 9 13 11 14 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 20 22 24 
  BotQ.A RemainingLatency 0 + 12c > CritPath 3
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(20) REG-MAX                            
  Cand SU(22) ORDER                              
  Cand SU(24) ORDER                              
  Cand SU(17) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(17) STRXui %18:gpr64, %stack.13.t_names, 8 :: (store 8 into %ir.arrayidx7, align 16)
Bottom Pressure:
GPR32=8
  LiveReg: %18
  UpdateRegP: SU(17) STRXui %18:gpr64, %stack.13.t_names, 8 :: (store 8 into %ir.arrayidx7, align 16)
              to 
  Ready @12c
  BotQ.A TopLatency SU(17) 1c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 20 22 24 18 7 14 9 13 11 16 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 20 22 24 
  BotQ.A RemainingLatency 0 + 13c > CritPath 3
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(20) REG-MAX                            
  Cand SU(22) ORDER                              
  Cand SU(24) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(24) %22:gpr64 = MOVaddr target-flags(aarch64-page) @.str.13, target-flags(aarch64-pageoff, aarch64-nc) @.str.13
Bottom Pressure:
GPR32=7
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 20 22 16 18 7 14 9 13 11 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 20 22 
  BotQ.A RemainingLatency 0 + 14c > CritPath 3
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(11) STRXui %15:gpr64, %stack.13.t_names, 5 :: (store 8 into %ir.arrayidx4)
Bottom Pressure:
GPR32=8
  LiveReg: %15
  UpdateRegP: SU(11) STRXui %15:gpr64, %stack.13.t_names, 5 :: (store 8 into %ir.arrayidx4)
              to 
  Ready @14c
  BotQ.A TopLatency SU(11) 1c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 20 22 16 18 7 14 9 13 10 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 20 22 
  BotQ.A RemainingLatency 0 + 15c > CritPath 3
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(20) REG-MAX                            
  Cand SU(22) ORDER                              
  Cand SU(13) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(13) STRXui %16:gpr64, %stack.13.t_names, 6 :: (store 8 into %ir.arrayidx5, align 16)
Bottom Pressure:
GPR32=9
  LiveReg: %16
  UpdateRegP: SU(13) STRXui %16:gpr64, %stack.13.t_names, 6 :: (store 8 into %ir.arrayidx5, align 16)
              to 
  Ready @15c
  BotQ.A TopLatency SU(13) 1c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 20 22 16 18 7 14 9 10 12 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 20 22 
  BotQ.A RemainingLatency 0 + 16c > CritPath 3
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(20) REG-MAX                            
  Cand SU(22) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(22) %21:gpr64 = MOVaddr target-flags(aarch64-page) @.str.12, target-flags(aarch64-pageoff, aarch64-nc) @.str.12
Bottom Pressure:
GPR32=8
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 20 12 16 18 7 14 9 10 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 20 
  BotQ.A RemainingLatency 0 + 17c > CritPath 3
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(7) STRXui %13:gpr64, %stack.13.t_names, 3 :: (store 8 into %ir.arrayidx2)
Bottom Pressure:
GPR32=9
  LiveReg: %13
  UpdateRegP: SU(7) STRXui %13:gpr64, %stack.13.t_names, 3 :: (store 8 into %ir.arrayidx2)
              to 
  Ready @17c
  BotQ.A TopLatency SU(7) 1c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 20 12 16 18 10 14 9 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 20 
  BotQ.A RemainingLatency 0 + 18c > CritPath 3
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(20) REG-MAX                            
  Cand SU(9) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(9) STRXui %14:gpr64, %stack.13.t_names, 4 :: (store 8 into %ir.arrayidx3, align 16)
Bottom Pressure:
GPR32=10
  LiveReg: %14
  UpdateRegP: SU(9) STRXui %14:gpr64, %stack.13.t_names, 4 :: (store 8 into %ir.arrayidx3, align 16)
              to 
  Ready @18c
  BotQ.A TopLatency SU(9) 1c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 20 12 16 18 10 14 6 8 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 20 
  BotQ.A RemainingLatency 0 + 19c > CritPath 3
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(20) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(20) %20:gpr64 = MOVaddr target-flags(aarch64-page) @.str.11, target-flags(aarch64-pageoff, aarch64-nc) @.str.11
Bottom Pressure:
GPR32=9
  Ready @19c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 8 12 16 18 10 14 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 
  BotQ.A RemainingLatency 0 + 20c > CritPath 3
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(3) STRXui %11:gpr64, %stack.13.t_names, 1 :: (store 8 into %ir.arrayidx)
Bottom Pressure:
GPR32=10
  LiveReg: %11
  UpdateRegP: SU(3) STRXui %11:gpr64, %stack.13.t_names, 1 :: (store 8 into %ir.arrayidx)
              to 
  Ready @20c
  BotQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 6 5 8 12 16 18 10 14 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 
  BotQ.A RemainingLatency 0 + 21c > CritPath 3
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(6) REG-MAX                            
  Cand SU(5) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(5) STRXui %12:gpr64, %stack.13.t_names, 2 :: (store 8 into %ir.arrayidx1, align 16)
Bottom Pressure:
GPR32=11
  LiveReg: %12
  UpdateRegP: SU(5) STRXui %12:gpr64, %stack.13.t_names, 2 :: (store 8 into %ir.arrayidx1, align 16)
              to 
  Ready @21c
  BotQ.A TopLatency SU(5) 1c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 6 2 8 12 16 18 10 14 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 
  BotQ.A RemainingLatency 0 + 22c > CritPath 3
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(6) REG-MAX                            
  Cand SU(8) ORDER                              
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(18) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(18) %19:gpr64 = MOVaddr target-flags(aarch64-page) @.str.10, target-flags(aarch64-pageoff, aarch64-nc) @.str.10
Bottom Pressure:
GPR32=10
  Ready @22c
  *** Max MOps 1 at cycle 22
Cycle: 23 BotQ.A
BotQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 6 2 8 12 16 4 10 14 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 
  BotQ.A RemainingLatency 0 + 23c > CritPath 3
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) STRWui %10:gpr32, %294:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
Bottom Pressure:
GPR32=11
  LiveReg: %10
  UpdateRegP: SU(1) STRWui %10:gpr32, %294:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
              to 
  Ready @23c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 23
Cycle: 24 BotQ.A
BotQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 6 2 8 12 16 4 10 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 
  BotQ.A RemainingLatency 0 + 24c > CritPath 3
Picking from Bot:
  Cand SU(14) ORDER                              
  Cand SU(16) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(16) %18:gpr64 = MOVaddr target-flags(aarch64-page) @.str.9, target-flags(aarch64-pageoff, aarch64-nc) @.str.9
Bottom Pressure:
GPR32=10
  Ready @24c
  *** Max MOps 1 at cycle 24
Cycle: 25 BotQ.A
BotQ.A @25c
  Retired: 25
  Executed: 25c
  Critical: 25c, 25 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 6 2 8 12 0 4 10 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 
  BotQ.A RemainingLatency 0 + 25c > CritPath 3
Picking from Bot:
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(14) %17:gpr64 = MOVaddr target-flags(aarch64-page) @.str.8, target-flags(aarch64-pageoff, aarch64-nc) @.str.8
Bottom Pressure:
GPR32=9
  Ready @25c
  *** Max MOps 1 at cycle 25
Cycle: 26 BotQ.A
BotQ.A @26c
  Retired: 26
  Executed: 26c
  Critical: 26c, 26 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 6 2 8 12 0 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 
  BotQ.A RemainingLatency 0 + 26c > CritPath 3
Picking from Bot:
  Cand SU(10) ORDER                              
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(12) %16:gpr64 = MOVaddr target-flags(aarch64-page) @.str.7, target-flags(aarch64-pageoff, aarch64-nc) @.str.7
Bottom Pressure:
GPR32=8
  Ready @26c
  *** Max MOps 1 at cycle 26
Cycle: 27 BotQ.A
BotQ.A @27c
  Retired: 27
  Executed: 27c
  Critical: 27c, 27 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 6 2 8 4 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 
  BotQ.A RemainingLatency 0 + 27c > CritPath 3
Picking from Bot:
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(10) %15:gpr64 = MOVaddr target-flags(aarch64-page) @.str.6, target-flags(aarch64-pageoff, aarch64-nc) @.str.6
Bottom Pressure:
GPR32=7
  Ready @27c
  *** Max MOps 1 at cycle 27
Cycle: 28 BotQ.A
BotQ.A @28c
  Retired: 28
  Executed: 28c
  Critical: 28c, 28 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 6 2 8 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 
  BotQ.A RemainingLatency 0 + 28c > CritPath 3
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %14:gpr64 = MOVaddr target-flags(aarch64-page) @.str.5, target-flags(aarch64-pageoff, aarch64-nc) @.str.5
Bottom Pressure:
GPR32=6
  Ready @28c
  *** Max MOps 1 at cycle 28
Cycle: 29 BotQ.A
BotQ.A @29c
  Retired: 29
  Executed: 29c
  Critical: 29c, 29 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 6 2 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 
  BotQ.A RemainingLatency 0 + 29c > CritPath 3
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %13:gpr64 = MOVaddr target-flags(aarch64-page) @.str.4, target-flags(aarch64-pageoff, aarch64-nc) @.str.4
Bottom Pressure:
GPR32=5
  Ready @29c
  *** Max MOps 1 at cycle 29
Cycle: 30 BotQ.A
BotQ.A @30c
  Retired: 30
  Executed: 30c
  Critical: 30c, 30 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 
  BotQ.A RemainingLatency 0 + 30c > CritPath 3
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %12:gpr64 = MOVaddr target-flags(aarch64-page) @.str.3, target-flags(aarch64-pageoff, aarch64-nc) @.str.3
Bottom Pressure:
GPR32=4
  Ready @30c
  *** Max MOps 1 at cycle 30
Cycle: 31 BotQ.A
BotQ.A @31c
  Retired: 31
  Executed: 31c
  Critical: 31c, 31 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  BotQ.A RemainingLatency 0 + 31c > CritPath 3
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %11:gpr64 = MOVaddr target-flags(aarch64-page) @.str.2, target-flags(aarch64-pageoff, aarch64-nc) @.str.2
Bottom Pressure:
GPR32=3
  Ready @31c
  *** Max MOps 1 at cycle 31
Cycle: 32 BotQ.A
BotQ.A @32c
  Retired: 32
  Executed: 32c
  Critical: 32c, 32 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %10:gpr32 = MOVi32imm 1
Bottom Pressure:
GPR32=2
  Ready @32c
  *** Max MOps 1 at cycle 32
Cycle: 33 BotQ.A
BotQ.A @33c
  Retired: 33
  Executed: 33c
  Critical: 33c, 33 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   %10:gpr32 = MOVi32imm 1
SU(2):   %11:gpr64 = MOVaddr target-flags(aarch64-page) @.str.2, target-flags(aarch64-pageoff, aarch64-nc) @.str.2
SU(4):   %12:gpr64 = MOVaddr target-flags(aarch64-page) @.str.3, target-flags(aarch64-pageoff, aarch64-nc) @.str.3
SU(6):   %13:gpr64 = MOVaddr target-flags(aarch64-page) @.str.4, target-flags(aarch64-pageoff, aarch64-nc) @.str.4
SU(8):   %14:gpr64 = MOVaddr target-flags(aarch64-page) @.str.5, target-flags(aarch64-pageoff, aarch64-nc) @.str.5
SU(10):   %15:gpr64 = MOVaddr target-flags(aarch64-page) @.str.6, target-flags(aarch64-pageoff, aarch64-nc) @.str.6
SU(12):   %16:gpr64 = MOVaddr target-flags(aarch64-page) @.str.7, target-flags(aarch64-pageoff, aarch64-nc) @.str.7
SU(14):   %17:gpr64 = MOVaddr target-flags(aarch64-page) @.str.8, target-flags(aarch64-pageoff, aarch64-nc) @.str.8
SU(16):   %18:gpr64 = MOVaddr target-flags(aarch64-page) @.str.9, target-flags(aarch64-pageoff, aarch64-nc) @.str.9
SU(1):   STRWui %10:gpr32, %294:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
SU(18):   %19:gpr64 = MOVaddr target-flags(aarch64-page) @.str.10, target-flags(aarch64-pageoff, aarch64-nc) @.str.10
SU(5):   STRXui %12:gpr64, %stack.13.t_names, 2 :: (store 8 into %ir.arrayidx1, align 16)
SU(3):   STRXui %11:gpr64, %stack.13.t_names, 1 :: (store 8 into %ir.arrayidx)
SU(20):   %20:gpr64 = MOVaddr target-flags(aarch64-page) @.str.11, target-flags(aarch64-pageoff, aarch64-nc) @.str.11
SU(9):   STRXui %14:gpr64, %stack.13.t_names, 4 :: (store 8 into %ir.arrayidx3, align 16)
SU(7):   STRXui %13:gpr64, %stack.13.t_names, 3 :: (store 8 into %ir.arrayidx2)
SU(22):   %21:gpr64 = MOVaddr target-flags(aarch64-page) @.str.12, target-flags(aarch64-pageoff, aarch64-nc) @.str.12
SU(13):   STRXui %16:gpr64, %stack.13.t_names, 6 :: (store 8 into %ir.arrayidx5, align 16)
SU(11):   STRXui %15:gpr64, %stack.13.t_names, 5 :: (store 8 into %ir.arrayidx4)
SU(24):   %22:gpr64 = MOVaddr target-flags(aarch64-page) @.str.13, target-flags(aarch64-pageoff, aarch64-nc) @.str.13
SU(17):   STRXui %18:gpr64, %stack.13.t_names, 8 :: (store 8 into %ir.arrayidx7, align 16)
SU(15):   STRXui %17:gpr64, %stack.13.t_names, 7 :: (store 8 into %ir.arrayidx6)
SU(26):   %23:gpr64 = MOVaddr target-flags(aarch64-page) @.str.14, target-flags(aarch64-pageoff, aarch64-nc) @.str.14
SU(21):   STRXui %20:gpr64, %stack.13.t_names, 10 :: (store 8 into %ir.arrayidx9, align 16)
SU(19):   STRXui %19:gpr64, %stack.13.t_names, 9 :: (store 8 into %ir.arrayidx8)
SU(28):   %24:gpr64 = MOVaddr target-flags(aarch64-page) @.str.15, target-flags(aarch64-pageoff, aarch64-nc) @.str.15
SU(23):   STRXui %21:gpr64, %stack.13.t_names, 14 :: (store 8 into %ir.arrayidx10, align 16)
SU(25):   STRXui %22:gpr64, %stack.13.t_names, 13 :: (store 8 into %ir.arrayidx11)
SU(32):   %26:gpr64 = LDRXui %stack.14.fp, 0 :: (dereferenceable load 8 from %ir.fp)
SU(27):   STRXui %23:gpr64, %stack.13.t_names, 12 :: (store 8 into %ir.arrayidx12, align 16)
SU(29):   STRXui %24:gpr64, %stack.13.t_names, 11 :: (store 8 into %ir.arrayidx13)
SU(30):   %25:gpr64 = MOVaddr target-flags(aarch64-page) @.str.16, target-flags(aarch64-pageoff, aarch64-nc) @.str.16
SU(31):   STRXui %25:gpr64, %291:gpr64sp, 15 :: (store 8 into %ir.arrayidx14)

********** MI Scheduling **********
main:%bb.3 if.end
  From: %32:gpr64 = COPY $x0
    To: CBZX %32:gpr64, %bb.9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %32:gpr64 = COPY $x0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Data Latency=0 Reg=%32
    SU(1): Data Latency=0 Reg=%32
  Single Issue       : false;
SU(1):   STRXui %32:gpr64, %stack.14.fp, 0 :: (store 8 into %ir.fp)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%32
  Single Issue       : false;
SU(2):   %292:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %293:gpr64common = ADRP target-flags(aarch64-page) @dt
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
ExitSU:   CBZX %32:gpr64, %bb.9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%32
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %32:gpr64 = COPY $x0
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 3 2 1 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %293:gpr64common = ADRP target-flags(aarch64-page) @dt
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 1 2 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %292:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRXui %32:gpr64, %stack.14.fp, 0 :: (store 8 into %ir.fp)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %32:gpr64 = COPY $x0
SU(1):   STRXui %32:gpr64, %stack.14.fp, 0 :: (store 8 into %ir.fp)
SU(2):   %292:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
SU(3):   %293:gpr64common = ADRP target-flags(aarch64-page) @dt

********** MI Scheduling **********
main:%bb.3 if.end
  From: %30:gpr64 = MOVaddr target-flags(aarch64-page) @.str.18, target-flags(aarch64-pageoff, aarch64-nc) @.str.18
    To: BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %30:gpr64 = MOVaddr target-flags(aarch64-page) @.str.18, target-flags(aarch64-pageoff, aarch64-nc) @.str.18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%30
  Single Issue       : false;
SU(1):   %31:gpr64 = MOVaddr target-flags(aarch64-page) @.str.1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%31
  Single Issue       : false;
SU(2):   $x0 = COPY %30:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%30
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $x1 = COPY %31:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%31
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $x1 = COPY %31:gpr64
  Ready @0c
  BotQ.A TopLatency SU(3) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $x0 = COPY %30:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %31:gpr64 = MOVaddr target-flags(aarch64-page) @.str.1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %30:gpr64 = MOVaddr target-flags(aarch64-page) @.str.18, target-flags(aarch64-pageoff, aarch64-nc) @.str.18
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %30:gpr64 = MOVaddr target-flags(aarch64-page) @.str.18, target-flags(aarch64-pageoff, aarch64-nc) @.str.18
SU(1):   %31:gpr64 = MOVaddr target-flags(aarch64-page) @.str.1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1
SU(2):   $x0 = COPY %30:gpr64
SU(3):   $x1 = COPY %31:gpr64

********** MI Scheduling **********
main:%bb.3 if.end
  From: %28:gpr64 = MOVaddr target-flags(aarch64-page) @.str.17, target-flags(aarch64-pageoff, aarch64-nc) @.str.17
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %28:gpr64 = MOVaddr target-flags(aarch64-page) @.str.17, target-flags(aarch64-pageoff, aarch64-nc) @.str.17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%28
  Single Issue       : false;
SU(1):   $x0 = COPY %28:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%28
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %28:gpr64
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %28:gpr64 = MOVaddr target-flags(aarch64-page) @.str.17, target-flags(aarch64-pageoff, aarch64-nc) @.str.17
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %28:gpr64 = MOVaddr target-flags(aarch64-page) @.str.17, target-flags(aarch64-pageoff, aarch64-nc) @.str.17
SU(1):   $x0 = COPY %28:gpr64

********** MI Scheduling **********
main:%bb.4 if.then19
  From: %46:gpr32 = COPY $w0
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %46:gpr32 = COPY $w0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%46
  Single Issue       : false;
SU(1):   STRWui %46:gpr32, %stack.15.result, 0 :: (store 4 into %ir.result)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%46
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %46:gpr32, %stack.15.result, 0 :: (store 4 into %ir.result)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %46:gpr32 = COPY $w0
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %46:gpr32 = COPY $w0
SU(1):   STRWui %46:gpr32, %stack.15.result, 0 :: (store 4 into %ir.result)

********** MI Scheduling **********
main:%bb.4 if.then19
  From: %44:gpr64 = MOVaddr target-flags(aarch64-page) @.str.20, target-flags(aarch64-pageoff, aarch64-nc) @.str.20
    To: BL @fscanf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w0
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %44:gpr64 = MOVaddr target-flags(aarch64-page) @.str.20, target-flags(aarch64-pageoff, aarch64-nc) @.str.20
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%44
  Single Issue       : false;
SU(1):   $x0 = COPY %43:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $x1 = COPY %44:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%44
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $x2 = ADDXri %stack.4.niter, 0, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @fscanf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w0
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $x1 = COPY %44:gpr64
  Ready @0c
  BotQ.A TopLatency SU(2) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %43:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) $x2 = ADDXri %stack.4.niter, 0, 0
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %44:gpr64 = MOVaddr target-flags(aarch64-page) @.str.20, target-flags(aarch64-pageoff, aarch64-nc) @.str.20
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %44:gpr64 = MOVaddr target-flags(aarch64-page) @.str.20, target-flags(aarch64-pageoff, aarch64-nc) @.str.20
SU(3):   $x2 = ADDXri %stack.4.niter, 0, 0
SU(1):   $x0 = COPY %43:gpr64
SU(2):   $x1 = COPY %44:gpr64

********** MI Scheduling **********
main:%bb.4 if.then19
  From: %41:gpr64 = MOVaddr target-flags(aarch64-page) @.str.19, target-flags(aarch64-pageoff, aarch64-nc) @.str.19
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %41:gpr64 = MOVaddr target-flags(aarch64-page) @.str.19, target-flags(aarch64-pageoff, aarch64-nc) @.str.19
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%41
  Single Issue       : false;
SU(1):   $x0 = COPY %41:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%41
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %41:gpr64
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %41:gpr64 = MOVaddr target-flags(aarch64-page) @.str.19, target-flags(aarch64-pageoff, aarch64-nc) @.str.19
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %41:gpr64 = MOVaddr target-flags(aarch64-page) @.str.19, target-flags(aarch64-pageoff, aarch64-nc) @.str.19
SU(1):   $x0 = COPY %41:gpr64

********** MI Scheduling **********
main:%bb.5 while.cond
  From: %48:gpr32sp = COPY $w0
    To: Bcc 1, %bb.5, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %48:gpr32sp = COPY $w0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=0 Reg=%48
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %48:gpr32sp, 10, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Data Latency=0 Reg=%48
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.5, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %48:gpr32sp, 10, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %48:gpr32sp = COPY $w0
  Ready @2c
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %48:gpr32sp = COPY $w0
SU(1):   dead $wzr = SUBSWri %48:gpr32sp, 10, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.6 while.end
  From: %53:gpr32 = COPY $w0
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %53:gpr32 = COPY $w0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%53
  Single Issue       : false;
SU(1):   STRWui %53:gpr32, %stack.15.result, 0 :: (store 4 into %ir.result)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%53
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %53:gpr32, %stack.15.result, 0 :: (store 4 into %ir.result)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %53:gpr32 = COPY $w0
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %53:gpr32 = COPY $w0
SU(1):   STRWui %53:gpr32, %stack.15.result, 0 :: (store 4 into %ir.result)

********** MI Scheduling **********
main:%bb.6 while.end
  From: %51:gpr64 = MOVaddr target-flags(aarch64-page) @.str.21, target-flags(aarch64-pageoff, aarch64-nc) @.str.21
    To: BL @fscanf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w0
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %51:gpr64 = MOVaddr target-flags(aarch64-page) @.str.21, target-flags(aarch64-pageoff, aarch64-nc) @.str.21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%51
  Single Issue       : false;
SU(1):   %52:gpr64 = MOVaddr target-flags(aarch64-page) @dt, target-flags(aarch64-pageoff, aarch64-nc) @dt
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(4): Data Latency=1 Reg=%52
  Single Issue       : false;
SU(2):   $x0 = COPY %50:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $x1 = COPY %51:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%51
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $x2 = COPY %52:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%52
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @fscanf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w0
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=0 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(4) $x2 = COPY %52:gpr64
  Ready @0c
  BotQ.A TopLatency SU(4) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 2 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(3) $x1 = COPY %51:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $x0 = COPY %50:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %52:gpr64 = MOVaddr target-flags(aarch64-page) @dt, target-flags(aarch64-pageoff, aarch64-nc) @dt
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %51:gpr64 = MOVaddr target-flags(aarch64-page) @.str.21, target-flags(aarch64-pageoff, aarch64-nc) @.str.21
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %51:gpr64 = MOVaddr target-flags(aarch64-page) @.str.21, target-flags(aarch64-pageoff, aarch64-nc) @.str.21
SU(1):   %52:gpr64 = MOVaddr target-flags(aarch64-page) @dt, target-flags(aarch64-pageoff, aarch64-nc) @dt
SU(2):   $x0 = COPY %50:gpr64
SU(3):   $x1 = COPY %51:gpr64
SU(4):   $x2 = COPY %52:gpr64

********** MI Scheduling **********
main:%bb.7 while.cond25
  From: %55:gpr32sp = COPY $w0
    To: Bcc 1, %bb.7, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %55:gpr32sp = COPY $w0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=0 Reg=%55
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %55:gpr32sp, 10, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Data Latency=0 Reg=%55
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.7, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %55:gpr32sp, 10, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %55:gpr32sp = COPY $w0
  Ready @2c
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %55:gpr32sp = COPY $w0
SU(1):   dead $wzr = SUBSWri %55:gpr32sp, 10, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.8 while.end29
  From: %62:gpr32 = COPY $w0
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %62:gpr32 = COPY $w0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%62
  Single Issue       : false;
SU(1):   STRWui %62:gpr32, %stack.15.result, 0 :: (store 4 into %ir.result)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%62
  Single Issue       : false;
SU(2):   %63:gpr64 = LDRXui %stack.14.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %62:gpr32, %stack.15.result, 0 :: (store 4 into %ir.result)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %62:gpr32 = COPY $w0
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 2 BotQ.A
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %63:gpr64 = LDRXui %stack.14.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 2
  Executed: 4c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(2):   %63:gpr64 = LDRXui %stack.14.fp, 0 :: (dereferenceable load 8 from %ir.fp)
SU(0):   %62:gpr32 = COPY $w0
SU(1):   STRWui %62:gpr32, %stack.15.result, 0 :: (store 4 into %ir.result)

********** MI Scheduling **********
main:%bb.8 while.end29
  From: %59:gpr64sp = nuw ADDXri %292:gpr64common, 4, 0
    To: BL @fscanf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit killed $x3, implicit killed $x4, implicit-def $sp, implicit-def $w0
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %59:gpr64sp = nuw ADDXri %292:gpr64common, 4, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(6): Data Latency=1 Reg=%59
  Single Issue       : false;
SU(1):   %60:gpr64sp = nuw ADDXri %292:gpr64common, 8, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%60
  Single Issue       : false;
SU(2):   %61:gpr64 = MOVaddr target-flags(aarch64-page) @.str.22, target-flags(aarch64-pageoff, aarch64-nc) @.str.22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(4): Data Latency=1 Reg=%61
  Single Issue       : false;
SU(3):   $x0 = COPY %57:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $x1 = COPY %61:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%61
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(5):   $x2 = COPY %292:gpr64common
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(6):   $x3 = COPY %59:gpr64sp
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%59
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(7):   $x4 = COPY %60:gpr64sp
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%60
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @fscanf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit killed $x3, implicit killed $x4, implicit-def $sp, implicit-def $w0
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=0 Artificial
    SU(6): Ord  Latency=0 Artificial
    SU(5): Ord  Latency=0 Artificial
    SU(4): Ord  Latency=0 Artificial
    SU(3): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 6 5 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 5 
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(7) $x4 = COPY %60:gpr64sp
  Ready @0c
  BotQ.A TopLatency SU(7) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 3 6 5 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 5 
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(6) $x3 = COPY %59:gpr64sp
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 3 4 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 5 
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(5) $x2 = COPY %292:gpr64common
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 3 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(4) $x1 = COPY %61:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 2 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) $x0 = COPY %57:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %61:gpr64 = MOVaddr target-flags(aarch64-page) @.str.22, target-flags(aarch64-pageoff, aarch64-nc) @.str.22
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %60:gpr64sp = nuw ADDXri %292:gpr64common, 8, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %59:gpr64sp = nuw ADDXri %292:gpr64common, 4, 0
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   %59:gpr64sp = nuw ADDXri %292:gpr64common, 4, 0
SU(1):   %60:gpr64sp = nuw ADDXri %292:gpr64common, 8, 0
SU(2):   %61:gpr64 = MOVaddr target-flags(aarch64-page) @.str.22, target-flags(aarch64-pageoff, aarch64-nc) @.str.22
SU(3):   $x0 = COPY %57:gpr64
SU(4):   $x1 = COPY %61:gpr64
SU(5):   $x2 = COPY %292:gpr64common
SU(6):   $x3 = COPY %59:gpr64sp
SU(7):   $x4 = COPY %60:gpr64sp

********** MI Scheduling **********
main:%bb.9 if.else32
  From: %35:gpr32 = MOVi32imm 400
    To: End RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %35:gpr32 = MOVi32imm 400
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%35
  Single Issue       : false;
SU(1):   STRWui %35:gpr32, %stack.4.niter, 0 :: (store 4 into %ir.niter)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%35
  Single Issue       : false;
SU(2):   %37:gpr64 = MOVi64imm 4562254508917369340
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%37
  Single Issue       : false;
SU(3):   STRXui %37:gpr64, %293:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (store 8 into @dt)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%37
  Single Issue       : false;
SU(4):   %39:gpr64 = MOVi64imm 438086664294
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%39
  Single Issue       : false;
SU(5):   STRXui %39:gpr64, %292:gpr64common, 0 :: (store 8 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`, align 4)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%39
  Single Issue       : false;
SU(6):   %40:gpr32 = MOVi32imm 102
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%40
  Single Issue       : false;
SU(7):   STRWui %40:gpr32, %292:gpr64common, 2 :: (store 4 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%40
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 5 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) STRWui %40:gpr32, %292:gpr64common, 2 :: (store 4 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  Ready @0c
  BotQ.A TopLatency SU(7) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 5 3 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 
BotQ.A RemLatency SU(1) 1c
  BotQ.A RemainingLatency 1 + 1c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) STRXui %39:gpr64, %292:gpr64common, 0 :: (store 8 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`, align 4)
  Ready @1c
  BotQ.A TopLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 6 3 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(3) STRXui %37:gpr64, %293:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (store 8 into @dt)
  Ready @2c
  BotQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 6 4 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) STRWui %35:gpr32, %stack.4.niter, 0 :: (store 4 into %ir.niter)
  Ready @3c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 6 4 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 
  BotQ.A RemainingLatency 0 + 4c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %40:gpr32 = MOVi32imm 102
  Ready @4c
  BotQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 
  BotQ.A RemainingLatency 0 + 5c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %39:gpr64 = MOVi64imm 438086664294
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  BotQ.A RemainingLatency 0 + 6c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %37:gpr64 = MOVi64imm 4562254508917369340
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %35:gpr32 = MOVi32imm 400
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   %35:gpr32 = MOVi32imm 400
SU(2):   %37:gpr64 = MOVi64imm 4562254508917369340
SU(4):   %39:gpr64 = MOVi64imm 438086664294
SU(6):   %40:gpr32 = MOVi32imm 102
SU(1):   STRWui %35:gpr32, %stack.4.niter, 0 :: (store 4 into %ir.niter)
SU(3):   STRXui %37:gpr64, %293:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (store 8 into @dt)
SU(5):   STRXui %39:gpr64, %292:gpr64common, 0 :: (store 8 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`, align 4)
SU(7):   STRWui %40:gpr32, %292:gpr64common, 2 :: (store 4 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)

********** MI Scheduling **********
main:%bb.9 if.else32
  From: %33:gpr64 = MOVaddr target-flags(aarch64-page) @.str.23, target-flags(aarch64-pageoff, aarch64-nc) @.str.23
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %33:gpr64 = MOVaddr target-flags(aarch64-page) @.str.23, target-flags(aarch64-pageoff, aarch64-nc) @.str.23
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%33
  Single Issue       : false;
SU(1):   $x0 = COPY %33:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%33
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %33:gpr64
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %33:gpr64 = MOVaddr target-flags(aarch64-page) @.str.23, target-flags(aarch64-pageoff, aarch64-nc) @.str.23
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   %33:gpr64 = MOVaddr target-flags(aarch64-page) @.str.23, target-flags(aarch64-pageoff, aarch64-nc) @.str.23
SU(1):   $x0 = COPY %33:gpr64

********** MI Scheduling **********
main:%bb.10 if.end34
  From: %80:gpr32common = LDRWui %292:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
    To: Bcc 12, %bb.13, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %80:gpr32common = LDRWui %292:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%80
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %80:gpr32common, 102, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%80
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.13, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %80:gpr32common, 102, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %80:gpr32common = LDRWui %292:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   %80:gpr32common = LDRWui %292:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
SU(1):   dead $wzr = SUBSWri %80:gpr32common, 102, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.10 if.end34
  From: %78:gpr64 = MOVaddr target-flags(aarch64-page) @.str.26, target-flags(aarch64-pageoff, aarch64-nc) @.str.26
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %78:gpr64 = MOVaddr target-flags(aarch64-page) @.str.26, target-flags(aarch64-pageoff, aarch64-nc) @.str.26
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%78
  Single Issue       : false;
SU(1):   $x0 = COPY %78:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%78
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %78:gpr64
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %78:gpr64 = MOVaddr target-flags(aarch64-page) @.str.26, target-flags(aarch64-pageoff, aarch64-nc) @.str.26
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   %78:gpr64 = MOVaddr target-flags(aarch64-page) @.str.26, target-flags(aarch64-pageoff, aarch64-nc) @.str.26
SU(1):   $x0 = COPY %78:gpr64

********** MI Scheduling **********
main:%bb.10 if.end34
  From: %76:gpr64 = MOVaddr target-flags(aarch64-page) @.str.25, target-flags(aarch64-pageoff, aarch64-nc) @.str.25
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %76:gpr64 = MOVaddr target-flags(aarch64-page) @.str.25, target-flags(aarch64-pageoff, aarch64-nc) @.str.25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%76
  Single Issue       : false;
SU(1):   $x0 = COPY %76:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%76
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $w1 = COPY %73:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $d0 = COPY %75:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp, implicit-def dead $w0
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $d0 = COPY %75:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(2) $w1 = COPY %73:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %76:gpr64
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %76:gpr64 = MOVaddr target-flags(aarch64-page) @.str.25, target-flags(aarch64-pageoff, aarch64-nc) @.str.25
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   %76:gpr64 = MOVaddr target-flags(aarch64-page) @.str.25, target-flags(aarch64-pageoff, aarch64-nc) @.str.25
SU(1):   $x0 = COPY %76:gpr64
SU(2):   $w1 = COPY %73:gpr32
SU(3):   $d0 = COPY %75:fpr64

********** MI Scheduling **********
main:%bb.10 if.end34
  From: %73:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %73:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %75:fpr64 = LDRDui %293:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (dereferenceable load 8 from @dt)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %75:fpr64 = LDRDui %293:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (dereferenceable load 8 from @dt)
  Ready @3c
  BotQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 1
  Executed: 4c
  Critical: 1c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %73:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   %73:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
SU(1):   %75:fpr64 = LDRDui %293:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (dereferenceable load 8 from @dt)

********** MI Scheduling **********
main:%bb.10 if.end34
  From: %71:gpr64 = MOVaddr target-flags(aarch64-page) @.str.24, target-flags(aarch64-pageoff, aarch64-nc) @.str.24
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %71:gpr64 = MOVaddr target-flags(aarch64-page) @.str.24, target-flags(aarch64-pageoff, aarch64-nc) @.str.24
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%71
  Single Issue       : false;
SU(1):   $x0 = COPY %71:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%71
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $w1 = COPY %68:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $w2 = COPY %69:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $w3 = COPY %70:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit-def $sp, implicit-def dead $w0
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=0 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(4) $w3 = COPY %70:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(3) $w2 = COPY %69:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(2) $w1 = COPY %68:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %71:gpr64
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %71:gpr64 = MOVaddr target-flags(aarch64-page) @.str.24, target-flags(aarch64-pageoff, aarch64-nc) @.str.24
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   %71:gpr64 = MOVaddr target-flags(aarch64-page) @.str.24, target-flags(aarch64-pageoff, aarch64-nc) @.str.24
SU(1):   $x0 = COPY %71:gpr64
SU(2):   $w1 = COPY %68:gpr32
SU(3):   $w2 = COPY %69:gpr32
SU(4):   $w3 = COPY %70:gpr32

********** MI Scheduling **********
main:%bb.10 if.end34
  From: %68:gpr32 = LDRWui %292:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Cluster ld/st SU(0) - SU(1)
  Copy Succ SU(4294967295)
SU(0):   %68:gpr32 = LDRWui %292:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  # preds left       : 0
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
    SU(1): Ord  Latency=0 Cluster
  Single Issue       : false;
SU(1):   %69:gpr32 = LDRWui %292:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  # preds left       : 0
  # succs left       : 1
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Predecessors:
    SU(0): Ord  Latency=0 Cluster
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %70:gpr32 = LDRWui %292:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot WEAK      
Scheduling SU(2) %70:gpr32 = LDRWui %292:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 1
  Executed: 4c
  Critical: 1c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 4c > CritPath 3
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(1) %69:gpr32 = LDRWui %292:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %68:gpr32 = LDRWui %292:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   %68:gpr32 = LDRWui %292:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
SU(1):   %69:gpr32 = LDRWui %292:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
SU(2):   %70:gpr32 = LDRWui %292:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)

********** MI Scheduling **********
main:%bb.11 if.end34
  From: %81:gpr32common = LDRWui %292:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
    To: Bcc 12, %bb.13, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %81:gpr32common = LDRWui %292:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%81
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %81:gpr32common, 102, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%81
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.13, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %81:gpr32common, 102, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %81:gpr32common = LDRWui %292:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   %81:gpr32common = LDRWui %292:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
SU(1):   dead $wzr = SUBSWri %81:gpr32common, 102, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.12 if.end34
  From: %82:gpr32common = LDRWui %292:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
    To: Bcc 11, %bb.14, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %82:gpr32common = LDRWui %292:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%82
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %82:gpr32common, 103, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%82
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 11, %bb.14, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %82:gpr32common, 103, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %82:gpr32common = LDRWui %292:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   %82:gpr32common = LDRWui %292:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
SU(1):   dead $wzr = SUBSWri %82:gpr32common, 103, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.13 if.then42
  From: %287:gpr64 = MOVaddr target-flags(aarch64-page) @.str.28, target-flags(aarch64-pageoff, aarch64-nc) @.str.28
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %287:gpr64 = MOVaddr target-flags(aarch64-page) @.str.28, target-flags(aarch64-pageoff, aarch64-nc) @.str.28
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%287
  Single Issue       : false;
SU(1):   $x0 = COPY %287:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%287
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %287:gpr64
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %287:gpr64 = MOVaddr target-flags(aarch64-page) @.str.28, target-flags(aarch64-pageoff, aarch64-nc) @.str.28
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   %287:gpr64 = MOVaddr target-flags(aarch64-page) @.str.28, target-flags(aarch64-pageoff, aarch64-nc) @.str.28
SU(1):   $x0 = COPY %287:gpr64

********** MI Scheduling **********
main:%bb.13 if.then42
  From: %285:gpr64 = MOVaddr target-flags(aarch64-page) @.str.27, target-flags(aarch64-pageoff, aarch64-nc) @.str.27
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %285:gpr64 = MOVaddr target-flags(aarch64-page) @.str.27, target-flags(aarch64-pageoff, aarch64-nc) @.str.27
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%285
  Single Issue       : false;
SU(1):   $x0 = COPY %285:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%285
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $w1 = COPY %80:gpr32common
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $w2 = COPY %283:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $w3 = COPY %284:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit-def $sp, implicit-def dead $w0
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=0 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(4) $w3 = COPY %284:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(3) $w2 = COPY %283:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(2) $w1 = COPY %80:gpr32common
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %285:gpr64
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %285:gpr64 = MOVaddr target-flags(aarch64-page) @.str.27, target-flags(aarch64-pageoff, aarch64-nc) @.str.27
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   %285:gpr64 = MOVaddr target-flags(aarch64-page) @.str.27, target-flags(aarch64-pageoff, aarch64-nc) @.str.27
SU(1):   $x0 = COPY %285:gpr64
SU(2):   $w1 = COPY %80:gpr32common
SU(3):   $w2 = COPY %283:gpr32
SU(4):   $w3 = COPY %284:gpr32

********** MI Scheduling **********
main:%bb.13 if.then42
  From: %282:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points + 4, target-flags(aarch64-pageoff, aarch64-nc) @grid_points + 4
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Cluster ld/st SU(1) - SU(2)
  Copy Succ SU(4294967295)
SU(0):   %282:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points + 4, target-flags(aarch64-pageoff, aarch64-nc) @grid_points + 4
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(2): Data Latency=1 Reg=%282
    SU(1): Data Latency=1 Reg=%282
  Single Issue       : false;
SU(1):   %283:gpr32 = LDRWui %282:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  # preds left       : 1
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(0): Data Latency=1 Reg=%282
  Successors:
    ExitSU: Ord  Latency=3 Artificial
    SU(2): Ord  Latency=0 Cluster
  Single Issue       : false;
SU(2):   %284:gpr32 = LDRWui %282:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  # preds left       : 1
  # succs left       : 1
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(0): Data Latency=1 Reg=%282
    SU(1): Ord  Latency=0 Cluster
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) %282:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points + 4, target-flags(aarch64-pageoff, aarch64-nc) @grid_points + 4
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
BotQ.A RemLatency SU(2) 1c
TopQ.A RemLatency SU(2) 3c
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) WEAK                               
Pick Bot WEAK      
Scheduling SU(2) %284:gpr32 = LDRWui %282:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  Ready @3c
  BotQ.A TopLatency SU(2) 1c
  BotQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 1
  Executed: 4c
  Critical: 1c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %283:gpr32 = LDRWui %282:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  Ready @4c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   %282:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points + 4, target-flags(aarch64-pageoff, aarch64-nc) @grid_points + 4
SU(1):   %283:gpr32 = LDRWui %282:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
SU(2):   %284:gpr32 = LDRWui %282:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)

********** MI Scheduling **********
main:%bb.14 if.end45
  From: %95:gpr32 = MOVi32imm 1
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %95:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%95
  Single Issue       : false;
SU(1):   STRWui %95:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%95
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %95:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %95:gpr32 = MOVi32imm 1
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   %95:gpr32 = MOVi32imm 1
SU(1):   STRWui %95:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)

********** MI Scheduling **********
main:%bb.14 if.end45
  From: %86:gpr32common = SUBWri %80:gpr32common, 2, 0
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 12
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Cluster ld/st SU(4) - SU(8)
  Copy Succ SU(5)
SU(0):   %86:gpr32common = SUBWri %80:gpr32common, 2, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%86
  Single Issue       : false;
SU(1):   %87:gpr64common = ADRP target-flags(aarch64-page) @nx2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%87
  Single Issue       : false;
SU(2):   STRWui %86:gpr32common, %87:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nx2 :: (store 4 into @nx2)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%87
    SU(0): Data Latency=1 Reg=%86
  Single Issue       : false;
SU(3):   %88:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points + 4, target-flags(aarch64-pageoff, aarch64-nc) @grid_points + 4
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(8): Data Latency=1 Reg=%88
    SU(4): Data Latency=1 Reg=%88
  Single Issue       : false;
SU(4):   %89:gpr32common = LDRWui %88:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  # preds left       : 1
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(3): Data Latency=1 Reg=%88
  Successors:
    SU(5): Data Latency=4 Reg=%89
    SU(8): Ord  Latency=0 Cluster
  Single Issue       : false;
SU(5):   %90:gpr32common = SUBWri %89:gpr32common, 2, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(4): Data Latency=4 Reg=%89
    SU(8): Ord  Latency=0 Artificial
  Successors:
    SU(7): Data Latency=1 Reg=%90
  Single Issue       : false;
SU(6):   %91:gpr64common = ADRP target-flags(aarch64-page) @ny2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%91
  Single Issue       : false;
SU(7):   STRWui %90:gpr32common, %91:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @ny2 :: (store 4 into @ny2)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%90
    SU(6): Data Latency=1 Reg=%91
  Single Issue       : false;
SU(8):   %92:gpr32common = LDRWui %88:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  # preds left       : 1
  # succs left       : 2
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(3): Data Latency=1 Reg=%88
    SU(4): Ord  Latency=0 Cluster
  Successors:
    SU(9): Data Latency=4 Reg=%92
    SU(5): Ord  Latency=0 Artificial
  Single Issue       : false;
SU(9):   %93:gpr32common = SUBWri %92:gpr32common, 2, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(8): Data Latency=4 Reg=%92
  Successors:
    SU(11): Data Latency=1 Reg=%93
  Single Issue       : false;
SU(10):   %94:gpr64common = ADRP target-flags(aarch64-page) @nz2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(11): Data Latency=1 Reg=%94
  Single Issue       : false;
SU(11):   STRWui %93:gpr32common, %94:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nz2 :: (store 4 into @nz2)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=%93
    SU(10): Data Latency=1 Reg=%94
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 7 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 10 
Picking from Bot:
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) STRWui %93:gpr32common, %94:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nz2 :: (store 4 into @nz2)
  Ready @0c
  BotQ.A TopLatency SU(11) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 7 9 10 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 10 
BotQ.A RemLatency SU(7) 6c
  BotQ.A RemainingLatency 6 + 1c > CritPath 6
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(7) BOT-PATH                  6 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(7) STRWui %90:gpr32common, %91:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @ny2 :: (store 4 into @ny2)
  Ready @1c
  BotQ.A TopLatency SU(7) 6c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 10 9 5 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 10 
BotQ.A RemLatency SU(9) 5c
  BotQ.A RemainingLatency 5 + 2c > CritPath 6
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(9) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(9) %93:gpr32common = SUBWri %92:gpr32common, 2, 0
  Ready @2c
  BotQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 10 6 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 10 
BotQ.A RemLatency SU(5) 5c
  BotQ.A RemainingLatency 5 + 3c > CritPath 6
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(5) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) %90:gpr32common = SUBWri %89:gpr32common, 2, 0
  Ready @3c
  BotQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 8 
Queue BotQ.A: 2 10 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 10 
BotQ.A RemLatency SU(2) 1c
BotQ.A RemLatency SU(4) 1c
  BotQ.A RemainingLatency 4 + 4c > CritPath 6
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) STRWui %86:gpr32common, %87:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nx2 :: (store 4 into @nx2)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 8 
Queue BotQ.A: 6 10 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 10 
BotQ.A RemLatency SU(4) 1c
  BotQ.A RemainingLatency 3 + 5c > CritPath 6
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(10) %94:gpr64common = ADRP target-flags(aarch64-page) @nz2
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 6 0 1 8 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 
BotQ.A RemLatency SU(8) 1c
BotQ.A RemLatency SU(4) 1c
  BotQ.A RemainingLatency 2 + 6c > CritPath 6
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(8) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(8) %92:gpr32common = LDRWui %88:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  Ready @6c
  BotQ.A BotLatency SU(8) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 0 1 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 
  BotQ.A RemainingLatency 0 + 7c > CritPath 6
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(4) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(4) %89:gpr32common = LDRWui %88:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 0 1 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 
  BotQ.A RemainingLatency 0 + 8c > CritPath 6
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %91:gpr64common = ADRP target-flags(aarch64-page) @ny2
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  BotQ.A RemainingLatency 0 + 9c > CritPath 6
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %88:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points + 4, target-flags(aarch64-pageoff, aarch64-nc) @grid_points + 4
  Ready @9c
  BotQ.A BotLatency SU(3) 6c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 10c > CritPath 6
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %87:gpr64common = ADRP target-flags(aarch64-page) @nx2
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %86:gpr32common = SUBWri %80:gpr32common, 2, 0
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   %86:gpr32common = SUBWri %80:gpr32common, 2, 0
SU(1):   %87:gpr64common = ADRP target-flags(aarch64-page) @nx2
SU(3):   %88:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points + 4, target-flags(aarch64-pageoff, aarch64-nc) @grid_points + 4
SU(6):   %91:gpr64common = ADRP target-flags(aarch64-page) @ny2
SU(4):   %89:gpr32common = LDRWui %88:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
SU(8):   %92:gpr32common = LDRWui %88:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
SU(10):   %94:gpr64common = ADRP target-flags(aarch64-page) @nz2
SU(2):   STRWui %86:gpr32common, %87:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nx2 :: (store 4 into @nx2)
SU(5):   %90:gpr32common = SUBWri %89:gpr32common, 2, 0
SU(9):   %93:gpr32common = SUBWri %92:gpr32common, 2, 0
SU(7):   STRWui %90:gpr32common, %91:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @ny2 :: (store 4 into @ny2)
SU(11):   STRWui %93:gpr32common, %94:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nz2 :: (store 4 into @nz2)

********** MI Scheduling **********
main:%bb.15 for.cond
  From: %96:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.17, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %96:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%96
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %96:gpr32common, 15, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%96
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.17, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %96:gpr32common, 15, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %96:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   %96:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %96:gpr32common, 15, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.16 for.body
  From: %280:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: B %bb.15
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %280:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%280
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %281:gpr32common = nsw ADDWri %280:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%280
  Successors:
    SU(2): Data Latency=1 Reg=%281
  Single Issue       : false;
SU(2):   STRWui %281:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%281
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.15
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %281:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %281:gpr32common = nsw ADDWri %280:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %280:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.16 ***
SU(0):   %280:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   %281:gpr32common = nsw ADDWri %280:gpr32common, 1, 0
SU(2):   STRWui %281:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)

********** MI Scheduling **********
main:%bb.17 for.end
  From: %98:gpr32 = MOVi32imm 1
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %98:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%98
  Single Issue       : false;
SU(1):   STRWui %98:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%98
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %98:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %98:gpr32 = MOVi32imm 1
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   %98:gpr32 = MOVi32imm 1
SU(1):   STRWui %98:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)

********** MI Scheduling **********
main:%bb.18 for.cond49
  From: %99:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.20, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %99:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%99
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %99:gpr32common, 15, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%99
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.20, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %99:gpr32common, 15, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %99:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.18 ***
SU(0):   %99:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %99:gpr32common, 15, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.19 for.body51
  From: %277:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: B %bb.18
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %277:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%277
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %278:gpr32common = nsw ADDWri %277:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%277
  Successors:
    SU(2): Data Latency=1 Reg=%278
  Single Issue       : false;
SU(2):   STRWui %278:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%278
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.18
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %278:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %278:gpr32common = nsw ADDWri %277:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %277:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   %277:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   %278:gpr32common = nsw ADDWri %277:gpr32common, 1, 0
SU(2):   STRWui %278:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)

********** MI Scheduling **********
main:%bb.20 for.end54
  From: STRWui %101:gpr32, %stack.5.step, 0 :: (store 4 into %ir.step)
    To: End RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui %101:gpr32, %stack.5.step, 0 :: (store 4 into %ir.step)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   undef %260.sub_32:gpr64 = MOVi32imm 1717986919
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   %267:gpr32 = MOVi32imm 20
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %272:gpr64 = MOVaddr target-flags(aarch64-page) @.str.29, target-flags(aarch64-pageoff, aarch64-nc) @.str.29
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %272:gpr64 = MOVaddr target-flags(aarch64-page) @.str.29, target-flags(aarch64-pageoff, aarch64-nc) @.str.29
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %267:gpr32 = MOVi32imm 20
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 2c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) undef %260.sub_32:gpr64 = MOVi32imm 1717986919
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui %101:gpr32, %stack.5.step, 0 :: (store 4 into %ir.step)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   STRWui %101:gpr32, %stack.5.step, 0 :: (store 4 into %ir.step)
SU(1):   undef %260.sub_32:gpr64 = MOVi32imm 1717986919
SU(2):   %267:gpr32 = MOVi32imm 20
SU(3):   %272:gpr64 = MOVaddr target-flags(aarch64-page) @.str.29, target-flags(aarch64-pageoff, aarch64-nc) @.str.29

********** MI Scheduling **********
main:%bb.20 for.end54
  From: %101:gpr32 = MOVi32imm 1
    To: BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %101:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   $w0 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %101:gpr32 = MOVi32imm 1
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $w0 = MOVi32imm 1
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.20 ***
SU(1):   $w0 = MOVi32imm 1
SU(0):   %101:gpr32 = MOVi32imm 1

********** MI Scheduling **********
main:%bb.21 for.cond55
  From: %102:gpr32 = LDRWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
    To: Bcc 12, %bb.26, implicit killed $nzcv
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %102:gpr32 = LDRWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%102
  Single Issue       : false;
SU(1):   %103:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%103
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %102:gpr32, %103:gpr32, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%103
    SU(0): Data Latency=4 Reg=%102
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.26, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %102:gpr32, %103:gpr32, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %103:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %102:gpr32 = LDRWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.21 ***
SU(0):   %102:gpr32 = LDRWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
SU(1):   %103:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
SU(2):   dead $wzr = SUBSWrr %102:gpr32, %103:gpr32, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.22 for.body57
  From: %258:gpr64common = LDRSWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
    To: CBZW %269:gpr32, %bb.24
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %258:gpr64common = LDRSWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(5): Data Latency=4 Reg=%258
    SU(1): Data Latency=4 Reg=%258
  Single Issue       : false;
SU(1):   %261:gpr64 = MADDXrrr %258:gpr64common, %260:gpr64, $xzr
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%258
  Successors:
    SU(3): Data Latency=1 Reg=%261
    SU(2): Data Latency=1 Reg=%261
  Single Issue       : false;
SU(2):   %262:gpr64 = UBFMXri %261:gpr64, 63, 63
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(1): Data Latency=1 Reg=%261
  Successors:
    SU(4): Data Latency=1 Reg=%262
  Single Issue       : false;
SU(3):   %264:gpr64 = SBFMXri %261:gpr64, 35, 63
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(1): Data Latency=1 Reg=%261
  Successors:
    SU(4): Data Latency=1 Reg=%264
  Single Issue       : false;
SU(4):   %266:gpr32 = ADDWrr %264.sub_32:gpr64, %262.sub_32:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1 Reg=%264
    SU(2): Data Latency=1 Reg=%262
  Successors:
    SU(5): Data Latency=1 Reg=%266
  Single Issue       : false;
SU(5):   %269:gpr32 = MSUBWrrr %266:gpr32, %267:gpr32, %258.sub_32:gpr64common
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%266
    SU(0): Data Latency=4 Reg=%258
  Successors:
    ExitSU: Data Latency=1 Reg=%269
  Single Issue       : false;
ExitSU:   CBZW %269:gpr32, %bb.24
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%269
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %269:gpr32 = MSUBWrrr %266:gpr32, %267:gpr32, %258.sub_32:gpr64common
  Ready @1c
  BotQ.A TopLatency SU(5) 7c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %266:gpr32 = ADDWrr %264.sub_32:gpr64, %262.sub_32:gpr64
  Ready @2c
  BotQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) %258:gpr64common = LDRSWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
  Ready @0c
  TopQ.A BotLatency SU(0) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) %261:gpr64 = MADDXrrr %258:gpr64common, %260:gpr64, $xzr
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 3 2 
BotQ.A RemLatency SU(3) 5c
TopQ.A RemLatency SU(3) 3c
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %264:gpr64 = SBFMXri %261:gpr64, 35, 63
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %262:gpr64 = UBFMXri %261:gpr64, 63, 63
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.22 ***
SU(0):   %258:gpr64common = LDRSWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
SU(1):   %261:gpr64 = MADDXrrr %258:gpr64common, %260:gpr64, $xzr
SU(2):   %262:gpr64 = UBFMXri %261:gpr64, 63, 63
SU(3):   %264:gpr64 = SBFMXri %261:gpr64, 35, 63
SU(4):   %266:gpr32 = ADDWrr %264.sub_32:gpr64, %262.sub_32:gpr64
SU(5):   %269:gpr32 = MSUBWrrr %266:gpr32, %267:gpr32, %258.sub_32:gpr64common

********** MI Scheduling **********
main:%bb.24 if.then61
  From: $x0 = COPY %272:gpr64
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %272:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $w1 = COPY %271:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) $w1 = COPY %271:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %272:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.24 ***
SU(0):   $x0 = COPY %272:gpr64
SU(1):   $w1 = COPY %271:gpr32

********** MI Scheduling **********
main:%bb.25 if.end63
  From: %274:gpr32common = LDRWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
    To: B %bb.21
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %274:gpr32common = LDRWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%274
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %275:gpr32common = nsw ADDWri %274:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%274
  Successors:
    SU(2): Data Latency=1 Reg=%275
  Single Issue       : false;
SU(2):   STRWui %275:gpr32common, %stack.5.step, 0 :: (store 4 into %ir.step)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%275
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.21
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %275:gpr32common, %stack.5.step, 0 :: (store 4 into %ir.step)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %275:gpr32common = nsw ADDWri %274:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %274:gpr32common = LDRWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   %274:gpr32common = LDRWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
SU(1):   %275:gpr32common = nsw ADDWri %274:gpr32common, 1, 0
SU(2):   STRWui %275:gpr32common, %stack.5.step, 0 :: (store 4 into %ir.step)

********** MI Scheduling **********
main:%bb.26 for.end66
  From: %110:fpr64 = LDRDui %291:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
    To: Bcc 0, %bb.28, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %110:fpr64 = LDRDui %291:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%110
  Single Issue       : false;
SU(1):   FCMPDri %110:fpr64, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%110
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 0, %bb.28, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) FCMPDri %110:fpr64, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %110:fpr64 = LDRDui %291:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.26 ***
SU(0):   %110:fpr64 = LDRDui %291:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
SU(1):   FCMPDri %110:fpr64, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.26 for.end66
  From: $w0 = COPY %107:gpr32
    To: BL @verify, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit killed $x2, implicit-def $sp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $w0 = COPY %107:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $x1 = ADDXri %stack.12.Class, 0, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $x2 = ADDXri %stack.11.verified, 0, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @verify, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit killed $x2, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $w0 = COPY %107:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $x2 = ADDXri %stack.11.verified, 0, 0
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x1 = ADDXri %stack.12.Class, 0, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.26 ***
SU(1):   $x1 = ADDXri %stack.12.Class, 0, 0
SU(2):   $x2 = ADDXri %stack.11.verified, 0, 0
SU(0):   $w0 = COPY %107:gpr32

********** MI Scheduling **********
main:%bb.26 for.end66
  From: %106:fpr64 = COPY killed $d0
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %106:fpr64 = COPY killed $d0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%106
  Single Issue       : false;
SU(1):   STRDui %106:fpr64, %291:gpr64sp, 35 :: (store 8 into %ir.tmax)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%106
  Single Issue       : false;
SU(2):   %107:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %106:fpr64, %291:gpr64sp, 35 :: (store 8 into %ir.tmax)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %106:fpr64 = COPY killed $d0
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 2 BotQ.A
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %107:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 2
  Executed: 4c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.26 ***
SU(2):   %107:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
SU(0):   %106:fpr64 = COPY $d0
SU(1):   STRDui %106:fpr64, %291:gpr64sp, 35 :: (store 8 into %ir.tmax)

********** MI Scheduling **********
main:%bb.27 if.then69
  From: %113:gpr32 = LDRWui %292:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
    To: B %bb.29
 RegionInstrs: 38
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=4
GPR32=6
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
Live In: %291 %292 
Live Out: %291 %292 
Live Thru: GPR32=2
  LiveReg: %291
  UpdateRegP: SU(11) STRDui %122:fpr64, %291:gpr64sp, 36 :: (store 8 into %ir.t)
              to FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  UpdateRegP: SU(32) %146:fpr64 = LDRDui %291:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(37) STRDui %150:fpr64, %291:gpr64sp, 37 :: (store 8 into %ir.mflops)
              to FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  LiveReg: %292
  UpdateRegP: SU(0) %113:gpr32 = LDRWui %292:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
              to GPR32 -1
  UpdateRegP: SU(1) %114:gpr32 = LDRWui %292:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
              to GPR32 -1
  UpdateRegP: SU(3) %116:gpr32 = LDRWui %292:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
              to GPR32 -1
Top Pressure:
GPR32=2
Bottom Pressure:
GPR32=2
Excess PSets: 
Constraining copy SU(22)
Constraining copy SU(34)
Cluster ld/st SU(0) - SU(1)
  Copy Succ SU(6)
  Copy Succ SU(2)
Cluster ld/st SU(11) - SU(37)
SU(0):   %113:gpr32 = LDRWui %292:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  # preds left       : 0
  # succs left       : 2
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(6): Data Latency=4 Reg=%113
    SU(2): Data Latency=4 Reg=%113
    SU(1): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %114:gpr32 = LDRWui %292:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  # preds left       : 0
  # succs left       : 2
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Predecessors:
    SU(0): Ord  Latency=0 Cluster
  Successors:
    SU(6): Data Latency=4 Reg=%114
    SU(2): Data Latency=4 Reg=%114
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   %115:gpr32 = nsw MADDWrrr %113:gpr32, %114:gpr32, $wzr
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(1): Data Latency=4 Reg=%114
    SU(0): Data Latency=4 Reg=%113
  Successors:
    SU(4): Data Latency=1 Reg=%115
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(3):   %116:gpr32 = LDRWui %292:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(7): Data Latency=4 Reg=%116
    SU(4): Data Latency=4 Reg=%116
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(4):   %117:gpr32 = nsw MADDWrrr %115:gpr32, %116:gpr32, $wzr
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(2): Data Latency=1 Reg=%115
    SU(3): Data Latency=4 Reg=%116
  Successors:
    SU(12): Data Latency=1 Reg=%117
    SU(5): Data Latency=1 Reg=%117
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(5):   STRWui %117:gpr32, %stack.6.n3, 0 :: (store 4 into %ir.n3)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%117
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(6):   %118:gpr32 = nsw ADDWrr %113:gpr32, %114:gpr32
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(1): Data Latency=4 Reg=%114
    SU(0): Data Latency=4 Reg=%113
  Successors:
    SU(7): Data Latency=1 Reg=%118
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(7):   %119:gpr32 = nsw ADDWrr %118:gpr32, %116:gpr32
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(6): Data Latency=1 Reg=%118
    SU(3): Data Latency=4 Reg=%116
  Successors:
    SU(8): Data Latency=1 Reg=%119
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(8):   %120:fpr64 = SCVTFUWDri %119:gpr32
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 9
  Predecessors:
    SU(7): Data Latency=1 Reg=%119
  Successors:
    SU(10): Data Latency=1 Reg=%120
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(9):   %121:fpr64 = FMOVDi 8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 9
  Successors:
    SU(10): Data Latency=1 Reg=%121
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(10):   %122:fpr64 = FDIVDrr %120:fpr64, %121:fpr64
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 8
  Predecessors:
    SU(8): Data Latency=1 Reg=%120
    SU(9): Data Latency=1 Reg=%121
  Successors:
    SU(23): Data Latency=1 Reg=%122
    SU(16): Data Latency=1 Reg=%122
    SU(11): Data Latency=1 Reg=%122
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(11):   STRDui %122:fpr64, %291:gpr64sp, 36 :: (store 8 into %ir.t)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%122
  Successors:
    SU(37): Ord  Latency=0 Cluster
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(12):   %123:fpr64 = SCVTFUWDri %117:gpr32
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 7
  Predecessors:
    SU(4): Data Latency=1 Reg=%117
  Successors:
    SU(15): Data Latency=1 Reg=%123
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(13):   %124:gpr64common = ADRP target-flags(aarch64-page) %const.0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 11
  Successors:
    SU(14): Data Latency=1 Reg=%124
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(14):   %125:fpr64 = LDRDui %124:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 10
  Predecessors:
    SU(13): Data Latency=1 Reg=%124
  Successors:
    SU(15): Data Latency=4 Reg=%125
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(15):   %126:fpr64 = FMULDrr %123:fpr64, %125:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 6
  Predecessors:
    SU(12): Data Latency=1 Reg=%123
    SU(14): Data Latency=4 Reg=%125
  Successors:
    SU(20): Data Latency=1 Reg=%126
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(16):   %127:fpr64 = FMULDrr %122:fpr64, %122:fpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 7
  Predecessors:
    SU(10): Data Latency=1 Reg=%122
  Successors:
    SU(19): Data Latency=1 Reg=%127
  Pressure Diff      : 
  Single Issue       : false;
SU(17):   %128:gpr64common = ADRP target-flags(aarch64-page) %const.1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 11
  Successors:
    SU(18): Data Latency=1 Reg=%128
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(18):   %129:fpr64 = LDRDui %128:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 10
  Predecessors:
    SU(17): Data Latency=1 Reg=%128
  Successors:
    SU(19): Data Latency=4 Reg=%129
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(19):   %130:fpr64 = FMULDrr %127:fpr64, %129:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 6
  Predecessors:
    SU(16): Data Latency=1 Reg=%127
    SU(18): Data Latency=4 Reg=%129
  Successors:
    SU(20): Data Latency=1 Reg=%130
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(20):   %131:fpr64 = FADDDrr %126:fpr64, %130:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 5
  Predecessors:
    SU(19): Data Latency=1 Reg=%130
    SU(15): Data Latency=1 Reg=%126
  Successors:
    SU(24): Data Latency=1 Reg=%131
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(21):   %132:gpr64 = MOVi64imm 4667539284973060096
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(22): Data Latency=1 Reg=%132
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(22):   %133:fpr64 = COPY %132:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(21): Data Latency=1 Reg=%132
  Successors:
    SU(23): Data Latency=0 Reg=%133
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(23):   %134:fpr64 = FMULDrr %122:fpr64, %133:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(10): Data Latency=1 Reg=%122
    SU(22): Data Latency=0 Reg=%133
  Successors:
    SU(24): Data Latency=1 Reg=%134
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(24):   %135:fpr64 = FADDDrr %131:fpr64, %134:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 4
  Predecessors:
    SU(20): Data Latency=1 Reg=%131
    SU(23): Data Latency=1 Reg=%134
  Successors:
    SU(27): Data Latency=1 Reg=%135
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(25):   %136:gpr64common = ADRP target-flags(aarch64-page) %const.2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 8
  Successors:
    SU(26): Data Latency=1 Reg=%136
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(26):   %137:fpr64 = LDRDui %136:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 7
  Predecessors:
    SU(25): Data Latency=1 Reg=%136
  Successors:
    SU(27): Data Latency=4 Reg=%137
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(27):   %138:fpr64 = FADDDrr %135:fpr64, %137:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 3
  Predecessors:
    SU(24): Data Latency=1 Reg=%135
    SU(26): Data Latency=4 Reg=%137
  Successors:
    SU(31): Data Latency=1 Reg=%138
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(28):   undef %140.ssub:fpr64 = LDRSui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(29): Data Latency=4 Reg=%140
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(29):   %142:fpr128 = SSHLLv2i32_shift %140:fpr64, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(28): Data Latency=4 Reg=%140
  Successors:
    SU(30): Data Latency=1 Reg=%142
  Pressure Diff      : 
  Single Issue       : false;
SU(30):   %144:fpr64 = SCVTFv1i64 %142.dsub:fpr128
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(29): Data Latency=1 Reg=%142
  Successors:
    SU(31): Data Latency=1 Reg=%144
  Pressure Diff      : 
  Single Issue       : false;
SU(31):   %145:fpr64 = FMULDrr %138:fpr64, %144:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 2
  Predecessors:
    SU(27): Data Latency=1 Reg=%138
    SU(30): Data Latency=1 Reg=%144
  Successors:
    SU(36): Data Latency=1 Reg=%145
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(32):   %146:fpr64 = LDRDui %291:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(35): Data Latency=4 Reg=%146
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(33):   %147:gpr64 = MOVi64imm 4696837146684686336
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(34): Data Latency=1 Reg=%147
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(34):   %148:fpr64 = COPY %147:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(33): Data Latency=1 Reg=%147
  Successors:
    SU(35): Data Latency=0 Reg=%148
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(35):   %149:fpr64 = FMULDrr %146:fpr64, %148:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(34): Data Latency=0 Reg=%148
    SU(32): Data Latency=4 Reg=%146
  Successors:
    SU(36): Data Latency=1 Reg=%149
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(36):   %150:fpr64 = FDIVDrr %145:fpr64, %149:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 1
  Predecessors:
    SU(31): Data Latency=1 Reg=%145
    SU(35): Data Latency=1 Reg=%149
  Successors:
    SU(37): Data Latency=1 Reg=%150
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(37):   STRDui %150:fpr64, %291:gpr64sp, 37 :: (store 8 into %ir.mflops)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(36): Data Latency=1 Reg=%150
    SU(11): Ord  Latency=0 Cluster
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
ExitSU:   B %bb.29
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 15
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 37 11 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 9 13 17 21 25 28 32 33 
Picking from Bot:
  Cand SU(37) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot WEAK      
Scheduling SU(37) STRDui %150:fpr64, %291:gpr64sp, 37 :: (store 8 into %ir.mflops)
Bottom Pressure:
FPR8=1
GPR32=2
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %150
  UpdateRegP: SU(37) STRDui %150:fpr64, %291:gpr64sp, 37 :: (store 8 into %ir.mflops)
              to 
  Ready @0c
  BotQ.A TopLatency SU(37) 15c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 11 36 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 9 13 17 21 25 28 32 33 
BotQ.A RemLatency SU(36) 14c
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(11) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(11) STRDui %122:fpr64, %291:gpr64sp, 36 :: (store 8 into %ir.t)
Bottom Pressure:
FPR8=2
GPR32=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %122
  UpdateRegP: SU(11) STRDui %122:fpr64, %291:gpr64sp, 36 :: (store 8 into %ir.t)
              to 
  UpdateRegP: SU(16) %127:fpr64 = FMULDrr %122:fpr64, %122:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(23) %134:fpr64 = FMULDrr %122:fpr64, %133:fpr64
              to 
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 36 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 9 13 17 21 25 28 32 33 
BotQ.A RemLatency SU(36) 14c
  BotQ.A RemainingLatency 14 + 2c > CritPath 15
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(36) BOT-PATH                  14 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(36) %150:fpr64 = FDIVDrr %145:fpr64, %149:fpr64
Bottom Pressure:
FPR8=3
GPR32=2
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  LiveReg: %145
  UpdateRegP: SU(36) %150:fpr64 = FDIVDrr %145:fpr64, %149:fpr64
              to 
  LiveReg: %149
  UpdateRegP: SU(36) %150:fpr64 = FDIVDrr %145:fpr64, %149:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @2c
  BotQ.A TopLatency SU(36) 14c
  BotQ.A BotLatency SU(36) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 31 35 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 9 13 17 21 25 28 32 33 
BotQ.A RemLatency SU(31) 13c
  BotQ.A RemainingLatency 13 + 3c > CritPath 15
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(31) BOT-PATH                  13 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(31) %145:fpr64 = FMULDrr %138:fpr64, %144:fpr64
Bottom Pressure:
FPR8=4
GPR32=2
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  LiveReg: %138
  UpdateRegP: SU(31) %145:fpr64 = FMULDrr %138:fpr64, %144:fpr64
              to 
  LiveReg: %144
  UpdateRegP: SU(31) %145:fpr64 = FMULDrr %138:fpr64, %144:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @3c
  BotQ.A BotLatency SU(31) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 35 27 30 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 9 13 17 21 25 28 32 33 
BotQ.A RemLatency SU(27) 12c
  BotQ.A RemainingLatency 12 + 4c > CritPath 15
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(5) STRWui %117:gpr32, %stack.6.n3, 0 :: (store 4 into %ir.n3)
Bottom Pressure:
FPR8=4
GPR32=3
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  LiveReg: %117
  UpdateRegP: SU(5) STRWui %117:gpr32, %stack.6.n3, 0 :: (store 4 into %ir.n3)
              to 
  UpdateRegP: SU(12) %123:fpr64 = SCVTFUWDri %117:gpr32
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 30 35 27 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 9 13 17 21 25 28 32 33 
BotQ.A RemLatency SU(27) 12c
  BotQ.A RemainingLatency 12 + 5c > CritPath 15
Picking from Bot:
  Cand SU(30) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(30) %144:fpr64 = SCVTFv1i64 %142.dsub:fpr128
Bottom Pressure:
FPR8=4
GPR32=3
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  LiveReg: %142
  UpdateRegP: SU(30) %144:fpr64 = SCVTFv1i64 %142.dsub:fpr128
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @5c
  BotQ.A BotLatency SU(30) 3c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 27 35 29 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 9 13 17 21 25 28 32 33 
BotQ.A RemLatency SU(27) 12c
  BotQ.A RemainingLatency 12 + 6c > CritPath 15
Picking from Bot:
  Cand SU(27) ORDER                              
  Cand SU(29) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(29) %142:fpr128 = SSHLLv2i32_shift %140:fpr64, 0
Bottom Pressure:
FPR8=4
GPR32=3
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  LiveReg: %140
  UpdateRegP: SU(29) %142:fpr128 = SSHLLv2i32_shift %140:fpr64, 0
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @6c
  BotQ.A BotLatency SU(29) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 28 
Queue BotQ.A: 27 35 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 9 13 17 21 25 28 32 33 
BotQ.A RemLatency SU(27) 12c
  BotQ.A RemainingLatency 12 + 7c > CritPath 15
Picking from Bot:
  Cand SU(27) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(27) %138:fpr64 = FADDDrr %135:fpr64, %137:fpr64
Bottom Pressure:
FPR8=5
GPR32=3
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
FPR8+ZPR_4b=5
FPR8+ZPR4_with_zsub2_in_ZPR_4b=5
FPR8+ZPR4_with_zsub3_in_ZPR_4b=5
FPR8+ZPR4_with_zsub_in_FPR128_lo=5
ZPR=5
  LiveReg: %135
  UpdateRegP: SU(27) %138:fpr64 = FADDDrr %135:fpr64, %137:fpr64
              to 
  LiveReg: %137
  UpdateRegP: SU(27) %138:fpr64 = FADDDrr %135:fpr64, %137:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @7c
  BotQ.A TopLatency SU(27) 12c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 28 26 
Queue BotQ.A: 35 24 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 9 13 17 21 25 28 32 33 
BotQ.A RemLatency SU(24) 11c
BotQ.A RemLatency SU(26) 1c
  BotQ.A RemainingLatency 11 + 8c > CritPath 15
Picking from Bot:
  Cand SU(35) ORDER                              
  Cand SU(24) BOT-PATH                  11 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(24) %135:fpr64 = FADDDrr %131:fpr64, %134:fpr64
Bottom Pressure:
FPR8=6
GPR32=3
FPR8+ZPR_3b=6
FPR8+ZPR4_with_zsub1_in_ZPR_3b=6
FPR8+ZPR4_with_zsub2_in_ZPR_3b=6
FPR8+ZPR4_with_zsub3_in_ZPR_3b=6
FPR8+ZPR_4b=6
FPR8+ZPR4_with_zsub2_in_ZPR_4b=6
FPR8+ZPR4_with_zsub3_in_ZPR_4b=6
FPR8+ZPR4_with_zsub_in_FPR128_lo=6
ZPR=6
  LiveReg: %131
  UpdateRegP: SU(24) %135:fpr64 = FADDDrr %131:fpr64, %134:fpr64
              to 
  LiveReg: %134
  UpdateRegP: SU(24) %135:fpr64 = FADDDrr %131:fpr64, %134:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 28 26 
Queue BotQ.A: 35 20 23 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 9 13 17 21 25 28 32 33 
BotQ.A RemLatency SU(20) 10c
BotQ.A RemLatency SU(26) 1c
  BotQ.A RemainingLatency 10 + 9c > CritPath 15
Picking from Bot:
  Cand SU(35) ORDER                              
  Cand SU(20) BOT-PATH                  10 cycles 
  Cand SU(23) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(23) %134:fpr64 = FMULDrr %122:fpr64, %133:fpr64
Bottom Pressure:
FPR8=6
GPR32=3
FPR8+ZPR_3b=6
FPR8+ZPR4_with_zsub1_in_ZPR_3b=6
FPR8+ZPR4_with_zsub2_in_ZPR_3b=6
FPR8+ZPR4_with_zsub3_in_ZPR_3b=6
FPR8+ZPR_4b=6
FPR8+ZPR4_with_zsub2_in_ZPR_4b=6
FPR8+ZPR4_with_zsub3_in_ZPR_4b=6
FPR8+ZPR4_with_zsub_in_FPR128_lo=6
ZPR=6
  LiveReg: %133
  UpdateRegP: SU(23) %134:fpr64 = FMULDrr %122:fpr64, %133:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @9c
  BotQ.A BotLatency SU(23) 5c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 26 
Queue BotQ.A: 35 20 22 28 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 9 13 17 21 25 28 32 33 
BotQ.A RemLatency SU(20) 10c
BotQ.A RemLatency SU(26) 1c
  BotQ.A RemainingLatency 10 + 10c > CritPath 15
Picking from Bot:
  Cand SU(35) ORDER                              
  Cand SU(20) BOT-PATH                  10 cycles 
  Cand SU(22) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(22) %133:fpr64 = COPY %132:gpr64
Bottom Pressure:
FPR8=5
GPR32=4
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
FPR8+ZPR_4b=5
FPR8+ZPR4_with_zsub2_in_ZPR_4b=5
FPR8+ZPR4_with_zsub3_in_ZPR_4b=5
FPR8+ZPR4_with_zsub_in_FPR128_lo=5
ZPR=5
  LiveReg: %132
  UpdateRegP: SU(22) %133:fpr64 = COPY %132:gpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @10c
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 26 21 
Queue BotQ.A: 35 20 28 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 9 13 17 21 25 28 32 33 
BotQ.A RemLatency SU(20) 10c
BotQ.A RemLatency SU(26) 1c
  BotQ.A RemainingLatency 10 + 10c > CritPath 15
Picking from Bot:
  Cand SU(35) ORDER                              
  Cand SU(20) BOT-PATH                  10 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(20) %131:fpr64 = FADDDrr %126:fpr64, %130:fpr64
Bottom Pressure:
FPR8=6
GPR32=4
FPR8+ZPR_3b=6
FPR8+ZPR4_with_zsub1_in_ZPR_3b=6
FPR8+ZPR4_with_zsub2_in_ZPR_3b=6
FPR8+ZPR4_with_zsub3_in_ZPR_3b=6
FPR8+ZPR_4b=6
FPR8+ZPR4_with_zsub2_in_ZPR_4b=6
FPR8+ZPR4_with_zsub3_in_ZPR_4b=6
FPR8+ZPR4_with_zsub_in_FPR128_lo=6
ZPR=6
  LiveReg: %126
  UpdateRegP: SU(20) %131:fpr64 = FADDDrr %126:fpr64, %130:fpr64
              to 
  LiveReg: %130
  UpdateRegP: SU(20) %131:fpr64 = FADDDrr %126:fpr64, %130:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @10c
  BotQ.A TopLatency SU(20) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 35 28 19 15 26 21 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 9 13 17 21 25 28 32 33 
BotQ.A RemLatency SU(19) 9c
  BotQ.A RemainingLatency 9 + 11c > CritPath 15
Picking from Bot:
  Cand SU(35) ORDER                              
  Cand SU(28) REG-MAX                            
  Cand SU(26) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(26) %137:fpr64 = LDRDui %136:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
Bottom Pressure:
FPR8=5
GPR32=5
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
FPR8+ZPR_4b=5
FPR8+ZPR4_with_zsub2_in_ZPR_4b=5
FPR8+ZPR4_with_zsub3_in_ZPR_4b=5
FPR8+ZPR4_with_zsub_in_FPR128_lo=5
ZPR=5
  LiveReg: %136
  UpdateRegP: SU(26) %137:fpr64 = LDRDui %136:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @11c
  BotQ.A BotLatency SU(26) 7c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 35 28 19 15 21 25 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 9 13 17 21 25 28 32 33 
BotQ.A RemLatency SU(19) 9c
  BotQ.A RemainingLatency 9 + 12c > CritPath 15
Picking from Bot:
  Cand SU(35) ORDER                              
  Cand SU(19) BOT-PATH                  9 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(19) %130:fpr64 = FMULDrr %127:fpr64, %129:fpr64
Bottom Pressure:
FPR8=6
GPR32=5
FPR8+ZPR_3b=6
FPR8+ZPR4_with_zsub1_in_ZPR_3b=6
FPR8+ZPR4_with_zsub2_in_ZPR_3b=6
FPR8+ZPR4_with_zsub3_in_ZPR_3b=6
FPR8+ZPR_4b=6
FPR8+ZPR4_with_zsub2_in_ZPR_4b=6
FPR8+ZPR4_with_zsub3_in_ZPR_4b=6
FPR8+ZPR4_with_zsub_in_FPR128_lo=6
ZPR=6
  LiveReg: %127
  UpdateRegP: SU(19) %130:fpr64 = FMULDrr %127:fpr64, %129:fpr64
              to 
  LiveReg: %129
  UpdateRegP: SU(19) %130:fpr64 = FMULDrr %127:fpr64, %129:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @12c
  BotQ.A TopLatency SU(19) 9c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 18 
Queue BotQ.A: 35 28 25 15 21 16 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 9 13 17 21 25 28 32 33 
BotQ.A RemLatency SU(16) 8c
BotQ.A RemLatency SU(18) 1c
  BotQ.A RemainingLatency 8 + 13c > CritPath 15
Picking from Bot:
  Cand SU(35) ORDER                              
  Cand SU(28) REG-MAX                            
  Cand SU(16) BOT-PATH                  8 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(16) %127:fpr64 = FMULDrr %122:fpr64, %122:fpr64
Bottom Pressure:
FPR8=5
GPR32=5
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
FPR8+ZPR_4b=5
FPR8+ZPR4_with_zsub2_in_ZPR_4b=5
FPR8+ZPR4_with_zsub3_in_ZPR_4b=5
FPR8+ZPR4_with_zsub_in_FPR128_lo=5
ZPR=5
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 18 
Queue BotQ.A: 35 28 25 15 21 10 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 9 13 17 21 25 28 32 33 
BotQ.A RemLatency SU(15) 7c
BotQ.A RemLatency SU(18) 1c
  BotQ.A RemainingLatency 7 + 14c > CritPath 15
Picking from Bot:
  Cand SU(35) ORDER                              
  Cand SU(15) BOT-PATH                  7 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(15) %126:fpr64 = FMULDrr %123:fpr64, %125:fpr64
Bottom Pressure:
FPR8=6
GPR32=5
FPR8+ZPR_3b=6
FPR8+ZPR4_with_zsub1_in_ZPR_3b=6
FPR8+ZPR4_with_zsub2_in_ZPR_3b=6
FPR8+ZPR4_with_zsub3_in_ZPR_3b=6
FPR8+ZPR_4b=6
FPR8+ZPR4_with_zsub2_in_ZPR_4b=6
FPR8+ZPR4_with_zsub3_in_ZPR_4b=6
FPR8+ZPR4_with_zsub_in_FPR128_lo=6
ZPR=6
  LiveReg: %123
  UpdateRegP: SU(15) %126:fpr64 = FMULDrr %123:fpr64, %125:fpr64
              to 
  LiveReg: %125
  UpdateRegP: SU(15) %126:fpr64 = FMULDrr %123:fpr64, %125:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 18 14 
Queue BotQ.A: 35 28 25 10 21 12 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 9 13 17 21 25 28 32 33 
BotQ.A RemLatency SU(10) 7c
BotQ.A RemLatency SU(18) 1c
  BotQ.A RemainingLatency 7 + 15c > CritPath 15
Picking from Bot:
  Cand SU(35) ORDER                              
  Cand SU(28) REG-MAX                            
  Cand SU(12) BOT-PATH                  6 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(12) %123:fpr64 = SCVTFUWDri %117:gpr32
Bottom Pressure:
FPR8=5
GPR32=5
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
FPR8+ZPR_4b=5
FPR8+ZPR4_with_zsub2_in_ZPR_4b=5
FPR8+ZPR4_with_zsub3_in_ZPR_4b=5
FPR8+ZPR4_with_zsub_in_FPR128_lo=5
ZPR=5
  Ready @15c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 14 
Queue BotQ.A: 35 28 25 10 21 4 18 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 9 13 17 21 25 28 32 33 
  BotQ.A RemainingLatency 0 + 16c > CritPath 15
Picking from Bot:
  Cand SU(35) ORDER                              
  Cand SU(10) BOT-PATH                  7 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(10) %122:fpr64 = FDIVDrr %120:fpr64, %121:fpr64
Bottom Pressure:
FPR8=6
GPR32=5
FPR8+ZPR_3b=6
FPR8+ZPR4_with_zsub1_in_ZPR_3b=6
FPR8+ZPR4_with_zsub2_in_ZPR_3b=6
FPR8+ZPR4_with_zsub3_in_ZPR_3b=6
FPR8+ZPR_4b=6
FPR8+ZPR4_with_zsub2_in_ZPR_4b=6
FPR8+ZPR4_with_zsub3_in_ZPR_4b=6
FPR8+ZPR4_with_zsub_in_FPR128_lo=6
ZPR=6
  LiveReg: %120
  UpdateRegP: SU(10) %122:fpr64 = FDIVDrr %120:fpr64, %121:fpr64
              to 
  LiveReg: %121
  UpdateRegP: SU(10) %122:fpr64 = FDIVDrr %120:fpr64, %121:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @16c
  BotQ.A TopLatency SU(10) 7c
  BotQ.A BotLatency SU(10) 8c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 14 
Queue BotQ.A: 35 28 25 18 21 4 8 9 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 9 13 17 21 25 28 32 33 
  BotQ.A RemainingLatency 0 + 17c > CritPath 15
Picking from Bot:
  Cand SU(35) ORDER                              
  Cand SU(28) REG-MAX                            
  Cand SU(18) BOT-PATH                  1 cycles 
  Cand SU(4) BOT-PATH                  5 cycles 
  Cand SU(8) BOT-PATH                  6 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(8) %120:fpr64 = SCVTFUWDri %119:gpr32
Bottom Pressure:
FPR8=5
GPR32=6
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
FPR8+ZPR_4b=5
FPR8+ZPR4_with_zsub2_in_ZPR_4b=5
FPR8+ZPR4_with_zsub3_in_ZPR_4b=5
FPR8+ZPR4_with_zsub_in_FPR128_lo=5
ZPR=5
  LiveReg: %119
  UpdateRegP: SU(8) %120:fpr64 = SCVTFUWDri %119:gpr32
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @17c
  BotQ.A BotLatency SU(8) 9c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 35 28 25 18 21 4 9 7 14 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 9 13 17 21 25 28 32 33 
  BotQ.A RemainingLatency 0 + 18c > CritPath 15
Picking from Bot:
  Cand SU(35) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(35) %149:fpr64 = FMULDrr %146:fpr64, %148:fpr64
Bottom Pressure:
FPR8=6
GPR32=6
FPR8+ZPR_3b=6
FPR8+ZPR4_with_zsub1_in_ZPR_3b=6
FPR8+ZPR4_with_zsub2_in_ZPR_3b=6
FPR8+ZPR4_with_zsub3_in_ZPR_3b=6
FPR8+ZPR_4b=6
FPR8+ZPR4_with_zsub2_in_ZPR_4b=6
FPR8+ZPR4_with_zsub3_in_ZPR_4b=6
FPR8+ZPR4_with_zsub_in_FPR128_lo=6
ZPR=6
  LiveReg: %146
  UpdateRegP: SU(35) %149:fpr64 = FMULDrr %146:fpr64, %148:fpr64
              to 
  LiveReg: %148
  UpdateRegP: SU(35) %149:fpr64 = FMULDrr %146:fpr64, %148:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 32 
Queue BotQ.A: 14 28 25 18 21 4 9 7 34 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 9 13 17 21 25 28 32 33 
  BotQ.A RemainingLatency 0 + 19c > CritPath 15
Picking from Bot:
  Cand SU(14) ORDER                              
  Cand SU(28) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(28) undef %140.ssub:fpr64 = LDRSui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
Bottom Pressure:
FPR8=5
GPR32=6
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
FPR8+ZPR_4b=5
FPR8+ZPR4_with_zsub2_in_ZPR_4b=5
FPR8+ZPR4_with_zsub3_in_ZPR_4b=5
FPR8+ZPR4_with_zsub_in_FPR128_lo=5
ZPR=5
  Ready @19c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 32 
Queue BotQ.A: 14 34 25 18 21 4 9 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 9 13 17 21 25 33 32 
  BotQ.A RemainingLatency 0 + 20c > CritPath 15
Picking from Bot:
  Cand SU(14) ORDER                              
  Cand SU(34) ORDER                              
  Cand SU(25) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(25) %136:gpr64common = ADRP target-flags(aarch64-page) %const.2
Bottom Pressure:
FPR8=5
GPR32=5
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
FPR8+ZPR_4b=5
FPR8+ZPR4_with_zsub2_in_ZPR_4b=5
FPR8+ZPR4_with_zsub3_in_ZPR_4b=5
FPR8+ZPR4_with_zsub_in_FPR128_lo=5
ZPR=5
  Ready @20c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 32 
Queue BotQ.A: 14 34 7 18 21 4 9 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 9 13 17 21 32 33 
  BotQ.A RemainingLatency 0 + 21c > CritPath 15
Picking from Bot:
  Cand SU(14) ORDER                              
  Cand SU(34) ORDER                              
  Cand SU(7) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(7) %119:gpr32 = nsw ADDWrr %118:gpr32, %116:gpr32
Bottom Pressure:
FPR8=5
GPR32=6
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
FPR8+ZPR_4b=5
FPR8+ZPR4_with_zsub2_in_ZPR_4b=5
FPR8+ZPR4_with_zsub3_in_ZPR_4b=5
FPR8+ZPR4_with_zsub_in_FPR128_lo=5
ZPR=5
  LiveReg: %118
  UpdateRegP: SU(7) %119:gpr32 = nsw ADDWrr %118:gpr32, %116:gpr32
              to 
  LiveReg: %116
  UpdateRegP: SU(4) %117:gpr32 = nsw MADDWrrr %115:gpr32, %116:gpr32, $wzr
              to 
  UpdateRegP: SU(7) %119:gpr32 = nsw ADDWrr %118:gpr32, %116:gpr32
              to GPR32 -1
  Ready @21c
  BotQ.A TopLatency SU(7) 5c
  BotQ.A BotLatency SU(7) 10c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 34 9 18 21 4 6 32 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 9 13 17 21 32 33 
  BotQ.A RemainingLatency 0 + 22c > CritPath 15
Picking from Bot:
  Cand SU(14) ORDER                              
  Cand SU(34) ORDER                              
  Cand SU(9) REG-MAX                            
  Cand SU(21) ORDER                              
  Cand SU(4) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(4) %117:gpr32 = nsw MADDWrrr %115:gpr32, %116:gpr32, $wzr
Bottom Pressure:
FPR8=5
GPR32=6
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
FPR8+ZPR_4b=5
FPR8+ZPR4_with_zsub2_in_ZPR_4b=5
FPR8+ZPR4_with_zsub3_in_ZPR_4b=5
FPR8+ZPR4_with_zsub_in_FPR128_lo=5
ZPR=5
  LiveReg: %115
  UpdateRegP: SU(4) %117:gpr32 = nsw MADDWrrr %115:gpr32, %116:gpr32, $wzr
              to GPR32 -1
  Ready @22c
  BotQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 22
Cycle: 23 BotQ.A
BotQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 14 34 9 18 21 32 6 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 9 13 17 21 32 33 
  BotQ.A RemainingLatency 0 + 23c > CritPath 15
Picking from Bot:
  Cand SU(14) ORDER                              
  Cand SU(34) ORDER                              
  Cand SU(9) REG-MAX                            
  Cand SU(21) ORDER                              
  Cand SU(32) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(32) %146:fpr64 = LDRDui %291:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
Bottom Pressure:
FPR8=4
GPR32=6
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  Ready @23c
  *** Max MOps 1 at cycle 23
Cycle: 24 BotQ.A
BotQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 14 34 9 18 21 2 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 9 13 17 21 33 
  BotQ.A RemainingLatency 0 + 24c > CritPath 15
Picking from Bot:
  Cand SU(14) ORDER                              
  Cand SU(34) ORDER                              
  Cand SU(9) REG-MAX                            
  Cand SU(21) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(21) %132:gpr64 = MOVi64imm 4667539284973060096
Bottom Pressure:
FPR8=4
GPR32=5
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  Ready @24c
  *** Max MOps 1 at cycle 24
Cycle: 25 BotQ.A
BotQ.A @25c
  Retired: 25
  Executed: 25c
  Critical: 25c, 25 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 14 34 9 18 6 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 9 13 17 33 
  BotQ.A RemainingLatency 0 + 25c > CritPath 15
Picking from Bot:
  Cand SU(14) ORDER                              
  Cand SU(34) ORDER                              
  Cand SU(6) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(6) %118:gpr32 = nsw ADDWrr %113:gpr32, %114:gpr32
Bottom Pressure:
FPR8=4
GPR32=6
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  LiveReg: %113
  UpdateRegP: SU(2) %115:gpr32 = nsw MADDWrrr %113:gpr32, %114:gpr32, $wzr
              to 
  UpdateRegP: SU(6) %118:gpr32 = nsw ADDWrr %113:gpr32, %114:gpr32
              to 
  LiveReg: %114
  UpdateRegP: SU(2) %115:gpr32 = nsw MADDWrrr %113:gpr32, %114:gpr32, $wzr
              to GPR32 -1
  UpdateRegP: SU(6) %118:gpr32 = nsw ADDWrr %113:gpr32, %114:gpr32
              to GPR32 -1
  Ready @25c
  BotQ.A TopLatency SU(6) 4c
  BotQ.A BotLatency SU(6) 11c
  *** Max MOps 1 at cycle 25
Cycle: 26 BotQ.A
BotQ.A @26c
  Retired: 26
  Executed: 26c
  Critical: 26c, 26 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 34 9 18 2 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 9 13 17 33 
  BotQ.A RemainingLatency 0 + 26c > CritPath 15
Picking from Bot:
  Cand SU(14) ORDER                              
  Cand SU(34) ORDER                              
  Cand SU(9) REG-MAX                            
  Cand SU(2) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) %115:gpr32 = nsw MADDWrrr %113:gpr32, %114:gpr32, $wzr
Bottom Pressure:
FPR8=4
GPR32=5
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  Ready @26c
  BotQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 26
Cycle: 27 BotQ.A
BotQ.A @27c
  Retired: 27
  Executed: 27c
  Critical: 27c, 27 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 14 34 9 18 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 9 13 17 33 
  BotQ.A RemainingLatency 0 + 27c > CritPath 15
Picking from Bot:
  Cand SU(14) ORDER                              
  Cand SU(34) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(34) %148:fpr64 = COPY %147:gpr64
Bottom Pressure:
FPR8=3
GPR32=6
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  LiveReg: %147
  UpdateRegP: SU(34) %148:fpr64 = COPY %147:gpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @27c
BotQ.A @27c
  Retired: 27
  Executed: 27c
  Critical: 27c, 27 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 33 
Queue BotQ.A: 14 3 9 18 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 9 13 17 33 
  BotQ.A RemainingLatency 0 + 27c > CritPath 15
Picking from Bot:
  Cand SU(14) ORDER                              
  Cand SU(3) REG-MAX                            
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(9) %121:fpr64 = FMOVDi 8
Bottom Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @27c
  *** Max MOps 1 at cycle 27
Cycle: 28 BotQ.A
BotQ.A @28c
  Retired: 28
  Executed: 28c
  Critical: 28c, 28 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 14 3 18 33 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 33 13 17 
  BotQ.A RemainingLatency 0 + 28c > CritPath 15
Picking from Bot:
  Cand SU(14) ORDER                              
  Cand SU(3) REG-MAX                            
  Cand SU(33) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(33) %147:gpr64 = MOVi64imm 4696837146684686336
Bottom Pressure:
FPR8=2
GPR32=5
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @28c
  *** Max MOps 1 at cycle 28
Cycle: 29 BotQ.A
BotQ.A @29c
  Retired: 29
  Executed: 29c
  Critical: 29c, 29 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 14 3 18 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 17 13 
  BotQ.A RemainingLatency 0 + 29c > CritPath 15
Picking from Bot:
  Cand SU(14) ORDER                              
  Cand SU(18) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(18) %129:fpr64 = LDRDui %128:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
Bottom Pressure:
FPR8=1
GPR32=6
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %128
  UpdateRegP: SU(18) %129:fpr64 = LDRDui %128:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @29c
  *** Max MOps 1 at cycle 29
Cycle: 30 BotQ.A
BotQ.A @30c
  Retired: 30
  Executed: 30c
  Critical: 30c, 30 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 3 17 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 17 13 
  BotQ.A RemainingLatency 0 + 30c > CritPath 15
Picking from Bot:
  Cand SU(14) ORDER                              
  Cand SU(3) REG-MAX                            
  Cand SU(17) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(17) %128:gpr64common = ADRP target-flags(aarch64-page) %const.1
Bottom Pressure:
FPR8=1
GPR32=5
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  Ready @30c
  *** Max MOps 1 at cycle 30
Cycle: 31 BotQ.A
BotQ.A @31c
  Retired: 31
  Executed: 31c
  Critical: 31c, 31 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 3 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 13 
  BotQ.A RemainingLatency 0 + 31c > CritPath 15
Picking from Bot:
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(14) %125:fpr64 = LDRDui %124:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
Bottom Pressure:
GPR32=6
  LiveReg: %124
  UpdateRegP: SU(14) %125:fpr64 = LDRDui %124:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @31c
  BotQ.A TopLatency SU(14) 1c
  *** Max MOps 1 at cycle 31
Cycle: 32 BotQ.A
BotQ.A @32c
  Retired: 32
  Executed: 32c
  Critical: 32c, 32 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 0 13 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 13 
  BotQ.A RemainingLatency 0 + 32c > CritPath 15
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(13) %124:gpr64common = ADRP target-flags(aarch64-page) %const.0
Bottom Pressure:
GPR32=5
  Ready @32c
  *** Max MOps 1 at cycle 32
Cycle: 33 BotQ.A
BotQ.A @33c
  Retired: 33
  Executed: 33c
  Critical: 33c, 33 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  BotQ.A RemainingLatency 0 + 33c > CritPath 15
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(3) %116:gpr32 = LDRWui %292:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
Bottom Pressure:
GPR32=4
  Ready @33c
  BotQ.A BotLatency SU(3) 14c
  *** Max MOps 1 at cycle 33
Cycle: 34 BotQ.A
BotQ.A @34c
  Retired: 34
  Executed: 34c
  Critical: 34c, 34 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 34c > CritPath 15
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(1) %114:gpr32 = LDRWui %292:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
Bottom Pressure:
GPR32=3
  Ready @34c
  BotQ.A BotLatency SU(1) 15c
  *** Max MOps 1 at cycle 34
Cycle: 35 BotQ.A
BotQ.A @35c
  Retired: 35
  Executed: 35c
  Critical: 35c, 35 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %113:gpr32 = LDRWui %292:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
Bottom Pressure:
GPR32=2
  Ready @35c
  *** Max MOps 1 at cycle 35
Cycle: 36 BotQ.A
BotQ.A @36c
  Retired: 36
  Executed: 36c
  Critical: 36c, 36 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   %113:gpr32 = LDRWui %292:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
SU(1):   %114:gpr32 = LDRWui %292:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
SU(3):   %116:gpr32 = LDRWui %292:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
SU(13):   %124:gpr64common = ADRP target-flags(aarch64-page) %const.0
SU(14):   %125:fpr64 = LDRDui %124:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
SU(17):   %128:gpr64common = ADRP target-flags(aarch64-page) %const.1
SU(18):   %129:fpr64 = LDRDui %128:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
SU(33):   %147:gpr64 = MOVi64imm 4696837146684686336
SU(9):   %121:fpr64 = FMOVDi 8
SU(34):   %148:fpr64 = COPY %147:gpr64
SU(2):   %115:gpr32 = nsw MADDWrrr %113:gpr32, %114:gpr32, $wzr
SU(6):   %118:gpr32 = nsw ADDWrr %113:gpr32, %114:gpr32
SU(21):   %132:gpr64 = MOVi64imm 4667539284973060096
SU(32):   %146:fpr64 = LDRDui %291:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
SU(4):   %117:gpr32 = nsw MADDWrrr %115:gpr32, %116:gpr32, $wzr
SU(7):   %119:gpr32 = nsw ADDWrr %118:gpr32, %116:gpr32
SU(25):   %136:gpr64common = ADRP target-flags(aarch64-page) %const.2
SU(28):   undef %140.ssub:fpr64 = LDRSui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
SU(35):   %149:fpr64 = FMULDrr %146:fpr64, %148:fpr64
SU(8):   %120:fpr64 = SCVTFUWDri %119:gpr32
SU(10):   %122:fpr64 = FDIVDrr %120:fpr64, %121:fpr64
SU(12):   %123:fpr64 = SCVTFUWDri %117:gpr32
SU(15):   %126:fpr64 = FMULDrr %123:fpr64, %125:fpr64
SU(16):   %127:fpr64 = FMULDrr %122:fpr64, %122:fpr64
SU(19):   %130:fpr64 = FMULDrr %127:fpr64, %129:fpr64
SU(26):   %137:fpr64 = LDRDui %136:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
SU(20):   %131:fpr64 = FADDDrr %126:fpr64, %130:fpr64
SU(22):   %133:fpr64 = COPY %132:gpr64
SU(23):   %134:fpr64 = FMULDrr %122:fpr64, %133:fpr64
SU(24):   %135:fpr64 = FADDDrr %131:fpr64, %134:fpr64
SU(27):   %138:fpr64 = FADDDrr %135:fpr64, %137:fpr64
SU(29):   %142:fpr128 = SSHLLv2i32_shift %140:fpr64, 0
SU(30):   %144:fpr64 = SCVTFv1i64 %142.dsub:fpr128
SU(5):   STRWui %117:gpr32, %stack.6.n3, 0 :: (store 4 into %ir.n3)
SU(31):   %145:fpr64 = FMULDrr %138:fpr64, %144:fpr64
SU(36):   %150:fpr64 = FDIVDrr %145:fpr64, %149:fpr64
SU(11):   STRDui %122:fpr64, %291:gpr64sp, 36 :: (store 8 into %ir.t)
SU(37):   STRDui %150:fpr64, %291:gpr64sp, 37 :: (store 8 into %ir.mflops)

********** MI Scheduling **********
main:%bb.29 if.end85
  From: %160:gpr64 = MOVaddr target-flags(aarch64-page) @.str.40, target-flags(aarch64-pageoff, aarch64-nc) @.str.40
    To: BL @print_results, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit killed $w4, implicit killed $w5, implicit $d0, implicit killed $d1, implicit killed $x6, implicit killed $w7, implicit-def $sp
 RegionInstrs: 30
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR32arg=8
tcGPR64=8
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=8
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
Live In: %159 %158 %157 %156 %155 %154 %153 %151 
Live Out: 
Live Thru: 
Top Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
Bottom Pressure:
GPR32arg=8
tcGPR64=8
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=8
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
Excess PSets: 
Cluster ld/st SU(17) - SU(15)
Cluster ld/st SU(13) - SU(11)
Cluster ld/st SU(9) - SU(7)
Cluster ld/st SU(5) - SU(3)
SU(0):   %160:gpr64 = MOVaddr target-flags(aarch64-page) @.str.40, target-flags(aarch64-pageoff, aarch64-nc) @.str.40
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%160
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   STRXui %160:gpr64, $sp, 8 :: (store 8 into stack + 64)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%160
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(2):   %162:gpr64 = MOVaddr target-flags(aarch64-page) @.str.39, target-flags(aarch64-pageoff, aarch64-nc) @.str.39
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%162
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(3):   STRXui %162:gpr64, $sp, 7 :: (store 8 into stack + 56)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%162
    SU(5): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(4):   %163:gpr64 = MOVaddr target-flags(aarch64-page) @.str.38, target-flags(aarch64-pageoff, aarch64-nc) @.str.38
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%163
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(5):   STRXui %163:gpr64, $sp, 6 :: (store 8 into stack + 48)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%163
  Successors:
    SU(3): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(6):   %164:gpr64 = MOVaddr target-flags(aarch64-page) @.str.37, target-flags(aarch64-pageoff, aarch64-nc) @.str.37
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%164
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   STRXui %164:gpr64, $sp, 5 :: (store 8 into stack + 40)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%164
    SU(9): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(8):   %165:gpr64 = MOVaddr target-flags(aarch64-page) @.str.36, target-flags(aarch64-pageoff, aarch64-nc) @.str.36
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(9): Data Latency=1 Reg=%165
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(9):   STRXui %165:gpr64, $sp, 4 :: (store 8 into stack + 32)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%165
  Successors:
    SU(7): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(10):   %166:gpr64 = MOVaddr target-flags(aarch64-page) @.str.35, target-flags(aarch64-pageoff, aarch64-nc) @.str.35
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(11): Data Latency=1 Reg=%166
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(11):   STRXui %166:gpr64, $sp, 3 :: (store 8 into stack + 24)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%166
    SU(13): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(12):   %167:gpr64 = MOVaddr target-flags(aarch64-page) @.str.34, target-flags(aarch64-pageoff, aarch64-nc) @.str.34
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(13): Data Latency=1 Reg=%167
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(13):   STRXui %167:gpr64, $sp, 2 :: (store 8 into stack + 16)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%167
  Successors:
    SU(11): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(14):   %168:gpr64 = MOVaddr target-flags(aarch64-page) @.str.33, target-flags(aarch64-pageoff, aarch64-nc) @.str.33
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(15): Data Latency=1 Reg=%168
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(15):   STRXui %168:gpr64, $sp, 1 :: (store 8 into stack + 8)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(14): Data Latency=1 Reg=%168
    SU(17): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(16):   %169:gpr64 = MOVaddr target-flags(aarch64-page) @.str.32, target-flags(aarch64-pageoff, aarch64-nc) @.str.32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(17): Data Latency=1 Reg=%169
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(17):   STRXui %169:gpr64, $sp, 0 :: (store 8 into stack)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(16): Data Latency=1 Reg=%169
  Successors:
    SU(15): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(18):   %170:gpr64 = MOVaddr target-flags(aarch64-page) @.str.30, target-flags(aarch64-pageoff, aarch64-nc) @.str.30
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(20): Data Latency=1 Reg=%170
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(19):   %171:gpr64 = MOVaddr target-flags(aarch64-page) @.str.31, target-flags(aarch64-pageoff, aarch64-nc) @.str.31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(28): Data Latency=1 Reg=%171
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(20):   $x0 = COPY %170:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(18): Data Latency=1 Reg=%170
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1
  Single Issue       : false;
SU(21):   $w1 = COPY %151:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1
  Single Issue       : false;
SU(22):   $w2 = COPY %153:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1
  Single Issue       : false;
SU(23):   $w3 = COPY %154:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1
  Single Issue       : false;
SU(24):   $w4 = COPY %155:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1
  Single Issue       : false;
SU(25):   $w5 = COPY %156:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1
  Single Issue       : false;
SU(26):   $d0 = COPY %157:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : FPR128_lo -1    ZPR_3b -1    FPR128_lo+ZPR_3b -1    QQ_with_qsub1_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR4_with_zsub3_in_ZPR_4b -1    ZPR4_with_zsub_in_FPR128_lo -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1
  Single Issue       : false;
SU(27):   $d1 = COPY %158:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : FPR128_lo -1    ZPR_3b -1    FPR128_lo+ZPR_3b -1    QQ_with_qsub1_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR4_with_zsub3_in_ZPR_4b -1    ZPR4_with_zsub_in_FPR128_lo -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1
  Single Issue       : false;
SU(28):   $x6 = COPY %171:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(19): Data Latency=1 Reg=%171
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1
  Single Issue       : false;
SU(29):   $w7 = COPY %159:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32arg -1    tcGPR64 -1
  Single Issue       : false;
ExitSU:   BL @print_results, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit killed $w4, implicit killed $w5, implicit $d0, implicit killed $d1, implicit killed $x6, implicit killed $w7, implicit-def $sp
  # preds left       : 10
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(29): Ord  Latency=0 Artificial
    SU(28): Ord  Latency=0 Artificial
    SU(27): Ord  Latency=0 Artificial
    SU(26): Ord  Latency=0 Artificial
    SU(25): Ord  Latency=0 Artificial
    SU(24): Ord  Latency=0 Artificial
    SU(23): Ord  Latency=0 Artificial
    SU(22): Ord  Latency=0 Artificial
    SU(21): Ord  Latency=0 Artificial
    SU(20): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 15 13 11 9 7 5 3 1 29 28 27 26 25 24 23 22 21 20 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 24 25 26 27 29 
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(15) WEAK                               
  Cand SU(29) PHYS-REG                           
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(29) $w7 = COPY %159:gpr32
Bottom Pressure:
GPR32arg=7
tcGPR64=7
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=8
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  LiveReg: %159
  UpdateRegP: SU(29) $w7 = COPY %159:gpr32
              to GPR32arg -1    tcGPR64 -1    GPR32 -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 15 13 11 9 7 5 3 1 20 28 27 26 25 24 23 22 21 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 24 25 26 27 
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(15) WEAK                               
  Cand SU(20) PHYS-REG                           
  Cand SU(28) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(28) $x6 = COPY %171:gpr64
Bottom Pressure:
GPR32arg=6
tcGPR64=6
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=8
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  LiveReg: %171
  UpdateRegP: SU(28) $x6 = COPY %171:gpr64
              to GPR32arg -1    tcGPR64 -1    GPR32 -1
  Ready @0c
  BotQ.A TopLatency SU(28) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 19 
Queue BotQ.A: 17 15 13 11 9 7 5 3 1 20 21 27 26 25 24 23 22 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 24 25 26 27 
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(15) WEAK                               
  Cand SU(20) PHYS-REG                           
  Cand SU(21) ORDER                              
  Cand SU(25) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(25) $w5 = COPY %156:gpr32
Bottom Pressure:
GPR32arg=5
tcGPR64=5
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=8
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  LiveReg: %156
  UpdateRegP: SU(25) $w5 = COPY %156:gpr32
              to GPR32arg -1    tcGPR64 -1    GPR32 -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 19 
Queue BotQ.A: 17 15 13 11 9 7 5 3 1 20 21 27 26 22 24 23 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 24 27 26 
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(15) WEAK                               
  Cand SU(20) PHYS-REG                           
  Cand SU(21) ORDER                              
  Cand SU(22) ORDER                              
  Cand SU(24) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(24) $w4 = COPY %155:gpr32
Bottom Pressure:
GPR32arg=4
tcGPR64=4
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=8
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  LiveReg: %155
  UpdateRegP: SU(24) $w4 = COPY %155:gpr32
              to GPR32arg -1    tcGPR64 -1    GPR32 -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 19 
Queue BotQ.A: 17 15 13 11 9 7 5 3 1 20 21 27 26 22 23 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 26 27 
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(15) WEAK                               
  Cand SU(20) PHYS-REG                           
  Cand SU(21) ORDER                              
  Cand SU(22) ORDER                              
  Cand SU(23) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(23) $w3 = COPY %154:gpr32
Bottom Pressure:
GPR32arg=3
tcGPR64=3
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=8
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  LiveReg: %154
  UpdateRegP: SU(23) $w3 = COPY %154:gpr32
              to GPR32arg -1    tcGPR64 -1    GPR32 -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 19 
Queue BotQ.A: 17 15 13 11 9 7 5 3 1 20 21 27 26 22 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 27 26 
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(15) WEAK                               
  Cand SU(20) PHYS-REG                           
  Cand SU(21) ORDER                              
  Cand SU(22) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(22) $w2 = COPY %153:gpr32
Bottom Pressure:
GPR32arg=2
tcGPR64=2
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=8
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  LiveReg: %153
  UpdateRegP: SU(22) $w2 = COPY %153:gpr32
              to GPR32arg -1    tcGPR64 -1    GPR32 -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 19 
Queue BotQ.A: 17 15 13 11 9 7 5 3 1 20 21 27 26 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 26 27 
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(15) WEAK                               
  Cand SU(20) PHYS-REG                           
  Cand SU(21) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(21) $w1 = COPY %151:gpr32
Bottom Pressure:
GPR32arg=1
tcGPR64=1
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=8
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  LiveReg: %151
  UpdateRegP: SU(21) $w1 = COPY %151:gpr32
              to GPR32arg -1    tcGPR64 -1    GPR32 -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 19 
Queue BotQ.A: 17 15 13 11 9 7 5 3 1 20 26 27 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 27 26 
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(15) WEAK                               
  Cand SU(20) PHYS-REG                           
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(20) $x0 = COPY %170:gpr64
Bottom Pressure:
FPR128_lo=2
ZPR_3b=2
FPR128_lo+ZPR_3b=2
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=2
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=2
GPR32=8
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR4_with_zsub3_in_ZPR_4b=2
ZPR4_with_zsub_in_FPR128_lo=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  GPR32arg: 8 <= 8(+ 0 livethru)
  LiveReg: %170
  UpdateRegP: SU(20) $x0 = COPY %170:gpr64
              to GPR32arg -1    tcGPR64 -1    GPR32 -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 19 18 
Queue BotQ.A: 17 15 13 11 9 7 5 3 1 27 26 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 27 26 
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(15) WEAK                               
  Cand SU(27) PHYS-REG                           
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(27) $d1 = COPY %158:fpr64
Bottom Pressure:
FPR128_lo=1
ZPR_3b=1
FPR128_lo+ZPR_3b=1
QQ_with_qsub1_in_FPR128_lo+ZPR_3b=1
QQQ_with_qsub2_in_FPR128_lo+ZPR_3b=1
QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=1
QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b=1
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=1
QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=1
FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8=2
FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b=1
GPR32=8
FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR4_with_zsub3_in_ZPR_4b=1
ZPR4_with_zsub_in_FPR128_lo=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=1
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %158
  UpdateRegP: SU(27) $d1 = COPY %158:fpr64
              to FPR128_lo -1    ZPR_3b -1    FPR128_lo+ZPR_3b -1    QQ_with_qsub1_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8 -1    FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR4_with_zsub3_in_ZPR_4b -1    ZPR4_with_zsub_in_FPR128_lo -1    FPR8+ZPR_3b -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 19 18 
Queue BotQ.A: 17 15 13 11 9 7 5 3 1 26 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 26 
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(15) WEAK                               
  Cand SU(26) PHYS-REG                           
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(26) $d0 = COPY %157:fpr64
Bottom Pressure:
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %157
  UpdateRegP: SU(26) $d0 = COPY %157:fpr64
              to FPR128_lo -1    ZPR_3b -1    FPR128_lo+ZPR_3b -1    QQ_with_qsub1_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR_3b -1    QQQ_with_qsub2_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    QQQQ_with_qsub3_in_FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8 -1    FPR128_lo+ZPR4_with_zsub2_in_ZPR_3b -1    FPR128_lo+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR4_with_zsub3_in_ZPR_4b -1    ZPR4_with_zsub_in_FPR128_lo -1    FPR8+ZPR_3b -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 19 18 
Queue BotQ.A: 17 15 13 11 9 7 5 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 
Picking from Bot:
  Cand SU(17) ORDER                              
  Cand SU(15) WEAK                               
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(15) STRXui %168:gpr64, $sp, 1 :: (store 8 into stack + 8)
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %168
  UpdateRegP: SU(15) STRXui %168:gpr64, $sp, 1 :: (store 8 into stack + 8)
              to 
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 1 13 11 9 7 5 3 14 19 18 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 
BotQ.A RemLatency SU(17) 1c
  BotQ.A RemainingLatency 1 + 1c > CritPath 1
Picking from Bot:
  Cand SU(17) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(17) STRXui %169:gpr64, $sp, 0 :: (store 8 into stack)
Bottom Pressure:
FPR8=2
GPR32=10
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %169
  UpdateRegP: SU(17) STRXui %169:gpr64, $sp, 0 :: (store 8 into stack)
              to 
  Ready @1c
  BotQ.A TopLatency SU(17) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 1 13 11 9 7 5 3 14 19 16 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(18) ORDER                              
  Cand SU(19) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(19) %171:gpr64 = MOVaddr target-flags(aarch64-page) @.str.31, target-flags(aarch64-pageoff, aarch64-nc) @.str.31
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @2c
  BotQ.A BotLatency SU(19) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 1 13 11 9 7 5 3 14 16 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Cand SU(18) ORDER                              
  Cand SU(1) BOT-PATH                  1 cycles 
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(11) STRXui %166:gpr64, $sp, 3 :: (store 8 into stack + 24)
Bottom Pressure:
FPR8=2
GPR32=10
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %166
  UpdateRegP: SU(11) STRXui %166:gpr64, $sp, 3 :: (store 8 into stack + 24)
              to 
  Ready @3c
  BotQ.A TopLatency SU(11) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 1 13 16 9 7 5 3 14 10 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 
  BotQ.A RemainingLatency 0 + 4c > CritPath 1
Picking from Bot:
  Cand SU(18) ORDER                              
  Cand SU(13) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(13) STRXui %167:gpr64, $sp, 2 :: (store 8 into stack + 16)
Bottom Pressure:
FPR8=2
GPR32=11
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %167
  UpdateRegP: SU(13) STRXui %167:gpr64, $sp, 2 :: (store 8 into stack + 16)
              to 
  Ready @4c
  BotQ.A TopLatency SU(13) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 1 10 16 9 7 5 3 14 12 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 
  BotQ.A RemainingLatency 0 + 5c > CritPath 1
Picking from Bot:
  Cand SU(18) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(18) %170:gpr64 = MOVaddr target-flags(aarch64-page) @.str.30, target-flags(aarch64-pageoff, aarch64-nc) @.str.30
Bottom Pressure:
FPR8=2
GPR32=10
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 1 10 16 9 7 5 3 14 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 
  BotQ.A RemainingLatency 0 + 6c > CritPath 1
Picking from Bot:
  Cand SU(12) ORDER                              
  Cand SU(1) BOT-PATH                  1 cycles 
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(7) STRXui %164:gpr64, $sp, 5 :: (store 8 into stack + 40)
Bottom Pressure:
FPR8=2
GPR32=11
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %164
  UpdateRegP: SU(7) STRXui %164:gpr64, $sp, 5 :: (store 8 into stack + 40)
              to 
  Ready @6c
  BotQ.A TopLatency SU(7) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 1 10 16 9 14 5 3 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 
  BotQ.A RemainingLatency 0 + 7c > CritPath 1
Picking from Bot:
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(9) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(9) STRXui %165:gpr64, $sp, 4 :: (store 8 into stack + 32)
Bottom Pressure:
FPR8=2
GPR32=12
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %165
  UpdateRegP: SU(9) STRXui %165:gpr64, $sp, 4 :: (store 8 into stack + 32)
              to 
  Ready @7c
  BotQ.A TopLatency SU(9) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 1 10 16 6 14 5 3 8 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 
  BotQ.A RemainingLatency 0 + 8c > CritPath 1
Picking from Bot:
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(16) %169:gpr64 = MOVaddr target-flags(aarch64-page) @.str.32, target-flags(aarch64-pageoff, aarch64-nc) @.str.32
Bottom Pressure:
FPR8=2
GPR32=11
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 1 10 8 6 14 5 3 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 
  BotQ.A RemainingLatency 0 + 9c > CritPath 1
Picking from Bot:
  Cand SU(12) ORDER                              
  Cand SU(1) BOT-PATH                  1 cycles 
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) STRXui %162:gpr64, $sp, 7 :: (store 8 into stack + 56)
Bottom Pressure:
FPR8=2
GPR32=12
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %162
  UpdateRegP: SU(3) STRXui %162:gpr64, $sp, 7 :: (store 8 into stack + 56)
              to 
  Ready @9c
  BotQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 1 10 8 6 14 5 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 
  BotQ.A RemainingLatency 0 + 10c > CritPath 1
Picking from Bot:
  Cand SU(12) ORDER                              
  Cand SU(14) ORDER                              
  Cand SU(5) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(5) STRXui %163:gpr64, $sp, 6 :: (store 8 into stack + 48)
Bottom Pressure:
FPR8=2
GPR32=13
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %163
  UpdateRegP: SU(5) STRXui %163:gpr64, $sp, 6 :: (store 8 into stack + 48)
              to 
  Ready @10c
  BotQ.A TopLatency SU(5) 1c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 1 10 8 6 14 2 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 
  BotQ.A RemainingLatency 0 + 11c > CritPath 1
Picking from Bot:
  Cand SU(12) ORDER                              
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(14) %168:gpr64 = MOVaddr target-flags(aarch64-page) @.str.33, target-flags(aarch64-pageoff, aarch64-nc) @.str.33
Bottom Pressure:
FPR8=2
GPR32=12
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 1 10 8 6 4 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 
  BotQ.A RemainingLatency 0 + 12c > CritPath 1
Picking from Bot:
  Cand SU(12) ORDER                              
  Cand SU(1) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) STRXui %160:gpr64, $sp, 8 :: (store 8 into stack + 64)
Bottom Pressure:
FPR8=2
GPR32=13
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %160
  UpdateRegP: SU(1) STRXui %160:gpr64, $sp, 8 :: (store 8 into stack + 64)
              to 
  Ready @12c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 2 10 8 6 4 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 
  BotQ.A RemainingLatency 0 + 13c > CritPath 1
Picking from Bot:
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(12) %167:gpr64 = MOVaddr target-flags(aarch64-page) @.str.34, target-flags(aarch64-pageoff, aarch64-nc) @.str.34
Bottom Pressure:
FPR8=2
GPR32=12
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 10 8 6 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 
  BotQ.A RemainingLatency 0 + 14c > CritPath 1
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(10) %166:gpr64 = MOVaddr target-flags(aarch64-page) @.str.35, target-flags(aarch64-pageoff, aarch64-nc) @.str.35
Bottom Pressure:
FPR8=2
GPR32=11
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 4 8 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 
  BotQ.A RemainingLatency 0 + 15c > CritPath 1
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %165:gpr64 = MOVaddr target-flags(aarch64-page) @.str.36, target-flags(aarch64-pageoff, aarch64-nc) @.str.36
Bottom Pressure:
FPR8=2
GPR32=10
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @15c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 4 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 
  BotQ.A RemainingLatency 0 + 16c > CritPath 1
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %164:gpr64 = MOVaddr target-flags(aarch64-page) @.str.37, target-flags(aarch64-pageoff, aarch64-nc) @.str.37
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 
  BotQ.A RemainingLatency 0 + 17c > CritPath 1
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %163:gpr64 = MOVaddr target-flags(aarch64-page) @.str.38, target-flags(aarch64-pageoff, aarch64-nc) @.str.38
Bottom Pressure:
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  BotQ.A RemainingLatency 0 + 18c > CritPath 1
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %162:gpr64 = MOVaddr target-flags(aarch64-page) @.str.39, target-flags(aarch64-pageoff, aarch64-nc) @.str.39
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %160:gpr64 = MOVaddr target-flags(aarch64-page) @.str.40, target-flags(aarch64-pageoff, aarch64-nc) @.str.40
Bottom Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @19c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.29 ***
SU(0):   %160:gpr64 = MOVaddr target-flags(aarch64-page) @.str.40, target-flags(aarch64-pageoff, aarch64-nc) @.str.40
SU(2):   %162:gpr64 = MOVaddr target-flags(aarch64-page) @.str.39, target-flags(aarch64-pageoff, aarch64-nc) @.str.39
SU(4):   %163:gpr64 = MOVaddr target-flags(aarch64-page) @.str.38, target-flags(aarch64-pageoff, aarch64-nc) @.str.38
SU(6):   %164:gpr64 = MOVaddr target-flags(aarch64-page) @.str.37, target-flags(aarch64-pageoff, aarch64-nc) @.str.37
SU(8):   %165:gpr64 = MOVaddr target-flags(aarch64-page) @.str.36, target-flags(aarch64-pageoff, aarch64-nc) @.str.36
SU(10):   %166:gpr64 = MOVaddr target-flags(aarch64-page) @.str.35, target-flags(aarch64-pageoff, aarch64-nc) @.str.35
SU(12):   %167:gpr64 = MOVaddr target-flags(aarch64-page) @.str.34, target-flags(aarch64-pageoff, aarch64-nc) @.str.34
SU(1):   STRXui %160:gpr64, $sp, 8 :: (store 8 into stack + 64)
SU(14):   %168:gpr64 = MOVaddr target-flags(aarch64-page) @.str.33, target-flags(aarch64-pageoff, aarch64-nc) @.str.33
SU(5):   STRXui %163:gpr64, $sp, 6 :: (store 8 into stack + 48)
SU(3):   STRXui %162:gpr64, $sp, 7 :: (store 8 into stack + 56)
SU(16):   %169:gpr64 = MOVaddr target-flags(aarch64-page) @.str.32, target-flags(aarch64-pageoff, aarch64-nc) @.str.32
SU(9):   STRXui %165:gpr64, $sp, 4 :: (store 8 into stack + 32)
SU(7):   STRXui %164:gpr64, $sp, 5 :: (store 8 into stack + 40)
SU(18):   %170:gpr64 = MOVaddr target-flags(aarch64-page) @.str.30, target-flags(aarch64-pageoff, aarch64-nc) @.str.30
SU(13):   STRXui %167:gpr64, $sp, 2 :: (store 8 into stack + 16)
SU(11):   STRXui %166:gpr64, $sp, 3 :: (store 8 into stack + 24)
SU(19):   %171:gpr64 = MOVaddr target-flags(aarch64-page) @.str.31, target-flags(aarch64-pageoff, aarch64-nc) @.str.31
SU(17):   STRXui %169:gpr64, $sp, 0 :: (store 8 into stack)
SU(15):   STRXui %168:gpr64, $sp, 1 :: (store 8 into stack + 8)
SU(26):   $d0 = COPY %157:fpr64
SU(27):   $d1 = COPY %158:fpr64
SU(20):   $x0 = COPY %170:gpr64
SU(21):   $w1 = COPY %151:gpr32
SU(22):   $w2 = COPY %153:gpr32
SU(23):   $w3 = COPY %154:gpr32
SU(24):   $w4 = COPY %155:gpr32
SU(25):   $w5 = COPY %156:gpr32
SU(28):   $x6 = COPY %171:gpr64
SU(29):   $w7 = COPY %159:gpr32

********** MI Scheduling **********
main:%bb.29 if.end85
  From: %151:gpr32 = LDRSBWui %stack.12.Class, 0 :: (dereferenceable load 1 from %ir.Class, align 4)
    To: ADJCALLSTACKDOWN 72, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Cluster ld/st SU(1) - SU(2)
  Copy Succ SU(4294967295)
SU(0):   %151:gpr32 = LDRSBWui %stack.12.Class, 0 :: (dereferenceable load 1 from %ir.Class, align 4)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %153:gpr32 = LDRWui %292:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  # preds left       : 0
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
    SU(2): Ord  Latency=0 Cluster
  Single Issue       : false;
SU(2):   %154:gpr32 = LDRWui %292:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  # preds left       : 0
  # succs left       : 1
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Predecessors:
    SU(1): Ord  Latency=0 Cluster
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %155:gpr32 = LDRWui %292:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(4):   %156:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(5):   %157:fpr64 = LDRDui %291:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(6):   %158:fpr64 = LDRDui %291:gpr64sp, 37 :: (dereferenceable load 8 from %ir.mflops)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(7):   %159:gpr32 = LDRWui %stack.11.verified, 0 :: (dereferenceable load 4 from %ir.verified)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 72, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 8
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=3 Artificial
    SU(6): Ord  Latency=3 Artificial
    SU(5): Ord  Latency=3 Artificial
    SU(4): Ord  Latency=3 Artificial
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 7 0 1 2 3 4 5 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 7 
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot WEAK      
Scheduling SU(7) %159:gpr32 = LDRWui %stack.11.verified, 0 :: (dereferenceable load 4 from %ir.verified)
  Ready @3c
  BotQ.A BotLatency SU(7) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 1
  Executed: 4c
  Critical: 1c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 0 1 2 3 4 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 
  BotQ.A RemainingLatency 0 + 4c > CritPath 3
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(6) %158:fpr64 = LDRDui %291:gpr64sp, 37 :: (dereferenceable load 8 from %ir.mflops)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 0 1 2 3 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 
  BotQ.A RemainingLatency 0 + 5c > CritPath 3
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(5) %157:fpr64 = LDRDui %291:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 0 1 2 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 
  BotQ.A RemainingLatency 0 + 6c > CritPath 3
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(4) %156:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 0 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  BotQ.A RemainingLatency 0 + 7c > CritPath 3
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(3) %155:gpr32 = LDRWui %292:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  BotQ.A RemainingLatency 0 + 8c > CritPath 3
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(2) %154:gpr32 = LDRWui %292:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 9c > CritPath 3
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(1) %153:gpr32 = LDRWui %292:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 7
  Executed: 10c
  Critical: 7c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %151:gpr32 = LDRSBWui %stack.12.Class, 0 :: (dereferenceable load 1 from %ir.Class, align 4)
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 8
  Executed: 11c
  Critical: 8c, 8 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.29 ***
SU(0):   %151:gpr32 = LDRSBWui %stack.12.Class, 0 :: (dereferenceable load 1 from %ir.Class, align 4)
SU(1):   %153:gpr32 = LDRWui %292:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
SU(2):   %154:gpr32 = LDRWui %292:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
SU(3):   %155:gpr32 = LDRWui %292:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
SU(4):   %156:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
SU(5):   %157:fpr64 = LDRDui %291:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
SU(6):   %158:fpr64 = LDRDui %291:gpr64sp, 37 :: (dereferenceable load 8 from %ir.mflops)
SU(7):   %159:gpr32 = LDRWui %stack.11.verified, 0 :: (dereferenceable load 4 from %ir.verified)

********** MI Scheduling **********
main:%bb.30 if.then86
  From: %174:gpr32 = MOVi32imm 1
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %174:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%174
  Single Issue       : false;
SU(1):   STRWui %174:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%174
  Single Issue       : false;
SU(2):   %254:gpr64sp = ADDXri %stack.10.trecs, 0, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %254:gpr64sp = ADDXri %stack.10.trecs, 0, 0
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %174:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)
  Ready @1c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %174:gpr32 = MOVi32imm 1
  Ready @2c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.30 ***
SU(0):   %174:gpr32 = MOVi32imm 1
SU(1):   STRWui %174:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)
SU(2):   %254:gpr64sp = ADDXri %stack.10.trecs, 0, 0

********** MI Scheduling **********
main:%bb.31 for.cond87
  From: %175:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.33, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %175:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%175
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %175:gpr32common, 15, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%175
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.33, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %175:gpr32common, 15, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %175:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.31 ***
SU(0):   %175:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %175:gpr32common, 15, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.32 for.body90
  From: %252:fpr64 = COPY $d0
    To: B %bb.31
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Cluster ld/st SU(1) - SU(3)
  Copy Succ SU(2)
  Copy Succ SU(5)
SU(0):   %252:fpr64 = COPY $d0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(2): Data Latency=0 Reg=%252
  Single Issue       : false;
SU(1):   %253:gpr64 = LDRSWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%253
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Cluster
  Single Issue       : false;
SU(2):   STRDroX %252:fpr64, %254:gpr64sp, %253:gpr64, 0, 1 :: (store 8 into %ir.arrayidx92)
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%253
    SU(0): Data Latency=0 Reg=%252
    SU(3): Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   %255:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 3
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Predecessors:
    SU(1): Ord  Latency=0 Cluster
  Successors:
    SU(4): Data Latency=4 Reg=%255
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   %256:gpr32common = nsw ADDWri %255:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%255
  Successors:
    SU(5): Data Latency=1 Reg=%256
  Single Issue       : false;
SU(5):   STRWui %256:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%256
    SU(3): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.31
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %252:fpr64 = COPY $d0
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 2 
Queue TopQ.P: 
Queue TopQ.A: 3 1 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(3) ORDER                              
  Cand SU(1) WEAK                               
Pick Bot ORDER     
Scheduling SU(5) STRWui %256:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)
  Ready @0c
  BotQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 
Queue TopQ.P: 
Queue TopQ.A: 3 1 
BotQ.A RemLatency SU(2) 4c
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %256:gpr32common = nsw ADDWri %255:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRDroX %252:fpr64, %254:gpr64sp, %253:gpr64, 0, 1 :: (store 8 into %ir.arrayidx92)
  Ready @2c
  BotQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 1 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %255:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %253:gpr64 = LDRSWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   %252:fpr64 = COPY $d0
SU(1):   %253:gpr64 = LDRSWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(3):   %255:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(2):   STRDroX %252:fpr64, %254:gpr64sp, %253:gpr64, 0, 1 :: (store 8 into %ir.arrayidx92)
SU(4):   %256:gpr32common = nsw ADDWri %255:gpr32common, 1, 0
SU(5):   STRWui %256:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)

********** MI Scheduling **********
main:%bb.33 for.end95
  From: %177:fpr64 = LDRDui %291:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
    To: Bcc 1, %bb.35, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %177:fpr64 = LDRDui %291:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%177
  Single Issue       : false;
SU(1):   FCMPDri %177:fpr64, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%177
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.35, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) FCMPDri %177:fpr64, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %177:fpr64 = LDRDui %291:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.33 ***
SU(0):   %177:fpr64 = LDRDui %291:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
SU(1):   FCMPDri %177:fpr64, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.34 if.then98
  From: %178:gpr64 = MOVi64imm 4607182418800017408
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %178:gpr64 = MOVi64imm 4607182418800017408
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%178
  Single Issue       : false;
SU(1):   STRXui %178:gpr64, %291:gpr64sp, 35 :: (store 8 into %ir.tmax)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%178
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRXui %178:gpr64, %291:gpr64sp, 35 :: (store 8 into %ir.tmax)
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %178:gpr64 = MOVi64imm 4607182418800017408
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.34 ***
SU(0):   %178:gpr64 = MOVi64imm 4607182418800017408
SU(1):   STRXui %178:gpr64, %291:gpr64sp, 35 :: (store 8 into %ir.tmax)

********** MI Scheduling **********
main:%bb.35 if.end99
  From: %181:gpr32 = MOVi32imm 1
    To: End RegionInstrs: 11
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %181:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%181
  Single Issue       : false;
SU(1):   STRWui %181:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%181
  Single Issue       : false;
SU(2):   %187:gpr64sp = ADDXri %stack.13.t_names, 0, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %189:gpr64sp = ADDXri %stack.10.trecs, 0, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   %191:gpr64 = MOVi64imm 4636737291354636288
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   %196:gpr64 = MOVaddr target-flags(aarch64-page) @.str.42, target-flags(aarch64-pageoff, aarch64-nc) @.str.42
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(6):   %238:gpr64 = MOVaddr target-flags(aarch64-page) @.str.43, target-flags(aarch64-pageoff, aarch64-nc) @.str.43
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(7):   %239:gpr64 = MOVaddr target-flags(aarch64-page) @.str.44, target-flags(aarch64-pageoff, aarch64-nc) @.str.44
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(8):   %247:gpr64 = MOVaddr target-flags(aarch64-page) @.str.45, target-flags(aarch64-pageoff, aarch64-nc) @.str.45
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(9):   %226:gpr64 = MOVaddr target-flags(aarch64-page) @.str.46, target-flags(aarch64-pageoff, aarch64-nc) @.str.46
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(10):   %213:gpr64 = MOVaddr target-flags(aarch64-page) @.str.47, target-flags(aarch64-pageoff, aarch64-nc) @.str.47
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 9 8 7 6 5 4 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 7 8 9 10 
Picking from Bot:
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %213:gpr64 = MOVaddr target-flags(aarch64-page) @.str.47, target-flags(aarch64-pageoff, aarch64-nc) @.str.47
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 9 8 7 6 5 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 7 8 9 
BotQ.A RemLatency SU(1) 1c
  BotQ.A RemainingLatency 1 + 1c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) STRWui %181:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)
  Ready @1c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 9 8 7 6 5 4 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 7 8 9 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(9) %226:gpr64 = MOVaddr target-flags(aarch64-page) @.str.46, target-flags(aarch64-pageoff, aarch64-nc) @.str.46
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 8 7 6 5 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 7 8 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %247:gpr64 = MOVaddr target-flags(aarch64-page) @.str.45, target-flags(aarch64-pageoff, aarch64-nc) @.str.45
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 3 7 6 5 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 7 
  BotQ.A RemainingLatency 0 + 4c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %239:gpr64 = MOVaddr target-flags(aarch64-page) @.str.44, target-flags(aarch64-pageoff, aarch64-nc) @.str.44
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 3 4 6 5 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 
  BotQ.A RemainingLatency 0 + 5c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %238:gpr64 = MOVaddr target-flags(aarch64-page) @.str.43, target-flags(aarch64-pageoff, aarch64-nc) @.str.43
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 3 4 5 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 
  BotQ.A RemainingLatency 0 + 6c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %196:gpr64 = MOVaddr target-flags(aarch64-page) @.str.42, target-flags(aarch64-pageoff, aarch64-nc) @.str.42
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 3 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 
  BotQ.A RemainingLatency 0 + 7c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %191:gpr64 = MOVi64imm 4636737291354636288
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 3 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 
  BotQ.A RemainingLatency 0 + 8c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %189:gpr64sp = ADDXri %stack.10.trecs, 0, 0
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  BotQ.A RemainingLatency 0 + 9c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %187:gpr64sp = ADDXri %stack.13.t_names, 0, 0
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %181:gpr32 = MOVi32imm 1
  Ready @10c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.35 ***
SU(0):   %181:gpr32 = MOVi32imm 1
SU(2):   %187:gpr64sp = ADDXri %stack.13.t_names, 0, 0
SU(3):   %189:gpr64sp = ADDXri %stack.10.trecs, 0, 0
SU(4):   %191:gpr64 = MOVi64imm 4636737291354636288
SU(5):   %196:gpr64 = MOVaddr target-flags(aarch64-page) @.str.42, target-flags(aarch64-pageoff, aarch64-nc) @.str.42
SU(6):   %238:gpr64 = MOVaddr target-flags(aarch64-page) @.str.43, target-flags(aarch64-pageoff, aarch64-nc) @.str.43
SU(7):   %239:gpr64 = MOVaddr target-flags(aarch64-page) @.str.44, target-flags(aarch64-pageoff, aarch64-nc) @.str.44
SU(8):   %247:gpr64 = MOVaddr target-flags(aarch64-page) @.str.45, target-flags(aarch64-pageoff, aarch64-nc) @.str.45
SU(9):   %226:gpr64 = MOVaddr target-flags(aarch64-page) @.str.46, target-flags(aarch64-pageoff, aarch64-nc) @.str.46
SU(1):   STRWui %181:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)
SU(10):   %213:gpr64 = MOVaddr target-flags(aarch64-page) @.str.47, target-flags(aarch64-pageoff, aarch64-nc) @.str.47

********** MI Scheduling **********
main:%bb.35 if.end99
  From: %179:gpr64 = MOVaddr target-flags(aarch64-page) @.str.41, target-flags(aarch64-pageoff, aarch64-nc) @.str.41
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %179:gpr64 = MOVaddr target-flags(aarch64-page) @.str.41, target-flags(aarch64-pageoff, aarch64-nc) @.str.41
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%179
  Single Issue       : false;
SU(1):   $x0 = COPY %179:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%179
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %179:gpr64
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %179:gpr64 = MOVaddr target-flags(aarch64-page) @.str.41, target-flags(aarch64-pageoff, aarch64-nc) @.str.41
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.35 ***
SU(0):   %179:gpr64 = MOVaddr target-flags(aarch64-page) @.str.41, target-flags(aarch64-pageoff, aarch64-nc) @.str.41
SU(1):   $x0 = COPY %179:gpr64

********** MI Scheduling **********
main:%bb.36 for.cond101
  From: %182:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.44, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %182:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%182
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %182:gpr32common, 15, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%182
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.44, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %182:gpr32common, 15, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %182:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.36 ***
SU(0):   %182:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %182:gpr32common, 15, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.37 for.body104
  From: %198:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 1, %bb.39, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %198:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%198
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %198:gpr32common, 5, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%198
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.39, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %198:gpr32common, 5, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %198:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.37 ***
SU(0):   %198:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %198:gpr32common, 5, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.37 for.body104
  From: $x0 = COPY %196:gpr64
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %196:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $x1 = COPY %188:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %190:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $d1 = COPY %195:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $d1 = COPY %195:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(2) $d0 = COPY %190:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(1) $x1 = COPY %188:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %196:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.37 ***
SU(0):   $x0 = COPY %196:gpr64
SU(1):   $x1 = COPY %188:gpr64
SU(2):   $d0 = COPY %190:fpr64
SU(3):   $d1 = COPY %195:fpr64

********** MI Scheduling **********
main:%bb.37 for.body104
  From: %185:gpr64 = LDRSWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %185:gpr64 = LDRSWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(1): Data Latency=4 Reg=%185
  Single Issue       : false;
SU(1):   %186:gpr64 = UBFMXri %185:gpr64, 61, 60
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(0): Data Latency=4 Reg=%185
  Successors:
    SU(3): Data Latency=1 Reg=%186
    SU(2): Data Latency=1 Reg=%186
  Single Issue       : false;
SU(2):   %188:gpr64 = LDRXroX %187:gpr64sp, %186:gpr64, 0, 0 :: (load 8 from %ir.arrayidx106)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(1): Data Latency=1 Reg=%186
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %190:fpr64 = LDRDroX %189:gpr64sp, %186:gpr64, 0, 0 :: (load 8 from %ir.arrayidx110)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(1): Data Latency=1 Reg=%186
  Successors:
    SU(5): Data Latency=4 Reg=%190
  Single Issue       : false;
SU(4):   %192:fpr64 = COPY %191:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=0 Reg=%192
  Single Issue       : false;
SU(5):   %193:fpr64 = FMULDrr %190:fpr64, %192:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%190
    SU(4): Data Latency=0 Reg=%192
  Successors:
    SU(7): Data Latency=1 Reg=%193
  Single Issue       : false;
SU(6):   %194:fpr64 = LDRDui %291:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(7): Data Latency=4 Reg=%194
  Single Issue       : false;
SU(7):   %195:fpr64 = FDIVDrr %193:fpr64, %194:fpr64
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%193
    SU(6): Data Latency=4 Reg=%194
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) %195:fpr64 = FDIVDrr %193:fpr64, %194:fpr64
  Ready @0c
  BotQ.A TopLatency SU(7) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 6 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %193:fpr64 = FMULDrr %190:fpr64, %192:fpr64
  Ready @1c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 6 3 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %192:fpr64 = COPY %191:gpr64
  Ready @2c
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 3 6 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %188:gpr64 = LDRXroX %187:gpr64sp, %186:gpr64, 0, 0 :: (load 8 from %ir.arrayidx106)
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %194:fpr64 = LDRDui %291:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
  Ready @4c
  BotQ.A BotLatency SU(6) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %190:fpr64 = LDRDroX %189:gpr64sp, %186:gpr64, 0, 0 :: (load 8 from %ir.arrayidx110)
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %186:gpr64 = UBFMXri %185:gpr64, 61, 60
  Ready @6c
  BotQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %185:gpr64 = LDRSWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @10c
  BotQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 7
  Executed: 11c
  Critical: 7c, 7 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.37 ***
SU(0):   %185:gpr64 = LDRSWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   %186:gpr64 = UBFMXri %185:gpr64, 61, 60
SU(3):   %190:fpr64 = LDRDroX %189:gpr64sp, %186:gpr64, 0, 0 :: (load 8 from %ir.arrayidx110)
SU(6):   %194:fpr64 = LDRDui %291:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
SU(2):   %188:gpr64 = LDRXroX %187:gpr64sp, %186:gpr64, 0, 0 :: (load 8 from %ir.arrayidx106)
SU(4):   %192:fpr64 = COPY %191:gpr64
SU(5):   %193:fpr64 = FMULDrr %190:fpr64, %192:fpr64
SU(7):   %195:fpr64 = FDIVDrr %193:fpr64, %194:fpr64

********** MI Scheduling **********
main:%bb.38 if.then116
  From: $x0 = COPY %238:gpr64
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %238:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $x1 = COPY %247:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %243:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $d1 = COPY %246:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $d1 = COPY %246:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(2) $d0 = COPY %243:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(1) $x1 = COPY %247:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %238:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   $x0 = COPY %238:gpr64
SU(1):   $x1 = COPY %247:gpr64
SU(2):   $d0 = COPY %243:fpr64
SU(3):   $d1 = COPY %246:fpr64

********** MI Scheduling **********
main:%bb.38 if.then116
  From: %241:fpr64 = LDRDui %291:gpr64sp, 23 :: (dereferenceable load 8 from %ir.arrayidx125)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Cluster ld/st SU(5) - SU(1)
  Copy Succ SU(6)
SU(0):   %241:fpr64 = LDRDui %291:gpr64sp, 23 :: (dereferenceable load 8 from %ir.arrayidx125)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Data Latency=4 Reg=%241
  Single Issue       : false;
SU(1):   %242:fpr64 = LDRDui %291:gpr64sp, 36 :: (dereferenceable load 8 from %ir.t)
  # preds left       : 0
  # succs left       : 3
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Predecessors:
    SU(5): Ord  Latency=0 Cluster
  Successors:
    SU(2): Data Latency=4 Reg=%242
    SU(3): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   %243:fpr64 = FSUBDrr %241:fpr64, %242:fpr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(1): Data Latency=4 Reg=%242
    SU(0): Data Latency=4 Reg=%241
  Successors:
    SU(4): Data Latency=1 Reg=%243
    SU(3): Data Latency=1 Reg=%243
  Single Issue       : false;
SU(3):   STRDui %243:fpr64, %291:gpr64sp, 36 :: (store 8 into %ir.t)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%243
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   %244:fpr64 = FMULDrr %243:fpr64, %234:fpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=%243
  Successors:
    SU(6): Data Latency=1 Reg=%244
  Single Issue       : false;
SU(5):   %245:fpr64 = LDRDui %291:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(6): Data Latency=4 Reg=%245
    SU(1): Ord  Latency=0 Cluster
  Single Issue       : false;
SU(6):   %246:fpr64 = FDIVDrr %244:fpr64, %245:fpr64
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%244
    SU(5): Data Latency=4 Reg=%245
    SU(1): Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %246:fpr64 = FDIVDrr %244:fpr64, %245:fpr64
  Ready @0c
  BotQ.A TopLatency SU(6) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 3 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 
BotQ.A RemLatency SU(3) 5c
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %244:fpr64 = FMULDrr %243:fpr64, %234:fpr64
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) STRDui %243:fpr64, %291:gpr64sp, 36 :: (store 8 into %ir.t)
  Ready @2c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %243:fpr64 = FSUBDrr %241:fpr64, %242:fpr64
  Ready @3c
  BotQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 1 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %245:fpr64 = LDRDui %291:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
  Ready @4c
  BotQ.A BotLatency SU(5) 6c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 7c > CritPath 6
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %242:fpr64 = LDRDui %291:gpr64sp, 36 :: (dereferenceable load 8 from %ir.t)
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %241:fpr64 = LDRDui %291:gpr64sp, 23 :: (dereferenceable load 8 from %ir.arrayidx125)
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   %241:fpr64 = LDRDui %291:gpr64sp, 23 :: (dereferenceable load 8 from %ir.arrayidx125)
SU(1):   %242:fpr64 = LDRDui %291:gpr64sp, 36 :: (dereferenceable load 8 from %ir.t)
SU(5):   %245:fpr64 = LDRDui %291:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
SU(2):   %243:fpr64 = FSUBDrr %241:fpr64, %242:fpr64
SU(3):   STRDui %243:fpr64, %291:gpr64sp, 36 :: (store 8 into %ir.t)
SU(4):   %244:fpr64 = FMULDrr %243:fpr64, %234:fpr64
SU(6):   %246:fpr64 = FDIVDrr %244:fpr64, %245:fpr64

********** MI Scheduling **********
main:%bb.38 if.then116
  From: $x0 = COPY %238:gpr64
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %238:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $x1 = COPY %239:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %232:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $d1 = COPY %237:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $d1 = COPY %237:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(2) $d0 = COPY %232:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(1) $x1 = COPY %239:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %238:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   $x0 = COPY %238:gpr64
SU(1):   $x1 = COPY %239:gpr64
SU(2):   $d0 = COPY %232:fpr64
SU(3):   $d1 = COPY %237:fpr64

********** MI Scheduling **********
main:%bb.38 if.then116
  From: %228:fpr64 = LDRDui %291:gpr64sp, 20 :: (dereferenceable load 8 from %ir.arrayidx117, align 16)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 10
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Cluster ld/st SU(0) - SU(1)
  Copy Succ SU(2)
SU(0):   %228:fpr64 = LDRDui %291:gpr64sp, 20 :: (dereferenceable load 8 from %ir.arrayidx117, align 16)
  # preds left       : 0
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(2): Data Latency=4 Reg=%228
    SU(1): Ord  Latency=0 Cluster
  Single Issue       : false;
SU(1):   %229:fpr64 = LDRDui %291:gpr64sp, 21 :: (dereferenceable load 8 from %ir.arrayidx118)
  # preds left       : 0
  # succs left       : 1
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Predecessors:
    SU(0): Ord  Latency=0 Cluster
  Successors:
    SU(2): Data Latency=4 Reg=%229
  Single Issue       : false;
SU(2):   %230:fpr64 = FADDDrr %228:fpr64, %229:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=%229
    SU(0): Data Latency=4 Reg=%228
  Successors:
    SU(4): Data Latency=1 Reg=%230
  Single Issue       : false;
SU(3):   %231:fpr64 = LDRDui %291:gpr64sp, 22 :: (dereferenceable load 8 from %ir.arrayidx120, align 16)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(4): Data Latency=4 Reg=%231
  Single Issue       : false;
SU(4):   %232:fpr64 = FADDDrr %230:fpr64, %231:fpr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(2): Data Latency=1 Reg=%230
    SU(3): Data Latency=4 Reg=%231
  Successors:
    SU(7): Data Latency=1 Reg=%232
    SU(5): Data Latency=1 Reg=%232
  Single Issue       : false;
SU(5):   STRDui %232:fpr64, %291:gpr64sp, 36 :: (store 8 into %ir.t)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%232
  Single Issue       : false;
SU(6):   %234:fpr64 = COPY %191:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=0 Reg=%234
  Single Issue       : false;
SU(7):   %235:fpr64 = FMULDrr %232:fpr64, %234:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%232
    SU(6): Data Latency=0 Reg=%234
  Successors:
    SU(9): Data Latency=1 Reg=%235
  Single Issue       : false;
SU(8):   %236:fpr64 = LDRDui %291:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(9): Data Latency=4 Reg=%236
  Single Issue       : false;
SU(9):   %237:fpr64 = FDIVDrr %235:fpr64, %236:fpr64
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=%235
    SU(8): Data Latency=4 Reg=%236
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 8 
Picking from Bot:
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %237:fpr64 = FDIVDrr %235:fpr64, %236:fpr64
  Ready @0c
  BotQ.A TopLatency SU(9) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 8 
Queue BotQ.A: 5 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 8 
BotQ.A RemLatency SU(5) 6c
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %235:fpr64 = FMULDrr %232:fpr64, %234:fpr64
  Ready @1c
  BotQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 8 
Queue BotQ.A: 5 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 8 
BotQ.A RemLatency SU(5) 6c
  BotQ.A RemainingLatency 6 + 2c > CritPath 7
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) STRDui %232:fpr64, %291:gpr64sp, 36 :: (store 8 into %ir.t)
  Ready @2c
  BotQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 8 
Queue BotQ.A: 6 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 8 
BotQ.A RemLatency SU(4) 5c
  BotQ.A RemainingLatency 5 + 3c > CritPath 7
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(4) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) %232:fpr64 = FADDDrr %230:fpr64, %231:fpr64
  Ready @3c
  BotQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 6 2 8 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 8 
BotQ.A RemLatency SU(2) 4c
  BotQ.A RemainingLatency 4 + 4c > CritPath 7
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(2) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) %230:fpr64 = FADDDrr %228:fpr64, %229:fpr64
  Ready @4c
  BotQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 1 0 
Queue BotQ.A: 6 8 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 8 
  BotQ.A RemainingLatency 3 + 5c > CritPath 7
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %236:fpr64 = LDRDui %291:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
  Ready @5c
  BotQ.A BotLatency SU(8) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 1 0 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %234:fpr64 = COPY %191:gpr64
  Ready @6c
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 0 1 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %231:fpr64 = LDRDui %291:gpr64sp, 22 :: (dereferenceable load 8 from %ir.arrayidx120, align 16)
  Ready @7c
  BotQ.A BotLatency SU(3) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 8c > CritPath 7
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) WEAK                               
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(1) %229:fpr64 = LDRDui %291:gpr64sp, 21 :: (dereferenceable load 8 from %ir.arrayidx118)
  Ready @8c
  BotQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 8
  Executed: 9c
  Critical: 8c, 8 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %228:fpr64 = LDRDui %291:gpr64sp, 20 :: (dereferenceable load 8 from %ir.arrayidx117, align 16)
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 9
  Executed: 10c
  Critical: 9c, 9 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   %228:fpr64 = LDRDui %291:gpr64sp, 20 :: (dereferenceable load 8 from %ir.arrayidx117, align 16)
SU(1):   %229:fpr64 = LDRDui %291:gpr64sp, 21 :: (dereferenceable load 8 from %ir.arrayidx118)
SU(3):   %231:fpr64 = LDRDui %291:gpr64sp, 22 :: (dereferenceable load 8 from %ir.arrayidx120, align 16)
SU(6):   %234:fpr64 = COPY %191:gpr64
SU(8):   %236:fpr64 = LDRDui %291:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
SU(2):   %230:fpr64 = FADDDrr %228:fpr64, %229:fpr64
SU(4):   %232:fpr64 = FADDDrr %230:fpr64, %231:fpr64
SU(5):   STRDui %232:fpr64, %291:gpr64sp, 36 :: (store 8 into %ir.t)
SU(7):   %235:fpr64 = FMULDrr %232:fpr64, %234:fpr64
SU(9):   %237:fpr64 = FDIVDrr %235:fpr64, %236:fpr64

********** MI Scheduling **********
main:%bb.39 if.else130
  From: %200:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 1, %bb.41, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %200:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%200
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %200:gpr32common, 8, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%200
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.41, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %200:gpr32common, 8, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %200:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.39 ***
SU(0):   %200:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %200:gpr32common, 8, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.40 if.then133
  From: $x0 = COPY %238:gpr64
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %238:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $x1 = COPY %226:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %219:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $d1 = COPY %224:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $d1 = COPY %224:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(2) $d0 = COPY %219:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(1) $x1 = COPY %226:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %238:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.40 ***
SU(0):   $x0 = COPY %238:gpr64
SU(1):   $x1 = COPY %226:gpr64
SU(2):   $d0 = COPY %219:fpr64
SU(3):   $d1 = COPY %224:fpr64

********** MI Scheduling **********
main:%bb.40 if.then133
  From: %215:fpr64 = LDRDui %291:gpr64sp, 26 :: (dereferenceable load 8 from %ir.arrayidx134, align 16)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 10
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Cluster ld/st SU(0) - SU(1)
  Copy Succ SU(2)
SU(0):   %215:fpr64 = LDRDui %291:gpr64sp, 26 :: (dereferenceable load 8 from %ir.arrayidx134, align 16)
  # preds left       : 0
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(2): Data Latency=4 Reg=%215
    SU(1): Ord  Latency=0 Cluster
  Single Issue       : false;
SU(1):   %216:fpr64 = LDRDui %291:gpr64sp, 27 :: (dereferenceable load 8 from %ir.arrayidx135)
  # preds left       : 0
  # succs left       : 1
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Predecessors:
    SU(0): Ord  Latency=0 Cluster
  Successors:
    SU(2): Data Latency=4 Reg=%216
  Single Issue       : false;
SU(2):   %217:fpr64 = FSUBDrr %215:fpr64, %216:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=%216
    SU(0): Data Latency=4 Reg=%215
  Successors:
    SU(4): Data Latency=1 Reg=%217
  Single Issue       : false;
SU(3):   %218:fpr64 = LDRDui %291:gpr64sp, 28 :: (dereferenceable load 8 from %ir.arrayidx137, align 16)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(4): Data Latency=4 Reg=%218
  Single Issue       : false;
SU(4):   %219:fpr64 = FSUBDrr %217:fpr64, %218:fpr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(2): Data Latency=1 Reg=%217
    SU(3): Data Latency=4 Reg=%218
  Successors:
    SU(7): Data Latency=1 Reg=%219
    SU(5): Data Latency=1 Reg=%219
  Single Issue       : false;
SU(5):   STRDui %219:fpr64, %291:gpr64sp, 36 :: (store 8 into %ir.t)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%219
  Single Issue       : false;
SU(6):   %221:fpr64 = COPY %191:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=0 Reg=%221
  Single Issue       : false;
SU(7):   %222:fpr64 = FMULDrr %219:fpr64, %221:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%219
    SU(6): Data Latency=0 Reg=%221
  Successors:
    SU(9): Data Latency=1 Reg=%222
  Single Issue       : false;
SU(8):   %223:fpr64 = LDRDui %291:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(9): Data Latency=4 Reg=%223
  Single Issue       : false;
SU(9):   %224:fpr64 = FDIVDrr %222:fpr64, %223:fpr64
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=%222
    SU(8): Data Latency=4 Reg=%223
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 8 
Picking from Bot:
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %224:fpr64 = FDIVDrr %222:fpr64, %223:fpr64
  Ready @0c
  BotQ.A TopLatency SU(9) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 8 
Queue BotQ.A: 5 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 8 
BotQ.A RemLatency SU(5) 6c
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %222:fpr64 = FMULDrr %219:fpr64, %221:fpr64
  Ready @1c
  BotQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 8 
Queue BotQ.A: 5 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 8 
BotQ.A RemLatency SU(5) 6c
  BotQ.A RemainingLatency 6 + 2c > CritPath 7
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) STRDui %219:fpr64, %291:gpr64sp, 36 :: (store 8 into %ir.t)
  Ready @2c
  BotQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 8 
Queue BotQ.A: 6 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 8 
BotQ.A RemLatency SU(4) 5c
  BotQ.A RemainingLatency 5 + 3c > CritPath 7
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(4) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) %219:fpr64 = FSUBDrr %217:fpr64, %218:fpr64
  Ready @3c
  BotQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 6 2 8 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 8 
BotQ.A RemLatency SU(2) 4c
  BotQ.A RemainingLatency 4 + 4c > CritPath 7
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(2) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) %217:fpr64 = FSUBDrr %215:fpr64, %216:fpr64
  Ready @4c
  BotQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 1 0 
Queue BotQ.A: 6 8 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 8 
  BotQ.A RemainingLatency 3 + 5c > CritPath 7
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %223:fpr64 = LDRDui %291:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
  Ready @5c
  BotQ.A BotLatency SU(8) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 1 0 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %221:fpr64 = COPY %191:gpr64
  Ready @6c
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 0 1 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %218:fpr64 = LDRDui %291:gpr64sp, 28 :: (dereferenceable load 8 from %ir.arrayidx137, align 16)
  Ready @7c
  BotQ.A BotLatency SU(3) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 8c > CritPath 7
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) WEAK                               
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(1) %216:fpr64 = LDRDui %291:gpr64sp, 27 :: (dereferenceable load 8 from %ir.arrayidx135)
  Ready @8c
  BotQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 8
  Executed: 9c
  Critical: 8c, 8 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %215:fpr64 = LDRDui %291:gpr64sp, 26 :: (dereferenceable load 8 from %ir.arrayidx134, align 16)
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 9
  Executed: 10c
  Critical: 9c, 9 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.40 ***
SU(0):   %215:fpr64 = LDRDui %291:gpr64sp, 26 :: (dereferenceable load 8 from %ir.arrayidx134, align 16)
SU(1):   %216:fpr64 = LDRDui %291:gpr64sp, 27 :: (dereferenceable load 8 from %ir.arrayidx135)
SU(3):   %218:fpr64 = LDRDui %291:gpr64sp, 28 :: (dereferenceable load 8 from %ir.arrayidx137, align 16)
SU(6):   %221:fpr64 = COPY %191:gpr64
SU(8):   %223:fpr64 = LDRDui %291:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
SU(2):   %217:fpr64 = FSUBDrr %215:fpr64, %216:fpr64
SU(4):   %219:fpr64 = FSUBDrr %217:fpr64, %218:fpr64
SU(5):   STRDui %219:fpr64, %291:gpr64sp, 36 :: (store 8 into %ir.t)
SU(7):   %222:fpr64 = FMULDrr %219:fpr64, %221:fpr64
SU(9):   %224:fpr64 = FDIVDrr %222:fpr64, %223:fpr64

********** MI Scheduling **********
main:%bb.41 if.else142
  From: %202:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 1, %bb.43, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %202:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%202
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %202:gpr32common, 10, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%202
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.43, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %202:gpr32common, 10, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %202:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.41 ***
SU(0):   %202:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %202:gpr32common, 10, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.42 if.then145
  From: $x0 = COPY %238:gpr64
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %238:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $x1 = COPY %213:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %206:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $d1 = COPY %211:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $d1 = COPY %211:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(2) $d0 = COPY %206:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(1) $x1 = COPY %213:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %238:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.42 ***
SU(0):   $x0 = COPY %238:gpr64
SU(1):   $x1 = COPY %213:gpr64
SU(2):   $d0 = COPY %206:fpr64
SU(3):   $d1 = COPY %211:fpr64

********** MI Scheduling **********
main:%bb.42 if.then145
  From: %204:fpr64 = LDRDui %291:gpr64sp, 27 :: (dereferenceable load 8 from %ir.arrayidx146)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Cluster ld/st SU(0) - SU(1)
  Copy Succ SU(2)
SU(0):   %204:fpr64 = LDRDui %291:gpr64sp, 27 :: (dereferenceable load 8 from %ir.arrayidx146)
  # preds left       : 0
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Data Latency=4 Reg=%204
    SU(1): Ord  Latency=0 Cluster
  Single Issue       : false;
SU(1):   %205:fpr64 = LDRDui %291:gpr64sp, 28 :: (dereferenceable load 8 from %ir.arrayidx147, align 16)
  # preds left       : 0
  # succs left       : 1
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Predecessors:
    SU(0): Ord  Latency=0 Cluster
  Successors:
    SU(2): Data Latency=4 Reg=%205
  Single Issue       : false;
SU(2):   %206:fpr64 = FADDDrr %204:fpr64, %205:fpr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(1): Data Latency=4 Reg=%205
    SU(0): Data Latency=4 Reg=%204
  Successors:
    SU(5): Data Latency=1 Reg=%206
    SU(3): Data Latency=1 Reg=%206
  Single Issue       : false;
SU(3):   STRDui %206:fpr64, %291:gpr64sp, 36 :: (store 8 into %ir.t)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%206
  Single Issue       : false;
SU(4):   %208:fpr64 = COPY %191:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=0 Reg=%208
  Single Issue       : false;
SU(5):   %209:fpr64 = FMULDrr %206:fpr64, %208:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=%206
    SU(4): Data Latency=0 Reg=%208
  Successors:
    SU(7): Data Latency=1 Reg=%209
  Single Issue       : false;
SU(6):   %210:fpr64 = LDRDui %291:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(7): Data Latency=4 Reg=%210
  Single Issue       : false;
SU(7):   %211:fpr64 = FDIVDrr %209:fpr64, %210:fpr64
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%209
    SU(6): Data Latency=4 Reg=%210
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 6 
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %211:fpr64 = FDIVDrr %209:fpr64, %210:fpr64
  Ready @0c
  BotQ.A TopLatency SU(7) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 3 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 6 
BotQ.A RemLatency SU(3) 5c
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %209:fpr64 = FMULDrr %206:fpr64, %208:fpr64
  Ready @1c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 3 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 6 
BotQ.A RemLatency SU(3) 5c
  BotQ.A RemainingLatency 5 + 2c > CritPath 6
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(3) STRDui %206:fpr64, %291:gpr64sp, 36 :: (store 8 into %ir.t)
  Ready @2c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 4 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 6 
BotQ.A RemLatency SU(2) 4c
  BotQ.A RemainingLatency 4 + 3c > CritPath 6
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(2) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) %206:fpr64 = FADDDrr %204:fpr64, %205:fpr64
  Ready @3c
  BotQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 1 
Queue BotQ.A: 4 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 6 
  BotQ.A RemainingLatency 3 + 4c > CritPath 6
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %210:fpr64 = LDRDui %291:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
  Ready @4c
  BotQ.A BotLatency SU(6) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 1 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %208:fpr64 = COPY %191:gpr64
  Ready @5c
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 7c > CritPath 6
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) WEAK                               
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(1) %205:fpr64 = LDRDui %291:gpr64sp, 28 :: (dereferenceable load 8 from %ir.arrayidx147, align 16)
  Ready @7c
  BotQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %204:fpr64 = LDRDui %291:gpr64sp, 27 :: (dereferenceable load 8 from %ir.arrayidx146)
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.42 ***
SU(0):   %204:fpr64 = LDRDui %291:gpr64sp, 27 :: (dereferenceable load 8 from %ir.arrayidx146)
SU(1):   %205:fpr64 = LDRDui %291:gpr64sp, 28 :: (dereferenceable load 8 from %ir.arrayidx147, align 16)
SU(4):   %208:fpr64 = COPY %191:gpr64
SU(6):   %210:fpr64 = LDRDui %291:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
SU(2):   %206:fpr64 = FADDDrr %204:fpr64, %205:fpr64
SU(3):   STRDui %206:fpr64, %291:gpr64sp, 36 :: (store 8 into %ir.t)
SU(5):   %209:fpr64 = FMULDrr %206:fpr64, %208:fpr64
SU(7):   %211:fpr64 = FDIVDrr %209:fpr64, %210:fpr64

********** MI Scheduling **********
main:%bb.43 for.inc155
  From: %249:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: B %bb.36
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %249:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%249
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %250:gpr32common = nsw ADDWri %249:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%249
  Successors:
    SU(2): Data Latency=1 Reg=%250
  Single Issue       : false;
SU(2):   STRWui %250:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%250
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.36
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %250:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %250:gpr32common = nsw ADDWri %249:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %249:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.43 ***
SU(0):   %249:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   %250:gpr32common = nsw ADDWri %249:gpr32common, 1, 0
SU(2):   STRWui %250:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)

********** MI Scheduling **********
main:%bb.45 return
  From: %290:gpr32 = LDRWui %stack.0.retval, 0 :: (dereferenceable load 4 from %ir.retval)
    To: RET_ReallyLR implicit $w0
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %290:gpr32 = LDRWui %stack.0.retval, 0 :: (dereferenceable load 4 from %ir.retval)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=4 Reg=%290
  Single Issue       : false;
SU(1):   $w0 = COPY %290:gpr32
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%290
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   RET_ReallyLR implicit $w0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $w0 = COPY %290:gpr32
  Ready @0c
  BotQ.A TopLatency SU(1) 4c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %290:gpr32 = LDRWui %stack.0.retval, 0 :: (dereferenceable load 4 from %ir.retval)
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 1
  Executed: 5c
  Critical: 1c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   %290:gpr32 = LDRWui %stack.0.retval, 0 :: (dereferenceable load 4 from %ir.retval)
SU(1):   $w0 = COPY %290:gpr32

********** INTERVALS **********
WSP [128r,128d:113)[208r,208d:112)[224r,224d:111)[880r,880d:110)[896r,896d:109)[912r,912d:108)[1008r,1008d:107)[1056r,1056d:106)[1072r,1072d:105)[1088r,1088d:104)[1168r,1168d:103)[1184r,1184d:102)[1312r,1312d:98)[1360r,1360d:97)[1376r,1376d:96)[1408r,1408d:95)[1504r,1504d:94)[1520r,1520d:93)[1600r,1600d:92)[1632r,1632d:91)[1648r,1648d:90)[1760r,1760d:89)[1856r,1856d:88)[1872r,1872d:87)[1952r,1952d:86)[1984r,1984d:85)[2000r,2000d:84)[2112r,2112d:83)[2256r,2256d:82)[2272r,2272d:81)[2336r,2336d:80)[2368r,2368d:79)[2384r,2384d:78)[2432r,2432d:101)[2480r,2480d:100)[2496r,2496d:99)[2704r,2704d:77)[2800r,2800d:76)[2816r,2816d:75)[2864r,2864d:74)[2944r,2944d:73)[2960r,2960d:72)[2976r,2976d:71)[3024r,3024d:70)[3040r,3040d:69)[3360r,3360d:5)[3456r,3456d:4)[3472r,3472d:3)[3488r,3488d:2)[3536r,3536d:1)[3552r,3552d:0)[3832r,3832d:68)[3840r,3840d:67)[3856r,3856d:66)[4016r,4016d:8)[4048r,4048d:7)[4064r,4064d:6)[4160r,4160d:65)[4176r,4176d:64)[4192r,4192d:63)[4208r,4208d:62)[4224r,4224d:61)[4240r,4240d:60)[4256r,4256d:59)[4272r,4272d:58)[4288r,4288d:57)[4304r,4304d:56)[4320r,4320d:55)[4336r,4336d:54)[4496r,4496d:11)[4528r,4528d:10)[4544r,4544d:9)[4640r,4640d:53)[4688r,4688d:52)[4704r,4704d:51)[5184r,5184d:17)[5232r,5232d:16)[5248r,5248d:15)[5280r,5280d:14)[5296r,5296d:13)[5312r,5312d:12)[5408r,5408d:50)[5456r,5456d:49)[5472r,5472d:48)[5488r,5488d:47)[5520r,5520d:46)[5536r,5536d:45)[5600r,5600d:44)[5696r,5696d:43)[5712r,5712d:42)[6712r,6712d:41)[7184r,7184d:40)[7192r,7192d:39)[7424r,7424d:20)[7456r,7456d:19)[7472r,7472d:18)[7744r,7744d:38)[7792r,7792d:37)[7808r,7808d:36)[8232r,8232d:35)[8304r,8304d:34)[8320r,8320d:33)[8584r,8584d:26)[8656r,8656d:25)[8672r,8672d:24)[8808r,8808d:23)[8880r,8880d:22)[8896r,8896d:21)[9192r,9192d:29)[9264r,9264d:28)[9280r,9280d:27)[9544r,9544d:32)[9616r,9616d:31)[9632r,9632d:30)  0@3552r 1@3536r 2@3488r 3@3472r 4@3456r 5@3360r 6@4064r 7@4048r 8@4016r 9@4544r 10@4528r 11@4496r 12@5312r 13@5296r 14@5280r 15@5248r 16@5232r 17@5184r 18@7472r 19@7456r 20@7424r 21@8896r 22@8880r 23@8808r 24@8672r 25@8656r 26@8584r 27@9280r 28@9264r 29@9192r 30@9632r 31@9616r 32@9544r 33@8320r 34@8304r 35@8232r 36@7808r 37@7792r 38@7744r 39@7192r 40@7184r 41@6712r 42@5712r 43@5696r 44@5600r 45@5536r 46@5520r 47@5488r 48@5472r 49@5456r 50@5408r 51@4704r 52@4688r 53@4640r 54@4336r 55@4320r 56@4304r 57@4288r 58@4272r 59@4256r 60@4240r 61@4224r 62@4208r 63@4192r 64@4176r 65@4160r 66@3856r 67@3840r 68@3832r 69@3040r 70@3024r 71@2976r 72@2960r 73@2944r 74@2864r 75@2816r 76@2800r 77@2704r 78@2384r 79@2368r 80@2336r 81@2272r 82@2256r 83@2112r 84@2000r 85@1984r 86@1952r 87@1872r 88@1856r 89@1760r 90@1648r 91@1632r 92@1600r 93@1520r 94@1504r 95@1408r 96@1376r 97@1360r 98@1312r 99@2496r 100@2480r 101@2432r 102@1184r 103@1168r 104@1088r 105@1072r 106@1056r 107@1008r 108@912r 109@896r 110@880r 111@224r 112@208r 113@128r
B0 [2928r,2944r:8)[5520r,5588r:7)[7104r,7184r:6)[7456r,7488r:0)[8272r,8304r:5)[8624r,8656r:2)[8848r,8880r:1)[9232r,9264r:3)[9584r,9616r:4)  0@7456r 1@8848r 2@8624r 3@9232r 4@9584r 5@8272r 6@7104r 7@5520r 8@2928r
W0 [0B,12r:0)[176r,208r:57)[208r,240r:56)[888r,896r:55)[896r,896d:30)[1040r,1056r:54)[1056r,1056d:29)[1136r,1168r:53)[1168r,1200r:52)[1344r,1360r:50)[1360r,1360d:27)[1492r,1504r:49)[1504r,1536r:26)[1616r,1632r:48)[1632r,1664r:25)[1808r,1856r:47)[1856r,1888r:24)[1968r,1984r:46)[1984r,2016r:23)[2176r,2256r:45)[2256r,2324r:22)[2352r,2368r:44)[2368r,2368d:21)[2464r,2480r:51)[2480r,2480d:28)[2736r,2800r:43)[2800r,2800d:20)[2896r,2944r:42)[2944r,2944d:19)[3008r,3024r:41)[3024r,3024d:18)[3392r,3456r:32)[3456r,3456d:3)[3520r,3536r:31)[3536r,3536d:2)[4032r,4048r:4)[4512r,4528r:5)[4672r,4688r:17)[5200r,5232r:33)[5232r,5232d:6)[5440r,5456r:16)[5504r,5520r:15)[5688r,5696r:14)[7124r,7184r:40)[7440r,7456r:7)[7776r,7792r:39)[7792r,7792d:13)[8240r,8304r:38)[8304r,8304d:12)[8592r,8656r:35)[8656r,8656d:9)[8816r,8880r:34)[8880r,8880d:8)[9200r,9264r:36)[9264r,9264d:10)[9552r,9616r:37)[9616r,9616d:11)[9808r,9824r:1)  0@0B-phi 1@9808r 2@3536r 3@3456r 4@4032r 5@4512r 6@5232r 7@7440r 8@8880r 9@8656r 10@9264r 11@9616r 12@8304r 13@7792r 14@5688r 15@5504r 16@5440r 17@4672r 18@3024r 19@2944r 20@2800r 21@2368r 22@2256r 23@1984r 24@1856r 25@1632r 26@1504r 27@1360r 28@2480r 29@1056r 30@896r 31@3520r 32@3392r 33@5200r 34@8816r 35@8592r 36@9200r 37@9552r 38@8240r 39@7776r 40@7124r 41@3008r 42@2896r 43@2736r 44@2352r 45@2176r 46@1968r 47@1808r 48@1616r 49@1492r 50@1344r 51@2464r 52@1168r 53@1136r 54@1040r 55@888r 56@208r 57@176r
W1 [0B,8r:0)[192r,208r:16)[1152r,1168r:15)[1496r,1504r:14)[1824r,1856r:13)[2192r,2256r:12)[2752r,2800r:5)[2912r,2944r:4)[3408r,3456r:1)[5216r,5232r:2)[5664r,5696r:11)[7128r,7184r:3)[8256r,8304r:10)[8608r,8656r:7)[8832r,8880r:6)[9216r,9264r:8)[9568r,9616r:9)  0@0B-phi 1@3408r 2@5216r 3@7128r 4@2912r 5@2752r 6@8832r 7@8608r 8@9216r 9@9568r 10@8256r 11@5664r 12@2192r 13@1824r 14@1496r 15@1152r 16@192r
W2 [1488r,1504r:3)[1840r,1856r:6)[2208r,2256r:5)[2768r,2800r:2)[3424r,3456r:0)[5680r,5696r:4)[7136r,7184r:1)  0@3424r 1@7136r 2@2768r 3@1488r 4@5680r 5@2208r 6@1840r
W3 [2224r,2256r:3)[2784r,2800r:2)[3440r,3456r:0)[7144r,7184r:1)  0@3440r 1@7144r 2@2784r 3@2224r
W4 [2240r,2256r:1)[7152r,7184r:0)  0@7152r 1@2240r
W5 [7160r,7184r:0)  0@7160r
%1 [12r,96r:0)  0@12r weight:0.000000e+00
%2 [8r,112r:0)  0@8r weight:0.000000e+00
%4 [144r,176r:0)  0@144r weight:0.000000e+00
%5 [160r,192r:0)  0@160r weight:0.000000e+00
%6 [240r,288r:0)  0@240r weight:0.000000e+00
%10 [336r,600r:0)  0@336r weight:0.000000e+00
%11 [368r,632r:0)  0@368r weight:0.000000e+00
%12 [400r,628r:0)  0@400r weight:0.000000e+00
%13 [432r,664r:0)  0@432r weight:0.000000e+00
%14 [464r,660r:0)  0@464r weight:0.000000e+00
%15 [496r,696r:0)  0@496r weight:0.000000e+00
%16 [528r,692r:0)  0@528r weight:0.000000e+00
%17 [560r,728r:0)  0@560r weight:0.000000e+00
%18 [592r,724r:0)  0@592r weight:0.000000e+00
%19 [624r,760r:0)  0@624r weight:0.000000e+00
%20 [656r,756r:0)  0@656r weight:0.000000e+00
%21 [688r,788r:0)  0@688r weight:0.000000e+00
%22 [720r,792r:0)  0@720r weight:0.000000e+00
%23 [752r,852r:0)  0@752r weight:0.000000e+00
%24 [784r,856r:0)  0@784r weight:0.000000e+00
%25 [864r,872r:0)  0@864r weight:0.000000e+00
%26 [848r,888r:0)  0@848r weight:0.000000e+00
%28 [1024r,1040r:0)  0@1024r weight:0.000000e+00
%30 [1104r,1136r:0)  0@1104r weight:0.000000e+00
%31 [1120r,1152r:0)  0@1120r weight:0.000000e+00
%32 [1200r,1264r:0)  0@1200r weight:0.000000e+00
%33 [2448r,2464r:0)  0@2448r weight:0.000000e+00
%35 [2512r,2616r:0)  0@2512r weight:0.000000e+00
%37 [2544r,2624r:0)  0@2544r weight:0.000000e+00
%39 [2576r,2632r:0)  0@2576r weight:0.000000e+00
%40 [2608r,2640r:0)  0@2608r weight:0.000000e+00
%41 [1328r,1344r:0)  0@1328r weight:0.000000e+00
%43 [1392r,1492r:0)  0@1392r weight:0.000000e+00
%44 [1424r,1496r:0)  0@1424r weight:0.000000e+00
%46 [1536r,1552r:0)  0@1536r weight:0.000000e+00
%47 [1584r,1616r:0)  0@1584r weight:0.000000e+00
%48 [1664r,1680r:0)  0@1664r weight:0.000000e+00
%50 [1744r,1808r:0)  0@1744r weight:0.000000e+00
%51 [1776r,1824r:0)  0@1776r weight:0.000000e+00
%52 [1792r,1840r:0)  0@1792r weight:0.000000e+00
%53 [1888r,1904r:0)  0@1888r weight:0.000000e+00
%54 [1936r,1968r:0)  0@1936r weight:0.000000e+00
%55 [2016r,2032r:0)  0@2016r weight:0.000000e+00
%57 [2096r,2176r:0)  0@2096r weight:0.000000e+00
%59 [2128r,2224r:0)  0@2128r weight:0.000000e+00
%60 [2144r,2240r:0)  0@2144r weight:0.000000e+00
%61 [2160r,2192r:0)  0@2160r weight:0.000000e+00
%62 [2324r,2328r:0)  0@2324r weight:0.000000e+00
%63 [2320r,2352r:0)  0@2320r weight:0.000000e+00
%68 [2656r,2752r:0)  0@2656r weight:0.000000e+00
%69 [2672r,2768r:0)  0@2672r weight:0.000000e+00
%70 [2688r,2784r:0)  0@2688r weight:0.000000e+00
%71 [2720r,2736r:0)  0@2720r weight:0.000000e+00
%73 [2832r,2912r:0)  0@2832r weight:0.000000e+00
%75 [2848r,2928r:0)  0@2848r weight:0.000000e+00
%76 [2880r,2896r:0)  0@2880r weight:0.000000e+00
%78 [2992r,3008r:0)  0@2992r weight:0.000000e+00
%80 [3056r,3408r:0)[3616B,3632r:0)  0@3056r weight:0.000000e+00
%81 [3136r,3152r:0)  0@3136r weight:0.000000e+00
%82 [3216r,3232r:0)  0@3216r weight:0.000000e+00
%86 [3632r,3796r:0)  0@3632r weight:0.000000e+00
%87 [3648r,3796r:0)  0@3648r weight:0.000000e+00
%88 [3680r,3760r:0)  0@3680r weight:0.000000e+00
%89 [3736r,3800r:0)  0@3736r weight:0.000000e+00
%90 [3800r,3816r:0)  0@3800r weight:0.000000e+00
%91 [3728r,3816r:0)  0@3728r weight:0.000000e+00
%92 [3760r,3808r:0)  0@3760r weight:0.000000e+00
%93 [3808r,3824r:0)  0@3808r weight:0.000000e+00
%94 [3792r,3824r:0)  0@3792r weight:0.000000e+00
%95 [3872r,3888r:0)  0@3872r weight:0.000000e+00
%96 [3920r,3936r:0)  0@3920r weight:0.000000e+00
%98 [4352r,4368r:0)  0@4352r weight:0.000000e+00
%99 [4400r,4416r:0)  0@4400r weight:0.000000e+00
%101 [4680r,4720r:0)  0@4680r weight:0.000000e+00
%102 [4816r,4848r:0)  0@4816r weight:0.000000e+00
%103 [4832r,4848r:0)  0@4832r weight:0.000000e+00
%106 [5588r,5592r:0)  0@5588r weight:0.000000e+00
%107 [5584r,5688r:0)  0@5584r weight:0.000000e+00
%110 [5728r,5744r:0)  0@5728r weight:0.000000e+00
%113 [5808r,6392r:0)  0@5808r weight:0.000000e+00
%114 [5824r,6392r:0)  0@5824r weight:0.000000e+00
%115 [6388r,6416r:0)  0@6388r weight:0.000000e+00
%116 [5856r,6424r:0)  0@5856r weight:0.000000e+00
%117 [6416r,6568r:0)  0@6416r weight:0.000000e+00
%118 [6392r,6424r:0)  0@6392r weight:0.000000e+00
%119 [6424r,6456r:0)  0@6424r weight:0.000000e+00
%120 [6456r,6464r:0)  0@6456r weight:0.000000e+00
%121 [6376r,6464r:0)  0@6376r weight:0.000000e+00
%122 [6464r,6592r:0)  0@6464r weight:0.000000e+00
%123 [6472r,6480r:0)  0@6472r weight:0.000000e+00
%124 [6016r,6032r:0)  0@6016r weight:0.000000e+00
%125 [6032r,6480r:0)  0@6032r weight:0.000000e+00
%126 [6480r,6512r:0)  0@6480r weight:0.000000e+00
%127 [6488r,6496r:0)  0@6488r weight:0.000000e+00
%128 [6080r,6096r:0)  0@6080r weight:0.000000e+00
%129 [6096r,6496r:0)  0@6096r weight:0.000000e+00
%130 [6496r,6512r:0)  0@6496r weight:0.000000e+00
%131 [6512r,6536r:0)  0@6512r weight:0.000000e+00
%132 [6400r,6520r:0)  0@6400r weight:0.000000e+00
%133 [6520r,6528r:0)  0@6520r weight:0.000000e+00
%134 [6528r,6536r:0)  0@6528r weight:0.000000e+00
%135 [6536r,6544r:0)  0@6536r weight:0.000000e+00
%136 [6432r,6504r:0)  0@6432r weight:0.000000e+00
%137 [6504r,6544r:0)  0@6504r weight:0.000000e+00
%138 [6544r,6576r:0)  0@6544r weight:0.000000e+00
%140 [6440r,6552r:0)  0@6440r weight:0.000000e+00
%142 [6552r,6560r:0)  0@6552r weight:0.000000e+00
%144 [6560r,6576r:0)  0@6560r weight:0.000000e+00
%145 [6576r,6584r:0)  0@6576r weight:0.000000e+00
%146 [6408r,6448r:0)  0@6408r weight:0.000000e+00
%147 [6368r,6384r:0)  0@6368r weight:0.000000e+00
%148 [6384r,6448r:0)  0@6384r weight:0.000000e+00
%149 [6448r,6584r:0)  0@6448r weight:0.000000e+00
%150 [6584r,6600r:0)  0@6584r weight:0.000000e+00
%151 [6648r,7128r:0)  0@6648r weight:0.000000e+00
%153 [6656r,7136r:0)  0@6656r weight:0.000000e+00
%154 [6664r,7144r:0)  0@6664r weight:0.000000e+00
%155 [6672r,7152r:0)  0@6672r weight:0.000000e+00
%156 [6680r,7160r:0)  0@6680r weight:0.000000e+00
%157 [6688r,7104r:0)  0@6688r weight:0.000000e+00
%158 [6696r,7120r:0)  0@6696r weight:0.000000e+00
%159 [6704r,7176r:0)  0@6704r weight:0.000000e+00
%160 [6720r,6888r:0)  0@6720r weight:0.000000e+00
%162 [6744r,6920r:0)  0@6744r weight:0.000000e+00
%163 [6760r,6916r:0)  0@6760r weight:0.000000e+00
%164 [6784r,6952r:0)  0@6784r weight:0.000000e+00
%165 [6816r,6948r:0)  0@6816r weight:0.000000e+00
%166 [6848r,6984r:0)  0@6848r weight:0.000000e+00
%167 [6880r,6980r:0)  0@6880r weight:0.000000e+00
%168 [6912r,7000r:0)  0@6912r weight:0.000000e+00
%169 [6944r,6996r:0)  0@6944r weight:0.000000e+00
%170 [6976r,7124r:0)  0@6976r weight:0.000000e+00
%171 [6992r,7168r:0)  0@6992r weight:0.000000e+00
%173 [7200r,7216r:0)  0@7200r weight:0.000000e+00
%174 [7264r,7280r:0)  0@7264r weight:0.000000e+00
%175 [7328r,7344r:0)  0@7328r weight:0.000000e+00
%177 [7616r,7632r:0)  0@7616r weight:0.000000e+00
%178 [7696r,7712r:0)  0@7696r weight:0.000000e+00
%179 [7760r,7776r:0)  0@7760r weight:0.000000e+00
%181 [7824r,7976r:0)  0@7824r weight:0.000000e+00
%182 [8016r,8032r:0)  0@8016r weight:0.000000e+00
%185 [8096r,8112r:0)  0@8096r weight:0.000000e+00
%186 [8112r,8200r:0)  0@8112r weight:0.000000e+00
%187 [7856r,9728B:0)  0@7856r weight:0.000000e+00
%188 [8200r,8256r:0)  0@8200r weight:0.000000e+00
%189 [7872r,9728B:0)  0@7872r weight:0.000000e+00
%190 [8144r,8272r:0)  0@8144r weight:0.000000e+00
%191 [7888r,9728B:0)  0@7888r weight:0.000000e+00
%192 [8208r,8216r:0)  0@8208r weight:0.000000e+00
%193 [8216r,8224r:0)  0@8216r weight:0.000000e+00
%194 [8192r,8224r:0)  0@8192r weight:0.000000e+00
%195 [8224r,8288r:0)  0@8224r weight:0.000000e+00
%196 [7904r,9728B:0)  0@7904r weight:0.000000e+00
%198 [8336r,8352r:0)  0@8336r weight:0.000000e+00
%200 [8944r,8960r:0)  0@8944r weight:0.000000e+00
%202 [9328r,9344r:0)  0@9328r weight:0.000000e+00
%204 [9408r,9512r:0)  0@9408r weight:0.000000e+00
%205 [9424r,9512r:0)  0@9424r weight:0.000000e+00
%206 [9512r,9584r:0)  0@9512r weight:0.000000e+00
%208 [9472r,9528r:0)  0@9472r weight:0.000000e+00
%209 [9528r,9536r:0)  0@9528r weight:0.000000e+00
%210 [9504r,9536r:0)  0@9504r weight:0.000000e+00
%211 [9536r,9600r:0)  0@9536r weight:0.000000e+00
%213 [7984r,9728B:0)  0@7984r weight:0.000000e+00
%215 [9024r,9156r:0)  0@9024r weight:0.000000e+00
%216 [9040r,9156r:0)  0@9040r weight:0.000000e+00
%217 [9156r,9160r:0)  0@9156r weight:0.000000e+00
%218 [9072r,9160r:0)  0@9072r weight:0.000000e+00
%219 [9160r,9232r:0)  0@9160r weight:0.000000e+00
%221 [9120r,9176r:0)  0@9120r weight:0.000000e+00
%222 [9176r,9184r:0)  0@9176r weight:0.000000e+00
%223 [9152r,9184r:0)  0@9152r weight:0.000000e+00
%224 [9184r,9248r:0)  0@9184r weight:0.000000e+00
%226 [7968r,9728B:0)  0@7968r weight:0.000000e+00
%228 [8416r,8548r:0)  0@8416r weight:0.000000e+00
%229 [8432r,8548r:0)  0@8432r weight:0.000000e+00
%230 [8548r,8552r:0)  0@8548r weight:0.000000e+00
%231 [8464r,8552r:0)  0@8464r weight:0.000000e+00
%232 [8552r,8624r:0)  0@8552r weight:0.000000e+00
%234 [8512r,8792r:0)  0@8512r weight:0.000000e+00
%235 [8568r,8576r:0)  0@8568r weight:0.000000e+00
%236 [8544r,8576r:0)  0@8544r weight:0.000000e+00
%237 [8576r,8640r:0)  0@8576r weight:0.000000e+00
%238 [7920r,9728B:0)  0@7920r weight:0.000000e+00
%239 [7936r,9728B:0)  0@7936r weight:0.000000e+00
%241 [8688r,8776r:0)  0@8688r weight:0.000000e+00
%242 [8704r,8776r:0)  0@8704r weight:0.000000e+00
%243 [8776r,8848r:0)  0@8776r weight:0.000000e+00
%244 [8792r,8800r:0)  0@8792r weight:0.000000e+00
%245 [8768r,8800r:0)  0@8768r weight:0.000000e+00
%246 [8800r,8864r:0)  0@8800r weight:0.000000e+00
%247 [7952r,9728B:0)  0@7952r weight:0.000000e+00
%249 [9664r,9680r:0)  0@9664r weight:0.000000e+00
%250 [9680r,9696r:0)  0@9680r weight:0.000000e+00
%251 [7408r,7440r:0)  0@7408r weight:0.000000e+00
%252 [7488r,7544r:0)  0@7488r weight:0.000000e+00
%253 [7504r,7544r:0)  0@7504r weight:0.000000e+00
%254 [7296r,7600B:0)  0@7296r weight:0.000000e+00
%255 [7536r,7552r:0)  0@7536r weight:0.000000e+00
%256 [7552r,7568r:0)  0@7552r weight:0.000000e+00
%258 [4912r,5104r:0)  0@4912r weight:0.000000e+00
%260 [4736r,5392B:0)  0@4736r weight:0.000000e+00
%261 [4944r,4992r:0)  0@4944r weight:0.000000e+00
%262 [4960r,5024r:0)  0@4960r weight:0.000000e+00
%264 [4992r,5024r:0)  0@4992r weight:0.000000e+00
%266 [5024r,5040r:0)  0@5024r weight:0.000000e+00
%267 [4768r,5392B:0)  0@4768r weight:0.000000e+00
%269 [5040r,5056r:0)  0@5040r weight:0.000000e+00
%271 [5168r,5216r:0)  0@5168r weight:0.000000e+00
%272 [4784r,5392B:0)  0@4784r weight:0.000000e+00
%274 [5328r,5344r:0)  0@5328r weight:0.000000e+00
%275 [5344r,5360r:0)  0@5344r weight:0.000000e+00
%276 [4480r,4512r:0)  0@4480r weight:0.000000e+00
%277 [4560r,4576r:0)  0@4560r weight:0.000000e+00
%278 [4576r,4592r:0)  0@4576r weight:0.000000e+00
%279 [4000r,4032r:0)  0@4000r weight:0.000000e+00
%280 [4080r,4096r:0)  0@4080r weight:0.000000e+00
%281 [4096r,4112r:0)  0@4096r weight:0.000000e+00
%282 [3312r,3344r:0)  0@3312r weight:0.000000e+00
%283 [3328r,3424r:0)  0@3328r weight:0.000000e+00
%284 [3344r,3440r:0)  0@3344r weight:0.000000e+00
%285 [3376r,3392r:0)  0@3376r weight:0.000000e+00
%287 [3504r,3520r:0)  0@3504r weight:0.000000e+00
%290 [9792r,9808r:0)  0@9792r weight:0.000000e+00
%291 [16r,3280B:0)[3616B,9728B:0)  0@16r weight:0.000000e+00
%292 [1232r,3280B:0)[3616B,6672r:0)  0@1232r weight:0.000000e+00
%293 [1248r,2848r:0)  0@1248r weight:0.000000e+00
%294 [272r,3280B:0)[3616B,7200r:0)  0@272r weight:0.000000e+00
RegMasks: 208r 896r 1056r 1168r 1360r 1504r 1632r 1856r 1984r 2256r 2368r 2480r 2800r 2944r 3024r 3456r 3536r 3840r 4048r 4176r 4224r 4272r 4320r 4528r 4688r 5232r 5296r 5456r 5520r 5696r 7184r 7456r 7792r 8304r 8656r 8880r 9264r 9616r
********** MACHINEINSTRS **********
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
  fi#6: size=4, align=4, at location [SP]
  fi#7: size=8, align=8, at location [SP]
  fi#8: size=8, align=8, at location [SP]
  fi#9: size=8, align=8, at location [SP]
  fi#10: size=128, align=16, at location [SP]
  fi#11: size=4, align=4, at location [SP]
  fi#12: size=1, align=4, at location [SP]
  fi#13: size=128, align=16, at location [SP]
  fi#14: size=8, align=8, at location [SP]
  fi#15: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: 0x408B89645A1CAC08, align=8
  cp#1: -4.683910e+03, align=8
  cp#2: -1.927240e+04, align=8
Function Live Ins: $w0 in %1, $x1 in %2

0B	bb.0.entry:
	  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
	  liveins: $w0, $x1
8B	  %2:gpr64 = COPY $x1
12B	  %1:gpr32 = COPY $w0
16B	  %291:gpr64sp = ADDXri %stack.13.t_names, 0, 0
80B	  STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
96B	  STRWui %1:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
112B	  STRXui %2:gpr64, %291:gpr64sp, 40 :: (store 8 into %ir.argv.addr)
128B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
144B	  %4:gpr64 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
160B	  %5:gpr64 = MOVaddr target-flags(aarch64-page) @.str.1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1
176B	  $x0 = COPY %4:gpr64
192B	  $x1 = COPY %5:gpr64
208B	  BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0
224B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
240B	  %6:gpr64 = COPY $x0
256B	  STRXui %6:gpr64, %stack.14.fp, 0 :: (store 8 into %ir.fp)
272B	  %294:gpr64common = ADRP target-flags(aarch64-page) @timeron
288B	  CBZX %6:gpr64, %bb.2
304B	  B %bb.1

320B	bb.1.if.then:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

336B	  %10:gpr32 = MOVi32imm 1
368B	  %11:gpr64 = MOVaddr target-flags(aarch64-page) @.str.2, target-flags(aarch64-pageoff, aarch64-nc) @.str.2
400B	  %12:gpr64 = MOVaddr target-flags(aarch64-page) @.str.3, target-flags(aarch64-pageoff, aarch64-nc) @.str.3
432B	  %13:gpr64 = MOVaddr target-flags(aarch64-page) @.str.4, target-flags(aarch64-pageoff, aarch64-nc) @.str.4
464B	  %14:gpr64 = MOVaddr target-flags(aarch64-page) @.str.5, target-flags(aarch64-pageoff, aarch64-nc) @.str.5
496B	  %15:gpr64 = MOVaddr target-flags(aarch64-page) @.str.6, target-flags(aarch64-pageoff, aarch64-nc) @.str.6
528B	  %16:gpr64 = MOVaddr target-flags(aarch64-page) @.str.7, target-flags(aarch64-pageoff, aarch64-nc) @.str.7
560B	  %17:gpr64 = MOVaddr target-flags(aarch64-page) @.str.8, target-flags(aarch64-pageoff, aarch64-nc) @.str.8
592B	  %18:gpr64 = MOVaddr target-flags(aarch64-page) @.str.9, target-flags(aarch64-pageoff, aarch64-nc) @.str.9
600B	  STRWui %10:gpr32, %294:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
624B	  %19:gpr64 = MOVaddr target-flags(aarch64-page) @.str.10, target-flags(aarch64-pageoff, aarch64-nc) @.str.10
628B	  STRXui %12:gpr64, %stack.13.t_names, 2 :: (store 8 into %ir.arrayidx1, align 16)
632B	  STRXui %11:gpr64, %stack.13.t_names, 1 :: (store 8 into %ir.arrayidx)
656B	  %20:gpr64 = MOVaddr target-flags(aarch64-page) @.str.11, target-flags(aarch64-pageoff, aarch64-nc) @.str.11
660B	  STRXui %14:gpr64, %stack.13.t_names, 4 :: (store 8 into %ir.arrayidx3, align 16)
664B	  STRXui %13:gpr64, %stack.13.t_names, 3 :: (store 8 into %ir.arrayidx2)
688B	  %21:gpr64 = MOVaddr target-flags(aarch64-page) @.str.12, target-flags(aarch64-pageoff, aarch64-nc) @.str.12
692B	  STRXui %16:gpr64, %stack.13.t_names, 6 :: (store 8 into %ir.arrayidx5, align 16)
696B	  STRXui %15:gpr64, %stack.13.t_names, 5 :: (store 8 into %ir.arrayidx4)
720B	  %22:gpr64 = MOVaddr target-flags(aarch64-page) @.str.13, target-flags(aarch64-pageoff, aarch64-nc) @.str.13
724B	  STRXui %18:gpr64, %stack.13.t_names, 8 :: (store 8 into %ir.arrayidx7, align 16)
728B	  STRXui %17:gpr64, %stack.13.t_names, 7 :: (store 8 into %ir.arrayidx6)
752B	  %23:gpr64 = MOVaddr target-flags(aarch64-page) @.str.14, target-flags(aarch64-pageoff, aarch64-nc) @.str.14
756B	  STRXui %20:gpr64, %stack.13.t_names, 10 :: (store 8 into %ir.arrayidx9, align 16)
760B	  STRXui %19:gpr64, %stack.13.t_names, 9 :: (store 8 into %ir.arrayidx8)
784B	  %24:gpr64 = MOVaddr target-flags(aarch64-page) @.str.15, target-flags(aarch64-pageoff, aarch64-nc) @.str.15
788B	  STRXui %21:gpr64, %stack.13.t_names, 14 :: (store 8 into %ir.arrayidx10, align 16)
792B	  STRXui %22:gpr64, %stack.13.t_names, 13 :: (store 8 into %ir.arrayidx11)
848B	  %26:gpr64 = LDRXui %stack.14.fp, 0 :: (dereferenceable load 8 from %ir.fp)
852B	  STRXui %23:gpr64, %stack.13.t_names, 12 :: (store 8 into %ir.arrayidx12, align 16)
856B	  STRXui %24:gpr64, %stack.13.t_names, 11 :: (store 8 into %ir.arrayidx13)
864B	  %25:gpr64 = MOVaddr target-flags(aarch64-page) @.str.16, target-flags(aarch64-pageoff, aarch64-nc) @.str.16
872B	  STRXui %25:gpr64, %291:gpr64sp, 15 :: (store 8 into %ir.arrayidx14)
880B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
888B	  $x0 = COPY %26:gpr64
896B	  BL @fclose, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
912B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
928B	  B %bb.3

944B	bb.2.if.else:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

976B	  STRWui $wzr, %294:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)

992B	bb.3.if.end:
	; predecessors: %bb.2, %bb.1
	  successors: %bb.4(0x50000000), %bb.9(0x30000000); %bb.4(62.50%), %bb.9(37.50%)

1008B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
1024B	  %28:gpr64 = MOVaddr target-flags(aarch64-page) @.str.17, target-flags(aarch64-pageoff, aarch64-nc) @.str.17
1040B	  $x0 = COPY %28:gpr64
1056B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
1072B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
1088B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
1104B	  %30:gpr64 = MOVaddr target-flags(aarch64-page) @.str.18, target-flags(aarch64-pageoff, aarch64-nc) @.str.18
1120B	  %31:gpr64 = MOVaddr target-flags(aarch64-page) @.str.1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1
1136B	  $x0 = COPY %30:gpr64
1152B	  $x1 = COPY %31:gpr64
1168B	  BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0
1184B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
1200B	  %32:gpr64 = COPY $x0
1216B	  STRXui %32:gpr64, %stack.14.fp, 0 :: (store 8 into %ir.fp)
1232B	  %292:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
1248B	  %293:gpr64common = ADRP target-flags(aarch64-page) @dt
1264B	  CBZX %32:gpr64, %bb.9
1280B	  B %bb.4

1296B	bb.4.if.then19:
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

1312B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
1328B	  %41:gpr64 = MOVaddr target-flags(aarch64-page) @.str.19, target-flags(aarch64-pageoff, aarch64-nc) @.str.19
1344B	  $x0 = COPY %41:gpr64
1360B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
1376B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
1392B	  %43:gpr64 = LDRXui %stack.14.fp, 0 :: (dereferenceable load 8 from %ir.fp)
1408B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
1424B	  %44:gpr64 = MOVaddr target-flags(aarch64-page) @.str.20, target-flags(aarch64-pageoff, aarch64-nc) @.str.20
1488B	  $x2 = ADDXri %stack.4.niter, 0, 0
1492B	  $x0 = COPY %43:gpr64
1496B	  $x1 = COPY %44:gpr64
1504B	  BL @fscanf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
1520B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
1536B	  %46:gpr32 = COPY $w0
1552B	  STRWui %46:gpr32, %stack.15.result, 0 :: (store 4 into %ir.result)

1568B	bb.5.while.cond:
	; predecessors: %bb.4, %bb.5
	  successors: %bb.5(0x7c000000), %bb.6(0x04000000); %bb.5(96.88%), %bb.6(3.12%)

1584B	  %47:gpr64 = LDRXui %stack.14.fp, 0 :: (dereferenceable load 8 from %ir.fp)
1600B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
1616B	  $x0 = COPY %47:gpr64
1632B	  BL @fgetc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w0
1648B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
1664B	  %48:gpr32sp = COPY $w0
1680B	  dead $wzr = SUBSWri %48:gpr32sp, 10, 0, implicit-def $nzcv
1696B	  Bcc 1, %bb.5, implicit killed $nzcv
1712B	  B %bb.6

1728B	bb.6.while.end:
	; predecessors: %bb.5
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

1744B	  %50:gpr64 = LDRXui %stack.14.fp, 0 :: (dereferenceable load 8 from %ir.fp)
1760B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
1776B	  %51:gpr64 = MOVaddr target-flags(aarch64-page) @.str.21, target-flags(aarch64-pageoff, aarch64-nc) @.str.21
1792B	  %52:gpr64 = MOVaddr target-flags(aarch64-page) @dt, target-flags(aarch64-pageoff, aarch64-nc) @dt
1808B	  $x0 = COPY %50:gpr64
1824B	  $x1 = COPY %51:gpr64
1840B	  $x2 = COPY %52:gpr64
1856B	  BL @fscanf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
1872B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
1888B	  %53:gpr32 = COPY $w0
1904B	  STRWui %53:gpr32, %stack.15.result, 0 :: (store 4 into %ir.result)

1920B	bb.7.while.cond25:
	; predecessors: %bb.6, %bb.7
	  successors: %bb.7(0x7c000000), %bb.8(0x04000000); %bb.7(96.88%), %bb.8(3.12%)

1936B	  %54:gpr64 = LDRXui %stack.14.fp, 0 :: (dereferenceable load 8 from %ir.fp)
1952B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
1968B	  $x0 = COPY %54:gpr64
1984B	  BL @fgetc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w0
2000B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
2016B	  %55:gpr32sp = COPY $w0
2032B	  dead $wzr = SUBSWri %55:gpr32sp, 10, 0, implicit-def $nzcv
2048B	  Bcc 1, %bb.7, implicit killed $nzcv
2064B	  B %bb.8

2080B	bb.8.while.end29:
	; predecessors: %bb.7
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

2096B	  %57:gpr64 = LDRXui %stack.14.fp, 0 :: (dereferenceable load 8 from %ir.fp)
2112B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
2128B	  %59:gpr64sp = nuw ADDXri %292:gpr64common, 4, 0
2144B	  %60:gpr64sp = nuw ADDXri %292:gpr64common, 8, 0
2160B	  %61:gpr64 = MOVaddr target-flags(aarch64-page) @.str.22, target-flags(aarch64-pageoff, aarch64-nc) @.str.22
2176B	  $x0 = COPY %57:gpr64
2192B	  $x1 = COPY %61:gpr64
2208B	  $x2 = COPY %292:gpr64common
2224B	  $x3 = COPY %59:gpr64sp
2240B	  $x4 = COPY %60:gpr64sp
2256B	  BL @fscanf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $x3, implicit $x4, implicit-def $sp, implicit-def $w0
2272B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
2320B	  %63:gpr64 = LDRXui %stack.14.fp, 0 :: (dereferenceable load 8 from %ir.fp)
2324B	  %62:gpr32 = COPY $w0
2328B	  STRWui %62:gpr32, %stack.15.result, 0 :: (store 4 into %ir.result)
2336B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
2352B	  $x0 = COPY %63:gpr64
2368B	  BL @fclose, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
2384B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
2400B	  B %bb.10

2416B	bb.9.if.else32:
	; predecessors: %bb.3
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

2432B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
2448B	  %33:gpr64 = MOVaddr target-flags(aarch64-page) @.str.23, target-flags(aarch64-pageoff, aarch64-nc) @.str.23
2464B	  $x0 = COPY %33:gpr64
2480B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
2496B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
2512B	  %35:gpr32 = MOVi32imm 400
2544B	  %37:gpr64 = MOVi64imm 4562254508917369340
2576B	  %39:gpr64 = MOVi64imm 438086664294
2608B	  %40:gpr32 = MOVi32imm 102
2616B	  STRWui %35:gpr32, %stack.4.niter, 0 :: (store 4 into %ir.niter)
2624B	  STRXui %37:gpr64, %293:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (store 8 into @dt)
2632B	  STRXui %39:gpr64, %292:gpr64common, 0 :: (store 8 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`, align 4)
2640B	  STRWui %40:gpr32, %292:gpr64common, 2 :: (store 4 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)

2648B	bb.10.if.end34:
	; predecessors: %bb.9, %bb.8
	  successors: %bb.13(0x10000000), %bb.11(0x70000000); %bb.13(12.50%), %bb.11(87.50%)

2656B	  %68:gpr32 = LDRWui %292:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
2672B	  %69:gpr32 = LDRWui %292:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
2688B	  %70:gpr32 = LDRWui %292:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
2704B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
2720B	  %71:gpr64 = MOVaddr target-flags(aarch64-page) @.str.24, target-flags(aarch64-pageoff, aarch64-nc) @.str.24
2736B	  $x0 = COPY %71:gpr64
2752B	  $w1 = COPY %68:gpr32
2768B	  $w2 = COPY %69:gpr32
2784B	  $w3 = COPY %70:gpr32
2800B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit-def $sp, implicit-def dead $w0
2816B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
2832B	  %73:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
2848B	  %75:fpr64 = LDRDui %293:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (dereferenceable load 8 from @dt)
2864B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
2880B	  %76:gpr64 = MOVaddr target-flags(aarch64-page) @.str.25, target-flags(aarch64-pageoff, aarch64-nc) @.str.25
2896B	  $x0 = COPY %76:gpr64
2912B	  $w1 = COPY %73:gpr32
2928B	  $d0 = COPY %75:fpr64
2944B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp, implicit-def dead $w0
2960B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
2976B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
2992B	  %78:gpr64 = MOVaddr target-flags(aarch64-page) @.str.26, target-flags(aarch64-pageoff, aarch64-nc) @.str.26
3008B	  $x0 = COPY %78:gpr64
3024B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
3040B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
3056B	  %80:gpr32common = LDRWui %292:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
3072B	  dead $wzr = SUBSWri %80:gpr32common, 102, 0, implicit-def $nzcv
3088B	  Bcc 12, %bb.13, implicit killed $nzcv
3104B	  B %bb.11

3120B	bb.11.if.end34:
	; predecessors: %bb.10
	  successors: %bb.13(0x12492492), %bb.12(0x6db6db6e); %bb.13(14.29%), %bb.12(85.71%)

3136B	  %81:gpr32common = LDRWui %292:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
3152B	  dead $wzr = SUBSWri %81:gpr32common, 102, 0, implicit-def $nzcv
3168B	  Bcc 12, %bb.13, implicit killed $nzcv
3184B	  B %bb.12

3200B	bb.12.if.end34:
	; predecessors: %bb.11
	  successors: %bb.13(0x2aaaaaab), %bb.14(0x55555555); %bb.13(33.33%), %bb.14(66.67%)

3216B	  %82:gpr32common = LDRWui %292:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
3232B	  dead $wzr = SUBSWri %82:gpr32common, 103, 0, implicit-def $nzcv
3248B	  Bcc 11, %bb.14, implicit killed $nzcv
3264B	  B %bb.13

3280B	bb.13.if.then42:
	; predecessors: %bb.10, %bb.11, %bb.12
	  successors: %bb.45(0x80000000); %bb.45(100.00%)

3312B	  %282:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points + 4, target-flags(aarch64-pageoff, aarch64-nc) @grid_points + 4
3328B	  %283:gpr32 = LDRWui %282:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
3344B	  %284:gpr32 = LDRWui %282:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
3360B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
3376B	  %285:gpr64 = MOVaddr target-flags(aarch64-page) @.str.27, target-flags(aarch64-pageoff, aarch64-nc) @.str.27
3392B	  $x0 = COPY %285:gpr64
3408B	  $w1 = COPY %80:gpr32common
3424B	  $w2 = COPY %283:gpr32
3440B	  $w3 = COPY %284:gpr32
3456B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit-def $sp, implicit-def dead $w0
3472B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
3488B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
3504B	  %287:gpr64 = MOVaddr target-flags(aarch64-page) @.str.28, target-flags(aarch64-pageoff, aarch64-nc) @.str.28
3520B	  $x0 = COPY %287:gpr64
3536B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
3552B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
3584B	  STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
3600B	  B %bb.45

3616B	bb.14.if.end45:
	; predecessors: %bb.12
	  successors: %bb.15(0x80000000); %bb.15(100.00%)

3632B	  %86:gpr32common = SUBWri %80:gpr32common, 2, 0
3648B	  %87:gpr64common = ADRP target-flags(aarch64-page) @nx2
3680B	  %88:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points + 4, target-flags(aarch64-pageoff, aarch64-nc) @grid_points + 4
3728B	  %91:gpr64common = ADRP target-flags(aarch64-page) @ny2
3736B	  %89:gpr32common = LDRWui %88:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
3760B	  %92:gpr32common = LDRWui %88:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
3792B	  %94:gpr64common = ADRP target-flags(aarch64-page) @nz2
3796B	  STRWui %86:gpr32common, %87:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nx2 :: (store 4 into @nx2)
3800B	  %90:gpr32common = SUBWri %89:gpr32common, 2, 0
3808B	  %93:gpr32common = SUBWri %92:gpr32common, 2, 0
3816B	  STRWui %90:gpr32common, %91:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @ny2 :: (store 4 into @ny2)
3824B	  STRWui %93:gpr32common, %94:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nz2 :: (store 4 into @nz2)
3832B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
3840B	  BL @set_constants, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
3856B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
3872B	  %95:gpr32 = MOVi32imm 1
3888B	  STRWui %95:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)

3904B	bb.15.for.cond:
	; predecessors: %bb.14, %bb.16
	  successors: %bb.16(0x7c000000), %bb.17(0x04000000); %bb.16(96.88%), %bb.17(3.12%)

3920B	  %96:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
3936B	  dead $wzr = SUBSWri %96:gpr32common, 15, 0, implicit-def $nzcv
3952B	  Bcc 12, %bb.17, implicit killed $nzcv
3968B	  B %bb.16

3984B	bb.16.for.body:
	; predecessors: %bb.15
	  successors: %bb.15(0x80000000); %bb.15(100.00%)

4000B	  %279:gpr32 = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
4016B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
4032B	  $w0 = COPY %279:gpr32
4048B	  BL @timer_clear, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
4064B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
4080B	  %280:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
4096B	  %281:gpr32common = nsw ADDWri %280:gpr32common, 1, 0
4112B	  STRWui %281:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)
4128B	  B %bb.15

4144B	bb.17.for.end:
	; predecessors: %bb.15
	  successors: %bb.18(0x80000000); %bb.18(100.00%)

4160B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
4176B	  BL @exact_rhs, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
4192B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
4208B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
4224B	  BL @initialize, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
4240B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
4256B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
4272B	  BL @adi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
4288B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
4304B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
4320B	  BL @initialize, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
4336B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
4352B	  %98:gpr32 = MOVi32imm 1
4368B	  STRWui %98:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)

4384B	bb.18.for.cond49:
	; predecessors: %bb.17, %bb.19
	  successors: %bb.19(0x7c000000), %bb.20(0x04000000); %bb.19(96.88%), %bb.20(3.12%)

4400B	  %99:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
4416B	  dead $wzr = SUBSWri %99:gpr32common, 15, 0, implicit-def $nzcv
4432B	  Bcc 12, %bb.20, implicit killed $nzcv
4448B	  B %bb.19

4464B	bb.19.for.body51:
	; predecessors: %bb.18
	  successors: %bb.18(0x80000000); %bb.18(100.00%)

4480B	  %276:gpr32 = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
4496B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
4512B	  $w0 = COPY %276:gpr32
4528B	  BL @timer_clear, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
4544B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
4560B	  %277:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
4576B	  %278:gpr32common = nsw ADDWri %277:gpr32common, 1, 0
4592B	  STRWui %278:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)
4608B	  B %bb.18

4624B	bb.20.for.end54:
	; predecessors: %bb.18
	  successors: %bb.21(0x80000000); %bb.21(100.00%)

4640B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
4672B	  $w0 = MOVi32imm 1
4680B	  %101:gpr32 = MOVi32imm 1
4688B	  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
4704B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
4720B	  STRWui %101:gpr32, %stack.5.step, 0 :: (store 4 into %ir.step)
4736B	  undef %260.sub_32:gpr64 = MOVi32imm 1717986919
4768B	  %267:gpr32 = MOVi32imm 20
4784B	  %272:gpr64 = MOVaddr target-flags(aarch64-page) @.str.29, target-flags(aarch64-pageoff, aarch64-nc) @.str.29

4800B	bb.21.for.cond55:
	; predecessors: %bb.20, %bb.25
	  successors: %bb.22(0x7c000000), %bb.26(0x04000000); %bb.22(96.88%), %bb.26(3.12%)

4816B	  %102:gpr32 = LDRWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
4832B	  %103:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
4848B	  dead $wzr = SUBSWrr %102:gpr32, %103:gpr32, implicit-def $nzcv
4864B	  Bcc 12, %bb.26, implicit killed $nzcv
4880B	  B %bb.22

4896B	bb.22.for.body57:
	; predecessors: %bb.21
	  successors: %bb.24(0x20000000), %bb.23(0x60000000); %bb.24(25.00%), %bb.23(75.00%)

4912B	  %258:gpr64common = LDRSWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
4944B	  %261:gpr64 = MADDXrrr %258:gpr64common, %260:gpr64, $xzr
4960B	  %262:gpr64 = UBFMXri %261:gpr64, 63, 63
4992B	  %264:gpr64 = SBFMXri %261:gpr64, 35, 63
5024B	  %266:gpr32 = ADDWrr %264.sub_32:gpr64, %262.sub_32:gpr64
5040B	  %269:gpr32 = MSUBWrrr %266:gpr32, %267:gpr32, %258.sub_32:gpr64common
5056B	  CBZW %269:gpr32, %bb.24
5072B	  B %bb.23

5088B	bb.23.for.body57:
	; predecessors: %bb.22
	  successors: %bb.24(0x2aaaaaab), %bb.25(0x55555555); %bb.24(33.33%), %bb.25(66.67%)

5104B	  dead $wzr = SUBSWri %258.sub_32:gpr64common, 1, 0, implicit-def $nzcv
5120B	  Bcc 1, %bb.25, implicit killed $nzcv
5136B	  B %bb.24

5152B	bb.24.if.then61:
	; predecessors: %bb.22, %bb.23
	  successors: %bb.25(0x80000000); %bb.25(100.00%)

5168B	  %271:gpr32 = LDRWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
5184B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
5200B	  $x0 = COPY %272:gpr64
5216B	  $w1 = COPY %271:gpr32
5232B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0
5248B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

5264B	bb.25.if.end63:
	; predecessors: %bb.23, %bb.24
	  successors: %bb.21(0x80000000); %bb.21(100.00%)

5280B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
5296B	  BL @adi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
5312B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
5328B	  %274:gpr32common = LDRWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
5344B	  %275:gpr32common = nsw ADDWri %274:gpr32common, 1, 0
5360B	  STRWui %275:gpr32common, %stack.5.step, 0 :: (store 4 into %ir.step)
5376B	  B %bb.21

5392B	bb.26.for.end66:
	; predecessors: %bb.21
	  successors: %bb.27(0x50000000), %bb.28(0x30000000); %bb.27(62.50%), %bb.28(37.50%)

5408B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
5440B	  $w0 = MOVi32imm 1
5456B	  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
5472B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
5488B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
5504B	  $w0 = MOVi32imm 1
5520B	  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0
5536B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
5584B	  %107:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
5588B	  %106:fpr64 = COPY $d0
5592B	  STRDui %106:fpr64, %291:gpr64sp, 35 :: (store 8 into %ir.tmax)
5600B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
5664B	  $x1 = ADDXri %stack.12.Class, 0, 0
5680B	  $x2 = ADDXri %stack.11.verified, 0, 0
5688B	  $w0 = COPY %107:gpr32
5696B	  BL @verify, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit $x2, implicit-def $sp
5712B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
5728B	  %110:fpr64 = LDRDui %291:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
5744B	  FCMPDri %110:fpr64, implicit-def $nzcv
5760B	  Bcc 0, %bb.28, implicit killed $nzcv
5776B	  B %bb.27

5792B	bb.27.if.then69:
	; predecessors: %bb.26
	  successors: %bb.29(0x80000000); %bb.29(100.00%)

5808B	  %113:gpr32 = LDRWui %292:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
5824B	  %114:gpr32 = LDRWui %292:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
5856B	  %116:gpr32 = LDRWui %292:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
6016B	  %124:gpr64common = ADRP target-flags(aarch64-page) %const.0
6032B	  %125:fpr64 = LDRDui %124:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
6080B	  %128:gpr64common = ADRP target-flags(aarch64-page) %const.1
6096B	  %129:fpr64 = LDRDui %128:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
6368B	  %147:gpr64 = MOVi64imm 4696837146684686336
6376B	  %121:fpr64 = FMOVDi 8
6384B	  %148:fpr64 = COPY %147:gpr64
6388B	  %115:gpr32 = nsw MADDWrrr %113:gpr32, %114:gpr32, $wzr
6392B	  %118:gpr32 = nsw ADDWrr %113:gpr32, %114:gpr32
6400B	  %132:gpr64 = MOVi64imm 4667539284973060096
6408B	  %146:fpr64 = LDRDui %291:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
6416B	  %117:gpr32 = nsw MADDWrrr %115:gpr32, %116:gpr32, $wzr
6424B	  %119:gpr32 = nsw ADDWrr %118:gpr32, %116:gpr32
6432B	  %136:gpr64common = ADRP target-flags(aarch64-page) %const.2
6440B	  undef %140.ssub:fpr64 = LDRSui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
6448B	  %149:fpr64 = FMULDrr %146:fpr64, %148:fpr64
6456B	  %120:fpr64 = SCVTFUWDri %119:gpr32
6464B	  %122:fpr64 = FDIVDrr %120:fpr64, %121:fpr64
6472B	  %123:fpr64 = SCVTFUWDri %117:gpr32
6480B	  %126:fpr64 = FMULDrr %123:fpr64, %125:fpr64
6488B	  %127:fpr64 = FMULDrr %122:fpr64, %122:fpr64
6496B	  %130:fpr64 = FMULDrr %127:fpr64, %129:fpr64
6504B	  %137:fpr64 = LDRDui %136:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
6512B	  %131:fpr64 = FADDDrr %126:fpr64, %130:fpr64
6520B	  %133:fpr64 = COPY %132:gpr64
6528B	  %134:fpr64 = FMULDrr %122:fpr64, %133:fpr64
6536B	  %135:fpr64 = FADDDrr %131:fpr64, %134:fpr64
6544B	  %138:fpr64 = FADDDrr %135:fpr64, %137:fpr64
6552B	  %142:fpr128 = SSHLLv2i32_shift %140:fpr64, 0
6560B	  %144:fpr64 = SCVTFv1i64 %142.dsub:fpr128
6568B	  STRWui %117:gpr32, %stack.6.n3, 0 :: (store 4 into %ir.n3)
6576B	  %145:fpr64 = FMULDrr %138:fpr64, %144:fpr64
6584B	  %150:fpr64 = FDIVDrr %145:fpr64, %149:fpr64
6592B	  STRDui %122:fpr64, %291:gpr64sp, 36 :: (store 8 into %ir.t)
6600B	  STRDui %150:fpr64, %291:gpr64sp, 37 :: (store 8 into %ir.mflops)
6608B	  B %bb.29

6616B	bb.28.if.else84:
	; predecessors: %bb.26
	  successors: %bb.29(0x80000000); %bb.29(100.00%)

6632B	  STRXui $xzr, %291:gpr64sp, 37 :: (store 8 into %ir.mflops)

6640B	bb.29.if.end85:
	; predecessors: %bb.28, %bb.27
	  successors: %bb.30(0x50000000), %bb.44(0x30000000); %bb.30(62.50%), %bb.44(37.50%)

6648B	  %151:gpr32 = LDRSBWui %stack.12.Class, 0 :: (dereferenceable load 1 from %ir.Class, align 4)
6656B	  %153:gpr32 = LDRWui %292:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
6664B	  %154:gpr32 = LDRWui %292:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
6672B	  %155:gpr32 = LDRWui %292:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
6680B	  %156:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
6688B	  %157:fpr64 = LDRDui %291:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
6696B	  %158:fpr64 = LDRDui %291:gpr64sp, 37 :: (dereferenceable load 8 from %ir.mflops)
6704B	  %159:gpr32 = LDRWui %stack.11.verified, 0 :: (dereferenceable load 4 from %ir.verified)
6712B	  ADJCALLSTACKDOWN 72, 0, implicit-def dead $sp, implicit $sp
6720B	  %160:gpr64 = MOVaddr target-flags(aarch64-page) @.str.40, target-flags(aarch64-pageoff, aarch64-nc) @.str.40
6744B	  %162:gpr64 = MOVaddr target-flags(aarch64-page) @.str.39, target-flags(aarch64-pageoff, aarch64-nc) @.str.39
6760B	  %163:gpr64 = MOVaddr target-flags(aarch64-page) @.str.38, target-flags(aarch64-pageoff, aarch64-nc) @.str.38
6784B	  %164:gpr64 = MOVaddr target-flags(aarch64-page) @.str.37, target-flags(aarch64-pageoff, aarch64-nc) @.str.37
6816B	  %165:gpr64 = MOVaddr target-flags(aarch64-page) @.str.36, target-flags(aarch64-pageoff, aarch64-nc) @.str.36
6848B	  %166:gpr64 = MOVaddr target-flags(aarch64-page) @.str.35, target-flags(aarch64-pageoff, aarch64-nc) @.str.35
6880B	  %167:gpr64 = MOVaddr target-flags(aarch64-page) @.str.34, target-flags(aarch64-pageoff, aarch64-nc) @.str.34
6888B	  STRXui %160:gpr64, $sp, 8 :: (store 8 into stack + 64)
6912B	  %168:gpr64 = MOVaddr target-flags(aarch64-page) @.str.33, target-flags(aarch64-pageoff, aarch64-nc) @.str.33
6916B	  STRXui %163:gpr64, $sp, 6 :: (store 8 into stack + 48)
6920B	  STRXui %162:gpr64, $sp, 7 :: (store 8 into stack + 56)
6944B	  %169:gpr64 = MOVaddr target-flags(aarch64-page) @.str.32, target-flags(aarch64-pageoff, aarch64-nc) @.str.32
6948B	  STRXui %165:gpr64, $sp, 4 :: (store 8 into stack + 32)
6952B	  STRXui %164:gpr64, $sp, 5 :: (store 8 into stack + 40)
6976B	  %170:gpr64 = MOVaddr target-flags(aarch64-page) @.str.30, target-flags(aarch64-pageoff, aarch64-nc) @.str.30
6980B	  STRXui %167:gpr64, $sp, 2 :: (store 8 into stack + 16)
6984B	  STRXui %166:gpr64, $sp, 3 :: (store 8 into stack + 24)
6992B	  %171:gpr64 = MOVaddr target-flags(aarch64-page) @.str.31, target-flags(aarch64-pageoff, aarch64-nc) @.str.31
6996B	  STRXui %169:gpr64, $sp, 0 :: (store 8 into stack)
7000B	  STRXui %168:gpr64, $sp, 1 :: (store 8 into stack + 8)
7104B	  $d0 = COPY %157:fpr64
7120B	  $d1 = COPY %158:fpr64
7124B	  $x0 = COPY %170:gpr64
7128B	  $w1 = COPY %151:gpr32
7136B	  $w2 = COPY %153:gpr32
7144B	  $w3 = COPY %154:gpr32
7152B	  $w4 = COPY %155:gpr32
7160B	  $w5 = COPY %156:gpr32
7168B	  $x6 = COPY %171:gpr64
7176B	  $w7 = COPY %159:gpr32
7184B	  BL @print_results, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit $w4, implicit $w5, implicit $d0, implicit killed $d1, implicit killed $x6, implicit killed $w7, implicit-def $sp
7192B	  ADJCALLSTACKUP 72, 0, implicit-def dead $sp, implicit $sp
7200B	  %173:gpr32 = LDRWui %294:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
7216B	  CBZW %173:gpr32, %bb.44
7232B	  B %bb.30

7248B	bb.30.if.then86:
	; predecessors: %bb.29
	  successors: %bb.31(0x80000000); %bb.31(100.00%)

7264B	  %174:gpr32 = MOVi32imm 1
7280B	  STRWui %174:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)
7296B	  %254:gpr64sp = ADDXri %stack.10.trecs, 0, 0

7312B	bb.31.for.cond87:
	; predecessors: %bb.30, %bb.32
	  successors: %bb.32(0x7c000000), %bb.33(0x04000000); %bb.32(96.88%), %bb.33(3.12%)

7328B	  %175:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
7344B	  dead $wzr = SUBSWri %175:gpr32common, 15, 0, implicit-def $nzcv
7360B	  Bcc 12, %bb.33, implicit killed $nzcv
7376B	  B %bb.32

7392B	bb.32.for.body90:
	; predecessors: %bb.31
	  successors: %bb.31(0x80000000); %bb.31(100.00%)

7408B	  %251:gpr32 = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
7424B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
7440B	  $w0 = COPY %251:gpr32
7456B	  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0
7472B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
7488B	  %252:fpr64 = COPY $d0
7504B	  %253:gpr64 = LDRSWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
7536B	  %255:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
7544B	  STRDroX %252:fpr64, %254:gpr64sp, %253:gpr64, 0, 1 :: (store 8 into %ir.arrayidx92)
7552B	  %256:gpr32common = nsw ADDWri %255:gpr32common, 1, 0
7568B	  STRWui %256:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)
7584B	  B %bb.31

7600B	bb.33.for.end95:
	; predecessors: %bb.31
	  successors: %bb.34(0x50000000), %bb.35(0x30000000); %bb.34(62.50%), %bb.35(37.50%)

7616B	  %177:fpr64 = LDRDui %291:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
7632B	  FCMPDri %177:fpr64, implicit-def $nzcv
7648B	  Bcc 1, %bb.35, implicit killed $nzcv
7664B	  B %bb.34

7680B	bb.34.if.then98:
	; predecessors: %bb.33
	  successors: %bb.35(0x80000000); %bb.35(100.00%)

7696B	  %178:gpr64 = MOVi64imm 4607182418800017408
7712B	  STRXui %178:gpr64, %291:gpr64sp, 35 :: (store 8 into %ir.tmax)

7728B	bb.35.if.end99:
	; predecessors: %bb.33, %bb.34
	  successors: %bb.36(0x80000000); %bb.36(100.00%)

7744B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
7760B	  %179:gpr64 = MOVaddr target-flags(aarch64-page) @.str.41, target-flags(aarch64-pageoff, aarch64-nc) @.str.41
7776B	  $x0 = COPY %179:gpr64
7792B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
7808B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
7824B	  %181:gpr32 = MOVi32imm 1
7856B	  %187:gpr64sp = ADDXri %stack.13.t_names, 0, 0
7872B	  %189:gpr64sp = ADDXri %stack.10.trecs, 0, 0
7888B	  %191:gpr64 = MOVi64imm 4636737291354636288
7904B	  %196:gpr64 = MOVaddr target-flags(aarch64-page) @.str.42, target-flags(aarch64-pageoff, aarch64-nc) @.str.42
7920B	  %238:gpr64 = MOVaddr target-flags(aarch64-page) @.str.43, target-flags(aarch64-pageoff, aarch64-nc) @.str.43
7936B	  %239:gpr64 = MOVaddr target-flags(aarch64-page) @.str.44, target-flags(aarch64-pageoff, aarch64-nc) @.str.44
7952B	  %247:gpr64 = MOVaddr target-flags(aarch64-page) @.str.45, target-flags(aarch64-pageoff, aarch64-nc) @.str.45
7968B	  %226:gpr64 = MOVaddr target-flags(aarch64-page) @.str.46, target-flags(aarch64-pageoff, aarch64-nc) @.str.46
7976B	  STRWui %181:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)
7984B	  %213:gpr64 = MOVaddr target-flags(aarch64-page) @.str.47, target-flags(aarch64-pageoff, aarch64-nc) @.str.47

8000B	bb.36.for.cond101:
	; predecessors: %bb.35, %bb.43
	  successors: %bb.37(0x7c000000), %bb.44(0x04000000); %bb.37(96.88%), %bb.44(3.12%)

8016B	  %182:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
8032B	  dead $wzr = SUBSWri %182:gpr32common, 15, 0, implicit-def $nzcv
8048B	  Bcc 12, %bb.44, implicit killed $nzcv
8064B	  B %bb.37

8080B	bb.37.for.body104:
	; predecessors: %bb.36
	  successors: %bb.38(0x40000000), %bb.39(0x40000000); %bb.38(50.00%), %bb.39(50.00%)

8096B	  %185:gpr64 = LDRSWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
8112B	  %186:gpr64 = UBFMXri %185:gpr64, 61, 60
8144B	  %190:fpr64 = LDRDroX %189:gpr64sp, %186:gpr64, 0, 0 :: (load 8 from %ir.arrayidx110)
8192B	  %194:fpr64 = LDRDui %291:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
8200B	  %188:gpr64 = LDRXroX %187:gpr64sp, %186:gpr64, 0, 0 :: (load 8 from %ir.arrayidx106)
8208B	  %192:fpr64 = COPY %191:gpr64
8216B	  %193:fpr64 = FMULDrr %190:fpr64, %192:fpr64
8224B	  %195:fpr64 = FDIVDrr %193:fpr64, %194:fpr64
8232B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
8240B	  $x0 = COPY %196:gpr64
8256B	  $x1 = COPY %188:gpr64
8272B	  $d0 = COPY %190:fpr64
8288B	  $d1 = COPY %195:fpr64
8304B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0
8320B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
8336B	  %198:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
8352B	  dead $wzr = SUBSWri %198:gpr32common, 5, 0, implicit-def $nzcv
8368B	  Bcc 1, %bb.39, implicit killed $nzcv
8384B	  B %bb.38

8400B	bb.38.if.then116:
	; predecessors: %bb.37
	  successors: %bb.43(0x80000000); %bb.43(100.00%)

8416B	  %228:fpr64 = LDRDui %291:gpr64sp, 20 :: (dereferenceable load 8 from %ir.arrayidx117, align 16)
8432B	  %229:fpr64 = LDRDui %291:gpr64sp, 21 :: (dereferenceable load 8 from %ir.arrayidx118)
8464B	  %231:fpr64 = LDRDui %291:gpr64sp, 22 :: (dereferenceable load 8 from %ir.arrayidx120, align 16)
8512B	  %234:fpr64 = COPY %191:gpr64
8544B	  %236:fpr64 = LDRDui %291:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
8548B	  %230:fpr64 = FADDDrr %228:fpr64, %229:fpr64
8552B	  %232:fpr64 = FADDDrr %230:fpr64, %231:fpr64
8560B	  STRDui %232:fpr64, %291:gpr64sp, 36 :: (store 8 into %ir.t)
8568B	  %235:fpr64 = FMULDrr %232:fpr64, %234:fpr64
8576B	  %237:fpr64 = FDIVDrr %235:fpr64, %236:fpr64
8584B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
8592B	  $x0 = COPY %238:gpr64
8608B	  $x1 = COPY %239:gpr64
8624B	  $d0 = COPY %232:fpr64
8640B	  $d1 = COPY %237:fpr64
8656B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0
8672B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
8688B	  %241:fpr64 = LDRDui %291:gpr64sp, 23 :: (dereferenceable load 8 from %ir.arrayidx125)
8704B	  %242:fpr64 = LDRDui %291:gpr64sp, 36 :: (dereferenceable load 8 from %ir.t)
8768B	  %245:fpr64 = LDRDui %291:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
8776B	  %243:fpr64 = FSUBDrr %241:fpr64, %242:fpr64
8784B	  STRDui %243:fpr64, %291:gpr64sp, 36 :: (store 8 into %ir.t)
8792B	  %244:fpr64 = FMULDrr %243:fpr64, %234:fpr64
8800B	  %246:fpr64 = FDIVDrr %244:fpr64, %245:fpr64
8808B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
8816B	  $x0 = COPY %238:gpr64
8832B	  $x1 = COPY %247:gpr64
8848B	  $d0 = COPY %243:fpr64
8864B	  $d1 = COPY %246:fpr64
8880B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0
8896B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
8912B	  B %bb.43

8928B	bb.39.if.else130:
	; predecessors: %bb.37
	  successors: %bb.40(0x40000000), %bb.41(0x40000000); %bb.40(50.00%), %bb.41(50.00%)

8944B	  %200:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
8960B	  dead $wzr = SUBSWri %200:gpr32common, 8, 0, implicit-def $nzcv
8976B	  Bcc 1, %bb.41, implicit killed $nzcv
8992B	  B %bb.40

9008B	bb.40.if.then133:
	; predecessors: %bb.39
	  successors: %bb.43(0x80000000); %bb.43(100.00%)

9024B	  %215:fpr64 = LDRDui %291:gpr64sp, 26 :: (dereferenceable load 8 from %ir.arrayidx134, align 16)
9040B	  %216:fpr64 = LDRDui %291:gpr64sp, 27 :: (dereferenceable load 8 from %ir.arrayidx135)
9072B	  %218:fpr64 = LDRDui %291:gpr64sp, 28 :: (dereferenceable load 8 from %ir.arrayidx137, align 16)
9120B	  %221:fpr64 = COPY %191:gpr64
9152B	  %223:fpr64 = LDRDui %291:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
9156B	  %217:fpr64 = FSUBDrr %215:fpr64, %216:fpr64
9160B	  %219:fpr64 = FSUBDrr %217:fpr64, %218:fpr64
9168B	  STRDui %219:fpr64, %291:gpr64sp, 36 :: (store 8 into %ir.t)
9176B	  %222:fpr64 = FMULDrr %219:fpr64, %221:fpr64
9184B	  %224:fpr64 = FDIVDrr %222:fpr64, %223:fpr64
9192B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
9200B	  $x0 = COPY %238:gpr64
9216B	  $x1 = COPY %226:gpr64
9232B	  $d0 = COPY %219:fpr64
9248B	  $d1 = COPY %224:fpr64
9264B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0
9280B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
9296B	  B %bb.43

9312B	bb.41.if.else142:
	; predecessors: %bb.39
	  successors: %bb.42(0x40000000), %bb.43(0x40000000); %bb.42(50.00%), %bb.43(50.00%)

9328B	  %202:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
9344B	  dead $wzr = SUBSWri %202:gpr32common, 10, 0, implicit-def $nzcv
9360B	  Bcc 1, %bb.43, implicit killed $nzcv
9376B	  B %bb.42

9392B	bb.42.if.then145:
	; predecessors: %bb.41
	  successors: %bb.43(0x80000000); %bb.43(100.00%)

9408B	  %204:fpr64 = LDRDui %291:gpr64sp, 27 :: (dereferenceable load 8 from %ir.arrayidx146)
9424B	  %205:fpr64 = LDRDui %291:gpr64sp, 28 :: (dereferenceable load 8 from %ir.arrayidx147, align 16)
9472B	  %208:fpr64 = COPY %191:gpr64
9504B	  %210:fpr64 = LDRDui %291:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
9512B	  %206:fpr64 = FADDDrr %204:fpr64, %205:fpr64
9520B	  STRDui %206:fpr64, %291:gpr64sp, 36 :: (store 8 into %ir.t)
9528B	  %209:fpr64 = FMULDrr %206:fpr64, %208:fpr64
9536B	  %211:fpr64 = FDIVDrr %209:fpr64, %210:fpr64
9544B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
9552B	  $x0 = COPY %238:gpr64
9568B	  $x1 = COPY %213:gpr64
9584B	  $d0 = COPY %206:fpr64
9600B	  $d1 = COPY %211:fpr64
9616B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w0
9632B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

9648B	bb.43.for.inc155:
	; predecessors: %bb.41, %bb.42, %bb.40, %bb.38
	  successors: %bb.36(0x80000000); %bb.36(100.00%)

9664B	  %249:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
9680B	  %250:gpr32common = nsw ADDWri %249:gpr32common, 1, 0
9696B	  STRWui %250:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)
9712B	  B %bb.36

9728B	bb.44.if.end158:
	; predecessors: %bb.29, %bb.36
	  successors: %bb.45(0x80000000); %bb.45(100.00%)

9760B	  STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)

9776B	bb.45.return:
	; predecessors: %bb.44, %bb.13

9792B	  %290:gpr32 = LDRWui %stack.0.retval, 0 :: (dereferenceable load 4 from %ir.retval)
9808B	  $w0 = COPY %290:gpr32
9824B	  RET_ReallyLR implicit $w0

# End machine code for function main.

Before post-MI-sched:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-132]
  fi#1: size=4, align=4, at location [SP-136]
  fi#2: size=8, align=8, at location [SP-144]
  fi#3: size=4, align=4, at location [SP-148]
  fi#4: size=4, align=4, at location [SP-152]
  fi#5: size=4, align=4, at location [SP-156]
  fi#6: size=4, align=4, at location [SP-160]
  fi#7: size=8, align=8, at location [SP-168]
  fi#8: size=8, align=8, at location [SP-176]
  fi#9: size=8, align=8, at location [SP-184]
  fi#10: size=128, align=16, at location [SP-320]
  fi#11: size=4, align=4, at location [SP-324]
  fi#12: size=1, align=4, at location [SP-328]
  fi#13: size=128, align=16, at location [SP-464]
  fi#14: size=8, align=8, at location [SP-472]
  fi#15: size=4, align=4, at location [SP-476]
  fi#16: size=8, align=8, at location [SP-120]
  fi#17: size=8, align=8, at location [SP-8]
  fi#18: size=8, align=8, at location [SP-16]
  fi#19: size=8, align=8, at location [SP-24]
  fi#20: size=8, align=8, at location [SP-32]
  fi#21: size=8, align=8, at location [SP-40]
  fi#22: size=8, align=8, at location [SP-48]
  fi#23: size=8, align=8, at location [SP-56]
  fi#24: size=8, align=8, at location [SP-64]
  fi#25: size=8, align=8, at location [SP-72]
  fi#26: size=8, align=8, at location [SP-80]
  fi#27: size=8, align=8, at location [SP-88]
  fi#28: size=8, align=8, at location [SP-96]
  fi#29: size=8, align=16, at location [SP-112]
Constant Pool:
  cp#0: 0x408B89645A1CAC08, align=8
  cp#1: -4.683910e+03, align=8
  cp#2: -1.927240e+04, align=8
Function Live Ins: $w0, $x1

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $w0, $x1, $d8, $x27, $x28, $x25, $x26, $x23, $x24, $x21, $x22, $x19, $x20, $lr
  early-clobber $sp = frame-setup STRDpre killed $d8, $sp(tied-def 0), -112 :: (store 8 into %stack.29)
  frame-setup STPXi killed $x28, killed $x27, $sp, 2 :: (store 8 into %stack.28), (store 8 into %stack.27)
  frame-setup STPXi killed $x26, killed $x25, $sp, 4 :: (store 8 into %stack.26), (store 8 into %stack.25)
  frame-setup STPXi killed $x24, killed $x23, $sp, 6 :: (store 8 into %stack.24), (store 8 into %stack.23)
  frame-setup STPXi killed $x22, killed $x21, $sp, 8 :: (store 8 into %stack.22), (store 8 into %stack.21)
  frame-setup STPXi killed $x20, killed $x19, $sp, 10 :: (store 8 into %stack.20), (store 8 into %stack.19)
  frame-setup STPXi killed $fp, killed $lr, $sp, 12 :: (store 8 into %stack.18), (store 8 into %stack.17)
  $fp = frame-setup ADDXri $sp, 96, 0
  $sp = frame-setup SUBXri $sp, 448, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  frame-setup CFI_INSTRUCTION offset $w19, -24
  frame-setup CFI_INSTRUCTION offset $w20, -32
  frame-setup CFI_INSTRUCTION offset $w21, -40
  frame-setup CFI_INSTRUCTION offset $w22, -48
  frame-setup CFI_INSTRUCTION offset $w23, -56
  frame-setup CFI_INSTRUCTION offset $w24, -64
  frame-setup CFI_INSTRUCTION offset $w25, -72
  frame-setup CFI_INSTRUCTION offset $w26, -80
  frame-setup CFI_INSTRUCTION offset $w27, -88
  frame-setup CFI_INSTRUCTION offset $w28, -96
  frame-setup CFI_INSTRUCTION offset $b8, -112
  $x25 = ADDXri $sp, 96, 0
  STPWi renamable $w0, $wzr, $fp, -30 :: (store 4 into %ir.retval), (store 4 into %ir.argc.addr)
  STRXui killed renamable $x1, renamable $x25, 40 :: (store 8 into %ir.argv.addr)
  $x0 = ADRP target-flags(aarch64-page) @.str
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str, 0
  $x1 = ADRP target-flags(aarch64-page) @.str.1
  renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1, 0
  BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0
  STRXui renamable $x0, $sp, 11 :: (store 8 into %ir.fp)
  renamable $x21 = ADRP target-flags(aarch64-page) @timeron
  CBZX killed renamable $x0, %bb.2

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $x21, $x25
  $w8 = MOVZWi 1, 0
  $x9 = ADRP target-flags(aarch64-page) @.str.2
  renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.2, 0
  $x10 = ADRP target-flags(aarch64-page) @.str.3
  renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.3, 0
  $x11 = ADRP target-flags(aarch64-page) @.str.4
  renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @.str.4, 0
  $x12 = ADRP target-flags(aarch64-page) @.str.5
  renamable $x12 = ADDXri $x12, target-flags(aarch64-pageoff, aarch64-nc) @.str.5, 0
  $x13 = ADRP target-flags(aarch64-page) @.str.6
  renamable $x13 = ADDXri $x13, target-flags(aarch64-pageoff, aarch64-nc) @.str.6, 0
  $x14 = ADRP target-flags(aarch64-page) @.str.7
  renamable $x14 = ADDXri $x14, target-flags(aarch64-pageoff, aarch64-nc) @.str.7, 0
  $x15 = ADRP target-flags(aarch64-page) @.str.8
  renamable $x15 = ADDXri $x15, target-flags(aarch64-pageoff, aarch64-nc) @.str.8, 0
  $x16 = ADRP target-flags(aarch64-page) @.str.9
  renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @.str.9, 0
  STRWui killed renamable $w8, renamable $x21, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
  $x8 = ADRP target-flags(aarch64-page) @.str.10
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.10, 0
  STPXi renamable $x9, renamable $x10, $sp, 13 :: (store 8 into %ir.arrayidx1, align 16), (store 8 into %ir.arrayidx)
  $x9 = ADRP target-flags(aarch64-page) @.str.11
  renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.11, 0
  STPXi renamable $x11, renamable $x12, $sp, 15 :: (store 8 into %ir.arrayidx3, align 16), (store 8 into %ir.arrayidx2)
  $x10 = ADRP target-flags(aarch64-page) @.str.12
  renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.12, 0
  STPXi renamable $x13, renamable $x14, $sp, 17 :: (store 8 into %ir.arrayidx5, align 16), (store 8 into %ir.arrayidx4)
  $x11 = ADRP target-flags(aarch64-page) @.str.13
  renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @.str.13, 0
  STPXi renamable $x15, renamable $x16, $sp, 19 :: (store 8 into %ir.arrayidx7, align 16), (store 8 into %ir.arrayidx6)
  $x12 = ADRP target-flags(aarch64-page) @.str.14
  renamable $x12 = ADDXri $x12, target-flags(aarch64-pageoff, aarch64-nc) @.str.14, 0
  STPXi renamable $x8, renamable $x9, $sp, 21 :: (store 8 into %ir.arrayidx9, align 16), (store 8 into %ir.arrayidx8)
  $x8 = ADRP target-flags(aarch64-page) @.str.15
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.15, 0
  STPXi renamable $x11, renamable $x10, $sp, 25 :: (store 8 into %ir.arrayidx10, align 16), (store 8 into %ir.arrayidx11)
  renamable $x0 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
  STPXi renamable $x8, renamable $x12, $sp, 23 :: (store 8 into %ir.arrayidx12, align 16), (store 8 into %ir.arrayidx13)
  $x8 = ADRP target-flags(aarch64-page) @.str.16
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.16, 0
  STRXui killed renamable $x8, renamable $x25, 15 :: (store 8 into %ir.arrayidx14)
  BL @fclose, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  B %bb.3

bb.2.if.else:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $x21, $x25
  STRWui $wzr, renamable $x21, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)

bb.3.if.end:
; predecessors: %bb.2, %bb.1
  successors: %bb.4(0x50000000), %bb.9(0x30000000); %bb.4(62.50%), %bb.9(37.50%)
  liveins: $x21, $x25
  $x0 = ADRP target-flags(aarch64-page) @.str.17
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.17, 0
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  $x0 = ADRP target-flags(aarch64-page) @.str.18
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.18, 0
  $x1 = ADRP target-flags(aarch64-page) @.str.1
  renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1, 0
  BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0
  STRXui renamable $x0, $sp, 11 :: (store 8 into %ir.fp)
  $x19 = ADRP target-flags(aarch64-page) @grid_points
  renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  renamable $x20 = ADRP target-flags(aarch64-page) @dt
  CBZX killed renamable $x0, %bb.9

bb.4.if.then19:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)
  liveins: $x19, $x20, $x21, $x25
  $x0 = ADRP target-flags(aarch64-page) @.str.19
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.19, 0
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  renamable $x0 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
  $x1 = ADRP target-flags(aarch64-page) @.str.20
  renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.20, 0
  $x2 = SUBXri $fp, 136, 0
  BL @fscanf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  STRWui killed renamable $w0, $sp, 21 :: (store 4 into %ir.result)

bb.5.while.cond:
; predecessors: %bb.4, %bb.5
  successors: %bb.5(0x7c000000), %bb.6(0x04000000); %bb.5(96.88%), %bb.6(3.12%)
  liveins: $x19, $x20, $x21, $x25
  renamable $x0 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
  BL @fgetc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w0
  dead $wzr = SUBSWri killed renamable $w0, 10, 0, implicit-def $nzcv
  Bcc 1, %bb.5, implicit $nzcv

bb.6.while.end:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $x19, $x20, $x21, $x25
  renamable $x0 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
  $x1 = ADRP target-flags(aarch64-page) @.str.21
  renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.21, 0
  $x2 = ADRP target-flags(aarch64-page) @dt
  renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @dt, 0
  BL @fscanf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  STRWui killed renamable $w0, $sp, 21 :: (store 4 into %ir.result)

bb.7.while.cond25:
; predecessors: %bb.6, %bb.7
  successors: %bb.7(0x7c000000), %bb.8(0x04000000); %bb.7(96.88%), %bb.8(3.12%)
  liveins: $x19, $x20, $x21, $x25
  renamable $x0 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
  BL @fgetc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w0
  dead $wzr = SUBSWri killed renamable $w0, 10, 0, implicit-def $nzcv
  Bcc 1, %bb.7, implicit $nzcv

bb.8.while.end29:
; predecessors: %bb.7
  successors: %bb.10(0x80000000); %bb.10(100.00%)
  liveins: $x19, $x20, $x21, $x25
  renamable $x0 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
  renamable $x3 = nuw ADDXri renamable $x19, 4, 0
  renamable $x4 = nuw ADDXri renamable $x19, 8, 0
  $x1 = ADRP target-flags(aarch64-page) @.str.22
  renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.22, 0
  $x2 = ORRXrs $xzr, $x19, 0
  BL @fscanf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $x3, implicit $x4, implicit-def $sp, implicit-def $w0
  renamable $x8 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
  STRWui killed renamable $w0, $sp, 21 :: (store 4 into %ir.result)
  $x0 = ORRXrs $xzr, killed $x8, 0
  BL @fclose, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  B %bb.10

bb.9.if.else32:
; predecessors: %bb.3
  successors: %bb.10(0x80000000); %bb.10(100.00%)
  liveins: $x19, $x20, $x21, $x25
  $x0 = ADRP target-flags(aarch64-page) @.str.23
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.23, 0
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  $w8 = MOVZWi 400, 0
  $x9 = MOVZXi 43516, 0
  $x9 = MOVKXi $x9(tied-def 0), 54001, 16
  $x9 = MOVKXi $x9(tied-def 0), 25165, 32
  $x9 = MOVKXi $x9(tied-def 0), 16208, 48
  $x10 = MOVZXi 102, 0
  $x10 = MOVKXi $x10(tied-def 0), 102, 32
  $w11 = MOVZWi 102, 0
  STURWi killed renamable $w8, $fp, -136 :: (store 4 into %ir.niter)
  STRXui killed renamable $x9, renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (store 8 into @dt)
  STRXui killed renamable $x10, renamable $x19, 0 :: (store 8 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`, align 4)
  STRWui killed renamable $w11, renamable $x19, 2 :: (store 4 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)

bb.10.if.end34:
; predecessors: %bb.9, %bb.8
  successors: %bb.13(0x10000000), %bb.11(0x70000000); %bb.13(12.50%), %bb.11(87.50%)
  liveins: $x19, $x20, $x21, $x25
  renamable $w1, renamable $w2 = LDPWi renamable $x19, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  renamable $w3 = LDRWui renamable $x19, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  $x0 = ADRP target-flags(aarch64-page) @.str.24
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.24, 0
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit-def $sp, implicit-def dead $w0
  renamable $w1 = LDURWi $fp, -136 :: (dereferenceable load 4 from %ir.niter)
  renamable $d0 = LDRDui killed renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (dereferenceable load 8 from @dt)
  $x0 = ADRP target-flags(aarch64-page) @.str.25
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.25, 0
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp, implicit-def dead $w0
  $x0 = ADRP target-flags(aarch64-page) @.str.26
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.26, 0
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  renamable $w1 = LDRWui renamable $x19, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  dead $wzr = SUBSWri renamable $w1, 102, 0, implicit-def $nzcv
  Bcc 12, %bb.13, implicit $nzcv

bb.11.if.end34:
; predecessors: %bb.10
  successors: %bb.13(0x12492492), %bb.12(0x6db6db6e); %bb.13(14.29%), %bb.12(85.71%)
  liveins: $w1, $x19, $x21, $x25
  renamable $w8 = LDRWui renamable $x19, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  dead $wzr = SUBSWri killed renamable $w8, 102, 0, implicit-def $nzcv
  Bcc 12, %bb.13, implicit $nzcv

bb.12.if.end34:
; predecessors: %bb.11
  successors: %bb.13(0x2aaaaaab), %bb.15(0x55555555); %bb.13(33.33%), %bb.15(66.67%)
  liveins: $w1, $x19, $x21, $x25
  renamable $w8 = LDRWui renamable $x19, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  dead $wzr = SUBSWri killed renamable $w8, 103, 0, implicit-def $nzcv
  Bcc 11, %bb.15, implicit $nzcv

bb.13.if.then42:
; predecessors: %bb.10, %bb.11, %bb.12
  successors: %bb.14(0x80000000); %bb.14(100.00%)
  liveins: $w1
  $x8 = ADRP target-flags(aarch64-page) @grid_points + 4
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @grid_points + 4, 0
  renamable $w2, renamable $w3 = LDPWi renamable $x8, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  $x0 = ADRP target-flags(aarch64-page) @.str.27
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.27, 0
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit-def $sp, implicit-def dead $w0
  $x0 = ADRP target-flags(aarch64-page) @.str.28
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.28, 0
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0

bb.14.if.end158:
; predecessors: %bb.30, %bb.37, %bb.13

  STURWi $wzr, $fp, -116 :: (store 4 into %ir.retval)
  $w0 = ORRWrs $wzr, $wzr, 0
  $sp = frame-destroy ADDXri $sp, 448, 0
  $fp, $lr = frame-destroy LDPXi $sp, 12 :: (load 8 from %stack.18), (load 8 from %stack.17)
  $x20, $x19 = frame-destroy LDPXi $sp, 10 :: (load 8 from %stack.20), (load 8 from %stack.19)
  $x22, $x21 = frame-destroy LDPXi $sp, 8 :: (load 8 from %stack.22), (load 8 from %stack.21)
  $x24, $x23 = frame-destroy LDPXi $sp, 6 :: (load 8 from %stack.24), (load 8 from %stack.23)
  $x26, $x25 = frame-destroy LDPXi $sp, 4 :: (load 8 from %stack.26), (load 8 from %stack.25)
  $x28, $x27 = frame-destroy LDPXi $sp, 2 :: (load 8 from %stack.28), (load 8 from %stack.27)
  early-clobber $sp, $d8 = frame-destroy LDRDpost $sp(tied-def 0), 112 :: (load 8 from %stack.29)
  RET undef $lr, implicit $w0

bb.15.if.end45:
; predecessors: %bb.12
  successors: %bb.16(0x80000000); %bb.16(100.00%)
  liveins: $w1, $x19, $x21, $x25
  renamable $w8 = SUBWri killed renamable $w1, 2, 0
  renamable $x9 = ADRP target-flags(aarch64-page) @nx2
  $x10 = ADRP target-flags(aarch64-page) @grid_points + 4
  renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @grid_points + 4, 0
  renamable $x11 = ADRP target-flags(aarch64-page) @ny2
  renamable $w12, renamable $w10 = LDPWi renamable $x10, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  renamable $x13 = ADRP target-flags(aarch64-page) @nz2
  STRWui killed renamable $w8, killed renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @nx2 :: (store 4 into @nx2)
  renamable $w8 = SUBWri killed renamable $w12, 2, 0
  renamable $w9 = SUBWri killed renamable $w10, 2, 0
  STRWui killed renamable $w8, killed renamable $x11, target-flags(aarch64-pageoff, aarch64-nc) @ny2 :: (store 4 into @ny2)
  STRWui killed renamable $w9, killed renamable $x13, target-flags(aarch64-pageoff, aarch64-nc) @nz2 :: (store 4 into @nz2)
  BL @set_constants, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  $w8 = MOVZWi 1, 0

bb.16.for.cond:
; predecessors: %bb.15, %bb.17
  successors: %bb.17(0x7c000000), %bb.18(0x04000000); %bb.17(96.88%), %bb.18(3.12%)
  liveins: $x19, $x21, $x25, $w8
  STURWi renamable $w8, $fp, -132 :: (store 4 into %ir.i)
  $w8 = ORRWrs $wzr, killed renamable $w8, 0
  dead $wzr = SUBSWri killed renamable $w8, 15, 0, implicit-def $nzcv
  Bcc 12, %bb.18, implicit $nzcv

bb.17.for.body:
; predecessors: %bb.16
  successors: %bb.16(0x80000000); %bb.16(100.00%)
  liveins: $x19, $x21, $x25
  renamable $w0 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
  BL @timer_clear, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  renamable $w8 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  B %bb.16

bb.18.for.end:
; predecessors: %bb.16
  successors: %bb.19(0x80000000); %bb.19(100.00%)
  liveins: $x19, $x21, $x25
  BL @exact_rhs, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  BL @initialize, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  BL @adi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  BL @initialize, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  $w8 = MOVZWi 1, 0

bb.19.for.cond49:
; predecessors: %bb.18, %bb.20
  successors: %bb.20(0x7c000000), %bb.21(0x04000000); %bb.20(96.88%), %bb.21(3.12%)
  liveins: $x19, $x21, $x25, $w8
  STURWi renamable $w8, $fp, -132 :: (store 4 into %ir.i)
  $w8 = ORRWrs $wzr, killed renamable $w8, 0
  dead $wzr = SUBSWri killed renamable $w8, 15, 0, implicit-def $nzcv
  Bcc 12, %bb.21, implicit $nzcv

bb.20.for.body51:
; predecessors: %bb.19
  successors: %bb.19(0x80000000); %bb.19(100.00%)
  liveins: $x19, $x21, $x25
  renamable $w0 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
  BL @timer_clear, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  renamable $w8 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  B %bb.19

bb.21.for.end54:
; predecessors: %bb.19
  successors: %bb.22(0x80000000); %bb.22(100.00%)
  liveins: $x19, $x21, $x25
  $w0 = MOVZWi 1, 0
  $w20 = MOVZWi 1, 0
  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  STURWi killed renamable $w20, $fp, -140 :: (store 4 into %ir.step)
  $w22 = MOVZWi 26215, 0
  $w22 = MOVKWi $w22(tied-def 0), 26214, 16, implicit-def $x22
  $w23 = MOVZWi 20, 0
  $x20 = ADRP target-flags(aarch64-page) @.str.29
  renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @.str.29, 0

bb.22.for.cond55:
; predecessors: %bb.21, %bb.26
  successors: %bb.23(0x7c000000), %bb.27(0x04000000); %bb.23(96.88%), %bb.27(3.12%)
  liveins: $w23, $x19, $x20, $x21, $x22, $x25
  renamable $w8, renamable $w9 = LDPWi $fp, -35 :: (dereferenceable load 4 from %ir.step), (dereferenceable load 4 from %ir.niter)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv
  Bcc 12, %bb.27, implicit $nzcv

bb.23.for.body57:
; predecessors: %bb.22
  successors: %bb.25(0x20000000), %bb.24(0x60000000); %bb.25(25.00%), %bb.24(75.00%)
  liveins: $w23, $x19, $x20, $x21, $x22, $x25
  renamable $x8 = LDURSWi $fp, -140 :: (dereferenceable load 4 from %ir.step)
  renamable $x9 = MADDXrrr renamable $x8, renamable $x22, $xzr
  renamable $x10 = UBFMXri renamable $x9, 63, 63
  renamable $x9 = SBFMXri killed renamable $x9, 35, 63
  $w9 = ADDWrs renamable $w9, renamable $w10, 0, implicit killed $x10, implicit killed $x9
  renamable $w9 = MSUBWrrr killed renamable $w9, renamable $w23, renamable $w8
  CBZW killed renamable $w9, %bb.25

bb.24.for.body57:
; predecessors: %bb.23
  successors: %bb.25(0x2aaaaaab), %bb.26(0x55555555); %bb.25(33.33%), %bb.26(66.67%)
  liveins: $w23, $x8, $x19, $x20, $x21, $x22, $x25
  dead $wzr = SUBSWri renamable $w8, 1, 0, implicit-def $nzcv, implicit killed $x8
  Bcc 1, %bb.26, implicit $nzcv

bb.25.if.then61:
; predecessors: %bb.23, %bb.24
  successors: %bb.26(0x80000000); %bb.26(100.00%)
  liveins: $w23, $x19, $x20, $x21, $x22, $x25
  renamable $w1 = LDURWi $fp, -140 :: (dereferenceable load 4 from %ir.step)
  $x0 = ORRXrs $xzr, $x20, 0
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0

bb.26.if.end63:
; predecessors: %bb.24, %bb.25
  successors: %bb.22(0x80000000); %bb.22(100.00%)
  liveins: $w23, $x19, $x20, $x21, $x22, $x25
  BL @adi, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  renamable $w8 = LDURWi $fp, -140 :: (dereferenceable load 4 from %ir.step)
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  STURWi killed renamable $w8, $fp, -140 :: (store 4 into %ir.step)
  B %bb.22

bb.27.for.end66:
; predecessors: %bb.22
  successors: %bb.28(0x50000000), %bb.29(0x30000000); %bb.28(62.50%), %bb.29(37.50%)
  liveins: $x19, $x21, $x25
  $w0 = MOVZWi 1, 0
  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  $w0 = MOVZWi 1, 0
  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0
  renamable $w0 = LDURWi $fp, -136 :: (dereferenceable load 4 from %ir.niter)
  STRDui killed renamable $d0, renamable $x25, 35 :: (store 8 into %ir.tmax)
  $x1 = ADDXri $sp, 232, 0
  $x2 = ADDXri $sp, 236, 0
  BL @verify, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit $x2, implicit-def $sp
  renamable $d0 = LDRDui renamable $x25, 35 :: (dereferenceable load 8 from %ir.tmax)
  FCMPDri killed renamable $d0, implicit-def $nzcv
  Bcc 0, %bb.29, implicit $nzcv

bb.28.if.then69:
; predecessors: %bb.27
  successors: %bb.30(0x80000000); %bb.30(100.00%)
  liveins: $x19, $x21, $x25
  renamable $w8, renamable $w9 = LDPWi renamable $x19, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  renamable $w10 = LDRWui renamable $x19, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  renamable $x11 = ADRP target-flags(aarch64-page) %const.0
  renamable $d0 = LDRDui killed renamable $x11, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  renamable $x11 = ADRP target-flags(aarch64-page) %const.1
  renamable $d1 = LDRDui killed renamable $x11, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  $x11 = MOVZXi 33920, 32
  $x11 = MOVKXi $x11(tied-def 0), 16686, 48
  renamable $d2 = FMOVDi 8
  $d3 = FMOVXDr killed $x11
  renamable $w11 = nsw MADDWrrr renamable $w8, renamable $w9, $wzr
  $w8 = ADDWrs killed renamable $w8, killed renamable $w9, 0
  $x9 = MOVZXi 28224, 32
  $x9 = MOVKXi $x9(tied-def 0), 16582, 48
  renamable $d4 = LDRDui renamable $x25, 35 :: (dereferenceable load 8 from %ir.tmax)
  renamable $w11 = nsw MADDWrrr killed renamable $w11, renamable $w10, $wzr
  $w8 = ADDWrs killed renamable $w8, killed renamable $w10, 0
  renamable $x10 = ADRP target-flags(aarch64-page) %const.2
  renamable $s5 = LDURSi $fp, -136, implicit-def $d5 :: (dereferenceable load 4 from %ir.niter)
  renamable $d3 = FMULDrr killed renamable $d4, killed renamable $d3
  renamable $d4 = SCVTFUWDri killed renamable $w8
  renamable $d2 = FDIVDrr killed renamable $d4, killed renamable $d2
  renamable $d4 = SCVTFUWDri renamable $w11
  renamable $d0 = FMULDrr killed renamable $d4, killed renamable $d0
  renamable $d4 = FMULDrr renamable $d2, renamable $d2
  renamable $d1 = FMULDrr killed renamable $d4, killed renamable $d1
  renamable $d4 = LDRDui killed renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  renamable $d0 = FADDDrr killed renamable $d0, killed renamable $d1
  $d1 = FMOVXDr killed $x9
  renamable $d1 = FMULDrr renamable $d2, killed renamable $d1
  renamable $d0 = FADDDrr killed renamable $d0, killed renamable $d1
  renamable $d0 = FADDDrr killed renamable $d0, killed renamable $d4
  renamable $q1 = SSHLLv2i32_shift killed renamable $d5, 0
  renamable $d1 = SCVTFv1i64 renamable $d1, implicit killed $q1
  STURWi killed renamable $w11, $fp, -144 :: (store 4 into %ir.n3)
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1
  renamable $d0 = FDIVDrr killed renamable $d0, killed renamable $d3
  STPDi renamable $d2, renamable $d0, renamable $x25, 36 :: (store 8 into %ir.t), (store 8 into %ir.mflops)
  B %bb.30

bb.29.if.else84:
; predecessors: %bb.27
  successors: %bb.30(0x80000000); %bb.30(100.00%)
  liveins: $x19, $x21, $x25
  STRXui $xzr, renamable $x25, 37 :: (store 8 into %ir.mflops)

bb.30.if.end85:
; predecessors: %bb.29, %bb.28
  successors: %bb.31(0x50000000), %bb.14(0x30000000); %bb.31(62.50%), %bb.14(37.50%)
  liveins: $x19, $x21, $x25
  renamable $w1 = LDRSBWui $sp, 232 :: (dereferenceable load 1 from %ir.Class, align 4)
  renamable $w2, renamable $w3 = LDPWi renamable $x19, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  renamable $w4 = LDRWui killed renamable $x19, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  renamable $w5 = LDURWi $fp, -136 :: (dereferenceable load 4 from %ir.niter)
  renamable $d0 = LDRDui renamable $x25, 35 :: (dereferenceable load 8 from %ir.tmax)
  renamable $d1 = LDRDui renamable $x25, 37 :: (dereferenceable load 8 from %ir.mflops)
  renamable $w7 = LDRWui $sp, 59 :: (dereferenceable load 4 from %ir.verified)
  $x8 = ADRP target-flags(aarch64-page) @.str.40
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.40, 0
  $x9 = ADRP target-flags(aarch64-page) @.str.39
  renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.39, 0
  $x10 = ADRP target-flags(aarch64-page) @.str.38
  renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.38, 0
  $x11 = ADRP target-flags(aarch64-page) @.str.37
  renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @.str.37, 0
  $x12 = ADRP target-flags(aarch64-page) @.str.36
  renamable $x12 = ADDXri $x12, target-flags(aarch64-pageoff, aarch64-nc) @.str.36, 0
  $x13 = ADRP target-flags(aarch64-page) @.str.35
  renamable $x13 = ADDXri $x13, target-flags(aarch64-pageoff, aarch64-nc) @.str.35, 0
  $x14 = ADRP target-flags(aarch64-page) @.str.34
  renamable $x14 = ADDXri $x14, target-flags(aarch64-pageoff, aarch64-nc) @.str.34, 0
  STPXi renamable $x9, renamable $x8, $sp, 7 :: (store 8 into stack + 64), (store 8 into stack + 56)
  $x8 = ADRP target-flags(aarch64-page) @.str.33
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.33, 0
  STPXi renamable $x11, renamable $x10, $sp, 5 :: (store 8 into stack + 48), (store 8 into stack + 40)
  $x9 = ADRP target-flags(aarch64-page) @.str.32
  renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.32, 0
  STPXi renamable $x13, renamable $x12, $sp, 3 :: (store 8 into stack + 32), (store 8 into stack + 24)
  $x0 = ADRP target-flags(aarch64-page) @.str.30
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.30, 0
  STPXi renamable $x8, renamable $x14, $sp, 1 :: (store 8 into stack + 16), (store 8 into stack + 8)
  $x6 = ADRP target-flags(aarch64-page) @.str.31
  renamable $x6 = ADDXri $x6, target-flags(aarch64-pageoff, aarch64-nc) @.str.31, 0
  STRXui killed renamable $x9, $sp, 0 :: (store 8 into stack)
  BL @print_results, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit $w4, implicit $w5, implicit $d0, implicit $d1, implicit $x6, implicit $w7, implicit-def $sp
  renamable $w8 = LDRWui killed renamable $x21, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW killed renamable $w8, %bb.14

bb.31.if.then86:
; predecessors: %bb.30
  successors: %bb.32(0x80000000); %bb.32(100.00%)
  liveins: $x25
  $w8 = MOVZWi 1, 0
  STURWi killed renamable $w8, $fp, -132 :: (store 4 into %ir.i)
  $x19 = ADDXri $sp, 240, 0

bb.32.for.cond87:
; predecessors: %bb.31, %bb.33
  successors: %bb.33(0x7c000000), %bb.34(0x04000000); %bb.33(96.88%), %bb.34(3.12%)
  liveins: $x19, $x25
  renamable $w8 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri killed renamable $w8, 15, 0, implicit-def $nzcv
  Bcc 12, %bb.34, implicit $nzcv

bb.33.for.body90:
; predecessors: %bb.32
  successors: %bb.32(0x80000000); %bb.32(100.00%)
  liveins: $x19, $x25
  renamable $w0 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
  BL @timer_read, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0
  renamable $x8 = LDURSWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
  renamable $w9 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
  STRDroX killed renamable $d0, renamable $x19, killed renamable $x8, 0, 1 :: (store 8 into %ir.arrayidx92)
  renamable $w8 = nsw ADDWri killed renamable $w9, 1, 0
  STURWi killed renamable $w8, $fp, -132 :: (store 4 into %ir.i)
  B %bb.32

bb.34.for.end95:
; predecessors: %bb.32
  successors: %bb.35(0x50000000), %bb.36(0x30000000); %bb.35(62.50%), %bb.36(37.50%)
  liveins: $x25
  renamable $d0 = LDRDui renamable $x25, 35 :: (dereferenceable load 8 from %ir.tmax)
  FCMPDri killed renamable $d0, implicit-def $nzcv
  Bcc 1, %bb.36, implicit $nzcv

bb.35.if.then98:
; predecessors: %bb.34
  successors: %bb.36(0x80000000); %bb.36(100.00%)
  liveins: $x25
  $x8 = MOVZXi 16368, 48
  STRXui killed renamable $x8, renamable $x25, 35 :: (store 8 into %ir.tmax)

bb.36.if.end99:
; predecessors: %bb.34, %bb.35
  successors: %bb.37(0x80000000); %bb.37(100.00%)
  liveins: $x25
  $x0 = ADRP target-flags(aarch64-page) @.str.41
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.41, 0
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  $w8 = MOVZWi 1, 0
  $x26 = ADDXri $sp, 96, 0
  $x27 = ADDXri $sp, 240, 0
  $x28 = MOVZXi 16473, 48
  $x19 = ADRP target-flags(aarch64-page) @.str.42
  renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str.42, 0
  $x20 = ADRP target-flags(aarch64-page) @.str.43
  renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @.str.43, 0
  $x21 = ADRP target-flags(aarch64-page) @.str.44
  renamable $x21 = ADDXri $x21, target-flags(aarch64-pageoff, aarch64-nc) @.str.44, 0
  $x22 = ADRP target-flags(aarch64-page) @.str.45
  renamable $x22 = ADDXri $x22, target-flags(aarch64-pageoff, aarch64-nc) @.str.45, 0
  $x23 = ADRP target-flags(aarch64-page) @.str.46
  renamable $x23 = ADDXri $x23, target-flags(aarch64-pageoff, aarch64-nc) @.str.46, 0
  STURWi killed renamable $w8, $fp, -132 :: (store 4 into %ir.i)
  $x24 = ADRP target-flags(aarch64-page) @.str.47
  renamable $x24 = ADDXri $x24, target-flags(aarch64-pageoff, aarch64-nc) @.str.47, 0

bb.37.for.cond101:
; predecessors: %bb.36, %bb.45
  successors: %bb.38(0x7c000000), %bb.14(0x04000000); %bb.38(96.88%), %bb.14(3.12%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w8 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri killed renamable $w8, 15, 0, implicit-def $nzcv
  Bcc 12, %bb.14, implicit $nzcv

bb.38.for.body104:
; predecessors: %bb.37
  successors: %bb.39(0x40000000), %bb.40(0x40000000); %bb.39(50.00%), %bb.40(50.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $x8 = LDURSWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
  renamable $x8 = UBFMXri killed renamable $x8, 61, 60
  renamable $d0 = LDRDroX renamable $x27, renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx110)
  renamable $d1 = LDRDui renamable $x25, 35 :: (dereferenceable load 8 from %ir.tmax)
  renamable $x1 = LDRXroX renamable $x26, killed renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx106)
  $d2 = FMOVXDr $x28
  renamable $d2 = FMULDrr renamable $d0, killed renamable $d2
  renamable $d1 = FDIVDrr killed renamable $d2, killed renamable $d1
  $x0 = ORRXrs $xzr, $x19, 0
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w0
  renamable $w8 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri killed renamable $w8, 5, 0, implicit-def $nzcv
  Bcc 1, %bb.40, implicit $nzcv

bb.39.if.then116:
; predecessors: %bb.38
  successors: %bb.44(0x80000000); %bb.44(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $d0, renamable $d1 = LDPDi renamable $x25, 20 :: (dereferenceable load 8 from %ir.arrayidx117, align 16), (dereferenceable load 8 from %ir.arrayidx118)
  renamable $d2 = LDRDui renamable $x25, 22 :: (dereferenceable load 8 from %ir.arrayidx120, align 16)
  $d8 = FMOVXDr $x28
  renamable $d3 = LDRDui renamable $x25, 35 :: (dereferenceable load 8 from %ir.tmax)
  renamable $d0 = FADDDrr killed renamable $d0, killed renamable $d1
  renamable $d0 = FADDDrr killed renamable $d0, killed renamable $d2
  STRDui renamable $d0, renamable $x25, 36 :: (store 8 into %ir.t)
  renamable $d1 = FMULDrr renamable $d0, renamable $d8
  renamable $d1 = FDIVDrr killed renamable $d1, killed renamable $d3
  $x0 = ORRXrs $xzr, $x20, 0
  $x1 = ORRXrs $xzr, $x21, 0
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w0
  renamable $d0 = LDRDui renamable $x25, 23 :: (dereferenceable load 8 from %ir.arrayidx125)
  renamable $d2, renamable $d1 = LDPDi renamable $x25, 35 :: (dereferenceable load 8 from %ir.t), (dereferenceable load 8 from %ir.tmax)
  renamable $d0 = FSUBDrr killed renamable $d0, killed renamable $d1
  STRDui renamable $d0, renamable $x25, 36 :: (store 8 into %ir.t)
  renamable $d1 = FMULDrr renamable $d0, killed renamable $d8
  renamable $d1 = FDIVDrr killed renamable $d1, killed renamable $d2
  $x0 = ORRXrs $xzr, $x20, 0
  $x1 = ORRXrs $xzr, $x22, 0
  B %bb.44

bb.40.if.else130:
; predecessors: %bb.38
  successors: %bb.41(0x40000000), %bb.42(0x40000000); %bb.41(50.00%), %bb.42(50.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w8 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri killed renamable $w8, 8, 0, implicit-def $nzcv
  Bcc 1, %bb.42, implicit $nzcv

bb.41.if.then133:
; predecessors: %bb.40
  successors: %bb.44(0x80000000); %bb.44(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $d0, renamable $d1 = LDPDi renamable $x25, 26 :: (dereferenceable load 8 from %ir.arrayidx134, align 16), (dereferenceable load 8 from %ir.arrayidx135)
  renamable $d2 = LDRDui renamable $x25, 28 :: (dereferenceable load 8 from %ir.arrayidx137, align 16)
  $d3 = FMOVXDr $x28
  renamable $d4 = LDRDui renamable $x25, 35 :: (dereferenceable load 8 from %ir.tmax)
  renamable $d0 = FSUBDrr killed renamable $d0, killed renamable $d1
  renamable $d0 = FSUBDrr killed renamable $d0, killed renamable $d2
  STRDui renamable $d0, renamable $x25, 36 :: (store 8 into %ir.t)
  renamable $d1 = FMULDrr renamable $d0, killed renamable $d3
  renamable $d1 = FDIVDrr killed renamable $d1, killed renamable $d4
  $x0 = ORRXrs $xzr, $x20, 0
  $x1 = ORRXrs $xzr, $x23, 0
  B %bb.44

bb.42.if.else142:
; predecessors: %bb.40
  successors: %bb.43(0x40000000), %bb.45(0x40000000); %bb.43(50.00%), %bb.45(50.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w8 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri killed renamable $w8, 10, 0, implicit-def $nzcv
  Bcc 1, %bb.45, implicit $nzcv

bb.43.if.then145:
; predecessors: %bb.42
  successors: %bb.44(0x80000000); %bb.44(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $d0, renamable $d1 = LDPDi renamable $x25, 27 :: (dereferenceable load 8 from %ir.arrayidx146), (dereferenceable load 8 from %ir.arrayidx147, align 16)
  $d2 = FMOVXDr $x28
  renamable $d3 = LDRDui renamable $x25, 35 :: (dereferenceable load 8 from %ir.tmax)
  renamable $d0 = FADDDrr killed renamable $d0, killed renamable $d1
  STRDui renamable $d0, renamable $x25, 36 :: (store 8 into %ir.t)
  renamable $d1 = FMULDrr renamable $d0, killed renamable $d2
  renamable $d1 = FDIVDrr killed renamable $d1, killed renamable $d3
  $x0 = ORRXrs $xzr, $x20, 0
  $x1 = ORRXrs $xzr, $x24, 0

bb.44.for.inc155:
; predecessors: %bb.43, %bb.41, %bb.39
  successors: %bb.45(0x80000000); %bb.45(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28, $x0, $x1, $d0, $d1
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w0

bb.45.for.inc155:
; predecessors: %bb.42, %bb.44
  successors: %bb.37(0x80000000); %bb.37(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w8 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  STURWi killed renamable $w8, $fp, -132 :: (store 4 into %ir.i)
  B %bb.37

# End machine code for function main.

********** MI Scheduling **********
main:%bb.0 entry
  From: STRXui renamable $x0, $sp, 11 :: (store 8 into %ir.fp)
    To: CBZX killed renamable $x0, %bb.2
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   STRXui renamable $x0, $sp, 11 :: (store 8 into %ir.fp)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   renamable $x21 = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   CBZX killed renamable $x0, %bb.2
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Disabled scoreboard hazard recognizer
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x21 = ADRP target-flags(aarch64-page) @timeron
  Ready @0c
  TopQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STRXui renamable $x0, $sp, 11 :: (store 8 into %ir.fp)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(1):   renamable $x21 = ADRP target-flags(aarch64-page) @timeron
SU(0):   STRXui renamable $x0, $sp, 11 :: (store 8 into %ir.fp)

********** MI Scheduling **********
main:%bb.0 entry
  From: $x25 = ADDXri $sp, 96, 0
    To: BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   $x25 = ADDXri $sp, 96, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(2): Data Latency=1 Reg=$x25
SU(1):   STPWi renamable $w0, $wzr, $fp, -30 :: (store 4 into %ir.retval), (store 4 into %ir.argc.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Anti Latency=0
SU(2):   STRXui renamable $x1, renamable $x25, 40 :: (store 8 into %ir.argv.addr)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(0): Data Latency=1 Reg=$x25
  Successors:
    SU(5): Anti Latency=0
SU(3):   $x0 = ADRP target-flags(aarch64-page) @.str
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Predecessors:
    SU(1): Anti Latency=0
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x0
SU(4):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   $x1 = ADRP target-flags(aarch64-page) @.str.1
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(2): Anti Latency=0
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x1
SU(6):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 3
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 3
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $x25 = ADDXri $sp, 96, 0
  Ready @0c
  TopQ.A BotLatency SU(0) 3c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 3
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) STPWi renamable $w0, $wzr, $fp, -30 :: (store 4 into %ir.retval), (store 4 into %ir.argc.addr)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 3
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) STRXui renamable $x1, renamable $x25, 40 :: (store 8 into %ir.argv.addr)
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  TopQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 5 
  TopQ.A RemainingLatency 0 + 3c > CritPath 3
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) $x0 = ADRP target-flags(aarch64-page) @.str
  Ready @3c
  TopQ.A BotLatency SU(3) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 
  TopQ.A RemainingLatency 0 + 4c > CritPath 3
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) $x1 = ADRP target-flags(aarch64-page) @.str.1
  Ready @4c
  TopQ.A BotLatency SU(5) 2c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 6 
  TopQ.A RemainingLatency 0 + 5c > CritPath 3
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str, 0
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1, 0
  Ready @6c
  TopQ.A TopLatency SU(6) 2c
  TopQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   $x25 = ADDXri $sp, 96, 0
SU(1):   STPWi renamable $w0, $wzr, $fp, -30 :: (store 4 into %ir.retval), (store 4 into %ir.argc.addr)
SU(2):   STRXui renamable $x1, renamable $x25, 40 :: (store 8 into %ir.argv.addr)
SU(3):   $x0 = ADRP target-flags(aarch64-page) @.str
SU(5):   $x1 = ADRP target-flags(aarch64-page) @.str.1
SU(4):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str, 0
SU(6):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1, 0

********** MI Scheduling **********
main:%bb.0 entry
  From: frame-setup STPXi killed $x28, killed $x27, $sp, 2 :: (store 8 into %stack.28), (store 8 into %stack.27)
    To: $sp = frame-setup SUBXri $sp, 448, 0
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   frame-setup STPXi $x28, $x27, $sp, 2 :: (store 8 into %stack.28), (store 8 into %stack.27)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   frame-setup STPXi $x26, $x25, $sp, 4 :: (store 8 into %stack.26), (store 8 into %stack.25)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   frame-setup STPXi $x24, $x23, $sp, 6 :: (store 8 into %stack.24), (store 8 into %stack.23)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(3):   frame-setup STPXi $x22, $x21, $sp, 8 :: (store 8 into %stack.22), (store 8 into %stack.21)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(4):   frame-setup STPXi $x20, $x19, $sp, 10 :: (store 8 into %stack.20), (store 8 into %stack.19)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(5):   frame-setup STPXi $fp, $lr, $sp, 12 :: (store 8 into %stack.18), (store 8 into %stack.17)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Successors:
    SU(6): Anti Latency=0
SU(6):   $fp = frame-setup ADDXri $sp, 96, 0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(5): Anti Latency=0
ExitSU:   $sp = frame-setup SUBXri $sp, 448, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 
  TopQ.A RemainingLatency 0 + 0c > CritPath 0
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) frame-setup STPXi $x28, $x27, $sp, 2 :: (store 8 into %stack.28), (store 8 into %stack.27)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 1 2 3 4 
  TopQ.A RemainingLatency 0 + 1c > CritPath 0
  Cand SU(5) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) frame-setup STPXi $x26, $x25, $sp, 4 :: (store 8 into %stack.26), (store 8 into %stack.25)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 2 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 0
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) frame-setup STPXi $x24, $x23, $sp, 6 :: (store 8 into %stack.24), (store 8 into %stack.23)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 0
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) frame-setup STPXi $x22, $x21, $sp, 8 :: (store 8 into %stack.22), (store 8 into %stack.21)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 
  TopQ.A RemainingLatency 0 + 4c > CritPath 0
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) frame-setup STPXi $x20, $x19, $sp, 10 :: (store 8 into %stack.20), (store 8 into %stack.19)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) frame-setup STPXi $fp, $lr, $sp, 12 :: (store 8 into %stack.18), (store 8 into %stack.17)
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) $fp = frame-setup ADDXri $sp, 96, 0
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   frame-setup STPXi $x28, $x27, $sp, 2 :: (store 8 into %stack.28), (store 8 into %stack.27)
SU(1):   frame-setup STPXi $x26, $x25, $sp, 4 :: (store 8 into %stack.26), (store 8 into %stack.25)
SU(2):   frame-setup STPXi $x24, $x23, $sp, 6 :: (store 8 into %stack.24), (store 8 into %stack.23)
SU(3):   frame-setup STPXi $x22, $x21, $sp, 8 :: (store 8 into %stack.22), (store 8 into %stack.21)
SU(4):   frame-setup STPXi $x20, $x19, $sp, 10 :: (store 8 into %stack.20), (store 8 into %stack.19)
SU(5):   frame-setup STPXi $fp, $lr, $sp, 12 :: (store 8 into %stack.18), (store 8 into %stack.17)
SU(6):   $fp = frame-setup ADDXri $sp, 96, 0

Fixup kills for %bb.0
********** MI Scheduling **********
main:%bb.1 if.then
  From: $w8 = MOVZWi 1, 0
    To: BL @fclose, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 41
ScheduleDAGMI::schedule starting
SU(0):   $w8 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 7
  Successors:
    SU(18): Out  Latency=1
    SU(17): Data Latency=1 Reg=$w8
SU(1):   $x9 = ADRP target-flags(aarch64-page) @.str.2
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x9
SU(2):   renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.2, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 7
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x9
  Successors:
    SU(21): Out  Latency=1
    SU(20): Data Latency=1 Reg=$x9
SU(3):   $x10 = ADRP target-flags(aarch64-page) @.str.3
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 8
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x10
SU(4):   renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.3, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 7
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x10
  Successors:
    SU(24): Out  Latency=1
    SU(20): Data Latency=1 Reg=$x10
SU(5):   $x11 = ADRP target-flags(aarch64-page) @.str.4
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x11
SU(6):   renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @.str.4, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x11
  Successors:
    SU(27): Out  Latency=1
    SU(23): Data Latency=1 Reg=$x11
SU(7):   $x12 = ADRP target-flags(aarch64-page) @.str.5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x12
SU(8):   renamable $x12 = ADDXri $x12, target-flags(aarch64-pageoff, aarch64-nc) @.str.5, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x12
  Successors:
    SU(30): Out  Latency=1
    SU(23): Data Latency=1 Reg=$x12
SU(9):   $x13 = ADRP target-flags(aarch64-page) @.str.6
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x13
SU(10):   renamable $x13 = ADDXri $x13, target-flags(aarch64-pageoff, aarch64-nc) @.str.6, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x13
  Successors:
    SU(26): Data Latency=1 Reg=$x13
SU(11):   $x14 = ADRP target-flags(aarch64-page) @.str.7
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x14
SU(12):   renamable $x14 = ADDXri $x14, target-flags(aarch64-pageoff, aarch64-nc) @.str.7, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x14
  Successors:
    SU(26): Data Latency=1 Reg=$x14
SU(13):   $x15 = ADRP target-flags(aarch64-page) @.str.8
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(14): Out  Latency=1
    SU(14): Data Latency=1 Reg=$x15
SU(14):   renamable $x15 = ADDXri $x15, target-flags(aarch64-pageoff, aarch64-nc) @.str.8, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x15
  Successors:
    SU(29): Data Latency=1 Reg=$x15
SU(15):   $x16 = ADRP target-flags(aarch64-page) @.str.9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(16): Out  Latency=1
    SU(16): Data Latency=1 Reg=$x16
SU(16):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @.str.9, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(15): Out  Latency=1
    SU(15): Data Latency=1 Reg=$x16
  Successors:
    SU(29): Data Latency=1 Reg=$x16
SU(17):   STRWui renamable $w8, renamable $x21, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 6
  Predecessors:
    SU(0): Data Latency=1 Reg=$w8
  Successors:
    SU(18): Anti Latency=0
SU(18):   $x8 = ADRP target-flags(aarch64-page) @.str.10
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 6
  Predecessors:
    SU(17): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    SU(19): Out  Latency=1
    SU(19): Data Latency=1 Reg=$x8
SU(19):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.10, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 5
  Predecessors:
    SU(18): Out  Latency=1
    SU(18): Data Latency=1 Reg=$x8
  Successors:
    SU(33): Out  Latency=1
    SU(32): Data Latency=1 Reg=$x8
SU(20):   STPXi renamable $x9, renamable $x10, $sp, 13 :: (store 8 into %ir.arrayidx1, align 16), (store 8 into %ir.arrayidx)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 6
  Predecessors:
    SU(4): Data Latency=1 Reg=$x10
    SU(2): Data Latency=1 Reg=$x9
  Successors:
    SU(21): Anti Latency=0
    SU(24): Anti Latency=0
    SU(40): Ord  Latency=0 Memory
SU(21):   $x9 = ADRP target-flags(aarch64-page) @.str.11
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 6
  Predecessors:
    SU(20): Anti Latency=0
    SU(2): Out  Latency=1
  Successors:
    SU(22): Out  Latency=1
    SU(22): Data Latency=1 Reg=$x9
SU(22):   renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.11, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 5
  Predecessors:
    SU(21): Out  Latency=1
    SU(21): Data Latency=1 Reg=$x9
  Successors:
    SU(32): Data Latency=1 Reg=$x9
SU(23):   STPXi renamable $x11, renamable $x12, $sp, 15 :: (store 8 into %ir.arrayidx3, align 16), (store 8 into %ir.arrayidx2)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 4
  Predecessors:
    SU(8): Data Latency=1 Reg=$x12
    SU(6): Data Latency=1 Reg=$x11
  Successors:
    SU(27): Anti Latency=0
    SU(30): Anti Latency=0
    SU(40): Ord  Latency=0 Memory
SU(24):   $x10 = ADRP target-flags(aarch64-page) @.str.12
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(20): Anti Latency=0
    SU(4): Out  Latency=1
  Successors:
    SU(25): Out  Latency=1
    SU(25): Data Latency=1 Reg=$x10
SU(25):   renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.12, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
    SU(24): Out  Latency=1
    SU(24): Data Latency=1 Reg=$x10
  Successors:
    SU(35): Data Latency=1 Reg=$x10
SU(26):   STPXi renamable $x13, renamable $x14, $sp, 17 :: (store 8 into %ir.arrayidx5, align 16), (store 8 into %ir.arrayidx4)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=$x14
    SU(10): Data Latency=1 Reg=$x13
  Successors:
    SU(40): Ord  Latency=0 Memory
SU(27):   $x11 = ADRP target-flags(aarch64-page) @.str.13
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(23): Anti Latency=0
    SU(6): Out  Latency=1
  Successors:
    SU(28): Out  Latency=1
    SU(28): Data Latency=1 Reg=$x11
SU(28):   renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @.str.13, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
    SU(27): Out  Latency=1
    SU(27): Data Latency=1 Reg=$x11
  Successors:
    SU(35): Data Latency=1 Reg=$x11
SU(29):   STPXi renamable $x15, renamable $x16, $sp, 19 :: (store 8 into %ir.arrayidx7, align 16), (store 8 into %ir.arrayidx6)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(16): Data Latency=1 Reg=$x16
    SU(14): Data Latency=1 Reg=$x15
  Successors:
    SU(40): Ord  Latency=0 Memory
SU(30):   $x12 = ADRP target-flags(aarch64-page) @.str.14
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 4
  Predecessors:
    SU(23): Anti Latency=0
    SU(8): Out  Latency=1
  Successors:
    SU(31): Out  Latency=1
    SU(31): Data Latency=1 Reg=$x12
SU(31):   renamable $x12 = ADDXri $x12, target-flags(aarch64-pageoff, aarch64-nc) @.str.14, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 3
  Predecessors:
    SU(30): Out  Latency=1
    SU(30): Data Latency=1 Reg=$x12
  Successors:
    SU(37): Data Latency=1 Reg=$x12
SU(32):   STPXi renamable $x8, renamable $x9, $sp, 21 :: (store 8 into %ir.arrayidx9, align 16), (store 8 into %ir.arrayidx8)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(22): Data Latency=1 Reg=$x9
    SU(19): Data Latency=1 Reg=$x8
  Successors:
    SU(33): Anti Latency=0
    SU(40): Ord  Latency=0 Memory
SU(33):   $x8 = ADRP target-flags(aarch64-page) @.str.15
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(32): Anti Latency=0
    SU(19): Out  Latency=1
  Successors:
    SU(34): Out  Latency=1
    SU(34): Data Latency=1 Reg=$x8
SU(34):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.15, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(33): Out  Latency=1
    SU(33): Data Latency=1 Reg=$x8
  Successors:
    SU(38): Out  Latency=1
    SU(37): Data Latency=1 Reg=$x8
SU(35):   STPXi renamable $x11, renamable $x10, $sp, 25 :: (store 8 into %ir.arrayidx10, align 16), (store 8 into %ir.arrayidx11)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(28): Data Latency=1 Reg=$x11
    SU(25): Data Latency=1 Reg=$x10
  Successors:
    SU(40): Ord  Latency=0 Memory
SU(36):   renamable $x0 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(37):   STPXi renamable $x8, renamable $x12, $sp, 23 :: (store 8 into %ir.arrayidx12, align 16), (store 8 into %ir.arrayidx13)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 2
  Predecessors:
    SU(34): Data Latency=1 Reg=$x8
    SU(31): Data Latency=1 Reg=$x12
  Successors:
    SU(38): Anti Latency=0
    SU(40): Ord  Latency=0 Memory
SU(38):   $x8 = ADRP target-flags(aarch64-page) @.str.16
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 2
  Predecessors:
    SU(37): Anti Latency=0
    SU(34): Out  Latency=1
  Successors:
    SU(39): Out  Latency=1
    SU(39): Data Latency=1 Reg=$x8
SU(39):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.16, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 1
  Predecessors:
    SU(38): Out  Latency=1
    SU(38): Data Latency=1 Reg=$x8
  Successors:
    SU(40): Data Latency=1 Reg=$x8
SU(40):   STRXui renamable $x8, renamable $x25, 15 :: (store 8 into %ir.arrayidx14)
  # preds left       : 8
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(39): Data Latency=1 Reg=$x8
    SU(37): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(32): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
    SU(26): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
ExitSU:   BL @fclose, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(36): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 8
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 36 
  TopQ.A RemainingLatency 0 + 0c > CritPath 8
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $x9 = ADRP target-flags(aarch64-page) @.str.2
  Ready @0c
  TopQ.A BotLatency SU(1) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 36 3 5 7 9 11 13 15 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 8
  Cand SU(0) ORDER                              
  Cand SU(3) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) $x10 = ADRP target-flags(aarch64-page) @.str.3
  Ready @1c
  TopQ.A BotLatency SU(3) 8c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 36 2 5 7 9 11 13 15 4 
  TopQ.A RemainingLatency 0 + 2c > CritPath 8
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $w8 = MOVZWi 1, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 36 2 5 7 9 11 13 15 17 
  TopQ.A RemainingLatency 0 + 3c > CritPath 8
  Cand SU(4) ORDER                              
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.2, 0
  Ready @3c
  TopQ.A TopLatency SU(2) 1c
  TopQ.A BotLatency SU(2) 7c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 36 17 5 7 9 11 13 15 
  TopQ.A RemainingLatency 0 + 4c > CritPath 8
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.3, 0
  Ready @4c
  TopQ.A BotLatency SU(4) 7c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 36 17 5 7 9 11 13 20 
  TopQ.A RemainingLatency 0 + 5c > CritPath 8
  Cand SU(15) ORDER                              
  Cand SU(36) TOP-PATH                  4 cycles 
  Cand SU(17) TOP-PATH                  6 cycles 
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) $x11 = ADRP target-flags(aarch64-page) @.str.4
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 36 17 20 7 9 11 13 6 
  TopQ.A RemainingLatency 0 + 6c > CritPath 8
  Cand SU(15) ORDER                              
  Cand SU(36) TOP-PATH                  4 cycles 
  Cand SU(17) TOP-PATH                  6 cycles 
  Cand SU(7) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(7) $x12 = ADRP target-flags(aarch64-page) @.str.5
  Ready @6c
  TopQ.A BotLatency SU(7) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 36 17 20 6 9 11 13 8 
  TopQ.A RemainingLatency 0 + 7c > CritPath 8
  Cand SU(15) ORDER                              
  Cand SU(36) TOP-PATH                  4 cycles 
  Cand SU(17) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(17) STRWui renamable $w8, renamable $x21, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
  Ready @7c
  TopQ.A BotLatency SU(17) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 36 8 20 6 9 11 13 18 
  TopQ.A RemainingLatency 0 + 8c > CritPath 8
  Cand SU(15) ORDER                              
  Cand SU(36) TOP-PATH                  4 cycles 
  Cand SU(8) TOP-PATH                  5 cycles 
  Cand SU(20) TOP-PATH                  6 cycles 
  Cand SU(18) ORDER                              
Pick Top ORDER     
Scheduling SU(18) $x8 = ADRP target-flags(aarch64-page) @.str.10
  Ready @8c
  TopQ.A BotLatency SU(18) 6c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 36 8 20 6 9 11 13 19 
  TopQ.A RemainingLatency 0 + 9c > CritPath 8
  Cand SU(15) ORDER                              
  Cand SU(36) TOP-PATH                  4 cycles 
  Cand SU(8) TOP-PATH                  5 cycles 
  Cand SU(20) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(20) STPXi renamable $x9, renamable $x10, $sp, 13 :: (store 8 into %ir.arrayidx1, align 16), (store 8 into %ir.arrayidx)
  Ready @9c
  TopQ.A TopLatency SU(20) 2c
  TopQ.A BotLatency SU(20) 6c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 36 8 19 6 9 11 13 21 24 
  TopQ.A RemainingLatency 0 + 10c > CritPath 8
  Cand SU(15) ORDER                              
  Cand SU(36) TOP-PATH                  4 cycles 
  Cand SU(8) TOP-PATH                  5 cycles 
  Cand SU(6) ORDER                              
  Cand SU(21) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(21) $x9 = ADRP target-flags(aarch64-page) @.str.11
  Ready @10c
  TopQ.A BotLatency SU(21) 6c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 36 8 19 6 9 11 13 24 22 
  TopQ.A RemainingLatency 0 + 11c > CritPath 8
  Cand SU(15) ORDER                              
  Cand SU(36) TOP-PATH                  4 cycles 
  Cand SU(8) TOP-PATH                  5 cycles 
  Cand SU(6) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(6) renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @.str.4, 0
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 36 8 19 22 9 11 13 24 
  TopQ.A RemainingLatency 0 + 12c > CritPath 8
  Cand SU(15) ORDER                              
  Cand SU(36) TOP-PATH                  4 cycles 
  Cand SU(8) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $x12 = ADDXri $x12, target-flags(aarch64-pageoff, aarch64-nc) @.str.5, 0
  Ready @12c
  TopQ.A BotLatency SU(8) 5c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 36 24 19 22 9 11 13 23 
  TopQ.A RemainingLatency 0 + 13c > CritPath 8
  Cand SU(15) ORDER                              
  Cand SU(36) TOP-PATH                  4 cycles 
  Cand SU(19) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(19) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.10, 0
  Ready @13c
  TopQ.A BotLatency SU(19) 5c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 36 24 23 22 9 11 13 
  TopQ.A RemainingLatency 0 + 14c > CritPath 8
  Cand SU(15) ORDER                              
  Cand SU(36) TOP-PATH                  4 cycles 
  Cand SU(23) ORDER                              
  Cand SU(22) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(22) renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.11, 0
  Ready @14c
  TopQ.A TopLatency SU(22) 3c
  TopQ.A BotLatency SU(22) 5c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 36 24 23 13 9 11 32 
  TopQ.A RemainingLatency 0 + 15c > CritPath 8
  Cand SU(15) ORDER                              
  Cand SU(36) TOP-PATH                  4 cycles 
  Cand SU(23) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(23) STPXi renamable $x11, renamable $x12, $sp, 15 :: (store 8 into %ir.arrayidx3, align 16), (store 8 into %ir.arrayidx2)
  Ready @15c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 36 24 32 13 9 11 27 30 
  TopQ.A RemainingLatency 0 + 16c > CritPath 8
  Cand SU(15) ORDER                              
  Cand SU(36) TOP-PATH                  4 cycles 
  Cand SU(32) ORDER                              
  Cand SU(30) ORDER                              
Pick Top ORDER     
Scheduling SU(30) $x12 = ADRP target-flags(aarch64-page) @.str.14
  Ready @16c
  TopQ.A BotLatency SU(30) 4c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 36 24 32 13 9 11 27 31 
  TopQ.A RemainingLatency 0 + 17c > CritPath 8
  Cand SU(15) ORDER                              
  Cand SU(36) TOP-PATH                  4 cycles 
  Cand SU(32) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(32) STPXi renamable $x8, renamable $x9, $sp, 21 :: (store 8 into %ir.arrayidx9, align 16), (store 8 into %ir.arrayidx8)
  Ready @17c
  TopQ.A TopLatency SU(32) 4c
  TopQ.A BotLatency SU(32) 4c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 36 24 31 13 9 11 27 33 
  TopQ.A RemainingLatency 0 + 18c > CritPath 8
  Cand SU(15) ORDER                              
  Cand SU(36) TOP-PATH                  4 cycles 
  Cand SU(33) ORDER                              
Pick Top ORDER     
Scheduling SU(33) $x8 = ADRP target-flags(aarch64-page) @.str.15
  Ready @18c
  TopQ.A BotLatency SU(33) 4c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 36 24 31 13 9 11 27 34 
  TopQ.A RemainingLatency 0 + 19c > CritPath 8
  Cand SU(15) ORDER                              
  Cand SU(36) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(36) renamable $x0 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
  Ready @19c
  TopQ.A BotLatency SU(36) 4c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 34 24 31 13 9 11 27 
  TopQ.A RemainingLatency 0 + 20c > CritPath 8
  Cand SU(15) ORDER                              
  Cand SU(34) TOP-PATH                  3 cycles 
  Cand SU(31) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(31) renamable $x12 = ADDXri $x12, target-flags(aarch64-pageoff, aarch64-nc) @.str.14, 0
  Ready @20c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 34 24 27 13 9 11 
  TopQ.A RemainingLatency 0 + 21c > CritPath 8
  Cand SU(15) ORDER                              
  Cand SU(34) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(34) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.15, 0
  Ready @21c
  TopQ.A TopLatency SU(34) 5c
  TopQ.A BotLatency SU(34) 3c
  *** Max MOps 1 at cycle 21
Cycle: 22 TopQ.A
TopQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 11 24 27 13 9 37 
  TopQ.A RemainingLatency 0 + 22c > CritPath 8
  Cand SU(15) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(9) ORDER                              
Pick Top ORDER     
Scheduling SU(9) $x13 = ADRP target-flags(aarch64-page) @.str.6
  Ready @22c
  *** Max MOps 1 at cycle 22
Cycle: 23 TopQ.A
TopQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 11 24 27 13 37 10 
  TopQ.A RemainingLatency 0 + 23c > CritPath 8
  Cand SU(15) ORDER                              
  Cand SU(11) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(11) $x14 = ADRP target-flags(aarch64-page) @.str.7
  Ready @23c
  TopQ.A BotLatency SU(11) 2c
  *** Max MOps 1 at cycle 23
Cycle: 24 TopQ.A
TopQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 10 24 27 13 37 12 
  TopQ.A RemainingLatency 0 + 24c > CritPath 8
  Cand SU(15) ORDER                              
  Cand SU(13) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(13) $x15 = ADRP target-flags(aarch64-page) @.str.8
  Ready @24c
  TopQ.A BotLatency SU(13) 2c
  *** Max MOps 1 at cycle 24
Cycle: 25 TopQ.A
TopQ.A @25c
  Retired: 25
  Executed: 25c
  Critical: 25c, 25 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 10 24 27 12 37 14 
  TopQ.A RemainingLatency 0 + 25c > CritPath 8
  Cand SU(15) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(15) $x16 = ADRP target-flags(aarch64-page) @.str.9
  Ready @25c
  TopQ.A BotLatency SU(15) 2c
  *** Max MOps 1 at cycle 25
Cycle: 26 TopQ.A
TopQ.A @26c
  Retired: 26
  Executed: 26c
  Critical: 26c, 26 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 14 10 24 27 12 37 16 
  TopQ.A RemainingLatency 0 + 26c > CritPath 8
  Cand SU(14) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(24) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(24) $x10 = ADRP target-flags(aarch64-page) @.str.12
  Ready @26c
  TopQ.A BotLatency SU(24) 2c
  *** Max MOps 1 at cycle 26
Cycle: 27 TopQ.A
TopQ.A @27c
  Retired: 27
  Executed: 27c
  Critical: 27c, 27 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 14 10 16 27 12 37 25 
  TopQ.A RemainingLatency 0 + 27c > CritPath 8
  Cand SU(14) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(27) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(27) $x11 = ADRP target-flags(aarch64-page) @.str.13
  Ready @27c
  TopQ.A BotLatency SU(27) 2c
  *** Max MOps 1 at cycle 27
Cycle: 28 TopQ.A
TopQ.A @28c
  Retired: 28
  Executed: 28c
  Critical: 28c, 28 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 14 10 16 25 12 37 28 
  TopQ.A RemainingLatency 0 + 28c > CritPath 8
  Cand SU(14) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(37) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(37) STPXi renamable $x8, renamable $x12, $sp, 23 :: (store 8 into %ir.arrayidx12, align 16), (store 8 into %ir.arrayidx13)
  Ready @28c
  TopQ.A TopLatency SU(37) 6c
  TopQ.A BotLatency SU(37) 2c
  *** Max MOps 1 at cycle 28
Cycle: 29 TopQ.A
TopQ.A @29c
  Retired: 29
  Executed: 29c
  Critical: 29c, 29 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 14 10 16 25 12 28 38 
  TopQ.A RemainingLatency 0 + 29c > CritPath 8
  Cand SU(14) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(38) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(38) $x8 = ADRP target-flags(aarch64-page) @.str.16
  Ready @29c
  TopQ.A BotLatency SU(38) 2c
  *** Max MOps 1 at cycle 29
Cycle: 30 TopQ.A
TopQ.A @30c
  Retired: 30
  Executed: 30c
  Critical: 30c, 30 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 14 10 16 25 12 28 39 
  TopQ.A RemainingLatency 0 + 30c > CritPath 8
  Cand SU(14) ORDER                              
  Cand SU(10) ORDER                              
Pick Top ORDER     
Scheduling SU(10) renamable $x13 = ADDXri $x13, target-flags(aarch64-pageoff, aarch64-nc) @.str.6, 0
  Ready @30c
  *** Max MOps 1 at cycle 30
Cycle: 31 TopQ.A
TopQ.A @31c
  Retired: 31
  Executed: 31c
  Critical: 31c, 31 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 14 39 16 25 12 28 
  TopQ.A RemainingLatency 0 + 31c > CritPath 8
  Cand SU(14) ORDER                              
  Cand SU(12) ORDER                              
Pick Top ORDER     
Scheduling SU(12) renamable $x14 = ADDXri $x14, target-flags(aarch64-pageoff, aarch64-nc) @.str.7, 0
  Ready @31c
  TopQ.A BotLatency SU(12) 1c
  *** Max MOps 1 at cycle 31
Cycle: 32 TopQ.A
TopQ.A @32c
  Retired: 32
  Executed: 32c
  Critical: 32c, 32 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 14 39 16 25 28 26 
  TopQ.A RemainingLatency 0 + 32c > CritPath 8
  Cand SU(14) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(14) renamable $x15 = ADDXri $x15, target-flags(aarch64-pageoff, aarch64-nc) @.str.8, 0
  Ready @32c
  TopQ.A BotLatency SU(14) 1c
  *** Max MOps 1 at cycle 32
Cycle: 33 TopQ.A
TopQ.A @33c
  Retired: 33
  Executed: 33c
  Critical: 33c, 33 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 26 39 16 25 28 
  TopQ.A RemainingLatency 0 + 33c > CritPath 8
  Cand SU(26) ORDER                              
  Cand SU(39) TOP-PATH                  1 cycles 
  Cand SU(16) ORDER                              
Pick Top ORDER     
Scheduling SU(16) renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @.str.9, 0
  Ready @33c
  TopQ.A BotLatency SU(16) 1c
  *** Max MOps 1 at cycle 33
Cycle: 34 TopQ.A
TopQ.A @34c
  Retired: 34
  Executed: 34c
  Critical: 34c, 34 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 26 39 28 25 29 
  TopQ.A RemainingLatency 0 + 34c > CritPath 8
  Cand SU(26) ORDER                              
  Cand SU(39) TOP-PATH                  1 cycles 
  Cand SU(28) ORDER                              
  Cand SU(25) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(25) renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.12, 0
  Ready @34c
  TopQ.A BotLatency SU(25) 1c
  *** Max MOps 1 at cycle 34
Cycle: 35 TopQ.A
TopQ.A @35c
  Retired: 35
  Executed: 35c
  Critical: 35c, 35 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 26 39 28 29 
  TopQ.A RemainingLatency 0 + 35c > CritPath 8
  Cand SU(26) ORDER                              
  Cand SU(39) TOP-PATH                  1 cycles 
  Cand SU(28) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(28) renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @.str.13, 0
  Ready @35c
  TopQ.A BotLatency SU(28) 1c
  *** Max MOps 1 at cycle 35
Cycle: 36 TopQ.A
TopQ.A @36c
  Retired: 36
  Executed: 36c
  Critical: 36c, 36 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 26 39 29 35 
  TopQ.A RemainingLatency 0 + 36c > CritPath 8
  Cand SU(26) ORDER                              
  Cand SU(39) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(39) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.16, 0
  Ready @36c
  TopQ.A TopLatency SU(39) 7c
  TopQ.A BotLatency SU(39) 1c
  *** Max MOps 1 at cycle 36
Cycle: 37 TopQ.A
TopQ.A @37c
  Retired: 37
  Executed: 37c
  Critical: 37c, 37 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 26 35 29 
  TopQ.A RemainingLatency 0 + 37c > CritPath 8
  Cand SU(26) ORDER                              
Pick Top ORDER     
Scheduling SU(26) STPXi renamable $x13, renamable $x14, $sp, 17 :: (store 8 into %ir.arrayidx5, align 16), (store 8 into %ir.arrayidx4)
  Ready @37c
  *** Max MOps 1 at cycle 37
Cycle: 38 TopQ.A
TopQ.A @38c
  Retired: 38
  Executed: 38c
  Critical: 38c, 38 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 29 35 
  TopQ.A RemainingLatency 0 + 38c > CritPath 8
  Cand SU(29) ORDER                              
Pick Top ORDER     
Scheduling SU(29) STPXi renamable $x15, renamable $x16, $sp, 19 :: (store 8 into %ir.arrayidx7, align 16), (store 8 into %ir.arrayidx6)
  Ready @38c
  *** Max MOps 1 at cycle 38
Cycle: 39 TopQ.A
TopQ.A @39c
  Retired: 39
  Executed: 39c
  Critical: 39c, 39 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 35 
Pick Top ONLY1     
Scheduling SU(35) STPXi renamable $x11, renamable $x10, $sp, 25 :: (store 8 into %ir.arrayidx10, align 16), (store 8 into %ir.arrayidx11)
  Ready @39c
  *** Max MOps 1 at cycle 39
Cycle: 40 TopQ.A
TopQ.A @40c
  Retired: 40
  Executed: 40c
  Critical: 40c, 40 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 40 
Pick Top ONLY1     
Scheduling SU(40) STRXui renamable $x8, renamable $x25, 15 :: (store 8 into %ir.arrayidx14)
  Ready @40c
  TopQ.A TopLatency SU(40) 8c
  *** Max MOps 1 at cycle 40
Cycle: 41 TopQ.A
TopQ.A @41c
  Retired: 41
  Executed: 41c
  Critical: 41c, 41 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.1 ***
SU(1):   $x9 = ADRP target-flags(aarch64-page) @.str.2
SU(3):   $x10 = ADRP target-flags(aarch64-page) @.str.3
SU(0):   $w8 = MOVZWi 1, 0
SU(2):   renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.2, 0
SU(4):   renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.3, 0
SU(5):   $x11 = ADRP target-flags(aarch64-page) @.str.4
SU(7):   $x12 = ADRP target-flags(aarch64-page) @.str.5
SU(17):   STRWui renamable $w8, renamable $x21, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
SU(18):   $x8 = ADRP target-flags(aarch64-page) @.str.10
SU(20):   STPXi renamable $x9, renamable $x10, $sp, 13 :: (store 8 into %ir.arrayidx1, align 16), (store 8 into %ir.arrayidx)
SU(21):   $x9 = ADRP target-flags(aarch64-page) @.str.11
SU(6):   renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @.str.4, 0
SU(8):   renamable $x12 = ADDXri $x12, target-flags(aarch64-pageoff, aarch64-nc) @.str.5, 0
SU(19):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.10, 0
SU(22):   renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.11, 0
SU(23):   STPXi renamable $x11, renamable $x12, $sp, 15 :: (store 8 into %ir.arrayidx3, align 16), (store 8 into %ir.arrayidx2)
SU(30):   $x12 = ADRP target-flags(aarch64-page) @.str.14
SU(32):   STPXi renamable $x8, renamable $x9, $sp, 21 :: (store 8 into %ir.arrayidx9, align 16), (store 8 into %ir.arrayidx8)
SU(33):   $x8 = ADRP target-flags(aarch64-page) @.str.15
SU(36):   renamable $x0 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
SU(31):   renamable $x12 = ADDXri $x12, target-flags(aarch64-pageoff, aarch64-nc) @.str.14, 0
SU(34):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.15, 0
SU(9):   $x13 = ADRP target-flags(aarch64-page) @.str.6
SU(11):   $x14 = ADRP target-flags(aarch64-page) @.str.7
SU(13):   $x15 = ADRP target-flags(aarch64-page) @.str.8
SU(15):   $x16 = ADRP target-flags(aarch64-page) @.str.9
SU(24):   $x10 = ADRP target-flags(aarch64-page) @.str.12
SU(27):   $x11 = ADRP target-flags(aarch64-page) @.str.13
SU(37):   STPXi renamable $x8, renamable $x12, $sp, 23 :: (store 8 into %ir.arrayidx12, align 16), (store 8 into %ir.arrayidx13)
SU(38):   $x8 = ADRP target-flags(aarch64-page) @.str.16
SU(10):   renamable $x13 = ADDXri $x13, target-flags(aarch64-pageoff, aarch64-nc) @.str.6, 0
SU(12):   renamable $x14 = ADDXri $x14, target-flags(aarch64-pageoff, aarch64-nc) @.str.7, 0
SU(14):   renamable $x15 = ADDXri $x15, target-flags(aarch64-pageoff, aarch64-nc) @.str.8, 0
SU(16):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @.str.9, 0
SU(25):   renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.12, 0
SU(28):   renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @.str.13, 0
SU(39):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.16, 0
SU(26):   STPXi renamable $x13, renamable $x14, $sp, 17 :: (store 8 into %ir.arrayidx5, align 16), (store 8 into %ir.arrayidx4)
SU(29):   STPXi renamable $x15, renamable $x16, $sp, 19 :: (store 8 into %ir.arrayidx7, align 16), (store 8 into %ir.arrayidx6)
SU(35):   STPXi renamable $x11, renamable $x10, $sp, 25 :: (store 8 into %ir.arrayidx10, align 16), (store 8 into %ir.arrayidx11)
SU(40):   STRXui renamable $x8, renamable $x25, 15 :: (store 8 into %ir.arrayidx14)

Fixup kills for %bb.1
Fixup kills for %bb.2
********** MI Scheduling **********
main:%bb.3 if.end
  From: STRXui renamable $x0, $sp, 11 :: (store 8 into %ir.fp)
    To: CBZX killed renamable $x0, %bb.9
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   STRXui renamable $x0, $sp, 11 :: (store 8 into %ir.fp)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $x19 = ADRP target-flags(aarch64-page) @grid_points
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x19
SU(2):   renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   renamable $x20 = ADRP target-flags(aarch64-page) @dt
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   CBZX killed renamable $x0, %bb.9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $x19 = ADRP target-flags(aarch64-page) @grid_points
  Ready @0c
  TopQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(3) TOP-PATH                  1 cycles 
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  Ready @1c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(3) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $x20 = ADRP target-flags(aarch64-page) @dt
  Ready @2c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STRXui renamable $x0, $sp, 11 :: (store 8 into %ir.fp)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.3 ***
SU(1):   $x19 = ADRP target-flags(aarch64-page) @grid_points
SU(2):   renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
SU(3):   renamable $x20 = ADRP target-flags(aarch64-page) @dt
SU(0):   STRXui renamable $x0, $sp, 11 :: (store 8 into %ir.fp)

********** MI Scheduling **********
main:%bb.3 if.end
  From: $x0 = ADRP target-flags(aarch64-page) @.str.18
    To: BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.18
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.18, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $x1 = ADRP target-flags(aarch64-page) @.str.1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x1
SU(3):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fopen, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @.str.18
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) $x1 = ADRP target-flags(aarch64-page) @.str.1
  Ready @1c
  TopQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.18, 0
  Ready @2c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1, 0
  Ready @3c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.18
SU(2):   $x1 = ADRP target-flags(aarch64-page) @.str.1
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.18, 0
SU(3):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.1, 0

********** MI Scheduling **********
main:%bb.3 if.end
  From: $x0 = ADRP target-flags(aarch64-page) @.str.17
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.17
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.17, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @.str.17
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.17, 0
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.17
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.17, 0

Fixup kills for %bb.3
********** MI Scheduling **********
main:%bb.4 if.then19
  From: renamable $x0 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
    To: BL @fscanf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $x0 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(1):   $x1 = ADRP target-flags(aarch64-page) @.str.20
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x1
SU(2):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.20, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $x2 = SUBXri $fp, 136, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fscanf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x0 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 4
  Cand SU(3) ORDER                              
  Cand SU(1) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $x1 = ADRP target-flags(aarch64-page) @.str.20
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 4
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.20, 0
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $x2 = SUBXri $fp, 136, 0
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   renamable $x0 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
SU(1):   $x1 = ADRP target-flags(aarch64-page) @.str.20
SU(2):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.20, 0
SU(3):   $x2 = SUBXri $fp, 136, 0

********** MI Scheduling **********
main:%bb.4 if.then19
  From: $x0 = ADRP target-flags(aarch64-page) @.str.19
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.19
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.19, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @.str.19
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.19, 0
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.19
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.19, 0

Fixup kills for %bb.4
Fixup kills for %bb.5
********** MI Scheduling **********
main:%bb.6 while.end
  From: renamable $x0 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
    To: BL @fscanf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $x0 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(1):   $x1 = ADRP target-flags(aarch64-page) @.str.21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x1
SU(2):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.21, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $x2 = ADRP target-flags(aarch64-page) @dt
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x2
SU(4):   renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @dt, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fscanf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w0
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x0 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 4
  Cand SU(3) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) $x1 = ADRP target-flags(aarch64-page) @.str.21
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 4
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) $x2 = ADRP target-flags(aarch64-page) @dt
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 4
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.21, 0
  Ready @3c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @dt, 0
  Ready @4c
  TopQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   renamable $x0 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
SU(1):   $x1 = ADRP target-flags(aarch64-page) @.str.21
SU(3):   $x2 = ADRP target-flags(aarch64-page) @dt
SU(2):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.21, 0
SU(4):   renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @dt, 0

Fixup kills for %bb.6
Fixup kills for %bb.7
********** MI Scheduling **********
main:%bb.8 while.end29
  From: renamable $x8 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
    To: BL @fclose, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$x8
SU(1):   STRWui renamable $w0, $sp, 21 :: (store 4 into %ir.result)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Anti Latency=0
SU(2):   $x0 = ORRXrs $xzr, $x8, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fclose, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRWui renamable $w0, $sp, 21 :: (store 4 into %ir.result)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $x0 = ORRXrs $xzr, $x8, 0
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   renamable $x8 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
SU(1):   STRWui renamable $w0, $sp, 21 :: (store 4 into %ir.result)
SU(2):   $x0 = ORRXrs $xzr, $x8, 0

********** MI Scheduling **********
main:%bb.8 while.end29
  From: renamable $x0 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
    To: BL @fscanf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $x3, implicit $x4, implicit-def $sp, implicit-def $w0
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $x0 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(1):   renamable $x3 = nuw ADDXri renamable $x19, 4, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   renamable $x4 = nuw ADDXri renamable $x19, 8, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $x1 = ADRP target-flags(aarch64-page) @.str.22
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x1
SU(4):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.22, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   $x2 = ORRXrs $xzr, $x19, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fscanf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $x3, implicit $x4, implicit-def $sp, implicit-def $w0
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 5 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x0 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 1 2 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 4
  Cand SU(5) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(3) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) $x1 = ADRP target-flags(aarch64-page) @.str.22
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 1 2 4 
  TopQ.A RemainingLatency 0 + 2c > CritPath 4
  Cand SU(5) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) renamable $x3 = nuw ADDXri renamable $x19, 4, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 2 
  TopQ.A RemainingLatency 0 + 3c > CritPath 4
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) renamable $x4 = nuw ADDXri renamable $x19, 8, 0
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 
  TopQ.A RemainingLatency 0 + 4c > CritPath 4
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.22, 0
  Ready @4c
  TopQ.A TopLatency SU(4) 1c
  TopQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $x2 = ORRXrs $xzr, $x19, 0
  Ready @5c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   renamable $x0 = LDRXui $sp, 11 :: (dereferenceable load 8 from %ir.fp)
SU(3):   $x1 = ADRP target-flags(aarch64-page) @.str.22
SU(1):   renamable $x3 = nuw ADDXri renamable $x19, 4, 0
SU(2):   renamable $x4 = nuw ADDXri renamable $x19, 8, 0
SU(4):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @.str.22, 0
SU(5):   $x2 = ORRXrs $xzr, $x19, 0

Fixup kills for %bb.8
********** MI Scheduling **********
main:%bb.9 if.else32
  From: $w8 = MOVZWi 400, 0
    To: End RegionInstrs: 12
ScheduleDAGMI::schedule starting
SU(0):   $w8 = MOVZWi 400, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(8): Data Latency=1 Reg=$w8
SU(1):   $x9 = MOVZXi 43516, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x9
SU(2):   $x9 = MOVKXi $x9(tied-def 0), 54001, 16
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x9
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x9
SU(3):   $x9 = MOVKXi $x9(tied-def 0), 25165, 32
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x9
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x9
SU(4):   $x9 = MOVKXi $x9(tied-def 0), 16208, 48
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x9
  Successors:
    SU(9): Data Latency=1 Reg=$x9
SU(5):   $x10 = MOVZXi 102, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x10
SU(6):   $x10 = MOVKXi $x10(tied-def 0), 102, 32
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x10
  Successors:
    SU(10): Data Latency=1 Reg=$x10
SU(7):   $w11 = MOVZWi 102, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(11): Data Latency=1 Reg=$w11
SU(8):   STURWi renamable $w8, $fp, -136 :: (store 4 into %ir.niter)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$w8
SU(9):   STRXui renamable $x9, renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (store 8 into @dt)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=$x9
SU(10):   STRXui renamable $x10, renamable $x19, 0 :: (store 8 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`, align 4)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=$x10
SU(11):   STRWui renamable $w11, renamable $x19, 2 :: (store 4 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=$w11
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 7 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $x9 = MOVZXi 43516, 0
  Ready @0c
  TopQ.A BotLatency SU(1) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 7 5 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(5) TOP-PATH                  2 cycles 
  Cand SU(2) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x9 = MOVKXi $x9(tied-def 0), 54001, 16
  Ready @1c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 7 5 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(5) TOP-PATH                  2 cycles 
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) $x9 = MOVKXi $x9(tied-def 0), 25165, 32
  Ready @2c
  TopQ.A TopLatency SU(3) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 7 5 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(5) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) $x10 = MOVZXi 102, 0
  Ready @3c
  TopQ.A BotLatency SU(5) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 7 4 6 
  TopQ.A RemainingLatency 0 + 4c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $w8 = MOVZWi 400, 0
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 7 4 8 
  TopQ.A RemainingLatency 0 + 5c > CritPath 4
  Cand SU(6) ORDER                              
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) $x9 = MOVKXi $x9(tied-def 0), 16208, 48
  Ready @5c
  TopQ.A TopLatency SU(4) 3c
  TopQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 7 8 9 
  TopQ.A RemainingLatency 0 + 6c > CritPath 4
  Cand SU(6) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(6) $x10 = MOVKXi $x10(tied-def 0), 102, 32
  Ready @6c
  TopQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 7 8 10 
  TopQ.A RemainingLatency 0 + 7c > CritPath 4
  Cand SU(9) ORDER                              
  Cand SU(7) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) $w11 = MOVZWi 102, 0
  Ready @7c
  TopQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 10 8 11 
  TopQ.A RemainingLatency 0 + 8c > CritPath 4
  Cand SU(9) ORDER                              
  Cand SU(8) ORDER                              
Pick Top ORDER     
Scheduling SU(8) STURWi renamable $w8, $fp, -136 :: (store 4 into %ir.niter)
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 10 11 
  TopQ.A RemainingLatency 0 + 9c > CritPath 4
  Cand SU(9) ORDER                              
Pick Top ORDER     
Scheduling SU(9) STRXui renamable $x9, renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (store 8 into @dt)
  Ready @9c
  TopQ.A TopLatency SU(9) 4c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 10 
  TopQ.A RemainingLatency 0 + 10c > CritPath 4
  Cand SU(11) ORDER                              
  Cand SU(10) ORDER                              
Pick Top ORDER     
Scheduling SU(10) STRXui renamable $x10, renamable $x19, 0 :: (store 8 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`, align 4)
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 
Pick Top ONLY1     
Scheduling SU(11) STRWui renamable $w11, renamable $x19, 2 :: (store 4 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.9 ***
SU(1):   $x9 = MOVZXi 43516, 0
SU(2):   $x9 = MOVKXi $x9(tied-def 0), 54001, 16
SU(3):   $x9 = MOVKXi $x9(tied-def 0), 25165, 32
SU(5):   $x10 = MOVZXi 102, 0
SU(0):   $w8 = MOVZWi 400, 0
SU(4):   $x9 = MOVKXi $x9(tied-def 0), 16208, 48
SU(6):   $x10 = MOVKXi $x10(tied-def 0), 102, 32
SU(7):   $w11 = MOVZWi 102, 0
SU(8):   STURWi renamable $w8, $fp, -136 :: (store 4 into %ir.niter)
SU(9):   STRXui renamable $x9, renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (store 8 into @dt)
SU(10):   STRXui renamable $x10, renamable $x19, 0 :: (store 8 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`, align 4)
SU(11):   STRWui renamable $w11, renamable $x19, 2 :: (store 4 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)

********** MI Scheduling **********
main:%bb.9 if.else32
  From: $x0 = ADRP target-flags(aarch64-page) @.str.23
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.23
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.23, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @.str.23
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.23, 0
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.23
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.23, 0

Fixup kills for %bb.9
********** MI Scheduling **********
main:%bb.10 if.end34
  From: renamable $w1 = LDRWui renamable $x19, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
    To: Bcc 12, %bb.13, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w1 = LDRWui renamable $x19, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(1): Data Latency=4 Reg=$w1
SU(1):   dead $wzr = SUBSWri renamable $w1, 102, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.13, implicit $nzcv
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w1 = LDRWui renamable $x19, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w1, 102, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   renamable $w1 = LDRWui renamable $x19, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
SU(1):   dead $wzr = SUBSWri renamable $w1, 102, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.10 if.end34
  From: $x0 = ADRP target-flags(aarch64-page) @.str.26
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.26
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.26, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @.str.26
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.26, 0
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.26
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.26, 0

********** MI Scheduling **********
main:%bb.10 if.end34
  From: renamable $w1 = LDURWi $fp, -136 :: (dereferenceable load 4 from %ir.niter)
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $w1 = LDURWi $fp, -136 :: (dereferenceable load 4 from %ir.niter)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(1):   renamable $d0 = LDRDui renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (dereferenceable load 8 from @dt)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(2):   $x0 = ADRP target-flags(aarch64-page) @.str.25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x0
SU(3):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.25, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp, implicit-def dead $w0
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=4 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w1 = LDURWi $fp, -136 :: (dereferenceable load 4 from %ir.niter)
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 4
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d0 = LDRDui renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (dereferenceable load 8 from @dt)
  Ready @1c
  TopQ.A BotLatency SU(1) 4c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $x0 = ADRP target-flags(aarch64-page) @.str.25
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.25, 0
  Ready @3c
  TopQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   renamable $w1 = LDURWi $fp, -136 :: (dereferenceable load 4 from %ir.niter)
SU(1):   renamable $d0 = LDRDui renamable $x20, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (dereferenceable load 8 from @dt)
SU(2):   $x0 = ADRP target-flags(aarch64-page) @.str.25
SU(3):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.25, 0

********** MI Scheduling **********
main:%bb.10 if.end34
  From: renamable $w1, renamable $w2 = LDPWi renamable $x19, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $w1, renamable $w2 = LDPWi renamable $x19, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(1):   renamable $w3 = LDRWui renamable $x19, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(2):   $x0 = ADRP target-flags(aarch64-page) @.str.24
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x0
SU(3):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.24, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit-def $sp, implicit-def dead $w0
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=4 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w1, renamable $w2 = LDPWi renamable $x19, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 4
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w3 = LDRWui renamable $x19, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  Ready @1c
  TopQ.A BotLatency SU(1) 4c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $x0 = ADRP target-flags(aarch64-page) @.str.24
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.24, 0
  Ready @3c
  TopQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   renamable $w1, renamable $w2 = LDPWi renamable $x19, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
SU(1):   renamable $w3 = LDRWui renamable $x19, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
SU(2):   $x0 = ADRP target-flags(aarch64-page) @.str.24
SU(3):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.24, 0

Fixup kills for %bb.10
********** MI Scheduling **********
main:%bb.11 if.end34
  From: renamable $w8 = LDRWui renamable $x19, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
    To: Bcc 12, %bb.13, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui renamable $x19, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 102, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.13, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui renamable $x19, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 102, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   renamable $w8 = LDRWui renamable $x19, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
SU(1):   dead $wzr = SUBSWri renamable $w8, 102, 0, implicit-def $nzcv

Fixup kills for %bb.11
********** MI Scheduling **********
main:%bb.12 if.end34
  From: renamable $w8 = LDRWui renamable $x19, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
    To: Bcc 11, %bb.15, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui renamable $x19, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 103, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 11, %bb.15, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui renamable $x19, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 103, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   renamable $w8 = LDRWui renamable $x19, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
SU(1):   dead $wzr = SUBSWri renamable $w8, 103, 0, implicit-def $nzcv

Fixup kills for %bb.12
********** MI Scheduling **********
main:%bb.13 if.then42
  From: $x0 = ADRP target-flags(aarch64-page) @.str.28
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.28
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.28, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @.str.28
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.28, 0
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.28
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.28, 0

********** MI Scheduling **********
main:%bb.13 if.then42
  From: $x8 = ADRP target-flags(aarch64-page) @grid_points + 4
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   $x8 = ADRP target-flags(aarch64-page) @grid_points + 4
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @grid_points + 4, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(2): Data Latency=1 Reg=$x8
SU(2):   renamable $w2, renamable $w3 = LDPWi renamable $x8, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 2
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(3):   $x0 = ADRP target-flags(aarch64-page) @.str.27
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x0
SU(4):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.27, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit-def $sp, implicit-def dead $w0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $x8 = ADRP target-flags(aarch64-page) @grid_points + 4
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(3) ORDER                              
  Cand SU(1) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @grid_points + 4, 0
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 6
  Cand SU(3) ORDER                              
  Cand SU(2) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $w2, renamable $w3 = LDPWi renamable $x8, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  Ready @2c
  TopQ.A TopLatency SU(2) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $x0 = ADRP target-flags(aarch64-page) @.str.27
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.27, 0
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   $x8 = ADRP target-flags(aarch64-page) @grid_points + 4
SU(1):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @grid_points + 4, 0
SU(2):   renamable $w2, renamable $w3 = LDPWi renamable $x8, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
SU(3):   $x0 = ADRP target-flags(aarch64-page) @.str.27
SU(4):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.27, 0

Fixup kills for %bb.13
********** MI Scheduling **********
main:%bb.14 if.end158
  From: $fp, $lr = frame-destroy LDPXi $sp, 12 :: (load 8 from %stack.18), (load 8 from %stack.17)
    To: early-clobber $sp, $d8 = frame-destroy LDRDpost $sp(tied-def 0), 112 :: (load 8 from %stack.29)
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   $fp, $lr = frame-destroy LDPXi $sp, 12 :: (load 8 from %stack.18), (load 8 from %stack.17)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(1):   $x20, $x19 = frame-destroy LDPXi $sp, 10 :: (load 8 from %stack.20), (load 8 from %stack.19)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(2):   $x22, $x21 = frame-destroy LDPXi $sp, 8 :: (load 8 from %stack.22), (load 8 from %stack.21)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(3):   $x24, $x23 = frame-destroy LDPXi $sp, 6 :: (load 8 from %stack.24), (load 8 from %stack.23)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(4):   $x26, $x25 = frame-destroy LDPXi $sp, 4 :: (load 8 from %stack.26), (load 8 from %stack.25)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(5):   $x28, $x27 = frame-destroy LDPXi $sp, 2 :: (load 8 from %stack.28), (load 8 from %stack.27)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
ExitSU:   early-clobber $sp, $d8 = frame-destroy LDRDpost $sp(tied-def 0), 112 :: (load 8 from %stack.29)
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=3 Artificial
    SU(4): Ord  Latency=3 Artificial
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path: (PGS-RR) 3
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 
  TopQ.A RemainingLatency 0 + 0c > CritPath 3
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $fp, $lr = frame-destroy LDPXi $sp, 12 :: (load 8 from %stack.18), (load 8 from %stack.17)
  Ready @0c
  TopQ.A BotLatency SU(0) 3c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 1 2 3 4 
  TopQ.A RemainingLatency 0 + 1c > CritPath 3
  Cand SU(5) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) $x20, $x19 = frame-destroy LDPXi $sp, 10 :: (load 8 from %stack.20), (load 8 from %stack.19)
  Ready @1c
  TopQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 2 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 3
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) $x22, $x21 = frame-destroy LDPXi $sp, 8 :: (load 8 from %stack.22), (load 8 from %stack.21)
  Ready @2c
  TopQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 3
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) $x24, $x23 = frame-destroy LDPXi $sp, 6 :: (load 8 from %stack.24), (load 8 from %stack.23)
  Ready @3c
  TopQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 
  TopQ.A RemainingLatency 0 + 4c > CritPath 3
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) $x26, $x25 = frame-destroy LDPXi $sp, 4 :: (load 8 from %stack.26), (load 8 from %stack.25)
  Ready @4c
  TopQ.A BotLatency SU(4) 3c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $x28, $x27 = frame-destroy LDPXi $sp, 2 :: (load 8 from %stack.28), (load 8 from %stack.27)
  Ready @5c
  TopQ.A BotLatency SU(5) 3c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   $fp, $lr = frame-destroy LDPXi $sp, 12 :: (load 8 from %stack.18), (load 8 from %stack.17)
SU(1):   $x20, $x19 = frame-destroy LDPXi $sp, 10 :: (load 8 from %stack.20), (load 8 from %stack.19)
SU(2):   $x22, $x21 = frame-destroy LDPXi $sp, 8 :: (load 8 from %stack.22), (load 8 from %stack.21)
SU(3):   $x24, $x23 = frame-destroy LDPXi $sp, 6 :: (load 8 from %stack.24), (load 8 from %stack.23)
SU(4):   $x26, $x25 = frame-destroy LDPXi $sp, 4 :: (load 8 from %stack.26), (load 8 from %stack.25)
SU(5):   $x28, $x27 = frame-destroy LDPXi $sp, 2 :: (load 8 from %stack.28), (load 8 from %stack.27)

********** MI Scheduling **********
main:%bb.14 if.end158
  From: STURWi $wzr, $fp, -116 :: (store 4 into %ir.retval)
    To: $sp = frame-destroy ADDXri $sp, 448, 0
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   STURWi $wzr, $fp, -116 :: (store 4 into %ir.retval)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $w0 = ORRWrs $wzr, $wzr, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
ExitSU:   $sp = frame-destroy ADDXri $sp, 448, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 0
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STURWi $wzr, $fp, -116 :: (store 4 into %ir.retval)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w0 = ORRWrs $wzr, $wzr, 0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   STURWi $wzr, $fp, -116 :: (store 4 into %ir.retval)
SU(1):   $w0 = ORRWrs $wzr, $wzr, 0

Fixup kills for %bb.14
********** MI Scheduling **********
main:%bb.15 if.end45
  From: renamable $w8 = SUBWri killed renamable $w1, 2, 0
    To: BL @set_constants, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
 RegionInstrs: 12
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = SUBWri renamable $w1, 2, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(8): Out  Latency=1
    SU(7): Data Latency=1 Reg=$w8
SU(1):   renamable $x9 = ADRP target-flags(aarch64-page) @nx2
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(9): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x9
SU(2):   $x10 = ADRP target-flags(aarch64-page) @grid_points + 4
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x10
SU(3):   renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @grid_points + 4, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 6
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x10
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x10
SU(4):   renamable $x11 = ADRP target-flags(aarch64-page) @ny2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(10): Data Latency=1 Reg=$x11
SU(5):   renamable $w12, renamable $w10 = LDPWi renamable $x10, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 2
  Height             : 5
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x10
  Successors:
    SU(8): Data Latency=4 Reg=$w12
    SU(9): Data Latency=4 Reg=$w10
SU(6):   renamable $x13 = ADRP target-flags(aarch64-page) @nz2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(11): Data Latency=1 Reg=$x13
SU(7):   STRWui renamable $w8, renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @nx2 :: (store 4 into @nx2)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=$x9
    SU(0): Data Latency=1 Reg=$w8
  Successors:
    SU(8): Anti Latency=0
    SU(9): Anti Latency=0
SU(8):   renamable $w8 = SUBWri renamable $w12, 2, 0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(7): Anti Latency=0
    SU(5): Data Latency=4 Reg=$w12
    SU(0): Out  Latency=1
  Successors:
    SU(10): Data Latency=1 Reg=$w8
SU(9):   renamable $w9 = SUBWri renamable $w10, 2, 0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(7): Anti Latency=0
    SU(5): Data Latency=4 Reg=$w10
    SU(1): Out  Latency=1
  Successors:
    SU(11): Data Latency=1 Reg=$w9
SU(10):   STRWui renamable $w8, renamable $x11, target-flags(aarch64-pageoff, aarch64-nc) @ny2 :: (store 4 into @ny2)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=$w8
    SU(4): Data Latency=1 Reg=$x11
SU(11):   STRWui renamable $w9, renamable $x13, target-flags(aarch64-pageoff, aarch64-nc) @nz2 :: (store 4 into @nz2)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=$w9
    SU(6): Data Latency=1 Reg=$x13
ExitSU:   BL @set_constants, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 4 6 
  TopQ.A RemainingLatency 0 + 0c > CritPath 7
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x10 = ADRP target-flags(aarch64-page) @grid_points + 4
  Ready @0c
  TopQ.A BotLatency SU(2) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 4 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 7
  Cand SU(0) ORDER                              
  Cand SU(3) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @grid_points + 4, 0
  Ready @1c
  TopQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 4 5 
  TopQ.A RemainingLatency 0 + 2c > CritPath 7
  Cand SU(0) ORDER                              
  Cand SU(5) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $w12, renamable $w10 = LDPWi renamable $x10, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  Ready @2c
  TopQ.A TopLatency SU(5) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 7
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w8 = SUBWri renamable $w1, 2, 0
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 1 6 
  TopQ.A RemainingLatency 0 + 4c > CritPath 7
  Cand SU(4) ORDER                              
  Cand SU(1) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x9 = ADRP target-flags(aarch64-page) @nx2
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 6 7 
  TopQ.A RemainingLatency 0 + 5c > CritPath 7
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) renamable $x11 = ADRP target-flags(aarch64-page) @ny2
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 6 
  TopQ.A RemainingLatency 0 + 6c > CritPath 7
  Cand SU(7) ORDER                              
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) renamable $x13 = ADRP target-flags(aarch64-page) @nz2
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) STRWui renamable $w8, renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @nx2 :: (store 4 into @nx2)
  Ready @7c
  TopQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 9 
  TopQ.A RemainingLatency 0 + 8c > CritPath 7
  Cand SU(8) ORDER                              
Pick Top ORDER     
Scheduling SU(8) renamable $w8 = SUBWri renamable $w12, 2, 0
  Ready @8c
  TopQ.A TopLatency SU(8) 6c
  TopQ.A BotLatency SU(8) 1c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 10 
  TopQ.A RemainingLatency 0 + 9c > CritPath 7
  Cand SU(9) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(9) renamable $w9 = SUBWri renamable $w10, 2, 0
  Ready @9c
  TopQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 11 
  TopQ.A RemainingLatency 0 + 10c > CritPath 7
  Cand SU(10) ORDER                              
Pick Top ORDER     
Scheduling SU(10) STRWui renamable $w8, renamable $x11, target-flags(aarch64-pageoff, aarch64-nc) @ny2 :: (store 4 into @ny2)
  Ready @10c
  TopQ.A TopLatency SU(10) 7c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 
Pick Top ONLY1     
Scheduling SU(11) STRWui renamable $w9, renamable $x13, target-flags(aarch64-pageoff, aarch64-nc) @nz2 :: (store 4 into @nz2)
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.15 ***
SU(2):   $x10 = ADRP target-flags(aarch64-page) @grid_points + 4
SU(3):   renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @grid_points + 4, 0
SU(5):   renamable $w12, renamable $w10 = LDPWi renamable $x10, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
SU(0):   renamable $w8 = SUBWri renamable $w1, 2, 0
SU(1):   renamable $x9 = ADRP target-flags(aarch64-page) @nx2
SU(4):   renamable $x11 = ADRP target-flags(aarch64-page) @ny2
SU(6):   renamable $x13 = ADRP target-flags(aarch64-page) @nz2
SU(7):   STRWui renamable $w8, renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @nx2 :: (store 4 into @nx2)
SU(8):   renamable $w8 = SUBWri renamable $w12, 2, 0
SU(9):   renamable $w9 = SUBWri renamable $w10, 2, 0
SU(10):   STRWui renamable $w8, renamable $x11, target-flags(aarch64-pageoff, aarch64-nc) @ny2 :: (store 4 into @ny2)
SU(11):   STRWui renamable $w9, renamable $x13, target-flags(aarch64-pageoff, aarch64-nc) @nz2 :: (store 4 into @nz2)

Fixup kills for %bb.15
********** MI Scheduling **********
main:%bb.16 for.cond
  From: STURWi renamable $w8, $fp, -132 :: (store 4 into %ir.i)
    To: Bcc 12, %bb.18, implicit $nzcv
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   STURWi renamable $w8, $fp, -132 :: (store 4 into %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Anti Latency=0
SU(1):   $w8 = ORRWrs $wzr, renamable $w8, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Predecessors:
    SU(0): Anti Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   dead $wzr = SUBSWri renamable $w8, 15, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.18, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURWi renamable $w8, $fp, -132 :: (store 4 into %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w8 = ORRWrs $wzr, renamable $w8, 0
  Ready @1c
  TopQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) dead $wzr = SUBSWri renamable $w8, 15, 0, implicit-def $nzcv
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.16 ***
SU(0):   STURWi renamable $w8, $fp, -132 :: (store 4 into %ir.i)
SU(1):   $w8 = ORRWrs $wzr, renamable $w8, 0
SU(2):   dead $wzr = SUBSWri renamable $w8, 15, 0, implicit-def $nzcv

Fixup kills for %bb.16
********** MI Scheduling **********
main:%bb.17 for.body
  From: renamable $w8 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
    To: B %bb.16
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
ExitSU:   B %bb.16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   renamable $w8 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0

Fixup kills for %bb.17
Fixup kills for %bb.18
********** MI Scheduling **********
main:%bb.19 for.cond49
  From: STURWi renamable $w8, $fp, -132 :: (store 4 into %ir.i)
    To: Bcc 12, %bb.21, implicit $nzcv
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   STURWi renamable $w8, $fp, -132 :: (store 4 into %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Anti Latency=0
SU(1):   $w8 = ORRWrs $wzr, renamable $w8, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Predecessors:
    SU(0): Anti Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   dead $wzr = SUBSWri renamable $w8, 15, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.21, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURWi renamable $w8, $fp, -132 :: (store 4 into %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w8 = ORRWrs $wzr, renamable $w8, 0
  Ready @1c
  TopQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) dead $wzr = SUBSWri renamable $w8, 15, 0, implicit-def $nzcv
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   STURWi renamable $w8, $fp, -132 :: (store 4 into %ir.i)
SU(1):   $w8 = ORRWrs $wzr, renamable $w8, 0
SU(2):   dead $wzr = SUBSWri renamable $w8, 15, 0, implicit-def $nzcv

Fixup kills for %bb.19
********** MI Scheduling **********
main:%bb.20 for.body51
  From: renamable $w8 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
    To: B %bb.19
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
ExitSU:   B %bb.19
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   renamable $w8 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0

Fixup kills for %bb.20
********** MI Scheduling **********
main:%bb.21 for.end54
  From: STURWi killed renamable $w20, $fp, -140 :: (store 4 into %ir.step)
    To: End RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   STURWi renamable $w20, $fp, -140 :: (store 4 into %ir.step)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(4): Anti Latency=0
SU(1):   $w22 = MOVZWi 26215, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$w22
SU(2):   $w22 = MOVKWi $w22(tied-def 0), 26214, 16, implicit-def $x22
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$w22
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $w23 = MOVZWi 20, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $x20 = ADRP target-flags(aarch64-page) @.str.29
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Predecessors:
    SU(0): Anti Latency=0
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x20
SU(5):   renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @.str.29, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x20
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) STURWi renamable $w20, $fp, -140 :: (store 4 into %ir.step)
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 1 4 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(3) ORDER                              
  Cand SU(1) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $w22 = MOVZWi 26215, 0
  Ready @1c
  TopQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 4 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(3) ORDER                              
  Cand SU(4) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) $x20 = ADRP target-flags(aarch64-page) @.str.29
  Ready @2c
  TopQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 2 5 
  TopQ.A RemainingLatency 0 + 3c > CritPath 2
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) $w22 = MOVKWi $w22(tied-def 0), 26214, 16, implicit-def $x22
  Ready @3c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 5 
  TopQ.A RemainingLatency 0 + 4c > CritPath 2
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) $w23 = MOVZWi 20, 0
  Ready @4c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @.str.29, 0
  Ready @5c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.21 ***
SU(0):   STURWi renamable $w20, $fp, -140 :: (store 4 into %ir.step)
SU(1):   $w22 = MOVZWi 26215, 0
SU(4):   $x20 = ADRP target-flags(aarch64-page) @.str.29
SU(2):   $w22 = MOVKWi $w22(tied-def 0), 26214, 16, implicit-def $x22
SU(3):   $w23 = MOVZWi 20, 0
SU(5):   renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @.str.29, 0

********** MI Scheduling **********
main:%bb.21 for.end54
  From: $w0 = MOVZWi 1, 0
    To: BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $w0 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(1):   $w20 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
ExitSU:   BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $w0 = MOVZWi 1, 0
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w20 = MOVZWi 1, 0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.21 ***
SU(0):   $w0 = MOVZWi 1, 0
SU(1):   $w20 = MOVZWi 1, 0

Fixup kills for %bb.21
********** MI Scheduling **********
main:%bb.22 for.cond55
  From: renamable $w8, renamable $w9 = LDPWi $fp, -35 :: (dereferenceable load 4 from %ir.step), (dereferenceable load 4 from %ir.niter)
    To: Bcc 12, %bb.27, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8, renamable $w9 = LDPWi $fp, -35 :: (dereferenceable load 4 from %ir.step), (dereferenceable load 4 from %ir.niter)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
    SU(1): Data Latency=4 Reg=$w9
SU(1):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
    SU(0): Data Latency=4 Reg=$w9
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.27, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8, renamable $w9 = LDPWi $fp, -35 :: (dereferenceable load 4 from %ir.step), (dereferenceable load 4 from %ir.niter)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.22 ***
SU(0):   renamable $w8, renamable $w9 = LDPWi $fp, -35 :: (dereferenceable load 4 from %ir.step), (dereferenceable load 4 from %ir.niter)
SU(1):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv

Fixup kills for %bb.22
********** MI Scheduling **********
main:%bb.23 for.body57
  From: renamable $x8 = LDURSWi $fp, -140 :: (dereferenceable load 4 from %ir.step)
    To: CBZW killed renamable $w9, %bb.25
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURSWi $fp, -140 :: (dereferenceable load 4 from %ir.step)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(5): Data Latency=4 Reg=$w8
    ExitSU: Ord  Latency=4 Artificial
    SU(1): Data Latency=4 Reg=$x8
SU(1):   renamable $x9 = MADDXrrr renamable $x8, renamable $x22, $xzr
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x9
    SU(2): Data Latency=1 Reg=$x9
SU(2):   renamable $x10 = UBFMXri renamable $x9, 63, 63
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(1): Data Latency=1 Reg=$x9
  Successors:
    SU(4): Data Latency=1 Reg=$w10
    SU(4): Data Latency=0 Reg=$x10
    SU(3): Anti Latency=0
SU(3):   renamable $x9 = SBFMXri renamable $x9, 35, 63
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(2): Anti Latency=0
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x9
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$w9
    SU(4): Data Latency=0 Reg=$x9
SU(4):   $w9 = ADDWrs renamable $w9, renamable $w10, 0, implicit $x10, implicit $x9
  # preds left       : 5
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 2
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$w9
    SU(3): Data Latency=0 Reg=$x9
    SU(2): Data Latency=1 Reg=$w10
    SU(2): Data Latency=0 Reg=$x10
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$w9
SU(5):   renamable $w9 = MSUBWrrr renamable $w9, renamable $w23, renamable $w8
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$w9
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   CBZW killed renamable $w9, %bb.25
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 8
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = LDURSWi $fp, -140 :: (dereferenceable load 4 from %ir.step)
  Ready @0c
  TopQ.A BotLatency SU(0) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x9 = MADDXrrr renamable $x8, renamable $x22, $xzr
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x10 = UBFMXri renamable $x9, 63, 63
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $x9 = SBFMXri renamable $x9, 35, 63
  Ready @6c
  TopQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $w9 = ADDWrs renamable $w9, renamable $w10, 0, implicit $x10, implicit $x9
  Ready @7c
  TopQ.A TopLatency SU(4) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $w9 = MSUBWrrr renamable $w9, renamable $w23, renamable $w8
  Ready @8c
  TopQ.A TopLatency SU(5) 7c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.23 ***
SU(0):   renamable $x8 = LDURSWi $fp, -140 :: (dereferenceable load 4 from %ir.step)
SU(1):   renamable $x9 = MADDXrrr renamable $x8, renamable $x22, $xzr
SU(2):   renamable $x10 = UBFMXri renamable $x9, 63, 63
SU(3):   renamable $x9 = SBFMXri renamable $x9, 35, 63
SU(4):   $w9 = ADDWrs renamable $w9, renamable $w10, 0, implicit $x10, implicit $x9
SU(5):   renamable $w9 = MSUBWrrr renamable $w9, renamable $w23, renamable $w8

Fixup kills for %bb.23
Fixup kills for %bb.24
********** MI Scheduling **********
main:%bb.25 if.then61
  From: renamable $w1 = LDURWi $fp, -140 :: (dereferenceable load 4 from %ir.step)
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w1 = LDURWi $fp, -140 :: (dereferenceable load 4 from %ir.step)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(1):   $x0 = ORRXrs $xzr, $x20, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w1 = LDURWi $fp, -140 :: (dereferenceable load 4 from %ir.step)
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ORRXrs $xzr, $x20, 0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   renamable $w1 = LDURWi $fp, -140 :: (dereferenceable load 4 from %ir.step)
SU(1):   $x0 = ORRXrs $xzr, $x20, 0

Fixup kills for %bb.25
********** MI Scheduling **********
main:%bb.26 if.end63
  From: renamable $w8 = LDURWi $fp, -140 :: (dereferenceable load 4 from %ir.step)
    To: B %bb.22
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -140 :: (dereferenceable load 4 from %ir.step)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STURWi renamable $w8, $fp, -140 :: (store 4 into %ir.step)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.22
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -140 :: (dereferenceable load 4 from %ir.step)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w8, $fp, -140 :: (store 4 into %ir.step)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.26 ***
SU(0):   renamable $w8 = LDURWi $fp, -140 :: (dereferenceable load 4 from %ir.step)
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
SU(2):   STURWi renamable $w8, $fp, -140 :: (store 4 into %ir.step)

Fixup kills for %bb.26
********** MI Scheduling **********
main:%bb.27 for.end66
  From: renamable $d0 = LDRDui renamable $x25, 35 :: (dereferenceable load 8 from %ir.tmax)
    To: Bcc 0, %bb.29, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDRDui renamable $x25, 35 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$d0
SU(1):   FCMPDri renamable $d0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$d0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 0, %bb.29, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $d0 = LDRDui renamable $x25, 35 :: (dereferenceable load 8 from %ir.tmax)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) FCMPDri renamable $d0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   renamable $d0 = LDRDui renamable $x25, 35 :: (dereferenceable load 8 from %ir.tmax)
SU(1):   FCMPDri renamable $d0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.27 for.end66
  From: renamable $w0 = LDURWi $fp, -136 :: (dereferenceable load 4 from %ir.niter)
    To: BL @verify, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit $x2, implicit-def $sp
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $w0 = LDURWi $fp, -136 :: (dereferenceable load 4 from %ir.niter)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(1):   STRDui renamable $d0, renamable $x25, 35 :: (store 8 into %ir.tmax)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   $x1 = ADDXri $sp, 232, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $x2 = ADDXri $sp, 236, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @verify, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit $x2, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w0 = LDURWi $fp, -136 :: (dereferenceable load 4 from %ir.niter)
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 4
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) $x1 = ADDXri $sp, 232, 0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 1 
  TopQ.A RemainingLatency 0 + 2c > CritPath 4
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) $x2 = ADDXri $sp, 236, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRDui renamable $d0, renamable $x25, 35 :: (store 8 into %ir.tmax)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   renamable $w0 = LDURWi $fp, -136 :: (dereferenceable load 4 from %ir.niter)
SU(2):   $x1 = ADDXri $sp, 232, 0
SU(3):   $x2 = ADDXri $sp, 236, 0
SU(1):   STRDui renamable $d0, renamable $x25, 35 :: (store 8 into %ir.tmax)

Fixup kills for %bb.27
********** MI Scheduling **********
main:%bb.28 if.then69
  From: renamable $w8, renamable $w9 = LDPWi renamable $x19, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
    To: B %bb.30
 RegionInstrs: 38
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8, renamable $w9 = LDPWi renamable $x19, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  # preds left       : 0
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=4 Reg=$w8
    SU(10): Data Latency=4 Reg=$w8
    SU(12): Out  Latency=1
    SU(11): Data Latency=4 Reg=$w9
    SU(10): Data Latency=4 Reg=$w9
SU(1):   renamable $w10 = LDRWui renamable $x19, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(17): Out  Latency=1
    SU(16): Data Latency=4 Reg=$w10
    SU(15): Data Latency=4 Reg=$w10
SU(2):   renamable $x11 = ADRP target-flags(aarch64-page) %const.0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 16
  Successors:
    SU(4): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x11
SU(3):   renamable $d0 = LDRDui renamable $x11, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 15
  Predecessors:
    SU(2): Data Latency=1 Reg=$x11
  Successors:
    SU(23): Out  Latency=1
    SU(23): Data Latency=4 Reg=$d0
    SU(4): Anti Latency=0
SU(4):   renamable $x11 = ADRP target-flags(aarch64-page) %const.1
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 15
  Predecessors:
    SU(3): Anti Latency=0
    SU(2): Out  Latency=1
  Successors:
    SU(6): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x11
SU(5):   renamable $d1 = LDRDui renamable $x11, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 2
  Height             : 14
  Predecessors:
    SU(4): Data Latency=1 Reg=$x11
  Successors:
    SU(25): Out  Latency=1
    SU(32): Out  Latency=1
    SU(25): Data Latency=4 Reg=$d1
    SU(6): Anti Latency=0
SU(6):   $x11 = MOVZXi 33920, 32
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 14
  Predecessors:
    SU(5): Anti Latency=0
    SU(4): Out  Latency=1
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x11
SU(7):   $x11 = MOVKXi $x11(tied-def 0), 16686, 48
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 13
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x11
  Successors:
    SU(10): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x11
SU(8):   renamable $d2 = FMOVDi 8
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 10
  Successors:
    SU(21): Out  Latency=1
    SU(21): Data Latency=1 Reg=$d2
SU(9):   $d3 = FMOVXDr $x11
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(7): Data Latency=1 Reg=$x11
  Successors:
    SU(19): Out  Latency=1
    SU(19): Data Latency=1 Reg=$d3
    SU(10): Anti Latency=0
SU(10):   renamable $w11 = nsw MADDWrrr renamable $w8, renamable $w9, $wzr
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(9): Anti Latency=0
    SU(7): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
    SU(0): Data Latency=4 Reg=$w9
  Successors:
    SU(15): Out  Latency=1
    SU(15): Data Latency=1 Reg=$w11
    SU(11): Anti Latency=0
    SU(12): Anti Latency=0
SU(11):   $w8 = ADDWrs renamable $w8, renamable $w9, 0
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(10): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
    SU(0): Data Latency=4 Reg=$w9
  Successors:
    SU(16): Out  Latency=1
    SU(16): Data Latency=1 Reg=$w8
    SU(12): Anti Latency=0
SU(12):   $x9 = MOVZXi 28224, 32
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(11): Anti Latency=0
    SU(10): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x9
SU(13):   $x9 = MOVKXi $x9(tied-def 0), 16582, 48
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 7
  Predecessors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x9
  Successors:
    SU(28): Data Latency=1 Reg=$x9
SU(14):   renamable $d4 = LDRDui renamable $x25, 35 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(20): Out  Latency=1
    SU(19): Data Latency=4 Reg=$d4
SU(15):   renamable $w11 = nsw MADDWrrr renamable $w11, renamable $w10, $wzr
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$w11
    SU(1): Data Latency=4 Reg=$w10
  Successors:
    SU(34): Data Latency=1 Reg=$w11
    SU(22): Data Latency=1 Reg=$w11
    SU(17): Anti Latency=0
SU(16):   $w8 = ADDWrs renamable $w8, renamable $w10, 0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 11
  Predecessors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$w8
    SU(1): Data Latency=4 Reg=$w10
  Successors:
    SU(20): Data Latency=1 Reg=$w8
    SU(17): Anti Latency=0
SU(17):   renamable $x10 = ADRP target-flags(aarch64-page) %const.2
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(16): Anti Latency=0
    SU(15): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    SU(26): Data Latency=1 Reg=$x10
SU(18):   renamable $s5 = LDURSi $fp, -136, implicit-def $d5 :: (dereferenceable load 4 from %ir.niter)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(32): Data Latency=4 Reg=$d5
SU(19):   renamable $d3 = FMULDrr renamable $d4, renamable $d3
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(9): Data Latency=1 Reg=$d3
    SU(9): Out  Latency=1
    SU(14): Data Latency=4 Reg=$d4
  Successors:
    SU(36): Data Latency=1 Reg=$d3
    SU(20): Anti Latency=0
SU(20):   renamable $d4 = SCVTFUWDri renamable $w8
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 10
  Predecessors:
    SU(19): Anti Latency=0
    SU(16): Data Latency=1 Reg=$w8
    SU(14): Out  Latency=1
  Successors:
    SU(22): Out  Latency=1
    SU(21): Data Latency=1 Reg=$d4
SU(21):   renamable $d2 = FDIVDrr renamable $d4, renamable $d2
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 9
  Predecessors:
    SU(20): Data Latency=1 Reg=$d4
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$d2
  Successors:
    SU(37): Data Latency=1 Reg=$d2
    SU(29): Data Latency=1 Reg=$d2
    SU(24): Data Latency=1 Reg=$d2
    SU(22): Anti Latency=0
SU(22):   renamable $d4 = SCVTFUWDri renamable $w11
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 9
  Predecessors:
    SU(21): Anti Latency=0
    SU(20): Out  Latency=1
    SU(15): Data Latency=1 Reg=$w11
  Successors:
    SU(24): Out  Latency=1
    SU(23): Data Latency=1 Reg=$d4
SU(23):   renamable $d0 = FMULDrr renamable $d4, renamable $d0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 8
  Predecessors:
    SU(22): Data Latency=1 Reg=$d4
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d0
  Successors:
    SU(27): Out  Latency=1
    SU(27): Data Latency=1 Reg=$d0
    SU(24): Anti Latency=0
SU(24):   renamable $d4 = FMULDrr renamable $d2, renamable $d2
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 8
  Predecessors:
    SU(23): Anti Latency=0
    SU(22): Out  Latency=1
    SU(21): Data Latency=1 Reg=$d2
  Successors:
    SU(26): Out  Latency=1
    SU(25): Data Latency=1 Reg=$d4
SU(25):   renamable $d1 = FMULDrr renamable $d4, renamable $d1
  # preds left       : 3
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 7
  Predecessors:
    SU(24): Data Latency=1 Reg=$d4
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$d1
  Successors:
    SU(28): Out  Latency=1
    SU(32): Out  Latency=1
    SU(27): Data Latency=1 Reg=$d1
    SU(26): Anti Latency=0
    SU(32): Anti Latency=0
SU(26):   renamable $d4 = LDRDui renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 7
  Predecessors:
    SU(25): Anti Latency=0
    SU(24): Out  Latency=1
    SU(17): Data Latency=1 Reg=$x10
  Successors:
    SU(31): Data Latency=4 Reg=$d4
SU(27):   renamable $d0 = FADDDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 6
  Predecessors:
    SU(25): Data Latency=1 Reg=$d1
    SU(23): Out  Latency=1
    SU(23): Data Latency=1 Reg=$d0
  Successors:
    SU(30): Out  Latency=1
    SU(30): Data Latency=1 Reg=$d0
    SU(28): Anti Latency=0
    SU(32): Anti Latency=0
SU(28):   $d1 = FMOVXDr $x9
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 6
  Predecessors:
    SU(27): Anti Latency=0
    SU(25): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x9
  Successors:
    SU(29): Out  Latency=1
    SU(32): Out  Latency=1
    SU(29): Data Latency=1 Reg=$d1
SU(29):   renamable $d1 = FMULDrr renamable $d2, renamable $d1
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 5
  Predecessors:
    SU(28): Out  Latency=1
    SU(28): Data Latency=1 Reg=$d1
    SU(21): Data Latency=1 Reg=$d2
  Successors:
    SU(32): Out  Latency=1
    SU(30): Data Latency=1 Reg=$d1
    SU(32): Anti Latency=0
SU(30):   renamable $d0 = FADDDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 4
  Predecessors:
    SU(29): Data Latency=1 Reg=$d1
    SU(27): Out  Latency=1
    SU(27): Data Latency=1 Reg=$d0
  Successors:
    SU(31): Out  Latency=1
    SU(31): Data Latency=1 Reg=$d0
    SU(32): Anti Latency=0
SU(31):   renamable $d0 = FADDDrr renamable $d0, renamable $d4
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 3
  Predecessors:
    SU(30): Out  Latency=1
    SU(30): Data Latency=1 Reg=$d0
    SU(26): Data Latency=4 Reg=$d4
  Successors:
    SU(35): Out  Latency=1
    SU(35): Data Latency=1 Reg=$d0
SU(32):   renamable $q1 = SSHLLv2i32_shift renamable $d5, 0
  # preds left       : 9
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 4
  Predecessors:
    SU(30): Anti Latency=0
    SU(29): Out  Latency=1
    SU(29): Anti Latency=0
    SU(28): Out  Latency=1
    SU(27): Anti Latency=0
    SU(25): Out  Latency=1
    SU(25): Anti Latency=0
    SU(18): Data Latency=4 Reg=$d5
    SU(5): Out  Latency=1
  Successors:
    SU(33): Out  Latency=1
    SU(33): Data Latency=1 Reg=$d1
    SU(33): Data Latency=0 Reg=$q1
SU(33):   renamable $d1 = SCVTFv1i64 renamable $d1, implicit $q1
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 3
  Predecessors:
    SU(32): Out  Latency=1
    SU(32): Data Latency=1 Reg=$d1
    SU(32): Data Latency=0 Reg=$q1
  Successors:
    SU(35): Data Latency=1 Reg=$d1
SU(34):   STURWi renamable $w11, $fp, -144 :: (store 4 into %ir.n3)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(15): Data Latency=1 Reg=$w11
SU(35):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 2
  Predecessors:
    SU(33): Data Latency=1 Reg=$d1
    SU(31): Out  Latency=1
    SU(31): Data Latency=1 Reg=$d0
  Successors:
    SU(36): Out  Latency=1
    SU(36): Data Latency=1 Reg=$d0
SU(36):   renamable $d0 = FDIVDrr renamable $d0, renamable $d3
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 1
  Predecessors:
    SU(35): Out  Latency=1
    SU(35): Data Latency=1 Reg=$d0
    SU(19): Data Latency=1 Reg=$d3
  Successors:
    SU(37): Data Latency=1 Reg=$d0
SU(37):   STPDi renamable $d2, renamable $d0, renamable $x25, 36 :: (store 8 into %ir.t), (store 8 into %ir.mflops)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(36): Data Latency=1 Reg=$d0
    SU(21): Data Latency=1 Reg=$d2
ExitSU:   B %bb.30
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 16
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 8 14 18 
  TopQ.A RemainingLatency 0 + 0c > CritPath 16
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w8, renamable $w9 = LDPWi renamable $x19, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  Ready @0c
  TopQ.A BotLatency SU(0) 16c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 18 1 2 8 14 
  TopQ.A RemainingLatency 0 + 1c > CritPath 16
  Cand SU(18) ORDER                              
  Cand SU(1) TOP-PATH                  15 cycles 
  Cand SU(2) TOP-PATH                  16 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x11 = ADRP target-flags(aarch64-page) %const.0
  Ready @1c
  TopQ.A BotLatency SU(2) 16c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 18 1 14 8 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 16
  Cand SU(18) ORDER                              
  Cand SU(1) TOP-PATH                  15 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w10 = LDRWui renamable $x19, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 18 3 14 8 
  TopQ.A RemainingLatency 0 + 3c > CritPath 16
  Cand SU(18) ORDER                              
  Cand SU(3) TOP-PATH                  15 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d0 = LDRDui renamable $x11, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  Ready @3c
  TopQ.A TopLatency SU(3) 1c
  TopQ.A BotLatency SU(3) 15c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 18 8 14 4 
  TopQ.A RemainingLatency 0 + 4c > CritPath 16
  Cand SU(18) ORDER                              
  Cand SU(8) TOP-PATH                  10 cycles 
  Cand SU(14) TOP-PATH                  14 cycles 
  Cand SU(4) TOP-PATH                  15 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $x11 = ADRP target-flags(aarch64-page) %const.1
  Ready @4c
  TopQ.A BotLatency SU(4) 15c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 18 8 14 5 
  TopQ.A RemainingLatency 0 + 5c > CritPath 16
  Cand SU(18) ORDER                              
  Cand SU(8) TOP-PATH                  10 cycles 
  Cand SU(14) TOP-PATH                  14 cycles 
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $d1 = LDRDui renamable $x11, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  Ready @5c
  TopQ.A TopLatency SU(5) 2c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 18 8 14 6 
  TopQ.A RemainingLatency 0 + 6c > CritPath 16
  Cand SU(18) ORDER                              
  Cand SU(8) TOP-PATH                  10 cycles 
  Cand SU(14) TOP-PATH                  14 cycles 
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) $x11 = MOVZXi 33920, 32
  Ready @6c
  TopQ.A BotLatency SU(6) 14c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 18 8 14 7 
  TopQ.A RemainingLatency 0 + 7c > CritPath 16
  Cand SU(18) ORDER                              
  Cand SU(8) TOP-PATH                  10 cycles 
  Cand SU(14) TOP-PATH                  14 cycles 
Pick Top TOP-PATH  
Scheduling SU(14) renamable $d4 = LDRDui renamable $x25, 35 :: (dereferenceable load 8 from %ir.tmax)
  Ready @7c
  TopQ.A BotLatency SU(14) 14c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 18 8 7 
  TopQ.A RemainingLatency 0 + 8c > CritPath 16
  Cand SU(18) ORDER                              
  Cand SU(8) TOP-PATH                  10 cycles 
  Cand SU(7) TOP-PATH                  13 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) $x11 = MOVKXi $x11(tied-def 0), 16686, 48
  Ready @8c
  TopQ.A TopLatency SU(7) 3c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 18 8 9 
  TopQ.A RemainingLatency 0 + 9c > CritPath 16
  Cand SU(18) ORDER                              
  Cand SU(8) TOP-PATH                  10 cycles 
  Cand SU(9) TOP-PATH                  12 cycles 
Pick Top TOP-PATH  
Scheduling SU(9) $d3 = FMOVXDr $x11
  Ready @9c
  TopQ.A TopLatency SU(9) 4c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 19 
Queue TopQ.A: 18 8 10 
  TopQ.A RemainingLatency 0 + 10c > CritPath 16
  Cand SU(18) ORDER                              
  Cand SU(8) TOP-PATH                  10 cycles 
  Cand SU(10) TOP-PATH                  12 cycles 
Pick Top TOP-PATH  
Scheduling SU(10) renamable $w11 = nsw MADDWrrr renamable $w8, renamable $w9, $wzr
  Ready @10c
  TopQ.A BotLatency SU(10) 12c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 18 8 15 11 19 
  TopQ.A RemainingLatency 0 + 11c > CritPath 16
  Cand SU(18) ORDER                              
  Cand SU(8) TOP-PATH                  10 cycles 
  Cand SU(11) TOP-PATH                  12 cycles 
Pick Top TOP-PATH  
Scheduling SU(11) $w8 = ADDWrs renamable $w8, renamable $w9, 0
  Ready @11c
  TopQ.A BotLatency SU(11) 12c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 18 8 15 19 16 12 
  TopQ.A RemainingLatency 0 + 12c > CritPath 16
  Cand SU(18) ORDER                              
  Cand SU(8) TOP-PATH                  10 cycles 
  Cand SU(16) TOP-PATH                  11 cycles 
Pick Top TOP-PATH  
Scheduling SU(16) $w8 = ADDWrs renamable $w8, renamable $w10, 0
  Ready @12c
  TopQ.A TopLatency SU(16) 5c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 18 8 15 19 12 
  TopQ.A RemainingLatency 0 + 13c > CritPath 16
  Cand SU(18) ORDER                              
  Cand SU(8) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $d2 = FMOVDi 8
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 18 12 15 19 
  TopQ.A RemainingLatency 0 + 14c > CritPath 16
  Cand SU(18) ORDER                              
  Cand SU(12) ORDER                              
  Cand SU(15) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(15) renamable $w11 = nsw MADDWrrr renamable $w11, renamable $w10, $wzr
  Ready @14c
  TopQ.A BotLatency SU(15) 10c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 18 12 19 34 17 
  TopQ.A RemainingLatency 0 + 15c > CritPath 16
  Cand SU(18) ORDER                              
  Cand SU(12) ORDER                              
  Cand SU(19) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(19) renamable $d3 = FMULDrr renamable $d4, renamable $d3
  Ready @15c
  TopQ.A BotLatency SU(19) 10c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 18 12 17 34 20 
  TopQ.A RemainingLatency 0 + 16c > CritPath 16
  Cand SU(18) ORDER                              
  Cand SU(12) ORDER                              
  Cand SU(20) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(20) renamable $d4 = SCVTFUWDri renamable $w8
  Ready @16c
  TopQ.A TopLatency SU(20) 6c
  TopQ.A BotLatency SU(20) 10c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 18 12 17 34 21 
  TopQ.A RemainingLatency 0 + 17c > CritPath 16
  Cand SU(18) ORDER                              
  Cand SU(12) ORDER                              
  Cand SU(21) TOP-PATH                  9 cycles 
Pick Top TOP-PATH  
Scheduling SU(21) renamable $d2 = FDIVDrr renamable $d4, renamable $d2
  Ready @17c
  TopQ.A TopLatency SU(21) 7c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 18 12 17 34 22 
  TopQ.A RemainingLatency 0 + 18c > CritPath 16
  Cand SU(18) ORDER                              
  Cand SU(12) ORDER                              
  Cand SU(22) TOP-PATH                  9 cycles 
Pick Top TOP-PATH  
Scheduling SU(22) renamable $d4 = SCVTFUWDri renamable $w11
  Ready @18c
  TopQ.A BotLatency SU(22) 9c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 18 12 17 34 23 
  TopQ.A RemainingLatency 0 + 19c > CritPath 16
  Cand SU(18) ORDER                              
  Cand SU(12) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(12) $x9 = MOVZXi 28224, 32
  Ready @19c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 18 23 17 34 13 
  TopQ.A RemainingLatency 0 + 20c > CritPath 16
  Cand SU(18) ORDER                              
  Cand SU(17) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(17) renamable $x10 = ADRP target-flags(aarch64-page) %const.2
  Ready @20c
  TopQ.A BotLatency SU(17) 8c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 18 23 13 34 
  TopQ.A RemainingLatency 0 + 21c > CritPath 16
  Cand SU(18) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(18) renamable $s5 = LDURSi $fp, -136, implicit-def $d5 :: (dereferenceable load 4 from %ir.niter)
  Ready @21c
  TopQ.A BotLatency SU(18) 8c
  *** Max MOps 1 at cycle 21
Cycle: 22 TopQ.A
TopQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 23 13 
  TopQ.A RemainingLatency 0 + 22c > CritPath 16
  Cand SU(34) ORDER                              
  Cand SU(23) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(23) renamable $d0 = FMULDrr renamable $d4, renamable $d0
  Ready @22c
  TopQ.A TopLatency SU(23) 8c
  TopQ.A BotLatency SU(23) 8c
  *** Max MOps 1 at cycle 22
Cycle: 23 TopQ.A
TopQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 13 24 
  TopQ.A RemainingLatency 0 + 23c > CritPath 16
  Cand SU(34) ORDER                              
  Cand SU(13) TOP-PATH                  7 cycles 
  Cand SU(24) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(24) renamable $d4 = FMULDrr renamable $d2, renamable $d2
  Ready @23c
  TopQ.A BotLatency SU(24) 8c
  *** Max MOps 1 at cycle 23
Cycle: 24 TopQ.A
TopQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 13 25 
  TopQ.A RemainingLatency 0 + 24c > CritPath 16
  Cand SU(34) ORDER                              
  Cand SU(13) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(13) $x9 = MOVKXi $x9(tied-def 0), 16582, 48
  Ready @24c
  *** Max MOps 1 at cycle 24
Cycle: 25 TopQ.A
TopQ.A @25c
  Retired: 25
  Executed: 25c
  Critical: 25c, 25 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 25 
  TopQ.A RemainingLatency 0 + 25c > CritPath 16
  Cand SU(34) ORDER                              
  Cand SU(25) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(25) renamable $d1 = FMULDrr renamable $d4, renamable $d1
  Ready @25c
  TopQ.A TopLatency SU(25) 9c
  TopQ.A BotLatency SU(25) 7c
  *** Max MOps 1 at cycle 25
Cycle: 26 TopQ.A
TopQ.A @26c
  Retired: 26
  Executed: 26c
  Critical: 26c, 26 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 27 26 
  TopQ.A RemainingLatency 0 + 26c > CritPath 16
  Cand SU(34) ORDER                              
  Cand SU(27) TOP-PATH                  6 cycles 
  Cand SU(26) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(26) renamable $d4 = LDRDui renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  Ready @26c
  TopQ.A BotLatency SU(26) 7c
  *** Max MOps 1 at cycle 26
Cycle: 27 TopQ.A
TopQ.A @27c
  Retired: 27
  Executed: 27c
  Critical: 27c, 27 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 27 
  TopQ.A RemainingLatency 0 + 27c > CritPath 16
  Cand SU(34) ORDER                              
  Cand SU(27) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(27) renamable $d0 = FADDDrr renamable $d0, renamable $d1
  Ready @27c
  TopQ.A TopLatency SU(27) 10c
  *** Max MOps 1 at cycle 27
Cycle: 28 TopQ.A
TopQ.A @28c
  Retired: 28
  Executed: 28c
  Critical: 28c, 28 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 28 
  TopQ.A RemainingLatency 0 + 28c > CritPath 16
  Cand SU(34) ORDER                              
  Cand SU(28) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(28) $d1 = FMOVXDr $x9
  Ready @28c
  TopQ.A BotLatency SU(28) 6c
  *** Max MOps 1 at cycle 28
Cycle: 29 TopQ.A
TopQ.A @29c
  Retired: 29
  Executed: 29c
  Critical: 29c, 29 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 29 
  TopQ.A RemainingLatency 0 + 29c > CritPath 16
  Cand SU(34) ORDER                              
  Cand SU(29) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(29) renamable $d1 = FMULDrr renamable $d2, renamable $d1
  Ready @29c
  TopQ.A TopLatency SU(29) 11c
  *** Max MOps 1 at cycle 29
Cycle: 30 TopQ.A
TopQ.A @30c
  Retired: 30
  Executed: 30c
  Critical: 30c, 30 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 30 
  TopQ.A RemainingLatency 0 + 30c > CritPath 16
  Cand SU(34) ORDER                              
  Cand SU(30) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(30) renamable $d0 = FADDDrr renamable $d0, renamable $d1
  Ready @30c
  TopQ.A TopLatency SU(30) 12c
  *** Max MOps 1 at cycle 30
Cycle: 31 TopQ.A
TopQ.A @31c
  Retired: 31
  Executed: 31c
  Critical: 31c, 31 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 31 32 
  TopQ.A RemainingLatency 0 + 31c > CritPath 16
  Cand SU(34) ORDER                              
  Cand SU(31) TOP-PATH                  3 cycles 
  Cand SU(32) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(32) renamable $q1 = SSHLLv2i32_shift renamable $d5, 0
  Ready @31c
  TopQ.A BotLatency SU(32) 4c
  *** Max MOps 1 at cycle 31
Cycle: 32 TopQ.A
TopQ.A @32c
  Retired: 32
  Executed: 32c
  Critical: 32c, 32 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 31 33 
  TopQ.A RemainingLatency 0 + 32c > CritPath 16
  Cand SU(34) ORDER                              
  Cand SU(31) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(31) renamable $d0 = FADDDrr renamable $d0, renamable $d4
  Ready @32c
  TopQ.A TopLatency SU(31) 13c
  *** Max MOps 1 at cycle 32
Cycle: 33 TopQ.A
TopQ.A @33c
  Retired: 33
  Executed: 33c
  Critical: 33c, 33 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 33 
  TopQ.A RemainingLatency 0 + 33c > CritPath 16
  Cand SU(34) ORDER                              
  Cand SU(33) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(33) renamable $d1 = SCVTFv1i64 renamable $d1, implicit $q1
  Ready @33c
  TopQ.A BotLatency SU(33) 3c
  *** Max MOps 1 at cycle 33
Cycle: 34 TopQ.A
TopQ.A @34c
  Retired: 34
  Executed: 34c
  Critical: 34c, 34 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 35 
  TopQ.A RemainingLatency 0 + 34c > CritPath 16
  Cand SU(34) ORDER                              
  Cand SU(35) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(35) renamable $d0 = FMULDrr renamable $d0, renamable $d1
  Ready @34c
  TopQ.A TopLatency SU(35) 14c
  *** Max MOps 1 at cycle 34
Cycle: 35 TopQ.A
TopQ.A @35c
  Retired: 35
  Executed: 35c
  Critical: 35c, 35 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 36 
  TopQ.A RemainingLatency 0 + 35c > CritPath 16
  Cand SU(34) ORDER                              
  Cand SU(36) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(36) renamable $d0 = FDIVDrr renamable $d0, renamable $d3
  Ready @35c
  TopQ.A TopLatency SU(36) 15c
  *** Max MOps 1 at cycle 35
Cycle: 36 TopQ.A
TopQ.A @36c
  Retired: 36
  Executed: 36c
  Critical: 36c, 36 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 34 37 
  TopQ.A RemainingLatency 0 + 36c > CritPath 16
  Cand SU(34) ORDER                              
Pick Top ORDER     
Scheduling SU(34) STURWi renamable $w11, $fp, -144 :: (store 4 into %ir.n3)
  Ready @36c
  *** Max MOps 1 at cycle 36
Cycle: 37 TopQ.A
TopQ.A @37c
  Retired: 37
  Executed: 37c
  Critical: 37c, 37 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 
Pick Top ONLY1     
Scheduling SU(37) STPDi renamable $d2, renamable $d0, renamable $x25, 36 :: (store 8 into %ir.t), (store 8 into %ir.mflops)
  Ready @37c
  TopQ.A TopLatency SU(37) 16c
  *** Max MOps 1 at cycle 37
Cycle: 38 TopQ.A
TopQ.A @38c
  Retired: 38
  Executed: 38c
  Critical: 38c, 38 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.28 ***
SU(0):   renamable $w8, renamable $w9 = LDPWi renamable $x19, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
SU(2):   renamable $x11 = ADRP target-flags(aarch64-page) %const.0
SU(1):   renamable $w10 = LDRWui renamable $x19, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
SU(3):   renamable $d0 = LDRDui renamable $x11, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
SU(4):   renamable $x11 = ADRP target-flags(aarch64-page) %const.1
SU(5):   renamable $d1 = LDRDui renamable $x11, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
SU(6):   $x11 = MOVZXi 33920, 32
SU(14):   renamable $d4 = LDRDui renamable $x25, 35 :: (dereferenceable load 8 from %ir.tmax)
SU(7):   $x11 = MOVKXi $x11(tied-def 0), 16686, 48
SU(9):   $d3 = FMOVXDr $x11
SU(10):   renamable $w11 = nsw MADDWrrr renamable $w8, renamable $w9, $wzr
SU(11):   $w8 = ADDWrs renamable $w8, renamable $w9, 0
SU(16):   $w8 = ADDWrs renamable $w8, renamable $w10, 0
SU(8):   renamable $d2 = FMOVDi 8
SU(15):   renamable $w11 = nsw MADDWrrr renamable $w11, renamable $w10, $wzr
SU(19):   renamable $d3 = FMULDrr renamable $d4, renamable $d3
SU(20):   renamable $d4 = SCVTFUWDri renamable $w8
SU(21):   renamable $d2 = FDIVDrr renamable $d4, renamable $d2
SU(22):   renamable $d4 = SCVTFUWDri renamable $w11
SU(12):   $x9 = MOVZXi 28224, 32
SU(17):   renamable $x10 = ADRP target-flags(aarch64-page) %const.2
SU(18):   renamable $s5 = LDURSi $fp, -136, implicit-def $d5 :: (dereferenceable load 4 from %ir.niter)
SU(23):   renamable $d0 = FMULDrr renamable $d4, renamable $d0
SU(24):   renamable $d4 = FMULDrr renamable $d2, renamable $d2
SU(13):   $x9 = MOVKXi $x9(tied-def 0), 16582, 48
SU(25):   renamable $d1 = FMULDrr renamable $d4, renamable $d1
SU(26):   renamable $d4 = LDRDui renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
SU(27):   renamable $d0 = FADDDrr renamable $d0, renamable $d1
SU(28):   $d1 = FMOVXDr $x9
SU(29):   renamable $d1 = FMULDrr renamable $d2, renamable $d1
SU(30):   renamable $d0 = FADDDrr renamable $d0, renamable $d1
SU(32):   renamable $q1 = SSHLLv2i32_shift renamable $d5, 0
SU(31):   renamable $d0 = FADDDrr renamable $d0, renamable $d4
SU(33):   renamable $d1 = SCVTFv1i64 renamable $d1, implicit $q1
SU(35):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
SU(36):   renamable $d0 = FDIVDrr renamable $d0, renamable $d3
SU(34):   STURWi renamable $w11, $fp, -144 :: (store 4 into %ir.n3)
SU(37):   STPDi renamable $d2, renamable $d0, renamable $x25, 36 :: (store 8 into %ir.t), (store 8 into %ir.mflops)

Fixup kills for %bb.28
Fixup kills for %bb.29
********** MI Scheduling **********
main:%bb.30 if.end85
  From: renamable $w1 = LDRSBWui $sp, 232 :: (dereferenceable load 1 from %ir.Class, align 4)
    To: BL @print_results, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit $w4, implicit $w5, implicit $d0, implicit $d1, implicit $x6, implicit $w7, implicit-def $sp
 RegionInstrs: 34
ScheduleDAGMI::schedule starting
SU(0):   renamable $w1 = LDRSBWui $sp, 232 :: (dereferenceable load 1 from %ir.Class, align 4)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(1):   renamable $w2, renamable $w3 = LDPWi renamable $x19, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(2):   renamable $w4 = LDRWui renamable $x19, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(3):   renamable $w5 = LDURWi $fp, -136 :: (dereferenceable load 4 from %ir.niter)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(4):   renamable $d0 = LDRDui renamable $x25, 35 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(5):   renamable $d1 = LDRDui renamable $x25, 37 :: (dereferenceable load 8 from %ir.mflops)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(6):   renamable $w7 = LDRWui $sp, 59 :: (dereferenceable load 4 from %ir.verified)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(7):   $x8 = ADRP target-flags(aarch64-page) @.str.40
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x8
SU(8):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.40, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x8
  Successors:
    SU(22): Out  Latency=1
    SU(21): Data Latency=1 Reg=$x8
SU(9):   $x9 = ADRP target-flags(aarch64-page) @.str.39
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x9
SU(10):   renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.39, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x9
  Successors:
    SU(25): Out  Latency=1
    SU(21): Data Latency=1 Reg=$x9
SU(11):   $x10 = ADRP target-flags(aarch64-page) @.str.38
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x10
SU(12):   renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.38, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x10
  Successors:
    SU(24): Data Latency=1 Reg=$x10
SU(13):   $x11 = ADRP target-flags(aarch64-page) @.str.37
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(14): Out  Latency=1
    SU(14): Data Latency=1 Reg=$x11
SU(14):   renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @.str.37, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x11
  Successors:
    SU(24): Data Latency=1 Reg=$x11
SU(15):   $x12 = ADRP target-flags(aarch64-page) @.str.36
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(16): Out  Latency=1
    SU(16): Data Latency=1 Reg=$x12
SU(16):   renamable $x12 = ADDXri $x12, target-flags(aarch64-pageoff, aarch64-nc) @.str.36, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(15): Out  Latency=1
    SU(15): Data Latency=1 Reg=$x12
  Successors:
    SU(27): Data Latency=1 Reg=$x12
SU(17):   $x13 = ADRP target-flags(aarch64-page) @.str.35
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(18): Out  Latency=1
    SU(18): Data Latency=1 Reg=$x13
SU(18):   renamable $x13 = ADDXri $x13, target-flags(aarch64-pageoff, aarch64-nc) @.str.35, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(17): Out  Latency=1
    SU(17): Data Latency=1 Reg=$x13
  Successors:
    SU(27): Data Latency=1 Reg=$x13
SU(19):   $x14 = ADRP target-flags(aarch64-page) @.str.34
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(20): Out  Latency=1
    SU(20): Data Latency=1 Reg=$x14
SU(20):   renamable $x14 = ADDXri $x14, target-flags(aarch64-pageoff, aarch64-nc) @.str.34, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(19): Out  Latency=1
    SU(19): Data Latency=1 Reg=$x14
  Successors:
    SU(30): Data Latency=1 Reg=$x14
SU(21):   STPXi renamable $x9, renamable $x8, $sp, 7 :: (store 8 into stack + 64), (store 8 into stack + 56)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(10): Data Latency=1 Reg=$x9
    SU(8): Data Latency=1 Reg=$x8
  Successors:
    SU(25): Anti Latency=0
    SU(22): Anti Latency=0
SU(22):   $x8 = ADRP target-flags(aarch64-page) @.str.33
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(21): Anti Latency=0
    SU(8): Out  Latency=1
  Successors:
    SU(23): Out  Latency=1
    SU(23): Data Latency=1 Reg=$x8
SU(23):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.33, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
    SU(22): Out  Latency=1
    SU(22): Data Latency=1 Reg=$x8
  Successors:
    SU(30): Data Latency=1 Reg=$x8
SU(24):   STPXi renamable $x11, renamable $x10, $sp, 5 :: (store 8 into stack + 48), (store 8 into stack + 40)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(14): Data Latency=1 Reg=$x11
    SU(12): Data Latency=1 Reg=$x10
SU(25):   $x9 = ADRP target-flags(aarch64-page) @.str.32
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(21): Anti Latency=0
    SU(10): Out  Latency=1
  Successors:
    SU(26): Out  Latency=1
    SU(26): Data Latency=1 Reg=$x9
SU(26):   renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.32, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
    SU(25): Out  Latency=1
    SU(25): Data Latency=1 Reg=$x9
  Successors:
    SU(33): Data Latency=1 Reg=$x9
SU(27):   STPXi renamable $x13, renamable $x12, $sp, 3 :: (store 8 into stack + 32), (store 8 into stack + 24)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(18): Data Latency=1 Reg=$x13
    SU(16): Data Latency=1 Reg=$x12
SU(28):   $x0 = ADRP target-flags(aarch64-page) @.str.30
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(29): Out  Latency=1
    SU(29): Data Latency=1 Reg=$x0
SU(29):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.30, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(28): Out  Latency=1
    SU(28): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(30):   STPXi renamable $x8, renamable $x14, $sp, 1 :: (store 8 into stack + 16), (store 8 into stack + 8)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(23): Data Latency=1 Reg=$x8
    SU(20): Data Latency=1 Reg=$x14
SU(31):   $x6 = ADRP target-flags(aarch64-page) @.str.31
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(32): Out  Latency=1
    SU(32): Data Latency=1 Reg=$x6
SU(32):   renamable $x6 = ADDXri $x6, target-flags(aarch64-pageoff, aarch64-nc) @.str.31, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(31): Out  Latency=1
    SU(31): Data Latency=1 Reg=$x6
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(33):   STRXui renamable $x9, $sp, 0 :: (store 8 into stack)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(26): Data Latency=1 Reg=$x9
ExitSU:   BL @print_results, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit $w4, implicit $w5, implicit $d0, implicit $d1, implicit $x6, implicit $w7, implicit-def $sp
  # preds left       : 9
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(32): Ord  Latency=1 Artificial
    SU(29): Ord  Latency=1 Artificial
    SU(6): Ord  Latency=4 Artificial
    SU(5): Ord  Latency=4 Artificial
    SU(4): Ord  Latency=4 Artificial
    SU(3): Ord  Latency=4 Artificial
    SU(2): Ord  Latency=4 Artificial
    SU(1): Ord  Latency=4 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 7 9 11 13 15 17 19 28 31 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w1 = LDRSBWui $sp, 232 :: (dereferenceable load 1 from %ir.Class, align 4)
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 31 1 2 3 4 5 6 7 9 11 13 15 17 19 28 
  TopQ.A RemainingLatency 0 + 1c > CritPath 4
  Cand SU(31) ORDER                              
  Cand SU(1) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w2, renamable $w3 = LDPWi renamable $x19, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  Ready @1c
  TopQ.A BotLatency SU(1) 4c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 31 28 2 3 4 5 6 7 9 11 13 15 17 19 
  TopQ.A RemainingLatency 0 + 2c > CritPath 4
  Cand SU(31) ORDER                              
  Cand SU(28) ORDER                              
  Cand SU(2) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $w4 = LDRWui renamable $x19, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  Ready @2c
  TopQ.A BotLatency SU(2) 4c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 31 28 19 3 4 5 6 7 9 11 13 15 17 
  TopQ.A RemainingLatency 0 + 3c > CritPath 4
  Cand SU(31) ORDER                              
  Cand SU(28) ORDER                              
  Cand SU(19) ORDER                              
  Cand SU(3) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $w5 = LDURWi $fp, -136 :: (dereferenceable load 4 from %ir.niter)
  Ready @3c
  TopQ.A BotLatency SU(3) 4c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 31 28 19 17 4 5 6 7 9 11 13 15 
  TopQ.A RemainingLatency 0 + 4c > CritPath 4
  Cand SU(31) ORDER                              
  Cand SU(28) ORDER                              
  Cand SU(19) ORDER                              
  Cand SU(17) ORDER                              
  Cand SU(4) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $d0 = LDRDui renamable $x25, 35 :: (dereferenceable load 8 from %ir.tmax)
  Ready @4c
  TopQ.A BotLatency SU(4) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 31 28 19 17 15 5 6 7 9 11 13 
  TopQ.A RemainingLatency 0 + 5c > CritPath 4
  Cand SU(31) ORDER                              
  Cand SU(28) ORDER                              
  Cand SU(19) ORDER                              
  Cand SU(17) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(5) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $d1 = LDRDui renamable $x25, 37 :: (dereferenceable load 8 from %ir.mflops)
  Ready @5c
  TopQ.A BotLatency SU(5) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 31 28 19 17 15 13 6 7 9 11 
  TopQ.A RemainingLatency 0 + 6c > CritPath 4
  Cand SU(31) ORDER                              
  Cand SU(28) ORDER                              
  Cand SU(19) ORDER                              
  Cand SU(17) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(13) ORDER                              
  Cand SU(6) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) renamable $w7 = LDRWui $sp, 59 :: (dereferenceable load 4 from %ir.verified)
  Ready @6c
  TopQ.A BotLatency SU(6) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 31 28 19 17 15 13 11 7 9 
  TopQ.A RemainingLatency 0 + 7c > CritPath 4
  Cand SU(31) ORDER                              
  Cand SU(28) ORDER                              
  Cand SU(19) ORDER                              
  Cand SU(17) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(13) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(7) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) $x8 = ADRP target-flags(aarch64-page) @.str.40
  Ready @7c
  TopQ.A BotLatency SU(7) 4c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 31 28 19 17 15 13 11 9 8 
  TopQ.A RemainingLatency 0 + 8c > CritPath 4
  Cand SU(31) ORDER                              
  Cand SU(28) ORDER                              
  Cand SU(19) ORDER                              
  Cand SU(17) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(13) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(9) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(9) $x9 = ADRP target-flags(aarch64-page) @.str.39
  Ready @8c
  TopQ.A BotLatency SU(9) 4c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 31 28 19 17 15 13 11 8 10 
  TopQ.A RemainingLatency 0 + 9c > CritPath 4
  Cand SU(31) ORDER                              
  Cand SU(28) ORDER                              
  Cand SU(19) ORDER                              
  Cand SU(17) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(13) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(8) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.40, 0
  Ready @9c
  TopQ.A TopLatency SU(8) 1c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 31 28 19 17 15 13 11 10 
  TopQ.A RemainingLatency 0 + 10c > CritPath 4
  Cand SU(31) ORDER                              
  Cand SU(28) ORDER                              
  Cand SU(19) ORDER                              
  Cand SU(17) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(13) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(10) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(10) renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.39, 0
  Ready @10c
  TopQ.A BotLatency SU(10) 3c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 31 28 19 17 15 13 11 21 
  TopQ.A RemainingLatency 0 + 11c > CritPath 4
  Cand SU(31) ORDER                              
  Cand SU(28) ORDER                              
  Cand SU(19) ORDER                              
  Cand SU(17) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(13) ORDER                              
  Cand SU(11) ORDER                              
Pick Top ORDER     
Scheduling SU(11) $x10 = ADRP target-flags(aarch64-page) @.str.38
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 31 28 19 17 15 13 21 12 
  TopQ.A RemainingLatency 0 + 12c > CritPath 4
  Cand SU(31) ORDER                              
  Cand SU(28) ORDER                              
  Cand SU(19) ORDER                              
  Cand SU(17) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(13) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(13) $x11 = ADRP target-flags(aarch64-page) @.str.37
  Ready @12c
  TopQ.A BotLatency SU(13) 2c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 31 28 19 17 15 12 21 14 
  TopQ.A RemainingLatency 0 + 13c > CritPath 4
  Cand SU(31) ORDER                              
  Cand SU(28) ORDER                              
  Cand SU(19) ORDER                              
  Cand SU(17) ORDER                              
  Cand SU(15) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(15) $x12 = ADRP target-flags(aarch64-page) @.str.36
  Ready @13c
  TopQ.A BotLatency SU(15) 2c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 31 28 19 17 14 12 21 16 
  TopQ.A RemainingLatency 0 + 14c > CritPath 4
  Cand SU(31) ORDER                              
  Cand SU(28) ORDER                              
  Cand SU(19) ORDER                              
  Cand SU(17) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(17) $x13 = ADRP target-flags(aarch64-page) @.str.35
  Ready @14c
  TopQ.A BotLatency SU(17) 2c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 31 28 19 16 14 12 21 18 
  TopQ.A RemainingLatency 0 + 15c > CritPath 4
  Cand SU(31) ORDER                              
  Cand SU(28) ORDER                              
  Cand SU(19) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(19) $x14 = ADRP target-flags(aarch64-page) @.str.34
  Ready @15c
  TopQ.A BotLatency SU(19) 2c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 31 28 18 16 14 12 21 20 
  TopQ.A RemainingLatency 0 + 16c > CritPath 4
  Cand SU(31) ORDER                              
  Cand SU(28) ORDER                              
  Cand SU(21) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(21) STPXi renamable $x9, renamable $x8, $sp, 7 :: (store 8 into stack + 64), (store 8 into stack + 56)
  Ready @16c
  TopQ.A TopLatency SU(21) 2c
  TopQ.A BotLatency SU(21) 2c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 31 28 18 16 14 12 20 25 22 
  TopQ.A RemainingLatency 0 + 17c > CritPath 4
  Cand SU(31) ORDER                              
  Cand SU(28) ORDER                              
  Cand SU(25) ORDER                              
  Cand SU(22) ORDER                              
Pick Top ORDER     
Scheduling SU(22) $x8 = ADRP target-flags(aarch64-page) @.str.33
  Ready @17c
  TopQ.A BotLatency SU(22) 2c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 31 28 18 16 14 12 20 25 23 
  TopQ.A RemainingLatency 0 + 18c > CritPath 4
  Cand SU(31) ORDER                              
  Cand SU(28) ORDER                              
  Cand SU(25) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(25) $x9 = ADRP target-flags(aarch64-page) @.str.32
  Ready @18c
  TopQ.A BotLatency SU(25) 2c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 31 28 18 16 14 12 20 23 26 
  TopQ.A RemainingLatency 0 + 19c > CritPath 4
  Cand SU(31) ORDER                              
  Cand SU(28) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(28) $x0 = ADRP target-flags(aarch64-page) @.str.30
  Ready @19c
  TopQ.A BotLatency SU(28) 2c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 31 26 18 16 14 12 20 23 29 
  TopQ.A RemainingLatency 0 + 20c > CritPath 4
  Cand SU(31) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(31) $x6 = ADRP target-flags(aarch64-page) @.str.31
  Ready @20c
  TopQ.A BotLatency SU(31) 2c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 29 26 18 16 14 12 20 23 32 
  TopQ.A RemainingLatency 0 + 21c > CritPath 4
  Cand SU(29) ORDER                              
  Cand SU(26) ORDER                              
  Cand SU(18) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(14) ORDER                              
  Cand SU(12) ORDER                              
Pick Top ORDER     
Scheduling SU(12) renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.38, 0
  Ready @21c
  *** Max MOps 1 at cycle 21
Cycle: 22 TopQ.A
TopQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 29 26 18 16 14 32 20 23 
  TopQ.A RemainingLatency 0 + 22c > CritPath 4
  Cand SU(29) ORDER                              
  Cand SU(26) ORDER                              
  Cand SU(18) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(14) ORDER                              
Pick Top ORDER     
Scheduling SU(14) renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @.str.37, 0
  Ready @22c
  TopQ.A BotLatency SU(14) 1c
  *** Max MOps 1 at cycle 22
Cycle: 23 TopQ.A
TopQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 29 26 18 16 23 32 20 24 
  TopQ.A RemainingLatency 0 + 23c > CritPath 4
  Cand SU(29) ORDER                              
  Cand SU(26) ORDER                              
  Cand SU(18) ORDER                              
  Cand SU(16) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(16) renamable $x12 = ADDXri $x12, target-flags(aarch64-pageoff, aarch64-nc) @.str.36, 0
  Ready @23c
  TopQ.A BotLatency SU(16) 1c
  *** Max MOps 1 at cycle 23
Cycle: 24 TopQ.A
TopQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 29 26 18 24 23 32 20 
  TopQ.A RemainingLatency 0 + 24c > CritPath 4
  Cand SU(29) ORDER                              
  Cand SU(26) ORDER                              
  Cand SU(18) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(18) renamable $x13 = ADDXri $x13, target-flags(aarch64-pageoff, aarch64-nc) @.str.35, 0
  Ready @24c
  TopQ.A BotLatency SU(18) 1c
  *** Max MOps 1 at cycle 24
Cycle: 25 TopQ.A
TopQ.A @25c
  Retired: 25
  Executed: 25c
  Critical: 25c, 25 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 29 26 20 24 23 32 27 
  TopQ.A RemainingLatency 0 + 25c > CritPath 4
  Cand SU(29) ORDER                              
  Cand SU(26) ORDER                              
  Cand SU(20) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(20) renamable $x14 = ADDXri $x14, target-flags(aarch64-pageoff, aarch64-nc) @.str.34, 0
  Ready @25c
  TopQ.A BotLatency SU(20) 1c
  *** Max MOps 1 at cycle 25
Cycle: 26 TopQ.A
TopQ.A @26c
  Retired: 26
  Executed: 26c
  Critical: 26c, 26 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 29 26 27 24 23 32 
  TopQ.A RemainingLatency 0 + 26c > CritPath 4
  Cand SU(29) ORDER                              
  Cand SU(26) ORDER                              
  Cand SU(23) ORDER                              
Pick Top ORDER     
Scheduling SU(23) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.33, 0
  Ready @26c
  TopQ.A TopLatency SU(23) 3c
  TopQ.A BotLatency SU(23) 1c
  *** Max MOps 1 at cycle 26
Cycle: 27 TopQ.A
TopQ.A @27c
  Retired: 27
  Executed: 27c
  Critical: 27c, 27 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 29 26 27 24 32 30 
  TopQ.A RemainingLatency 0 + 27c > CritPath 4
  Cand SU(29) ORDER                              
  Cand SU(26) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(26) renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.32, 0
  Ready @27c
  TopQ.A BotLatency SU(26) 1c
  *** Max MOps 1 at cycle 27
Cycle: 28 TopQ.A
TopQ.A @28c
  Retired: 28
  Executed: 28c
  Critical: 28c, 28 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 29 30 27 24 32 33 
  TopQ.A RemainingLatency 0 + 28c > CritPath 4
  Cand SU(29) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(29) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.30, 0
  Ready @28c
  TopQ.A BotLatency SU(29) 1c
  *** Max MOps 1 at cycle 28
Cycle: 29 TopQ.A
TopQ.A @29c
  Retired: 29
  Executed: 29c
  Critical: 29c, 29 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 33 30 27 24 32 
  TopQ.A RemainingLatency 0 + 29c > CritPath 4
  Cand SU(33) ORDER                              
  Cand SU(30) ORDER                              
  Cand SU(27) ORDER                              
  Cand SU(24) ORDER                              
  Cand SU(32) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(32) renamable $x6 = ADDXri $x6, target-flags(aarch64-pageoff, aarch64-nc) @.str.31, 0
  Ready @29c
  TopQ.A BotLatency SU(32) 1c
  *** Max MOps 1 at cycle 29
Cycle: 30 TopQ.A
TopQ.A @30c
  Retired: 30
  Executed: 30c
  Critical: 30c, 30 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 33 30 27 24 
  TopQ.A RemainingLatency 0 + 30c > CritPath 4
  Cand SU(33) ORDER                              
  Cand SU(30) ORDER                              
  Cand SU(27) ORDER                              
  Cand SU(24) ORDER                              
Pick Top ORDER     
Scheduling SU(24) STPXi renamable $x11, renamable $x10, $sp, 5 :: (store 8 into stack + 48), (store 8 into stack + 40)
  Ready @30c
  *** Max MOps 1 at cycle 30
Cycle: 31 TopQ.A
TopQ.A @31c
  Retired: 31
  Executed: 31c
  Critical: 31c, 31 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 33 30 27 
  TopQ.A RemainingLatency 0 + 31c > CritPath 4
  Cand SU(33) ORDER                              
  Cand SU(30) ORDER                              
  Cand SU(27) ORDER                              
Pick Top ORDER     
Scheduling SU(27) STPXi renamable $x13, renamable $x12, $sp, 3 :: (store 8 into stack + 32), (store 8 into stack + 24)
  Ready @31c
  *** Max MOps 1 at cycle 31
Cycle: 32 TopQ.A
TopQ.A @32c
  Retired: 32
  Executed: 32c
  Critical: 32c, 32 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 33 30 
  TopQ.A RemainingLatency 0 + 32c > CritPath 4
  Cand SU(33) ORDER                              
  Cand SU(30) ORDER                              
Pick Top ORDER     
Scheduling SU(30) STPXi renamable $x8, renamable $x14, $sp, 1 :: (store 8 into stack + 16), (store 8 into stack + 8)
  Ready @32c
  TopQ.A TopLatency SU(30) 4c
  *** Max MOps 1 at cycle 32
Cycle: 33 TopQ.A
TopQ.A @33c
  Retired: 33
  Executed: 33c
  Critical: 33c, 33 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 33 
Pick Top ONLY1     
Scheduling SU(33) STRXui renamable $x9, $sp, 0 :: (store 8 into stack)
  Ready @33c
  *** Max MOps 1 at cycle 33
Cycle: 34 TopQ.A
TopQ.A @34c
  Retired: 34
  Executed: 34c
  Critical: 34c, 34 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.30 ***
SU(0):   renamable $w1 = LDRSBWui $sp, 232 :: (dereferenceable load 1 from %ir.Class, align 4)
SU(1):   renamable $w2, renamable $w3 = LDPWi renamable $x19, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
SU(2):   renamable $w4 = LDRWui renamable $x19, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
SU(3):   renamable $w5 = LDURWi $fp, -136 :: (dereferenceable load 4 from %ir.niter)
SU(4):   renamable $d0 = LDRDui renamable $x25, 35 :: (dereferenceable load 8 from %ir.tmax)
SU(5):   renamable $d1 = LDRDui renamable $x25, 37 :: (dereferenceable load 8 from %ir.mflops)
SU(6):   renamable $w7 = LDRWui $sp, 59 :: (dereferenceable load 4 from %ir.verified)
SU(7):   $x8 = ADRP target-flags(aarch64-page) @.str.40
SU(9):   $x9 = ADRP target-flags(aarch64-page) @.str.39
SU(8):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.40, 0
SU(10):   renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.39, 0
SU(11):   $x10 = ADRP target-flags(aarch64-page) @.str.38
SU(13):   $x11 = ADRP target-flags(aarch64-page) @.str.37
SU(15):   $x12 = ADRP target-flags(aarch64-page) @.str.36
SU(17):   $x13 = ADRP target-flags(aarch64-page) @.str.35
SU(19):   $x14 = ADRP target-flags(aarch64-page) @.str.34
SU(21):   STPXi renamable $x9, renamable $x8, $sp, 7 :: (store 8 into stack + 64), (store 8 into stack + 56)
SU(22):   $x8 = ADRP target-flags(aarch64-page) @.str.33
SU(25):   $x9 = ADRP target-flags(aarch64-page) @.str.32
SU(28):   $x0 = ADRP target-flags(aarch64-page) @.str.30
SU(31):   $x6 = ADRP target-flags(aarch64-page) @.str.31
SU(12):   renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @.str.38, 0
SU(14):   renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @.str.37, 0
SU(16):   renamable $x12 = ADDXri $x12, target-flags(aarch64-pageoff, aarch64-nc) @.str.36, 0
SU(18):   renamable $x13 = ADDXri $x13, target-flags(aarch64-pageoff, aarch64-nc) @.str.35, 0
SU(20):   renamable $x14 = ADDXri $x14, target-flags(aarch64-pageoff, aarch64-nc) @.str.34, 0
SU(23):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @.str.33, 0
SU(26):   renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @.str.32, 0
SU(29):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.30, 0
SU(32):   renamable $x6 = ADDXri $x6, target-flags(aarch64-pageoff, aarch64-nc) @.str.31, 0
SU(24):   STPXi renamable $x11, renamable $x10, $sp, 5 :: (store 8 into stack + 48), (store 8 into stack + 40)
SU(27):   STPXi renamable $x13, renamable $x12, $sp, 3 :: (store 8 into stack + 32), (store 8 into stack + 24)
SU(30):   STPXi renamable $x8, renamable $x14, $sp, 1 :: (store 8 into stack + 16), (store 8 into stack + 8)
SU(33):   STRXui renamable $x9, $sp, 0 :: (store 8 into stack)

Fixup kills for %bb.30
********** MI Scheduling **********
main:%bb.31 if.then86
  From: $w8 = MOVZWi 1, 0
    To: End RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   $w8 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=$w8
SU(1):   STURWi renamable $w8, $fp, -132 :: (store 4 into %ir.i)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$w8
SU(2):   $x19 = ADDXri $sp, 240, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $w8 = MOVZWi 1, 0
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 1
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) $x19 = ADDXri $sp, 240, 0
  Ready @1c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STURWi renamable $w8, $fp, -132 :: (store 4 into %ir.i)
  Ready @2c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.31 ***
SU(0):   $w8 = MOVZWi 1, 0
SU(2):   $x19 = ADDXri $sp, 240, 0
SU(1):   STURWi renamable $w8, $fp, -132 :: (store 4 into %ir.i)

Fixup kills for %bb.31
********** MI Scheduling **********
main:%bb.32 for.cond87
  From: renamable $w8 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.34, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 15, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.34, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 15, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   renamable $w8 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri renamable $w8, 15, 0, implicit-def $nzcv

Fixup kills for %bb.32
********** MI Scheduling **********
main:%bb.33 for.body90
  From: renamable $x8 = LDURSWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
    To: B %bb.32
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURSWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x8
    SU(4): Ord  Latency=0 Memory
SU(1):   renamable $w9 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=$w9
    SU(4): Ord  Latency=0 Memory
SU(2):   STRDroX renamable $d0, renamable $x19, renamable $x8, 0, 1 :: (store 8 into %ir.arrayidx92)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(3): Anti Latency=0
SU(3):   renamable $w8 = nsw ADDWri renamable $w9, 1, 0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Anti Latency=0
    SU(1): Data Latency=4 Reg=$w9
    SU(0): Out  Latency=1
  Successors:
    SU(4): Data Latency=1 Reg=$w8
SU(4):   STURWi renamable $w8, $fp, -132 :: (store 4 into %ir.i)
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=$w8
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x8 = LDURSWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w9 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRDroX renamable $d0, renamable $x19, renamable $x8, 0, 1 :: (store 8 into %ir.arrayidx92)
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w8 = nsw ADDWri renamable $w9, 1, 0
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) STURWi renamable $w8, $fp, -132 :: (store 4 into %ir.i)
  Ready @6c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.33 ***
SU(0):   renamable $x8 = LDURSWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
SU(1):   renamable $w9 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
SU(2):   STRDroX renamable $d0, renamable $x19, renamable $x8, 0, 1 :: (store 8 into %ir.arrayidx92)
SU(3):   renamable $w8 = nsw ADDWri renamable $w9, 1, 0
SU(4):   STURWi renamable $w8, $fp, -132 :: (store 4 into %ir.i)

Fixup kills for %bb.33
********** MI Scheduling **********
main:%bb.34 for.end95
  From: renamable $d0 = LDRDui renamable $x25, 35 :: (dereferenceable load 8 from %ir.tmax)
    To: Bcc 1, %bb.36, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDRDui renamable $x25, 35 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$d0
SU(1):   FCMPDri renamable $d0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$d0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 1, %bb.36, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $d0 = LDRDui renamable $x25, 35 :: (dereferenceable load 8 from %ir.tmax)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) FCMPDri renamable $d0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.34 ***
SU(0):   renamable $d0 = LDRDui renamable $x25, 35 :: (dereferenceable load 8 from %ir.tmax)
SU(1):   FCMPDri renamable $d0, implicit-def $nzcv

Fixup kills for %bb.34
********** MI Scheduling **********
main:%bb.35 if.then98
  From: $x8 = MOVZXi 16368, 48
    To: End RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x8 = MOVZXi 16368, 48
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=$x8
SU(1):   STRXui renamable $x8, renamable $x25, 35 :: (store 8 into %ir.tmax)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x8 = MOVZXi 16368, 48
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRXui renamable $x8, renamable $x25, 35 :: (store 8 into %ir.tmax)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.35 ***
SU(0):   $x8 = MOVZXi 16368, 48
SU(1):   STRXui renamable $x8, renamable $x25, 35 :: (store 8 into %ir.tmax)

Fixup kills for %bb.35
********** MI Scheduling **********
main:%bb.36 if.end99
  From: $w8 = MOVZWi 1, 0
    To: End RegionInstrs: 17
ScheduleDAGMI::schedule starting
SU(0):   $w8 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(14): Data Latency=1 Reg=$w8
SU(1):   $x26 = ADDXri $sp, 96, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $x27 = ADDXri $sp, 240, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $x28 = MOVZXi 16473, 48
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $x19 = ADRP target-flags(aarch64-page) @.str.42
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x19
SU(5):   renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str.42, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(6):   $x20 = ADRP target-flags(aarch64-page) @.str.43
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x20
SU(7):   renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @.str.43, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x20
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(8):   $x21 = ADRP target-flags(aarch64-page) @.str.44
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x21
SU(9):   renamable $x21 = ADDXri $x21, target-flags(aarch64-pageoff, aarch64-nc) @.str.44, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x21
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(10):   $x22 = ADRP target-flags(aarch64-page) @.str.45
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x22
SU(11):   renamable $x22 = ADDXri $x22, target-flags(aarch64-pageoff, aarch64-nc) @.str.45, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x22
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(12):   $x23 = ADRP target-flags(aarch64-page) @.str.46
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x23
SU(13):   renamable $x23 = ADDXri $x23, target-flags(aarch64-pageoff, aarch64-nc) @.str.46, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x23
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(14):   STURWi renamable $w8, $fp, -132 :: (store 4 into %ir.i)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$w8
SU(15):   $x24 = ADRP target-flags(aarch64-page) @.str.47
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(16): Out  Latency=1
    SU(16): Data Latency=1 Reg=$x24
SU(16):   renamable $x24 = ADDXri $x24, target-flags(aarch64-pageoff, aarch64-nc) @.str.47, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(15): Out  Latency=1
    SU(15): Data Latency=1 Reg=$x24
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 6 8 10 12 15 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(4) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) $x19 = ADRP target-flags(aarch64-page) @.str.42
  Ready @0c
  TopQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 15 6 8 10 12 5 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(15) TOP-PATH                  2 cycles 
  Cand SU(6) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(6) $x20 = ADRP target-flags(aarch64-page) @.str.43
  Ready @1c
  TopQ.A BotLatency SU(6) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 15 5 8 10 12 7 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(15) TOP-PATH                  2 cycles 
  Cand SU(8) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(8) $x21 = ADRP target-flags(aarch64-page) @.str.44
  Ready @2c
  TopQ.A BotLatency SU(8) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 15 5 7 10 12 9 
  TopQ.A RemainingLatency 0 + 3c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(15) TOP-PATH                  2 cycles 
  Cand SU(10) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(10) $x22 = ADRP target-flags(aarch64-page) @.str.45
  Ready @3c
  TopQ.A BotLatency SU(10) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 15 5 7 9 12 11 
  TopQ.A RemainingLatency 0 + 4c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(15) TOP-PATH                  2 cycles 
  Cand SU(12) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(12) $x23 = ADRP target-flags(aarch64-page) @.str.46
  Ready @4c
  TopQ.A BotLatency SU(12) 2c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 15 5 7 9 11 13 
  TopQ.A RemainingLatency 0 + 5c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(15) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(15) $x24 = ADRP target-flags(aarch64-page) @.str.47
  Ready @5c
  TopQ.A BotLatency SU(15) 2c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 13 5 7 9 11 16 
  TopQ.A RemainingLatency 0 + 6c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $w8 = MOVZWi 1, 0
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 16 1 2 3 13 5 7 9 11 14 
  TopQ.A RemainingLatency 0 + 7c > CritPath 2
  Cand SU(16) ORDER                              
  Cand SU(1) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(1) $x26 = ADDXri $sp, 96, 0
  Ready @7c
  TopQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 16 14 2 3 13 5 7 9 11 
  TopQ.A RemainingLatency 0 + 8c > CritPath 2
  Cand SU(16) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) $x27 = ADDXri $sp, 240, 0
  Ready @8c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 16 14 11 3 13 5 7 9 
  TopQ.A RemainingLatency 0 + 9c > CritPath 2
  Cand SU(16) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) $x28 = MOVZXi 16473, 48
  Ready @9c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 16 14 11 9 13 5 7 
  TopQ.A RemainingLatency 0 + 10c > CritPath 2
  Cand SU(16) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str.42, 0
  Ready @10c
  TopQ.A TopLatency SU(5) 1c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 16 14 11 9 13 7 
  TopQ.A RemainingLatency 0 + 11c > CritPath 2
  Cand SU(16) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(7) ORDER                              
Pick Top ORDER     
Scheduling SU(7) renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @.str.43, 0
  Ready @11c
  TopQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 16 14 11 9 13 
  TopQ.A RemainingLatency 0 + 12c > CritPath 2
  Cand SU(16) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(9) ORDER                              
Pick Top ORDER     
Scheduling SU(9) renamable $x21 = ADDXri $x21, target-flags(aarch64-pageoff, aarch64-nc) @.str.44, 0
  Ready @12c
  TopQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 16 14 11 13 
  TopQ.A RemainingLatency 0 + 13c > CritPath 2
  Cand SU(16) ORDER                              
  Cand SU(11) ORDER                              
Pick Top ORDER     
Scheduling SU(11) renamable $x22 = ADDXri $x22, target-flags(aarch64-pageoff, aarch64-nc) @.str.45, 0
  Ready @13c
  TopQ.A BotLatency SU(11) 1c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 16 14 13 
  TopQ.A RemainingLatency 0 + 14c > CritPath 2
  Cand SU(16) ORDER                              
  Cand SU(13) ORDER                              
Pick Top ORDER     
Scheduling SU(13) renamable $x23 = ADDXri $x23, target-flags(aarch64-pageoff, aarch64-nc) @.str.46, 0
  Ready @14c
  TopQ.A BotLatency SU(13) 1c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 16 14 
  TopQ.A RemainingLatency 0 + 15c > CritPath 2
  Cand SU(16) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(16) renamable $x24 = ADDXri $x24, target-flags(aarch64-pageoff, aarch64-nc) @.str.47, 0
  Ready @15c
  TopQ.A BotLatency SU(16) 1c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 14 
Pick Top ONLY1     
Scheduling SU(14) STURWi renamable $w8, $fp, -132 :: (store 4 into %ir.i)
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.36 ***
SU(4):   $x19 = ADRP target-flags(aarch64-page) @.str.42
SU(6):   $x20 = ADRP target-flags(aarch64-page) @.str.43
SU(8):   $x21 = ADRP target-flags(aarch64-page) @.str.44
SU(10):   $x22 = ADRP target-flags(aarch64-page) @.str.45
SU(12):   $x23 = ADRP target-flags(aarch64-page) @.str.46
SU(15):   $x24 = ADRP target-flags(aarch64-page) @.str.47
SU(0):   $w8 = MOVZWi 1, 0
SU(1):   $x26 = ADDXri $sp, 96, 0
SU(2):   $x27 = ADDXri $sp, 240, 0
SU(3):   $x28 = MOVZXi 16473, 48
SU(5):   renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str.42, 0
SU(7):   renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @.str.43, 0
SU(9):   renamable $x21 = ADDXri $x21, target-flags(aarch64-pageoff, aarch64-nc) @.str.44, 0
SU(11):   renamable $x22 = ADDXri $x22, target-flags(aarch64-pageoff, aarch64-nc) @.str.45, 0
SU(13):   renamable $x23 = ADDXri $x23, target-flags(aarch64-pageoff, aarch64-nc) @.str.46, 0
SU(16):   renamable $x24 = ADDXri $x24, target-flags(aarch64-pageoff, aarch64-nc) @.str.47, 0
SU(14):   STURWi renamable $w8, $fp, -132 :: (store 4 into %ir.i)

********** MI Scheduling **********
main:%bb.36 if.end99
  From: $x0 = ADRP target-flags(aarch64-page) @.str.41
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.41
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.41, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @.str.41
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.41, 0
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.36 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @.str.41
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @.str.41, 0

Fixup kills for %bb.36
********** MI Scheduling **********
main:%bb.37 for.cond101
  From: renamable $w8 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.14, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 15, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.14, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 15, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.37 ***
SU(0):   renamable $w8 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri renamable $w8, 15, 0, implicit-def $nzcv

Fixup kills for %bb.37
********** MI Scheduling **********
main:%bb.38 for.body104
  From: renamable $w8 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 1, %bb.40, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 5, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 1, %bb.40, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 5, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   renamable $w8 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri renamable $w8, 5, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.38 for.body104
  From: renamable $x8 = LDURSWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 9
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURSWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x8
SU(1):   renamable $x8 = UBFMXri renamable $x8, 61, 60
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(4): Data Latency=1 Reg=$x8
    SU(2): Data Latency=1 Reg=$x8
SU(2):   renamable $d0 = LDRDroX renamable $x27, renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx110)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(6): Data Latency=4 Reg=$d0
SU(3):   renamable $d1 = LDRDui renamable $x25, 35 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$d1
SU(4):   renamable $x1 = LDRXroX renamable $x26, renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx106)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(5):   $d2 = FMOVXDr $x28
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$d2
SU(6):   renamable $d2 = FMULDrr renamable $d0, renamable $d2
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 2
  Predecessors:
    SU(2): Data Latency=4 Reg=$d0
    SU(5): Data Latency=1 Reg=$d2
    SU(5): Out  Latency=1
  Successors:
    SU(7): Data Latency=1 Reg=$d2
SU(7):   renamable $d1 = FDIVDrr renamable $d2, renamable $d1
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(6): Data Latency=1 Reg=$d2
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(8):   $x0 = ORRXrs $xzr, $x19, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w0
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=1 Artificial
    SU(7): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=4 Artificial
    SU(2): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 11
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 5 8 
  TopQ.A RemainingLatency 0 + 0c > CritPath 11
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDURSWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 11c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 8 3 5 
  TopQ.A RemainingLatency 0 + 1c > CritPath 11
  Cand SU(8) ORDER                              
  Cand SU(3) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d1 = LDRDui renamable $x25, 35 :: (dereferenceable load 8 from %ir.tmax)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 8 5 
  TopQ.A RemainingLatency 0 + 2c > CritPath 11
  Cand SU(8) ORDER                              
  Cand SU(5) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) $d2 = FMOVXDr $x28
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) $x0 = ORRXrs $xzr, $x19, 0
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x8 = UBFMXri renamable $x8, 61, 60
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 2 
  TopQ.A RemainingLatency 0 + 5c > CritPath 11
  Cand SU(4) ORDER                              
  Cand SU(2) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d0 = LDRDroX renamable $x27, renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx110)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $x1 = LDRXroX renamable $x26, renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx106)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 9 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $d2 = FMULDrr renamable $d0, renamable $d2
  Ready @9c
  TopQ.A TopLatency SU(6) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 8
  Executed: 10c
  Critical: 8c, 8 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $d1 = FDIVDrr renamable $d2, renamable $d1
  Ready @10c
  TopQ.A TopLatency SU(7) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 9
  Executed: 11c
  Critical: 9c, 9 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   renamable $x8 = LDURSWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
SU(3):   renamable $d1 = LDRDui renamable $x25, 35 :: (dereferenceable load 8 from %ir.tmax)
SU(5):   $d2 = FMOVXDr $x28
SU(8):   $x0 = ORRXrs $xzr, $x19, 0
SU(1):   renamable $x8 = UBFMXri renamable $x8, 61, 60
SU(2):   renamable $d0 = LDRDroX renamable $x27, renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx110)
SU(4):   renamable $x1 = LDRXroX renamable $x26, renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx106)
SU(6):   renamable $d2 = FMULDrr renamable $d0, renamable $d2
SU(7):   renamable $d1 = FDIVDrr renamable $d2, renamable $d1

Fixup kills for %bb.38
********** MI Scheduling **********
main:%bb.39 if.then116
  From: renamable $d0 = LDRDui renamable $x25, 23 :: (dereferenceable load 8 from %ir.arrayidx125)
    To: B %bb.44
 RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDRDui renamable $x25, 23 :: (dereferenceable load 8 from %ir.arrayidx125)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d0
SU(1):   renamable $d2, renamable $d1 = LDPDi renamable $x25, 35 :: (dereferenceable load 8 from %ir.t), (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(5): Data Latency=4 Reg=$d2
    SU(4): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d1
    SU(3): Ord  Latency=0 Memory
SU(2):   renamable $d0 = FSUBDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(1): Data Latency=4 Reg=$d1
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d0
  Successors:
    SU(4): Data Latency=1 Reg=$d0
    SU(3): Data Latency=1 Reg=$d0
    SU(4): Anti Latency=0
SU(3):   STRDui renamable $d0, renamable $x25, 36 :: (store 8 into %ir.t)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=$d0
    SU(1): Ord  Latency=0 Memory
SU(4):   renamable $d1 = FMULDrr renamable $d0, renamable $d8
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=$d0
    SU(2): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$d1
SU(5):   renamable $d1 = FDIVDrr renamable $d1, renamable $d2
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$d1
    SU(1): Data Latency=4 Reg=$d2
SU(6):   $x0 = ORRXrs $xzr, $x20, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(7):   $x1 = ORRXrs $xzr, $x22, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
ExitSU:   B %bb.44
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 7 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0 = LDRDui renamable $x25, 23 :: (dereferenceable load 8 from %ir.arrayidx125)
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 1 6 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(7) ORDER                              
  Cand SU(1) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d2, renamable $d1 = LDPDi renamable $x25, 35 :: (dereferenceable load 8 from %ir.t), (dereferenceable load 8 from %ir.tmax)
  Ready @1c
  TopQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 7 6 
  TopQ.A RemainingLatency 0 + 2c > CritPath 6
  Cand SU(7) ORDER                              
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) $x0 = ORRXrs $xzr, $x20, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) $x1 = ORRXrs $xzr, $x22, 0
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $d0 = FSUBDrr renamable $d0, renamable $d1
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 4 
  TopQ.A RemainingLatency 0 + 6c > CritPath 6
  Cand SU(3) ORDER                              
  Cand SU(4) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $d1 = FMULDrr renamable $d0, renamable $d8
  Ready @6c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 5 
  TopQ.A RemainingLatency 0 + 7c > CritPath 6
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) STRDui renamable $d0, renamable $x25, 36 :: (store 8 into %ir.t)
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $d1 = FDIVDrr renamable $d1, renamable $d2
  Ready @8c
  TopQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 8
  Executed: 9c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.39 ***
SU(0):   renamable $d0 = LDRDui renamable $x25, 23 :: (dereferenceable load 8 from %ir.arrayidx125)
SU(1):   renamable $d2, renamable $d1 = LDPDi renamable $x25, 35 :: (dereferenceable load 8 from %ir.t), (dereferenceable load 8 from %ir.tmax)
SU(6):   $x0 = ORRXrs $xzr, $x20, 0
SU(7):   $x1 = ORRXrs $xzr, $x22, 0
SU(2):   renamable $d0 = FSUBDrr renamable $d0, renamable $d1
SU(4):   renamable $d1 = FMULDrr renamable $d0, renamable $d8
SU(3):   STRDui renamable $d0, renamable $x25, 36 :: (store 8 into %ir.t)
SU(5):   renamable $d1 = FDIVDrr renamable $d1, renamable $d2

********** MI Scheduling **********
main:%bb.39 if.then116
  From: renamable $d0, renamable $d1 = LDPDi renamable $x25, 20 :: (dereferenceable load 8 from %ir.arrayidx117, align 16), (dereferenceable load 8 from %ir.arrayidx118)
    To: BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w0
 RegionInstrs: 11
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0, renamable $d1 = LDPDi renamable $x25, 20 :: (dereferenceable load 8 from %ir.arrayidx117, align 16), (dereferenceable load 8 from %ir.arrayidx118)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d0
    SU(7): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d1
SU(1):   renamable $d2 = LDRDui renamable $x25, 22 :: (dereferenceable load 8 from %ir.arrayidx120, align 16)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(5): Data Latency=4 Reg=$d2
SU(2):   $d8 = FMOVXDr $x28
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(7): Data Latency=1 Reg=$d8
SU(3):   renamable $d3 = LDRDui renamable $x25, 35 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(8): Data Latency=4 Reg=$d3
SU(4):   renamable $d0 = FADDDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d0
    SU(0): Data Latency=4 Reg=$d1
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$d0
    SU(7): Anti Latency=0
SU(5):   renamable $d0 = FADDDrr renamable $d0, renamable $d2
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$d0
    SU(1): Data Latency=4 Reg=$d2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(7): Data Latency=1 Reg=$d0
    SU(6): Data Latency=1 Reg=$d0
SU(6):   STRDui renamable $d0, renamable $x25, 36 :: (store 8 into %ir.t)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=$d0
SU(7):   renamable $d1 = FMULDrr renamable $d0, renamable $d8
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 2
  Predecessors:
    SU(5): Data Latency=1 Reg=$d0
    SU(4): Anti Latency=0
    SU(2): Data Latency=1 Reg=$d8
    SU(0): Out  Latency=1
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$d1
SU(8):   renamable $d1 = FDIVDrr renamable $d1, renamable $d3
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 1
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$d1
    SU(3): Data Latency=4 Reg=$d3
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(9):   $x0 = ORRXrs $xzr, $x20, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(10):   $x1 = ORRXrs $xzr, $x21, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w0
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(10): Ord  Latency=1 Artificial
    SU(9): Ord  Latency=1 Artificial
    SU(8): Ord  Latency=1 Artificial
    SU(5): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 8
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 9 10 
  TopQ.A RemainingLatency 0 + 0c > CritPath 8
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0, renamable $d1 = LDPDi renamable $x25, 20 :: (dereferenceable load 8 from %ir.arrayidx117, align 16), (dereferenceable load 8 from %ir.arrayidx118)
  Ready @0c
  TopQ.A BotLatency SU(0) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 10 1 2 3 9 
  TopQ.A RemainingLatency 0 + 1c > CritPath 8
  Cand SU(10) ORDER                              
  Cand SU(1) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d2 = LDRDui renamable $x25, 22 :: (dereferenceable load 8 from %ir.arrayidx120, align 16)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 10 9 2 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 8
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(2) TOP-PATH                  3 cycles 
  Cand SU(3) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d3 = LDRDui renamable $x25, 35 :: (dereferenceable load 8 from %ir.tmax)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 10 9 2 
  TopQ.A RemainingLatency 0 + 3c > CritPath 8
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(2) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $d8 = FMOVXDr $x28
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 9 4 
  TopQ.A RemainingLatency 0 + 4c > CritPath 8
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(4) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $d0 = FADDDrr renamable $d0, renamable $d1
  Ready @4c
  TopQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 9 5 
  TopQ.A RemainingLatency 0 + 5c > CritPath 8
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(5) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $d0 = FADDDrr renamable $d0, renamable $d2
  Ready @5c
  TopQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 9 7 6 
  TopQ.A RemainingLatency 0 + 6c > CritPath 8
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(7) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) renamable $d1 = FMULDrr renamable $d0, renamable $d8
  Ready @6c
  TopQ.A TopLatency SU(7) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 9 6 8 
  TopQ.A RemainingLatency 0 + 7c > CritPath 8
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(8) ORDER                              
Pick Top ORDER     
Scheduling SU(8) renamable $d1 = FDIVDrr renamable $d1, renamable $d3
  Ready @7c
  TopQ.A TopLatency SU(8) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 9 6 
  TopQ.A RemainingLatency 0 + 8c > CritPath 8
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(9) $x0 = ORRXrs $xzr, $x20, 0
  Ready @8c
  TopQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 6 
  TopQ.A RemainingLatency 0 + 9c > CritPath 8
  Cand SU(10) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(10) $x1 = ORRXrs $xzr, $x21, 0
  Ready @9c
  TopQ.A BotLatency SU(10) 1c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) STRDui renamable $d0, renamable $x25, 36 :: (store 8 into %ir.t)
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.39 ***
SU(0):   renamable $d0, renamable $d1 = LDPDi renamable $x25, 20 :: (dereferenceable load 8 from %ir.arrayidx117, align 16), (dereferenceable load 8 from %ir.arrayidx118)
SU(1):   renamable $d2 = LDRDui renamable $x25, 22 :: (dereferenceable load 8 from %ir.arrayidx120, align 16)
SU(3):   renamable $d3 = LDRDui renamable $x25, 35 :: (dereferenceable load 8 from %ir.tmax)
SU(2):   $d8 = FMOVXDr $x28
SU(4):   renamable $d0 = FADDDrr renamable $d0, renamable $d1
SU(5):   renamable $d0 = FADDDrr renamable $d0, renamable $d2
SU(7):   renamable $d1 = FMULDrr renamable $d0, renamable $d8
SU(8):   renamable $d1 = FDIVDrr renamable $d1, renamable $d3
SU(9):   $x0 = ORRXrs $xzr, $x20, 0
SU(10):   $x1 = ORRXrs $xzr, $x21, 0
SU(6):   STRDui renamable $d0, renamable $x25, 36 :: (store 8 into %ir.t)

Fixup kills for %bb.39
********** MI Scheduling **********
main:%bb.40 if.else130
  From: renamable $w8 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 1, %bb.42, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 8, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 1, %bb.42, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 8, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.40 ***
SU(0):   renamable $w8 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri renamable $w8, 8, 0, implicit-def $nzcv

Fixup kills for %bb.40
********** MI Scheduling **********
main:%bb.41 if.then133
  From: renamable $d0, renamable $d1 = LDPDi renamable $x25, 26 :: (dereferenceable load 8 from %ir.arrayidx134, align 16), (dereferenceable load 8 from %ir.arrayidx135)
    To: B %bb.44
 RegionInstrs: 11
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0, renamable $d1 = LDPDi renamable $x25, 26 :: (dereferenceable load 8 from %ir.arrayidx134, align 16), (dereferenceable load 8 from %ir.arrayidx135)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d0
    SU(7): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d1
SU(1):   renamable $d2 = LDRDui renamable $x25, 28 :: (dereferenceable load 8 from %ir.arrayidx137, align 16)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(5): Data Latency=4 Reg=$d2
SU(2):   $d3 = FMOVXDr $x28
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(7): Data Latency=1 Reg=$d3
SU(3):   renamable $d4 = LDRDui renamable $x25, 35 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(8): Data Latency=4 Reg=$d4
SU(4):   renamable $d0 = FSUBDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d0
    SU(0): Data Latency=4 Reg=$d1
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$d0
    SU(7): Anti Latency=0
SU(5):   renamable $d0 = FSUBDrr renamable $d0, renamable $d2
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$d0
    SU(1): Data Latency=4 Reg=$d2
  Successors:
    SU(7): Data Latency=1 Reg=$d0
    SU(6): Data Latency=1 Reg=$d0
SU(6):   STRDui renamable $d0, renamable $x25, 36 :: (store 8 into %ir.t)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=$d0
SU(7):   renamable $d1 = FMULDrr renamable $d0, renamable $d3
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(5): Data Latency=1 Reg=$d0
    SU(4): Anti Latency=0
    SU(2): Data Latency=1 Reg=$d3
    SU(0): Out  Latency=1
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$d1
SU(8):   renamable $d1 = FDIVDrr renamable $d1, renamable $d4
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$d1
    SU(3): Data Latency=4 Reg=$d4
SU(9):   $x0 = ORRXrs $xzr, $x20, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(10):   $x1 = ORRXrs $xzr, $x23, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
ExitSU:   B %bb.44
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 9 10 
  TopQ.A RemainingLatency 0 + 0c > CritPath 7
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0, renamable $d1 = LDPDi renamable $x25, 26 :: (dereferenceable load 8 from %ir.arrayidx134, align 16), (dereferenceable load 8 from %ir.arrayidx135)
  Ready @0c
  TopQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 10 1 2 3 9 
  TopQ.A RemainingLatency 0 + 1c > CritPath 7
  Cand SU(10) ORDER                              
  Cand SU(1) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d2 = LDRDui renamable $x25, 28 :: (dereferenceable load 8 from %ir.arrayidx137, align 16)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 10 9 2 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 7
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(2) TOP-PATH                  2 cycles 
  Cand SU(3) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d4 = LDRDui renamable $x25, 35 :: (dereferenceable load 8 from %ir.tmax)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 10 9 2 
  TopQ.A RemainingLatency 0 + 3c > CritPath 7
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(2) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $d3 = FMOVXDr $x28
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 9 4 
  TopQ.A RemainingLatency 0 + 4c > CritPath 7
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(4) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $d0 = FSUBDrr renamable $d0, renamable $d1
  Ready @4c
  TopQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 9 5 
  TopQ.A RemainingLatency 0 + 5c > CritPath 7
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(5) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $d0 = FSUBDrr renamable $d0, renamable $d2
  Ready @5c
  TopQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 9 7 6 
  TopQ.A RemainingLatency 0 + 6c > CritPath 7
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(7) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) renamable $d1 = FMULDrr renamable $d0, renamable $d3
  Ready @6c
  TopQ.A TopLatency SU(7) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 9 6 8 
  TopQ.A RemainingLatency 0 + 7c > CritPath 7
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) STRDui renamable $d0, renamable $x25, 36 :: (store 8 into %ir.t)
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 9 8 
  TopQ.A RemainingLatency 0 + 8c > CritPath 7
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(8) ORDER                              
Pick Top ORDER     
Scheduling SU(8) renamable $d1 = FDIVDrr renamable $d1, renamable $d4
  Ready @8c
  TopQ.A TopLatency SU(8) 7c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 9 
  TopQ.A RemainingLatency 0 + 9c > CritPath 7
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
Pick Top ORDER     
Scheduling SU(9) $x0 = ORRXrs $xzr, $x20, 0
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) $x1 = ORRXrs $xzr, $x23, 0
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.41 ***
SU(0):   renamable $d0, renamable $d1 = LDPDi renamable $x25, 26 :: (dereferenceable load 8 from %ir.arrayidx134, align 16), (dereferenceable load 8 from %ir.arrayidx135)
SU(1):   renamable $d2 = LDRDui renamable $x25, 28 :: (dereferenceable load 8 from %ir.arrayidx137, align 16)
SU(3):   renamable $d4 = LDRDui renamable $x25, 35 :: (dereferenceable load 8 from %ir.tmax)
SU(2):   $d3 = FMOVXDr $x28
SU(4):   renamable $d0 = FSUBDrr renamable $d0, renamable $d1
SU(5):   renamable $d0 = FSUBDrr renamable $d0, renamable $d2
SU(7):   renamable $d1 = FMULDrr renamable $d0, renamable $d3
SU(6):   STRDui renamable $d0, renamable $x25, 36 :: (store 8 into %ir.t)
SU(8):   renamable $d1 = FDIVDrr renamable $d1, renamable $d4
SU(9):   $x0 = ORRXrs $xzr, $x20, 0
SU(10):   $x1 = ORRXrs $xzr, $x23, 0

Fixup kills for %bb.41
********** MI Scheduling **********
main:%bb.42 if.else142
  From: renamable $w8 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 1, %bb.45, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 10, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 1, %bb.45, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 10, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.42 ***
SU(0):   renamable $w8 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri renamable $w8, 10, 0, implicit-def $nzcv

Fixup kills for %bb.42
********** MI Scheduling **********
main:%bb.43 if.then145
  From: renamable $d0, renamable $d1 = LDPDi renamable $x25, 27 :: (dereferenceable load 8 from %ir.arrayidx146), (dereferenceable load 8 from %ir.arrayidx147, align 16)
    To: End RegionInstrs: 9
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0, renamable $d1 = LDPDi renamable $x25, 27 :: (dereferenceable load 8 from %ir.arrayidx146), (dereferenceable load 8 from %ir.arrayidx147, align 16)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d0
    SU(5): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d1
SU(1):   $d2 = FMOVXDr $x28
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(5): Data Latency=1 Reg=$d2
SU(2):   renamable $d3 = LDRDui renamable $x25, 35 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(6): Data Latency=4 Reg=$d3
SU(3):   renamable $d0 = FADDDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d0
    SU(0): Data Latency=4 Reg=$d1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(5): Data Latency=1 Reg=$d0
    SU(4): Data Latency=1 Reg=$d0
    SU(5): Anti Latency=0
SU(4):   STRDui renamable $d0, renamable $x25, 36 :: (store 8 into %ir.t)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=$d0
SU(5):   renamable $d1 = FMULDrr renamable $d0, renamable $d2
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1 Reg=$d0
    SU(3): Anti Latency=0
    SU(1): Data Latency=1 Reg=$d2
    SU(0): Out  Latency=1
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$d1
SU(6):   renamable $d1 = FDIVDrr renamable $d1, renamable $d3
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$d1
    SU(2): Data Latency=4 Reg=$d3
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(7):   $x0 = ORRXrs $xzr, $x20, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(8):   $x1 = ORRXrs $xzr, $x24, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 7 8 
  TopQ.A RemainingLatency 0 + 0c > CritPath 7
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0, renamable $d1 = LDPDi renamable $x25, 27 :: (dereferenceable load 8 from %ir.arrayidx146), (dereferenceable load 8 from %ir.arrayidx147, align 16)
  Ready @0c
  TopQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 8 1 2 7 
  TopQ.A RemainingLatency 0 + 1c > CritPath 7
  Cand SU(8) ORDER                              
  Cand SU(1) TOP-PATH                  3 cycles 
  Cand SU(2) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d3 = LDRDui renamable $x25, 35 :: (dereferenceable load 8 from %ir.tmax)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 8 1 7 
  TopQ.A RemainingLatency 0 + 2c > CritPath 7
  Cand SU(8) ORDER                              
  Cand SU(1) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $d2 = FMOVXDr $x28
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 8 7 
  TopQ.A RemainingLatency 0 + 3c > CritPath 7
  Cand SU(8) ORDER                              
  Cand SU(7) ORDER                              
Pick Top ORDER     
Scheduling SU(7) $x0 = ORRXrs $xzr, $x20, 0
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 3 
  TopQ.A RemainingLatency 0 + 4c > CritPath 7
  Cand SU(8) ORDER                              
  Cand SU(3) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d0 = FADDDrr renamable $d0, renamable $d1
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 4 5 
  TopQ.A RemainingLatency 0 + 5c > CritPath 7
  Cand SU(8) ORDER                              
  Cand SU(5) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $d1 = FMULDrr renamable $d0, renamable $d2
  Ready @5c
  TopQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 4 6 
  TopQ.A RemainingLatency 0 + 6c > CritPath 7
  Cand SU(8) ORDER                              
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) renamable $d1 = FDIVDrr renamable $d1, renamable $d3
  Ready @6c
  TopQ.A TopLatency SU(6) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 4 
  TopQ.A RemainingLatency 0 + 7c > CritPath 7
  Cand SU(8) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(8) $x1 = ORRXrs $xzr, $x24, 0
  Ready @7c
  TopQ.A BotLatency SU(8) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) STRDui renamable $d0, renamable $x25, 36 :: (store 8 into %ir.t)
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.43 ***
SU(0):   renamable $d0, renamable $d1 = LDPDi renamable $x25, 27 :: (dereferenceable load 8 from %ir.arrayidx146), (dereferenceable load 8 from %ir.arrayidx147, align 16)
SU(2):   renamable $d3 = LDRDui renamable $x25, 35 :: (dereferenceable load 8 from %ir.tmax)
SU(1):   $d2 = FMOVXDr $x28
SU(7):   $x0 = ORRXrs $xzr, $x20, 0
SU(3):   renamable $d0 = FADDDrr renamable $d0, renamable $d1
SU(5):   renamable $d1 = FMULDrr renamable $d0, renamable $d2
SU(6):   renamable $d1 = FDIVDrr renamable $d1, renamable $d3
SU(8):   $x1 = ORRXrs $xzr, $x24, 0
SU(4):   STRDui renamable $d0, renamable $x25, 36 :: (store 8 into %ir.t)

Fixup kills for %bb.43
Fixup kills for %bb.44
********** MI Scheduling **********
main:%bb.45 for.inc155
  From: renamable $w8 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
    To: B %bb.37
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STURWi renamable $w8, $fp, -132 :: (store 4 into %ir.i)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.37
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w8, $fp, -132 :: (store 4 into %ir.i)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   renamable $w8 = LDURWi $fp, -132 :: (dereferenceable load 4 from %ir.i)
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
SU(2):   STURWi renamable $w8, $fp, -132 :: (store 4 into %ir.i)

Fixup kills for %bb.45
